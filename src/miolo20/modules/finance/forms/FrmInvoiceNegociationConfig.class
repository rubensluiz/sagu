<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Formulário de negociação de títulos
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Samuel Koch [samuel@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 10/02/2009
 *
 **/

/**
 * Form to manipulate a message
 **/
class FrmInvoiceNegociationConfig extends SManagementForm
{

    /**
     * Class constructor
     **/
    public function __construct()
    {
        $module = SAGU::getFileModule(__FILE__);        
        parent::__construct(new FinInvoiceNegociationConfig(), array('financeInformationId'), null, _M('Configuração de antecipação e negociação de títulos', $module));
        
        //Desabilita as ações da toolbar
        $this->toolbar->disableButton(MToolbar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolbar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolbar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolbar::BUTTON_PRINT);     
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        // Operacao
        $operationValue = SAGU::NVL($this->getRequestValue('operation', $data->operation), 'A' );
        $operation = new MSelection('operation', $operationValue, _M('Operação', $module));
        $operation->options = FinNegotiation::listRecordType();
        $operation->setAutoPostBack(true);
        $fields[] = $operation;

        //Search data
        $data = FinInvoiceNegociationConfig::getInstanceByOperation($operationValue);
        
        // Conta bancária
        $business = new BusinessFinanceBusBankAccount();
        $bankAccountLabel = new MText('bankAccountLabel', _M('Conta bancária',$module).':');
        $bankAccountLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $bankAccountLabel->setClass('m-caption m-caption-required');
        $bankAccountsList = $business->listBankAccount();

        if( !is_array($bankAccountsList) )
        {
            $msg  = _M('Não há contas bancárias definidas. Registre uma conta bancária para poder executar a operação.',$module);
            $opts   = array('event' => 'tbBtnInsert');
            $goto = $MIOLO->getActionURL($module, 'main:register:bankAccount', null, $opts);
            $caption = _M('Erro', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    
        $value = SAGU::NVL($data->bankAccountId, $this->getRequestValue('bankAccountId'), SAGU::getParameter('BASIC', 'DEFAULT_BANK_ACCOUNT_ID'));
        $bankAccountId = new MComboBox('bankAccountId', $value, '', $bankAccountsList, '', '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $bankAccountId->setJsHint(_M('Informe a conta bancária para a qual serão gerados os títulos originados a partir da negociação.', $module));
        $validators[] = new MIntegerValidator('bankAccountId', _M('Conta bancária',$module), 'required');
        $hctBankAccount = new MHContainer('hctBankAccount', array($bankAccountLabel, $bankAccountId));
        $hctBankAccount->setShowLabel(true);
        $fields[]   = $hctBankAccount;
        
        // Operação
        $operationLabel = new MText('operationLabel', _M('Operação', $module).':');
        $operationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $operationLabel->setClass('m-caption m-caption-required');
        $value = SAGU::NVL($data->operationId, $this->getFormValue('operationId'));
        $operationId = new MLookupTextField('operationId', $value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'operationDescription', $module, 'Operation', null, null, true);
        $operationId->setJsHint(_M('Informe a operação que será utilizada nos lançamentos dos títulos originados a partir da negociação.',$module));
        $validators[] = new MIntegerValidator('operationId', _M('Operação', $module), 'required');
        $operationDescription = new MTextField('operationDescription', $this->getFormValue('operationDescription',$data->operationDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $operationDescription->setReadOnly(true);
        $operationDescription->setJsHint(_M('Descrição da operação', $module));
        $fields[] = new MHContainer('hctOperation', array($operationLabel, $operationId, $operationDescription));
        
        // Centro de custo
        $costCenterLabel = new MText('costCenterLabel', _M('Centro de custo',$module).':');
        $costCenterLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $costCenterLabel->setClass('m-caption m-caption-required');
        $value = SAGU::NVL( $data->costCenterId, $this->getFormValue('costCenterId') );
        $costCenterId = new MLookupTextField('costCenterId', $value, null,SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'costCenterDescription', 'accountancy', 'CostCenter', null, null, true);
        $costCenterId->setJsHint(_M('Informe o centro de custo para o qual serão gerados os títulos originados a partir da negociação.', $module));
        $validators[] = new MRegexpValidator('costCenterId',_M('Centro de custo',$module), '^[0-9]+(\.[0-9]+)*$', 'required');                
        $costCenterDescription = new MTextField('costCenterDescription',$this->getFormValue('costCenterDescription',$data->costCenterDescription), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $costCenterDescription->setReadOnly(true);
        $costCenterDescription->setJsHint(_M('Descrição do centro de custo', $module));
        $hctCostCenter = new MHContainer('hctCostCenter', array($costCenterLabel, $costCenterId, $costCenterDescription));
        $hctCostCenter->setShowLabel(true);
        $fields[]   = $hctCostCenter;
        
        //Política
        $policyLabel = new MText('policyLabel', _M('Política', $module). ':');
        $policyLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $policyLabel->setClass('m-caption m-caption-required');
        $value = SAGU::NVL( $data->policyId, $this->getFormValue('policyId') );
        $policyId    = new MLookupTextField('policyId', $value, null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'policyDescription', 'finance', 'Policy', null, null, true);                                         
        $policyId->setJsHint(_M('Informe a política para o qual serão gerados os títulos originados a partir da negociação.', $module));
        $validators[] = new MIntegerValidator('policyId',_M('Política', $module), 'required');
        $policyDescription = new MTextField('policyDescription', $this->getFormValue('policyDescription',$data->policyDescription), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $policyDescription->setReadOnly(true);
        $policyDescription->setJsHint(_M('Descrição da política', $module));
        $hctPolicy = new MHContainer('hctPolicy', array($policyLabel, $policyId, $policyDescription));
        $hctPolicy->setShowLabel(true);
        $fields[]   = $hctPolicy;
        
        if ( $operationValue == 'N' )
        {
            // Número de parcelas
            $parcelsNumberLabel = ( $this->getFormValue('operation') == 'N' ) ? 
            $parcelsNumberLabel = new MText('parcelsNumberLabel', _M('Número máximo de parcelas',$module).':') : 
            $parcelsNumberLabel = new MText('parcelsNumberLabel', _M('Número de parcelas',$module).':');
            $parcelsNumberLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $parcelsNumberLabel->setClass('m-caption m-caption-required');
            $value = SAGU::NVL( $data->parcelsNumber, $this->getFormValue('parcelsNumber') );
            $parcelsNumber = new MTextField('parcelsNumber', $value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $parcelsNumber->setJsHint(_M('Informe o número de parcelas que serão geradas na negociação.', $module));
            $validators[] = new MIntegerValidator('parcelsNumber',_M('Número de parcelas',$module), 'required');
            $hctparcelsNumber = new MHContainer('hctparcelsNumber', array($parcelsNumberLabel, $parcelsNumber));
            $hctparcelsNumber->setShowLabel(true);
            $fields[]   = $hctparcelsNumber;
        }
        
        // Valor mínimo para permitir liberação de juros e multas
        $minValueForFinesAndInterestReleaseLabel = new MText('minValueForFinesAndInterestReleaseLabel', _M('Valor mínimo para permitir liberação de juros e multas',$module).':');
        $minValueForFinesAndInterestReleaseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $minValueForFinesAndInterestReleaseLabel->setClass('m-caption m-caption-required');
        $value = SAGU::NVL( $data->minValueForFinesAndInterestRelease, $this->getFormValue('minValueForFinesAndInterestRelease'), '0' );
        $minValueForFinesAndInterestRelease = new MTextField('minValueForFinesAndInterestRelease', $value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $minValueForFinesAndInterestRelease->setJsHint(_M('Informe o valor mínimo para permitir liberação de juros e multas', $module));
        $validators[] = new MIntegerValidator('minValueForFinesAndInterestRelease',_M('Valor mínimo para permitir liberação de juros e multas',$module), 'required');
        $hctMinValueForFinesAndInterestRelease = new MHContainer('hctMinValueForFinesAndInterestRelease', array($minValueForFinesAndInterestReleaseLabel, $minValueForFinesAndInterestRelease));
        $hctMinValueForFinesAndInterestRelease->setShowLabel(true);
        $fields[]   = $hctMinValueForFinesAndInterestRelease;
        
        // Valor máximo negociável por usuário não administrador
        $maxValueForNonAdminsLabel = new MText('maxValueForNonAdminsLabel', _M('Valor máximo negociável por usuário não administrador',$module).':');
        $maxValueForNonAdminsLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $maxValueForNonAdminsLabel->setClass('m-caption m-caption-required');
        $value = SAGU::NVL( $data->maxValueForNonAdmins, $this->getFormValue('maxValueForNonAdmins'), '10000' );
        $maxValueForNonAdmins = new MTextField('maxValueForNonAdmins', $value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $maxValueForNonAdmins->setJsHint(_M('Informe o valor máximo negociável por usuário não administrador', $module));
        $validators[] = new MIntegerValidator('maxValueForNonAdmins',_M('Valor máximo negociável por usuário não administrador',$module), 'required');
        $hctMaxValueForNonAdmins = new MHContainer('hctMaxValueForNonAdmins', array($maxValueForNonAdminsLabel, $maxValueForNonAdmins));
        $hctMaxValueForNonAdmins->setShowLabel(true);
        $fields[]   = $hctMaxValueForNonAdmins;
        
        if ( $operationValue == 'N' )
        {
            // Taxa de negociação
            $negotiationFeeLabel = new MText('negotiationFeeLabel', _M('Taxa de negociação',$module).':');
            $negotiationFeeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $negotiationFeeLabel->setClass('m-caption m-caption-required');
            $value = SAGU::NVL( $data->negotiationFee, $this->getFormValue('negotiationFee'), '0' );
            $negotiationFee = new MTextField('negotiationFee', $value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $negotiationFee->setJsHint(_M('Informe o valor da taxa de negociação', $module));
            $validators[] = new MIntegerValidator('negotiationFee',_M('Taxa de negociação',$module), 'required');
            $hctNegotiationFee = new MHContainer('hctNegotiationFee', array($negotiationFeeLabel, $negotiationFee));
            $hctNegotiationFee->setShowLabel(true);
            $fields[]   = $hctNegotiationFee;
        }
        
        // Número de dias para vencimento
        $maturityDaysLabel = new MText('maturityDaysLabel', _M('Dias para vencimento',$module).':');
        $maturityDaysLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $maturityDaysLabel->setClass('m-caption m-caption-required');
        $value = SAGU::NVL( $data->maturityDays, $this->getFormValue('maturityDays'), '5' );
        $maturityDays = new MTextField('maturityDays', $value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $maturityDays->setJsHint(_M('Informe o número de dias para vencimento da negociação', $module));
        $validators[] = new MIntegerValidator('maturityDays',_M('Dias para vencimento',$module), 'required');
        $hctMaturityDays = new MHContainer('hctMaturityDays', array($maturityDaysLabel, $maturityDays));
        $hctMaturityDays->setShowLabel(true);
        $fields[]   = $hctMaturityDays;

        if ( $operationValue == 'N' )
        {
            // Parcela de entrada
            $percentValueEntryLabel = new MText('percentValueEntryLabel', _M('Parcela de entrada', $module).':');
            $percentValueEntryLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $value = SAGU::NVL( $data->percentValueEntry, $this->getFormValue('percentValueEntry') );
            $percentValueEntry = new MTextField('percentValueEntry', $value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), '%');
            $percentValueEntry->setJsHint(_M('Percentual da divida que deve ser paga na parcela de entrada', $module));
            $validators[] = new MIntegerValidator('percentValueEntry',_M('Parcela de entrada', $module), 'required');
            $hctpercentValueEntry = new MHContainer('hctpercentValueEntry', array($percentValueEntryLabel, $percentValueEntry));
            $hctpercentValueEntry->setShowLabel(true);
            $fields[] = $hctpercentValueEntry;
        }
        
        parent::defineFields($fields, $validators, $data);
    }

    public function tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);        
        $data = $this->getData();
        
        $invoiceNegociationConfig = new FinInvoiceNegociationConfig();
        $invoiceNegociationConfig->operation = $data->operation;
        $invoiceNegociationConfig->bankAccountId = $data->bankAccountId;
        $invoiceNegociationConfig->operationId = $data->operationId;
        $invoiceNegociationConfig->costCenterId = $data->costCenterId;
        $invoiceNegociationConfig->policyId = $data->policyId;
        $invoiceNegociationConfig->parcelsNumber = $data->parcelsNumber ? $data->parcelsNumber : 1;
        $invoiceNegociationConfig->minValueForFinesAndInterestRelease = $data->minValueForFinesAndInterestRelease;
        $invoiceNegociationConfig->maxValueForNonAdmins = $data->maxValueForNonAdmins;
        $invoiceNegociationConfig->negotiationFee = $data->negotiationFee ? $data->negotiationFee : 0;
        $invoiceNegociationConfig->maturityDays = $data->maturityDays;        
        $invoiceNegociationConfig->percentValueEntry = $data->percentValueEntry ? $data->percentValueEntry : 0;
        
        if ( $invoiceNegociationConfig->save() )
        {
            $caption = _M('Informação', $module);
            SAGU::information(SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED'), $MIOLO->getActionURL($module, $action, null, $opts));
        }
    }
}
?>
