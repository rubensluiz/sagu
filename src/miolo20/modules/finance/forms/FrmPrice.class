<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Price form
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 16/11/2005
 */

/**
 * Form to manipulate a price
 */
class FrmPrice extends SManagementForm
{
    /**
     * Class constructor
     */
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();

        // If is the first access to form, clear subdetail session data
        if ( !$MIOLO->page->isPostBack() )
        {
            MSubDetail::clearData('subPricePolicy');
        }

        parent::__construct(new FinPrice(), array('courseId', 'courseVersion', 'turnId', 'unitId', 'startDate'), 'BusPrice');
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $fields[] = new MHiddenField('backTo', MIOLO::_REQUEST('backTo'));

        if (in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)))
        {
            $busPrice = new BusinessFinanceBusPrice();

            // Obtém os dados
            $courseId = MIOLO::_REQUEST('courseId');
            $courseVersion = MIOLO::_REQUEST('courseVersion');
            $turnId = MIOLO::_REQUEST('turnId');
            $unitId = MIOLO::_REQUEST('unitId');
            $startDate = MIOLO::_REQUEST('startDate');
            $endDate = MIOLO::_REQUEST('endDate');
            $value = MIOLO::_REQUEST('value');

            $data = $busPrice->getPrice($courseId, $courseVersion, $turnId, $unitId, $startDate);

            $MHStartDate = new MHiddenField('oldStartDate', $data->startDate);
            $fields[] = $MHStartDate;

            $MHEndDate = new MHiddenField('oldEndDate', $data->endDate);
            $fields[] = $MHEndDate;

            $filters = new stdClass();
            $filters->courseId = $courseId;
            $filters->courseVersion = $courseVersion;
            $filters->turnId = $turnId;
            $filters->unitId = $unitId;
            $filters->startDate = $startDate;

            $busPricePolicy = new BusinessFinanceBusPricePolicy();
            $dataPricePolicy = $busPricePolicy->searchPricePolicy($filters, true);
        }

        /*
         * Course occurrence lookup
         */
        $lkpValue = array(
            $this->GetFormValue('courseId', $data->courseId),
            $this->GetFormValue('courseVersion', $data->courseVersion),
            $this->GetFormValue('turnId', $data->turnId),
            $this->GetFormValue('unitId', $data->unitId)
        );
        $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue);
        $courseOccurrenceLookup->showRequiredLabel();
        $validators[] = new MRequiredValidator('courseId', _M('Curso', $module));
        $validators[] = new MIntegerValidator('courseVersion', _M('Versão do curso', $module));
        $validators[] = new MIntegerValidator('turnId', _M('Turno', $module));
        $validators[] = new MIntegerValidator('unitId', _M('Unidade', $module));
        $fields[] = $courseOccurrenceLookup;

        if ($function == SForm::FUNCTION_UPDATE || $function == SForm::FUNCTION_DELETE)
        {
            $busCourse = new BusinessAcademicBusCourse();
            $data->courseName = $busCourse->getCourse($courseId)->name;
            
            $busTurn = new BusinessBasicBusTurn();
            $data->turnDescription = $busTurn->getTurn($turnId)->description;
            
            $busUnit = new BusinessBasicBusUnit();
            $data->unitDescription = $busUnit->getUnit($unitId)->description;

            $courseOccurrenceLookup->setReadOnly();
        }

        $fields[] = new MSeparator();
        $fields[] = new MSeparator('<hr>');
        $fields[] = new MSeparator();

        $startDate = new MCalendarField('startDate', $this->getFormValue('startDate', $data->startDate), _M('Data inicial', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $startDate->setValidator(new MDATEDMYValidator('startDate', _M('Data inicial', $module), 'required'));
        $startDate->setJsHint(_M('Informe a data inicial', $module));
        $validators[] = new MRequiredValidator('startDate', _M('Data inicial', $module));
        $fields[] = $startDate;
        
        if ( count($dataPricePolicy) > 0 )
        {
            $startDate->setReadOnly(true);
        }

        $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), _M('Data final', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $endDate->setValidator(new MDATEDMYValidator('endDate', _M('Data final', $module), 'required'));
        $endDate->setJsHint(_M('Informe a data de término', $module));
        $fields[] = $endDate;
        $validators[] = new MRequiredValidator('endDate', _M('Data final', $module));

        $value = new MTextField('value', SAGU::formatNumber($this->getFormValue('value', $data->value)), _M('Valor', $module), SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'), _M('Ex.: 1.00', $module));
        $value->setJsHint(_M('Informe o valor', $module));
        $value->addAttribute('onchange', SForm::getAjaxAction('formatValue', 'divValue', false));
        $validators[] = new MFloatValidator('value', _M('Valor',$module), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), 'required');
        $fields[] = $value;
        
        $fields[] = new MDiv('divValue');

        // Obtain the preferred banks
        $busBank = new BusinessFinanceBusBankAccount();
        $bankOptions = $busBank->getBankAccountWithInvoiceInfo();
        $bankInfoLabel = new MText('bankAccountIdLabel', _M('Conta bancária', $module).':');
        $bankInfoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $bankInfoLabel->setClass('m-caption m-caption-required');
        $bankInfo = new MSelection('bankAccountId', $this->getFormValue('bankAccountId', $data->bankAccountId), null, $bankOptions);
        $bankInfo->setJsHint(_M('Selecione o banco de preferência', $module));
        $validators[] = new MRequiredValidator('bankAccountId', _M('Conta bancária', $module));
        $fields[] = new MHContainer('hctBankInfo', array($bankInfoLabel, $bankInfo));

        // value is fixed
        $valueIsFixed = new MSelection('valueIsFixed', $this->getFormValue('valueIsFixed', $data->valueIsFixed), _M('Valor é fixo', $module), SAGU::listYesNo());
        $validators[] = new MRequiredValidator('valueIsFixed', _M('Valor é fixo', $module));
        $fields[] = $valueIsFixed;

        // First parcel at sight
        $firstParcelAtSightValue = $this->GetFormValue('firstParcelAtSight', $data->firstParcelAtSight);
        $firstParcelAtSightValue = $firstParcelAtSightValue == DB_TRUE ? DB_TRUE : DB_FALSE;
        $FPAS = new MRadioButtonGroup('firstParcelAtSight', _M('Primeira parcela à vista para veteranos', $module), SAGU::listYesNo(1));
        $FPAS->setDisposition('horizontal');
        $FPAS->setValue($firstParcelAtSightValue);
        $FPAS->showRequiredLabel = true;
        $fields[] = $FPAS;
        
        // First parcel at sight for Freshman
        $firstParcelAtSightFreshmanValue = $this->GetFormValue('firstParcelAtSightFreshman', $data->firstParcelAtSightFreshman);
        $firstParcelAtSightFreshmanValue = $firstParcelAtSightFreshmanValue == DB_TRUE ? DB_TRUE : DB_FALSE;
        $FPASF = new MRadioButtonGroup('firstParcelAtSightFreshman', _M('Primeira parcela à vista para calouros', $module), SAGU::listYesNo(1));
        $FPASF->setDisposition('horizontal');
        $FPASF->setValue($firstParcelAtSightFreshmanValue);
        $FPASF->showRequiredLabel = true;
        $fields[] = $FPASF;
        if ( SAGU::getParameter('BASIC', 'ENABLE_BUSINESS_USER') == '1' )
        {

            $fixedValue = new MTextField('fixedValue', SAGU::formatNumber($this->getFormValue ('fixedValue', $data->fixedValue) ? $this->getFormValue ('fixedValue', $data->fixedValue) : 0), _M('Custo fixo', $module), SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'), _M('Ex.: 1.00', $module));
            $fixedValue->setJsHint(_M('Custo minimo do curso por aluno', $module));
            $validators[] = new MFloatValidator('fixedValue', _M('Custo fixo', $module), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), 'required');
            $fields[] = $fixedValue;

            // Apply changes on first parcel
            $applyChangesOnFirstParcelValue = $this->GetFormValue('applyChangesOnFirstParcel', $data->applyChangesOnFirstParcel);
            $applyChangesOnFirstParcelValue = $applyChangesOnFirstParcelValue == DB_TRUE ? DB_TRUE : DB_FALSE;
            $applyChangesOnFirstParcel = new MRadioButtonGroup('applyChangesOnFirstParcel', _M('Aplicar alterações na primeira parcela', $module), SAGU::listYesNo(1), $applyChangesOnFirstParcelValue);
            $applyChangesOnFirstParcel->setDisposition('horizontal');
            $applyChangesOnFirstParcel->showRequiredLabel = true;
            $fields[] = $applyChangesOnFirstParcel;

            // Parcels number
            if($function == SForm::FUNCTION_INSERT )
            {
                 $data->parcelsNumber = SAGU::getParameter('BASIC', 'DEFAULT_PARCELS_NUMBER');
            }
            $parcelsNumber = new MTextField('parcelsNumber', $this->getFormValue('parcelsNumber', $data->parcelsNumber), _M('Número de parcelas', $module), SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'));
            $parcelsNumber->setJsHint(_M('Número de parcelas', $module));
            $validators[] = new MIntegerValidator('parcelsNumber', _M('Número de parcelas', $module), 'required');
            $fields[] = $parcelsNumber;

            $parcelsTypes['D'] = _M('Dia da matrícula [O dia de vencimento será sempre no mesmo dia que a matrícula foi efetuada]');
            $parcelsTypes['C'] = _M('Configurável');
            
            $optParcelsType = new MRadioButtonGroup('parceltype', _M('Dia de vencimento'), $parcelsTypes, $this->getFormValue('parceltype', SAGU::NVL($data->parceltype, 'C')));
            $optParcelsType->setAutoPostBack(true);
            $validators[] = new MRequiredValidator('parceltype', _M('Dia de vencimento'));
            $fields[] = $optParcelsType;
            
            if( $this->getFormValue('parceltype', SAGU::NVL($data->parceltype, MIOLO::_REQUEST('parceltype'))) != 'D' )
            {    
                // Maturity day
                 if($function == SForm::FUNCTION_INSERT )
                 {
                      $data->maturityDay =  SAGU::getParameter('BASIC', 'MATURITY_DAY');
                 }
                 $maturityDay = new MTextField('maturityDay', $this->getFormValue('maturityDay', $data->maturityDay), _M('Dia', $module), SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'));
                 $maturityDay->setJsHint(_M('Dia de vencimento padrão', $module));
                 $validators[] = new MIntegerValidator('maturityDay', _M('Dia de vencimento', $module), 'required');
                 $fields[] = $maturityDay;
            }
        }
        // Reference number hours
        $referenceNumberHoursText = new MText('referenceNumberHoursText', _M("Se necessário, preencha este campo com uma carga horária de referência que será utilizada para calcular a diferença de valor de um aluno cuja carga horária matriculada seja diferente da carga horária esperada para o período. Por exemplo, suponha que a matrícula de um aluno tenha 60h a mais do que o esperado para a carga horária do período. Se o preço do curso é fixo em R$600,00 e a carga horária de referência é 300h, o aluno terá um valor adicional a pagar que será calculado da seguinte forma: 60h * (R$600,00 / 300h) = R$120,00.", $module));
        $fields[] = $referenceNumberHoursText;
        $referenceNumberHoursField = new MTextField('referenceNumberHours', $this->getFormValue('referenceNumberHours', $data->referenceNumberHours), _M('Carga horária de referência', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $referenceNumberHoursField->setJsHint(_M('Informe a carga horária de referência', $module));
        $validators[] = new MFloatValidator('referenceNumberHours', _M('Informe a carga horária de referência', $module));
        $fields[] = $referenceNumberHoursField;
        
        
        $creditoFeriasDescription = new MText('creditoFeriasDescription', _M('Se a disciplina for oferecida em regime de férias e tem valor diferenciado informe o preço que será cobrado por cada crédito acadêmico.', $module));        
        $creditoFeriasLabel = new MText('creditoFeriasLabel', _M('Valor por crédito acadêmico', $module).':');        
        $valorCreditoFerias = new MTextField('valorCreditoFerias', $data->valorcreditoferias, null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), _M('Ex.: 100.00'));
        $valorCreditoFerias->setJsHint(_M('Informe o valor', $module));
                
        $hctCreditoFerias = new MContainer('hctCreditoFerias', array($creditoFeriasDescription, new MSeparator(), $creditoFeriasLabel, $valorCreditoFerias));
        $fld[] = $hctCreditoFerias;
        
        $fields[] = new MBaseGroup('bgValorCreditoFerias', 'Preço para disciplina em regime de férias', $fld);

        $fields[] = new MSeparator();

        // SubDetail price policy
        $labelPricePolicyId = new MText('pricePolicyIdLabel', _M('Código', $module) . ':');
        $labelPricePolicyId->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $fieldPricePolicyId = new MTextField('pricePolicyId', null, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), '', null, true);
        $hctPricePolicyId = new MHContainer('hctPricePolicyId', array($labelPricePolicyId, $fieldPricePolicyId));
        $hctPricePolicyId->setShowLabel(true);
        $sFields[] = $hctPricePolicyId;

        // Field policy id
        $policyLabel = new MText('policyLabel', _M('Política', $module). ':');
        $policyLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $policyLabel->setClass('m-caption m-caption-required');
        $policyId = new MLookupTextField('policyId', $this->getFormValue('policyId', $data->policyId), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'policyDescription', 'finance', 'Policy', null, null, true);
        $policyId->setJsHint(_M('Informe o código da política', $module));
        $policyDescription = new MTextField('policyDescription', $this->getFormValue('policyDescription',$data->policyDescription), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $policyDescription->setReadOnly(true);
        $policyDescription->setJsHint(_M('Descrição da política', $module));
        $hctPolicy = new MHContainer('hctPolicy', array($policyLabel, $policyId, $policyDescription));
        $hctPolicy->setShowLabel(true);
        $sFields[] = $hctPolicy;

        // Semester
        $labelSemester = new MText('semesterLabel', _M('Período', $module) . ':');
        $labelSemester->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $fieldSemester = new MTextField('semester', null, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $fieldSemester->setJsHint(_M('Informe o número da parcela', $module));
        $hctSemester = new MHContainer('hctSemester', array($labelSemester, $fieldSemester));
        $hctSemester->setShowLabel(true);
        $sFields[] = $hctSemester;

        // Parcel number
        $labelParcelNumber = new MText('parcelNumberLabel', _M('Parcela', $module) . ':');
        $labelParcelNumber->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $fieldParcelNumber = new MTextField('parcelNumber', null, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $fieldParcelNumber->setJsHint(_M('Informe o número da parcela', $module));
        $hctParcelNumber = new MHContainer('hctParcelNumber', array($labelParcelNumber, $fieldParcelNumber));
        $hctParcelNumber->setShowLabel(true);
        $sFields[] = $hctParcelNumber;

        // Columns
        $columns[] = new MGridColumn(_M('Código', $module), 'left', true, null, true, 'pricePolicyId');
        $columns[] = new MGridColumn(_M('Curso', $module), 'left', true, null, false, 'courseId');
        $columns[] = new MGridColumn(_M('Versão', $module), 'left', true, null, false, 'courseVersionId');
        $columns[] = new MGridColumn(_M('Turno', $module), 'left', true, null, false, 'turnId');
        $columns[] = new MGridColumn(_M('Unidade', $module), 'left', true, null, false, 'unitId');
        $columns[] = new MGridColumn(_M('Data', $module), 'left', true, null, false, 'startDate');
        $columns[] = new MGridColumn(_M('Código da política', $module), 'right', true, '10%', true, 'policyId');
        $columns[] = new MGridColumn(_M('Política', $module), 'left', true, '60%', true, 'policyDescription');
        $columns[] = new MGridColumn(_M('Período', $module), 'center', true, '15%', true, 'semester');
        $columns[] = new MGridColumn(_M('Parcela', $module), 'center', true, '15%', true, 'parcelNumber');

        // SubDetail validators
        $valids[] = new MIntegerValidator('policyId', _M('Política', $module), 'required');
        $valids[] = new MIntegerValidator('semester', _M('Período', $module), 'optional');
        $valids[] = new MIntegerValidator('parcelNumber', _M('Parcela', $module), 'optional');

        $fields[] = $sub = new MSubDetail('subPricePolicy', _M('Políticas', $module), $columns, $sFields, true);
        $sub->setValidators($valids);

        // Set data subDetail
        if ( count($dataPricePolicy) > 0 && MIOLO::_REQUEST('__EVENTTARGETVALUE') != 'tbBtnSave:click' )
        {
            MSubDetail::setData($dataPricePolicy, 'subPricePolicy');
        }

        $returnTo = new MHiddenField('returnTo', $this->getFormValue('returnTo', strlen(MIOLO::_request('returnTo')) > 0 ? MIOLO::_request('returnTo') : MIOLO::_request('returnTo', 'GET')));
        $fields[] = $returnTo;

        parent::defineFields($fields, $validators, $data);
    }
    
    public function formatValue($args)
    {
        $MIOLO = MIOLO::getInstance();
        
        $jsCode = " var valor = document.getElementById('value').value;
                    document.getElementById('value').value = valor.replace(',','.'); ";
        
        $MIOLO->page->addAJAXJsCode($jsCode);
        
        return '';
    }

    /*
     * Saves data of the Subdetail
     */
    public function saveDataSubDetail($data, $db)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $ok = true;

        $busPricePolicy = new BusinessFinanceBusPricePolicy();

        // Data subDetail
        $dataSubDetail = $data->subPricePolicy;
        if ( is_array($dataSubDetail) )
        {
            // If function is insert
            if ( $function == SForm::FUNCTION_INSERT )
            {
                foreach ( $dataSubDetail as $sub )
                {
                    // Insert
                    if ( !($sub->removeData) )
                    {
                        $sub->courseId = $data->courseId;
                        $sub->courseVersion = $data->courseVersion;
                        $sub->turnId = $data->turnId;
                        $sub->unitId = $data->unitId;
                        $sub->startDate = $data->startDate;
                        $ok = $busPricePolicy->insertPricePolicy($sub);
                    }
                }
            }
            // If function is update
            if ( $function == SForm::FUNCTION_UPDATE )
            {
                foreach ( $dataSubDetail as $sub )
                {
                    // Insert
                    if ( !$sub->removeData && (strlen($sub->pricePolicyId) == 0) )
                    {
                        $ok = $busPricePolicy->insertPricePolicy($sub);
                    }
                    // Update
                    elseif ( !$sub->removeData && (strlen($sub->pricePolicyId) > 0) )
                    {
                        $ok = $busPricePolicy->updatePricePolicy($sub);
                    }
                    // Delete
                    elseif ( $sub->removeData && (strlen($sub->pricePolicyId) > 0) )
                    {
                        $ok = $busPricePolicy->deletePricePolicy($sub->pricePolicyId);
                    }
                }
            }
        }

        return $ok;
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     */
    public function tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data = $this->getTypesData();
        $business = new BusinessFinanceBusPrice();

        $business->beginTransaction();

        try
        {        
            // Update price
            if ( $function == SForm::FUNCTION_UPDATE )
            {
                $ok = $business->updatePrice($data);
            }
            // Insert price
            if ( $function == SForm::FUNCTION_INSERT )
            {
                $ok = $business->insertPrice($data);
            }
            // Insert or update is ok
            if ( $ok )
            {
                // Insert registers of the subDetail
                $ok = $this->saveDataSubDetail($data, $business->getDatabase());
                // Insert or update of the subDetail is ok
                if ( $ok )
                {
                    $business->commit();
                    // Confirm insert or update by smanagmentform
                    $this->confirmInsertUpdate($ok);
                }
                else
                {
                    $business->rollback();
                }
            }
            else
            {
                $business->rollback();
            }
        }
        catch(Exception $e)
        {
            $business->rollback();
            
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
            $MIOLO->error($e->getMessage(), $goto);          
        }
    }

    public function getTypesData()
    {
        $data = parent::getTypesData();
        $fieldOldStartDate = 'oldStartDate';
        $fieldOldEndDate = 'oldEndDate';

        if ( strlen(MIOLO::_REQUEST($fieldOldStartDate)) == 0 )
        {
            $fieldOldStartDate .= 'S';
        }

        if ( strlen(MIOLO::_REQUEST($fieldOldEndDate)) == 0 )
        {
            $fieldOldEndDate .= 'S';
        }

        $data->oldStartDate = MIOLO::_REQUEST($fieldOldStartDate);
        $data->oldEndDate = MIOLO::_REQUEST($fieldOldEndDate);

        // Get data subDetail
        if ( is_object($this->subPricePolicy) )
        {
            $data->subPricePolicy = MSubDetail::getData('subPricePolicy');
        }
        
        $data->valorcreditoferias = MIOLO::_REQUEST('valorCreditoFerias');

        return $data;
    }
}
?>