<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * InvoiceTarget form
 *
 * @author Rudi Uhrig Neto [rudi@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 09/01/2006
 *
 **/

/**
 * Form to manipulate a invoiceTarget
 **/
class FrmInvoiceTarget extends SManagementForm
{

    /**
     * Class constructor
     **/
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();
        
        parent::__construct( new FinInvoiceTarget(), array('contractId'), 'BusInvoiceTarget' );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        if ( in_array($function,array('update','delete')) )
        {
            $contractId = $_GET['contractId'] ? $_GET['contractId'] : $_POST['contractId'];

            $fields[]      = new MTextLabel('contractId', $contractId, _M('Código do contrato',$module));
            $fields[]      = new MHiddenField('contractId', $contractId);

            $business = $this->busObject;
            $data     = $business->getInvoiceTarget($contractId);
        }
        else
        {
            $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId', $data->contractId), 'Contract id', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null,
                'personId,personName,courseId, courseName, courseVersion',
                'academic', 'Contract', null, null, true);
            $contractId->setJsHint(_M('Informe o código do contrato',$module));
            $validators[]   = new MIntegerValidator('contractId', '', 'required');
            $fields[]  = $contractId;

            //personId
            $personLabel = new MText('personLabel', _M('Pessoa',$module).':');
            $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
    
            $personId   = new MTextField('personId', $this->personId->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $personId->setReadOnly(true);
            $personId->setJsHint(_M('Código da pessoa',$module));
    
            $personName   = new MTextField('personName', $this->personName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $personName->setReadOnly(true);
            $personName->setJsHint(_M('Nome da pessoa',$module));
    
            $hctPerson = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
            $hctPerson->setShowLabel(true);
            $fields[]  = $hctPerson;

            //course
            $courseLabel = new MText('courseLabel', _M('Curso',$module).':');
            $courseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
    
            $courseId   = new MTextField('courseId', $this->courseId->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $courseId->setReadOnly(true);
            $courseId->setJsHint(_M('Código do curso',$module));

            $courseVersion   = new MTextField('courseVersion', $this->courseVersion->value, '', 3);
            $courseVersion->setReadOnly(true);
            $courseVersion->setJsHint(_M('Versão do curso',$module));
   
            $courseName   = new MTextField('courseName', $this->courseName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $courseName->setReadOnly(true);
            $courseName->setJsHint(_M('Nome do curso',$module));

    
            $hctCourse = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
            $hctCourse->setShowLabel(true);
            $fields[]  = $hctCourse;

            $this->page->onLoad('document.' . $this->name . '.contractId.focus();');
        }

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Última modificação',$module));

        }

        $fields[] = new Separator('');
        
        parent::defineFields( $fields, $validators, $data );

        if ( $function == 'insert' )
        {
            $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
            $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        }
        elseif ( $function == 'delete' )
        {
            $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $this->busObject;

        if ( $function == 'update' )
        {
            $ok  = $business->updateInvoiceTarget($data);
            $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED');
        }
        else
        {
            $ok  = $business->insertInvoiceTarget($data);
            $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED');
        }

        if ( $ok )
        {
            // This returns the primary key data to the search form
            // so that the user can see the inserted/updated record.
            $opts = array('contractIdS'=>$data->contractId);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
            if ( $function == 'update' )
            {
                $caption = _M('Informação',$module);
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $opts    = array('function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Questão',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Erro executando a operação solicitada.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new FinInvoiceTarget();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }
        }

        //$data->description = $this->invoiceTargetDescription->value;

        return $data;
    }

}

?>
