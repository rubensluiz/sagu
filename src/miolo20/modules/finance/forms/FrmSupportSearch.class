<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finSupport table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * 
 * @since
 * Class created on 09/12/2005
 *
 **/
class FrmSupportSearch extends SSearchForm
{

    /**
     * Class constructor
     */
    public function __construct()
    {
        parent::__construct(_M('Localizar', 'basic'), new FinSupport(), array('incentiveTypeId'), 'BusSupport');
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        //Field incentive type
        $incentiveTypeIdS = new MTextField('incentiveTypeIdS', $this->incentiveTypeIdS->value, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $incentiveTypeIdS->setJsHint(_M('Informe o código do tipo de incentivo', $module));        
        $fields[] = $incentiveTypeIdS;
        $validators[] = new MIntegerValidator('incentiveTypeIdS');
        
        //Field support description
        $descriptionS = new MTextField('descriptionS', $this->descriptionS->value, _M('Descrição',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $descriptionS->setJsHint(_M('Informe a descrição do patrocinador', $module));                
        $fields[] = $descriptionS;

        //Field operation
        $operationIdLabelS = new MText('operationIdLabelS', _M('Operação',$module).':');
        $operationIdLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $operationIdS = new MLookupTextField('operationIdS', $this->operationIdS->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'operationDescriptionS', 'finance', 'Operation', null, null, true);
        $validators[] = new MIntegerValidator('operationIdS', _M('Operação',$module));
        $operationIdS->setJsHint(_M('Informe o código da operação', $module));
        $operationDescriptionS = new MTextField('operationDescriptionS', $this->operationDescriptionS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $operationDescriptionS->setReadOnly(true);
        $operationDescriptionS->setJsHint(_M('Descrição da operação', $module));
        $hctOperationS = new MHContainer('hctOperationS', array($operationIdLabelS, $operationIdS, $operationDescriptionS));
        $hctOperationS->setShowLabel(true);
        $fields[]  = $hctOperationS;

        //Field collection type
        $collectionOperationIdLabelS = new MText('collectionOperationIdLabelS', _M('Operação de cobrança', $module).':');
        $collectionOperationIdLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $collectionOperationIdS = new MLookupTextField('collectionOperationIdS', $this->collectionOperationIdS->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'collectionOperationDescriptionS', 'finance', 'Operation', null, null, true);
        $collectionOperationIdS->setJsHint(_M('Informe o código da operação de cobrança', $module));
        $validators[] = new MIntegerValidator('collectionOperationIdS', _M('Operação de cobrança',$module));
        $collectionOperationDescriptionS = new MTextField('collectionOperationDescriptionS', $this->collectionOperationDescriptionS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $collectionOperationDescriptionS->setReadOnly(true);
        $collectionOperationDescriptionS->setJsHint(_M('Descrição da operação de cobrança', $module));
        $hctCollectionOperationS = new MHContainer('hctCollectionOperationS', array($collectionOperationIdLabelS, $collectionOperationIdS, $collectionOperationDescriptionS));
        $hctCollectionOperationS->setShowLabel(true);
        $fields[]  = $hctCollectionOperationS;
        
        //Field account scheme
        $accountSchemeIdLabelS = new MText('AccountSchemeIdLabelS', _M('Plano de contas',$module).':');
        $accountSchemeIdLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $accountSchemeIdS = new MLookupTextField('accountSchemeIdS', $this->accountSchemeIdS->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'accountSchemeDescriptionS', 'accountancy', 'AccountScheme', null, null, true);
        $accountSchemeIdS->setJsHint(_M('Informe o código do plano de contas', $module));
        $validators[] = new MRegExpValidator('accountSchemeIdS', _M('Plano de contas',$module), '^[0-9]+(\.[0-9]+)*$');
        $accountSchemeDescriptionS = new MTextField('accountSchemeDescriptionS', $this->accountSchemeDescriptionS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $accountSchemeDescriptionS->setReadOnly(true);
        $accountSchemeDescriptionS->setJsHint(_M('Descrição do plano de contas', $module));
        $hctAccountSchemeS = new MHContainer('hctAccountSchemeS', array($accountSchemeIdLabelS, $accountSchemeIdS, $accountSchemeDescriptionS));
        $hctAccountSchemeS->setShowLabel(true);
        $fields[]  = $hctAccountSchemeS;
        
        // get Yes and No for Radio Button
        $messagesTypeS =  SAGU::listTrueFalse(1);
        $needAdjustAuthorizationLabelS = new MText('needAdjustAuthorizationLabelS', _M('Precisa de autorização para ajuste',$module).':');
        $needAdjustAuthorizationLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        $needAdjustAuthorizationS = new MRadioButtonGroup('needAdjustAuthorizationS', '', $messagesTypeS, $this->getFormValue('needAdjustAuthorizationS', $needAdjustAuthorizationS), null, 'horizontal'); $needAdjustAuthorizationS->SetShowLabel(false);
        $hctNeedAdjustAuthorizationS = new MHContainer('hctNeedAdjustAuthorizationS', array($needAdjustAuthorizationLabelS, $needAdjustAuthorizationS));
        $fields[]  = $hctNeedAdjustAuthorizationS;

        // get Yes and No for Radio Button
        $sendInvoicesLabelS = new MText('sendInvoicesLabelS', _M('Enviar títulos',$module).':');
        $sendInvoicesLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $sendInvoicesS = new MRadioButtonGroup('sendInvoicesS', '', $messagesTypeS, $this->getFormValue('sendInvoicesS', $sendInvoicesS), null, 'horizontal');
        $sendInvoicesS->SetShowLabel(false);
        $hctSendInvoicesS = new MHContainer('hctSendInvoicesS', array($sendInvoicesLabelS, $sendInvoicesS));
        $fields[]  = $hctSendInvoicesS;

        $generateCreditsLabelS = new MText('generateCreditsLabelS', _M('Gerar créditos',$module).':');
        $generateCreditsLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        $generateCreditsS = new MRadioButtonGroup('generateCreditsS', '', $messagesTypeS, $generateCreditsS, null, 'horizontal');
        $generateCreditsS->SetShowLabel(false);
        $hctGenerateCreditsS = new MHContainer('hctGenerateCreditsS', array($generateCreditsLabelS, $generateCreditsS));
        $fields[]  = $hctGenerateCreditsS;

        // get Yes and No for Radio Button         $messagesType =  SAGU::listTrueFalse(1);
        $isExtinctLabelS = new MText('isExtinctLabelS', _M('Está extinto',$module).':');
        $isExtinctLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        $isExtinctS = new MRadioButtonGroup('isExtinctS', '', $messagesTypeS, $this->getFormValue('isExtinctS', $isExtinctS), null, 'horizontal');
        $isExtinctS->SetShowLabel(false);
        $hctIsExtinctS = new MHContainer('hctIsExtinctS', array($isExtinctLabelS, $isExtinctS));
        $fields[]  = $hctIsExtinctS;

        parent::defineFields($fields, $module, 'GrdSupportSearch', $validators);        
    }
}

?>
