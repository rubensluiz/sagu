<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finIncentive table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis,coo.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * 
 * @since
 * Class created on 26/12/2005
 *
 **/

/**
 * Form to search the finIncentive table
 */
class FrmIncentiveSearch extends SSearchForm
{
    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        $event  = $MIOLO->_REQUEST('event');
        
        if ( $event == 'tbBtnSearch:click' )
        {
            $MIOLO->session->setValue('naoRenovados', null);
            $MIOLO->session->setValue('total', 0);
        }
        
        parent::__construct(_M('Localizar', $module), new FinIncentive(), 'incentiveId', 'BusIncentive');
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $event  =  MIOLO::_request('__EVENTTARGETVALUE');
        if ( ! $event )
        {
             $event = MIOLO::_request('event');
        }

        $limbo = new MHiddenField('limboS', '');
        $fields[] = $limbo;

        $incentiveIdS       = new MHiddenField('incentiveIdS', '');
        $fields[]           = $incentiveIdS;

        // ContractPersonId
        $contractPersonIdLabelS = new MText('contractPersonIdLabelS', _M('Pessoa',$module).':');
        $contractPersonIdLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractPersonIdS = new MLookupTextField('contractPersonIdS', $this->getFormValue('contractPersonIdS',$this->incentiveSearch->contractPersonIdS), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, array('contractIdS', 'contractPersonIdS', 'contractPersonNameS', 'contractCourseIdS', 'contractCourseNameS', 'contractCourseVersionS', 'contractTurnIdS', 'contractUnitIdS'), 'academic', 'PersonContract', null, array('personId' => 'contractPersonIdS'), ! $this->page->isPostBack() );
        $validators[] = new MIntegerValidator('contractPersonIdS', _M('Pessoa',$module));
        $contractPersonIdS->setJsHint(_M('Informe o código da pessoa', $module));
        $contractPersonNameS = new MTextField('contractPersonNameS', $this->getFormValue('contractPersonNameS',$this->incentiveSearch->contractPersonNameS), '',  SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractPersonNameS->setReadOnly(true);
        $contractPersonNameS->setJsHint(_M('Nome da pessoa', $module));
        $hctPersonS = new MHContainer('hctPersonS', array($contractPersonIdLabelS, $contractPersonIdS, $contractPersonNameS));
        $hctPersonS->setShowLabel(true);
        $fields[]  = $hctPersonS;
       
        // Contract id 
        $contractIdLabelS = new MText('contractIdLabelS', _M('Contrato',$module).':');
        $contractIdLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractIdS = new MLookupTextField('contractIdS', $this->getFormValue('contractIdS', $data->contractIdS), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, array('contractPersonIdS', 'contractPersonNameS', 'contractCourseIdS', 'contractCourseNameS', 'contractCourseVersionS', 'contractTurnIdS', 'limboS', 'contractUnitIdS'), 'academic', 'Contract', null, array('personId' => 'contractPersonIdS'), true);
        $contractIdS->setJsHint(_M('Informe o código do contrato',$module));
        $validators[] = new MIntegerValidator('contractIdS', _M('Contrato',$module));
        $contractCourseIdS = new MTextField('contractCourseIdS', $this->getFormValue('contractCourseIdS',$this->incentiveSearch->contractCourseIdS), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseIdS->setReadOnly(true);
        $contractCourseIdS->setJsHint(_M('Código do curso',$module));
        $contractCourseVersionS = new MTextField('contractCourseVersionS', $this->getFormValue('contractCourseVersionS',$this->incentiveSearch->contractCourseVersionS), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseVersionS->setReadOnly(true);
        $contractCourseVersionS->setJsHint(_M('Versão do curso',$module));
        $contractCourseNameS = new MTextField('contractCourseNameS', $this->getFormValue('contractCourseNameS',$this->incentiveSearch->contractCourseNameS), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractCourseNameS->setReadOnly(true);
        $contractCourseNameS->setJsHint(_M('Nome do curso', $module));
        $hctContractS = new MHContainer('hctContractS', array($contractIdLabelS, $contractIdS, $contractCourseIdS, $contractCourseVersionS, $contractCourseNameS));
        $hctContractS->setShowLabel(true);
        $fields[]    = $hctContractS;
      
        // Incentive type 
        $incentiveTypeLabelS = new MText('incentiveTypeLabelS', _M('Tipo de incentivo',$module).':');
        $incentiveTypeLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $incentiveTypeIdS = new MLookupTextField('incentiveTypeIdS', $this->getFormValue('incentiveTypeIdS',$this->incentiveSearch->incentiveTypeIdS), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'incentiveTypeDescriptionS', $module, 'IncentiveType', null, null, true);
        $incentiveTypeIdS->setJsHint(_M('Informe o código do tipo de incentivo', $module));
        $validators[] = new MIntegerValidator('incentiveTypeIdS', _M('Tipo de incentivo',$module));
        $incentiveTypeDescriptionS = new MTextField('incentiveTypeDescriptionS', $this->getFormValue('incentiveTypeDescriptionS',$this->incentiveSearch->incentiveTypeDescriptionS), '',  SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $incentiveTypeDescriptionS->setReadOnly(true);
        $incentiveTypeDescriptionS->setJsHint(_M('Descrição do tipo de incentivo', $module));
        $hctIncentiveS = new MHContainer('hctIncentiveS', array($incentiveTypeLabelS, $incentiveTypeIdS, $incentiveTypeDescriptionS));
        $hctIncentiveS->setShowLabel(true);
        $fields[]  = $hctIncentiveS;
       
        // Supporter id 
        $supporterIdLabelS = new MText('supporterIdLabelS', _M('Patrocinador',$module).':');
        $supporterIdLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $supporterIdS = new MLookupTextField('supporterIdS', $this->getFormValue('supporterIdS',$this->incentiveSearch->supporterIdS), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'),  null, null, 'supporterNameS', 'basic', 'Person', null, null, true);
        $supporterIdS->setJsHint(_M('Informe o código do patrocinador', $module));
        $validators[] = new MIntegerValidator('supporterIdS', _M('Patrocinador',$module));
        $supporterNameS = new MTextField('supporterNameS', $this->getFormValue('supporterNameS',$this->incentiveSearch->supporterNameS), '',  SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $supporterNameS->setReadOnly(true);
        $supporterNameS->setJsHint(_M('Nome do patrocinador', $module));
        $hctSupporterS = new MHContainer('hctSupporterS', array($supporterIdLabelS, $supporterIdS, $supporterNameS));
        $hctSupporterS->setShowLabel(true);
        $fields[]  = $hctSupporterS;
       
        $vigenteNaDataS = new MCalendarField('vigenteNaDataS', $this->getFormValue('vigenteNaDataS', $this->incentiveSearch->vigenteNaDataS), _M('Incentivo vigente na data',$module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $vigenteNaDataS->setJsHint(_M('Informe a data de vigencia para os incentivos', $module));
        $validators[] = new MDATEDMYValidator('vigenteNaDataS', '', 'optional');
        $fields[] = $vigenteNaDataS;
        
        // Start date 
        $startDateS = new MCalendarField('startDateS', $this->getFormValue('startDateS', $this->incentiveSearch->startDateS), _M('Data inicial',$module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $startDateS->setJsHint(_M('Informe a data inicial', $module));
        $validators[] = new MDATEDMYValidator('startDateS', '', 'optional');
        $fields[] = $startDateS;                

        // End date
        $endDateS = new MCalendarField('endDateS', $this->getFormValue('endDateS', $this->incentiveSearch->endDateS), _M('Data final',$module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $endDateS->setJsHint(_M('Informe a data de término', $module));
        $validators[] = new MDATEDMYValidator('endDateS', '', 'optional');
        $fields[] = $endDateS;      
      
        // Value is percent 
        $messagesTypeS =  SAGU::listTrueFalse(1);
        $valueIsPercentLabelS = new MText('valueIsPercentLabelS', _M('Valor é percentual',$module).':');
        $valueIsPercentLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $valueIsPercentS = new MRadioButtonGroup('valueIsPercentS', '', $messagesTypeS, $this->getFormValue('valueIsPercentS', $valueIsPercentS), null, 'horizontal');
        $valueIsPercentS->SetShowLabel(false);
        $hctValueIsPercentS = new MHContainer('hctValueIsPercentS', array($valueIsPercentLabelS, $valueIsPercentS));
        $fields[]  = $hctValueIsPercentS;
       
        // Value 
        $valueS       = new MTextField('valueS', $this->getFormValue('valueS', $data->valueS), _M('Valor', $module), SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'), _M('Ex.: 1.00', $module));
        $valueS->setJsHint(_M('Informe o valor',$module));
        $validators[] = new MFloatValidator('valueS', _M('Valor', $module), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'));
        $fields[]     = $valueS;
        
        // Agglutinate
        $agglutinateLabelS = new MText('agglutinateLabelS', _M('Aglutinar',$module).':');
        $agglutinateLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $agglutinateS = new MRadioButtonGroup('agglutinateS', '', $messagesTypeS, $agglutinateS, null, 'horizontal');
        $agglutinateS->SetShowLabel(false);
        $hctAgglutinateS = new MHContainer('hctAgglutinateS', array($agglutinateLabelS, $agglutinateS));
        $fields[]  = $hctAgglutinateS;

        // Cost center
        $costCenterLabelS = new MText('costCenterLabelS', _M('Centro de custo',$module).':');
        $costCenterLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $costCenterIdS = new MLookupTextField('costCenterIdS', $this->getFormValue('costCenterIdS',$this->incentiveSearch->costCenterIdS), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'),  null, null, 'costCenterDescriptionS', 'accountancy', 'CostCenter', null, null, true);
        $costCenterIdS->setJsHint(_M('Informe o código do centro de custos', $module));
        $validators[] = new MRegExpValidator('costCenterIdS', _M('Centro de custo', $module), '^[0-9]+(\.[0-9]+)*$');
        $costCenterDescriptionS = new MTextField('costCenterDescriptionS', $this->getFormValue('costCenterDescriptionS',$this->incentiveSearch->costCenterDescriptionS), '',  SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $costCenterDescriptionS->setReadOnly(true);
        $costCenterDescriptionS->setJsHint(_M('Descrição do centro de custo', $module));
        $hctCostCenterS = new MHContainer('hctCostCenterS', array($costCenterLabelS, $costCenterIdS, $costCenterDescriptionS));
        $hctCostCenterS->setShowLabel(true);
        $fields[]  = $hctCostCenterS;        
       
        // Cancellation date
        $fields[] = new MCalendarField('cancellationDateS', $this->getFormValue('cancellationDateS', $this->incentiveSearch->cancellationDateS), _M('Data de cancelamento', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));

        parent::defineFields($fields, $module, 'GrdIncentiveSearch', $validators);
    }
    

    public function getTypesData()
    {
        $MIOLO = MIOLO::getInstance();
        
        $data = parent::getTypesData();
        $data->contractPersonId = $this->GetFormValue('contractPersonIdS');
        $data->incentivos = $MIOLO->session->getValue('incentivos');
        
        $MIOLO->session->setValue('incentivos', '');
        
        $data->vigenteNaData = $this->GetFormValue('vigenteNaDataS');
        
        return $data;
    }
    

    public function acaoRenovarIncentivo()
    {
        $this->SetTitle(_M('Renovação de incentivos'));
        
        $fields[] = $period = new SBeginEndPeriod(array(
            'title' => _M('Informe a data para renovação'),
            'required' => true,
            'begin' => array(
                'enable' => false,
                'dateId' => 'startDate',
                'dateValue' => SAGU::getDateNow(),
            ),
            'end' => array(
                'label' => _M('Renovar até'),
                'dateId' => 'endDate',
            )
        ));
        
        $fields[] = new MButton('btnRenovarIncentivo', _M('Renovar'));
        
        $this->SetFields($fields);
        $this->SetValidators($validators);
    }
    
    public function btnRenovarIncentivo_click($args)
    {
        $MIOLO     = MIOLO::getInstance();
        $module    = MIOLO::getCurrentModule();
        $loginUser = $MIOLO->getLogin();
        
        // Caso o usuário seja um administrador e queira renovar os que acusaram aproveitamento abaixo dos 75%.
        $renovarRestante   = MIOLO::_REQUEST('renovar_restante');
        $inverterRenovacao = ($renovarRestante == DB_TRUE && $loginUser->isAdmin) ? DB_TRUE : DB_FALSE;
        
        $registrosSelecionados = $this->obterRegistrosSelecionados();
        
        $regs  = (count($registrosSelecionados)> 0) ? $registrosSelecionados : $MIOLO->session->getValue('naoRenovados');
        $MIOLO->session->setValue('naoRenovados', null);

        $endDate = $this->getRequestValue('endDate');
        $total   = (int) $MIOLO->session->getValue('total');
        
        if ( strlen($endDate) == 0 )
        {
            $MIOLO->error(_M('A data de fim deve ser preenchida.', $module));
        }
        else
        {
            $busIncentive = new BusinessFinanceBusIncentive();
            $naoRenovados = array();
            
            foreach ( $regs as $incentiveId )
            {
                $data    = $busIncentive->getIncentive($incentiveId);
                $periodo = $busIncentive->obterUltimoPeriodoCursado($data->contractId, $data->startDate, $data->endDate);
                
                //obtém o percentual mínimo para renovar o incentivo
                $incentive = $busIncentive->searchIncentive($data);
                
                try
                {
                    if ( $incentive[0][18] != null )
                    {                                
                        //obtém o percentual de aprovação
                        //não pode ser obrigatório, se não encontrou, renova o incentivo do mesmo jeito
                        if ( strlen($periodo[0][0]) > 0 )
                        {
                            $percentual = $busIncentive->obterPercentualDeAprovacoes($data->contractId, $periodo[0][0]);                        
                        }
                        else
                        {
                            $percentual[0][0] = 0;
                        }
                        
                        if ( ( $percentual[0][0] >= $incentive[0][18] ) && $inverterRenovacao == DB_FALSE )
                        {
                            $this->renovarIncentivo($incentiveId);
                            $msg2 .= ('<br>'.$incentive[0][1].' - '.$incentive[0][2].'.');
                            $MIOLO->session->setValue('total', ++ $total);
                        }
                        else if ( ( $percentual[0][0] < $incentive[0][18] ) && $inverterRenovacao == DB_TRUE )
                        {
                            $this->renovarIncentivo($incentiveId);
                            $msg2 .= ('<br>'.$incentive[0][1].' - '.$incentive[0][2].'.');
                            $MIOLO->session->setValue('total', ++ $total);
                        }
                        else
                        {
                            $naoRenovados[] = $incentiveId;
                            $msg .= ('<br>'.$incentive[0][1].' - '.$incentive[0][2].'.');                                                   
                        }
                    }
                }
                catch ( Exception $e )
                {
                    throw new Exception($e->getMessage());
                }
            } 
            
            $this->relatorioInformativoDoProcessoDeRenovacao($msg, $msg2, $naoRenovados, $incentive, $endDate, $regs);
        }
    }
    
    /**
     * Renova os incentivos das pessoas recebidas por parâmetro
     * 
     * @param stdClass $args
     */
    private function renovarIncentivo($incentiveId)
    {
        $busIncentive = new BusinessFinanceBusIncentive();

        $endDate  = $this->getRequestValue('endDate');

        // Insere novamente os registros , duplicando-os para as datas informadas
        $row = $busIncentive->getIncentive($incentiveId);
        
        //Adiciona um dia na data do novo incentivo, para evitar conflitos de datas.
        $_endDate = explode('/', $row->endDate);
        $_endDate = $_endDate[2] . '-' . $_endDate[1] . '-' . $_endDate[0];
        $startDate = date('d/m/Y', strtotime("+1 days", strtotime($_endDate)));

        $row->startDate = $startDate;
        $row->endDate   = $endDate;
        $busIncentive->insertIncentive($row);
    }
    
    /**
     * Exibe o relatório de renovação conforme permições do usuário 
     * ou acontecimentos no processo.
     * 
     * @param String $msg
     * @param String $msg2
     * @param array $naoRenovados
     * @param array $incentiveArray
     * @param int $total
     * @param String $endDate
     */
    private function relatorioInformativoDoProcessoDeRenovacao($msg = null, $msg2 = null, $naoRenovados = array(), $incentiveArray = array(), $endDate = null, $registros = array())
    {
        $MIOLO     = MIOLO::getInstance();
        $module    = $MIOLO->getCurrentModule();
        $action    = $MIOLO->getCurrentAction();
        $loginUser = $MIOLO->getLogin();
        $total     = $MIOLO->session->getValue('total');
        
        if ( strlen($msg) > 0 || strlen($msg2) > 0 )
        {
            $msg    = $msg ? $msg : "<br> TODOS INCENTIVOS FORAM RENOVADOS";
            $errado = "<b style='color:red'>APROVEITAMENTO ABAIXO DE {$incentiveArray[0][18]}% - {$incentiveArray[0][6]}. <br> NÃO É POSSÍVEL RENOVAR INCENTIVO PARA: </b>".$msg;
            
            $msg2  = $msg2 ? $msg2 : "<br> NENHUM REGISTRO";
            $certo = "<b style='color:blue'>INCENTIVOS RENOVADOS:</b>$msg2 <br><br>";
            
            // Se o usuário for administrador e incentivos não foram renovados, disponibiliza opção de renovar estes incentivos.
            if ( $loginUser->isAdmin && count($naoRenovados) > 0 )
            {
                $MIOLO->session->set('naoRenovados', $naoRenovados);

                $gotoYes = $MIOLO->GetActionURL($module, $action, null, array('event' => 'btnRenovarIncentivo_click', 'renovar_restante' => DB_TRUE, 'endDate' => $endDate));
                $gotoNo  = $MIOLO->GetActionURL($module, $action, null, array('function' => 'search', 'event' => 'tbBtnSearch:click'));
                $MIOLO->question("RELATÓRIO DO PROCESSO:<br><br>" . $certo . $errado . "<br><br>Deseja forçar a renovação dos alunos impossibilitados?", $gotoYes, $gotoNo);
            }
            else if ( count($naoRenovados) == 0 )
            {
                $MIOLO->information("RELATÓRIO DO PROCESSO:<br><br>" . $certo);
            }
            else
            {
                $MIOLO->information("RELATÓRIO DO PROCESSO:<br><br>" . $certo . $errado . "<br><br>Caso queira forçar a renovação para alunos impossibilitados, contatar um administrador do sistema para efetuar o processo.");
            }
        }
        else
        {
            $MIOLO->session->setValue('naoRenovados', null);
            $MIOLO->session->setValue('total', 0);
            $MIOLO->session->setValue('incentivos', implode(',', $registros));

            $args = array('function' => 'search', 'event' => 'tbBtnSearch:click');
            $goto = $MIOLO->GetActionURL($module, $action, null, $args);
            $msg  = _M('Um total de @1 incentivo(s) foram renovados com sucesso até @2.', $module, $total, $endDate);
            $MIOLO->information($msg, $goto);
        }
    }
}
?>
