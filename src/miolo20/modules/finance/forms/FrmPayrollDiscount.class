<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Learning Period form
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 12/12/2005
 *
 **/

/**
 * Form to manipulate a course occurrence
 **/
class FrmPayrollDiscount extends MForm
{

    private $module;
    private $home;

    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $this->module = $module;

        $this->home   = $data->home;

        parent::__construct(_M('Desconto na folha de pagamento', $module));

        // hide the 'Submit' button
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());
        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnSearch');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Payroll discount', $this->home, 'payrollDiscount-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;
        
        //Field begin date
        $beginDate        = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), _M('Data inicial', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $beginDate->setJsHint(_M('Informe a data inicial', $module));
        $beginDate->setValidator(new MDATEDMYValidator('beginDate', _M('Data inicial', $module), 'required'));
        $fields[]         = $beginDate;

        //Field end date
        $endDate        = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), _M('Data final', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $endDate->setJsHint(_M('Informe a data de término', $module));
        $endDate->setValidator(new MDATEDMYValidator('endDate', _M('Data final', $module), 'required'));
        $fields[]       = $endDate;

        //Field close date
        $closeDate      = new MCalendarField('closeDate', $this->getFormValue('closeDate', $data->closeDate), _M('Data de fechamento', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $closeDate->setJsHint(_M('Informe a data de fechamento', $module));
        $closeDate->setValidator(new MDATEDMYValidator('closeDate', _M('Data de fechamento', $module), 'required'));
        $fields[]       = $closeDate;

        // get Yes and No for Radio Button
        $messagesType       =  SAGU::listTrueFalse(1);
        $closeInvoiceLabel  = new MText('closeInvoiceLabel', _M('Baixar título',$module).':');
        $closeInvoiceLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $data->closeInvoice = $this->GetFormValue('closeInvoice', $data->closeInvoice ? $data->closeInvoice : 't' );
        $closeInvoice    = new MRadioButtonGroup('closeInvoice', '', $messagesType, $data->closeInvoice, null, 'horizontal');
        $closeInvoice->SetShowLabel(false);
        $hctCloseInvoice = new MHContainer('hctCloseInvoice', array($closeInvoiceLabel, $closeInvoice));
        $fields[]        = $hctCloseInvoice;

        $fields[] = new Separator('');
        $this->setFields($fields);
        $this->setLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $this->setShowPostButton(true);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        
        $this->page->onLoad('document.'.$this->name.'.beginDate.focus();');

        if ( $this->isSubmitted() )
        {
            $filters->beginDate           = $this->beginDate->value;
            $filters->endDate             = $this->endDate->value;
            $filters->closeDate           = $this->closeDate->value;
            $filters->closeInvoice        = $data->closeInvoice;
            $grdResults = $MIOLO->getUI()->getGrid($module,'GrdPayrollDiscountSearch', $filters);

            $business   = new BusinessFinanceBusPayrollDiscount();
            $results    = $business->generatePayrollDiscount($filters);
            $grdResults = $MIOLO->getUI()->getGrid($module,'GrdPayrollDiscountSearch', $filters);
            
            $grdResults->setData($results);
            $this->addField($grdResults);
        }
     }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new acdPayrollDiscount();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }
        }

        return $data;
    }
}

?>
