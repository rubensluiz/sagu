<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * SPC form
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 29/08/2005
 *
 **/

class FrmSpc extends SManagementForm
{

    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new FinSpc(), array('personId', 'entryDate'), 'BusSpc');
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        
        $url = $MIOLO->getActionURL($module, 'main:process:spc:spc');
        
        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            //Id the object FinSpc
            $pk = $this->getObjectPk();
            $id = array($pk->personId,
                        $pk->entryDate);
            $personId = $id[0];
            $entryDate = $id[1];
            $business = new BusinessFinanceBusSpc();
            $data = $business->getSpc($id);

        }
        
        //Fields person
        $fieldsPerson['personLabel'] = new MText('personLabel', _M('Pessoa', $module) . ':');
        $fieldsPerson['personLabel']->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $fieldsPerson['personLabel']->setClass('m-caption m-caption-required');
        $fieldsPerson['personId'] = new MLookupTextField('personId', $this->getFormValue('personId', $data->learningPeriodId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'personName', 'finance', 'PhysicalPersonWhoAreNotInTheSpc', null, null, true);
        $fieldsPerson['personId']->setReadOnly(in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)));
        $fieldsPerson['personId']->setJsHint(_M('Informe o código da pessoa', $module));
        $fieldsPerson['personName'] = new MTextField('personName', $this->getFormValue('personName', $data->personName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $fieldsPerson['personName']->setJsHint(_M('Nome da pessoa', $module));
        $fieldsPerson['personName']->setReadOnly(true);
        $fields['lookupPerson'] = new MHContainer('hctPerson', $fieldsPerson);
        $fields['lookupPerson']->setShowLabel(true);
        
        $fields['entryDate'] = new MCalendarField('entryDate', $this->getFormValue('entryDate', $data->entryDate) ? $this->getFormValue('entryDate', $data->entryDate) : date('d/m/Y'), _M('Data de entrada.', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $fields['entryDate']->setClass('m-caption m-caption-required');
        $fields['entryDate']->setJsHint(_M('Informe a data do lançamento', $module));
        $fields['entryDate']->setReadOnly(in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)));
        $msgHint = new MText('hint', _M('Esta pessoa permanecerá no SPC até a data programada.', $module));
        $fields['removalDate'] = new MCalendarField('removalDate', $this->getFormValue('removalDate', $data->removalDate), _M('Data de saída', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'), $msgHint);
        
        //If date > now readonly false
        if ( $data->removalDate )
        {       	
            list($d, $m, $y) = explode('/', $data->removalDate);
            $mk1 = mktime(0, 0, 0, $m, $d, $y);
            
            list($d, $m, $y) = explode('/', date('d/m/Y'));
            $mk2 = mktime(0, 0, 0, $m, $d, $y);    
        }
        $fields['removalDate']->setReadOnly($data->removalDate && $function == SForm::FUNCTION_UPDATE && !($mk1 > $mk2) );
        $fields['removalDate']->setJsHint(_M('Informe a data de saída', $module));
        
        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            
            //Business spc movement
            $busSpcMovement = new BusinessFinanceBusSpcMovement();
            $filters = new stdClass();
            $filters->personId = $personId;
            $filters->entryDate = $entryDate;
            
            $dataMovement = $busSpcMovement->searchSpcMovement($filters);
            
            $dataTable = array();
            if ( is_array($dataMovement) )
            {
                foreach ( $dataMovement as $key => $line )
                {
                    $dataTable[$key][0] = $line[1];
                    $dataTable[$key][1] = $line[3];
                    //Wraps a string in a given number of characters
                    $dataTable[$key][2] = "<span>" . wordwrap($line[6], 80, "<br>", true) . "</span>";
                    $dataTable[$key][3] = $line[7];
                }
                
                $columns[] = _M('Data', $module);
                $columns[] = _M('Razão', $module);
                $columns[] = _M('Observação', $module);
                $columns[] = _M('Título', $module);
                
                $fields[] = new MSeparator();
                $fields['tableMovement'] = new MTableRaw(_M('Movimentações', $module), $dataTable, $columns);
                $fields[] = new MSeparator();
            }
        }
        
        //If you have no end date
        if ( !($data->removalDate && $function == SForm::FUNCTION_UPDATE && !($mk1 > $mk2)) )
        {
            $fieldDate['dateLabel'] = new MText('labelDate', _M('Data', $module) . ':');
            $fieldDate['dateLabel']->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $fieldDate['dateField'] = new MCalendarField('date', date('d/m/Y'), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
            $fieldDate['dateField']->setJsHint(_M('Informe a data da movimentação', $module));
            $hctMovement['date'] = new MHContainer('hctdDate', $fieldDate);
            
            $fieldReason['reasonLabel'] = new MText('reasonLabel', _M('Razão', $module) . ':');
            $fieldReason['reasonLabel']->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $fieldReason['reasonId'] = new MLookupTextField('reasonId', $this->getFormValue('reasonId', $data->reasonId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'description', 'finance', 'SpcReason', null, null, true);
            $fieldReason['reasonId']->setJsHint(_M('Informe o código da razão', $module));
            $fieldReason['description'] = new MTextField('description', $this->getFormValue('description', $data->description), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $fieldReason['description']->setReadOnly(true);
            $hctMovement['reason'] = new MHContainer('hctMovement', $fieldReason);
            
            $fieldObs['obsLabel'] = new MText('labelObservation', _M('Observação', $module) . ':');
            $fieldObs['obsLabel']->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $fieldObs['obsField'] = new MMultiLineField('observation', $this->getFormValue('observation', $data->observation), '', 40, 4, 40);
            $fieldObs['obsField']->setJsHint(_M('Informe uma observação', $module));
            $hctMovement['observation'] = new MHContainer('hctObservation', $fieldObs);
            $hctMovement['hint'] = new MText('hint', _M('Obs: Só será inserida uma movimentação se os campos data, razão e observação forem preenchidos', $module));

            $fields['limbo'] = new SHiddenField('limbo');
            
            // Fields invoice
            $fieldsInvoice['invoiceLabel'] = new MText('invoiceLabel', _M('Título', $module) . ':');
            $fieldsInvoice['invoiceLabel']->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $fieldsInvoice['invoiceId'] = new MLookupTextField('invoiceId', $this->getFormValue('invoiceId', $data->invoiceId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'limbo, invoiceDescription', 'finance', 'ReceivableInvoice', null, array('personId' => 'personId'), true);
            $fieldsInvoice['invoiceId']->setJsHint(_M('Informe o código do título', $module));
            $fieldsInvoice['invoiceDescription'] = new MTextField('invoiceDescription', $this->getFormValue('invoiceDescription', $data->invoiceDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $fieldsInvoice['invoiceDescription']->setJsHint(_M('Descrição do título', $module));
            $fieldsInvoice['invoiceDescription']->setReadOnly(true);
            $hctMovement['lookupInvoice'] = new MHContainer('hctInvoice', $fieldsInvoice);
            $hctMovement['lookupInvoice']->setShowLabel(true);
            
            $fields['baseMovement'] = new BaseGroup('bsgMovement', _M('Nova movimentação', $module), $hctMovement, 'vertical');
            $fields['baseMovement']->showLabel = true;
        }
        else
        {
            $this->AddInfo(_M('Esta pessoa permanecerá  no SPC até a data @1,  após esta data para cadastrá-la novamente você deve inserir um novo registro.', $module,$data->removalDate ));
        }
        
        //Validators
        $validators[] = new MRequiredValidator('personId', _M('Pessoa'));
        $validators[] = new MRequiredValidator('entryDate', _M('Data de entrada'));
        
        //Validators of the movement
        if ( $function == SForm::FUNCTION_INSERT )
        {
            $validators[] = new MRequiredValidator('date', _M('Data'));
            $validators[] = new MRequiredValidator('reasonId', _M('Razão'));
            $validators[] = new MRequiredValidator('observation', _M('Observação'));
        }
        
        parent::defineFields($fields, $validators, $data);
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        $data = $this->getData();
        
        //Add date, reasonId and observation in object FinSpc
        $data->date = $this->date->value;
        $data->reasonId = $this->reasonId->value;
        $data->observation = $this->observation->value;
        $data->invoiceId = $this->invoiceId->value;
        
        //Valid removalDate > entryDate
        $ok = true;
        if ( strlen($data->removalDate) > 0 )
        {
            $entryDate = explode('/', $data->entryDate);
            $monthE = $entryDate[1];
            $dayE = $entryDate[0];
            $yearE = $entryDate[2];
            
            $removalDate = explode('/', $data->removalDate);
            $monthR = $removalDate[1];
            $dayR = $removalDate[0];
            $yearR = $removalDate[2];
            
            $timesTampEntryDate = mktime(null, null, null, $monthE, $dayE, $yearE);
            $timesTampRemovalDate = mktime(null, null, null, $monthR, $dayR, $yearR);
            
            if ( $timesTampEntryDate > $timesTampRemovalDate )
            {
                $ok = false;
            }
        }
        
        if ( $ok )
        {
            //Business to insert person in spc and movement.
            $busSpc = new BusinessFinanceBusSpc();
            $busMovement = new BusinessFinanceBusSpcMovement();
            
            //Valid if there is already a record with this information
            if ( $function  == SForm::FUNCTION_INSERT )
            {
                //Filters
                $ValidFilter = new StdClass();
                $ValidFilter->personId = $data->personId;
                $ValidFilter->entryDateId = $data->entryDate;
                
                if ( count($busSpc->searchSpc($ValidFilter)) > 0 )
                {
                    $msg = _M('Já existe um registro com estas informações', $module);
                    $caption = _M('Informação', $module);
                    $MIOLO->information($msg, $MIOLO->getActionURL($module, $action));   
                }
            }
            
            //Insert the person in spc
            $ok = ($function == SForm::FUNCTION_UPDATE) ? $busSpc->updateSpc($data) : $busSpc->insertSpc($data);
            
            //If person has entered all the data handling part
            if ( $ok && (strlen($data->date) > 0) && (strlen($data->reasonId) > 0) && (strlen($data->observation) > 0) )
            {
                $ok = $busMovement->insertSpcMovement($data);
            }            
            //Msg of the insert or update
            $this->confirmInsertUpdate($ok);
        }
        else
        {
            $this->addJsCode("alert('"._M('Data inicial maior que data final.', $module)."')");
        }
    }
}
?>