<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * PhysicalTarget form
 *
 * @author Rudi Uhrig Neto [rudi@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 09/01/2006
 *
 **/

/**
 * Form to manipulate a invoiceTarget
 **/
class FrmPhysicalTarget extends SManagementForm
{

    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new FinPhysicalTarget(), array('contractId'), 'BusPhysicalTarget');
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        // limbo :)
        $limbo    = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        if ( in_array($function,array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $contractId = $this->getObjectId();

            $business = new BusinessFinanceBusPhysicalTarget();
            $data     = $business->getPhysicalTarget($contractId);

            $fields[]   = new MTextLabel('contractId', $contractId, _M('Contrato', $module));
            $fields[]   = new MHiddenField('contractId', $contractId);

            //personId
            $personLabel = new MText('personLabel', _M('Pessoa', $module) . ':');
            $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

            $personId = new MTextField('personId', $this->getFormValue('personId', $data->personId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'));
            $personId->setReadOnly(true);

            $personName  = new MTextField('personName', $this->getFormValue('personName', $data->personName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $personName->setReadOnly(true);
            $personName->setJsHint(_M('Nome da pessoa', $module));

            $hctPerson   = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
            $hctPerson->setShowLabel(true);

            $fields[]    = $hctPerson;
            
            //course
            $courseLabel = new MText('courseLabel', _M('Curso', $module) . ':');
            $courseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $courseId    = new MTextField('courseId', $this->getFormValue('courseId', $data->courseId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $validators[] = new MRequiredValidator('courseId', _M('Curso', $module));
            $courseId->setReadOnly(true);
            $courseId->setJsHint(_M('Código do curso',$module));
            $courseVersion   = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $courseVersion->setReadOnly(true);
            $courseVersion->setJsHint(_M('Versão do curso',$module));
            $courseName  = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $courseName->setReadOnly(true);
            $courseName->setJsHint(_M('Nome do curso', $module));
            $hctCourse = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
            $hctCourse->setShowLabel(true);
            $fields[]  = $hctCourse;
            $this->page->onLoad('document.' . $this->name . '.cityId.focus();');
        }
        else
        {
            //personId
            $personLabel = new MText('personLabel', _M('Pessoa', $module) . ':');
            $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $personId = new MLookupTextField('personId', $this->getFormValue('personId', $data->personId), NULL, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractId', 'personId', 'personName', 'courseId', 'courseName', 'courseVersion', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'cityId', 'cityName', 'countryName', 'zipCode', 'location', 'number', 'complement', 'neighborhood', 'stateName'), 'academic', 'PersonContract', null, array('personId' => 'personId'), true);
            $personId->setJsHint(_M('Informe o código da pessoa', $module));
            $validators[] =  new MIntegerValidator('personId', _M('Pessoa', $module));
            $personName  = new MTextField('personName', $this->getFormValue('personName', $data->personName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $personName->setReadOnly(true);
            $personName->setJsHint(_M('Nome da pessoa', $module));
            $hctPerson   = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
            $hctPerson->setShowLabel(true);

            $this->page->onLoad('document.' . $this->name . '.personId.focus();');
            $fields[]    = $hctPerson;
            
            //Field contract
            $courseLabel = new MText('courseLabel', _M('Contrato', $module) . ':');
            $courseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $courseLabel->setClass('m-caption m-caption-required');
            $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId', $data->contractId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, array('personId', 'personName', 'courseId', 'courseName', 'courseVersion', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'cityId', 'cityName', 'countryName', 'zipCode', 'location', 'number', 'complement', 'neighborhood', 'stateName'), 'academic', 'Contract', null, array('personId' => 'personId'), true);
            $contractId->setJsHint(_M('Informe o código do contrato',$module));
            $validators[] = new MIntegerValidator('contractId', _M('Contrato', $module), 'required');
            $courseId    = new MTextField('courseId', $this->getFormValue('courseId', $data->courseId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $validators[] = new MRequiredValidator('courseId', _M('Curso', $module));
            $courseId->setReadOnly(true);
            $courseId->setJsHint(_M('Código do curso',$module));
            $courseVersion   = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $courseVersion->setReadOnly(true);
            $courseVersion->setJsHint(_M('Versão do curso',$module));
            $courseName  = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $courseName->setReadOnly(true);
            $courseName->setJsHint(_M('Nome do curso', $module));
            $hctCourse = new MHContainer('hctCourse', array($courseLabel, $contractId, $courseId, $courseVersion, $courseName));
            $hctCourse->setShowLabel(true);
            $fields[]  = $hctCourse;
        }

        // City
        $cityLabel = new MText('cityIdLabel', _M('Cidade', $module) . ':');
        $cityLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $cityLabel->setClass('m-caption m-caption-required');
        $cityId = new MLookupTextField('cityId', $this->getFormValue('cityId', $data->cityId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'cityName,limbo,stateName,limbo,countryName,zipCode', 'basic', 'City', null, null, true);
        $cityId->setJsHint(_M('Informe o código da cidade',$module));
        $validators[] = new MIntegerValidator('cityId', _M('Cidade', $module),'required');
        $cityName = new MTextField('cityName', $this->getFormValue('cityName', $data->cityName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $cityName->setJsHint(_M('Nome da cidade', $module));
        $cityName->setReadOnly(true);
        $fields[] = new MHContainer('hctCityName', array($cityLabel, $cityId, $cityName));
 
        // State name
        $stateNameLabel = new MText('stateNameLabel', _M('Estado', $module).':');
        $stateNameLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $stateName = new MTextField('stateName', $this->getFormValue('stateName', $data->stateName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $stateName->setJsHint(_M('Nome do estado', $module));
        $stateName->setReadOnly(true);
        $fields[] = new MHContainer('hctStateName', array($stateNameLabel, $stateName));
 
        // Country name
        $countryNameLabel = new MText('countryName', _M('País', $module).':');
        $countryNameLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $countryName = new MTextField('countryName', $this->getFormValue('countryName', $data->countryName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $countryName->setJsHint(_M('Nome do país', $module));
        $countryName->setReadOnly(true);
        $fields[] = new MHContainer('hctCountryName', array($countryNameLabel, $countryName));

        // Zipcode
        $zipCodeLabel = new MText('zipCodeLabel', _M('CEP', $module) . ':');
        $zipCodeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $zipCodeLabel->setClass('m-caption m-caption-required');
        $zipCode = new MTextField('zipCode', $this->getFormValue('zipCode', $data->zipCode), '', SAGU::getParameter('BASIC', 'FIELD_ZIPCODE_SIZE'));
        $zipCode->setJsHint(_M('Informe o CEP', $module));
        $validators[] = new MRangeValidator('zipCode', _M('CEP', $module), '10000000', '99999999', 'i', 'required');
        $fields[] =  new MHContainer('hctZipCodeLabel', array($zipCodeLabel, $zipCode));

        // Location
        $locationLabel = new MText('locationLabel', _M('Logradouro', $module) . ':');
        $locationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $locationLabel->setClass('m-caption m-caption-required');
        $location = new MTextField('location', $this->getFormValue('location', $data->location), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $location->setJsHint(_M('Informe o nome do local', $module));
        $validators[] = new MRequiredValidator('location', _M('Nome do logradouro', $module));
        $fields[] = new MHContainer('hctLocation', array($locationLabel, $location));

        // Number
        $numberLabel = new MText('numberLabel', _M('Número', $module).':');
        $numberLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $number = new MTextField('number', $this->getFormValue('number', $data->number), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $number->setJsHint(_M('Número', $module));
        $fields[] = new MHContainer('hctNumber', array($numberLabel, $number));

        // Complement
        $complementLabel = new MText('complementLabel', _M('Complemento', $module).':');
        $complementLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $complement = new MTextField('complement', $this->getFormValue('complement', $data->complement), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $complement->setJsHint(_M('Complemento', $module));
        $fields[] = new MHContainer('hctComplement', array($complementLabel, $complement));


        // Neighborhood
        $neighborhoodLabel = new MText('neighborhoodLabel', _M('Bairro', $module).':');
        $neighborhoodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $neighborhood = new MTextField('neighborhood', $this->getFormValue('neighborhood',$data->neighborhood), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $neighborhood->setJsHint(_M('Informe o bairro', $module));
        $fields[] = new MHContainer('hctNeighborhoodLabel', array($neighborhoodLabel, $neighborhood));

        $peopleName = new MTextField('peopleName', $this->getFormValue('peopleName',$data->name), _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), _M('Nome que será exibido no boleto bancário', $module));
        $peopleName->setJsHint(_M('Nome', $module));
        $validators[] = new MRequiredValidator('peopleName', _M('Nome', $module));
        $fields[] = $peopleName;

        $documentNumber = new MTextField('documentNumber', $this->getFormValue('documentNumber',$data->documentNumber), _M('Número do documento', $module), 11, _M('CPF que será exibido no boleto bancário', $module));
        $documentNumber->setJsHint(_M('Informe o número do documento', $module));
        $dnMask = new MRangeValidator('documentNumber', _M('Número do documento', $module), 0, 99999999999, 'i');
        $validators[] = $dnMask;
        $fields[] = $documentNumber;

        parent::defineFields($fields, $validators, $data);
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = parent::getTypesData();
        $data->name = MIOLO::_REQUEST('peopleName');
        return $data;
    }
}

?>
