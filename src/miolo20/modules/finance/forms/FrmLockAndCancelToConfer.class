<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * PayedOffInvoices form
 *
 * @author Rafael Luís Spengler [rafael@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 18/10/2005
 *
 **/

/**
 * Form to manipulate a message
 **/
class FrmLockAndCancelToConfer extends SForm
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();
        parent::__construct( _M('Trancamentos e cancelamentos para conferência', $module), null, null );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');        

        $fldBeginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), _M('Data inicial', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));

        $fldBeginDate->setJsHint(_M('Preencha este campo com a data inicial do pagamento do título', $module));
        $fields[] = $fldBeginDate;
        $validators[] = new MRequiredValidator('beginDate');

        $fldEndDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), _M('Data final', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $fldEndDate->setJsHint(_M('Preencha este campo com a data final dos títulos com pagamentos', $module));
        $fields[] = $fldEndDate;
        $validators[] = new MRequiredValidator('endDate');
       
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período',$module), $businessPeriod->listPeriod(), true );
        $fields[] = $periodId;

        $learningPeriodLabel = new MText('learningPeriodId', _M('Código do período letivo', $module).':');
        $learningPeriodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $learningPeriodId    = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId', $data->learningPeriodId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'limbo, limbo, limbo, limbo, limbo, learningPeriodDescription', 'academic', 'LearningPeriod', null, array('periodId' => 'periodId'), true);
                    
        $learningPeriodDescription = new MTextField('learningPeriodDescription', $this->getFormValue('learningPeriodDescription', $data->learningPeriodDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $learningPeriodDescription->setReadOnly(true);

        $fields[] = new MHContainer('hctlearningPeriod', array($learningPeriodLabel, $learningPeriodId, $learningPeriodDescription));
        
        $fields[] = new MSeparator('');
        $fields[] = new MButton('generate', _M('Gerar', $module), 'SUBMIT');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );
        
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function generate_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $business = new BusinessFinanceBusEntry();

        $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdLockAndCancelToConfer', $data);
        $grdResults->setData($business->listLockAndCancelToConfer($data));
        $this->addField(new Separator('<hr>'));
        $this->addField($grdResults);
    }

    /**
     *
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     *
     */
    public function getTypesData()
    {
        $data->beginDate = $this->beginDate->value;
        $data->endDate   = $this->endDate->value;
        return $data;
    }
}
?>
