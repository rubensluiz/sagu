<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Payment place form
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 18/08/2005
 *
 **/

/**
 * Form to manipulate a payment place
 **/
class FrmOperation extends SManagementForm
{
    /**
     * Constant type receivable or payable
     **/
    const TYPE_RECIVABLE = 'R';
    const TYPE_PAYABLE = 'P';
    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new FinOperation(), array('operationId'), 'BusOperation');
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $pk = $this->getObjectPk();
            $operationId = $pk->operationId;
            $fields[] = new MHiddenField('operationId', $operationId);
            $data = $this->busObject->getOperation($operationId);
        }
        
        // Description
        $descriptionLabel = new MText('descriptionLabel', _M('Descrição', $module) . ':');
        $descriptionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $descriptionLabel->setClass('m-caption m-caption-required');
        $description = new MTextField('description', $this->getFormValue('description', $data->description), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $description->setJsHint(_M('Informe a descrição da operação', $module));
        $validators[] = new MRequiredValidator('description', _M('Descrição', $module));
        $fields[] = new MHContainer('hctDescription', array($descriptionLabel, $description));
        
        // Operation type
        $business = new BusinessFinanceBusOperation();
        //$opts = $business->listOperationTypeId(1);
        $opts[] = $optionCredito = new MOption('rdCredito', 'C', _M('Crédito'));
        $opts[] = $optionDebito = new MOption('rdDebito', 'D', _M('Débito'));
        $operationTypeIdLabel = new MText('operationTypeLabel', _M('Tipo de operação', $module) . ':');
        $operationTypeIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $operationTypeIdLabel->setClass('m-caption m-caption-required');
        $operationTypeId = new MRadioButtonGroup('operationTypeId', '', $opts, $this->getFormValue('operationTypeId', $data->operationTypeId) ? $this->getFormValue('operationTypeId', $data->operationTypeId) : 'C', null, 'horizontal');
        $operationTypeId->setShowLabel(false);
        $operationTypeId->setJsHint(_M('Informe o tipo de operação', $module));        
        $fields[] = new MHcontainer('hctOperationType', array($operationTypeIdLabel, $operationTypeId));
        
        // Is counter movement
        $opts = SAGU::listTrueFalse(1);
        $isCounterMovementLabel = new MText('isCounterMovemetLabel', _M('Habilitada para movimento de caixa', $module) . ':');
        $isCounterMovementLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $isCounterMovementLabel->setClass('m-caption m-caption-required');
        $isCounterMovement = new MRadioButtonGroup('isCounterMovement', '', $opts, $this->getFormValue('isCounterMovement', $data->isCounterMovement) ? $this->getFormValue('isCounterMovement', $data->isCounterMovement) : 'f', null, 'horizontal');
        $isCounterMovement->setShowLabel(false);
        $fields[] = new MHcontainer('hctIsCounterMovement', array($isCounterMovementLabel, $isCounterMovement));
        
        //Options of the radio button income or expense
        $options[] = new MOption('income', self::TYPE_RECIVABLE, _M('Contas a receber', $module), true);
        $options[] = new MOption('expense', self::TYPE_PAYABLE, _M('Contas a pagar', $module), false);
        
        //Type operation
        $typeOption['label'] = new MText('receivableOrPayableLabel', _M('Utilização', $module) . ':');
        $typeOption['label']->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $valueTypeOption = $this->GetFormValue('receivableOrPayable', $data->receivableOrPayable) ? $this->GetFormValue('receivableOrPayable', $data->receivableOrPayable) : self::TYPE_RECIVABLE;
        $typeOption['radio'] = new MRadioButtonGroup('receivableOrPayable', '', $options, $valueTypeOption, null, 'horizontal');
        $typeOption['radio']->setShowLabel(false);
        
        $hctTypeOption = new MHContainer('hctTypeOption', $typeOption);
        $fields[] = $hctTypeOption;
        
        // Operation group
        $operationGroupIdLabel = new MText('operationGroupIdLabel', _M('Grupo de operações', $module) . ':');
        $operationGroupIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $operationGroupIdLabel->setClass('m-caption m-caption-required');
        $business = new BusinessFinanceBusOperationGroup();
        $operationGroupId = new MSelection('operationGroupId', $this->GetFormValue('operationGroupId', $data->operationGroupId), NULL, $business->listOperationGroup());
        $operationGroupId->setJsHint(_M('Selecione o grupo da operação', $module));
        $fields[] = new MHContainer('hctOperationGroup', array($operationGroupIdLabel, $operationGroupId));
        $validators[] = new MRequiredValidator('operationGroupId', _M('Grupo de operações', $module));

        //Field account scheme
        $accountSchemeLabel = new MText('accountSchemeLabel', _M('Plano de contas', $module) . ':');
        $accountSchemeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $fields[] = new MHiddenField('accountSchemeReferenced', DB_FALSE);
        $accountSchemeIdLookup = new MLookupTextField('accountSchemeId', $this->GetFormValue('accountSchemeId', $data->accountSchemeId), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'accountSchemeDescriptionLookup', 'accountancy', 'AccountScheme');
        $accountSchemeIdLookup->setJsHint(_M('Informe o código do plano de contas', $module));
        $validators[] = new MRegexpValidator('accountSchemeId', _M('Plano de contas', $module), '^[0-9]+(\.[0-9]+)*$');
        $accountSchemeDescription = new MTextField('accountSchemeDescriptionLookup', $this->accountSchemeDescriptionLookup->value, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $accountSchemeDescription->setReadOnly(true);
        $accountSchemeDescription->setJsHint(_M('Descrição do plano de contas', $module));
        $hctAccountScheme = new MHContainer('hctAccountScheme', array($accountSchemeLabel, $accountSchemeIdLookup, $accountSchemeDescription));
        $hctAccountScheme->setShowLabel(true);
        $fields[] = $hctAccountScheme;
        
        // Is extinct
        $opts = SAGU::listTrueFalse(1);
        $isExtinctLabel = new MText('isExtinctLabel', _M('Está extinto', $module) . ':');
        $isExtinctLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $isExtinctLabel->setClass('m-caption m-caption-required');
        $isExtinct = new MRadioButtonGroup('isExtinct', '', $opts, $this->getFormValue('isExtinct', $data->isExtinct) ? $this->getFormValue('isExtinct', $data->isExtinct) : DB_FALSE, null, 'horizontal');
        $isExtinct->setShowLabel(false);
        $isExtinct->setJsHint(_M('Informe aqui se esta operação está extinta', $module));
        $fields[] = new MHcontainer('hctIsExtinct', array($isExtinctLabel, $isExtinct));
        
        // Use incentives in discounts
        $useInDiscountsLabel = new MText('useInDiscountsLabel', _M('Considerar em descontos?', $module) . ':');
        $useInDiscountsLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $useInDiscountsLabel->setClass('m-caption m-caption-required');
        $useInDiscounts = new MRadioButtonGroup('useInDiscounts', '', $opts, $this->getFormValue('useInDiscounts', $data->useInDiscounts) ? $this->getFormValue('useInDiscounts', $data->useInDiscounts) : DB_TRUE, null, 'horizontal');
        $useInDiscounts->setShowLabel(false);
        $useInDiscounts->setJsHint(_M('Informe aqui se esta operação será considerada para o cálculo de descontos', $module));
        $fields[] = new MHcontainer('hctUseInDiscounts', array($useInDiscountsLabel, $useInDiscounts));
        
        // Use in interests
        $useInInterestsLabel = new MText('useInInterestsLabel', _M('Considerar em juros?', $module) . ':');
        $useInInterestsLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $useInInterestsLabel->setClass('m-caption m-caption-required');
        $useInInterests = new MRadioButtonGroup('useInInterests', '', $opts, $this->getFormValue('useInInterests', $data->useInInterests) ? $this->getFormValue('useInInterests', $data->useInInterests) : DB_TRUE, null, 'horizontal');
        $useInInterests->setShowLabel(false);
        $useInInterests->setJsHint(_M('Informe aqui se esta operação será considerada para o cálculo de juros', $module));
        $fields[] = new MHcontainer('hctUseInInterests', array($useInInterestsLabel, $useInInterests));
        
        // Use in Fines
        $useInFinesLabel = new MText('useInFinesLabel', _M('Considerar em multas?', $module) . ':');
        $useInFinesLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $useInFinesLabel->setClass('m-caption m-caption-required');
        $useInFines = new MRadioButtonGroup('useInFines', '', $opts, $this->getFormValue('useInFines', $data->useInFines) ? $this->getFormValue('useInFines', $data->useInFines) : DB_TRUE, null, 'horizontal');
        $useInFines->setShowLabel(false);
        $useInFines->setJsHint(_M('Informe aqui se esta operação será considerada para o cálculo de multas', $module));
        $fields[] = new MHcontainer('hctUseInFines', array($useInFinesLabel, $useInFines));
        
        //Observações
        $obsLabel = new MLabel(_M("Observação:"));
        $obsLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $obsLabel->setClass('m-caption');
        
        $obsLink = new MLink('lnkContabilizando', _M("clique aqui"), 'http://manuais.solis.com.br/index.php/Contabilizando#Observa.C3.A7.C3.A3o_da_Opera.C3.A7.C3.A3o', NULL, '_blank');
        $obsHint = _M("Para mais informações " . $obsLink->generate() . " (descrição do uso e variáveis disponíveis).");

        $obsText = new MMultiLineField('observacao', $this->GetFormValue('observacao'), NULL, 20, 8, 30, $obsHint);
        $obsText->setJsHint(_M("Informe a observação da operação."));
        $fields[] = $hctObservacao = new MHContainer('hctObservacao', array($obsLabel, $obsText));
        
        parent::defineFields($fields, $validators, $data);
    }
    
    public function getTypesData()
    {
        $data = parent::getTypesData();
        $data->accountSchemeId = strlen($this->GetFormValue('accountSchemeId')) > 0 ? $this->GetFormValue('accountSchemeId') : SType::NULL_VALUE;

        return $data;
    }
}

?>
