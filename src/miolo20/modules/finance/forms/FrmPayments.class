<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Payment place form
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 17/08/2005
 *
 **/

/**
 * Form to manipulate a payment place
 **/
class FrmPayments extends SForm
{

    /**
     * Class constructor
     **/
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();
        parent::__construct( _M('Listar pagamentos', $module), null, null );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        
        $personId = MIOLO::_request('personId') ? MIOLO::_request('personId') : MIOLO::_request('personId', 'GET');
        if (strlen($personId)>0)
        {
            $businessEntry = new BusinessFinanceBusEntry();
            $dataGrid      = $businessEntry->listPayments($personId);
            $dataGridTotal = $businessEntry->getTotalPayments($personId);
            $fields[] = new MButton('btnPaymentsClosePositionUp', _M('Fechar janela', $module), 'self.close()');
            $grdPayments = $MIOLO->getUI()->getGrid($module, 'GrdPayments');
            $grdPayments->setData($dataGrid);
            
            $footer1 = new MText('footer1', _M('Total', $module));
            $footer1->setWidth(580);
            if (is_array($dataGrid[0]))
            {
                $footer[] = $footer1;
                $footer[] = new MText('footerTotal', $dataGridTotal);
            
                $hctFooter = new MHContainer('hctFooter', $footer);
                $grdPayments->setFooter($hctFooter);
            }
            $fields[] = $grdPayments;
        }
        else
        {
            $MIOLO->Information(_M('Nenhum código de pessoa selecionado, selecione uma pessoa válida', $module));
        }
        $fields[] = new MButton('btnPaymentsClosePositionDown', _M('Fechar janela', $module), 'self.close()');
        $this->setFields($fields);
        $this->setShowPostButton(false);
        
        parent::defineFields( array( 'toolbar' => false ) );
    }
}
?>
