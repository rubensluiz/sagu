<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for acdCenter table
 *
 * @author Augusto A. Silva [augusto@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Augusto A. Silva
 *
 * @since
 * Class created on 03/09/2013
 *
 **/

/**
 * Form to search the basCenter table
 */
class FrmBaixaTitulosDescontoFolha extends SForm
{
    /**
     * Class constructor
     */
    public function __construct($data)
    {
        parent::__construct(_M("Baixa de títulos por desconto em folha"), null, null);
        
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
    }

    /**
     *  Default method to define fields
     */
    public function defineFields($args)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        // Contrato
        $contractCourseLabel = new MText('contractCourseLabel', _M('Contrato', $module) . ':');
        $contractCourseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractCourseLabel->setClass('m-caption');
        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId'), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion'), 'academic', 'ActiveContract', null, array('contractId' => 'contractId'), true);
        $contractId->setJsHint(_M('Informe o código do contrato', $module));
        $contractPersonId = new MTextField('contractPersonId', $this->getFormValue('contractPersonId'), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractPersonId->setReadOnly(true);
        $contractPersonId->setJsHint(_M('Código da pessoa', $module));
        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName'), '', 30);
        $contractPersonName->setReadOnly(true);
        $contractPersonName->setJsHint(_M('Nome da pessoa', $module));        
        $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName'), '', 30, _M('Não é necessário preenchimento, somente para filtro mais específico.'));
        $contractCourseName->setReadOnly(true);
        $contractCourseName->setJsHint(_M('Nome do curso', $module));
        $hctContractCourse = new MHContainer('hctContractCourse', array($contractCourseLabel, $contractId, $contractPersonId, $contractPersonName, $contractCourseName));
        $hctContractCourse->setShowLabel(false);
        $fields[] = $hctContractCourse;
        
        // Data de vencimento do título.
        $maturityDateLabel = new MText('maturityDateLabel', _M('Período de vencimento', $module) . ':');
        $maturityDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $maturityDateLabel->setClass('m-caption m-caption-required');
        $maturityDateBegin = new MCalendarField('maturityDateBegin');
        $maturityDateEnd = new MCalendarField('maturityDateEnd');
        $fields[] = new MHContainer('maturityHC', array($maturityDateLabel, $maturityDateBegin, $maturityDateEnd));
        $validators[] = new MRequiredValidator('maturityDateBegin', _M('Período inicial', $module));
        $validators[] = new MRequiredValidator('maturityDateEnd', _M('Período final', $module));
        
        $btnLoad   = new MButton('btnLoad', _M('Carregar títulos que serão baixados', $module));
        $btnAction = new MButton('btnAction', _M('Baixar títulos por desconto em folha', $module));
        $btnAction->addAttribute('style', 'display:none;');
        $fields[] = new MHContainer('HCBtns', array($btnLoad, $btnAction));
        
        if ( strlen($this->getFormValue('maturityDateBegin')) > 0 && strlen($this->getFormValue('maturityDateEnd')) > 0 )
        {
            $gridData = $this->obterDados();

            if ( count($gridData) > 0 )
            {
                $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdBaixaTitulosDescontoFolha');
                $grdResults->setData($gridData);
                $grdResults->setTitle(_M('Títulos que serão baixados por desconto em folha', $module));
                $btnAction->addAttribute('style', 'display:inline;');
                $fields[] = $grdResults;
            }
            else
            {
                $this->addAlert(_M('Nenhum registro encontrado', $module));
            }
        }
        
        parent::defineFields(array('fields' => $fields, 'validators' => $validators));
    }
    
    /**
     * Somente para validar.
     * 
     * @param type $args
     */
    public function btnLoad_click($args)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        if ( !strlen($this->getFormValue('maturityDateBegin')) > 0 || !strlen($this->getFormValue('maturityDateEnd')) > 0 )
        {
            $this->addError(_M('Período de vencimento é requerido.', $module));
        }
    }
    
    /**
     * Baixa os títulos filtrados como operação de desconto em folha.
     * 
     * @param stdClass $args
     */
    public function btnAction_click($args)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        if ( strlen($this->getFormValue('maturityDateBegin')) > 0 && strlen($this->getFormValue('maturityDateEnd')) > 0 )
        {
            try
            {
                SDatabase::beginTransaction();
                
                $busInvoice          = new BusinessFinanceBusInvoice();
                $busDefaultOperation = new BusinessFinanceBusDefaultOperations();
                
                $operationId =  $busDefaultOperation->getDefaultOperation('payrollDiscountOperation');
                $dados       = $this->obterDados();

                if ( strlen($operationId) > 0 )
                {
                    foreach ( $dados as $data )
                    {
                        $dadosTitulo = new stdClass();

                        list ( $dadosTitulo->invoiceId,
                               $dadosTitulo->maturityDate,
                               $dadosTitulo->value,
                               $dadosTitulo->operation,
                               $dadosTitulo->contractId,
                               $dadosTitulo->name,
                               $dadosTitulo->responsable ) = $data;

                        $busInvoice->closeInvoice($dadosTitulo->invoiceId, $dadosTitulo->value, null, null, $operationId);
                    }

                    SDatabase::commit();
                    
                    $promptMsg = new MPrompt(_M('Informação'), _M('Títulos baixados com sucesso.'));
                    $promptMsg->setType('information');
                    
                    $args = array(
                        'contractId' => $this->getFormValue('contractId'), 
                        'maturityDateBegin' => $this->getFormValue('maturityDateBegin'),
                        'maturityDateEnd' => $this->getFormValue('maturityDateEnd'),
                        'event' => 'tbBtnPrint_click'
                    );
                    $action = $MIOLO->getActionUrl($module, 'main:report:relatorioTitulosBaixadosDescontoFolha', null, $args);
                    $promptMsg->addButton(_M('Imprimir títulos baixados', $module), $action);
                    
                    $exitUrl = $MIOLO->getActionUrl($module, 'main:process:baixaTitulosDescontoFolha');
                    $promptMsg->addButton(_M('Voltar', $module), $exitUrl);
                    
                    $MIOLO->prompt($promptMsg);
                }
                else
                {
                    throw new Exception(_M("A operação padrão de desconto em folha não foi configurada. Verifique em 'Financeiro::Cadastro::Operações padrão'."));
                }
            }
            catch ( Exception $e )
            {
                SDatabase::rollback();
                $this->addError(_M('Erro ao baixar títulos: ' . $e, $module));
            }
        }
        else
        {
            $this->addError(_M('Período de vencimento é requerido.', $module));
        }
    }
    
    /**
     * Retorna os dados para a grid.
     * 
     * @param type $args
     * @return array
     */
    public function obterDados($args = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        $filters = new stdClass();
        $filters->contractId        = $this->getFormValue('contractId');
        $filters->maturityDateBegin = $this->getFormValue('maturityDateBegin');
        $filters->maturityDateEnd   = $this->getFormValue('maturityDateEnd');
        
        $busPayrollDiscountTarget = new BusinessFinanceBusPayrollDiscountTarget();
        $dados = $busPayrollDiscountTarget->obterTitulosDosContratosComDescontoEmFolha($filters);
        
        return $dados;
    }
}
?>