<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Learning Period form
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @since
 * Class created on 12/12/2005
 *
 **/

/**
 * Form to manipulate a course occurrence
 **/
class FrmPrintInvoice extends SForm
{
    private $module;

    /**
     * Class constructor
     **/
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $this->module = $module;

        parent::__construct( _M('Imprimir título', $module), null, null );
    }

   /**
    * Default method to define fields
   **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $data->invoiceId = strlen($data->invoiceId)>0 ? $data->invoiceId : MIOLO::_request('_invoiceId', 'GET');
        $goto = MIOLO::_request('goto') ? MIOLO::_request('goto') : MIOLO::_request('goto', 'GET');

        if (strlen($data->invoiceId)>0)
        {
            $invoiceIdLabel = new MText('invoiceIdLabel', _M('Código do título', $module).':');
            $invoiceIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $invoiceId_ = new MTextLabel('invoiceIdLabel', $data->invoiceId);
            $invoiceIdHidden = new MHiddenField('invoiceId', $data->invoiceId);
            $invoiceId = new MHContainer('hctInvoiceId', array($invoiceIdLabel, $invoiceId_, $invoiceIdHidden));
        }
        else
        {
            // Invoice id
            $invoiceId = new MTextField('invoiceId', $this->getFormValue('invoiceId', $data->invoiceId), _M('Código do título', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $validators[] = new MIntegerValidator('invoiceId');
        }

        // Apply discount
        $applyDiscountLabel = new MText('applyDiscountLabel', _M('Aplicar desconto', $module).':');
        $applyDiscountLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $applyDiscount = new MRadioButtonGroup('applyDiscount', '', SAGU::listTrueFalse(1), strlen($this->getFormValue('applyDiscount', $data->applyDiscount))>0 ? $this->getFormValue('applyDiscount', $data->applyDiscount) : (defined('DEFAULT_APPLY_DISCOUNT_TO_PRINT_INVOICE') ? DEFAULT_APPLY_DISCOUNT_TO_PRINT_INVOICE : 'f'), null, 'horizontal');
        $applyDiscount->setShowLabel(false);

        // Generate bank code
        $generateBankCodeLabel = new MText('generateBankCodeLabel', _M('Gerar novo código do banco', $module).':');
        $generateBankCodeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $generateBankCode = new MRadioButtonGroup('generateBankCode', '', SAGU::listTrueFalse(1), strlen($this->getFormValue('generateBankCode', $data->generateBankCode))>0 ? $this->getFormValue('generateBankCode', $data->generateBankCode) : (defined('DEFAULT_GENERATE_BANK_CODE_TO_PRINT_INVOICE') ? DEFAULT_GENERATE_BANK_CODE_TO_PRINT_INVOICE : 'f'), null, 'horizontal');
        $generateBankCode->setShowLabel(false);
        $hctGenerateBankCode = new MHContainer('hctGenerateBankCode', array($generateBankCodeLabel, $generateBankCode));

        $submitButton = new MButton('submit_button', _M('Enviar', $module), 'SUBMIT');
        $hct[] = $submitButton;
        if ( strlen($goto)>0 )
        {
            $backButton = new MButton('backButton', _M('Voltar', $module), $goto);
            $hct[] = $backButton;
        }

        $fields[] = $invoiceId;
        $fields[] = new MHContainer('hctApplyDiscount', array($applyDiscountLabel, $applyDiscount));
        $fields[] = new MHContainer('hctGenerateBankCode', array($generateBankCodeLabel, $generateBankCode));
        $fields[] = new Separator('');
        $fields[] = new MHContainer('hctButtons', $hct);

        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators, 'toolbar' => false ) );
     }

    /**
     * Event used when submit_button is clicked
     */
    public function submit_button_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $donwload = (MIOLO::_REQUEST('boletosLote') == DB_TRUE) ? false : true;

        $invoiceId = strlen($this->getFormValue('invoiceId'))>0 ? $this->getFormValue('invoiceId') : (MIOLO::_request('_invoiceId') ? MIOLO::_request('_invoiceId') : MIOLO::_request('_invoiceId', 'GET'));
        
        // verificacao
        // caso a Conta Bancaria do titulo esteja com a flag 'geracaoDoNossoNumeroPeloBanco' como TRUE, 
        //  e o titulo nao possua Nosso Numero, nao autoriza a impressao do boleto.
        $busInvoice = new BusinessFinanceBusInvoice();
        $invoice = $busInvoice->getInvoice($invoiceId);
        
        if ( strlen($invoice->bankAccountId) > 0 )
        {
            $busBankAccount = new BusinessFinanceBusBankAccount();
            $bankAccount = $busBankAccount->getBankAccount($invoice->bankAccountId);
            
            if ( $bankAccount->geracaoDoNossoNumeroPeloBanco == DB_TRUE )
            {
                $busBankInvoiceInfo = new BusinessFinanceBusBankInvoiceInfo();
                $info = $busBankInvoiceInfo->getBankInvoiceInfo($invoice->bankAccountId, $invoiceId);
                
                if ( strlen($info->ourNumber) == 0 )
                {
                    $MIOLO->error(_M('Desculpe, mas não é possível imprimir o boleto para este título, pois ainda não foi registrado pelo banco.'));
                }
            }
        }
        
        // segue com a rotina normal
        $MIOLO->uses('classes/IntegrationSAGUSAB.class', 'finance');
        $integrationSAGUSAB = new IntegrationSAGUSAB($invoiceId);
        $integrationSAGUSAB->generateInvoice($donwload);
        
        if ( $integrationSAGUSAB->hasErrors )
        {
            $msg = _M('Os seguintes erros ocorreram:', $module) . '<br />';
            for ( $i=0; $i<count($integrationSAGUSAB->errors); $i++ )
            {
                $msg .= '<br />- ' . $integrationSAGUSAB->errors[$i];
            }
            $msg .= '<br /><br />' . _M('O boleto não pode ser gerado.', $module);
            $MIOLO->error($msg);
        }

        if ( $integrationSAGUSAB->invoiceTypeId == FinInvoiceType::TYPE_GRU )
        {
            //do nothing
        }
        else if ( $integrationSAGUSAB->online )
        {
            // get the link and redirect
            $this->page->redirect($integrationSAGUSAB->link);
        }
        else
        {
            // get the file and use header()
            SAGU::returnAsFile(basename($integrationSAGUSAB->fileName), file_get_contents($integrationSAGUSAB->fileName), 'application/pdf');
        }
    }
}
?>
