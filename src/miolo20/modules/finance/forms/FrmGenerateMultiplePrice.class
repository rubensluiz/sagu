<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * GenerateMultiplePrice form
 *
 * @author Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @since
 * Class created on 29/09/2011
 */

/**
 * Form to generate Multiple Price
 */
class FrmGenerateMultiplePrice extends SForm
{
    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // MSubDetail
        $MIOLO->uses('/ui/controls/msubdetail.class');

        parent::__construct(_M('Gerar diversos preços', $module), null, null);

        // Desabilita uns botões da toolbar
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // Instancia o business
        $busFormationLevel = new BusinessAcademicBusFormationLevel();

        // Field formation level
        $formationLevelId = new MComboBox('formationLevelId', $this->getFormValue('formationLevelId',$data->formationLevelId), _M('Grau de formação', $module), $busFormationLevel->listFormationLevel());
        $formationLevelId->setJsHint(_M('Selecione um grau de formação', $module));
        $validators[] = new MRequiredValidator('formationLevelId');
        $fields[] = $formationLevelId;

        // Botão Filtrar
        $fields[] = new MButton('btnFilter', _M('Filtrar', $module));

        // Container com tudo dentro
//        $hctForm = new MHContainer('hctForm', SAGU::alignFields($flds));
//        $hctForm->setShowLabel(true);
//        $fields[] = $hctForm;
//        unset($flds);

        parent::defineFields();
        $this->setFields($fields);
        $this->setValidators($validators);
        
        // Em postBacks, carrega com o filtro
        if ( strlen(MIOLO::_REQUEST('formationLevelId')) > 0 &&
             MIOLO::_REQUEST('__EVENTTARGETVALUE') != 'btnFilter:click' &&
             MIOLO::_REQUEST('__EVENTTARGETVALUE') != 'tbBtnSave:click')
        {
            $this->btnFilter_click();
        }
    }

    /**
     * Event triggered when user chooses Generate from the toolbar
     */
    public function btnFilter_click($sender=NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        // Instancia dos business
        $busFormationLevel = new BusinessAcademicBusFormationLevel();
        $busGenerateMultiplePrice = new BusinessFinanceBusGenerateMultiplePrice();

        // formationLevelId
        $formationLevelId = MIOLO::_REQUEST('formationLevelId');
        $fields[] = new MHiddenField('formationLevelId', $formationLevelId);

        // Obtém os filtros
        $filters = new stdClass();
        $filters->formationLevelId = $formationLevelId;

        // Obtém os cursos
        $courses = $busGenerateMultiplePrice->getCourseOccurrencesPrices($filters);

        // Adiciona uma coluna na frente (posição 0) com o id dos checkboxes
        $gridData = array();
        foreach ( (array)$courses as $course )
        {
            $courseOccurrence = new stdClass();
            $courseOccurrence->courseId = $course[0];
            $courseOccurrence->courseVersion = $course[1];
            $courseOccurrence->turnId = $course[3];
            $courseOccurrence->unitId = $course[5];

            // Serializa o código, versão, turno e unidade do curso e monta uma chave única para os checkboxes
            // Obs.: faz base64 por causa das aspas(")
            $gridData[] = array_merge(array(base64_encode(serialize($courseOccurrence))), $course);
        }

        if ( !(count($courses) > 0) )
        {
            $formationLevel = $busFormationLevel->getFormationLevel($formationLevelId);
            $this->addError(_M('Não foram encontrados cursos para o grau de formação @1.', $module, $formationLevel->description));
        }
        else
        {
            $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdGenerateMultiplePrice', $filters);
            $grdResults->setData($gridData);
            $grdResults->setTitle(_M('Ocorrências de curso', $module));

            $fields[] = new MSeparator('<hr>');
            $fields[] = $grdResults;
            $fields[] = new MSeparator('<hr>');
            $this->addFields($fields);

            // Exibe a tela de cadastro de preço
            $this->definePrice();
        }
    }

    /**
     * Função que monta a tela de cadastro de preço
     * FIXME: Utilizar a tela FrmPrice pra fica bom :-)
     */
    public function definePrice($args = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $function = MIOLO::_REQUEST('function');

        // Limpa a MSubDetail, desde que não foi clicado no botão salvar
        if ( MIOLO::_REQUEST('event') != 'tbBtnSave:click' )
        {
            MSubDetail::clearData('subPricePolicy');
        }

        // Instancia dos business
        $busPrice = new BusinessFinanceBusPrice();
        $busBank = new BusinessFinanceBusBankAccount();
        $busPricePolicy = new BusinessFinanceBusPricePolicy();

        // Filters
        $filters = new stdClass();
        $filters->courseId = $courseId;
        $filters->courseVersion = $courseVersion;
        $filters->turnId = $turnId;
        $filters->unitId = $unitId;
        $filters->startDate = $startDate;

        // Price Policy
        $dataPricePolicy = $busPricePolicy->searchPricePolicy($filters, true);

        // Field startDate
        $startDate = new MCalendarField('startDate', $this->getFormValue('startDate', $data->startDate), _M('Data inicial', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $startDate->setValidator(new MDATEDMYValidator('startDate', _M('Data inicial', $module), 'required'));
        $startDate->setJsHint(_M('Informe a data inicial', $module));
        $fields[] = $startDate;
        $validators[] = new MRequiredValidator('startDate', _M('Data inicial', $module));

        // Field endDate
        $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), _M('Data final', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $endDate->setValidator(new MDATEDMYValidator('endDate', _M('Data final', $module), 'required'));
        $endDate->setJsHint(_M('Informe a data de término', $module));
        $fields[] = $endDate;
        $validators[] = new MRequiredValidator('endDate', _M('Data final', $module));

        // Field Value
        $value = new MTextField('value', SAGU::formatNumber($this->getFormValue('value', $data->value)), _M('Valor', $module), SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'), _M('Ex.: 1.00', $module));
        $value->setJsHint(_M('Informe o valor', $module));
        $validators[] = new MFloatValidator('value', _M('Valor',$module), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), 'required');
        $fields[] = $value;

        // Obtém o banco "preferido"
        $bankOptions = $busBank->getBankAccountWithInvoiceInfo();
        $bankInfoLabel = new MText('bankAccountIdLabel', _M('Conta bancária', $module).':');
        $bankInfoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $bankInfoLabel->setClass('m-caption m-caption-required');
        $bankInfo = new MSelection('bankAccountId', $this->getFormValue('bankAccountId', $data->bankAccountId), null, $bankOptions);
        $bankInfo->setJsHint(_M('Selecione o banco de preferência', $module));
        $validators[] = new MRequiredValidator('bankAccountId', _M('Conta bancária', $module));
        $fields[] = new MHContainer('hctBankInfo', array($bankInfoLabel, $bankInfo));

        // Field valueIsFixed
        $valueIsFixed = new MSelection('valueIsFixed', $this->getFormValue('valueIsFixed', $data->valueIsFixed), _M('Valor é fixo', $module), SAGU::listYesNo());
        $validators[] = new MRequiredValidator('valueIsFixed', _M('Valor é fixo', $module));
        $fields[] = $valueIsFixed;

        // First parcel at sight
        $firstParcelAtSightValue = $this->GetFormValue('firstParcelAtSight', $data->firstParcelAtSight);
        $firstParcelAtSightValue = $firstParcelAtSightValue == DB_TRUE ? DB_TRUE : DB_FALSE;
        $FPAS = new MRadioButtonGroup('firstParcelAtSight', _M('Primeira parcela à vista', $module), SAGU::listYesNo(1), $firstParcelAtSightValue);
        $FPAS->setDisposition('horizontal');
        $FPAS->showRequiredLabel = true;
        $fields[] = $FPAS;
        // End First parcel at sight
        
        // Número de parcelas
        $parcelsNumber = new MTextField('parcelsNumber', $this->getFormValue('parcelsNumber', $data->parcelsNumber), _M('Número de parcelas', $module), SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'));
        $parcelsNumber->setJsHint(_M('Número de parcelas', $module));
        $validators[] = new MIntegerValidator('parcelsNumber', _M('Número de parcelas', $module), 'required');
        $fields[] = $parcelsNumber;
        
        // Dia de vencimento
        $parcelsTypes['D'] = _M('Dia da matrícula [O dia de vencimento será sempre no mesmo dia que a matrícula foi efetuada]');
        $parcelsTypes['C'] = _M('Configurável');

        $optParcelsType = new MRadioButtonGroup('parceltype', _M('Dia de vencimento'), $parcelsTypes, $this->getFormValue('parceltype', 'C'));
        $optParcelsType->setAutoPostBack(true);
        $validators[] = new MRequiredValidator('parceltype', _M('Dia de vencimento'));
        $fields[] = $optParcelsType;

        if( $this->getFormValue('parceltype', SAGU::NVL($data->parceltype, MIOLO::_REQUEST('parceltype'))) != 'D' )
        {    
            // Maturity day
             $maturityDay = new MTextField('maturityDay', $this->getFormValue('maturityDay', $data->maturityDay), _M('Dia', $module), SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'));
             $maturityDay->setJsHint(_M('Dia de vencimento padrão', $module));
             $validators[] = new MIntegerValidator('maturityDay', _M('Dia de vencimento', $module), 'required');
             $fields[] = $maturityDay;
        }

        $fields[] = new MSeparator();

        /*
         * SubDetail price policy
         */
        //Field policy id
        $policyLabel = new MText('policyLabel', _M('Política', $module). ':');
        $policyLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $policyLabel->setClass('m-caption m-caption-required');
        $policyId = new MLookupTextField('policyId', $this->getFormValue('policyId', $data->policyId), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'policyDescription', 'finance', 'Policy', null, null, true);
        $policyId->setJsHint(_M('Informe o código da política', $module));
        $policyDescription = new MTextField('policyDescription', $this->getFormValue('policyDescription',$data->policyDescription), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $policyDescription->setReadOnly(true);
        $policyDescription->setJsHint(_M('Descrição da política', $module));
        $hctPolicy = new MHContainer('hctPolicy', array($policyLabel, $policyId, $policyDescription));
        $hctPolicy->setShowLabel(true);
        $sFields[] = $hctPolicy;

        // Field semester
        $labelSemester = new MText('semesterLabel', _M('Período', $module) . ':');
        $labelSemester->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $fieldSemester = new MTextField('semester', null, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $fieldSemester->setJsHint(_M('Informe o período (semestre)', $module));
        $hctSemester = new MHContainer('hctSemester', array($labelSemester, $fieldSemester));
        $hctSemester->setShowLabel(true);
        $sFields[] = $hctSemester;

        // Field parcelNumber
        $labelParcelNumber = new MText('parcelNumberLabel', _M('Parcela', $module) . ':');
        $labelParcelNumber->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $fieldParcelNumber = new MTextField('parcelNumber', null, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $fieldParcelNumber->setJsHint(_M('Informe o número da parcela', $module));
        $hctParcelNumber = new MHContainer('hctParcelNumber', array($labelParcelNumber, $fieldParcelNumber));
        $hctParcelNumber->setShowLabel(true);
        $sFields[] = $hctParcelNumber;

        // Columns
        $columns[] = new MGridColumn(_M('Código da política', $module), 'right', true, '10%', true, 'policyId');
        $columns[] = new MGridColumn(_M('Política', $module), 'left', true, '60%', true, 'policyDescription');
        $columns[] = new MGridColumn(_M('Período', $module), 'center', true, '15%', true, 'semester');
        $columns[] = new MGridColumn(_M('Parcela', $module), 'center', true, '15%', true, 'parcelNumber');

        // SubDetail validators
        $valids[] = new MIntegerValidator('policyId', _M('Política', $module), 'required');
        $valids[] = new MIntegerValidator('semester', _M('Período', $module), 'optional');
        $valids[] = new MIntegerValidator('parcelNumber', _M('Parcela', $module), 'optional');

        $fields[] = $sub = new MSubDetail('subPricePolicy', _M('Políticas', $module), $columns, $sFields, true);
        $sub->setValidators($valids);

        $returnTo = new MHiddenField( 'returnTo', $this->getFormValue( 'returnTo', strlen( MIOLO::_REQUEST( 'returnTo' ) ) > 0 ? MIOLO::_REQUEST( 'returnTo' ) : MIOLO::_REQUEST( 'returnTo', 'GET' ) ) );
        $fields[] = $returnTo;

        parent::defineFields();
        $this->addFields($fields);
        $this->setValidators($validators);
    }

    /**
     * Salva este preço para as ocorrências de curso selecionadas na Grid
     */
    public function tbBtnSave_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // Instância dos business
        $busPrice = new BusinessFinanceBusPrice();
        $busPricePolicy = new BusinessFinanceBusPricePolicy();

        // Obtém os cursos que terão esta configuração de preço
        $gridSelections = (array)MIOLO::_REQUEST('selectgridGenerateMultiplePrice'); // GrdGenerateMultiplePrice

        // Verifica se tem os dados dos cursos
        if ( !(count($gridSelections) > 0) )
        {
            $this->addError(_M('Você deve selecionar pelo menos um curso para iniciar a geração dos preços.', $module));
        }
        else
        {
            SDatabase::beginTransaction();

            try
            {
                $preco = new FinPrice();
                $preco->startDate = MIOLO::_REQUEST('startDate');
                $preco->endDate = MIOLO::_REQUEST('endDate');
                $preco->value = MIOLO::_REQUEST('value');
                $preco->bankAccountId = MIOLO::_REQUEST('bankAccountId');
                $preco->valueIsFixed = MIOLO::_REQUEST('valueIsFixed');
                $preco->fixedValue = MIOLO::_REQUEST('fixedValue');
                $preco->firstParcelAtSight = MIOLO::_REQUEST('firstParcelAtSight');
                $preco->applyChangesOnFirstParcel = MIOLO::_REQUEST('applyChangesOnFirstParcel');
                $preco->parcelsNumber = SAGU::NVL(MIOLO::_REQUEST('parcelsNumber'), SAGU::getParameter('BASIC', 'DEFAULT_PARCELS_NUMBER'));
                $preco->maturityDay = SAGU::NVL(MIOLO::_REQUEST('maturityDay'), SAGU::getParameter('BASIC', 'MATURITY_DAY'));
                $preco->referenceNumberHours = MIOLO::_REQUEST('referenceNumberHours');
                $preco->parceltype = MIOLO::_REQUEST('parceltype');

                // Conta quantos preços foram inseridos
                $total = 0;
                foreach ( $gridSelections as $courseOccurrence )
                {
                    $courseOccurrence = base64_decode($courseOccurrence);
                    $courseOccurrence = unserialize($courseOccurrence);

                    $preco->courseId = $courseOccurrence->courseId;
                    $preco->courseVersion = $courseOccurrence->courseVersion;
                    $preco->turnId = $courseOccurrence->turnId;
                    $preco->unitId = $courseOccurrence->unitId;

                    // Grava os valores
                    $busPrice->insertPrice($preco);

                    /*
                     * Salva as políticas
                     */
                    $dataSubDetail = (array)MSubDetail::getData('subPricePolicy');
                    foreach ( $dataSubDetail as $policy )
                    {
                        if ( !($policy->removeData) )
                        {
                            // Substitui a ocorrência de curso
                            $policy->courseId = $preco->courseId;
                            $policy->courseVersion = $preco->courseVersion;
                            $policy->turnId = $preco->turnId;
                            $policy->unitId = $preco->unitId;
                            $policy->startDate = $preco->startDate;
                            $ok = $busPricePolicy->insertPricePolicy($policy);
                        }
                    }

                    $total++;
                }

                SDatabase::commit();
                $this->addInfo(_M('@1 preços inseridos com sucesso.', $module, $total));
            }
            catch ( Exception $e )
            {
                SDatabase::rollback();
                $opts = array(
                    'formationLevelId' => MIOLO::_REQUEST('formationLevelId')
                );
                $goto = $MIOLO->getActionURL($module, 'main:process:generationInLot:generateMultiplePrice', null, $opts);
                $msg = array(
                    _M('Não foi possível inserir os preços.', $module),
                    $e->getMessage()
                );
                SAGU::error($msg, $goto, $caption);
            }
        }

        $this->btnFilter_click(MIOLO::_REQUEST('formationLevelId'));
    }
}
?>