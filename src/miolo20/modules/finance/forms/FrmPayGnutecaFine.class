<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluçõeds Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Close invoice form
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 01/12/2010
 *
 **/

/**
 * Form to manipulate a bank account
 **/
class FrmPayGnutecaFine extends SForm
{
    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        parent::__construct(_M('Pagar multa', $module), null, null);
    }

    /**
     * Método padrão para cração dos campos do formulário
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $session = $MIOLO->getSession();

        $this->toolbar->disableButton('tbBtnNew');
        $this->toolbar->disableButton('tbBtnSave');
        $this->toolbar->disableButton('tbBtnDelete');
        $this->toolbar->disableButton('tbBtnSearch');
        $this->toolbar->disableButton('tbBtnPrint');

        $fine = MIOLO::_request('fineId'); //Código da multa Gnuteca

        $busGnuteca = new BusinessGnutecaBusGnutecaToSagu2();
        $dataFine = $busGnuteca->getFine($fine);

        if ( strlen($fine) == 0 )
        {
            $MIOLO->error( _M('Nenhuma multa encontrada', $module) ); //Verifica se veio o parametro com o codigo da multa
        }

        //Busca dados do funcionário
        $loginUser = $MIOLO->getLogin();
        $busPhysicalPersonEmployee = new BusinessBasicBusPhysicalPersonEmployee();
        $personData = $busPhysicalPersonEmployee->getPersonByMioloUserName($loginUser->id);

        if ( is_object($personData) )
        {
            $busOpenCounter = new BusinessFinanceBusOpenCounter();
            
            //Busca dados do caixa
            $filter = new stdClass();
            
            $filter->operatorId = $personData->personId;
            $filter->open = 't';
            
            $openCounter = $busOpenCounter->searchOpenCounter($filter);
            
            if (is_array($openCounter))
            {
                $counterData = $busOpenCounter->getOpenCounter($openCounter[0][0]);
            }
            else
            {
                //Caso o funcionário nao for operador de caixa
                $msg = _M('Erro. Você não tem permissão para executar este processo.', $module) . ' ' .
                       _M('O usuário atual do sistema não é um operador de caixa.', $module);
                $MIOLO->error($msg);
            }
        }
        else
        {
            //Se o usuário nao for funcionario
            $msg = _M('Erro. Você não tem permissão para executar este processo.', $module) . ' ' .
                   _M('O usuário atual do sistema não é um funcionário ou não é um operador de caixa.', $module);
            $MIOLO->error($msg);
        }

        $fields[] = new MHiddenField('openCounterId', $counterData->openCounterId);

        //Fine Id
        $fldFine = new MTextLabel('fineId', $fine, _M('Multa', $module));
        $fields[] = $fldFine;

        //Caixa
        $fldCounter = new MTextLabel('counter', $counterData->counterId . ' - ' . $counterData->counterDescription, _M('Caixa', $module));
        $hdfOpenCounter = new MHiddenField('openCounterId', $counterData->openCounterId);
        $fields[] = $hdfOpenCounter;
        $fields[] = $fldCounter;
        
        //Unidade do caixa
        $fldCounterUnit = new MTextLabel('counterUnit', $counterData->unitDescription, _M('Unidade', $module));
        $fields[] = $fldCounterUnit;
        
        //Operador do caixa
        $fldOperator = new MTextLabel('operator', $counterData->operatorId . ' - ' . $counterData->operatorName, _M('Operador', $module));
        $fields[] = $fldOperator;

        $busSpecies = new BusinessFinanceBusSpecies();
        $listSpecies = $busSpecies->listSpecies();
        //$session->setValue('species', $species);

        $labelTotalFine = new MText('labelTotalFine', _M('Saldo em aberto', $module));
        $labelTotalFine->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $campoTotalFine = new MTextField( 'totalFine', SAGU::formatNumber( $this->getFormValue( 'labelTotalFineValue', $dataFine->valor ) ), _M('Valor', $module ), SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'), _M('Ex.: 1.00', $module));
        $campoTotalFine->setReadOnly(true);
        $ctnFieldTotalFine   = new MHContainer('hctTotalFine', array($labelTotalFine, $campoTotalFine));
        $ctnFieldTotalFine->setShowLabel(false);
        $fields[] = $ctnFieldTotalFine;
        
        if (count($listSpecies) > 0)
        {
            $paymentValue = $this->getFormValue('paymentValue');

            foreach ($listSpecies as $species)
            {
                $txtSpecies = new MText('txtSpecies_' . $species[0], ucfirst(strtolower($species[1])) . ':');
                $txtSpecies->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

                $fldPaymentValue = new MTextField('paymentValue[' . $species[0] . ']', $paymentValue[$species[0]], '', SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'));
                $validators[] = new MFloatValidator('paymentValue[' . $species[0] . ']', $species[1], SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), 'optional');

                $hctValue = new MHContainer('hctValue_' . $species[0], array($txtSpecies, $fldPaymentValue));
                $hctValue->setShowLabel(false);
                $flds[] = $hctValue;
            }

            $fields[] = new MBaseGroup('bsgPayments', _M('Pagamentos', $module), $flds, 'vertical');
            $fields[] = new MButton('btnCloseInvoice', _M('Baixar multa', $module), 'SUBMIT');
        }
        else
        {
            $fields[] = new MText('txtSpecies', _M('Não foram encontradas espécies. Registre ao menos uma espécie para continuar.', $module), 'red');

            $varsFinancial = array('personId'=>$invoiceData->personId, 'event'=>'btnSearch_click');
            $gotoFinancial = $MIOLO->getActionURL($module, 'main', null, $varsFinancial);
            $fields[] = new MButton('btnBack', _M('Voltar', $module), $gotoFinancial);
        }

        $this->setFields($fields);
        $this->setValidators($validators);

        parent::defineFields();
    }

    public function btnCloseInvoice_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = 'finance';
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();

        try
        {
            if ( SAGU::calcNumber($data->totalFine."-".$data->payTotal) != 0)
            {
                throw new Exception(_M('O valor pago (@1) nao corresponde ao valor da multa (@2). Verifique os valores informados.', $module, SAGU::formatNumber($data->payTotal), SAGU::formatNumber($data->totalFine)));
            }
            else
            {
                $busGnuteca = new BusinessGnutecaBusGnutecaToSagu2();
                $dataFine = $busGnuteca->getFine($data->fineId);
                $busInvoice = new BusinessFinanceBusReceivableInvoice();
                $busContract = new BusinessAcademicBusContract();
                $invoiceData = new FinReceivableInvoice();

                //Obtém as operações padrões
                $busDefautOperations = new BusinessFinanceBusDefaultOperations();
                $defaultOperations = $busDefautOperations->getDefaultOperations();
                $busOperations = new BusinessFinanceBusOperation();
                $operation = $busOperations->getOperation($defaultOperations->libraryFineOperation);

                //Insere o título referente a multa
                $invoiceData->personId = $dataFine->personId;
                $invoiceData->accountSchemeId = SAGU::getParameter($module, 'GNUTECA_DEFAULT_ACCOUNT_SCHEME_ID');
                $invoiceData->costCenterId = SAGU::getParameter($module, 'GNUTECA_DEFAULT_COST_CENTER');
                $invoiceData->parcelNumber = 1;
                $invoiceData->emissionDate = SAGU::getDateNow();
                $invoiceData->maturityDate = SAGU::getDateNow();
                $invoiceData->value = $dataFine->valor;
                $invoiceData->policyId = SAGU::getParameter($module, 'GNUTECA_DEFAULT_POLICY_ID');
                $invoiceData->bankAccountId = SAGU::getParameter('basic', 'DEFAULT_BANK_ACCOUNT_ID');
                $invoiceData->comments = $operation->description;
                $invoiceData->incomeSourceId = SAGU::getParameter('FINANCE', 'GNUTECA_INCOME_SOURCE_ID');
                $invoiceData->referenceMaturityDate = SAGU::getDateNow();
                $invoiceData->emissionTypeId = SAGU::getParameter('BASIC', 'DEFAULT_EMISSION_TYPE_ID');
                
                //Debita a entrada do valor da multa no titulo
                $entry = new FinEntry();
                $entry->operationId = $operation->operationId;
                $entry->entryDate = SAGU::getDateNow();
                $entry->value = $dataFine->valor;
                $entry->costCenterId = SAGU::getParameter('basic', 'GNUTECA_DEFAULT_COST_CENTER');
                $entry->comments = _M('Gerado a partir da multa @1 do GNUTECA', $module, $data->fineId);

                $busInvoice->beginTransaction();

                $invoiceId = $busInvoice->insertReceivableInvoice($invoiceData);
                $invoiceData->invoiceId = $invoiceId;
                $entry->invoiceId = $invoiceId;
                $result = $busInvoice->insertEntry( $entry );

                $closeData->invoiceId = $invoiceData->invoiceId;
                $closeData->openCounterId = $data->openCounterId;
                $closeData->payments = $data->payments;
                $closeData->openValue = $data->totalFine;
                $closeData->paymentValue = $data->totalFine;
                $closeData->fineValue = 0;
                $closeData->interestValue  = 0;
                $closeData->discountValue  = 0;
                $closeData->convenantValue = 0;
                $closeData->fineId = $data->fineId;

                $this->generateVoucher($closeData, $busInvoice->getDatabase());

                $busInvoice->commit();

            }
        }
        catch ( Exception $e )
        {
            $msg = _M('Erro executando a operação solicitada.', $module);
            $msg .= '<br />' . $e->getMessage();
            $this->addError($msg);
        }
    }

    /**
     * Event triggered when the button close invoice is clicked
     */
    public function generateVoucher($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = 'finance';
        $action = MIOLO::getCurrentAction();

        try
        {
            $businessCompany = new BusinessBasicBusCompany();
            $businessLegalPerson = new BusinessBasicBusLegalPerson();
            $businessPerson = new BusinessBasicBusPerson();
            $businessDocument = new BusinessBasicBusDocument();
            $businessEntry = new BusinessFinanceBusEntry();
            $businessInvoice = new BusinessFinanceBusReceivableInvoice();
            $businessDefaultOperations = new BusinessFinanceBusDefaultOperations();
            $businessOpenCounter = new BusinessFinanceBusOpenCounter();
            $businessOperation = new BusinessFinanceBusOperation();
            $businessSpecies = new BusinessFinanceBusSpecies();

            //Verifica a consistência da configuração da empresa
            if (SAGU::checkParameter( 'DEFAULT_COMPANY_CONF') )
            {
                $companyData = $businessCompany->getCompany( SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF') );

                if (is_null( $companyData->companyId ))
                {
                    throw new Exception(_M('Parâmetro DEFAULT_COMPANY_CONF aponta para a empresa inexistente @1.', $module, SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF') ) );
                }
            }
            else
            {
               throw new Exception( _M('Problemas ao procurar as informações da instituição. Por favor, verifique o cadastro da instituição e o parâmetro DEFAULT_COMPANY_CONF' ) );
            }

            //Obtem os dados da empresa
            $personData = $businessLegalPerson->getLegalPerson( $companyData->personId );

            //Cria o vetor para substituição das tags
            $tags1 = array
            (
                '$COMPANYNAME'   => $personData->name,
                '$LOCATION1'     => $personData->locationType . $personData->location . ', '. $personData->number,
                '$NEIGHBORHOOD1' => $personData->neighborhood,
                '$CITY1'         => $personData->cityName . '-' . $personData->stateId,
                '$ZIPCODE1'      => $personData->zipCode,
                '$PHONE1'        => $personData->phone,
                '$CNPJ1'         => $personData->cnpj,
                '$IE1'           => $personData->stateRegistration
            );

            //Obtem dados do título
            $invoiceData = $businessInvoice->getReceivableInvoice($data->invoiceId);

            $tags2 = array
            (
                '$INVOICE'      => $invoiceData->invoiceId,
                '$MATURITYDATE' => $invoiceData->maturityDate,
                '$PARCELNUMBER' => $invoiceData->parcelNumber,
                '$DATE'         => date(SAGU::getParameter('BASIC', 'MASK_TIMESTAMP_PHP'))
            );

            //Obtem dados do operador
            $counterData = $businessOpenCounter->getOpenCounter($data->openCounterId);

            $tags3 = array
            (
                '$OPERATORID'   => $counterData->operatorId,
                '$OPERATORNAME' => $counterData->operatorName
            );

            //Obtem dados da pessoa devedora
            if ( $businessPerson->isPersonLegal($invoiceData->personId) )
            {
                $personData = $businessLegalPerson->getLegalPerson( $invoiceData->personId );
                $personData->document = $personData->cnpj;
            }
            else
            {
                $personData = $businessPerson->getPerson($invoiceData->personId);
                $personRG = $businessDocument->getDocument( $invoiceData->personId, SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_RG'));
                $personCPF = $businessDocument->getDocument( $invoiceData->personId, SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF'));
                $personData->document = strlen($personCPF->content) > 0 ? $personCPF->content : $personRG->content;
            }

            $tags4 = array
            (
                '$PERSONNAME'    => $personData->name,
                '$LOCATION2'     => $personData->locationType . ' ' . $personData->location . ', ' . $personData->number,
                '$NEIGHBORHOOD2' => $personData->neighborhood,
                '$CITY2'         => $personData->cityName . '-' . $personData->stateId,
                '$ZIPCODE2'      => $personData->zipCode,
                '$PHONE2'        => $personData->phone,
                '$CNPJRG'        => $personData->document
            );

            /*
             * Busca lançamentos e substitui a tag $DETAILOP
             */
            //Obter os lançamentos do título
            unset($filters);
            $filters->invoiceId = $invoiceData->invoiceId;
            $entryData = $businessEntry->searchEntry($filters);

            $dataDefaultOperations = $businessDefaultOperations->getDefaultOperations();

            $entryArray = array();

            //Adiciona informações dos lançamentos no vetor de dados
            if (count($entryData) > 0)
            {
                foreach ($entryData as $entryRow)
                {
                    $entryRow[3] = SAGU::truncarString(29, $entryRow[3]);
                    $entryArray[] = array($entryRow[2], $entryRow[3], $entryRow[5]);
                }
            }

            //Adiciona os pagamentos no vetor de dados
            if (count($data->payments) > 0)
            {
                foreach ($data->payments as $paymentData)
                {
                    if ($paymentData[1] > 0)
                    {
                        $paymentSpecies = $businessSpecies->getSpecies($paymentData[0]);
                        $paymentSpecies->description = SAGU::truncarString(29, $paymentSpecies->description);
                        $entryArray[] = array($dataDefaultOperations->paymentOperation, $paymentSpecies->description, number_format($paymentData[1], SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), ''));
                    }
                }
            }

            //Obtem o modelo de comprovante
            $printReceipt = SAGU::getParameter('BASIC', 'PRINT_RECEIPT');

            //Concatena os vetores com as tags
            $tags = array_merge($tags1, $tags2, $tags3, $tags4);

            //Chamada à função que interpreta o comprovante, completando-o com os dados
            $contentReceiptView = SAGU::interpretsReceipt($printReceipt, $tags, $entryArray);

            $validationString = date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')) . ' ' . $invoiceData->invoiceId . ' ' . number_format($data->totalFine, SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), '');
            $validationString .= ' ' . substr(strtoupper(md5(date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')) . $invoiceData->invoiceId . number_format($data->totalFine, SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), '') . '_s@gut1tul05')), 0, 8);

            $tags5 = array
            (
                '$AUTHCODE' => $validationString
            );

            $tags = array_merge($tags1, $tags2, $tags3, $tags4, $tags5);

            $contentReceiptAuth = SAGU::interpretsReceipt($printReceipt, $tags, $entryArray);

            //Mensagem de orientação
            $msg = _M('Verifique os dados abaixo e clique em "Confirmar" para fechar o título e gerar o boleto.', $module);

            $txtInfo = new MText('txtInfo', $msg);

            $fields[] = new MDiv('divTxtInfo', $txtInfo, null, 'align=center');
            $fields[] = new MSeparator();

            //Exibe o comprovante na tela
            $vector = explode("\n", $contentReceiptView);
            $numberLines = count($vector);

            $txtVoucher = new MMultiLineField('txtVoucherView', $contentReceiptView, '', 50, $numberLines, 50);
            $txtVoucher->setReadOnly(true);
            $fields[] = new MDiv('divVoucher', $txtVoucher, null, 'align=center');

            //Campos com as informações da baixa
            $fields[] = new MHiddenField('invoiceId', $data->invoiceId);
            $fields[] = new MHiddenField('openCounterId', $data->openCounterId);
            $fields[] = new MHiddenField('openValue', $data->openValue);
            $fields[] = new MHiddenField('payTotal', $data->payTotal);
            $fields[] = new MHiddenField('fineId', $data->fineId);
            $fields[] = new MHiddenField('txtVoucher', $contentReceiptAuth);

            //Campos dos pagamentos
            if (count($data->payments) > 0)
            {
                foreach ($data->payments as $index => $paymentData)
                {
                    $fields[] = new MHiddenField('paymentValue[' . $paymentData[0] . ']', $paymentData[1]);
                }
            }

            //Botões voltar e confirmar
            $gotoClose = $MIOLO->getActionURL($module, SAGU::getParameter('FINANCE', 'CLOSE_INVOICE_HANDLER'));
            $btnBack = new MButton('btnBack', _M('Voltar', $module), 'SUBMIT');

            $btnConfirm = new MButton('btnConfirm', _M('Confirmar', $module));

            $fldsButtons = array($btnBack, $btnConfirm);

            $divButtons = new MDiv('divButtons', $fldsButtons, null, 'align=center');

            $fields[] = $divButtons;
            $fields[] = new MDiv('divResponse');

            $this->setFields($fields);
        }
        catch (Exception $e)
        {
            $this->addError($e->getMessage);
        }
    }

    public function btnConfirm_click($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = 'finance';

        $data = $this->getTypesData();

        $data->voucher = $this->getFormValue('txtVoucher');

        $busInvoice = new BusinessFinanceBusReceivableInvoice();
        $busInvoice->beginTransaction();

        try
        {
            if ( $busInvoice->closeInvoice($data) )
            {
                $loginUser = $MIOLO->getLogin();
                $busGnuteca = new BusinessGnutecaBusGnutecaToSagu2();
                $busGnuteca->payFine($data->fineId, $loginUser->id);

                $busInvoice->commit();
                $invoiceData = $busInvoice->getInvoice($data->invoiceId);

                $msg = _M('Multa fechada com sucesso.', $module);

                //Verifica se a pessoa consta no SPC
                $businessSpc = new BusinessFinanceBusSpc();
                $filtersSpc = new stdClass();
                $filtersSpc->personId = $invoiceData->personId;

                $msg .= '<ul>' .
                            ' <li>' . _M('Clique OK para retornar ao módulo financeiro', $module) . '.</li>' .
                            ' <li>' . _M('Clique IMPRIMIR para imprimir o comprovante fiscal', $module) . '.</li>' .
                            '</ul>';

                $fields[] = new MHiddenField('voucher', $data->voucher);
                $fields[] = new MDiv('divPrintResponse');

                $prompt = new MPrompt(_M('Questão', $module), $msg);
                $prompt->setType('information');

                $varsFinancial = array('personId'=>$invoiceData->personId, 'event'=>'btnSearch_click');
                $gotoFinancial = $MIOLO->getActionURL($module, 'main', null, $varsFinancial);
                $prompt->addButton(_M('Ok', $module), $gotoFinancial);

                $gotoPrint = $this->getAjaxAction('printVoucher', 'divPrintResponse', null, array('action'=>'print'));
                $prompt->addButton(_M('Imprimir comprovante', $module), $gotoPrint);

                $voucher = base64_encode(serialize($data->voucher));

                $gotoDownload = $MIOLO->getActionURL($module, $formAction, null, array('voucher'=>$voucher, 'invoiceId'=>$invoiceData->invoiceId, 'event'=>'downloadVoucher_click'));
                $prompt->addButton(_M('Baixar comprovante', $module), 'window.open(\'' . $gotoDownload  . '\')');

                $fields[] = $prompt;
                $fields[] = new MDiv('divResponse');

                $this->setFields($fields);
            }
        }
        catch (Exception $e)
        {
            $busInvoice->rollback();
            $this->addError(_M('Sistema não conseguiu baixar o título.', $module) . ' ' . $e->getMessage());
        }
    }

    /**
     * AJAX call to print/download the close voucher
     *
     * @param (stdClass) $args: All form data in form of a stdClass object.
     */
    public function printVoucher($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = 'finance';

        $voucher = $args->voucher;
        $action = $args->action;

        SAGU::printFiscalData($voucher);

        return;
    }

    public function downloadVoucher_click($sender = null)
    {
        $voucher = MIOLO::_request('voucher');
        $voucher = unserialize(base64_decode($voucher));
        SAGU::returnAsFile('comprovante.txt', $voucher, 'application/txt');
    }

    /**
     * Função para geração e quitação do título referente à multa
     */
    public function payFine($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $session = $MIOLO->getSession();

        //Verifica a diferença entre o total pago e o valor da multas
        if ( SAGU::calcNumber($args->totalFine."-".$args->total) != 0)
        {
            $this->addError(_M('O valor pago nao corresponde ao valor da multa. Verifique os valores informados', $module));
        }
        else
        {
            $fineId = MIOLO::_REQUEST('fineId');
            $busGnuteca = new BusinessGnutecaBusGnutecaToSagu2();
            $dataFine = $busGnuteca->getFine($fineId);
            $busInvoice = new BusinessFinanceBusReceivableInvoice();
            $busContract = new BusinessAcademicBusContract();
            $invoiceData = new FinReceivableInvoice();

            try
            {
                //Obtém as operações padrões
                $busDefautOperations = new BusinessFinanceBusDefaultOperations();
                $defaultOperations = $busDefautOperations->getDefaultOperations();
                $busOperations = new BusinessFinanceBusOperation();
                $operation = $busOperations->getOperation($defaultOperations->libraryFineOperation);

                //Insere o título referente a multa
                $invoiceData->personId = $dataFine->personId;
                $invoiceData->accountSchemeId = SAGU::getParameter($module, 'GNUTECA_DEFAULT_ACCOUNT_SCHEME_ID');
                $invoiceData->costCenterId = SAGU::getParameter($module, 'GNUTECA_DEFAULT_COST_CENTER');
                $invoiceData->parcelNumber = 1;
                $invoiceData->emissionDate = SAGU::getDateNow();
                $invoiceData->maturityDate = SAGU::getDateNow();
                $invoiceData->value = $dataFine->valor;
                $invoiceData->policyId = SAGU::getParameter($module, 'GNUTECA_DEFAULT_POLICY_ID');
                $invoiceData->bankAccountId = SAGU::getParameter('basic', 'DEFAULT_BANK_ACCOUNT_ID');
                $invoiceData->comments = $operation->description;
                $invoiceData->incomeSourceId = SAGU::getParameter($module, 'INCOME_SOURCE_ID');
                $invoiceData->referenceMaturityDate = SAGU::getDateNow();

                //Debita a entrada do valor da multa no titulo
                $entry = new FinEntry();
                $entry->operationId = $operation->operationId;
                $entry->entryDate = SAGU::getDateNow();
                $entry->value = $dataFine->valor;
                $entry->costCenterId = SAGU::getParameter('basic', 'GNUTECA_DEFAULT_COST_CENTER');
                $entry->comments = $operation->description;
                
                $invoiceId = $busInvoice->insertReceivableInvoice($invoiceData);
                $invoiceData->invoiceId = $invoiceId;
                $entry->invoiceId = $invoiceId;
                $result = $busInvoice->insertEntry( $entry ); 

                $args = array('invoiceId'=>$invoiceData->invoiceId,
                              'openCounterId'=>$data->openCounterId,
                              'paymentValue'=>$data->paymentValue,
                              'openValue'=>$data->totalFine);

                $operationPayment = $busOperations->getOperation($defaultOperations->paymentOperation);


                //FIXME Alterações no vetor $std->payments devido a alterações no método closeInvoiceNew para fechamento do título
                $std = $data;
                $std->payments = array();
                $especies = $session->getValue('species');
                if ( is_array($especies) )
                {
                    foreach ( $especies as $cod=>$name )
                    {
                        $id = 'especie'.$name[0];
                        $std->payments[$cod][0] = $name[0];
                        $std->payments[$cod][1] = $operationPayment->operationId;
                        $std->payments[$cod][2] = $args->$id;
                    }
                }
                $std->openCounterId = $args->openCounterId;
                //fecha o titulo
                $busInvoice->closeInvoice($std);
                //remove a multa do gnuteca
                $loginUser = $MIOLO->getLogin();
                $busGnuteca->payFine($fineId, $loginUser->id);

                $msg = _M('Multa paga com sucesso', $module);
                $goto = $MIOLO->getActionURL($module, $action);
                $caption = _M('Informação',$module);
                SAGU::information($msg, $goto);
            }
            catch ( Exception $e )
            {
                $msg = _M('Erro executando a operação solicitada.', $module);
                $msg .= '<br />' . $e->getMessage();
                $this->addError($msg);
            }
        }
    }



    /**
    * Método para totalizar os valores dos campos ao preencher algo
    * É disparada sempre que um dos campos de especies perdem o foco
    * 
    */
    public function countValue($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $session = $MIOLO->getSession();

        $species = $session->getValue('species');
        foreach($species as $especie)
        {
            $label = 'especie'.$especie[0];
            if( strlen($args->$label)>0 )
            {
                if( strlen($total) == 0 )
                {
                    $total = 0;
                }
                $total = SAGU::calcNumber($total."+".$args->$label);
            }
        }
        
        $labelTotal = new MText('labelTotal', _M('Total', $module));
        $labelTotal->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $campoTotal = new MTextField( 'total', $total, null, SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'), _M('Ex.: 1.00', $module));
        $campoTotal->setJsHint(_M('Valor total', $module));
        $campoTotal->setReadOnly(true);
        $ctnFieldTotal = new MHContainer('hctTotal', array($labelTotal, $campoTotal));
        $div[] = $ctnFieldTotal;

        return $div;
    }

    /**
     * Get the types data information
     */
    public function getTypesData()
    {
        $data->openCounterId  = $this->getFormValue('openCounterId');
        $data->paymentValue   = $this->getFormValue('paymentValue');
        $data->totalFine      = $this->getFormValue('totalFine');
        $data->fineId         = $this->getFormValue('fineId');
        $data->invoiceId      = $this->getFormValue('invoiceId');

        $data->fineValue      = 0;
        $data->interestValue  = 0;
        $data->discountValue  = 0;
        $data->convenantValue = 0;
        $data->comments       = '';

        $data->payTotal = 0;

        if (count($data->paymentValue) > 0)
        {
            $data->payments = array();
            foreach ($data->paymentValue as $speciesId => $value)
            {
                if ($value > 0)
                {
                    $data->payTotal = SAGU::calcNumber($data->payTotal . '+' . $value);
                }

                $data->payments[$speciesId] = array($speciesId, $value);
            }
        }

        return $data;
    }
}

?>
