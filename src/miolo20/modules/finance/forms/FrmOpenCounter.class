<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Open counter form
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 29/08/2005
 *
 **/

class FrmOpenCounter extends SManagementForm
{

    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new FinOpenCounter(), array('openCounterId'), 'BusOpenCounter');
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $readOnly = false;
        
        try
        {
            //Get login
            $loginUser = $MIOLO->GetLogin();
            //Business person
            $businessPhysicalPersonEmployee = new BusinessBasicBusPhysicalPersonEmployee();
            //Object person
            $person = $businessPhysicalPersonEmployee->getPersonByMioloUserName($loginUser->id);
            
            if ( !(is_object($person)) )
            {
                //Business counter
                $msg = _M('Erro: Você não tem permissão para executar este processo!', $module);
                $msg .= '<ul><li>' . _M('O usuário logado deve ser um funcionário', $module) . '.' . '</li></ul>';
                throw new Exception($msg);
            }
        }
        catch ( Exception $e )
        {
            $MIOLO->error($e->getMessage());
        }
        
        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $pk = $this->getObjectPk();
            $openCounterId = $pk->openCounterId;
            $data = $this->busObject->getOpenCounter($openCounterId);
            
            unset($person);
            //Object person
            $person = $businessPhysicalPersonEmployee->getPersonByMioloUserName($data->responsibleUserName);
            //Set readonly in fields
            $readOnly = true;
        }
        
        //User responsable
        $responsibleId['responsibleIdLabel'] = new MText('responsiblePersonId', _M('Código do responsável', $module) . ':');
        $responsibleId['responsibleIdLabel']->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $responsibleId['responsibleId'] = new MTextLabel('responsibleId', $person->personId);
        $hctId = new MHContainer('hctId', $responsibleId);
        $responsibleName['responsibleNameLabel'] = new MText('responsibleNameLabel', _M('Nome do resposável', $module) . ':');
        $responsibleName['responsibleNameLabel']->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $responsibleName['responsibleName'] = new MTextLabel('responsibleName', $person->name);
        $hctName = new MHContainer('hctName', $responsibleName);
        $fields[] = new MBaseGroup('baseA', _M('Responsável pelo caixa',$module), array($hctId, $hctName), 'vertical');
        
        if ( $function != SForm::FUNCTION_INSERT )
        {
            $fields[] = new MSeparator();
            $fields['textopenCounterId'] = new MTextLabel('openCounterIdLabel', $openCounterId, _M('Código', $module));
            $fields['openCounterId'] = new MHiddenField('openCounterId', $openCounterId);
        }
        //Field counter
        $counterIdLabel = new MText('counterIdLabel', _M('Caixa', $module) . ':');
        $counterIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $counterIdLabel->setClass('m-caption m-caption-required');
        $fields[] = new MHiddenField('onlyAvailable', true);
        $counterId = new MLookupTextField('counterId', $this->getFormValue('counterId', $data->counterId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'description, null, unitDescription', $module, 'Counter', null, array('onlyAvailable' => 'onlyAvailable'), true);
        $counterId->setReadOnly($readOnly);
        $counterId->setJsHint(_M('Informe o código do caixa', $module));
        $counterId->addAttribute('onblur', SForm::getAjaxAction('verificaSaldoDeFechamento', 'divVerificaSaldoDeFechamento', false));
        $validators[] = new MIntegerValidator('counterId', _M('Caixa', $module), 'required');
        $description = new MTextField('description', $this->getFormValue('description', $data->counterDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $description->setReadOnly(true);
        $unitDescription = new MTextField('unitDescription', $this->getFormValue('unitDescription', $data->unitDescription), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $unitDescription->setReadOnly(true);
        $hctCounter = new MHContainer('hctCounter', array($counterIdLabel, $counterId, $description, $unitDescription));
        $hctCounter->setShowLabel(true);
        $fields[] = $hctCounter;
        
        //Field operator
        $operatorIdLabel = new MText('operatorIdLabel', _M('Operador', $module) . ':');
        $operatorIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $operatorIdLabel->setClass('m-caption m-caption-required');
        $operatorId = new MLookupTextField('operatorId', $this->getFormValue('operatorId', $data->operatorId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'operatorName', 'basic', 'PhysicalPersonEmployee', null, null, true);
        $operatorId->setReadOnly($readOnly);
        $operatorId->setJsHint(_M('Informe o código da operador', $module));
        $validators[] = new MIntegerValidator('operatorId', _M('Operador', $module), 'required');
        $operatorName = new MTextField('operatorName', $this->getFormValue('operatorName', $data->operatorName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $operatorName->setJsHint(_M('Nome do operador', $module));
        $operatorName->setReadOnly(true);
        $hctOperator = new MHContainer('hctOperator', array($operatorIdLabel, $operatorId, $operatorName));
        $hctOperator->setShowLabel(true);
        $fields[] = $hctOperator;
        
        //Field value
        $value = new MTextField('value', $this->getFormValue('value', $data->value), _M('Valor de abertura', $module), SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'), _M('Ex.: 1.00', $module));
        $value->setReadOnly($readOnly);
        $value->setJsHint(_M('Informe o valor de abertura', $module));
        $validators[] = new MFloatValidator('value', _M('Valor de abertura', $module), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), 'required');
        $fields[] = $value;
        
        //Field operation
        $business = new BusinessFinanceBusOperation();
        $messagesType = $business->listOperationTypeId(1);
        $operationLabel = new MText('operationLabel', _M('Operação', $module) . ':');
        $operationLabel->setClass('m-caption m-caption-required');
        $operationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $operation = $this->GetFormValue('operation', $data->operation) ? $this->GetFormValue('operation', $data->operation) : C;
        
        $messagesType = $business->listOperationTypeId(0);
        $operation = new MSelection('operation', $operation, '', $messagesType);
        $operation->setReadOnly(true);
        $hctOperation = new MHContainer('hctOperation', array($operationLabel, $operation));
        $fields[] = $hctOperation;
        
        //Field maxBalance
        $maxBalance = new MTextField('maxBalance', $this->getFormValue('maxBalance', $data->maxBalance), _M('Valor máximo de saldo', $module), SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'), _M('Ex.: 1.00', $module));
        $maxBalance->setJsHint(_M('Informe o valor máximo de caixa', $module));
        $validators[] = new MFloatValidator('maxBalance', _M('Valor máximo de saldo', $module), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), 'optional');
        $fields[] = $maxBalance;
        
        //Field observation
        $observationLabel = new MText('observationLabel', _M('Observação', $module) . ':');
        $observationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $flds[] = $observationLabel;
        $observation = new MMultiLineField('observation', $this->getFormValue('observation', $data->observation), '', 40, 4, 40);
        $observation->setReadOnly($readOnly);
        $flds[] = $observation;
        $hctObservation = new MHContainer('hctObservation', $flds);
        $fields[] = $hctObservation;
        
        $fields[] = new MDiv('divVerificaSaldoDeFechamento');
        
        parent::defineFields($fields, $validators, $data);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        
        if ( $function != SForm::FUNCTION_INSERT )
        {
            $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        }
    }
    
    /**
     * Verifica se existe saldo do último fechamento do caixa a ser aberto
     */
    public function verificaSaldoDeFechamento($args)
    {
        $MIOLO = MIOLO::getInstance();
        $valor = '';
        
        if ( strlen($args->counterId) > 0 )
        {
            $caixa = new stdClass();
            $caixa->counterId = $args->counterId;

            $busCloseCounter = new BusinessFinanceBusCloseCounter();
            $saldoDeFechamento = $busCloseCounter->searchCloseCounter($caixa, 'DESC');
            
            $valor = $saldoDeFechamento[0][11];
        }
        
        $MIOLO->page->addAJAXJsCode("document.getElementById('value').value = '{$valor}';");
        
        return;
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        $data = $this->getData();
        $business = new BusinessFinanceBusOpenCounter();
        
        //Valid data
        if ( $business->validFormOpenCounter($data) )
        {
            //Insert the person in spc
            $ok = ($function == SForm::FUNCTION_UPDATE) ? $business->updateOpenCounter($data) : $business->insertOpenCounter($data);
            
            //Msg of the insert or update
            $this->confirmInsertUpdate($ok);
        }
        else
        {
            $this->addJsCode("alert('" . _M('Já existe um registro com esses dados', $module) . "')");
        }
    }
}

?>
