<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for basCity table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 02/05/2005
 *
 **/

/**
 * Form to search the basCity table
 */
class FrmConvenantPersonSearch extends SSearchForm
{

    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        parent::__construct(_M('Localizar', $module), new FinConvenantPerson(), array('convenantPersonId'), 'BusConvenantPerson');
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $convenantPersonLabel = new MText('convenantPersonLabel', _M('Código', $module));
        $convenantPersonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $convenantPerson = new MTextField('convenantPersonIdS', $this->getFormValue('convenantPersionIdS', $data->convenantPersionIdS), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $convenantPerson->setJsHint(_M('Informe o código da pessoa para o convênio', $module));
        $validators[] = new MIntegerValidator('convenantPersonIdS', _M('Código', $module));
        $fields[] = new MHContainer('hctConvenantPerson', array($convenantPersonLabel, $convenantPerson) );

        // lookup para convênios
        $convenantLabelS = new MText('convenantLabelS', _M('Convênio',$module).':');
        $convenantLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $convenantIdS = new MLookupTextField('convenantIdS', $this->convenantIdS->value, null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, array('descriptionS'), 'finance', 'Convenant', null, array('convenantId' => 'convenantIdS'), true);
        $convenantIdS->setJsHint(_M('Informe o código do convênio', $module));
        $descriptionS = new MTextField('descriptionS', $this->descriptionS->value, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $descriptionS->setReadOnly(true);
        $descriptionS->setJsHint(_M('Descrição', $module));
        $hctConvenantS = new MHContainer('hctConvenantS', array($convenantLabelS, $convenantIdS, $descriptionS));
        $hctConvenantS->setShowLabel(true);
        $fields[]   = $hctConvenantS;
        $validators[] = new MIntegerValidator('convenantIdS', _M('Convênio', $module), 'optional');

        //lookup para pessoas
        $fieldsPersonLabel = new MText('personLabel', _M('Pessoa', $module) . ':');
        $fieldsPersonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $fieldsPerson = new MLookupTextField('personIdS', $this->getFormValue('personId', $data->learningPeriodId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'personNameS', 'basic', 'PhysicalPersonStudent', null, null, true);
        $fieldsPerson->setReadOnly(in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)));
        $fieldsPerson->setJsHint(_M('Informe o código da pessoa', $module));
        $fieldsPersonName = new MTextField('personNameS', $this->getFormValue('personNameS', $data->personName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $fieldsPersonName->setJsHint(_M('Nome da pessoa', $module));
        $htcFieldsPerson = new MHContainer('hctPerson', array($fieldsPersonLabel, $fieldsPerson, $fieldsPersonName));
        $htcFieldsPerson->setShowLabel(true);
        $fields[] = $htcFieldsPerson;
        $validators[] = new MIntegerValidator('personIdS', _M('Pessoa', $module), 'optional');

        // Contrato
        $options = array(
            'module' => 'academic',
            'item' => 'ContractSimple',
            'label' => _M('Contrato', $module),
        );
        $fields[] = new SLookupContainer('contractIdS', $this->getRequestValue('contractIdS', $data->contractIdS), $options);

        $beginDateLabel = new MText('beginDateLabel', _M('Data inicial', $module). ':');
        $beginDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $beginDate = new MCalendarField('beginDateS');
        $fields[] = new MHContainer('htcBeginDate', array($beginDateLabel, $beginDate));
        $validators[]   = new DateDMYValidator('beginDateS', _M('Data inicial', $module), 'optional');

        $endDateLabel = new MText('endDateLabel', _M('Data final', $module). ':');
        $endDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $endDate = new MCalendarField('endDateS');
        $fields[] = new MHContainer('htcEndDate', array($endDateLabel, $endDate));
        $validators[]   = new DateDMYValidator('endDateS', _M('Data final', $module), 'optional');

        parent::defineFields($fields, $module, 'GrdConvenantPersonSearch', $validators);
    }
    
    public function getTypesData()
    {
        $data = parent::getTypesData();
        $data->personName = $this->getRequestValue('personNameS');
        
        return $data;
    }
    
    
    
    public function acaoRenovar()
    {
        $this->SetTitle(_M('Renovação de convênios'));
        
        $fields[] = $period = new SBeginEndPeriod(array(
            'title' => _M('Informe a data de renovação'),
            'required' => true,
            'begin' => array(
                'enable' => false,
                'dateId' => 'beginDate',
                'dateValue' => SAGU::getDateNow(),
            ),
            'end' => array(
                'label' => _M('Renovar até'),
                'dateId' => 'endDate',
            )
        ));
        
        $fields[] = new MButton('btnRenovar', _M('Renovar'));
        
        $this->SetFields($fields);
        $this->SetValidators($validators);
    }
    
    
    
    
    public function btnRenovar_click($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $regs = $this->obterRegistrosSelecionados();
        $total = count($regs);

        $endDate = $this->getRequestValue('endDate');
        
        if ( strlen($endDate) == 0 )
        {
            $MIOLO->error(_M('A data de fim deve ser preenchida.', $module));
        }
        else
        {
            $busPersonConvenant = new BusinessFinanceBusConvenantPerson();
            $busIncentive = new BusinessFinanceBusIncentive();
            $ok = true;
            
            foreach($regs as $k => $reg)
            {
                $data = $busPersonConvenant->getConvenantPerson($reg);
                
                $periodo = $busIncentive->obterUltimoPeriodoCursado($data->contractId, $data->beginDate, $data->endDate);
                
                //obtém o percentual mínimo para renovar o incentivo
                $parse = $busPersonConvenant->searchPersonConvenantData($data);
                
                try
                {
                    if(strlen($periodo[0][0]) > 0 && $parse[0][5] != null)
                    {                                
                        //obtém o percentual de aprovação
                        $percentual = $busIncentive->obterPercentualDeAprovacoes($data->contractId, $periodo[0][0]); 
                        
                        if(($percentual[0][0] >= $parse[0][5]))
                        {
                            $ok = true;
                        }
                        else
                        {
                            $ok = false;
                            $msg .= (_M('Aproveitamento abaixo de '.$parse[0][5].'% -'.$parse[0][1]).'<br> Não é possível renovar contrato.');
                            
                            throw new Exception($msg);
                        }
                    }
                }
                catch(Exception $e)
                {
                    $this->addError($msg); 
                }
            }
            if($ok)
            {
                //Adiciona um dia na data do novo incentivo, para evitar conflitos de datas.
                $starDate = SAGU::getDateNow();
                $starDate = date('d/m/Y', strtotime("+1 days"));

                // Insere novamente os registros , duplicando-os para as datas informadas
                foreach ( $regs as $convenantPersonId )
                {
                    $row = $busPersonConvenant->getConvenantPerson($convenantPersonId);
                    $row->endDate = SAGU::getDateNow();

                    // Atualiza data de fim para hoje
                    $busPersonConvenant->updateConvenantPerson($row);

                    // Insere novo convenio
                    $row->beginDate = $starDate;
                    $row->endDate = $endDate;
                    $busPersonConvenant->insertConvenantPerson($row);
                }

                $args = array('function' => 'search', 'event' => 'tbBtnSearch:click', 'endDateS' => $endDate);
                $goto = $MIOLO->GetActionURL(MIOLO::getCurrentModule(), MIOLO::getCurrentAction(), null, $args);
                $msg = _M('Um total de @1 convênio(s) foram renovados com sucesso até a data @2.', $module, $total, $endDate);
                $MIOLO->information($msg, $goto);
            }
        }
    }
}
?>