<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finInvoiceMessage table
 *
 * @author Samuel Koch [samuel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [samuel@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * 
 * @since
 * Class created on 10/02/2009
 *
 **/

/**
 * Form to search the finMessage table
 */
class FrmInvoiceMessageSearch extends SSearchForm
{
    public function __construct($data)
    {
        $module =  MIOLO::getCurrentModule();
        parent::__construct(_M('Localizar', $module), new FinInvoiceMessage(), array('invoiceMessageId'), 'BusInvoiceMessage');
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        // Field invoice message id
        $fields[] = $areaId = new MTextField('invoiceMessageIdS', null, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $areaId->setJsHint( _M('Informe o código da mensagem do título', $module) );
        $validators[] = new MIntegerValidator('invoiceMessageIdS');
        
        //Field bank
        $bankLabelS = new MText('bankLabelS', _M('Banco', $module). ':');
        $bankLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $bankIdS = new MLookupTextField('bankIdS', $this->GetFormValue('bankIdS', $data->bankId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, array('bankDescriptionS'), $module, 'Bank', null, null, true);
        $bankIdS->setJsHint(_M('Informe o código do banco', $module));
        $bankDescriptionS = new MTextField('bankDescriptionS', $this->GetFormValue('bankDescriptionS', $data->description), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $bankDescriptionS->setJsHint( _M('Informe a descrição do banco', $module) );
        $bankDescriptionS->setReadOnly(true);
        $hcntBank = new MHContainer('hcntBank', array($bankLabelS, $bankIdS, $bankDescriptionS));
        $fields[] = $hcntBank;

        //Field origin of the message
        $invoiceMessageTypeLabelS = new MText('invoiceMessageTypeLabeS', _M('Tipo de mensagem', $module).':');
        $invoiceMessageTypeLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $busInvoiceMessageType = new BusinessFinanceBusInvoiceMessage();
        $invoiceMessageTypeIdS = new MSelection('invoiceMessageTypeIdS', $this->GetFormValue('invoiceMessageTypeIdS', $data->invoiceMessageTypeId), '', $busInvoiceMessageType->listInvoiceMessageType(), false);
        $invoiceMessageTypeIdS->setJsHint( _M('Selecione o tipo de mensagem', $module) );
        $hctInvoiceMessageTypeS = new MHContainer('hctInvoiceMessageTypeIdS', array($invoiceMessageTypeLabelS, $invoiceMessageTypeIdS));
        $hctInvoiceMessageTypeS->setShowLabel(true);
        $fields[] = $hctInvoiceMessageTypeS;

        //Field message order
        $messageOrderLabelS = new MText('messageOrderLabelS', _M('Ordem da mensagem', $module).':');
        $messageOrderLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $messageOrderIdS = new MTextField('messageOrderS', $this->GetFormValue('messageOrderS', $data->messageOrderS), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $validators[] = new MIntegerValidator('messageOrderS', _M('Ordem da mensagem', $module));
        $messageOrderIdS->setJsHint(_M('Informe a ordem da mensagem', $module));
        $hcntMessageOrder = new MHContainer('hcntMessageOrder', array($messageOrderLabelS, $messageOrderIdS));
        $fields[] = $hcntMessageOrder;

        //Field message text
        $messageTextLabelS = new MText('descriptionS', _M('Texto da mensagem', $module). ':');
        $messageTextLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $messageTextIdS = new MTextField('descriptionS', $this->getFormValue('descriptionS',$data->description), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $messageTextIdS->setJsHint(_M('Informe o texto da mensagem', $module));
        $hcntMessageTextS = new MHContainer('hcntDescriptionS', array($messageTextLabelS, $messageTextIdS));
        $fields[] = $hcntMessageTextS;

        parent::defineFields($fields, $module, 'GrdInvoiceMessageSearch');
        
        $this->SetValidators($validators);
    }
}
?>
