<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * GenerateMultipleEnrollFee form
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 02/02/2006
 *
 **/

/**
 * Form to generate Multiple Learning Period
 **/
class FrmGenerateMultipleEnrollFee extends SManagementForm
{
    /**
     * Class constructor
     **/
    public function __construct()
    {

        $module = MIOLO::getCurrentModule();
        
        parent::__construct( new FinEnrollFee(), array('learningPeriodId', 'operationId', 'isFreshMan'), 'BusEnrollFee', _M('Gerar diversas taxas de matrícula', $module) );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $learningPeriodId  = new MHiddenField('learningPeriodId');
        $fields[] = $learningPeriodId;
        
        // Operation id
        $operationIdLabel = new MText('operationIdLabel', _M('Código da operação', $module).':');
        $operationIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $operationIdLabel->setClass('m-caption m-caption-required');
        $operationId = new MLookupTextField('operationId', $this->getFormValue('operationId',$data->operationId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'operationDescription', $module, 'Operation', null, null, true);
        $operationId->setJsHint(_M('Informe o código da operação', $module));
        $validators[] = new MRequiredValidator('operationId', _M('Código da operação', $module));
        $operationDescription = new MTextField('operationDescription', $this->getFormValue('operationDescription', $data->operationDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $operationDescription->setReadOnly(true);
        $operationDescription->setJsHint(_M('Descrição da operação', $module));
        $fields[] = new MHContainer('hctOperation', array($operationIdLabel, $operationId, $operationDescription));

        // is fresh man
        $isFreshManLabel = new MText('isFreshManLabel', _M('É calouro', $module).':');
        $isFreshManLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $isFreshManLabel->setClass('m-caption m-caption-required');

        $isFreshManTrue  = new MCheckBox('isFreshManTrue', '1', '', $data->isFreshMan == 't' ? true : $this->getFormValue('isFreshManTrue' ) == 1, _M('Sim', $module));
        $isFreshManFalse = new MCheckBox('isFreshManFalse', '1', '', $data->isFreshMan == 'f' ? true : $this->getFormValue('isFreshManFalse' ) == 1, _M('Não', $module));

        $fields[]     = new MHContainer('hctFreshManCheck', array($isFreshManLabel, $isFreshManTrue, $isFreshManFalse));

        $hctFreshMan = new MHContainer('hctFreshMan', $flds);
        $hctFreshMan->setShowLabel(true);
        $fields[]      = $hctFreshMan;
        unset($flds);

        // Value is percent
        $valueIsPercentLabel = new MText('valueIsPercentLabel', _M('Valor é percentual', $module).':');
        $valueIsPercentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $valueIsPercentLabel->setClass('m-caption m-caption-required');
        $valueIsPercent = new MRadioButtonGroup('valueIsPercent', '', SAGU::listYesNo(1), $this->getFormValue('valueIsPercent', $data->valueIsPercent) ? $this->getFormValue('valueIsPercent', $data->valueIsPercent) : DB_TRUE, '', 'horizontal');
        $valueIsPercent->setShowLabel(false);
        $fields[]     = new MHContainer('hctValueIsPercent', array($valueIsPercentLabel, $valueIsPercent));
      
        // Value
        $valueLabel = new MText('valueLabel', _M('Valor', $module).':');
        $valueLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $valueLabel->setClass('m-caption m-caption-required');
        $value = new MTextField('value', SAGU::formatNumber($this->getFormValue('value', $data->value)), '', SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'));
        $value->setJsHint(_M('Informe o valor', $module));
        $validators[] = new MFloatValidator('value', _M('Valor', $module), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), 'required');
        $fields[] = new MHContainer('hctValue', array($valueLabel, $value));
        
        // Parcels number
        $parcelsNumberLabel = new MText('parcelsNumberLabel', _M('Número de parcelas', $module).':');
        $parcelsNumberLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $parcelsNumberLabel->setClass('m-caption m-caption-required');
        $parcelsNumber = new MTextField('parcelsNumber', $this->getFormValue('parcelsNumber',$data->parcelsNumber), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $parcelsNumber->setJsHint(_M('Informe o número de parcelas', $module));
        $validators[] = new MRegExpValidator('parcelsNumber', _M('Número de parcelas', $module),  SAGU::getParameter('BASIC', 'POSSIBLE_PARCELS_NUMBER'), 'required');
        $fields[] = new MHContainer('hctParcelsNumber', array($parcelsNumberLabel, $parcelsNumber) );

        $hctParcelsNumber = new MHContainer('hctParcelsNumber', $flds);
        $fields[]  = $hctParcelsNumber;
        unset($flds);

        $fields[] = new Separator('');
        
        $fields[]     = new MButton('btnGenerate', _M('Gerar', $module));

        $fields[] = new Separator('');
                
        parent::defineFields( $fields, $validators, $data );
        
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
    }
    
    /**
     * Event triggered when user chooses Generate from the toolbar
     **/
    public function btnGenerate_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $data     = $this->getTypesData();
        $business  = $this->busObject;
        $business2 = new BusinessFinanceBusGenerateMultipleEnrollFee();

        $courses = MIOLO::_request('courses');

        $x = 0;
        $periodId = $this->getFormValue('periodId');
        
        $business2->beginTransaction();
        
        foreach ( $courses as $value )
        {
            
            $data->learningPeriodId  = $value;
            
            if( $data->isFreshManTrue == true )
            {
                $data->isFreshMan  = DB_TRUE;
  
                $ok  = $business->insertEnrollFee($data);

                if ( $ok )
                {
                    $x++;
                }
            }

            if( $data->isFreshManFalse == true )
            {
                $data->isFreshMan  = DB_FALSE;
  
                $ok  = $business->insertEnrollFee($data);

                if ( $ok )
                {
                    $x++;
                }
            }

        }
        
        $business2->commit();
        
        $msg = _M('@1 registro(s) inserido(s)', $module, $x);

        if ( $x > 0 )
        {
            $postAction = substr($action,0,strrpos($action,':')) . ':generateMultipleEnrollFeeCourse';
            $goto = $MIOLO->getActionURL($module, $postAction, null, null);

            $caption = _M('Informação', $module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Erro executando a operação solicitada.', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    } 
    
    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = parent::getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            $data->$var = $this->$var->value;
        }

        $data->isFreshManTrue  = $this->isFreshManTrue->checked;
        $data->isFreshManFalse = $this->isFreshManFalse->checked;

        return $data;

    } 

}

?>
