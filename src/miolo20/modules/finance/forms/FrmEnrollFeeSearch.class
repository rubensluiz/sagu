<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluзхes Livres Ltda.
 *
 * Este arquivo й parte do programa Sagu.
 *
 * O Sagu й um software livre; vocк pode redistribuн-lo e/ou modificб-lo
 * dentro dos termos da Licenзa Pъblica Geral GNU como publicada pela Fundaзгo
 * do Software Livre (FSF); na versгo 2 da Licenзa.
 *
 * Este programa й distribuнdo na esperanзa que possa ser ъtil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implнcita de ADEQUAЗГO a qualquer MERCADO
 * ou APLICAЗГO EM PARTICULAR. Veja a Licenзa Pъblica Geral GNU/GPL em
 * portuguкs para maiores detalhes.
 *
 * Vocк deve ter recebido uma cуpia da Licenзa Pъblica Geral GNU, sob o tнtulo
 * "LICENCA.txt", junto com este programa, se nгo, acesse o Portal do Software
 * Pъblico Brasileiro no endereзo www.softwarepublico.gov.br ou escreva para a
 * Fundaзгo do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for finEnrollFee table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Joao Francisco Padilha Souza [joao@solis.com.br]
 *
 * @since
 * Class created on 04/01/2006
 */
/**
 * Form to search the finEnrollFee table
 */
class FrmEnrollFeeSearch extends SSearchForm
{
    public function __construct($data)
    {
        parent::__construct(_M('Localizar',$module), new FinEnrollFee(), array('learningPeriodId', 'operationId', 'isFreshMan'), 'BusEnrollFee');
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        $businessPeriod = new BusinessAcademicBusPeriod();

        // Field learnig period
        $fields[] = new SLearnigPeriodField('learningPeriodIdS', $this->getFormValue('learningPeriodIdS', $data->learningPeriodIdS), _M('Perнodo letivo', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, null, true, true);

        // Field operation
        $fields[] = new SHiddenfield('operationTypeIdOperationS', 'D');
        $operationIdLabelS = new MText('operationIdLabelS', _M('Operaзгo', $module).':');
        $operationIdLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $operationIdS = new MLookupTextField('operationIdS', $this->getFormValue('operationIdS',$data->operationIdS), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'operationDescriptionS', $module, 'Operation', null, array('operationTypeId' => 'operationTypeIdOperationS'), true);
        $operationIdS->setJsHint(_M('Informe o cуdigo da operaзгo',$module));
        $validators[] = new MIntegerValidator('operationIdS', _M('Operaзгo', $module));
        $operationDescriptionS = new MTextField('operationDescriptionS', $this->getFormValue('operationDescriptionS',$data->operationDescriptionS), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $operationDescriptionS->setReadOnly(true);
        $operationDescriptionS->setJsHint(_M('Descriзгo da operaзгo', $module));
        $fields[] = new MHContainer('hctOperationS', array($operationIdLabelS, $operationIdS, $operationDescriptionS));

        // Field operation
        $fields[] = new SHiddenfield('operationTypeIdCancelS', 'C');
        $operacaoCancelamentoLabelS = new MText('operacaoCancelamentoLabelS', _M('Operaзгo de cancelamento', $module).':');
        $operacaoCancelamentoLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $operacaoCancelamentoS = new MLookupTextField('operacaoCancelamentoS', $this->getFormValue('operacaoCancelamentoS',$data->operacaoCancelamentoS), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'operacaoCancelamentoDescricaoS', $module, 'Operation', null, array('operationTypeId' => 'operationTypeIdCancelS'), true);
        $operacaoCancelamentoS->setJsHint(_M('Informe o cуdigo da operaзгo',$module));
        $validators[] = new MIntegerValidator('operacaoCancelamentoS', _M('Operaзгo', $module));
        $operacaoCancelamentoDescricaoS = new MTextField('operacaoCancelamentoDescricaoS', $this->getFormValue('operacaoCancelamentoDescricaoS',$data->operacaoCancelamentoDescricaoS), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $operacaoCancelamentoDescricaoS->setReadOnly(true);        
        $operacaoCancelamentoDescricaoS->setJsHint(_M('Descriзгo da operaзгo', $module));
        $fields[] = new MHContainer('hctCancelOperationS', array($operacaoCancelamentoLabelS, $operacaoCancelamentoS, $operacaoCancelamentoDescricaoS));        
        
        // Field is fresh man
        $freshManLabelS = new MText('freshManLabelS', _M('Й calouro', $module).':');
        $freshManLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $freshManS = new MRadioButtonGroup('freshManS', '', SAGU::listTrueFalseIndifferent(1), $this->getFormValue('freshManS',$data->freshManS), '', 'horizontal');
        $freshManS->setShowLabel(false);
        $fields[] = new MHContainer('hctFreshManS', array($freshManLabelS, $freshManS));

        // Field value is percent
        $valueIsPercentLabelS = new MText('valueIsPercentS', _M('Valor й percentual', $module).':');
        $valueIsPercentLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $valueIsPercentS = new MRadioButtonGroup('valueIsPercentS', '', SAGU::listTrueFalseIndifferent(1), $this->getFormValue('valueIsPercentS',$data->valueIsPercentS), '', 'horizontal');
        $valueIsPercentS->setShowLabel(false);
        $hctValueIsPercentS = new MHContainer('hctValueIsPercentS', $flds);
        $fields[] = new MHContainer('hctValueIsPercentS', array($valueIsPercentLabelS, $valueIsPercentS));

        // Field value
        $valueS = new MTextField('valueS', $this->getFormValue('valueS',$data->valueS), _M('Valor', $module), SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'), _M('Ex.: 1.00', $module));
        $valueS->setJsHint(_M('Informe o valor',$module));
        $validators[] = new MFloatValidator('valueS', _M('Valor', $module), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'));
        $fields[] = $valueS;

        // Field parcels number
        $parcelsNumberLabelS = new MText('parcelsNumberLabelS', _M('Nъmero de parcelas', $module).':');
        $parcelsNumberLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $parcelsNumberS = new MTextField('parcelsNumberS', $this->getFormValue('parcelsNumberS', $data->parcelsNumberS), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $parcelsNumberS->setJsHint(_M('Informe o nъmero de parcelas', $module));
        $validators[] = new MIntegerValidator('parcelsNumberS', _M('Nъmero de parcelas', $module));
        $fields[] = new MHContainer('hctParcelsNumberS', array($parcelsNumberLabelS, $parcelsNumberS));

        parent::defineFields($fields, $module, 'GrdEnrollFeeSearch', $validators);
    }

    /**
     * Obtйm os dados do formulбrio
     *
     * @return object
     */
    public function getTypesData()
    {
        $data = parent::getTypesData();
        $data->courseId = MIOLO::_REQUEST('courseIdS');
        $data->isFreshMan = MIOLO::_REQUEST('freshManS');

        return $data;
    }
}
?>