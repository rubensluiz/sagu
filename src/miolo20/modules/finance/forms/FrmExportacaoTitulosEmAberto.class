<?php

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Description of FrmExportacaoTitulosEmAberto
 *
 * @author augusto
 */
class FrmExportacaoTitulosEmAberto extends SForm
{
    /**
     * Class constructor
     */
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();
        parent::__construct(_M('Exportar títulos em aberto para txt', $module), null, null);
        
        $this->toolbar->disableButton( MToolBar::BUTTON_NEW );
        $this->toolbar->disableButton( MToolBar::BUTTON_SAVE );
        $this->toolbar->disableButton( MToolBar::BUTTON_DELETE );
        $this->toolbar->disableButton( MToolBar::BUTTON_SEARCH );
        $this->toolbar->disableButton( MToolBar::BUTTON_PRINT );
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $flds[] = new MSeparator();
        
        $startDateLabel = new MText("startDateLabel", _M('Data inicial:'));
        $startDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $startDateLabel->setClass('m-caption m-caption-required');
        $startDate = new MCalendarField('startDate', $this->GetFormValue('startDate'));
        $flds[] = new MHContainer('startDateContainer', array($startDateLabel, $startDate));
        
        $endDateLabel = new MText("endDateLabel", _M('Data final:'));
        $endDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $endDateLabel->setClass('m-caption m-caption-required');
        $endDate = new MCalendarField('endDate', $this->GetFormValue('endDate'));
        $flds[] = new MHContainer('endDateContainer', array($endDateLabel, $endDate));
        
        $flds[] = new MButton('btnGenerate', _M("Gerar arquivo"));
        
        parent::defineFields(array( 'fields' => $flds ));
    }
    
    /**
     * Pega a aç?o do button submit_button.
     * 
     * @param type $sender
     */
    public function btnGenerate_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $startDate = $this->GetFormValue('startDate');
        $endDate   = $this->GetFormValue('endDate');
        
        if ( strlen($startDate) > 0 && strlen($endDate) > 0 )
        {
            $BusReceivableInvoice = $MIOLO->getBusiness($module, 'BusReceivableInvoice');
            $invoicesData = $BusReceivableInvoice->titulosEmAbertoParaExportacao($startDate, $endDate);

            if ( !is_null($invoicesData) )
            {
                $data = $this->dataAdjust($invoicesData);
                $this->generateTxt($data);
            }
            else
            {
                $this->Error(_M("Nenhum registro encontrado."));
            }
        }
        else
        {
            $this->Error(_M("Os campos 'Data inicial' e 'Data final' precisam ser preenchidos."));
        }
    }
    
    /**
     * Layout Fametro.
     * 
     * @param array $args
     */
    private function dataAdjust($args)
    {
        $allData = array();
        
        foreach ( $args as $data )
        {
            $invoice = array();
            
            // Os valores s?o recebidos de traz para frente, o list inverte da forma correta.
            list ( $invoice["maisParcelas"],   $invoice["descontoParcela"],   $invoice["honorariosParcela"], $invoice["taxaParcela"], 
                   $invoice["jurosParcela"],   $invoice["multaParcela"],      $invoice["valorCorrigido"],    $invoice["numeroParcela"], 
                   $invoice["dataPrestacao"],  $invoice["dataBaixaParcela"],  $invoice["status"],            $invoice["nossoNumero"], 
                   $invoice["valorParcela"],   $invoice["vencimentoParcela"], $invoice["descriParcela"],     $invoice["contrato"], 
                   $invoice["descriDivida"],   $invoice["nomeDivida"],        $invoice["cliente"],           $invoice["foneCorr5"], 
                   $invoice["foneCorr4"],      $invoice["foneCorr3"],         $invoice["foneCorr2"],         $invoice["foneCorr1"], 
                   $invoice["cepCorr"],        $invoice["estadoCorr"],        $invoice["cidadeCorr"],        $invoice["bairroCorr"], 
                   $invoice["enderecoCorr"],   $invoice["foneEmpresa5"],      $invoice["foneEmpresa4"],      $invoice["foneEmpresa3"], 
                   $invoice["foneEmpresa2"],   $invoice["foneEmpresa1"],      $invoice["cepEmpresa"],        $invoice["estadoEmpresa"], 
                   $invoice["cidadeEmpresa"],  $invoice["bairroEmpresa"],     $invoice["enderecoComercial"], $invoice["funcao"],
                   $invoice["empresa"],        $invoice["fone5"],             $invoice["fone4"],             $invoice["fone3"], 
                   $invoice["fone2"],          $invoice["fone1"],             $invoice["cep"],               $invoice["estado"], 
                   $invoice["cidade"],         $invoice["bairro"],            $invoice["endereco"],          $invoice["email"], 
                   $invoice["dataNascimento"], $invoice["rg"],                $invoice["cnpj"],              $invoice["cpf"], 
                   $invoice["nome"] ) = $data;  
            
            $exist = false;
            $cont  = 0;
            
            foreach ( $allData as $arg )
            {
                /**
                 * Caso venha mais títulos da mesma pessoa, é criada uma array que os recebe, 
                 * deve ser exibido todos na mesma linha da pessoa somente uma vez.
                 */
                if ( $arg["nome"] == $invoice["nome"] )
                {
                    $novaParcela = array(
                        "descriParcela" => $invoice["descriParcela"],
                        "vencimentoParcela" => $invoice["vencimentoParcela"],
                        "valorParcela" => $invoice["valorParcela"],
                        "nossoNumero" => $invoice["nossoNumero"],
                        "status" => $invoice["status"],
                        "dataBaixaParcela" => $invoice["dataBaixaParcela"],
                        "dataPrestacao" => $invoice["dataPrestacao"],
                        "numeroParcela" => $invoice["numeroParcela"],
                        "valorCorrigido" => $invoice["valorCorrigido"],
                        "multaParcela" => $invoice["multaParcela"],
                        "jurosParcela" => $invoice["jurosParcela"],
                        "taxaParcela" => $invoice['taxaParcela'],
                        "honorariosParcela" => $invoice["honorariosParcela"],
                        "descontoParcela" => $invoice["descontoParcela"]
                    );
                    
                    if ( is_array($arg["maisParcelas"]) )
                    {
                        $allData[$cont]["maisParcelas"][] = $novaParcela;
                    }
                    else
                    {
                        $allData[$cont]["maisParcelas"] = array($novaParcela);
                    }
                    
                    $exist = true;
                }
                
                $cont ++;
            }
            
            if ( !$exist )
            {
                $allData[] = $invoice;
            }
        }     
        
        return $allData;
    }
    
    /**
     * Gera arquivo txt conforme configuraç?es.
     * 
     * @param array $data
     */
    public function generateTxt($data)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->uses('classes/sTextGenerate.class', 'basic');
        
        $txtGenerate = new sTextGenerate();
        $txtGenerate->addCollumn("nome", 100);
        $txtGenerate->addCollumn("cpf", 100);
        $txtGenerate->addCollumn("cnpj", 100);
        $txtGenerate->addCollumn("rg", 100);
        $txtGenerate->addCollumn("dataNascimento", 8);
        $txtGenerate->addCollumn("email", 100);
        $txtGenerate->addCollumn("endereco", 100);
        $txtGenerate->addCollumn("bairro", 100);
        $txtGenerate->addCollumn("cidade", 100);
        $txtGenerate->addCollumn("estado", 100);
        $txtGenerate->addCollumn("cep", 100);
        $txtGenerate->addCollumn("fone1", 100);
        $txtGenerate->addCollumn("fone2", 100);
        $txtGenerate->addCollumn("fone3", 100);
        $txtGenerate->addCollumn("fone4", 100);
        $txtGenerate->addCollumn("fone5", 100);
        $txtGenerate->addCollumn("empresa", 100);
        $txtGenerate->addCollumn("funcao", 100);
        $txtGenerate->addCollumn("enderecoComercial", 100);
        $txtGenerate->addCollumn("bairroEmpresa", 100);
        $txtGenerate->addCollumn("cidadeEmpresa", 100);
        $txtGenerate->addCollumn("estadoEmpresa", 100);
        $txtGenerate->addCollumn("cepEmpresa", 100);
        $txtGenerate->addCollumn("foneEmpresa1", 100);
        $txtGenerate->addCollumn("foneEmpresa2", 100);
        $txtGenerate->addCollumn("foneEmpresa3", 100);
        $txtGenerate->addCollumn("foneEmpresa4", 100);
        $txtGenerate->addCollumn("foneEmpresa5", 100);
        $txtGenerate->addCollumn("enderecoCorr", 100);
        $txtGenerate->addCollumn("bairroCorr", 100); 
        $txtGenerate->addCollumn("cidadeCorr", 100); 
        $txtGenerate->addCollumn("estadoCorr", 100); 
        $txtGenerate->addCollumn("cepCorr", 100);
        $txtGenerate->addCollumn("foneCorr1", 100); 
        $txtGenerate->addCollumn("foneCorr2", 100); 
        $txtGenerate->addCollumn("foneCorr3", 100); 
        $txtGenerate->addCollumn("foneCorr4", 100); 
        $txtGenerate->addCollumn("foneCorr5", 100);
        $txtGenerate->addCollumn("cliente", 100);
        $txtGenerate->addCollumn("nomeDivida", 100);
        $txtGenerate->addCollumn("descriDivida", 100);
        $txtGenerate->addCollumn("contrato", 100);
        $txtGenerate->addCollumn("descriParcela", 100);
        $txtGenerate->addCollumn("vencimentoParcela", 8);
        $txtGenerate->addCollumn("valorParcela", 12);
        $txtGenerate->addCollumn("nossoNumero", 100);
        $txtGenerate->addCollumn("status", 2);
        $txtGenerate->addCollumn("dataBaixaParcela", 8);
        $txtGenerate->addCollumn("dataPrestacao", 8);
        $txtGenerate->addCollumn("numeroParcela", 100);
        $txtGenerate->addCollumn("valorCorrigido", 12);
        $txtGenerate->addCollumn("multaParcela", 12);
        $txtGenerate->addCollumn("jurosParcela", 12);
        $txtGenerate->addCollumn("taxaParcela", 12);
        $txtGenerate->addCollumn("honorariosParcela", 12);
        $txtGenerate->addCollumn("descontoParcela", 12);
        $txtGenerate->addCollumn("maisParcelas", 12, false);
        
        $txtGenerate->textGenerate($data);
    }
}

?>
