<?php

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Description of FrmCheques
 *
 * @author augusto
 */

class FrmChequesPopup extends SForm
{
    public function __construct($title, $object, $pkey) 
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->uses('/ui/controls/msubdetail.class');
        
        parent::__construct($title, $object, $pkey);
        
        // Carrega o javascript da MPopup
        $this->page->AddScript('m_popup_control.js');        
        $this->page->AddScript('m_lookup_ajax.js');
        $this->page->AddScript('phpSerialize.js', 'basic');
    }
    
    /**
     * Abre a popup de cheques.
     * 
     * @param type $args
     */
    public function showPopupCheques($args)
    {
        $MIOLO = MIOLO::getInstance();
        $busSpecies = new BusinessFinanceBusSpecies();
        $filters = new stdClass();
        $filters->speciesTypeId = SAGU::getParameter('FINANCE', 'CHEQUE_SPECIESTYPE_ID');
        $specie = $busSpecies->searchSpecies($filters);        
        
        $chequeSpeciesId = $specie[0][0];
        
        $MIOLO->page->addAjaxJsCode("
            var valorCheques = document.getElementById('paymentValue[{$chequeSpeciesId}]');
            var args = new Array();
            var valorTotal;
            
            function objValorTotal(value){this.valorTotal = value;}
            args.push(new objValorTotal(valorCheques.value));
            
            MIOLO_ajaxCall('{$MIOLO->getCurrentURL()}', 'POST', 'popupCheques', php_serialize(args), mpopup.response, 'TEXT');
        ");
    }
    
    /**
     * Popup de cheques.
     * 
     * @param array $args
     */
    public function popupCheques($params)
    {
        $module = MIOLO::getCurrentModule();
        $args = unserialize(stripslashes($params[0]));
        
        if ( !strlen($args[0]->valorTotal) > 0 )
        {
            MSubDetail::clearData('cheques');
        }
        
        $fields[] = new MDiv('divError');
        
        // Hidden que recebe o id do cheque.
        $chequeId = new SHiddenField('chequeId', null);
        $flds[] = $chequeId;
        
        // Número do cheque.
        $numeroChequeLabel = new MText('numeroChequeLabel', _M('Nº do cheque', $module) . ':');
        $numeroChequeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $numeroChequeLabel->setClass('m-caption m-caption-required');
        $numeroCheque = new MTextField('numeroCheque', null, null, 19);
        $flds[] = new MHContainer('numeroChequeHC', array($numeroChequeLabel, $numeroCheque));
        $valid[] = new MRequiredValidator('numeroCheque', _M('Nº do cheque', $module));
        
        // Data.
        $dataLabel = new MText('dataLabel', _M('Data de vencimento', $module) . ':');
        $dataLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $dataLabel->setClass('m-caption');
        $data = new MCalendarField('data', null, null, 19);
        $flds[] = new MHContainer('dataHC', array($dataLabel, $data));
        
        $focoEminente = "document.getElementById('eminente').focus();";
        
        // CPF.
        $cpfLabel = new MText('cpfLabel', _M('CPF', $module) . ':');
        $cpfLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $cpfLabel->setClass('m-caption m-caption-required');
        $cpf = new MTextField('cpf', null, null, 19, _M('CPF ou CNPJ é requerido.'));
        $cpf->addAttribute('onBlur', $focoEminente . $this->getAjaxAction('obterEminentePeloCpf', 'divError'));
        $flds[] = new MHContainer('cpfHC', array($cpfLabel, $cpf));
        $validDocs[] = new MCPFValidator('cpf', _M('CPF', $module));
        
        // CNPJ.
        $cnpjLabel = new MText('cnpjLabel', _M('CNPJ', $module) . ':');
        $cnpjLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $cnpjLabel->setClass('m-caption m-caption-required');
        $cnpj = new MTextField('cnpj', null, null, 19, _M('CNPJ ou CPF é requerido.'));
        $cnpj->addAttribute('onBlur', $focoEminente . $this->getAjaxAction('obterEminentePeloCnpj', 'divError'));
        $flds[] = new MHContainer('cnpjHC', array($cnpjLabel, $cnpj));
        $validDocs[] = new MCNPJValidator('cnpj', _M('CNPJ', $module));
        
        // Eminente.
        $eminenteLabel = new MText('eminenteLabel', _M('Emitente', $module) . ':');
        $eminenteLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $eminenteLabel->setClass('m-caption m-caption-required');
        $eminente = new MTextField('eminente', null, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));        
        $flds[] = new MHContainer('eminenteHC', array($eminenteLabel, $eminente));
        $valid[] = new MRequiredValidator('eminente', _M('Emitente', $module));
        
        // Banco.
        $busBank = new BusinessFinanceBusBank();
        $bankLabel = new MText('bankLabel', _M('Banco', $module) . ':');
        $bankLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $bankLabel->setClass('m-caption m-caption-required');
        $bankId = new MComboBox('bankId', null, null, $busBank->listBank(false));
        $flds[] = new MHContainer('bankHC', array($bankLabel, $bankId));
        $valid[] = new MRequiredValidator('bankId', _M('Banco', $module));
        
        // Agência.
        $agenciaLabel = new MText('agenciaLabel', _M('Agência', $module) . ':');
        $agenciaLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $agenciaLabel->setClass('m-caption m-caption-required');
        $agencia = new MTextField('agencia', null, null, 19);
        $flds[] = new MHContainer('agenciaHC', array($agenciaLabel, $agencia));
        $valid[] = new MRequiredValidator('agencia', _M('Agência', $module));
        
        // Valor.
        $valorLabel = new MText('valorLabel', _M('Valor', $module) . ':');
        $valorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $valorLabel->setClass('m-caption m-caption-required');
        $valor = new MTextField('valor', null, null, 19, '0.00');
        $flds[] = new MHContainer('valorHC', array($valorLabel, $valor));
        $valid[] = new MFloatValidator('valor', _M('Valor', $module));
        $valid[] = new MRequiredValidator('valor', _M('Valor', $module));
        
        // Status.
        $finStatusCheque = new FinStatusCheque();
        $statusLabel = new MText('statusLabel', _M('Status', $module) . ':');
        $statusLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $statusLabel->setClass('m-caption');
        $status = new MSelection('statusChequeId', SAGU::getParameter('FINANCE', 'STATUS_CHEQUE_ID_EM_ABERTO'), null, $finStatusCheque->listStatusCheque());
        $status->addAttribute('disabled', 'disabled');
        $flds[] = new MHContainer('statusHC', array($statusLabel, $status));
        $valid[] = new MRequiredValidator('statusChequeId', _M('Status', $module));
        
        // Tipo
        $finCheque = new FinCheque();
        $tipoLabel = new MText('tipoLabel', _M('Tipo', $module) . ':');
        $tipoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $tipoLabel->setClass('m-caption m-caption-required');
        $tipo = new MSelection('tipo', null, null, $finCheque->listTiposCheque());
        $flds[] = new MHContainer('tipoHC', array($tipoLabel, $tipo));
        $valid[] = new MRequiredValidator('tipo', _M('Tipo', $module));
        
        $flds[] = new MSeparator("<br>");        
        
        $cols[] = new MGridColumn(_M('Código do cheque', $module), 'left', true, '', false, 'chequeId');
        $cols[] = new MGridColumn(_M('Nº do cheque', $module), 'right', true, '', true, 'numeroCheque');
        $cols[] = new MGridColumn(_M('Data', $module), 'right', true, '', false, 'data');
        $cols[] = new MGridColumn(_M('Emitente', $module), 'left', true, '', true, 'eminente');
        $cols[] = new MGridColumn(_M('Código do banco', $module), 'left', true, '', false, 'bankId');
        $cols[] = new MGridColumn(_M('Banco', $module), 'left', true, '', true, 'bankName');
        $cols[] = new MGridColumn(_M('Agência', $module), 'left', true, '', true, 'agencia');
        $cols[] = new MGridColumn(_M('Valor', $module), 'right', true, '', true, 'valor');
        $cols[] = new MGridColumn(_M('Código do status', $module), 'left', true, '', false, 'statusChequeId');
        $cols[] = new MGridColumn(_M('Status', $module), 'left', true, '', true, 'status');
        $cols[] = new MGridColumn(_M('Tipo', $module), 'left', true, '', false, 'tipo');
        
        $fields[] = $sub = new MSubDetail('cheques', _M('Cheques', $module), $cols, $flds, array('remove')); 
        $sub->addActionEvent('add', 'onAddChequeEvent', __CLASS__);
        $sub->addActionEvent('remove', 'onRemoveChequeEvent', __CLASS__);
        
        $dataSubDetail = MSubDetail::getData('cheques');        
        $valorTotalSub = '0.00';
        
        if ( count($dataSubDetail) > 0 )
        {
            foreach ( $dataSubDetail as $value )
            {
                if ( !$value->removeData )
                {
                    $valorTotalSub = $valorTotalSub + $value->valor;
                }
            }
            
            $mCurrency = new MCurrencyFormatter('REAL');
            $valorTotal = $mCurrency->format($valorTotalSub);
            $valorTotalSub = str_replace(',', '.', $valorTotal);
        }
        
        // Valor total.
        $valorTotalLabel = new MText('valorTotalLabel', _M('Total cheques R$', $module) . ':');
        $valorTotalLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $valorTotalLabel->setClass('m-caption');
        $valorTotalLabel->addAttribute('style', 'margin-top:7px;');
        $valorTotal = new MTextField('valorTotal', $valorTotalSub);
        $valorTotal->addAttribute('style', 'margin-top:4px; font-weight:bold; color:#000;');
        $valorTotal->setReadOnly(true);
        $btn = new MButton('btnOk', _M('Ok', $module), $this->getAjaxAction('formChequesOk', 'divError'), false, $args);
        $fields[] = new MHContainer('valorTotalHC', array($valorTotalLabel, $valorTotal, $btn));
        
        $this->setFields($fields);
        $this->SetValidators($validDocs);
        
        MSubDetail::setValidatorsAjax($valid, 'cheques');
        MPopup::show('popupDescription', $fields, _M('Inserir cheques', $module));
        $this->generateAJAXValidators();
    }
    
    /**
     * Seta o nome da pessoa no campo eminente, caso encontre pelo cpf.
     * 
     * @param type $args
     */
    public static function obterEminentePeloCpf($args=null)
    {
        $MIOLO = MIOLO::getInstance();
        
        if ( strlen($args->cpf) > 0 )
        {
            $filters = new stdClass();
            $filters->documentTypeId = SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF');
            $filters->content = $args->cpf;

            $busDocument = new BusinessBasicBusDocument();
            $document = $busDocument->searchDocument($filters, true);
            
            if ( count($document) > 0 )
            {
                $eminente = (strlen($document[0]->personName) > 0) ? $document[0]->personName : null;
            }
            else
            {
                $finCheque = new FinCheque();
                $cheque = $finCheque->findManyAsArray($finCheque->msql()->addEqualCondition('cpf', $args->cpf)->setLimit(1));
                $eminente = $cheque[0]['fincheque.eminente'];
            }
            
            $MIOLO->page->addAjaxJsCode("document.getElementById('eminente').value = '{$eminente}'");
            $MIOLO->page->addAjaxJsCode("document.getElementById('cnpj').disabled = true;");
        }
        else
        {
            $MIOLO->page->addAjaxJsCode("document.getElementById('eminente').value = ''");
            $MIOLO->page->addAjaxJsCode("document.getElementById('cnpj').disabled = false;");
        }
        
        return '<br>';
    }
    
    /**
     * Seta o nome da pessoa jurídica no campo eminente, caso encontre pelo cnpj.
     * 
     * @param type $args
     */
    public static function obterEminentePeloCnpj($args=null)
    {
        $MIOLO = MIOLO::getInstance();
        
        if ( strlen($args->cnpj) > 0 )
        {
            $filters = new stdClass();
            $filters->cnpj = $args->cnpj;
            
            $busLegalPerson = new BusinessBasicBusLegalPerson();
            $legalPerson = $busLegalPerson->searchLegalPerson($filters);
            
            if ( count($legalPerson) > 0 )
            {
                $eminente = (strlen($legalPerson[0][3]) > 0) ? $legalPerson[0][3] : null;
            }
            else
            {
                $finCheque = new FinCheque();
                $cheque = $finCheque->findManyAsArray($finCheque->msql()->addEqualCondition('cnpj', $args->cnpj)->setLimit(1));
                $eminente = $cheque[0]['fincheque.eminente'];
            }
            
            $MIOLO->page->addAjaxJsCode("document.getElementById('eminente').value = '{$eminente}'");
            $MIOLO->page->addAjaxJsCode("document.getElementById('cpf').disabled = true;");
        }
        else
        {
            $MIOLO->page->addAjaxJsCode("document.getElementById('eminente').value = ''");
            $MIOLO->page->addAjaxJsCode("document.getElementById('cpf').disabled = false;");
        }
        
        return '<br>';
    }
    
    /**
     * Ao adicionar registro na subdetail, adiciona o valor do cheque ao valor total.
     * 
     * @param stdClass $args
     * @return stdClass
     */
    public function onAddChequeEvent($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $finBank = new FinBank($args->bankId);
        $args->bankName = $finBank->description;
        
        $finStatusCheque = new FinStatusCheque($args->statusChequeId);
        $args->status = $finStatusCheque->descricao;
        
        if ( !is_null($args->cpf) || !is_null($args->cnpj) )
        {
            // Somente setar o valor ao valor total caso todos os campos requeridos tenham sido preenchidos.
            if ( !is_null($args->numeroCheque) && 
                 !is_null($args->eminente) && 
                 !is_null($args->bankId) && 
                 !is_null($args->agencia) &&
                 !is_null($args->statusChequeId) &&
                 !is_null($args->tipo) )
            {
                $MIOLO->page->addAJAXJsCode("
                    try
                    {
                        var valorTotal = document.getElementById('valorTotal');
                        if ( '{$args->valor}' != '' ) 
                        {
                            var value = parseFloat(valorTotal.value) + parseFloat({$args->valor});
                            valorTotal.value = (value).toFixed(2);
                        }
                    }
                    catch ( err )
                    {}
                ");

                $valueExplode = explode('.', $args->valor);
                $args->valor = (count($valueExplode) == 1) ? $args->valor . '.00' : $args->valor;        
            }
        }
        else
        {
            $MIOLO->page->addAJAXJsCode("alert('CPF ou CNPJ é requerido.');");
            $args->removeData = true;
        }
        
        return $args;
    }
    
    /**
     * Ao excluir registro na subdetail, subtrai o valor do cheque no valor total.
     * 
     * @param type $args
     * @return type
     */
    public function onRemoveChequeEvent($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();        
        
        $MIOLO->page->addAJAXJsCode("
            var valorTotal = document.getElementById('valorTotal');
            var value = parseFloat(valorTotal.value) - parseFloat({$args->valor});
            valorTotal.value = (value).toFixed(2);
        ");
            
        return $args;
    }
    
    /**
     * Seta o valor total ao campo de cheque. 
     * 
     * @param stdClass $args
     */
    public function formChequesOk($args)
    {
        $MIOLO = MIOLO::getInstance();
        $action = $MIOLO->getCurrentAction();
        $busSpecies = new BusinessFinanceBusSpecies();
        $filters = new stdClass();
        $filters->speciesTypeId = SAGU::getParameter('FINANCE', 'CHEQUE_SPECIESTYPE_ID');
        $specie = $busSpecies->searchSpecies($filters);        
        
        $chequeSpeciesId = $specie[0][0];

        $MIOLO->page->addAJAXJsCode("
            mpopup.remove();
            var valorTotal = document.getElementById('valorTotal');
            var valorCheque = document.getElementById('paymentValue[{$chequeSpeciesId}]');    
            valorCheque.value = (valorTotal.value > 0.00) ? valorTotal.value : '';
            
            // Necessário somente para a tela de movimentações de caixa.
            if ( '{$action}' == 'main:process:counter:counterMovement' )
            {
                saguDoAjax('changeSpecieValue', 'divAjaxResponse', true, '');
            }
        ");
    }
    
    /**
     * Salva os cheques com suas respectivas movimentações de caixa.
     * 
     * @param array $chequeCounterMovementIdS
     * @return boolean
     */
    public function salvarCheques($chequeCounterMovementIdS, $data = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $dataSubDetailCheques = ( !is_null($data) ) ? $data : MSubDetail::getData('cheques');
        
        if ( !is_null($dataSubDetailCheques) )
        {
            foreach ( $dataSubDetailCheques as $value )
            {
                if ( !$value->removeData )
                {
                    // Salva os dados do cheque.
                    $finCheques = new FinCheque();
                    $finCheques->chequeId = $value->chequeId;
                    $finCheques->numeroCheque = $value->numeroCheque;
                    $finCheques->data = $value->data;
                    $finCheques->agencia = $value->agencia;
                    $finCheques->eminente = $value->eminente;
                    $finCheques->cpf = $value->cpf;
                    $finCheques->cnpj = $value->cnpj;
                    $finCheques->valorCheque = $value->valor;
                    $finCheques->tipo = $value->tipo;
                    $finCheques->bankId = $value->bankId;

                    if ( $finCheques->save() )
                    {
                        foreach ( $chequeCounterMovementIdS as $counterMovementId )
                        {
                            // Salva as movimentações de caixa relacionada ao cheque.
                            $finCounterMovementCheque = new FinCounterMovementCheque();
                            $finCounterMovementCheque->chequeId = $finCheques->chequeId;
                            $finCounterMovementCheque->counterMovementId = $counterMovementId;

                            if ( !$finCounterMovementCheque->save() )
                            {
                                throw new Exception(_M('Erro ao salvar a movimentação do cheque.', $module));
                            }
                        }
                        
                        // Salva a movimentação do cheque.
                        $finMovimentacaoCheque = new FinMovimentacaoCheque();
                        $finMovimentacaoCheque->chequeId = $finCheques->chequeId;
                        $finMovimentacaoCheque->statusChequeId = $value->statusChequeId;
                        $finMovimentacaoCheque->data = date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'));
                        
                        $ok = $finMovimentacaoCheque->save();
                    }
                    else
                    {
                        throw new Exception(_M('Erro ao salvar cheque.', $module));
                    }
                }
            }        
        }
        
        return $ok;
    }
}

?>
