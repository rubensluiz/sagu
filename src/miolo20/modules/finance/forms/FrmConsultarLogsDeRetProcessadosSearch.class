<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Remessa
 *
 * @author Moises Heberle [moises@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.com.br]
 *
 * @since
 * Class created on 11/08/2013
 * */

class FrmConsultarLogsDeRetProcessadosSearch extends SSearchForm
{
    
    protected $campoBuscaGenerica = true;

    public function __construct()
    {

        $module = MIOLO::getCurrentModule();
        parent::__construct(_M('Consultar logs de retornos processados', $module), new FinConsultarLogsDeRetProcessados());

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
//        $this->toolbar->disableButton( MToolBar::BUTTON_SEARCH );
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $fields[] = new MSeparator();
        
        //Data de Vencimento
        $maturityDateS = new MCalendarField('maturityDateS', $this->maturityDateS, _M('Data de vencimento', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $maturityDateS->setJsHint(_M('Informe a data de vencimento do registro', $module));
        $fields[] = $maturityDateS;
        
        $fields[] = new MSeparator();
        
        //Data de ocorrencia inicial
        $occurrenceDateStartSLabel = new MText('occurrenceDateStartSLabel', _M('Data de ocorrência de', $module) . ':');
        $occurrenceDateStartSLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $occurrenceDateStartS = new MCalendarField('occurrenceDateStartS', $this->occurrenceDateStartS, null, SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $occurrenceDateStartS->setJsHint(_M('Informe a data inicial da ocorrência', $module));
        
        //Data de ocorrencia final
        $occurrenceDateEndSLabel = new MText('$occurrenceDateEndSLabel', _M('até', $module) . ':');
        $occurrenceDateEndS = new MCalendarField('occurrenceDateEndS', $this->occurrenceDateEndS, null, SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $occurrenceDateEndS->setJsHint(_M('Informe a data final de ocorrência', $module));
        
        $fields[] = new MHContainer('ctnOcorrencia', array($occurrenceDateStartSLabel, $occurrenceDateStartS, $occurrenceDateEndSLabel, $occurrenceDateEndS));

        parent::defineFields($fields, $module, 'GrdConsultarLogsDeRetProcessadosSearch');
        
//        $this->setValidations($validators);
    }

}

?>
