<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Long term short term process form
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @since
 * Class created on 07/12/2005
 *
 **/

/**
 * Form to control import return files for bank
 **/
class FrmRemittanceAutomaticDebit104 extends SForm
{
    private $home;

    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct( _M('Remessa de débito automático para a Caixa Econômica Federal (104)', $module), null, null );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO   = MIOLO::getInstance();
        $module  = MIOLO::getCurrentModule();
        $action  = MIOLO::getCurrentAction();
        
        $data->bankId = '104'; 
        $fields[] = new MHiddenField('bankId', $this->getFormValue('bankId', $data->bankId));

         $busBankAccount = new BusinessFinanceBusBankAccount();

        $field = new MSelection('bankAccountId', $this->getFormValue('bankAccountId', $data->bankAccountId), _M('Código da conta bancária', $module), $busBankAccount->listBankAccount($data));
        $field->setAutoSubmit(true);
        $fields[] = $field;
        $validators[] = new MRequiredValidator('bankAccountId');

        $businessBankAccount = new BusinessFinanceBusBankAccount();
        $bankAccountId = $this->getFormValue('bankAccountId', $data->bankAccountId);
        $bankId = $businessBankAccount->getBankIdByBankAccountId($bankAccountId);

        if ( strlen($bankId)>0 )
        {
            eval('  if (SEQ_BANK_REMITTANCE_AUTOMATIC_DEBIT_'.$bankId.' > 0)
                            {
                                $dataSequence = SEQ_BANK_REMITTANCE_AUTOMATIC_DEBIT_'. $bankId. ';
                                $dataSequence++;
                            }
                            else
                            {
                                $dataSequence = 1;
                            }
                ');
    
            // FIELD - Sequence File
            $sequenceFile = $dataSequence ? $dataSequence : $this->getFormValue('sequenceFile', $data->sequenceFile);
            $sequenceFileLabel = new MText('sequenceFileLabel', _M('Arquivo de sequência', $module).':');
            $sequenceFileLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $sequenceFileLabel->setClass('m-caption m-caption-required');
            $sequenceFile      = new MTextField('sequenceFile', $sequenceFile, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $validators[] = new MIntegerValidator('sequenceFile', '', 'required');
            $fields[] = new MHContainer('hctSequenceFile', array($sequenceFileLabel, $sequenceFile));
    
            $businessCompany = new BusinessBasicBusCompany();
            $dataCompany = $businessCompany->listCompany();

    
            // Initial maturity date
            $initialMaturityDateLabel = new MText('initialMaturityDateLabel', _M('Data inicial de vencimento', $module).':');
            $initialMaturityDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $initialMaturityDateLabel->setClass('m-caption m-caption-required');
            $initialMaturityDate      = new MCalendarField('initialMaturityDate', $this->getFormValue('initialMaturityDate', $data->initialMaturityDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
            $fields[]                 = new MHContainer('hctMaturityDate', array($initialMaturityDateLabel, $initialMaturityDate));
            $validators[]  = new MDateDMYValidator('initialMaturityDate', _M('Data inicial de vencimento', $module), 'required');

            // Data de vencimento final
            $finalMaturityDateLabel = new MText('finalMaturityDateLabel', _M('Data de vencimento final', $module).':');
            $finalMaturityDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $finalMaturityDateLabel->setClass('m-caption m-caption-required');
            $finalMaturityDate      = new MCalendarField('finalMaturityDate', $this->getFormValue('finalMaturityDate', $data->finalMaturitydate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
            $fields[]               = new MHContainer('hctFinalMaturityDate', array($finalMaturityDateLabel, $finalMaturityDate));
            $validators[]  = new MDateDMYValidator('finalMaturityDate', _M('Data de vencimento final', $module), 'required');
    
            unset($field);
            $receiveDiscountLabel = new MText('receiveDiscountLabel', _M('Recebe desconto', $module).':');
            $receiveDiscountLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $receiveDiscountLabel->setClass('m-caption m-caption-required');
            $field[] = $receiveDiscountLabel;
            $receiveDiscount = new MRadioButtonGroup('receiveDiscount', '', SAGU::listYesNo(1), $this->getFormValue('receiveDiscount', $data->receiveDiscount) ? $this->getFormValue('receiveDiscount', $data->receiveDiscount) : 't', null, 'horizontal');
            $receiveDiscount->setShowLabel(false);
            $field[] = $receiveDiscount;
            $fields[] = $field;
    
            // Defaulter maturity date
            $defaulterMaturityDateLabel = new MText('defaulterMaturityDateLabel', _M('Data limite para inadimplentes', $module).':');
            $defaulterMaturityDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $defaulterMaturityDateLabel->setClass('m-caption m-caption-required');
            $defaulterMaturityDate      = new MCalendarField('defaulterMaturityDate', $this->getFormValue('defaulterMaturityDate', $data->defaulterMaturityDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
            $validators[]  = new MDateDMYValidator('defaulterMaturityDate', _M('Data limite para inadimplentes', $module), 'required');
            $fields[]                   = new MHContainer('hctDefaulterMaturityDate', array($defaulterMaturityDateLabel, $defaulterMaturityDate));
            
            $fields[] = new MSeparator( '- ' . _M('Se você quiser que este débito inicie na data de débito do dia de vencimento do título do aluno, deixe este campo em branco.', $module));
            $fields[] = new MSeparator( '- ' . _M('Se você quiser que este débito automático inicie na mesma data para todos os alunos desta remessa, informe esta data neste campo.', $module) . ' ');
            $debitDate = new MCalendarField('debitDate', $this->getFormValue('debitDate', $data->debitDate), _M('Data do débito', $module),SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
            $fields[] = $debitDate;
    
            $fields[] = new MSeparator('');
            $fields[] = new MButton('generate', _M('Gerar', $module), 'SUBMIT');
        }

        $fields[] = new MSeparator('');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }

    /**
     * Get this action when submit button on this form is clicked
     */
    public function generate_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $data = $this->getTypesData();
        
        $MIOLO->getClass($module, 'RemittanceAutomaticDebit104');
        
        $automaticDebit = new RemittanceAutomaticDebit104($data);
        $invoiceData = $automaticDebit->returnInvoiceData();

        $this->addField(new MSeparator('<hr>'));
        if (is_array($invoiceData->invoiceRemittance))
        {
            $cols = array(_M('Código da pessoa', $module), _M('Nome da pessoa', $module),_M('Código do título', $module), _M('Data de vencimento', $module), _M('Valor', $module));
            $tableRawInvoices    = new MTableRaw(_M('Títulos processados para débitos automáticos', $module), $invoiceData->invoiceRemittance, $cols);
            $tableRawInvoices->setAlternate(true);
            $tableRawInvoices->addAttribute('width=\"100%\"');
            $this->addField($tableRawInvoices);
            $this->addField(new MSeparator('<hr>'));
        }
        
        if (is_array($invoiceData->invoiceIncentives))
        {
            $cols = array(_M('Código da pessoa', $module), _M('Nome da pessoa', $module), _M('Código do título', $module), _M('Data de vencimento', $module), _M('Valor', $module), _M('Incentivo', $module));
       
            $tableRawInvoicesOut = new MTableRaw(_M('Títulos processados em incentivos', $module), $invoiceData->invoiceIncentives, $cols);
            $tableRawInvoicesOut->setAlternate(true);
            $tableRawInvoicesOut->setAttributes('width=\"100%\"');
            $this->addField($tableRawInvoicesOut);
            $this->addField(new MSeparator('<hr>'));
        }
        
        if (is_array($invoiceData->invoiceTotal))
        {
            $cols = array(_M('Data de vencimento', $module), _M('Número de débitos', $module));
            $tableRawTotal = new MTableRaw(_M('Totais por data de vencimento', $module), $invoiceData->invoiceTotal, $cols);
            $tableRawTotal->setAlternate(true);
            $tableRawTotal->setAttributes('width=\"100%\"');
            $this->addField($tableRawTotal);
            $this->addField(new MSeparator('<hr>'));
        }
        
        $fileContent = $automaticDebit->returnString();
        if (strlen($fileContent)>0)
        {
            $this->addField(new MHiddenField('hiddenData', urlencode($fileContent)));
            $this->addField(new MSeparator(''));
            $this->addField(new MButton('btnFile', _M('Obter arquivo', $module)));
        }
    }
   
   /**
    * Handle a action when button 'btnFile' is clicked
    *
    * @param: No parameters needed
    *
    * @return: No return
    */
    public function btnFile_click()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $fileContent = urldecode(stripslashes($this->getFormValue('hiddenData')));
        SAGU::returnAsFile('remessa_'.date(dmY).'.txt', $fileContent, 'text/remittance-104');
    }

    /**
     * Get the data from form and returns as a object
     */
    public function getTypesData()
    {
        $data->bankId                = $this->getFormValue('bankId');
        $data->bankAccountId         = $this->getFormValue('bankAccountId');
        $data->initialMaturityDate   = $this->getFormValue('initialMaturityDate');
        $data->finalMaturityDate     = $this->getFormValue('finalMaturityDate');
        $data->defaulterMaturityDate = $this->getFormValue('defaulterMaturityDate');
        $data->debitDate             = $this->getFormValue('debitDate');
        $data->receiveDiscount       = $this->getFormValue('receiveDiscount');
        $data->sequenceFile          = $this->getFormValue('sequenceFile');
        
        return $data;
    }
}
?>
