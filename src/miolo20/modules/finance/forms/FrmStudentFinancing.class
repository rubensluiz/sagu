<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Student financing form
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 27/09/2006
 *
 **/

class FrmStudentFinancing extends SManagementForm
{

    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new FinStudentFinancing(), array('studentFinancingId'), 'BusStudentFinancing');
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $pk = $this->getObjectPk();
            $studentFinancingId = $pk->studentFinancingId;
            $fields[] = new MTextLabel('studentFinancingId', $studentFinancingId, _M('Código', $module));
            $fields[] = new MHiddenField('studentFinancingId', $studentFinancingId);
            
            $data = $this->busObject->getStudentFinancing($studentFinancingId);
            
            //Field person
            $contractPersonLabel = new MText('contractPersonLabel', _M('Pessoa', $module) . ':');
            $contractPersonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $contractPersonId = new MTextField('contractPersonId', $this->getFormValue('contractPersonId', $data->personId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $contractPersonId->setReadOnly(true);
            $contractPersonId->setJsHint(_M('Código da pessoa', $module));
            $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName', $data->personName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $contractPersonName->setReadOnly(true);
            $contractPersonName->setJsHint(_M('Nome da pessoa', $module));
            $hctContractPerson = new MHContainer('hctContractPerson', array($contractPersonLabel, $contractPersonId, $contractPersonName));
            $hctContractPerson->setShowLabel(true);
            $fields[] = $hctContractPerson;
            $contractIdLabel = new MText('contractIdLabel', _M('Contrato', $module) . ':');
            $contractIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $flds[] = $contractIdLabel;
            
            //Field contract
            $contractId = new MTextField('contractId', $this->getFormValue('contractId', $data->contractId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $contractId->setReadOnly(true);
            $contractId->setJsHint(_M('Código do contrato', $module));
            $flds[] = $contractId;
            
            $hctContract = new MHContainer('hctContract', $flds);
            $hctContract->setShowLabel(true);
            $fields[] = $hctContract;
            unset($flds);
        }
        else
        {
            //Field person
            $contractPersonLabel = new MText('contractPersonLabel', _M('Pessoa', $module) . ':');
            $contractPersonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $contractPersonLabel->setClass('m-caption m-caption-required');
            $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId', $data->contractPersonId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, array('contractId', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'contractUnitId'), 'academic', 'PersonContract', null, array('personId' => 'contractPersonId'), true);
            $validators[] = new MIntegerValidator('contractPersonId', _M('Código da pessoa', $module), 'required');
            $contractPersonId->setJsHint(_M('Informe o código da pessoa', $module));
            $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName', $data->contractPersonName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $contractPersonName->setJsHint(_M('Nome da pessoa', $module));
            $contractPersonName->setReadOnly(true);
            $hctContractPerson = new MHContainer('hctContractPerson', array($contractPersonLabel, $contractPersonId, $contractPersonName));
            $hctContractPerson->setShowLabel(true);
            $fields[] = $hctContractPerson;
            
            //Field contract
            $contractIdLabel = new MText('contractIdLabel', _M('Contrato', $module) . ':');
            $contractIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $contractIdLabel->setClass('m-caption m-caption-required');
            $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId', $data->contractId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, array('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', $limbo, 'contractUnitId'), 'academic', 'Contract', null, array('personId' => 'contractPersonId'), true);
            $contractId->setJsHint(_M('Informe o código do contrato', $module));
            $validators[] = new MIntegerValidator('contractId', _M('Contrato', $module), 'required');
            $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId', $data->contractCourseId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $contractCourseId->setReadOnly(true);
            $contractCourseId->setJsHint(_M('Código do curso', $module));
            $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion', $data->contractCourseVersion), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $contractCourseVersion->setReadOnly(true);
            $contractCourseVersion->setJsHint(_M('Versão do curso', $module));
            $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName', $data->contractCourseName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $contractCourseName->setReadOnly(true);
            $contractCourseName->setJsHint(_M('Nome do curso', $module));
            $hctContract = new MHContainer('hctContract', array($contractIdLabel, $contractId, $contractCourseId, $contractCourseVersion, $contractCourseName));
            $hctContract->setShowLabel(true);
            $fields[] = $hctContract;
        }
        
        // initial value
        $initialValue = new MTextField('initialValue', SAGU::formatNumber($this->getFormValue('initialValue', $data->initialValue)), _M('Valor inicial', $module), SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'), _M('Ex.: 1.00', $module));
        $validators[] = new MFloatValidator('initialValue', _M('Valor inicial', $module), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), 'required');
        $initialValue->setJsHint(_M('Informe o valor inicial', $module));
        $fields[] = $initialValue;
        
        // current value
        $currentValue = new MTextField('currentValue', SAGU::formatNumber($this->getFormValue('currentValue', $data->currentValue)), _M('Valor atual', $module), SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'), _M('Ex.: 1.00', $module));
        $validators[] = new MFloatValidator('currentValue', _M('Valor atual', $module), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), 'required');
        $currentValue->setJsHint(_M('Informe o valor atual', $module));
        $fields[] = $currentValue;
        
        // comments        
        $comments = new MMultiLineField('comments', $this->getFormValue('comments', $data->comments), _M('Comentários', $module), 38, 3, 38);
        $comments->setJsHint(_M('Comentários', $module));
        $fields[] = $comments;
        
        parent::defineFields($fields, $validators, $data);
    }
}
?>
