<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Form to register bank account
 *
 * @author Rudi Uhrig Neto [rudi@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * Bruno E. Fuhr [bruno@solis.com.br]
 *
 * @since
 * Class created on 14/12/2005
 *
 **/

/**
 * Form to manipulate a bank account
 **/
class FrmBankAccount extends SManagementForm
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new FinBankAccount(), array('bankAccountId'), 'BusBankAccount');
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        if ( in_array($function,array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $pk = $this->getObjectPk();
            $bankAccountId = $pk->bankAccountId;
            $fields[] = new MTextLabel('bankAccountCod', $bankAccountId, _M('Código', $module));
            $fields[] = new MHiddenField('bankAccountId', $bankAccountId);

            $data = $this->busObject->getBankAccount($bankAccountId);

            if ( strlen($data->invoiceTypeId) > 0 )
            {
                $divInvoiceGeneration = $this->enableInvoiceGeneration($data);
            }
        }
        else
        {
            $divInvoiceGeneration = '';
        }

        $data->wallet = strlen($data->wallet) > 0 ? $data->wallet : 0;
        $data->accepted = strlen($data->accepted) > 0 ? $data->accepted : 'N';
        $data->agreement = strlen($data->agreement) > 0 ? $data->agreement : 0;
        $data->ourNumber = strlen($data->ourNumber) > 0 ? $data->ourNumber : 0;
        $data->invoiceSpecie = strlen($data->invoiceSpecie) > 0 ? $data->invoiceSpecie : 'ME';
        $data->transferorCode = strlen($data->transferorCode) > 0 ? $data->transferorCode : 0;
        $data->transferorCodeDv = strlen($data->transferorCodeDv) > 0 ? $data->transferorCodeDv : 0;
        $data->invoiceTypeId = strlen($data->invoiceTypeId) > 0 ? $data->invoiceTypeId : '';
        $data->shop = strlen($data->shop) > 0 ? $data->shop : '';
        $data->url = strlen($data->url) > 0 ? $data->url : '';
        $data->signature = strlen($data->signature) > 0 ? $data->signature : '';
        $data->cip = strlen($data->cip) > 0 ? $data->cip : '';

        // Payment place descritpion
        $description  = new MTextField('description', $this->getFormValue('description',$data->description), _M('Descrição',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $description->setJsHint(_M('Informe a descrição do local de pagamento',$module));
        $fields[] = $description;
        $validators[] = new MRequiredValidator('description', _M('Descrição',$module));

        // Bank
        $bankLabel = new MText('bankLabel', _M('Banco',$module).':');
        $bankLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $bankLabel->setClass('m-caption m-caption-required');
        $bankId = new MLookupTextField('bankId', $this->getFormValue('bankId', $data->bankId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'bankName', 'finance', 'Bank', null, null, true);
        $bankId->setJsHint(_M('Informe o código do banco',$module));
        $validators[] = new MRangeValidator('bankId', _M('Banco',$module), '0', '999', 'i', 'required');
        $bankName = new MTextField('bankName', $this->getFormValue('bankName', $data->bankName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $bankName->setJsHint(_M('Nome do banco',$module));
        $bankName->setReadOnly(true);
        $hctBank = new MHContainer('hctBank', array( $bankLabel, $bankId, $bankName ) );
        $hctBank->setShowLabel(true);
        $fields[] = $hctBank;

        // Branch
        $branchNumberLabel = new MText('branchNumberLabel', _M('Agência', $module) . ':');
        $branchNumberLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $branchNumberLabel->setClass('m-caption m-caption-required');
        $branchNumber = new MIntegerField('branchNumber', $this->getFormValue('branchNumber',$data->branchNumber), '', 5);
        $validators[] = new MRangeValidator('branchNumber', _M('Agência', $module), '0', '9999', 'i', 'required');
        $branchNumber->setJsHint(_M('Informe o número da agência',$module));
        $branchNumberTrace = new MText('branchNumberTrace', '-');
        $branchNumberDigit = new MIntegerField('branchNumberDigit', $this->getFormValue('branchNumberDigit',$data->branchNumberDigit), '', 3, _M('O número da agência deve possuir no máximo 4 dígitos. O dígito verificador deve possuir no máximo 2 dígitos. Ex.: 9999-99'));
        $branchNumberDigit->setJsHint(_M('Informe o dígito da agência',$module));
        $validators[] = new MRangeValidator('branchNumberDigit', _M('Código verificador da agência', $module), 0, '99', 'i');
        $validators[] = $req = new MRequiredValidator('branchNumberDigit', _M('Código verificador da agência'));
        $req->max = 2;
        $fields[] = new MHContainer('hctBranch', array($branchNumberLabel, $branchNumber, $branchNumberTrace, $branchNumberDigit));

        // Account
        $accountNumberLabel = new MText('accountNumberLabel', _M('Número da conta', $module) . ':');
        $accountNumberLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $accountNumberLabel->setClass('m-caption m-caption-required');
        $accountNumber = new MIntegerField('accountNumber', $this->getFormValue('accountNumber',$data->accountNumber), '', 10);
        $validators[] = new MRangeValidator('accountNumber', _M('Número da conta', $module), '0', '99999999', 'i', 'required');
        $accountNumber->setJsHint(_M('Informe o número da conta',$module));
        $accountNumberTrace = new MText('accountNumberTrace', '-');
        $accountNumberDigit = new MIntegerField('accountNumberDigit', $this->getFormValue('accountNumberDigit',$data->accountNumberDigit), '', 3, _M('O número da conta deve possuir no máximo 8 dígitos. O dígito verificador deve possuir no máximo 2 dígitos. Ex.: 99999999-99'));
        $accountNumberDigit->setJsHint(_M('Informe o digito verificador da conta',$module));
        $validators[] = $range = new MRangeValidator('accountNumberDigit', _M('Dígitos da conta corrente', $module), 0, '99', 'i');
        $range->max = 2;
        $fields[] = new MHContainer('hctAccount', array($accountNumberLabel, $accountNumber, $accountNumberTrace, $accountNumberDigit));

        // Option the Account invoice info
        $opts[] = new MOption('optYes', 'S', _M('Sim',$module), TRUE);
        $opts[] = new MOption('optNo' , 'N', _M('Não',$module), FALSE);

        //Invoice type
        $busInvoiceType = new BusinessFinanceBusInvoiceType();
        $invoiceTypeIdLabel = new MText('unitsLabel', _M('Tipo de boleto', $module) . ':');
        $invoiceTypeIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $invoiceTypeId = new MSelection('invoiceTypeId', $this->getFormValue('invoiceTypeId', $data->invoiceTypeId), '', $busInvoiceType->listInvoiceType());
        $invoiceTypeId->setJsHint(_M('Escolha o tipo de boleto', $module));
        $invoiceTypeId->addAttribute('onchange', $this->getAjaxAction('enableInvoiceGeneration', 'divInvoiceGeneration', null, (array)$data));
        $validators[] = new MIntegerValidator('invoiceTypeId', _M('Tipo de boleto', $module));
        $fields[] = new MHContainer('invoiceTypeIdCnt', array($invoiceTypeIdLabel, $invoiceTypeId));

        $fields[] = new SLookupContainer('accountSchemeId', $this->getFormValue('accountSchemeId', $data->accountSchemeId), array(
            'module' => 'accountancy',
            'item' => 'AccountScheme',
            'label' => _M('Plano de contas', $module),
        ));

        //Nosso numero
        $geracaoLabel = new MText('unitsLabel', _M('Nosso número', $module) . ':');
        $geracaoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $checked = isset($_REQUEST['geracaoDoNossoNumeroPeloBanco']) || $data->geracaoDoNossoNumeroPeloBanco == DB_TRUE;
        $geracao = new MCheckBox('geracaoDoNossoNumeroPeloBanco', DB_TRUE, null, $checked, _M(' Habilita a geração do nosso número pelo banco'));
        $fields[] = new MHContainer('invoiceTypeIdCnt', array($geracaoLabel, $geracao));
        
        $fields[] = new MSeparator();
        
        $fields[] = new MDiv('divInvoiceGeneration', $divInvoiceGeneration);
        
        // 1ª intrução de cobrança
        $invoiceMessage1Label = new MText('invoiceMessage1Label', _M('1ª instrução de cobrança',$module).':');
        $invoiceMessage1Label->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $invoiceMessage1Id = new MLookupTextField('invoiceMessage1', $this->getFormValue('invoiceMessage1', $data->invoiceMessage1), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'invoiceMessage1Description', 'finance', 'InvoiceMessage', null, array('bankId'=>'bankId'), true);
        $invoiceMessage1Id->setJsHint(_M('Informe o código da primeira instrução de cobrança',$module));
        $invoiceMessage1Description = new MTextField('invoiceMessage1Description', $this->getFormValue('invoiceMessage1Description', $data->invoiceMessage1Description), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $invoiceMessage1Description->setJsHint(_M('Mensagem da primeira instrução de cobrança',$module));
        $invoiceMessage1Description->setReadOnly(true);
        $hctinvoiceMessage1 = new MHContainer('hctinvoiceMessage1', array( $invoiceMessage1Label, $invoiceMessage1Id, $invoiceMessage1Description ) );
        $hctinvoiceMessage1->setShowLabel(true);
        $fields[] = $hctinvoiceMessage1;
        
        // 2ª intrução de cobrança
        $invoiceMessage2Label = new MText('invoiceMessage2Label', _M('2ª instrução de cobrança',$module).':');
        $invoiceMessage2Label->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $invoiceMessage2Id = new MLookupTextField('invoiceMessage2', $this->getFormValue('invoiceMessage2', $data->invoiceMessage2), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'invoiceMessage2Description', 'finance', 'InvoiceMessage', null, array('bankId'=>'bankId'), true);
        $invoiceMessage2Id->setJsHint(_M('Informe o código da segunda instrução de cobrança',$module));
        $invoiceMessage2Description = new MTextField('invoiceMessage2Description', $this->getFormValue('invoiceMessage2Description', $data->invoiceMessage2Description), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $invoiceMessage2Description->setJsHint(_M('Mensagem da primeira instrução de cobrança',$module));
        $invoiceMessage2Description->setReadOnly(true);
        $hctinvoiceMessage2 = new MHContainer('hctinvoiceMessage2', array( $invoiceMessage2Label, $invoiceMessage2Id, $invoiceMessage2Description ) );
        $hctinvoiceMessage2->setShowLabel(true);
        $fields[] = $hctinvoiceMessage2;
        
        $fields[] = new MTextLabel('lblBankTax', _M('Taxa bancária'));
        $fields[] = $responsibletaxbank = new MRadioButtonGroup('responsibletaxbank', _M('Pagamento da taxa', $module), array('S' => _M('Sacado', $module), 'C' => _M('Cedente', $module)), SAGU::NVL($this->getFormValue('responsibletaxbank'), 'C'), '', 'horizontal');
        $responsibletaxbank->setAutoPostBack(true);
        
        if( $this->getFormValue('responsibletaxbank', $data->responsibletaxbank) == 'S' )
        {
            $fields[] = new MFloatField('taxbankvalue', null, _M('Valor da taxa', $module));
            $fields[] = new SLookupContainer('taxbankdebtoperation', null, array('label' => _M('Operação de emissão da taxa no boleto', $module), 'module' => $module, 'item' => 'operation', 'required' => true));
            $fields[] = new SLookupContainer('taxbankcreditoperation', null, array('label' => _M('Operação da taxa no retorno bancário', $module), 'module' => $module, 'item' => 'operation', 'required' => true));
            $validators[] = new MRequiredValidator('taxbankvalue', _M('Valor da taxa', $module));
            $validators[] = new MRequiredValidator('taxbankdebtoperation', _M('Operação de emissão da taxa no boleto', $module));
            $validators[] = new MRequiredValidator('taxbankcreditoperation', _M('Operação da taxa no retorno bancário', $module));
        }
        
        parent::defineFields($fields, $validators, $data);
    }

    /**
     * Nao remova este metodo! Foi definido para nao fazer as automagicas do SForm e mexer nos campos.
     * 
     * @param MFormControl $field
     */
    public function setFieldDefaults($field = null)
    {
    }
    
    /**
     * Function that contains additional information for an account that would invoice generate.
     *
     * @param $args is array of the arguments
     *
     **/
    public function enableInvoiceGeneration($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data = $args;
        if ( !(strlen($data->invoiceTypeId) > 0) ) //If not is checked, show anything
        {
            return new MDiv('');
        }

        if ($data->invoiceTypeId != FinInvoiceType::TYPE_GRU)
        {
            // transferor code
            $transferorCodeLabel = new MText('transferorCodeLabel', _M('Código do cedente', $module) . ':');
            $transferorCodeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $transferorCode = new MTextField('transferorCode', $this->getFormValue('transferorCode', $data->transferorCode), '', 10);
            $transferorCode->setJsHint(_M('Informe o código do cedente', $module));
            $transferorCodeTrace = new MText('transferorCodeTrace', '-');
            $transferorCodeDigit = new MTextField('transferorCodeDv', $this->getFormValue('transferorCodeDv', $data->transferorCodeDv), '', 3);
            $transferorCodeDigit->setJsHint(_M('Informe o digito verificador do código do cedente', $module));
            $fields[] = new MHContainer('hcttransferorCode', array($transferorCodeLabel, $transferorCode, $transferorCodeTrace, $transferorCodeDigit));

            //Our number
            $ourNumberLabel = new MText('ourNumberLabel', _M('Nosso número', $module).':');
            $ourNumberLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $ourNumber = new MTextField('ourNumber', $this->getFormValue('ourNumber', $data->ourNumber), '', 20);
            $ourNumber->setJsHint(_M('Informe o nosso número', $module));
            $fields[] = new MHContainer('hctOurNumber', array($ourNumberLabel, $ourNumber));

            //Agreement
            $agreementLabel = new MText('agreementLabel', _M('Convênio', $module).':');
            $agreementLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $agreement = new MTextField('agreement', $this->getFormValue('agreement', $data->agreement), '', 20);
            $agreement->setJsHint(_M('Informe o acordo', $module));
            $fields[] = new MHContainer('hctOurNumber', array($agreementLabel, $agreement));

            //Checks if the user has permission to change the sequence of remittance.
            if ( ! $MIOLO->checkAccess('FrmBankAccount', A_ADMIN, false, true) )
            {
                $ourNumber->setReadOnly(true);
            }

            //Wallet
            $walletLabel = new MText('walletLabel', _M('Carteira', $module).':');
            $walletLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $wallet = new MTextField('wallet', $this->getFormValue('wallet', $data->wallet), '', 5);
            $wallet->setJsHint(_M('Informe a carteira', $module));
            $fields[] = new MHContainer('hctWallet', array($walletLabel, $wallet));
            
            //WalletModel - modalidade da carteira
            $walletModelLabel = new MText('walletLabel', _M('Modalidade da carteira', $module).':');
            $walletModelLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $walletModel = new MTextField('walletModel', $this->getFormValue('walletModel', $data->walletModel), '', 5);
            $walletModel->setJsHint(_M('Informe a modalidade da carteira', $module));
            $fields[] = new MHContainer('hctWalletModel', array($walletModelLabel, $walletModel));

            //Invoice specie
            $business = new BusinessFinanceBusBankAccount();
            $listInvoiceSpecieLabel = new MText('listInvoicespecieLabel', _M('Espécie do título', $module).':');
            $listInvoiceSpecieLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $listInvoiceSpecie = new MSelection('invoiceSpecie', $this->getFormValue('invoiceSpecie', $data->invoiceSpecie), '', $business->listInvoiceSpecie());
            $listInvoiceSpecie->setJsHint(_M('Selecione a espécie do título', $module));
            $fields[] = new MHContainer('hctListInvoicespecie', array($listInvoiceSpecieLabel, $listInvoiceSpecie));

            //Option the accepted
            $opts[] = new MOption('optYes', 'S', _M('Sim',$module), true);
            $opts[] = new MOption('optNo' , 'N', _M('Não',$module), false);

            $acceptedLabel = new MText('acceptedLabel', _M('Aceito', $module).':');
            $acceptedLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $acceptedOpt = $data->accepted  == 'N' ? true : false;
            $accepted = new MRadioButtonGroup('accepted', '', $opts, $acceptedOpt, null, 'horizontal');
            $accepted->SetShowLabel(false);
            $hctAccepted = new MHContainer('hctAccepted', array($acceptedLabel, $accepted));
            $fields[] = $hctAccepted;
        }

        // Field Shop
        if ($data->invoiceTypeId == FinInvoiceType::TYPE_GRU) //Quando for do tipo GRU, nao deve exibir este campo
        {
            // Codigo de recolhimento (GRU)
            $gatheringCodeLabel = new MText('gatheringCodeLabel', _M('Código de recolhimento', $module) . ':');
            $gatheringCodeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $gatheringCode = new MTextField('gatheringCode', $this->getFormValue('gatheringCode', $data->gatheringCode), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $gatheringCode->setJsHint(_M('Digite o Código de recolhimento do Guia, caso exista.', $module));
            $fields[] = new MHContainer('gatheringCodeCnt', array($gatheringCodeLabel, $gatheringCode));

            // Numero de referencia (GRU)
            $referenceNumberLabel = new MText('referenceNumberLabel', _M('Número de referência', $module) . ':');
            $referenceNumberLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $referenceNumber = new MTextField('referenceNumber', $this->getFormValue('referenceNumber', $data->referenceNumber), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $referenceNumber->setJsHint(_M('Digite o Número de referência do Guia, caso exista.', $module));
            $fields[] = new MHContainer('referenceNumberCnt', array($referenceNumberLabel, $referenceNumber));

            // Código UG e Gestão (GRU)
            $ugManagementCodeLabel = new MText('ugManagementCodeLabel', _M('Código UG/Gestão', $module) . ':');
            $ugManagementCodeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $ugManagementCode = new MTextField('ugManagementCode', $this->getFormValue('ugManagementCode', $data->ugManagementCode), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $ugManagementCode->setJsHint(_M('Digite o código UG/Gestão do Guia, caso exista.', $module));
            $fields[] = new MHContainer('ugManagementCodeCnt', array($ugManagementCodeLabel, $ugManagementCode));
        }
        else if ($data->invoiceTypeId == FinInvoiceType::TYPE_BILLET_ONLINE)
        {
            $shopLabel = new MText('shopLabel', _M('Loja', $module).':');
            $shopLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $shop = new MTextField('shop', $this->getFormValue('shop', $data->shop) ? $this->getFormValue('shop', $data->shop) : '', '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $shop->setJsHint(_M('Informe o código da loja', $module));
            $fields[] = new MHContainer('hctShop', array($shopLabel, $shop));
        }

        if ($data->invoiceTypeId == FinInvoiceType::TYPE_BILLET_ONLINE)
        {
            // Field Url
            $msg = _M('O campo URL deve ser preenchido com a URL do M.U.P., onde "MERCHANTID" deve ser igual ao código da loja e, "ORDERID" deve ter o valor "ORDER_ID", que será substituído pelo código de identificação da ordem.', $module );
            $fields[] = new MText( 'txtInfo', $msg );
            $urlLabel = new MText('urlLabel', _M('Url', $module).':');
            $urlLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $url = new MTextField('url', $this->getFormValue('url', $data->url) ? $this->getFormValue('url', $data->url) : '', '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $url->setJsHint(_M('Informe a URL', $module));
            $fields[] = new MHContainer('hctUrl', array($urlLabel, $url));

            // Field Signature
            $signatureLabel = new MText('signatureLabel', _M('Assinatura', $module).':');
            $signatureLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $signature = new MTextField('signature', $this->getFormValue('signature', $data->signature) ? $this->getFormValue('signature', $data->signature) : '', '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $signature->setJsHint(_M('Informe a assinatura digtal. São 256 caracteres hexadecimais', $module));
            $fields[] = new MHContainer('hctSignature', array($signatureLabel, $signature));

            // Field Cip - utilizado somente para integrações com MUP (http://mupteste.comercioeletronico.com.br/Download/29a/Guia_integracao_Boleto_Bancario.pdf)
            $cipLabel = new MText('cipLabel', _M('Cip', $module).':');
            $cipLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $cip = new MTextField('cip', $this->getFormValue('cip', $data->cip) ? $this->getFormValue('cip', $data->cip) : '', '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $cip->setJsHint(_M('Informe o cip', $module));
            $fields[] = new MHContainer('hctCip', array($cipLabel, $cip));
        }

        // Alignment and positioning of extra elements
        $vctInvoiceGeneration[] = new MVContainer('vctInvoiceGeneration', $fields);
        $field = new MBaseGroup('bgrInvoiceGeneration', _M('Informações para gerar boletos', $module), $vctInvoiceGeneration);
        
        return $field;
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data = $this->getTypesData();

        $busInvoiceMessage = new BusinessFinanceBusInvoiceMessage();
        
        //Validar informações das instruções de cobrança
        if( strlen( $data->invoiceMessage1) > 0 )
        {                    
            $std1 = new stdClass();
            $std1->invoiceMessageId = $data->invoiceMessage1;
            $std1->bankId = $data->bankId;            
            $search1 = $busInvoiceMessage->searchInvoiceMessage($std1);
            
            if( count($search1) == 0 )
            {
                $this->addError(_M('A primeira instrução de cobrança não corresponde ao banco selecionado', $module));
            }
        }
        if( strlen( $data->invoiceMessage2) > 0 )
        {
            $std2 = new stdClass();
            $std2->invoiceMessageId = $data->invoiceMessage2;
            $std2->bankId = $data->bankId;
            $search2 = $busInvoiceMessage->searchInvoiceMessage($std2);
            
            if( count($search2) == 0 )
            {
                $this->addError(_M('A segunda instrução de cobrança não corresponde ao banco selecionado', $module));
            }
        }
        
        //Aplica as alterações se nenhum erro foi encontrado
        if ( count($this->errors) == 0 )
        {
            $business = new BusinessFinanceBusBankAccount();
        
            $business->beginTransaction();

            if ( $function == SForm::FUNCTION_UPDATE )
            {
                $ok = $business->updateBankAccount($data);
            }
            else
            {
                $ok = $business->insertBankAccount($data);
            }

            if ( $ok )
            {
                $business->commit();
            }            
            parent::confirmInsertUpdate($ok);
        }
    }
}
?>
