<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finCounter table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coo.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * 
 * @since
 * Class created on 03/01/2006
 *
 **/

/**
 * Form to search the finCounter table
 */
class FrmCounterSearch extends SSearchForm
{

    /**
     * Class constructor
     */
    public function __construct()
    {
        parent::__construct(_M('Localizar', 'basic'), new FinCounter(), array('counterId'), 'BusCounter');
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        //Field counter
        $counterLabelS = new MText('counterLabelS', _M('Código', $module) . ':');
        $counterLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $counterIdS = new MTextField('counterIdS', $this->getFormValue('counterIdS', $data->counterIdS), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $validators[] = new MIntegerValidator('counterIdS', _M('Número do caixa', $module));
        $counterIdS->setJsHint(_M('Informe o código do caixa', $module));
        $hctCounterS = new MHContainer('hctCounterS', array($counterLabelS, $counterIdS));
        $hctCounterS->setShowLabel(true);
        $fields[] = $hctCounterS;
        
        //Field description
        $descriptrionLabelS = new MText('descriptionLabelS', _M('Descrição', $module) . ':');
        $descriptrionLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $descriptionS = new MTextField('descriptionS', $this->getFormValue('descriptionS', $data->descriptionS), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $hctDescriptionS = new MHContainer('hctdescriptionS', array($descriptrionLabelS, $descriptionS));
        $hctDescriptionS->setShowLabel(true);
        $fields[] = $hctDescriptionS;
        
        $unitsLabelS = new MText('unitsLabelS', _M('Unidade', $module) . ':');
        $unitsLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds[] = $unitsLabelS;
        
        $business = new BusinessBasicBusUnit();
        $unitIdS = new MComboBox('unitIdS', $this->unitIdS->value, '', $business->listUnit(), false, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $validators[] = new MIntegerValidator('unitIdS', _M('Unidade', $module));
        $unitIdS->setJsHint(_M('Escolha a unidade', $module));
        $flds[] = $unitIdS;
        
        $hctUnitS = new MHContainer('hctUnitS', $flds);
        $hctUnitS->setShowLabel(true);
        $fields[] = $hctUnitS;
        unset($flds);
        
        $isActiveLabelS = new MText('unitsLabelS', _M('Está ativo', $module) . ':');
        $isActiveLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds[] = $isActiveLabelS;
        
        $isActiveS = new MRadioButtonGroup('isActiveS', '', SAGU::listYesNo(1), $this->isActiveS->value, '', 'horizontal');
        $isActiveS->setShowLabel(false);
        $flds[] = $isActiveS;
        
        $hctIsActiveS = new MHContainer('hctIsActiveS', $flds);
        $fields[] = $hctIsActiveS;
        unset($flds);
        
        parent::defineFields($fields, $module, 'GrdCounterSearch');
    
    }

}

?>
