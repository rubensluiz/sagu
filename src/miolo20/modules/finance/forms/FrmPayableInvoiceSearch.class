<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finPayableInvoice table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * 
 * @since
 * Class created on 13/12/2005
 *
 **/

/**
 * Form to search the finInvoice table
 */
class FrmPayableInvoiceSearch extends SSearchForm
{

    /**
     * Class constructor
     */
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();
        parent::__construct(_M('Localizar', $module), new FinPayableInvoice(), array('invoiceId'), 'BusPayableInvoice');
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        // Invoice id
        $invoiceIdS   = new MTextField('invoiceIdS', $this->invoiceIdS->value, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $validators[] = new MIntegerValidator('invoiceIdS');
        $invoiceIdS->setJsHint(_M('Informe o código do título', $module));
        $fields[]     = $invoiceIdS;

        //Field person
        $personLabelS = new MText('personLabelS', _M('Pessoa',$module).':');
        $personLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personIdS    = new MLookupTextField('personIdS', $this->personIdS->value, null,SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'personNameS', 'basic', 'Person', null, null, true);
        $validators[] = new MIntegerValidator('personIdS', _M('Pessoa',$module));
        $personIdS->setJsHint(_M('Informe o código da pessoa', $module));
        $personNameS  = new MTextField('personNameS', $this->personNameS->value, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personNameS->setReadOnly(true);
        $personNameS->setJsHint(_M('Nome da pessoa', $module));
        $hctPersonS   = new MHContainer('hctPersonS', array($personLabelS, $personIdS, $personNameS));
        $hctPersonS->setShowLabel(true);
        $fields[]     = $hctPersonS;

        //Filed cost center
        $costCenterLabelS = new MText('costCenterLabelS', _M('Centro de custo',$module).':');
        $costCenterLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $costCenterIdS = new MLookupTextField('costCenterIdS', $this->costCenterIdS->value, null,SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'costCenterDescriptionS', 'accountancy', 'CostCenter', null, null, true);
        $costCenterIdS->setJsHint(_M('Informe o código do centro de custos', $module));
        $validators[] = new MRegExpValidator('costCenterIdS', _M('Centro de custo', $module), '^[0-9]+(\.[0-9]+)*$');
        $costCenterDescriptionS = new MTextField('costCenterDescriptionS', $this->costCenterDescriptionS->value, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $costCenterDescriptionS->setReadOnly(true);
        $costCenterDescriptionS->setJsHint(_M('Descrição do centro de custo', $module));
        $hctCostCenterS = new MHContainer('hctCostCenterS', array($costCenterLabelS, $costCenterIdS, $costCenterDescriptionS));
        $hctCostCenterS->setShowLabel(true);
        $fields[] = $hctCostCenterS;

        // Parcel number
        $parcelNumberS = new MTextField('parcelNumberS', $this->parcelNumberS->value, _M('Número da parcela',$module),SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $parcelNumberS->setJsHint(_M('Informe o número de parcelas', $module));
        $fields[]      = $parcelNumberS;
        $validators[] = new MIntegerValidator('parcelNumberS', _M('Número da parcela',$module));

        // Emission date
        $emissionDateS = new MCalendarField('emissionDateS', $this->emissionDateS->value, _M('Data de emissão',$module),SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $emissionDateS->setJsHint(_M('Informe a data de emissão',$module));
        $fields[]      = $emissionDateS;
        $validators[]  = new MDATEDMYValidator('emissionDateS', '', 'optional');

        // Maturity date
        $maturityDateS = new MCalendarField('maturityDateS', $this->maturityDateS->value, _M('Data de vencimento',$module),SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $maturityDateS->setJsHint(_M('Informe a data de vencimento',$module));
        $fields[]      = $maturityDateS;
        $validators[]  = new MDATEDMYValidator('maturityDateS', '', 'optional');
        
        $receiveDateS = new MCalendarField('receiveDateS', $this->receiveDateS->value, _M('Data de recebimento',$module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $receiveDateS->setJsHint(_M('Informe a data de recebimento',$module));
        $fields[] = $receiveDateS;
        $validators[] = new MDATEDMYValidator('receiveDateS', '', 'optional');
        
        //Field description
        $descriptionLabel = new MText('descriptionLabel', _M('Descrição', $module).':');
        $descriptionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $description = new MMultiLineField('descriptionS', $this->descriptionS->value, '', 40, 4, 80);
        $description->setJsHint(_M('Comentários',$module));
        $hctDescription = new MHContainer('hctDescription', array($descriptionLabel, $description));
        $fields[] = $hctDescription;

        $businessPayableInvoiceStatus = new BusinessFinanceBusPayableInvoiceStatus();
        $statusId = new MSelection('statusIdS', $this->statusIdS->value, _M('Estado', $module), $businessPayableInvoiceStatus->listPayableInvoiceStatus());
        $statusId->setJsHint( _M('Selecione o status', $module) );
        $fields[] = $statusId;

        parent::defineFields($fields, $module, 'GrdPayableInvoiceSearch', $validators);
    }

}

?>
