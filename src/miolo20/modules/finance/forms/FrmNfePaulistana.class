<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda. e
 * Univates - Centro Universitário.
 * 
 * Este arquivo é parte do programa Gnuteca.
 * 
 * O Gnuteca é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * @author Nataniel I. da Silva [nataniel@solis.coop.br]
 *
 * @version $Id$
 *
 * @since
 * Class created on 27/08/2014
 *
 **/

MIOLO::uses('/classes/NFeSP/FinEnviaNFSeSP.class', 'finance');

class FrmNfePaulistana extends SManagementForm
{
    
    public $valorTotalDosTitulos;
    public $valorTotalDeDeducoes;
    
    public function __construct()
    {
        parent::__construct(null, null, null, _M('Emitir NF-e Paulistanas'));
        
        $this->toolbar->disableButton('tbBtnSave');
    }
    
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        $lancamentoLabel = new MText('lancamentoLabel', _M('Código lançamento',$module).':');
        $lancamentoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $lancamento = new MLookupTextField('lancamento', $this->getFormValue('lancamento',$data->lancamento), null,SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'limbo, limbo, limbo, valorSuperior, pagamentosDe', 'finance', 'lancamento', null, null, true);
        $lancamento->setJsHint(_M('Informe o código do lançamento', $module));
        $lancamento->addAttribute('onblur', SForm::getAjaxAction('verificaLancamento', 'divLancamento', false));
        $hctLancamento = new MHContainer('hctLancamento', array($lancamentoLabel, $lancamento));
        $hctLancamento->setShowLabel(true);
        $fields[] = $hctLancamento;
        
        // Data de inicial
        $pagamentoDeLabel = new MText('pagamentoDeLabel', _M('Pagamentos efetuados entre',$module).':');
        $pagamentoDeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $pagamentoDeLabel->setClass('m-caption m-caption-required');
        $pagamentoDe = new MCalendarField('pagamentosDe', $this->getFormValue('pagamentosDe',$data->pagamentosDe), _M('Pagamentos efetuados entre',$module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE')); 
        $pagamentoDe->setJsHint(_M('Informe a data inicial para considerar os pagamentos', $module));
        $pagamentoDe->autoSetRequired = false;
        $pagamentoDe->setIsRequired(true);
        $hctPagamentoDe = new MHContainer('hctPagamentosDe', array($pagamentoDeLabel, $pagamentoDe));
        $hctPagamentoDe->setShowLabel(true);
        $fields[] = $hctPagamentoDe;
                
        // Data final
        $pagamentoAteLabel = new MText('pagamentoAteLabel', _M('à',$module).':');
        $pagamentoAteLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $pagamentoAteLabel->setClass('m-caption m-caption-required');
        $pagamentoAte = new MCalendarField('pagamentosAte', $this->getFormValue('pagamentosAte',$data->pagamentosAte), _M('à',$module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE')); 
        $pagamentoAte->setJsHint(_M('Informe a data final para considerar os pagamentos', $module));
        $pagamentoAte->autoSetRequired = false;
        $pagamentoAte->setIsRequired(true);
        $hctPagamentoAte = new MHContainer('hctPagamentosAte', array($pagamentoAteLabel, $pagamentoAte));
        $hctPagamentoAte->setShowLabel(true);
        $fields[] = $hctPagamentoAte;
        
        // Valor a considerar
        $valorSuperiorLabel = new MText('pagamentoAteLabel', _M('Considerar lançamento com valor superior à',$module).':');
        $valorSuperiorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $valorSuperiorLabel->setClass('m-caption m-caption-required');
        $valorSuperior = new MTextField('valorSuperior', $this->getFormValue('valorSuperior', $data->valorSuperior), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        //$valorSuperior->
        $hctValorSuperior = new MHContainer('hctValorSuperior', array($valorSuperiorLabel, $valorSuperior));
        $hctValorSuperior->setShowLabel(true);
        $fields[] = $hctValorSuperior;
        
        $validators[] = new MRequiredValidator('valorSuperior', _M('Considerar lançamento com valor superior à',$module));
                
        $button = new MButton('localizar', _M('Localizar', $module));
        $fields[] = $div = new MDiv('divLocalizar', array($button));
        $div->addBoxStyle('margin-left', '46%');
        
        $fields[] = new MSeparator();
        
        if ( strlen($this->getFormValue('pagamentosDe')) > 0 && strlen($this->getFormValue('pagamentosAte')) > 0 && strlen($this->getFormValue('valorSuperior')) > 0 )
        {
            $fields[] = new MDiv('divPagamentos', $this->localizarPagamentos($args));    
        }
        
        $fields[] = new MSeparator();
        
        $fields[] = new MDiv('divLancamento');
        
        parent::defineFields($fields, $validators, $data);
        
        $MIOLO->page->addJsCode(" document.getElementById('chkAll').checked = true; document.getElementById('chkAll').onclick(); ");
        
        $pagamentoDe->label = '';
        $pagamentoAte->label = '';
    }
    
    public function verificaLancamento($args)
    {
        $MIOLO = MIOLO::getInstance();
        
        if ( strlen($args->lancamento) > 0 )
        {
            $data = date('d/m/Y');
            $jsCode = " document.getElementById('pagamentosAte').value = '$data'; ";
            
            $MIOLO->page->addAJAXJsCode($jsCode);
        }
    }
    
    /**
     * Obtém a grid populada
     * 
     * @param type $args
     * @return \MDiv
     */
    public function localizarPagamentos($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
                
        $busUnit = new BusinessBasicBusUnit();
        $busFile = new BusinessBasicBusFile();
        
        // Obtém dados do form
        $data = $this->getData();
        
        $titulos = $this->obterLancamentos($data);
        
        $grid = $MIOLO->getUI()->getGrid($module, 'GrdNfePaulistana');
        $grid->setData($titulos);
                                
        $fields[] = $grid;
        
        $testeEmissao = new MButton('testeEmissao', _M('Testar emissão', $module), $this->getAjaxAction('testeEmissao', 'divEmissao'));
        $emitirLote = new MButton('emitirLote', _M('Emitir lote', $module), $this->getAjaxAction('emitirLote', 'divEmissao'));
        $fields[] = $div = new MDiv('divLocalizar', array($testeEmissao, $emitirLote));
        $div->addBoxStyle('margin-left', '40%');
        
        $fields[] = new MDiv('divEmissao');
        
        if ( !count($titulos) > 0 )
        {
            $this->AddAlert(_M('Não foram encontrados títulos disponíveis para geração de NF-e com os filtros informados.'));
        }
        
        return $fields;
    }
    
    /**
     * Monta popup para adição de informações necessárias para o processo
     * 
     * @param type $args
     */
    public function popupInformacaoRPS($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        $busUnit = new BusinessBasicBusUnit();
        
        $fields = array();
        
        $filters = new stdClass();
        $filters->personIdNotNull = DB_TRUE;
        $unidades = $busUnit->searchUnit($filters);
        
        // Unidade
        $unitLabel = new MText('unitLabel', _M('Unidade', $module) . ':');
        $unitLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $unitLabel->setClass("m-caption m-caption-required");
        $unit = new MSelection('unitId', $this->getFormValue('unitId'), '', $unidades, null, _M('Apenas unidades que possuem pessoa jurídica vinculada.', $module));
        $hctUnit = new MHContainer('hctCourse', array($unitLabel, $unit));
        $fields[] = $hctUnit;
        $validators[] = new MRequiredValidator('unitId', _M('Unidade', $module));
        
        // Campo senha
        $senha = new MPasswordField('senhaCertificado', $this->getFormValue('senhaCertificado'),_M('Senha do certificado digital', $module), null, _M('Senha do certificado digital cadastrado para a pessoa jurídica vinculada a unidade.') );
        $fields[] = $senha;
                
        $discriminacaoValue = SAGU::getParameter($module, 'DISCRIMINACAO_SERVICOS_NFE');
        
        $discriminacao = new MMultiLineField('discriminacao', $this->getFormValue('discriminacao', $discriminacaoValue),"<span class='m-caption-required'>" . _M('Discriminação dos serviços', $module) . "</span>", 100, 3, 60, _M('Limite 1000 de caracters.'));
        $validators[] = new MRequiredValidator('discriminacao', _M('Discriminação dos serviços', $module));
        $fields[] = $discriminacao;
        
        $emitir = new MButton('emitir', _M('Emitir', $module), $this->getAjaxAction($args->actionEmissao, 'divProcessoDeEmissao'));
        $cancelar = new MButton('cancelar', _M('Cancelar', $module), $this->getAjaxAction('cancelarProcesso', 'divResponse', false));
        
        $hctButtons = new MHContainer('hctButtons', array($emitir, $cancelar));
        $divButtons = new MDiv('divButtons', $hctButtons);
        $divButtons->addBoxStyle('margin-left', '42%');
        $fields[] = $divButtons;
        
        $fields[] = new MDiv('divProcessoDeEmissao');
        $fields[] = new MDiv('divResponse');
        
        $this->setValidators($validators);
        
        MPopup::show('popupVizualisarResumo', $fields, $args->titulo);
    }
    
    /**
     * Ação do botão cancelar da popup
     * 
     * @param type $args
     */
    public function cancelarProcesso($args)
    {
        MPopup::remove();
        return new MDiv();
    }
    
    /**
     * Redireciona para a popup e ação de teste de emissão
     * 
     * @param type $args
     */
    public function testeEmissao($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
                        
        $args->titulo = _M('Teste de Emissão do Lote de RPS', $module);
        $args->actionEmissao = 'executaProcessoDeTesteDeEmissao'; 
                        
        $this->popupInformacaoRPS($args);
    }
    
    /**
     * Redireciona para a popup e ação de emissão em lote
     * 
     * @param type $args
     */
    public function emitirLote($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        $args->titulo = _M('Emissão do Lote de RPS', $module);
        $args->actionEmissao = 'executaProcessoDeEmissaoEmLote';
        
        $this->popupInformacaoRPS($args);
    }
    
    public function executaProcessoDeTesteDeEmissao($args)
    {
        $data = new stdClass();
        
        // Obtém informações da pessoa jurídica
        if ( ($data = $this->obtemInformacoesDoRemetente($args)) != false )
        {
            $data->valorMinimoDosPagamentos = $args->valorSuperior;
            $data->unitId = $args->unitId;
                    
            //Obtém a período de emissão dos tiulos
            $data->dataInicio = SAGU::dateToDb($args->pagamentosDe);
            $data->dataFim = SAGU::dateToDb($args->pagamentosAte);

            // Obtém informações dos títulos selecionados na grid / total dos títulos R$
            $data->informacoesTitulo = $this->obtemInformacoesDosTitulos($args->selectGrdNfePaulistana, $data->aliquota);
            $data->valorTotalServicos = str_replace(',', '.', $this->valorTotalDosTitulos);
            $data->valorTotalDeducoes = str_replace(',', '.', $this->valorTotalDeDeducoes);

            // Quantidade de RPS
            $data->qtdRPS = count($args->selectGrdNfePaulistana);

            // Obtém a senha do certificado do form
            $data->senhaCertificado = $args->senhaCertificado;

            // Executa o processo
            $this->enviaNfe($data, FinEnviaNFSeSP::TESTE_ENVIO_EM_LOTE);
        }
    }

    public function executaProcessoDeEmissaoEmLote($args)
    {
        $data = new stdClass();
        
        // Obtém informações da pessoa jurídica
        if ( ($data = $this->obtemInformacoesDoRemetente($args)) != false )
        {
            $data->valorMinimoDosPagamentos = $args->valorSuperior;
            $data->unitId = $args->unitId;
        
            //Obtém a período de emissão dos tiulos
            $data->dataInicio = SAGU::dateToDb($args->pagamentosDe);
            $data->dataFim = SAGU::dateToDb($args->pagamentosAte);

            // Obtém informações dos títulos selecionados na grid / total dos títulos R$
            $data->informacoesTitulo = $this->obtemInformacoesDosTitulos($args->selectGrdNfePaulistana, $data->aliquota);
            $data->valorTotalServicos = str_replace(',', '.', $this->valorTotalDosTitulos);
            $data->valorTotalDeducoes = str_replace(',', '.', $this->valorTotalDeDeducoes);

            // Quantidade de RPS
            $data->qtdRPS = count($args->selectGrdNfePaulistana);

            // Obtém a senha do certificado do form
            $data->senhaCertificado = $args->senhaCertificado;

            // Executa o processo
            $this->enviaNfe($data, FinEnviaNFSeSP::ENVIO_EM_LOTE);
        }
    }
    
    public function obtemInformacoesDoRemetente($args)
    {
        $MIOLO = MIOLO::getInstance();
        $busUnit = new BusinessBasicBusUnit();
        $busFile = new BusinessBasicBusFile();
        $busLegalPerson = new BusinessBasicBusLegalPerson();
        
        // Verifica se a unidade foi informada
        if ( !strlen($args->unitId) > 0 )
        {
            $this->addError(_M('A unidade deve ser informada.'));
            return false;
        }
        
        $unidade = $busUnit->getUnit($args->unitId);
        
        // Verifica se existe uma pessoa jurídica vinculada com a unidade
        if ( strlen($unidade->personId) > 0 )
        {
            $filters = new stdClass();
            $filters->uploadFileName = $unidade->personId;

            $file = $busFile->searchFile($filters);
            
            // Verifica se a pessoa jurídica vinculada a unidade possuí certificado digital cadastrado
            if ( strlen($file[0][0]) > 0 )
            {
                $data = new stdClass();
                $data->fileName = $file[0][1];
                $data->filePath = $file[0][3];
                $data->completePath = $data->filePath . $data->fileName;

                $pessoaJuridica = $busLegalPerson->getLegalPerson($unidade->personId);
                
                if ( !strlen($pessoaJuridica->aliquota) > 0 )
                {
                    $this->addError(_M('Para executar o processo de emissão de nf-e Paulistana é necessário que a pessoa jurídica vinculada a unidade, tenha o campo alíquota cadastrado.', $module));
                    return false;
                }
                
                if ( !strlen($pessoaJuridica->codigoServicoPrestado) > 0 )
                {
                    $this->addError(_M('Para executar o processo de emissão de nf-e Paulistana é necessário que a pessoa jurídica vinculada a unidade, tenha o campo código do serviço prestado cadastrado.', $module));
                    return false;
                }
                
                if ( strlen($pessoaJuridica->cnpj) > 0 && strlen($pessoaJuridica->cityRegistration) > 0 )
                {
                    $data->cnpj = str_replace('/', '', str_replace('-', '', str_replace('.', '', $pessoaJuridica->cnpj))); // retira pontuação e traços
                    $data->registroMunicipal = $pessoaJuridica->cityRegistration;
                    $data->aliquota = str_replace(',', '.', ($pessoaJuridica->aliquota/100));
                    $data->codigoServicoPrestado = $pessoaJuridica->codigoServicoPrestado;
                    
                }
                else
                {
                    $this->addError(_M('Para executar o processo de emissão de nf-e Paulistana é necessário que a pessoa jurídica vinculada a unidade, tenha o cnpj e o número da inscrição municipal cadastrado.', $module));
                    return false;
                }
            }
            else
            {
                $this->addError(_M('A pessoa jurídica vinculada a unidade não tem um certificado digital cadastrado, para executar o processo de emissão de nf-e Paulistana é necessário que a pessoa jurídica tenha o certificado cadastrado.', $module));
                return false;
            }
        }
        else
        {
            $this->addError(_M('A unidade selecionada não tem uma pessoa jurídica vinculada, para executar o processo de emissão de nf-e Paulistana é necessário existir este vínculo.', $module));
            return false;
        }
        
        if ( !strlen($args->discriminacao) > 0 )
        {
            $this->addError(_M('O campo discriminação deve ser informado.', $module));
            return false;
        }
        else
        {
            $data->discriminacao = substr($args->discriminacao, 0, 999);
        }
        
        return $data;
    }
    
    /**
     * Obtém os lançamentos para montar a grid
     * 
     * @param type $data
     * @return type
     */
    public function obterLancamentos($data)
    {
        $MIOLO = MIOLO::getInstance();
        $busEntry = new BusinessFinanceBusEntry();
        
        $filters = new stdClass();
        $filters->dataInicial = $data->pagamentosDe;
        $filters->dataFinal = $data->pagamentosAte;
        $filters->value = $data->valorSuperior;
        $filters->entryId = $data->lancamento;
                
        $titulos = $busEntry->obtemTitulosParaNfePaulistana($filters);
                
        return $titulos;
    }
    
    /**
     * 
     * @return type
     */
    public function getData()
    {
        $data = parent::getData();
        
        $data->pagamentosDe = $this->getFormValue('pagamentosDe');
        $data->pagamentosAte = $this->getFormValue('pagamentosAte');
        $data->valorSuperior = $this->getFormValue('valorSuperior');
        $data->lancamento = $this->getFormValue('lancamento');
        
        return $data;
    }
    
    /**
     * Executa o processo de envio de nfes
     * 
     * @param type $data
     * @param type $operation
     * @return type
     */
    public function enviaNfe($data, $operation)
    {
        $MIOLO = MIOLO::getInstance();
                         
        try
        {
            $dataNF = new stdClass();
            
            $dataNF->discriminacao = $data->discriminacao; // Não recede encode pois este campo é só populado na base do sagu
            $dataNF->valorMinimoDosPagamentos = $data->valorMinimoDosPagamentos;
            $dataNF->unitId = $data->unitId;
            
            $dataNF->pkcs12 = $data->completePath;
            $dataNF->certDir = $data->filePath;
            $dataNF->passphrase = $data->senhaCertificado;
            
            $dataNF->cnpjPrestador = $data->cnpj;
            $dataNF->ccmPrestador = "$data->registroMunicipal";
            
            $dataNF->operacao = $operation;
            
            $rpsArray = array();
                        
            // Objeto $data->informacoesTitulo que obtém as informações para monstar os rps
            foreach ( $data->informacoesTitulo as $infoRps )
            {
                $rps = new NFeRPS();

                $rps->CCM = $data->registroMunicipal; //00000000';  // inscrição municipal da Empresa
                $rps->serie = 'A'; // serie do RPS gerado valor padrão
                $rps->numero = $infoRps->titulo;  //'1';      // numero do RPS gerado

                $rps->dataEmissao = $infoRps->emissao; //date("Y-m-d");
                $rps->valorServicos = $infoRps->value;
                $rps->valorDeducoes = $infoRps->deducao == 0 ? 0 : $infoRps->deducao; //0
                $rps->codigoServico = "$data->codigoServicoPrestado";   //'07498';   // codigo do serviço executado
                $rps->aliquotaServicos = $data->aliquota;  // 0.05;
                $rps->tributacao = 'T';
                $rps->discriminacao = utf8_encode($data->discriminacao); //'Teste de geracao de NFS-e via sistema proprio';

                $rps->contractorRPS = new ContractorRPS(); //new ContractorRPS();

                $pessoaJuridica = strlen($infoRps->cnpj) > 0 ? true : false;
                
                $rps->contractorRPS->cnpjTomador =  $pessoaJuridica ? str_replace(array('.', '-', '/'), '', $infoRps->cnpj) : $infoRps->cpf; //'cpf_do_destinatario';
                $rps->contractorRPS->ccmTomador = $pessoaJuridica && ($infoRps->ibge == FinEnviaNFSeSP::COD_IBGE_CIDADE_SP) ? $infoRps->cityRegistration : '';
                $rps->contractorRPS->type = $pessoaJuridica ? 'C' : 'F';  // C=Pessoa Juridica, F=Pessoa Fisica
                                
                $rps->contractorRPS->name = utf8_encode($infoRps->nome); // 'nome_pessoa'
                $rps->contractorRPS->tipoEndereco = "R";  // Rua
                $rps->contractorRPS->endereco = utf8_encode(substr($infoRps->endereco, 0, 10)); //'endereco'
                $rps->contractorRPS->enderecoNumero = utf8_encode(substr($infoRps->numero, 0, 10)); //'numero'
                $rps->contractorRPS->complemento = utf8_encode(substr($infoRps->complemento, 0, 30)); //'complemento'
                $rps->contractorRPS->bairro = utf8_encode($infoRps->bairro); //'bairo'
                $rps->contractorRPS->cidade = $infoRps->ibge; //'3550308';
                $rps->contractorRPS->estado = $infoRps->estado; //'SP';
                $rps->contractorRPS->cep = $infoRps->cep; //'95880000';
                $rps->contractorRPS->email = utf8_encode($infoRps->email); //'email_do_destinatario@email.teste.com';

                $rpsArray[] = $rps;
            }
                        
            $dataNF->inicio = $data->dataInicio; //date("Y-m-d");
            $dataNF->fim = $data->dataFim; //date("Y-m-d");
            $dataNF->servicos = $data->valorTotalServicos; //1;
            $dataNF->deducoes = $data->valorTotalDeducoes; //0;
                        
            $envioRPS = new FinEnviaNFSeSP();
            $retorno = $envioRPS->enviaRPS($rpsArray, $dataNF);
                        
            if ( $retorno->result )
            {
                MPopup::remove();
                
                if ( strlen($retorno->alerta) > 0 )
                {
                    $msg = "Alerta: <br>" . $retorno->alerta . "<br>";
                }
                
                if ( $operation == FinEnviaNFSeSP::ENVIO_EM_LOTE )
                {
                    $args = array();
                    $args['function'] = 'insert';
                    $args['pagamentosDe'] = SAGU::dateToUser($dataNF->inicio);
                    $args['pagamentosAte'] = SAGU::dateToUser($dataNF->fim);
                    $args['valorSuperior'] = $dataNF->valorMinimoDosPagamentos;
                    
                    $msg .= _M('Emissão das Notas Fiscais Eletrônicas Paulistanas efetuada com sucesso.');
                    $goto = $MIOLO->getActionURL($module, 'main:process:nfePaulistana', null, $args);
                }
                else
                {
                    $msg .= _M('Teste de Emissão das Notas Fiscais Eletrônicas Paulistanas efetuada com sucesso.');
                    $goto = null;
                }
                
                $MIOLO->information($msg, $goto);
            }
        } 
        catch ( Exception $e )
        {
            $this->addError($e->getMessage());
        }
    }
    
    public function obtemInformacoesDosTitulos($titulos = array(), $aliquotaIss)
    {
        $MIOLO = MIOLO::getInstance();
        $busEntry = new BusinessFinanceBusEntry();
        $busInvoice = new BusinessFinanceBusInvoice();
        $busLegalPerson = new BusinessBasicBusLegalPerson();
        $busDocument = new BusinessBasicBusDocument();
        $busPhysicalPerson = new BusinessBasicBusPhysicalPerson();
        $busCity = new BusinessBasicBusCity();
        $busLegalPerson = new BusinessBasicBusLegalPerson();
        
        $return = array();
        
        foreach ( $titulos as $titulo )
        {
            $infoEntry = $busEntry->getEntry($titulo);
            $infoInvoice = $busInvoice->getInvoice($infoEntry->invoiceId);
            $infoPessoa = $busPhysicalPerson->getPerson($infoInvoice->personId);
            $infoCidade = $busCity->getCity($infoPessoa->cityId);
            $infoPessoaJuridica = $busLegalPerson->getLegalPerson($infoInvoice->personId);
            
            // Se o centavos for igual a zero o value fica apenas o inteiro, se não monta o value separado por ponto o inteiro dos centavos(padrão do banco)
            $value = substr($infoInvoice->nominalValue, -2) == 00 ? str_replace('.', '', substr($infoInvoice->nominalValue, 0, -2)): $infoInvoice->nominalValue;
            
            $infoData = new stdClass();
            $infoData->titulo = $infoEntry->entryId;
            $infoData->value = $value;
            $infoData->emissao = SAGU::dateToDb($infoEntry->entryDate);
            $infoData->cpf = str_replace('.', '', str_replace('-', '', ($busDocument->getDocument($infoInvoice->personId, SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF'))->content)));
            $infoData->nome = $infoPessoa->name;
            $infoData->endereco = $infoPessoa->location;
            $infoData->numero = $infoPessoa->number;
            $infoData->complemento = $infoPessoa->complement;
            $infoData->bairro = $infoPessoa->neighborhood;
            $infoData->ibge = $infoCidade->ibgeId;
            $infoData->estado = $infoCidade->stateId;
            $infoData->cep = SAGU::NVL($infoPessoa->zipCode, $infoCidade->zipCode);
            $infoData->email = SAGU::NVL($infoPessoa->email, $infoPessoa->emailAlternative);
            $infoData->deducao = 0;
            $infoData->cnpj = $infoPessoaJuridica->cnpj;
            $infoData->cityRegistration = $infoPessoaJuridica->cityRegistration;
            
            $return[] = $infoData;
            
            // Soma o valor dos títulos para obter o valor total dos RPS
            $this->valorTotalDosTitulos += $value;
            $this->valorTotalDeDeducoes += $infoData->deducao;
            
            unset($value);
        }
        
        return $return;
    }
}

?>

