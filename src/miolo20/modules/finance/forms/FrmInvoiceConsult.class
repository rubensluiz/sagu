<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finInvoice table
 *
 * @author William Prigol Lopes [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 13/12/2005
 *
 **/

/** Botão voltar deve retornar à consulta atual
 * Form to search the finInvoice table
 */
class FrmInvoiceConsult extends MForm
{
    public  $module;
    public  $filters;
    public  $data;

    /**
     *  Default method to define fields
     */
    public function createInvoiceFields($data)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');
        $access   = MIOLO::_REQUEST('otherSide');
        $MIOLO->getClass($module, 'finance');        
        $this->setTitle(null);
        
        $businessInvoice = new BusinessFinanceBusInvoice();
        $invoiceId = MIOLO::_request('invoiceId') ? MIOLO::_request('invoiceId') : MIOLO::_request('invoiceId', 'GET');
        if (!$invoiceId)
        {
            $invoiceId = $businessInvoice->getInvoiceIdByBankInvoiceId(MIOLO::_request('returnBankCode') ? MIOLO::_request('returnBankCode') : MIOLO::_request('returnBankCode', 'GET'));
        }
        $data->invoiceId = $invoiceId;
        
        $contracts = $businessInvoice->getInvoiceContracts($invoiceId);
       
        $goto    = MIOLO::_request('goto') ? MIOLO::_request('goto') : MIOLO::_request('goto', 'GET');

        //
        // Show the entries for this titles
        //
        // BEGIN GRID
        $grdReceivableInvoice = $MIOLO->getUI()->getGrid($module, 'GrdReceivableInvoiceConsult', $data);
        $grdReceivableInvoice->setTitle(_M('Lançamentos para título @1', $module, $invoiceId));
        $businessEntry        = new BusinessFinanceBusEntry();
        $entryData            = $businessEntry->listEntryData($data->invoiceId, 4);
        $grdReceivableInvoice->setData($entryData);
        $footer1              = new MText('footer', str_repeat('&nbsp;', '5') . _M('Saldo em aberto', $module) .':', 'blue');
        $footer1->setWidth('600');
        $openBalance          = $businessInvoice->getInvoiceBalance($data->invoiceId);
        $footer2              = new MText('footer2', $openBalance, $openBalance>0 ? 'red' : 'blue');
        $footerA1             = array($footer1, $footer2);
        $hctFooter1           = new MHContainer('hctFooter', $footerA1);

        $footer3        = new MText('footer3', str_repeat('&nbsp;', '5') . _M('Saldo atualizado', $module).':', 'blue');
        $footer3->setWidth('600');
        $updatedBalance = $businessInvoice->getInvoiceBalanceWithPolicies($data->invoiceId);
        $footer4        = new MText('footer4', $updatedBalance, $updatedBalance>0 ? 'red' : 'blue');
        $footerA2       = array($footer3, $footer4);
        $hctFooter2     = new MHContainer('hctFooter2', $footerA2);
        $vctFooter      = new MVContainer('vctFooter', array($hctFooter1, $hctFooter2)); 
        $grdReceivableInvoice->setFooter($vctFooter);
        $grdReceivableInvoice->setTableName('FinEntry');
        $fields[] = $grdReceivableInvoice;
        // END GRID
        
        $isAccounted = $businessInvoice->verifyAccountedEntriesForInvoice($invoiceId);
        
        // Information to return to that page
        $_opts = array('invoiceId'=>$this->getFormValue('invoiceId', $data->invoiceId) ? $this->getFormValue('invoiceId', $data->invoiceId) : MIOLO::_request('invoiceId', 'GET'),
                       'event'=>'btnSearch_click'
                      );        
        $goto = $MIOLO->getActionURL($module, 'main', null, $_opts);
        
        // First button - INSERT ENTRY
        $opts = array('invoiceId'=>$this->getFormValue('invoiceId', $data->invoiceId) ? $this->getFormValue('invoiceId', $data->invoiceId) : MIOLO::_request('invoiceId', 'GET'), 
                      'event'=>'tbBtnNew:click',
                      'function'=>'insert',
                      'costCenterId'=>$data->costCenterId,
                      'goto'=>urlencode($goto)
                     );
        $buttons[] = new MLink('insertEntry', _M('Inserir lançamento', $module), $MIOLO->getActionURL($module, 'main:register:entry', null, $opts));                
        $buttons[] = new MLabel(' - '); 
        
        // BEGIN BUTTONS
        if (MIOLO::_request('updated', 'GET') == true)
        {
            $fields[] = new MText('updateNominalValue', _M('Valor nominal atualizado', $module));
        }
        else
        {
            $opts = array('invoiceId'=>$this->getFormValue('invoiceId', $data->invoiceId) ? $this->getFormValue('invoiceId', $data->invoiceId) : MIOLO::_request('invoiceId', 'GET'), 'returnBankCode'=>$this->getFormValue('returnBankCode', $data->returnBankCode) ? $this->getFormValue('returnBankCode', $data->returnBankCode) : MIOLO::_request('returnBankCode', 'GET'), 'event'=>'updateNominalValue_click');
            $buttons[] = new MLink('updateNominalValue', _M('Atualizar valor nominal', $module), $MIOLO->getActionURL($module, "main:report:receivableInvoiceConsult", null, $opts));
            $buttons[] = new MLabel(' - ');
        }

        if ($isAccounted == false)
        {
            $opts = array("invoiceId"=>$this->getFormValue('invoiceId', $data->invoiceId) ? $this->getFormValue('invoiceId', $data->invoiceId) : MIOLO::_request('invoiceId', 'GET'), 'goto'=>urlencode($goto));
            $closeInvoiceURL = $MIOLO->getActionURL($module, "main:closeInvoiceAlt1", null, $opts);

            $buttons[] = new MLink('closeInvoice', _M('Baixar título', $module), $closeInvoiceURL);
            $buttons[] = new MLabel(' - ');        
        }
        
        $opts = array('invoiceId'=>$this->getFormValue('invoiceId', $data->invoiceId) ? $this->getFormValue('invoiceId', $data->invoiceId) : MIOLO::_request('invoiceId', 'GET'), 
                      'function'=>'update',
                      'goto'=>str_replace("&amp;", "%26", urlencode($goto)));

        $buttons[] = new MLink('ChangeReceivableInvoice', _M('Alterar título', $module), $MIOLO->getActionURL($module, "main:register:invoice:receivableInvoice", null, $opts));
        $buttons[] = new MLabel(' - ');
        $buttons[] = new MLink('newConsultation', _M('Nova consulta', $module), $MIOLO->getActionURL($module, "main"));

        if( $access != 'true' )
        {
            $buttons[] = new MLabel(' - ');
            $buttons[] = new MLink('Back', _M('Voltar', $module), $MIOLO->getActionURL($module, 'main', null, array('personId'=>$data->personId, 'event'=>'btnSearch_click')));            
        }
        
        $divButtons = new MDiv('divButtons', $buttons, null, 'align="center"');
        
        $fields[]   = $divButtons;
        $fields[]   = new MSeparator('');
        // END BUTTONS -------

        // BEGIN BASE LABEL -------
        $field2[] = new MHiddenField('invoiceId', $this->getFormValue('invoiceId', $data->invoiceId));
        
        // Invoice
        $invoiceIdLabel = new MText('invoiceIdLabel', _M('Código do título', $module).':');
        $invoiceIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $invoiceId      = new MTextLabel('invoiceId', $data->invoiceId ? $data->invoiceId : $this->getFormValue('invoiceId', $data->invoiceId));
        $field2[]       = new MHContainer('hctInvoiceId', array($invoiceIdLabel, $invoiceId));
        
        // Bank invoice id
        $bankInvoiceIdLabel = new MText('bankInvoiceIdLabel', _M('Código do título bancário', $module).':');
        $bankInvoiceIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $bankInvoiceId      = new MText('bankInvoiceId_', $this->getFormValue('bankInvoiceId', $data->bankInvoiceId));
        $hctBankInvoice     = new MHContainer('hctBankInvoice', array($bankInvoiceIdLabel, $bankInvoiceId));
        $field2[]           = $hctBankInvoice;
        
        $personData = $businessInvoice->getPersonDataForInvoice($data->invoiceId ? $data->invoiceId : $this->getFormValue('invoiceId', $data->invoiceId));
        // Person
        $personLabel = new MText('personLabel', _M('Pessoa', $module).':');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personId    = new MText('personId_', $personData->personId ? $personData->personId : $this->getFormValue('personId', $personData->personId));
        $personTrace = new MText('personTrace', '-');
        $personName  = new MText('personName_', $personData->personName ? $personData->personName : $this->getFormValue('personName', $personData->personName));
        $hctPerson   = new MHContainer('hctPerson', array($personLabel, $personId, $personTrace, $personName));
        $field2[]    = $hctPerson;
        
        // CostCenter
        $costCenterLabel       = new MText('costCenterLabel', _M('Centro de custo', $module).':');
        $costCenterLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $costCenterId          = new MText('costCenterId_', FINANCE::formatCostCenterId($this->getFormValue('costCenterId', $data->costCenterId)));
        $costCenterTrace       = new MText('costCenterTrace', '-');
        $businessCostCenter    = new BusinessAccountancyBusCostCenter();
        $costCenterData        = $businessCostCenter->getCostCenter($this->getFormValue('costCenterId', $data->costCenterId));
        $costCenterDescription = new MText('costCenterDescription_', $costCenterData->description);
        $hctCostCenter         = new MHContainer('hctCostCenter', array($costCenterLabel, $costCenterId, $costCenterTrace, $costCenterDescription));
        $field2[]              = $hctCostCenter;
        
        // Course
        $courseLabel           = new MText('courseLabel', _M('Curso', $module).':');
        $courseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        if (strlen($data->courseId)>0)
        {
            $businessCourse          = new BusinessAcademicBusCourse();
            $courseData              = $businessCourse->getCourse($this->getFormValue('courseId', $data->courseId), $this->getFormValue('courseVersion', $data->courseVersion));

            // Course
            $courseId                = new MText('courseId_', $this->getFormValue('courseId', $data->courseId));
            $courseName              = new MText('courseName_', $courseData->shortName);
            $courseTrace             = new MText('courseTrace', '-');

            // Course Version
            $courseVersion           = new MText('courseVersion_', $this->getFormValue('courseVersion',$data->courseVersion));
            $couseVersionDescription = new MText('couseVersionDescription_', _M('Versão', $module).':');
            $hctCourse               = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseTrace, $courseName, $couseVersionDescription, $courseVersion));

        }
        else if (strlen ($data->cursoPedagogico) > 0)
        {
            $cursoNome = new MText('cursoNome', $data->cursoPedagogico);
            $cursoId = new MText('cursoId', $data->cursoPedagogicoId);
            $courseTrace             = new MText('courseTrace', '-');
            $hctCourse = new MHContainer('hctCourse', array($courseLabel, $cursoId, $courseTrace, $cursoNome));
        }
        else
        { 
            $courseData->shortName = _M('Não há curso relacionado', $module);
            $courseName = new MText('courseName_', $courseData->shortName);
            $hctCourse = new MHContainer('hctCourse', array($courseLabel, $courseName));
        }
        
        $field2[] = $hctCourse;        
       
        // Unit
        $unitLabel = new MText('unitLabel', _M('Unidade', $module).':');
        $unitLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        if (strlen($data->unitId)>0)
        {
            $unitId          = new MText('unitId_', $this->getFormValue('unitId', $data->unitId));
            $unitTrace       = new MText('unitTrace', '-');
            $businessUnit    = new BusinessBasicBusUnit();
            $dataUnit        = $businessUnit->getUnit($this->getFormValue('unitId', $data->unitId));
            $unitDescription = new MText('unitDescription_', $dataUnit->description);
            $hctUnit         = new MHContainer('hctUnit', array($unitLabel, $unitId, $unitTrace, $unitDescription));
            $hctUnit->setShowLabel(true);
        }
        else
        {
            $dataUnit->description = _M('Não há unidade relacionada', $module);
            $unitDescription       = new MText('unitDescription_', $dataUnit->description);
            $hctUnit               = new MHContainer('hctUnit', array($unitLabel, $unitDescription));
        }
        $field2[]        = $hctUnit;
        
        // ParcelNumber
        $parcelNumberLabel = new MText('parcelNumberLabel', _M('Número da parcela', $module).':');
        $parcelNumberLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $parcelNumber      = new MText('parcelNumber_', $this->getFormValue('parcelNumber', $data->parcelNumber));
        $hctParcelNumber   = new MHContainer('hctParcelNumber_', array($parcelNumberLabel, $parcelNumber));
        $field2[]          = $hctParcelNumber;
        
        // EmissionDate
        $emissionDateLabel = new MText('emissionDateLabel', _M('Data de emissão', $module).':');
        $emissionDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $emissionDate      = new MText('emissionDate_', $this->getFormValue('emissionDate', $data->emissionDate));
        $hctEmissionDate   = new MHContainer('hctEmissionDate', array($emissionDateLabel, $emissionDate));
        $field2[]          = $hctEmissionDate;

        // MaturityDate
        $maturityDateLabel = new MText('maturityDateLabel', _M('Data de vencimento', $module).':');
        $maturityDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $maturityDate      = new MText('maturityDate_', $this->getFormValue('maturityDate', $data->maturityDate));
        $hctMaturityDate   = new MHContainer('hctMaturityDate', array($maturityDateLabel, $maturityDate));
        $field2[]          = $hctMaturityDate;
        
        // Value
        $valueLabel = new MText('valueLabel', _M('Valor', $module).':');
        $valueLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $value      = new MText('value_', SAGU::formatNumber($this->getFormValue('value', $data->value)));
        $hctValue   = new MHContainer('hctValue', array($valueLabel, $value));
        $field2[]   = $hctValue;

        
        
        // Automatic debit
        $automaticDebitLabel = new MText('automaticDebitLabel', _M('Débito automático', $module).':');
        $automaticDebitLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $automaticDebit      = new MText('automaticDebit_', SAGU::getYesNo($this->getFormValue('automaticDebit', $data->automaticDebit)));
        $hctAutomaticDebit   = new MHContainer('hctAutomaticDebit', array($automaticDebitLabel, $automaticDebit));
        $field2[]            = $hctAutomaticDebit;
        
        // Comments
        $commentsLabel = new MText('commentsLabel', _M('Comentários', $module).':');
        $commentsLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $comments      = new MText('comments_', $this->getFormValue('comments', strlen($data->comments)>0 ? $data->comments : _M('Este título não contém comentários', $module)));
        $hctComments   = new MHContainer('hctComments', array($commentsLabel, $comments));
        $field2[]      = $hctComments;
        
        // Income source
        $businessIncomeSource = new BusinessFinanceBusIncomeSource();
        $incomeSourceData     = (strlen($data->incomeSourceId) > 0) ? $businessIncomeSource->getIncomeSource($data->incomeSourceId) : null;
        $incomeSourceLabel       = new MText('incomeSourceLabel', _M('Origem', $module).':');
        $incomeSourceLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $incomeSourceId          = new MText('incomeSourceId_', $this->getFormValue('incomeSourceId', $data->incomeSourceId.' - '.$incomeSourceData->description));
        $incomeSourceDescription = new MText('incomeSourceDescription_', $this->getFormValue('incomeSourceDescription',$data->incomeSourceDescription));
        $incomeSourceDescription->setReadOnly(true);
        $hctIncomeSource         = new MHContainer('hctIncomeSource', array($incomeSourceLabel, $incomeSourceId, $incomeSourceDescription));
        $hctIncomeSource->setShowLabel(true);
        $field2[]                = $hctIncomeSource;

        // Bank account
        $businessBankAccount    = new BusinessFinanceBusBankAccount();
        $bankAccountData        = $businessBankAccount->getBankAccount($data->bankAccountId);
        $bankAccountLabel       = new MText('bankAccountLabel', _M('Conta bancária', $module).':');
        $bankAccountLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $bankAccountId          = new MText('bankAccountId_', $this->getFormValue('bankAccountId', $data->bankAccountId.' - '.$bankAccountData->description));
        $bankAccountTrace       = new MText('-');
        $bankAccountDescription = new MText('bankAccountDescription_', $this->getFormValue('bankAccountDescription', $data->bankAccountDescription));
        $bankAccountDescription->setReadOnly(true);
        $hctBankAccount         = new MHContainer('hctBankAccount', array($bankAccountLabel, $bankAccountId, $bankAccountDescription));
        $hctBankAccount->setShowLabel(true);
        $field2[]               = $hctBankAccount;
      
        // Policy
        $businessPolicy    = new BusinessFinanceBusPolicy();
        $policyData        = $businessPolicy->getPolicy($data->policyId);
        $policyLabel       = new MText('policyLabel', _M('Política', $module).':');
        $policyLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $policyDescription = new MText('policyDescription_', $this->getFormValue('policyDescription', $data->policyId.' - '.$policyData->description));
        $hctPolicy         = new MHContainer('hctPolicy', array($policyLabel, $policyDescription));
        $hctPolicy->setShowLabel(true);
        $field2[]          = $hctPolicy;
      
        // Collection type
        $businessCollectionType = new BusinessFinanceBusCollectionType();
        $collectionTypeData     = $businessCollectionType->getCollectionType($policyData->collectionTypeId);
        $collectionTypeLabel    = new MText('collectionTypeLabel', _M('Tipo de cobrança', $module).':');
        $collectionTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $collectionType         = new MText('collectionType_', $this->getFormValue('collectionType', $policyData->collectionTypeId.' - '.$collectionTypeData->description));
        $hctCollectionType      = new MHContainer('hctCollectionType', array($collectionTypeLabel, $collectionType));
        $field2[]               = $hctCollectionType;
      
        if (strlen($data->sectorId)>0)
        {
            $businessSector = new BusinessBasicBusSector();
            $sectorData     = $businessSector->getSector($data->sectorId);
            $sectorLabel    = new MText('sectorLabel', _M('Setor', $module).':');
            $sectorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $sector         = new MText('sectorId_', $this->getFormValue('sectorId', $sectorData->sectorId.' - '.$sectorData->description));
            $hctSector      = new MHContainer('hctSector', array($sectorLabel, $sector));
            $field2[]       = $hctSector;
        }

        if ( count($contracts) > 0 )
        {
            $contract = $contracts[0];
            
            $busEnroll = new BusinessAcademicBusEnroll();
            $creditosLabel = $busEnroll->getTotalCredits($contract->contractId, $contract->learningPeriodId, true);
        }
        else
        {
            $creditosLabel = _M('Não há matrícula relacionada');
        }
        
        // creditos
        $collectionTypeLabel    = new MText('collectionTypeLabel', _M('Número de créditos matriculados', $module).':');
        $collectionTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $collectionType         = new MText('collectionType_', SAGU::NVL($creditosLabel, '-'));
        $hctCollectionType      = new MHContainer('hctCollectionType', array($collectionTypeLabel, $collectionType));
        $field2[]               = $hctCollectionType;
        
        $bgInvoice = new MBaseGroup('bgInvoice', _M('Informações do título', $module), $field2);
        $bgInvoice->setDisposition('vertical');


        $fields[] = $bgInvoice;
        // END BASEGRID
        
        $this->setFields($fields);
        $this->setLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
    }

    /**
     * Update the nominal value
     */
    public function updateNominalValue_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $invoiceId = MIOLO::_request('invoiceId') ? MIOLO::_request('invoiceId') : MIOLO::_request('invoiceId', 'GET');
        $businessReceivableInvoice = new BusinessFinanceBusReceivableInvoice();
        $businessReceivableInvoice->updateInvoiceBalance($invoiceId);
        $value = $businessReceivableInvoice->getNominalValue($invoiceId);
        $this->value_->value = $value;
    }
}
?>
