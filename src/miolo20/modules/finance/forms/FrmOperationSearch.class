<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finOperation table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Bral Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * 
 * @since
 * Class created on 17/08/2005
 *
 **/

/**
 * Form to search the finOperation table
 */
class FrmOperationSearch extends SSearchForm
{

    /**
     * Class constructor
     */
    public function __construct($data)
    {
        parent::__construct(_M('Localizar', $module), new FinOperation(), array('operationId'), 'BusOperation');
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $business = new BusinessFinanceBusOperation();
        
        //Field operation
        $operationIdLabelS = new MText('operationIdLabel', _M('Código', $module) . ':');
        $operationIdLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $operationIdS = new MTextField('operationIdS', $this->operationIdS->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $operationIdS->setJsHint(_M('Informe o código da operação', $module));
        $validators[] = new MIntegerValidator('operationIdS', _M('Código', $module));
        $fields[] = new MHContainer('hctOperation', array($operationIdLabelS, $operationIdS));
        
        //Field description operation
        $descriptionLabelS = new MText('descriptionLabel', _M('Descrição', $module) . ':');
        $descriptionLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $descriptionS = new MTextField('descriptionS', $this->descriptionS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $descriptionS->setJsHint(_M('Informe a descrição da operação', $module));
        $fields[] = new MHContainer('hctDescription', array($descriptionLabelS, $descriptionS));
        
        //Field operation type
        $business = new BusinessFinanceBusOperation();
        $optsS = $business->listOperationTypeId(0);
        $operationTypeIdLabelS = new MText('operationTypeLabelS', _M('Tipo de operação', $module) . ':');
        $operationTypeIdLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $operationTypeIdS = new MSelection('operationTypeIdS', $this->getFormValue('operationTypeIdS', $data->operationTypeIdS), '', $optsS );
        $operationTypeIdS->setJsHint(_M('Informe o tipo de operação', $module));
        $fields[] = new MHcontainer('hctOperationType', array($operationTypeIdLabelS, $operationTypeIdS));
        
        // Is counter movement
        $optsS = SAGU::listTrueFalse(0);
        $isCounterMovementLabelS = new MText('isCounterMovementLabelS', _M('Habilitada para movimento de caixa', $module) . ':');
        $isCounterMovementLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $isCounterMovementS = new MSelection('isCounterMovementS', $this->getFormValue('isCounterMovementS', $data->isCounterMovementS),'', $optsS);
        $fields[] = new MHcontainer('hctIsCounterMovement', array($isCounterMovementLabelS, $isCounterMovementS));
        
        //Type operation
        $typeOption['label'] = new MText('receivableOrPayableLabelS', _M('Utilização', $module) . ':');
        $typeOption['label']->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));        
        $typeOption['selection'] = new MSelection('receivableOrPayableS', $this->receivableOrPayableS->value,'', $business->listTypeRecivableOrPayable(0));
        $hctTypeOption = new MHContainer('hctTypeOption', $typeOption);
        $fields[] = $hctTypeOption;
        
        //Operation group
        $operationGroupIdLabelS = new MText('operationGroupIdLabelS', _M('Grupo de operações', $module) . ':');
        $operationGroupIdLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $business = new BusinessFinanceBusOperationGroup();
        $operationGroupIdS = new MSelection('operationGroupIdS', $this->operationGroupIdS->value, NULL, $business->listOperationGroup());
        $operationGroupIdS->setJsHint(_M('Selecione o grupo da operação', $module));
        $fields[] = new MHContainer('hctOperationGroup', array($operationGroupIdLabelS, $operationGroupIdS));
        
         //Field account scheme
        $accountSchemeLabel = new MText('accountSchemeLabelS', _M('Plano de contas', $module) . ':');
        $accountSchemeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $accountSchemeIdLookup = new MLookupTextField('accountSchemeIdS', $this->accountSchemeIdS->value, null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'accountSchemeDescriptionLookupS', 'accountancy', 'AccountScheme', null, null, true);
        $accountSchemeIdLookup->setJsHint(_M('Informe o código do plano de contas', $module));
        $validators[] = new MRegexpValidator('accountSchemeIdS', _M('Plano de contas', $module), '^[0-9]+(\.[0-9]+)*$');
        $accountSchemeDescription = new MTextField('accountSchemeDescriptionLookupS', $this->accountSchemeDescriptionLookupS->value, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $accountSchemeDescription->setReadOnly(true);
        $accountSchemeDescription->setJsHint(_M('Descrição do plano de contas', $module));
        $hctAccountScheme = new MHContainer('hctAccountSchemeS', array($accountSchemeLabel, $accountSchemeIdLookup, $accountSchemeDescription));
        $hctAccountScheme->setShowLabel(true);
        $fields[] = $hctAccountScheme;
        
        // Is extinct
        $optsS = SAGU::listTrueFalse(0);
        $isExtinctLabelS = new MText('isExtinctLabelS', _M('Está extinto', $module) . ':');
        $isExtinctLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $isExtinctS = new MSelection('isExtinctS',$this->getFormValue('isExtinctS', $data->isExtinctS), '', $optsS);
        $fields[] = new MHcontainer('hctIsExtinct', array($isExtinctLabelS, $isExtinctS));
        
        
        parent::defineFields($fields, $module, 'GrdOperationSearch');
    }
}

?>
