<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * GenerateMultipleEnrollFee form
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 02/02/2006
 *
 **/

/**
 * Form to generate Multiple Learning Period
 **/
class FrmGenerateMultipleEnrollFeeCourse extends SForm
{
    private $home;
    public $filters;
    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct( _M('Gerar diversas taxas de matrícula', $module), NULL, NULL );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        
        //Field period
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId       = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período', $module), $businessPeriod->listPeriod() );
        $periodId->setJsHint(_M('Selecione um período', $module));
        $validators[]   = new MRequiredValidator('periodId');
        $flds[]         = $periodId;

        //Field formation level
        $business = new BusinessAcademicBusFormationLevel();
        $formationLevelId = new MComboBox('formationLevelId', $this->getFormValue('formationLevelId',$data->formationLevelId), _M('Grau de formação', $module), $business->listFormationLevel());
        $formationLevelId->setJsHint(_M('Selecione um grau de formação', $module));
        $validators[] = new MRequiredValidator('formationLevelId');
        $flds[] = $formationLevelId;

        $btn1     = new MButton('btnFilter', _M('Filtrar', $module));
        $flds[]  = $btn1;
        
        $hctForm = new MHContainer('hctForm', $flds);
        $hctForm->setShowLabel(true);
        $fields[]  = $hctForm;
        unset($flds);
       
        $fields[] = new MSeparator('<hr>');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );
        
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        
        $this->filters->formationLevelId = $this->formationLevelId->value;
        $this->filters->periodId         = $this->periodId->value;
    }

    /**
     * Event triggered when user chooses Generate from the toolbar
     **/
    public function btnFilter_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $business = new BusinessFinanceBusGenerateMultipleEnrollFee();
        $data = $business->getCourses($this->filters);
        
        if( count($data) > 0 )
        {       
            $btn2     = new MButton('btnInvertSelection', _M('Inverter seleção', $module), 'invertSelection()');
            //$btn2->addAttribute('onClick','invertSelection()');
            $fields[] = $btn2;
            $this->addField($fields);
    
            $grdResults = $MIOLO->getUI()->getGrid($module,'GrdGenerateMultipleEnrollFee',$this->filters);
            $grdResults->setData($data);
            $this->addField($grdResults);
    
            $script .= "    function invertSelection()\n    {\n";
            $x = 0;
    
            foreach ( $data as $row )
            {
                $script .= '        if ( document.' . $this->name . '[\'selectgridGenerateMultipleEnrollFee[' . $x . ']\'].checked == true )' . "\n        {\n";
                $script .= '            document.' . $this->name . '[\'selectgridGenerateMultipleEnrollFee[' . $x . ']\'].checked = false;' . "\n";
                $script .= '        }' . "\n        else\n        {\n";
                $script .= '            document.' . $this->name . '[\'selectgridGenerateMultipleEnrollFee[' . $x . ']\'].checked = true;' . "\n";
                $script .= '        }' . "\n";
                $x++;
            }
            
            $script .= "    }\n";
            $script .= "    invertSelection();";
            $this->page->addJsCode($script);
            unset($fields);
    
            $btn1[]     = new MButton('btnNext', _M('Próximo', $module) . ' >>');
            $div1       = new MDiv('div1', $btn1, null, 'align=center');
    
            $fields[] = $div1;
            $fields[] = new Separator('');
            
            $this->addField($fields);
        }
        else
        {
            $this->addError(_M('Não foram encontrados cursos coincidentes com os campos selecionados.', $module));
        }
    }

    /**
     * Event triggered when user chooses Generate from the toolbar
     **/
    public function btnNext_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $courses = $this->getFormValue('selectgridGenerateMultipleEnrollFee',$this->selectgridGenerateMultipleEnrollFee);

        if ( count($courses) > 0 )
        {
            foreach ( $courses as $id => $value )
            {
                $vars["courses[$id]"] = $value;
            }
            
            $postAction = substr($action,0,strrpos($action,':')) . ':generateMultipleEnrollFee';
            $this->page->redirect($MIOLO->getActionURL($module, $postAction, null, $vars));            
        }
        else
        {
            $this->addError(_M('Você deve selecionar pelo menos um curso para iniciar a geração por lotes.', $module));

            $this->btnFilter_click();
        }
           
    }
}

?>
