<?php

/**
 * <--- Copyright 2003-2015 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Personal data form
 *
 * @author Joao Francisco Padilha Souza [joao@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Joao Francisco Padilha Souza [joao@solis.com.br]
 *
 * @since
 * Class created on 13/05/2015
 */

/**
 * Form to type the group academic data
 */
class FrmConsultarLogsDeRetProcessadosDetalhes extends SForm
{

    /**
     * Class constructor
     */
    public function __construct($data = null)
    {
        $module = SAGU::getFileModule(__FILE__);

        parent::__construct(_M('Detalhes da movimentação', $module), null, null);

    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        ///////Obter dados               
        $bankMovementId = MIOLO::_REQUEST('bankMovementId');
        $bankId = MIOLO::_REQUEST('bankId');
        $dataOcorrencia = MIOLO::_REQUEST('occurrenceDate');
        $codigoOcorrencia = MIOLO::_REQUEST('occurrence');
        $invoiceId = MIOLO::_REQUEST('invoiceId');
        $fileId = MIOLO::_REQUEST('fileId');
        
        $finBankLogs = new FinConsultarLogsDeRetProcessados($bankMovementId);
        $bankName = $finBankLogs->getBankName($bankId);
        $bankAccountid = $finBankLogs->getBankAccountId($invoiceId);
        $dadosConta = $finBankLogs->getInfoAccount($bankAccountid);

        $nossoNumero = $finBankLogs->ournumber;
        $valorNominal = $finBankLogs->value;
        $valorPago = $finBankLogs->valuePaid;
        $saldoDoTitulo = $finBankLogs->balance;
        $vencimentoDoArquivo = $finBankLogs->fileMaturityDate;
        $vencimentoDoSagu = $finBankLogs->saguMaturityDate;
        $jurosMultaDoArquivo = $finBankLogs->fileinterestfine;
        $jurosMultaDoSagu = $finBankLogs->saguinterestfine;
        $descontoDoArquivo = $finBankLogs->fileDiscount;
        $descontoDoSagu = $finBankLogs->saguDiscount;
        $outrosDescontos = $finBankLogs->otherDiscounts;
        $outrosAcrescimos = $finBankLogs->otherAdditions;
        $taxaDeServicosCobradosBanco = $finBankLogs->expenditure;
//        $linhaArquivo = $finBankLogs->fileline; //Essa informacao nao esta sendo gerada pelo processamento do banco

        //////////// Detalhes da movimentacao
        //Data importacao
        $dateImportLabel= new MText('dataImportLabel', _M('Data de importação', $module) . ':');
        $dateImportLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $dateImport = new MText('dateImport', $dataOcorrencia);
        $dateImport->setBold(true);
        $ctnDateImport = new MHContainer('ctnDateImport', array($dateImportLabel, $dateImport));
        
        //Codigo da movimentacao bancaria
        $bankMovementLabel= new MText('bankMovementIdLabel', _M('Código da movimentação bancária', $module) . ':');
        $bankMovementLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $bankMovement = new MText('bankMovementId', $bankMovementId);
        $bankMovement->setBold(true);
        $ctnbankMovement = new MHContainer('ctnbankMovementId', array($bankMovementLabel, $bankMovement));
        
        //Codigo do titulo
        $tituloLabel= new MText('tituloLabel', _M('Código do título', $module) . ':');
        $tituloLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $titulo = new MText('titulo', $invoiceId);
        $titulo->setBold(true);
        $ctnTitulo = new MHContainer('ctnbank', array($tituloLabel, $titulo));
        
        //Banco
        $bankLabel= new MText('bankLabel', _M('Banco', $module) . ':');
        $bankLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $bank = new MText('bank', $bankName);
        $bank->setBold(true);
        $ctnbank = new MHContainer('ctnbank', array($bankLabel, $bank));

        //Conta bancaria
        $accountBankLabel= new MText('accountBankLabel', _M('Conta Bancária', $module) . ':');
        $accountBankLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $accountBank = new MText('accountBank', $dadosConta);
        $accountBank->setBold(true);
        $ctnaccountBank = new MHContainer('ctnaccountBank', array($accountBankLabel, $accountBank));
        
        $fields[] = new MBaseGroup('bsgDetalhes', 'Detalhes da movimentação', array($ctnDateImport, $ctnbankMovement, $ctnTitulo, $ctnbank, $ctnaccountBank), 'vertical');

        ///////////INFORMACOES DO ARQUIVO (DIV DA ESQUERDA)
        //Data da ocorrencia
        $dateOcurrenceLabel= new MText('dateOcurrenceLabel', _M('Data da ocorrência', $module) . ':');
        $dateOcurrenceLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $dateOccurrence = new MText('dateOcurrence', $dataOcorrencia);
        $dateOccurrence->setBold(true);
        $ctnDateOccurrence = new MHContainer('ctnDateOccurrrente', array($dateOcurrenceLabel, $dateOccurrence));
        
        //COdigo da ocorrencia
        $codeOccurrenceLabel= new MText('codeOccurrenceLabel', _M('Código da ocorrencia', $module) . ':');
        $codeOccurrenceLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $codeOccurrence = new MText('codeOcurrence', $codigoOcorrencia);
        $codeOccurrence->setBold(true);
        $ctnCodeOccurrence = new MHContainer('ctnCodeOccurrrente', array($codeOccurrenceLabel, $codeOccurrence));
        
        //nosso numero
        $ourNumberLabel= new MText('ourNumberLabel', _M('Nosso número', $module) . ':');
        $ourNumberLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $ourNumber = new MText('ourNumber', $nossoNumero);
        $ourNumber->setBold(true);
        $ctnOurNumber = new MHContainer('ctnOurNumber', array($ourNumberLabel, $ourNumber));
        
        //Valor nominal do titulo
        $nominalValueLabel= new MText('nominalValueLabel', _M('Valor nominal do título', $module) . ':');
        $nominalValueLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $nominalValue = new MText('nominalValue', $valorNominal);
        $nominalValue->setBold(true);
        $ctnNominalValue= new MHContainer('ctnNominalValue', array($nominalValueLabel, $nominalValue));
        
        //Valor pago
        $amountPaidLabel= new MText('amountPaidLabel', _M('Valor pago', $module) . ':');
        $amountPaidLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $amountPaid = new MText('amountPaid', $valorPago);
        $amountPaid->setBold(true);
        $ctnAmountPaid= new MHContainer('ctnNominalValue', array($amountPaidLabel, $amountPaid));
        
        //Saldo do titulo no momento do processamento
        $balanceTitileLabel= new MText('balanceTitle', _M('Saldo do título no momento do processamento', $module) . ':');
        $balanceTitileLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $balanceTitle = new MText('balanceTitle', $saldoDoTitulo);
        $balanceTitle->setBold(true);
        $ctnBalanceTitle = new MHContainer('ctnBalanceTitle', array($balanceTitileLabel, $balanceTitle));
        
        //VEncimento do arquivo
        $fileMaturityLabel= new MText('fileMaturity', _M('Vencimento do arquivo', $module) . ':');
        $fileMaturityLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $fileMaturity = new MText('fileMaturity', $vencimentoDoArquivo);
        $fileMaturity->setBold(true);
        $ctnFileMaturity = new MHContainer('ctnFileMaturity', array($fileMaturityLabel, $fileMaturity));
        
        //VEncimento do arquivo
        $maturitySaguLabel= new MText('maturitySagulabel', _M('Vencimento do Sagu', $module) . ':');
        $maturitySaguLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $maturitySagu = new MText('maturitySagu', $vencimentoDoSagu);
        $maturitySagu->setBold(true);
        $ctnMaturitySagu = new MHContainer('ctnMaturitySagu', array($maturitySaguLabel, $maturitySagu));
        
        /////// INFORMACOES DO ARQUIVO (DIV DA DIREITA)
        //Juros multa do arquivo
        $intFineFileLabel = new MText('intFineFileLabel', _M('Juros/Multa do arquivo', $module) . ':');
        $intFineFileLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $intFineFile = new MText('intFineFile', $jurosMultaDoArquivo);
        $intFineFile->setBold(true);
        $ctnIntFineFile = new MHContainer('ctnintFineFile', array($intFineFileLabel, $intFineFile));

        //Juros multa calculados pelo sagu
        $intFineFileSaguLabel= new MText('intFineFileSaguLabel', _M('Juros/Multa caculados pelo sagu', $module) . ':');
        $intFineFileSaguLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $intFineFileSagu = new MText('intFineFileSagu', $jurosMultaDoSagu);
        $intFineFileSagu->setBold(true);
        $ctnIntFineFileSagu = new MHContainer('ctnintFineFileSagu', array($intFineFileSaguLabel, $intFineFileSagu));

        //Desconto do arquivo
        $fileDiscountLabel= new MText('fileDiscountLabel', _M('Desconto do arquivo', $module) . ':');
        $fileDiscountLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $fileDiscount= new MText('fileDiscount', $descontoDoArquivo);
        $fileDiscount->setBold(true);
        $ctnFileDiscount = new MHContainer('ctnFileDiscount', array($fileDiscountLabel, $fileDiscount));
        
        //Desconto do SAGU
        $fileDiscountSaguLabel= new MText('fileDiscountLabel', _M('Desconto calculado pelo sagu', $module) . ':');
        $fileDiscountSaguLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $fileDiscountSagu = new MText('fileDiscount', $descontoDoSagu);
        $fileDiscountSagu->setBold(true);
        $ctnFileDiscountSagu = new MHContainer('ctnFileDiscount', array($fileDiscountSaguLabel, $fileDiscountSagu));

	//Outros descontos concedidos pelo banco
        $otherDiscountsBankLabel= new MText('otherDiscountsBankLabel', _M('Outros descontos concedidos pelo banco', $module) . ':');
        $otherDiscountsBankLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $otherDiscountsBank = new MText('otherDiscountsBank', $outrosDescontos);
        $otherDiscountsBank->setBold(true);
        $ctnOtherDiscountsBank = new MHContainer('ctnOtherDiscountsBank', array($otherDiscountsBankLabel, $otherDiscountsBank));

	//Outros acrescimos concedidos pelo banco
        $otherExtrasBankLabel= new MText('otherExtrasBankLabel', _M('Outros acréscimos concedidos pelo banco', $module) . ':');
        $otherExtrasBankLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $otherExtrasBank = new MText('otherExtrasBank', $outrosAcrescimos);
        $otherExtrasBank->setBold(true);
        $ctnOtherExtrasBank = new MHContainer('ctnOtherExtrasBank', array($otherExtrasBankLabel, $otherExtrasBank));

        //Taxa de servicos cobrados pelo banco
        $servicesChargedBankLabel= new MText('servicesChargesBankLabel', _M('Taxa de serviços cobrados pelo banco', $module) . ':');
        $servicesChargedBankLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $servicesChargedBank= new MText('servicesChargedBank', $taxaDeServicosCobradosBanco);
        $servicesChargedBank->setBold(true);
        $ctnServicesChangerBank = new MHContainer('ctnServicesChangedBank', array($servicesChargedBankLabel, $servicesChargedBank));
        
        ////// DIVS ////////////////////////
        
        //Div da esquerda
        $divLeft = new MDiv('divLeft', Array($ctnDateOccurrence, $ctnCodeOccurrence, $ctnOurNumber, $ctnNominalValue, $ctnAmountPaid, $ctnBalanceTitle, $ctnFileMaturity, $ctnMaturitySagu));
        $divLeft->addStyle("display", "inline-block");
        $divLeft->addStyle("box-sizing", "border-box");
        $divLeft->addStyle("width", "50%");
        $divLeft->addStyle("float", "left");
        
        //Div da direita
        $divHigth = new MDiv('divhigth', Array($ctnIntFineFile, $ctnIntFineFileSagu, $ctnFileDiscount, $ctnFileDiscountSagu, $ctnOtherDiscountsBank, $ctnOtherExtrasBank, $ctnServicesChangerBank));
        $divHigth->addStyle("display", "inline-block");
        $divHigth->addStyle("box-sizing", "border-box");
        $divHigth->addStyle("width", "50%");
        $divHigth->addStyle("float", "left");
        
        //Div principal - as duas divs anteriores ficam dentro desta principal
        $divKey = new MDiv('divKey', Array($divLeft, $divHigth));
        $fields[] = new MBaseGroup('bsFileInfo', _M('Informações do arquivo', $module), array($divKey), 'vertical');

        //////////////LANCAMENTOS GERADOS NA MOVIMENTACAO
        $lancamentosGerados = $finBankLogs->obterLancamentosGerados( $finBankLogs );
        
        //Dados da grid, so vai mostrar esta grid se tiverem dados para serem exibidos
        if ( count($lancamentosGerados) > 0 )
        {
            $grid = $MIOLO->getUI()->getGrid($module, 'GrdLancamentosGeradosNaMovimentacao');
            $grid instanceof SGrid;
            $grid->setPageLength(999999999);
            $grid->setData($lancamentosGerados);
            $grid->disablePagination();
            $grid->disableColumnSorting();
            
            $flds[] = $divL = new MDiv('divGrd', $grid);
            $divL->addStyle("display", "inline-block");
            $divL->addStyle("box-sizing", "border-box");
            $divL->addBoxStyle('width', '100%');
            
            if ( count($flds) > 0)
            {
                $flds[] = new MSpacer();
                
                $msg .= ' ' . _M('Clique ', $module);
                $msg2 .= ' ' . _M('para visualizar todos os lançamentos do título.', $module);

                $url = $MIOLO->getActionURL($module, "main:receivableInvoiceConsult", null, array('invoiceId' => $invoiceId));
                $links = new MLink($module, 'aqui', $url, null, '_new');
                
                $msg .= ' ' . $links->generate() . ' ' . $msg2;
                
                $flds[] = $divLink = new MDiv('divLink', $msg);
                $fields[] = new MBaseGroup('bsReleasesMoving', _M('Lançamentos gerados na movimentação', $module), $flds);
            }
        }
        
        ////////// ARQUIVO DE RETORNO
        //Titulo em negrito
        $fileTitle = new MText('fileTitle', _M('Arquivo de retorno', $module) . ':');
        $fileTitle->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $fileTitle->setBold(true);
        $ctnFileTitle = new MHContainer('ctnFileTitle', array($fileTitle));
        
        /// BAIXAR ARQUIVO
        $opts = array('permission' => true);
        $busFile = new BusinessBasicBusFile();
        $urlFile = $busFile->getUrl($fileId, $opts);

        $fileLabel= new MText('fileLabel', _M('Baixar Arquivo', $module) . ':');
        $fileLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $file = new MLink($module, null, $urlFile, _M('Baixar arquivo', $module), '_new');
        $ctnFile = new MHContainer('ctnFile', array($fileLabel, $file));

        $fields[] = new MBaseGroup('bsReturnFile', _M('Arquivo de retorno', $module), array($ctnFileTitle, $ctnFile), 'vertical');
        
//        //Botao nova busca
//        $hct = array();
//        $hct[] = new MButton('btnNovaBusca', _M('Nova busca'), $MIOLO->getActionURL($module, 'main:process:remittanceReturn:consultarLogsDeRetProcessadosSearch'));
//        $divBtn = new MDiv('divBtn', $hct, null, 'align="center"');
//        $fields[] = $divBtn;
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators, 'toolbar' => false ) );
    }
}
