<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finSPC table
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * 
 * @since
 * Class created on 26/08/2010
 *
 **/

class FrmSpcReport extends SManagementForm
{

    /**
     * Class constructor
     */
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        parent::__construct(new FinSpc(), array('personId', 'entryDate'), 'BusSpc', _M('Relatório SPC', 'finance'));

        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('event'=>'generateReport')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        
        $fieldReason['reasonLabel'] = new MText('reasonLabel', _M('Razão', $module) . ':');
        $fieldReason['reasonLabel']->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $fieldReason['reasonId'] = new MLookupTextField('reasonId', $this->getFormValue('reasonId', $data->reasonId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'description', 'finance', 'SpcReason', null, null, true);
        $fieldReason['reasonId']->setJsHint(_M('Informe o código da razão', $module));
        $fieldReason['description'] = new MTextField('description', $this->getFormValue('description', $data->description), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $fieldReason['description']->setReadOnly(true);
        $fields['reason'] = new MHContainer('hctMovement', $fieldReason);
        
        //Field course
        $fieldCourse['courseLabel'] = new MText('courseLabel', _M('Curso', $module) . ':');
        $fieldCourse['courseLabel']->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $fieldCourse['courseId'] = new MLookupTextField('courseId', $this->getFormValue('courseId', $data->courseId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('courseName'), 'academic', 'Course', null, array('courseId' => 'courseId'), true);
        $fieldCourse['courseId']->setJsHint(_M('Informe o código do curso', $module));
        $fieldCourse['courseName'] = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $fieldCourse['courseName']->setReadOnly(true);
        $fieldCourse['courseName']->setJsHint(_M('Nome do curso', $module));
        $fields['course'] = new MHContainer('hctCourse', $fieldCourse);
        $fields['course']->setShowLabel(false);
        
        //Fields person
        $fieldsPerson['personLabel'] = new MText('personLabel', _M('Pessoa', $module) . ':');
        $fieldsPerson['personLabel']->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $fieldsPerson['personId'] = new MLookupTextField('personId', $data->personId->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'personName', 'basic', 'PhysicalPerson', null, null, true);
        $fieldsPerson['personId']->setJsHint(_M('Informe o código da pessoa', $module));
        $fieldsPerson['personName'] = new MTextField('personName', $data->personName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $fieldsPerson['personName']->setJsHint(_M('Nome da pessoa', $module));
        $fields['lookupPerson'] = new MHContainer('hctPerson', $fieldsPerson);
        $fields['lookupPerson']->setShowLabel(true);
        
        //Fields situation
        $fieldsSituation['label'] = new MText('isInTheSpcLabel', _M('Está no SPC', $module) . ':');
        $fieldsSituation['label']->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $fieldsSituation['radio'] = new MRadioButtonGroup('isInTheSpc', '', SAGU::listTrueFalseIndifferent(1), $this->isInTheSpc->value, '', 'horizontal');
        $fields['situation'] = new MHContainer('hctIsAccounted', $fieldsSituation);
        $fields['situation']->setShowLabel(false);
        
        //Fields period entry date
        $fieldsEntryDate['entryDateLabel'] = new MText('entryBeginLabel', _M('Data inicial de entrada', $module) . ':');
        $fieldsEntryDate['entryDateLabel']->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $fieldsEntryDate['entryDateBegin'] = new MCalendarField('entryDateBegin', $this->getFormValue('entryDateBegin', $data->entryDateBegin), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $fieldsEntryDate['entryDateBegin']->setJsHint(_M('Informe a data inicial de entrada', $module));
        $fieldsEntryDate['entryDateEndLabel'] = new MText('entryDateEndLabel', _M('Data final de entrada', $module) . ':');
        $fieldsEntryDate['entryDateEndLabel']->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $fieldsEntryDate['entryDateEnd'] = new MCalendarField('entryDateEnd', $this->getFormValue('entryDateEnd', $data->entryDateEnd), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $fieldsEntryDate['entryDateEnd']->setJsHint(_M('Informe a data final de entrada', $module));
        $fields['periodBegin'] = new MHContainer('hctEntryDate', $fieldsEntryDate);
        
        //Fields period removal date
        $fieldsRemovalDate['removalDateLabel'] = new MText('removalBeginLabel', _M('Data inicial de saída', $module) . ':');
        $fieldsRemovalDate['removalDateLabel']->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $fieldsRemovalDate['removalDateBegin'] = new MCalendarField('removalDateBegin', $this->getFormValue('removalDateBegin', $data->removalDateBegin), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $fieldsRemovalDate['removalDateBegin']->setJsHint(_M('Informe a data inicial de saída', $module));
        $fieldsRemovalDate['removalDateEndLabel'] = new MText('removalDateEndLabel', _M('Data final de saída', $module) . ':');
        $fieldsRemovalDate['removalDateEndLabel']->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $fieldsRemovalDate['removalDateEnd'] = new MCalendarField('removalDateEnd', $this->getFormValue('removalDateEnd', $data->removalDateEnd), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $fieldsRemovalDate['removalDateEnd']->setJsHint(_M('Informe a data final de saída', $module));
        $fields['periodEnd'] = new MHContainer('hctRemovalDate', $fieldsRemovalDate);
        
        //Get Yes and No for Radio Button
        $messagesType[] = array(_M('Arquivo PDF (não editável)', $module), DB_TRUE);
        $messagesType[] = array(_M('Documento do OpenOffice.org Writer (editável)', $module), DB_FALSE);
        $messagesType[] = array(_M('Mostrar em tela (não editável)', $module), DB_FALSE);
        
        $opts[] = new MOption('pdf', 'pdf', _M('Arquivo PDF (não editável)', $module), false);
        $opts[] = new MOption('openOffice', 'openOffice', _M('Documento do OpenOffice.org Writer (editável)', $module), true);
        $opts[] = new MOption('screen', 'screen', _M('Mostrar em tela (não editável)', $module), false);
        
        //Genearate format
        $generateOption['label'] = new MText('generateOptionLabel', _M('Gerar tipo', $module) . ':');
        $generateOption['label']->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $fileOption = $this->GetFormValue('generateOption', $data->generateOption) ? $this->GetFormValue('generateOption', $data->generateOption) : DB_TRUE;
        $generateOption['radio'] = new MRadioButtonGroup('generateOption', '', $opts, $fileOption, null, 'horizontal');
        $hctGenerateOption = new MHContainer('hctGenerateOption', $generateOption);
        $fields[] = $hctGenerateOption;
        
        $js = " function changeDetails()
                {
                    if ((document.getElementById('generateOption_screen').checked == true) )
                    {
                        if ( document.getElementById('divTable') )
                        {
                            document.getElementById('divTable').style.display = 'block';
                        }
                    }
                    else
                    {
                        if ( document.getElementById('divTable') )
                        {
                            document.getElementById('divTable').style.display = 'none';
                        }
                    }
                }";
        
        $this->addJsCode($js);
        
        $generateOption['radio']->addAttribute('onchange', 'changeDetails()');
        $generateOption['radio']->SetShowLabel(false);
        
        parent::defineFields($fields, null, null);
        $this->toolbar->enableButton(MToolBar::BUTTON_PRINT);
    
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function generateReport($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $data = new stdClass();
        $data = $this->getData();

        if ( strlen($data->reasonId)== 0 && strlen($data->reasonId)== 0 && strlen($data->courseId) == 0 && strlen($data->personId) == 0 && strlen($data->isInTheSpc)== 0 && strlen($data->entryDateBegin)== 0 && strlen($data->entryDateEnd)== 0 && strlen($data->removalDateBegin)== 0 && strlen($data->removalDateEnd) == 0 )
        {
            $this->AddInfo(_M('Informe ao menos um filtro', $module));
        }
        else
        {
            $optionId = $this->getFormValue('generateOption');

            switch ( $optionId )
            {
                //Case option
                case 'openOffice' :
                case 'pdf' :

                    set_time_limit(0);
                    $api = new AgataAPI();

                    try
                    {
                        //Business spc
                        $businessSpc = new BusinessFinanceBusSpc();
                        //Data spc
                        $dataSpc = $businessSpc->searchSpcReport($data);

                        if ( is_array($dataSpc) != true )
                        {
                            throw new Exception(_M('Nenhum registro encontrado', $module) . ' !');
                        }

                        $header = array();
                        $body = array();

                        //Header of the document
                        $header[0][0] = date('d/m/Y'); //Date on which the document was issued


                        foreach ( $dataSpc as $k => $line )
                        {
                            //Body of the document
                            $v[] = ($k + 1);
                            $v[] = $line[0];
                            $v[] = $line[1];
                            $v[] = $line[2];
                            $v[] = $line[3];

                            $body[0][0][] = $v;
                            unset($v);
                        }

                        $fileName = '/spcReport' . '.sxw';

                        //Set information of the header
                        $api->setLanguage($MIOLO->getConf('i18n.language'));
                        $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . $fileName);
                        $api->setDataArray($header);
                        $api->setSubDataArray($body);

                        $ok = $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/spcReport.sxw'));

                        if ( $ok && ($optionId == 'pdf') )
                        {
                            $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/spcReport_' . '.pdf');
                            $api->openOffice2pdf(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/spcReport_' . '.sxw');
                        }

                        $api->fileDialog();

                    }
                    catch ( Exception $e )
                    {
                        $this->addError($e->getMessage());
                    }

                    break;
                case 'screen' :

                    $this->addJsCode('changeDetails()');

                    //Columns
                    $columns[] = _M('Código da pessoa', $module);
                    $columns[] = _M('Nome da pessoa', $module);
                    $columns[] = _M('Data de lançamento', $module);
                    $columns[] = _M('Data de saída', $module);

                    //Data table
                    $businessSpc = new BusinessFinanceBusSpc();
                    //Search
                    $dataTable = $businessSpc->searchSpcReport($data);

                    if ( is_array($dataTable) )
                    {
                        $fields[] = new MDiv('divTable', new MTableRaw(_M('Movimentações', $module), $dataTable, $columns));

                        $this->addFields($fields);
                    }
                    else
                    {
                        $this->AddInfo(_M('Nenhum registro encontrado', $module));
                    }

                    break;
                default :
                    break;
            }
        }
    }
}

?>
