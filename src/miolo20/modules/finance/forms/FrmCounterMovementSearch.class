<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finCounterMovement table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * 
 * @since
 * Class created on 03/01/2006
 *
 **/

/**
 * Form to search the finCounterMovement table
 */
class FrmCounterMovementSearch extends SSearchForm
{

    /**
     * Class constructor
     */
    public function __construct()
    {
        parent::__construct(_M('Localizar', 'basic'), new FinCounterMovement(), array('counterMovementId'), 'BusCounterMovement');
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        //Valid user
        try
        {
            //Get login
            $loginUser = $MIOLO->GetLogin();
            //Business person
            $businessPhysicalPersonEmployee = new BusinessBasicBusPhysicalPersonEmployee();
            //Object person
            

            $person = $businessPhysicalPersonEmployee->getPersonByMioloUserName($loginUser->id);
            
            if ( is_object($person) )
            {
                //Business counter
                $businessOpenCounter = new BusinessFinanceBusOpenCounter();
                
                //Filter counter
                $filter = new stdClass();
                $filter->operatorId = $person->personId;
                $filter->open = 't';
                //Get data counter
                $openCounter = $businessOpenCounter->searchOpenCounter($filter);
                
                if ( is_array($openCounter) )
                {
                    $objectOpenCounter = $businessOpenCounter->getOpenCounter($openCounter[0][0]);
                    
                    $data->openCounterIdS = $objectOpenCounter->openCounterId;
                    $data->counterIdS = $objectOpenCounter->counterId;
                    $data->counterDescriptionS = $objectOpenCounter->counterDescription;
                    $data->unitDescriptionS = $objectOpenCounter->unitDescription;
                    $data->operatorIdS = $objectOpenCounter->operatorId;
                    $data->operatorNameS = $objectOpenCounter->operatorName;
                    $person = $businessPhysicalPersonEmployee->getPersonByMioloUserName($objectOpenCounter->responsibleUserName);
                }
                else
                {
                    $msg = _M('Erro. Você não tem permissão para acessar este processo!', $module);
                    $msg .= '<ul><li>' . _M('O usuário logado deve ser um operador de caixa', $module) . '.' . '</li></ul>';
                    throw new Exception($msg);
                }
            }
            else
            {
                $msg = _M('Erro. Você não tem permissão para acessar este processo!', $module);
                $msg .= '<ul><li>' . _M('O usuário logado deve ser um funcionário', $module) . '.' . '</li></ul>';
                $msg .= '<ul><li>' . _M('O usuário logado deve ser um operador de caixa', $module) . '.' . '</li></ul>';
                throw new Exception($msg);
            }
        }
        catch ( Exception $e )
        {
            $MIOLO->error($e->getMessage());
        }
        
        //Id open counter
        $fields[] = new MHiddenField('openCounterIdS', $data->openCounterIdS);
        
        //Base open counter
        $responsibleId['responsibleIdLabel'] = new MText('responsiblePersonIdS', _M('Código do responsável', $module) . ':');
        $responsibleId['responsibleIdLabel']->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $responsibleId['responsibleId'] = new MTextLabel('responsibleIdS', $person->personId);
        $hctId = new MHContainer('hctIdS', $responsibleId);
        $responsibleName['responsibleNameLabel'] = new MText('responsibleNameLabelS', _M('Nome do resposável', $module) . ':');
        $responsibleName['responsibleNameLabel']->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $responsibleName['responsibleName'] = new MTextLabel('responsibleNameS', $person->name);
        $hctName = new MHContainer('hctNameS', $responsibleName);
        $counterId['counterIdLabel'] = new MText('counterIdLabelS', _M('Caixa', $module) . ':');
        $counterId['counterIdLabel']->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $counterId['counterId'] = new MTextLabel('counterIdS', $data->counterIdS);
        $counterId['counterDescription'] = new MTextLabel('counterDescriptionS', $data->counterDescriptionS);
        $counterId['unitDescriptionLabel'] = new MText('unitDescriptionLabelS', _M('Unidade', $module) . ':');
        $counterId['unitDescriptionS'] = new MTextLabel('unitDescriptionS', $data->unitDescriptionS);
        $hctCounter = new MHContainer('hctCounterDescriptionS', $counterId);
        $operator['operatorLabel'] = new MText('operatorLabelS', _M('Operador', $module) . ':');
        $operator['operatorLabel']->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $operator['operatorId'] = new MTextLabel('operatorIdS', $data->operatorIdS);
        $operator['operatorName'] = new MTextLabel('operatorNameS', $data->operatorNameS);
        $hctOperator = new MHContainer('hctOperatorS', $operator);
        $fields[] = new MBaseGroup('baseOpenCounterS', _M('Abertura de caixa',$module), array($hctId, $hctName, $hctCounter, $hctOperator), 'vertical');
        
        //Field counter movement
        $counterMovementLabelS = new MText('counterMovementLabelS', _M('Código', $module) . ':');
        $counterMovementLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $counterMovementIdS = new MTextField('counterMovementIdS', $this->getFormValue('counterMovementIdS', $data->counterMovementIdS), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $validators[] = new MIntegerValidator('counterMovementIdS', _M('Código', $module), '', 'optional');
        $counterMovementIdS->setJsHint(_M('Informe o código da movimentação de caixa', $module));
        $hctCounterMovementS = new MHContainer('hctCounterMovementS', array($counterMovementLabelS, $counterMovementIdS));
        $fields[] = $hctCounterMovementS;
        
        //Field specie
        $speciesIdLabelS = new MText('speciesIdLabelS', _M('Espécie', $module) . ':');
        $speciesIdLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $business = new BusinessFinanceBusSpecies();
        $speciesIdS = new MComboBox('speciesIdS', $this->speciesIdS->value, '', $business->listSpecies(), false, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $validators[] = new MIntegerValidator('speciesIdS');
        $speciesIdS->setJsHint(_M('Selecione uma espécie', $module));
        $hctSpeciesS = new MHContainer('hctSpeciesS', array($speciesIdLabelS, $speciesIdS));
        $hctSpeciesS->setShowLabel(true);
        $fields[] = $hctSpeciesS;
        
        //Field value
        $value = new MTextField('valueS', $this->getFormValue('value', $data->valueS), _M('Valor', $module), SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'), _M('Ex.: 1.00', $module));
        $value->setJsHint(_M('Informe o valor', $module));
        $validators[] = new MFloatValidator('valueS', _M('Valor', $module), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), 'required');
        $fields[] = $value;
        
        //Field movement date
        $movementDateLabelS = new MText('movementDateLabelS', _M('Data de movimentação', $module) . ':');
        $movementDateLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $movementDateS = new MCalendarField('movementDateS', $this->getFormValue('movementDateS', $data->movementDateS), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $movementDateS->setJsHint(_M('Informe a data de registro', $module));
        $validators[] = new MDATEDMYValidator('movementDateS', '', 'optional');
        $hctDateMovementS = new MHContainer('hctDateMovementS', array($movementDateLabelS, $movementDateS));
        $fields[] = $hctDateMovementS;
        
        $business = new BusinessFinanceBusOperation();
        //pega mensagem de débito ou crédito  | 0 para Selection e 1 para RadioBottonGroup
        $messagesTypeS = $business->listOperationTypeId(1);
        $messagesTypeS[] = array(_M('Indiferente', $module), '');

        //Field operation
        $operationLabelS = new MText('operationLabelS', _M('Operação', $module) . ':');
        $operationLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $operationS = $this->GetFormValue('operationS', $data->operationS);
        $operationS = new MRadioButtonGroup('operationS', '', $messagesTypeS, $this->operationS->value, null, 'horizontal');
        $operationS->SetShowLabel(false);
        $hctOperationS = new MHContainer('hctOperationS', array($operationLabelS, $operationS));
        $fields[] = $hctOperationS;
        
        parent::defineFields($fields, $module, 'GrdCounterMovementSearch');
    }

    public function btnSearch_click($sender)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $filters = new stdClass();
        $filters->openCounterId = $this->openCounterIdS->value;
        $filters->counterMovementId = $this->counterMovementIdS->value;
        $filters->value = $this->valueS->value;
        $filters->movementDate = $this->movementDateS->value;
        $filters->operation = $this->operationS->value;
        $filters->speciesId = $this->speciesIdS->value;
        
        $business = new BusinessFinanceBusCounterMovement();
        
        // Get total value movement
        $totalValue = $business->totalValueToGrid($filters);
        
        if ( strlen($totalValue) > 0 )
        {
            if ( strlen(strstr($totalValue, '-')) > 0 )
            {
                $color = 'red';
            }
            
            $totalCountMovementDiv[] = new MDiv('totalCountMovementDiv', array(new MLabel('<b>' . _M('Total', $module) . ':</b>'), new MLabel($totalValue . '&nbsp', $color)), '', 'align="right"');
            $this->addFields($totalCountMovementDiv);
        }
    }
}

?>
