<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Enroll fee form
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Joao Francisco Padilha Souza [joao@solis.com.br]
 *
 * @since
 * Class created on 04/01/2006
 */
/**
 * Form to manipulate a voucher messages
 */
class FrmEnrollFee extends SManagementForm
{
    // Tipos de alunos
    const TIPO_CALOURO = 1;
    const TIPO_VETERANO = 2;
    const TIPO_AMBOS = 3;

    /**
     * Class constructor
     */
    public function __construct()
    {
        parent::__construct(new FinEnrollFee(), array('learningPeriodId', 'operationId', 'isFreshMan'), 'BusEnrollFee');
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) && in_array($this->getFormValue('isFreshMan', MIOLO::_REQUEST('isFreshMan')), array(DB_TRUE, DB_FALSE) ))
        {
            $isFreshManOption = $this->getFormValue('isFreshMan', MIOLO::_REQUEST('isFreshMan'));

            $business = new BusinessFinanceBusEnrollFee();
            $pk = $this->getObjectPk();
            $oid = array($pk->learningPeriodId,
                         $pk->operationId,
                         $pk->isFreshMan);


            $data = $business->getEnrollFee($oid);
        }
        $fields['learningPeriodId'] = new SLearnigPeriodField('learningPeriodId', $this->getFormValue('learningPeriodId', $data->learningPeriodId), _M('Período letivo', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, null, true,true);
        $fields['learningPeriodId']->setReadOnly($function == Sform::FUNCTION_UPDATE ?true:false);
        $validators[] = new MRequiredValidator('learningPeriodId', _M('Período letivo', $module));

        
        // Field operation id
        $fields[] = new SHiddenfield('operationTypeIdOperation', 'D');
        $operationIdLabel = new MText('operationIdLabel', _M('Operação', $module).':');
        $operationIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $operationIdLabel->setClass('m-caption m-caption-required');
        $operationId = new MLookupTextField('operationId', $this->getFormValue('operationId',$data->operationId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'operationDescription', $module, 'Operation', null, array('operationTypeId' => 'operationTypeIdOperation'), true);
        if ( $function == SForm::FUNCTION_UPDATE )
        {
            $operationId->setReadOnly(true);
        }
        $operationId->setJsHint(_M('Informe o código da operação', $module));
        $validators[] = new MRequiredValidator('operationId', _M('Operação', $module));
        if ( $function == SForm::FUNCTION_INSERT )
        {
            $operationDescription = new MTextField('operationDescription', $this->getFormValue('operationDescription', $data->operationDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $operationDescription->setJsHint(_M('Descrição da operação', $module));
            $operationDescription->setReadOnly(true);
        }
        $fields[] = new MHContainer('hctOperation', array($operationIdLabel, $operationId, $operationDescription));
        
        // Field operation CALCEL
        $fields[] = new SHiddenfield('operationTypeIdCancel', 'C');
        $operacaoCancelamentoLabel = new MText('operacaoCancelamentoLabel', _M('Operação de cancelamento', $module).':');
        $operacaoCancelamentoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $operacaoCancelamentoLabel->setClass('m-caption m-caption-required');
        $operacaoCancelamento = new MLookupTextField('operacaoCancelamento', $this->getFormValue('operacaoCancelamento',$data->operacaoCancelamento), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'operacaoCancelamentoDescricao', $module, 'Operation', null, array('operationTypeId' => 'operationTypeIdCancel'), true);
        if ( $function == SForm::FUNCTION_UPDATE )
        {
            $operacaoCancelamento->setReadOnly(true);
        }
        $operacaoCancelamento->setJsHint(_M('Informe o código da operação',$module));
        $validators[] = new MRequiredValidator('operacaoCancelamento', _M('Operação de cancelamento', $module));
        if ( $function == SForm::FUNCTION_INSERT )
        {
            $operacaoCancelamentoDescricao = new MTextField('operacaoCancelamentoDescricao', $this->getFormValue('operacaoCancelamentoDescricao',$data->operacaoCancelamentoDescricao), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $operacaoCancelamentoDescricao->setReadOnly(true);
            $operacaoCancelamentoDescricao->setJsHint(_M('Descrição da operação', $module));
        }
        $fields[] = new MHContainer('hctCancelOperationS', array($operacaoCancelamentoLabel, $operacaoCancelamento, $operacaoCancelamentoDescricao));              

        // Field is fresh man
        $isFreshManOptions = array(
            array(_M('Calouro', $module), self::TIPO_CALOURO),
            array(_M('Veterano', $module), self::TIPO_VETERANO),
            array(_M('Ambos', $module), self::TIPO_AMBOS)
        );
        if ( $isFreshManOption <> self::TIPO_AMBOS )
        {
            $isFreshManOption = $data->isFreshMan == DB_TRUE ? self::TIPO_CALOURO : self::TIPO_VETERANO;
        }
        $isFreshManLabel = new MText('isFreshManLabel', _M('Aplicar a', $module).':');
        $isFreshManLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $isFreshManLabel->setClass('m-caption m-caption-required');
        $isFreshMan = new MRadioButtonGroup('isFreshMan', '', $isFreshManOptions, $isFreshManOption, '', 'horizontal');
        $isFreshMan->setShowLabel(false);
        $fields[] = new MHContainer('hctReportOption', array($isFreshManLabel, $isFreshMan));

        // Value is percent
        $valueIsPercentLabel = new MText('valueIsPercentLabel', _M('Valor é percentual', $module).':');
        $valueIsPercentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $valueIsPercentLabel->setClass('m-caption m-caption-required');
        $valueIsPercent = new MRadioButtonGroup('valueIsPercent', '', SAGU::listYesNo(1), $this->getFormValue('valueIsPercent', $data->valueIsPercent) ? $this->getFormValue('valueIsPercent', $data->valueIsPercent) : DB_TRUE, '', 'horizontal');
        $valueIsPercent->setShowLabel(false);
        $fields[] = new MHContainer('hctValueIsPercent', array($valueIsPercentLabel, $valueIsPercent));

        // Field value
        $value = new MTextField('value', SAGU::formatNumber($this->getFormValue('value', $data->value)), _M('Valor', $module), SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'), _M('Ex.: 1.00', $module));
        $value->setJsHint(_M('Informe o valor', $module));
        $validators[] = new MFloatValidator('value', _M('Valor', $module), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), 'required');
        $fields[] = $value;

        // Field parcels number
        $parcelsNumberLabel = new MText('parcelsNumberLabel', _M('Número de parcelas', $module).':');
        $parcelsNumberLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $parcelsNumberLabel->setClass('m-caption m-caption-required');
        $parcelsNumber = new MTextField('parcelsNumber', $this->getFormValue('parcelsNumber',$data->parcelsNumber), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $parcelsNumber->setJsHint(_M('Informe o número de parcelas', $module));
        $validators[] = new MRegExpValidator('parcelsNumber', _M('Número de parcelas', $module),  SAGU::getParameter('BASIC', 'POSSIBLE_PARCELS_NUMBER'), 'required');
        $fields[] = new MHContainer('hctParcelsNumber', array($parcelsNumberLabel, $parcelsNumber) );

        parent::defineFields($fields, $validators, $data);
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     */
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data = $this->getTypesData();
        $business = new BusinessFinanceBusEnrollFee();

        $option = $data->isFreshMan;
        // Gravará a taxa para calouros
        if ( $option == self::TIPO_CALOURO )
        {
            $check = DB_TRUE;
            $cont = 1;
        }
        // Gravará a taxa para veteranos
        elseif ( $option == self::TIPO_VETERANO )
        {
            $check = DB_FALSE;
            $cont = 1;
        }
        // Gravará duas taxas de matrícula (calouro E veterano)
        elseif ( $option == self::TIPO_AMBOS )
        {
            $check = DB_TRUE;
            $cont = 2;
        }

        // Grava a(s) taxa(s) de matrícula
        for ( $i = 0; $i < $cont; $i++ )
        {
            $data->isFreshMan = $check;

            if ( $function == SForm::FUNCTION_UPDATE )
            {
                if ( strlen($business->isExistEnrollFee($data)) > 0 )
                {
                    $ok = $business->updateEnrollFee($data);
                }
                else
                {
                    $ok = $business->insertEnrollFee($data);
                }

                $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED');
            }
            else
            {
                $ok = $business->insertEnrollFee($data);
                $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED');
            }

            if ( ($option == self::TIPO_AMBOS) && ($check == DB_TRUE) )
            {
                $check = DB_FALSE;
            }
        }

        parent::confirmInsertUpdate($ok);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     */
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $business = new BusinessFinanceBusEnrollFee();
        $ok = $business->deleteEnrollFee($data);

        if ( $ok )
        {
            $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_DELETED');
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Informação',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg = _M('Erro executando a operação solicitada.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     */
    public function getTypesData()
    {
        $data = new FinEnrollFee();
        $data->learningPeriodId = MIOLO::_REQUEST('learningPeriodId');
        $data->operationId = MIOLO::_REQUEST('operationId');
        $data->isFreshMan = MIOLO::_REQUEST('isFreshMan');
        $data->valueIsPercent = MIOLO::_REQUEST('valueIsPercent');
        $data->value = MIOLO::_REQUEST('value');
        $data->parcelsNumber = MIOLO::_REQUEST('parcelsNumber');
        $data->operacaoCancelamento = MIOLO::_REQUEST('operacaoCancelamento');
        

        return $data;
    }
}
?>
