<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Form to generate general counter movement report
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Cristian Edson Göhl [cristian@solis.coop.br]
 * Luís Felipe Wermann [luis_felipe@solis.com.br]
 *
 * @since
 * Class created on 11/05/2011
 */

class FrmGeneralCounterMovement extends SForm
{
    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        parent::__construct(_M('Relatório geral de caixas', $module), null, null);

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('event'=>'generateReport')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event = MIOLO::_request('event');

        //Begin date
        $beginDateLabel = new MText('beginDateLabel', _M('Data inicial da movimentação', $module) . ':');
        $beginDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $beginDateLabel->setClass('m-caption m-caption-required');
        $beginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $beginDate->setJsHint(_M('Informe a data inicial da movimentação.', $module));
        $fields[] = new MHContainer('hctBeginDate', array( $beginDateLabel, $beginDate ));
        $validators[] = new MRequiredValidator('beginDate', _M('Data inicial da movimentação', $module));
        //End date
        $endDateLabel = new MText('endDateLabel', _M('Data final da movimentação', $module) . ':');
        $endDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $endDateLabel->setClass('m-caption m-caption-required');
        $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $endDate->setJsHint(_M('Informe a data final da movimentação', $module));
        $fields[] = new MHContainer('hctEndDate', array( $endDateLabel, $endDate ));
        $validators[] = new MRequiredValidator('endDate', _M('Data final da movimentação', $module));

        //Field counter
        $counterIdLabel = new MText('counterIdLabel', _M('Caixa', $module) . ':');
        $counterIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $fields[] = new MHiddenField('onlyAvailable', false);
        $counterId = new MLookupTextField('counterId', $this->getFormValue('counterId', $data->counterId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'description', $module, 'Counter', null, array('onlyAvailable' => 'onlyAvailable'), true);
        $counterId->setReadOnly($readOnly);
        $counterId->setJsHint(_M('Informe o código do caixa', $module));
        $validators[] = new MIntegerValidator('counterId', _M('Caixa', $module));
        $description = new MTextField('description', $this->getFormValue('description', $data->counterDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $description->setReadOnly(true);
        $hctCounter = new MHContainer('hctCounter', array($counterIdLabel, $counterId, $description));
        $hctCounter->setShowLabel(true);
        $fields[] = $hctCounter;

        //Field operator
        $operatorIdLabel = new MText('operatorIdLabel', _M('Operador', $module) . ':');
        $operatorIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $operatorId = new MLookupTextField('operatorId', $this->getFormValue('operatorId', $data->operatorId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'operatorName', 'basic', 'PhysicalPersonEmployee', null, null, true);
        $operatorId->setJsHint(_M('Informe o código da operador', $module));
        $validators[] = new MIntegerValidator('operatorId', _M('Operador', $module));
        $operatorName = new MTextField('operatorName', $this->getFormValue('operatorName', $data->operatorName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $operatorName->setJsHint(_M('Nome do operador', $module));
        $operatorName->setReadOnly(true);
        $hctOperator = new MHContainer('hctOperator', array($operatorIdLabel, $operatorId, $operatorName));
        $hctOperator->setShowLabel(true);
        $fields[] = $hctOperator;

        //BusSpecies
        $business = new BusinessFinanceBusSpecies();
        //Specie field
        $speciesIdLabel = new MText('speciesIdLabel', _M('Espécie', $module) . ':');
        $speciesIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $speciesId = new MComboBox('speciesId', $this->GetFormValue('speciesId', $data->speciesId),'',$business->listSpecies());
        $fields[] = new MHContainer('hctSpecies', array($speciesIdLabel,$speciesId));

        //Field type operation
        $business = new BusinessFinanceBusOperation();
        //pega mensagem de débito ou crédito  | 0 para Selection e 1 para RadioBottonGroup
        $messagesType = $business->listOperationTypeId(1);
        $messagesType[] = array(_M('Indiferente', $module), '');

        $operationLabel = new MText('typeOperationLabel', _M('Tipo de operação', $module) . ':');
        $operationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $operation = $this->GetFormValue('typeOperation', $data->typeOperation);
        $operation = new MRadioButtonGroup('typeOperation', '', $messagesType, $this->typeOperation->value, null, 'horizontal');
        $operation->SetShowLabel(false);
        $hctOperation = new MHContainer('hctOperation', array($operationLabel, $operation));
        $fields[] = $hctOperation;
        
        $this->setFields($fields);
        $this->setValidators($validators);
        parent::defineFields();
    }


    public function generateReport()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        try
        {
            $businessCompany = new BusinessBasicBusCompany();
            $businessLegalPerson = new BusinessBasicBusLegalPerson();

            //Verifica a consistência da configuração da empresa
            if (SAGU::checkParameter( 'DEFAULT_COMPANY_CONF') )
            {
                $companyData = $businessCompany->getCompany( SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF') );

                if ( strlen($companyData->companyId) > 0 )
                {
                    $personData = $businessLegalPerson->getLegalPerson( $companyData->personId );
                }
            }
        }
        catch (Exception $e)
        {
            $MIOLO->error($e->getMessage(), MIOLO::_request('goto'));
        }

        //Parameters of the report
        if (strlen($personData->name) > 0)
        {
            $parameters['companyName'] = $personData->name;
        }
        if (strlen($personData->cnpj) > 0)
        {
            $parameters['cnpj'] = $personData->cnpj;
        }
        if (strlen($personData->stateRegistration) > 0)
        {
            $parameters['inscest'] = $personData->stateRegistration;
        }
        if (strlen(MIOLO::_REQUEST('counterId')) > 0)
        {
            $parameters['counterid'] = (int)MIOLO::_REQUEST('counterId');
        }
        if (strlen(MIOLO::_REQUEST('beginDate')) > 0)
        {
            $parameters['begindate'] = MIOLO::_REQUEST('beginDate');
        }
        if (strlen(MIOLO::_REQUEST('endDate')) > 0)
        {
            $parameters['enddate'] = MIOLO::_REQUEST('endDate');
        }
        if (strlen(MIOLO::_REQUEST('speciesId')) > 0)
        {
            $parameters['speciesid'] = (int)MIOLO::_REQUEST('speciesId');
        }
        if (strlen(MIOLO::_REQUEST('typeOperation')) > 0)
        {
            $parameters['operation'] = MIOLO::_REQUEST('typeOperation');
        }
        if (strlen(MIOLO::_REQUEST('operatorId')) > 0)
        {
            $parameters['operatorid'] = (int)MIOLO::_REQUEST('operatorId');
        }

        $report = new SReport();
        $report->setReportName('generalCounterMovement');
        $report->setParameters($parameters);
        //$report->generate();

        if ( !$report->generate() )
        {
            $goto    = SAGU::getStackBackUrl();
            $url  = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);

            SAGU::error(_M("Nenhuma informação encontrada", $module), $url);
        }
    }
}
?>