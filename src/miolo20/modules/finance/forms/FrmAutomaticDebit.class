<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Long term short term process form
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 07/12/2005
 *
 **/

/**
 * Form to control import return files for bank
 **/
class FrmAutomaticDebit extends SForm
{

    /**
     * Class constructor
     **/
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();
        parent::__construct( _M('Importar os arquivos de retorno do banco', $module), NULL, NULL );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO   = MIOLO::getInstance();
        $module  = MIOLO::getCurrentModule();
        $action  = MIOLO::getCurrentAction();

        $businessBank = new BusinessFinanceBusBank();
        $dataBank = $businessBank->listBank();

        $field = new MSelection('bankId', $this->getFormValue('bankId', $data->bankId), _M('Código do banco', $module), $dataBank);
        $fields[] = $field;
        $validators[] = new MRequiredValidator('bankId');

        $contractPersonId = new MLookupTextField( 'contractPersonId',
                                                  $this->getFormValue('contractPersonId', $data->contractPersonId),
                                                  _M('Código', $module),
                                                  SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'),
                                                  null,
                                                  null,
                                                  array('contractId',
                                                        'contractPersonId',
                                                        'contractPersonName',
                                                        'contractCourseId',
                                                        'contractCourseName',
                                                        'contractCourseVersion'),
                                                  'academic',
                                                  'PersonContract',
                                                  null,
                                                  array('personId' => 'contractPersonId'),
                                                  true
                                                );

        $contractPersonId->setJsHint(_M('Pessoa', $module));
        $fields[] = $contractPersonId;
        $validators[] = new RequiredValidator('contractPersonId');
        

        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName', $data->contractPersonName), _M('Nome da pessoa do contrato', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractPersonName->setReadOnly(true);
        $fields[] = $contractPersonName;

        $contractId = new MTextField('contractId', $this->getFormValue('contractId', $data->contractId), _M('Código do contrato', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractId->setReadOnly(true);
        $fields[] = $contractId;

        $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId', $data->contractCourseId), _M('Código do curso do contrato', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractCourseId->setReadOnly(true);
        $fields[] = $contractCourseId;

        $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName', $data->contractCourseName), _M('Nome do curso do contrato', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractCourseName->setReadOnly(true);
        $fields[] = $contractCourseName;
       
       $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion', $data->contractCourseVersion), _M('Versão do curso do contrato', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractCourseVersion->setReadOnly(true);
        $fields[] = $contractCourseVersion;     

        $branchNumberId = new MTextField('branchNumberId', $this->getFormValue('branchNumberId', $data->branchNumberId), _M('Código da agência', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $fields[] = $branchNumberId;
        $validators[] = new MRequiredValidator('branchNumberId');

        $fields[] = new MTextField('branchNumberDigit', $this->getFormValue('branchNumberDigit', $data->branchNumberDigit), _M('Dígito da agência', $module), 2);
        $validators[] = new MRequiredValidator('branchNumberDigit');
        
        $fields[] = new MTextField('accountNumber', $this->getFormValue('accountNumber', $data->accountNumber), _M('Número da conta', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $validators[] = new MRequiredValidator('accountNumber');

        $fields[] = new MTextField('accountDigit', $this->getFormValue('accountDigit', $data->accountDigit), _M('Dígito da conta', $module), 2);
        $validators[] = new MRequiredValidator('accountDigit');

        $fields[] = new Separator('');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }

    /**
     * Event triggered when user set new from the toolbar
     */
    public function submit_button_Click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $data   = $this->getTypesData();

        try
        {
            if ($_FILES["importReturnFile"]["error"] === 0)
            {
                $data->uploadFileName = $_FILES["importReturnFile"]["name"];
                $data->contentType    = $_FILES["importReturnFile"]["type"];
                $data->size           = $_FILES["importReturnFile"]["size"];
                $tempFile             = $_FILES["importReturnFile"]["tmp_name"];

                $businessFile = new BusinessBasicBusFile();
                $businessFile->insertFile($data, $tempFile);

                $args = array('event'=>'process_click',
                              'fileId'=>$dataFile->fileId,
                              'bankAccountId'=>$data->bankAccountId
                             );

                $goProcessUrl = $MIOLO->getActionURL($module, $action, '', $args);
                $MIOLO->Information(_M('Arquivo importado com sucesso. Por favor, clique no botão "OK" para continuar o processamento', $module), $goProcessUrl);
            }
            else
            {
                throw new Exception(_M('Alguns problemas ocorreram ao atualizar o arquivo. Por favor, tente novamente.', $module));
            }
        }
        catch ( Exception $e )
        {
            $MIOLO->information($e->getMessage());
        }
    }

    /**
     * Event triggered when user set new from the toolbar
     */
    public function process_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $data->bankAccountId = MIOLO::_request('bankAccountId');
        $data->fileId        = MIOLO::_request('fileId');
        
        $businessBankAccount = new BusinessFinanceBusBankAccount();
        $dataBankAccount     = $businessBankAccount->getBankAccount($data->bankAccountId);
        $MIOLO->getClass($module, 'AutomaticDebit');
        $data->bankId = $dataBankAccount->bankId;
        $importReturn = new AutomaticDebit($data);
    }
     
    /**
     * Get the data from form and returns as a object
     */
    public function getTypesData()
    {
        $data->bankAccountId = $this->getFormValue('bankAccountId');
        return $data;
    }
}
?>
