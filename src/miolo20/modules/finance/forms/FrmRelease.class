<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Release form
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br] 
 *
 * @since
 * Class created on 25/11/2010
 *
 **/

/**
 * Form to manipulate a Release
 **/
class FrmRelease extends SManagementForm
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new FinRelease(), array('releaseId'), 'BusRelease');
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $readonly = false;
        if ( in_array($function,array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $pk = $this->getObjectPk();
            $fields[] = new MTextLabel('releaseIdLabel', $pk->releaseId, _M('Código', $module));
            $fields[] = new MHiddenField('releaseId', $pk->releaseId);

            $data = $this->busObject->getRelease($pk->releaseId);
            $readonly = true;
        }

        if ($function == SForm::FUNCTION_INSERT)
        {
            //lookup para pessoas
            $fieldsPersonLabel = new MText('personLabel', _M('Pessoa', $module) . ':');
            $fieldsPersonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $fieldsPersonLabel->setClass('m-caption m-caption-required');
            $fieldsPerson = new MLookupTextField('personId', $data->personId, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'personName', 'basic', 'Person', null, null, true);            
            $fieldsPerson->setJsHint(_M('Informe o código da pessoa', $module));
            $fieldsPerson->setReadOnly($readonly);
            $fieldsPersonName = new MTextField('personName', $this->getFormValue('personName'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), '', null, $readonly);
            $fieldsPersonName->setJsHint(_M('Nome da pessoa', $module));
            $fieldsPersonName->setReadOnly(true);
            $htcFieldsPerson = new MHContainer('hctPerson', array($fieldsPersonLabel, $fieldsPerson, $fieldsPersonName));
            $htcFieldsPerson->setShowLabel(true);
            $fields[] = $htcFieldsPerson;
            $validators[] = new MIntegerValidator('personId', _M('Pessoa', $module), 'required');

            $fields[] = new MButton('listInvoices', _M('Listar títulos', $module), $this->getAjaxAction('loadInvoices', 'divInvoices', false));

            // Adiciona a grid de títulos
            $grid = $MIOLO->getUI()->getGrid($module, 'GrdRelease', $filters);
            $grid->setData($gridData);
            $fields[] = new MDiv('divInvoices', array($grid));
        }
        else
        {
            //Campo título
            $invoiceLabel = new MText('invoiceLabel', _M('Título', $module) . ':');
            $invoiceLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $invoiceField = new MTextField('invoiceId', $data->invoiceId, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), '', null, true);
            $invoiceField->setJsHint(_M('Título', $module));
            $htcInvoice = new MHContainer('hctInvoice', array($invoiceLabel, $invoiceField));
            $htcInvoice->setShowLabel(true);
            $fields[] = $htcInvoice;

            //Campo pessoa
            $personLabel = new MText('personLabel', _M('Pessoa', $module) . ':');
            $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $personIdField = new MTextField('personId', $data->personId, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), '', null, true);
            $personIdField->setJsHint(_M('Pessoa', $module));
            $personNameField = new MTextField('personName', $data->personName, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), '', null, true);
            $personNameField->setJsHint(_M('Nome da pessoa', $module));
            $htcPerson = new MHContainer('hctPerson', array($personLabel, $personIdField, $personNameField));
            $htcPerson->setShowLabel(true);
            $fields[] = $htcPerson;
        }
        
        //Liberar juros e multas
        $releaseInterestLabel = new MText('releaseInterestLabel', _M('Liberar juros e multas', $module));
        $releaseInterestLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $releaseInterest = new MRadioButtonGroup('releaseInterest', '',  SAGU::listYesNo(1), $this->getFormValue('releaseInterest', $data->releaseInterest) ? $this->getFormValue('releaseInterest', $data->releaseInterest) : DB_FALSE, null, 'horizontal');
        $releaseInterest->setShowLabel(false);
        $fields[] = new MHcontainer('hctreleaseInterest', array($releaseInterestLabel, $releaseInterest));

        //Conceder Convênio
        $applyConvenantLabel = new MText('applyConvenantLabel', _M('Aplicar convênio', $module));
        $applyConvenantLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $isPercent = new MRadioButtonGroup('applyConvenant', '',  SAGU::listYesNo(1), $this->getFormValue('applyConvenant', $data->applyConvenant) ? $this->getFormValue('applyConvenant', $data->applyConvenant) : DB_FALSE, null, 'horizontal');
        $isPercent->setShowLabel(false);
        $fields[] = new MHcontainer('hctIsPercent', array($applyConvenantLabel, $isPercent));

        //Valor
        $discountValueLabel = new MText('valueLabel', _M('Valor', $module));
        $discountValueLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        
        $discountValue      = new MTextField('discountValue', $this->getFormValue('discountValue', $data->discountValue));
        $discountValue->showLabel = DB_FALSE;
        
        $hctDiscountValue   = new MHContainer('hctDiscountValue', array( $discountValueLabel, $discountValue ));
        $flds[] = $hctDiscountValue;
        
        $validators[] = new MFloatValidator('discountValue', _M('Valor', $module), '.', 2, 'optional');

        //Is Percentual
        $isPercentLabel = new MText('isPercentLabel', _M('É percentual', $module).':');
        $isPercentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $isPercentLabel->setClass('m-caption m-caption-required');
        $isPercent = new MRadioButtonGroup('isPercent', '',  SAGU::listYesNo(1), $this->getFormValue('isPercent', $data->isPercent) ? $this->getFormValue('isPercent', $data->isPercent) : DB_TRUE, null, 'horizontal');
        $isPercent->setShowLabel(false);
        $flds[] = new MHcontainer('hctIsPercent', array($isPercentLabel, $isPercent));

        //lookup para operação
        $operationLabel = new MText('operationLabel', _M('Operação', $module) . ':');
        $operationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        
        $operation = new MLookupTextField('operationId', $data->operationId, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'operationDescription', 'finance', 'Operation', null, null, true);
        $operation->setJsHint(_M('Informe o código da operação', $module));

        $operationDescription = new MTextField('operationDescription', $this->getFormValue('operationDescription'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $operationDescription->setJsHint(_M('Descrição da operação', $module));
        $operationDescription->setReadOnly(true);

        $htcOperation = new MHContainer('hctOperation', array($operationLabel, $operation, $operationDescription));
        $htcOperation->setShowLabel(true);
        $flds[] = $htcOperation;
        $validators[] = new MIntegerValidator('operationId', _M('Operação', $module), 'optional');

        $fields[] = new MBaseGroup('baseDiscount', _M('Conceder desconto', $module), $flds, 'vertical');

        //data inicial
        $beginDate = new MCalendarField('beginDate', $data->beginDate, _M('Data inicial',$module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $beginDate->validator = new MRequiredValidator('beginDate', 'Data inicial');
        $fields[] = $beginDate;
        $validators[]   = new DateDMYValidator('beginDate', _M('Data inicial', $module), 'required');
        
        //data final
        $endDate = new MCalendarField('endDate', $data->endDate, _M('Data final',$module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $endDate->validator = new MRequiredValidator('endDate', 'Data final');
        $fields[] = $endDate;
        $validators[]   = new DateDMYValidator('endDate', _M('Data final', $module), 'required');

        parent::defineFields($fields, $validators, $data);
    }

    /**
     * Método para obter os Títulos da pessoa selecionada no lookup
     */
    
    public function loadInvoices($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        if (!$args->personId)
        {
            $this->AddError(_M('Selecione uma pessoa', $module));
        }
        else
        {
            $business = new BusinessFinanceBusRelease();
            $dataGrid = $business->searchReceivableInvoiceForRelease($args->personId);
            $grid = $MIOLO->getUI()->getGrid($module, 'GrdRelease', $filters);
            $grid->setData($dataGrid);
            $fields[] = $grid;
        }
        
        return $fields;
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    
    public function tbBtnSave_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $function = MIOLO::_REQUEST('function');

        $data = $this->getTypesData();

        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_INSERT)) )
        {
            $business = new BusinessFinanceBusRelease();
            $return = DB_FALSE;
            if ($function == SForm::FUNCTION_INSERT)
            {
                $invoices = $_REQUEST['selectGrdRelease'];
                if(is_array($invoices))
                {
                    foreach($invoices as $invoice)
                    {
                        $data->invoiceId = $invoice;
                        $business->insertRelease($data);
                        $return = DB_TRUE;
                    }
                    parent::confirmInsertUpdate(true);
                }
                else
                {
                    $this->addError(_M('Selecione os títulos', $module));
                    $return = DB_FALSE;
                }
            }
            else //update
            {
                $business->updateRelease($data);
                parent::confirmInsertUpdate(true);
            }
            
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/

    public function getTypesData()
    {
        $data = new FinRelease();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }
        }

        $data->beginDate = $this->getFormValue('beginDate');
        $data->endDate = $this->getFormValue('endDate');

        return $data;
    }

    
}
?>
