<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Close invoice form
 *
 * @author Samuel Koch [samuel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Samuel Koch [samuel@solis.coop.br]
 *
 * @since
 * Class created on 27/08/2009
 *
 **/

/**
 * Form to manipulate a bank account
 **/
class FrmVoucherTax extends SForm
{
    /**
     * Variable instance class that manipulates date.
     */
    private $krono;
    private $home;

    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $module     = MIOLO::getCurrentModule();

        $this->home = $data->home;
        $this->krono = new MKrono( );

        parent::__construct( _M('Comprovante fiscal', $module), null, null );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        //Field invoice
        $invoiceLabel = new MText('invoiceLabel', _M('Título', $module).':');
        $invoiceLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $invoiceLabel->setClass('m-caption m-caption-required');
        $invoiceId = new MLookupTextField('invoiceId', $this->getFormValue('invoiceId', $data->invoiceId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'personId , personName', $module, 'Invoice', null, null, true);
        $invoiceId->setJsHint(_M('Informe o código do título', $module));
        $validators[] = new MIntegerValidator('invoiceId', _M('Título', $module), 'optional');
        $personName = new MTextField('personName', $this->getFormValue('personName', $data->personName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setJsHint(_M('Nome da pessoa', $module));
        $personName->setReadOnly(true);
        $hctInvoice = new MHContainer('hctInvoice', array( $invoiceLabel, $invoiceId, $personName ) );
        $hctInvoice->setShowLabel(true);
        $fields[] = $hctInvoice;

        $fields[] = new MHiddenField('personId', $this->getFormValue('personId', $data->personId));
        $fields[] = new MSeparator('');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('function' => 'print', 'event' => 'tbBtnPrint_click')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    /**
     * Event triggered when the button print invoice is clicked
     */
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $filters->invoiceId = MIOLO::_request('invoiceId');
        $filters->personId = MIOLO::_request('personId');

        $businessCompany = new BusinessBasicBusCompany();
        $businessLegalPerson = new BusinessBasicBusLegalPerson();
        $businessPerson = new BusinessBasicBusPerson();
        $businessDocument = new BusinessBasicBusDocument();
        $businessConfig = new BusinessBasicBusConfig();
        $businessEntry = new BusinessFinanceBusEntry();
        $businessInvoice = new BusinessFinanceBusInvoice();
        $businessDefaultOperations = new BusinessFinanceBusDefaultOperations();

        if ( SAGU::checkParameter( 'DEFAULT_COMPANY_CONF') )
        {
            $companyData = $businessCompany->getCompany( SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF') );

            if (is_null( $companyData->companyId ))
            {
                $MIOLO->error(_M('Parâmetro DEFAULT_COMPANY_CONF aponta para a empresa inexistente @1.', $module, SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF') ) );
            }
        } else
        {
            $MIOLO->error( _M('Problemas ao procurar as informações da instituição, por favor, verifique o cadastro da instituição' ) );
        }

        $personData = $businessLegalPerson->getLegalPerson( $companyData->personId );

        $tags = array
        (
            '$COMPANYNAME'   => $personData->name,
            '$LOCATION1'     => $personData->locationType . $personData->location . ', '. $personData->number,
            '$NEIGHBORHOOD1' => $personData->neighborhood,
            '$CITY1'         => $personData->cityName . '-' . $personData->stateId,
            '$ZIPCODE1'      => $personData->zipCode,
            '$PHONE1'        => $personData->phone,
            '$CNPJ1'         => $personData->cnpj,
            '$IE1'           => $personData->stateRegistration
        );

        //Function that returno default operation
        $dataDefaultOperations = $businessDefaultOperations->getDefaultOperations();

        //Procura os valores da mensalidade
        $filters->operationId = $dataDefaultOperations->addCurricularComponentOperation;
        $entryData = $businessEntry->searchEntry($filters);

        $tags1 = array();
        if ( is_array($entryData) )
        {
            foreach ( $entryData AS $value )
            {
                $value[3] = SAGU::truncarString(29, $value[3]);
                $tags1 = array(
                    '$O01' => $value[2],
                    '$D01' => $value[3],
                    '$V01' => $value[5]
                );
            }
        }

        //Procura o valor com juros e multa
        $filters->operationId = $dataDefaultOperations->interestOperation;
        $entryData = $businessEntry->searchEntry($filters);

        if ( is_array($entryData) )
        {
            foreach ( $entryData AS $value )
            {
                $value[3] = SAGU::truncarString(29, $value[3]);
                $tags2 = array(
                    '$O02' => $value[2],
                    '$D02' => $value[3],
                    '$V02' => $value[5]
                );
            }
        }
        else
        {
            //Procura o valor Desconto
            $filters->operationId = $dataDefaultOperations->discountOperation;
            $entryData = $businessEntry->searchEntry($filters);

            if ( is_array($entryData) )
            {
                foreach ( $entryData AS $value )
                {
                    $value[3] = SAGU::truncarString(29, $value[3]);
                    $tags2 = array(
                        '$O02' => $value[2],
                        '$D02' => $value[3],
                        '$V02' => $value[5]
                    );
                }
            }
            else
            {
                $tags2 = array(
                        '$O02' => ' ',
                        '$D02' => ' ',
                        '$V02' => ' '
                    );
            }
        }

        //Procura o valor pagamento
        $filters->operationId = $dataDefaultOperations->paymentOperation;
        $entryData = $businessEntry->searchEntry($filters);

        if ( is_array($entryData) )
        {
            foreach ( $entryData AS $value )
            {
                $value[3] = SAGU::truncarString(29, $value[3]);
                $tags3 = array(
                    '$O03' => $value[2],
                    '$D03' => $value[3],
                    '$V03' => $value[5]
                );
            }
        }

        if ( $businessPerson->isPersonLegal($filters->personId) )
        {
            $personData = $businessLegalPerson->getLegalPerson( $filters->personId );
            $personData->document = $personData->cnpj;
        }
        else
        {
            $personData = $businessPerson->getPerson($filters->personId);
            $personDocument = $businessDocument->getDocument( $filters->personId, SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_RG'));
            $personData->document = $personDocument->content;
        }

        $tags4 = array
        (
            '$PERSONNAME'    => $personData->name,
            '$LOCATION2'     => $personData->locationType . $personData->location . ', '. $personData->number,
            '$NEIGHBORHOOD2' => $personData->neighborhood,
            '$CITY2'         => $personData->cityName . '-' . $personData->stateId,
            '$ZIPCODE2'      => $personData->zipCode,
            '$PHONE2'        => $personData->phone,
            '$CNPJRG'        => $personData->document
        );

        $tag5 = array
        (
            '$DATE'    => $this->krono->kDate("d/m/Y"),
            '$INVOICE' => $filters->invoiceId
        );

        $tags = array_merge($tags, $tags1, $tags2, $tags3, $tags4, $tag5);

        $parameter = $businessConfig->getConfig('BASIC', 'PRINT_RECEIPT');
        $contenReceipt = SAGU::interpretsReceipt($parameter->value, $tags);

        SAGU::printFiscalData($contenReceipt);

        $vars = array('personId'=>$filters->personId);
//        $this->page->redirect($MIOLO->getActionURL('finance', 'main', null, $vars));

    }

    public function start($socket)
    {
        if(!$socket->starting())
        {
            $socket->displayMsg("--LINE--");
            $socket->displayMsg("\nClient Connect Error:". $socket->getError() ."");
            $socket->displayMsg("--LINE--");
            die();
        }
    }
}

?>
