<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Counter form
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 03/01/2006
 *
 **/

/**
 * Form to manipulate a voucher messages
 **/
class FrmCounter extends SManagementForm
{

    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new FinCounter(), array('counterId'), 'BusCounter');
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $pk = $this->getObjectPk();
            $counterId = $pk->counterId;
            $fields[] = new MTextLabel('counterIdField', $this->getFormValue('counterId', $counterId), _M('Caixa', $module));
            $fields[] = new MHiddenField('counterId', $this->getFormValue('counterId', $counterId));
            $data = $this->busObject->getCounter($counterId);
        }
        else
        {
            $fields[] = new MHiddenField('counterId', $this->getFormValue('counterId', $data->counterId));
        }
        
        //Field description
        $descriptrionLabel = new MText('descriptionLabel', _M('Descrição', $module) . ':');
        $descriptrionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $description = new MTextField('description', $this->getFormValue('description', $data->description), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $hctDescription = new MHContainer('hctdescription', array($descriptrionLabel, $description));
        $hctDescription->setShowLabel(true);
        $fields[] = $hctDescription;
        
        //Field unit
        $unitsLabel = new MText('unitsLabel', _M('Unidade', $module) . ':');
        $unitsLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $unitsLabel->setClass('m-caption m-caption-required');
        $business = new BusinessBasicBusUnit();
        $unitId = new MComboBox('unitId', $this->getFormValue('unitId', $data->unitId), '', $business->listUnit(), false, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $unitId->setJsHint(_M('Escolha a unidade', $module));
        $validators[] = new MIntegerValidator('unitId', _M('Unidade', $module), 'required');
        $hctUnit = new MHContainer('hctUnit', array($unitsLabel, $unitId));
        $hctUnit->setShowLabel(true);
        $fields[] = $hctUnit;
        
        $fields[] = new SHiddenField('isChildren', DB_TRUE);
        
        // Plano de contas
        $fields[] = new SLookupContainer('accountSchemeId', $this->getFormValue('accountSchemeId', $data->accountSchemeId), array(
            'module' => 'accountancy',
            'item' => 'AccountScheme',
            'label' => _M('Plano de contas', $module),
            'filter' => array('isChildren' => 'isChildren'),
        ));
        
        //Field is active
        $isActiveLabel = new MText('isActiveLabel', _M('Está ativo', $module) . ':');
        $isActiveLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $isActiveLabel->setClass('m-caption m-caption-required');
        $isActive = new MRadioButtonGroup('isActive', '', SAGU::listYesNo(1), $this->getFormValue('isActive', $data->isActive) ? $this->getFormValue('isActive', $data->isActive) : DB_TRUE, null, 'horizontal');
        $isActive->setShowLabel(false);
        $hctIsActive = new MHContainer('hctLabel', array($isActiveLabel, $isActive));
        $fields[] = $hctIsActive;
        
        //Field isCounterTreasury
        $isCounterTreasuryLabel = new MText('isCounterTreasuryLabel', _M('É caixa da tesouraria', $module) . ':');
        $isCounterTreasuryLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $isCounterTreasuryLabel->setClass('m-caption m-caption-required');
        $isCounterTreasury = new MRadioButtonGroup('isCounterTreasury', '', SAGU::listYesNo(1), $this->getFormValue('isCounterTreasury', $data->isCounterTreasury) ? $this->getFormValue('isCounterTreasury', $data->isCounterTreasury) : DB_FALSE, null, 'horizontal');
        $isCounterTreasury->setShowLabel(false);
        $hctIsCounterTreasury = new MHContainer('hctIsCounterTreasury', array($isCounterTreasuryLabel, $isCounterTreasury));
        $fields[] = $hctIsCounterTreasury;
        
        parent::defineFields($fields, $validators, $data);
    }
    
    /**
     * Sobrescrito método save para validar se o plano de contas é filho
     * 
     * @param type $sender
     * @return boolean
     */
    public function tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        
        $data = $this->getTypesData();
        
        if ( strlen($data->accountSchemeId) > 0 ) 
        {
            if ( BusinessAccountancyBusAccountScheme::verificaPlanoDeContasEFilho($data->accountSchemeId) == DB_FALSE )
            {
                $msg = _M('Apenas plano de contas filho pode ser registrado. Utilize o campo de busca de plano de contas, para verificar os planos de contas disponíveis.');
                $this->AddError($msg);
                
                return false;
            }
        }
        
        parent::tbBtnSave_click($sender);
    }
}
?>
