<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finPhysicalTargettable
 *
 * @author Rudi Uhrig Neto [rudi@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * 
 * @since
 * Class created on 12/01/2006
 *
 **/

/**
 * Form to search the finPhysicalTarget table
 */
class FrmPhysicalTargetSearch extends SSearchForm
{

    /**
     * Class constructor
     */
    public function __construct($data)
    {
        parent::__construct(_M('Localizar',$module), new FinPhysicalTarget(), 'contractId', 'BusPhysicalTarget');
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        //personId
        $personLabelS = new MText('personLabelS', _M('Pessoa',$module).':');
        $personLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personIdS = new MLookupTextField('personIdS', $this->getFormValue('personIdS', $this->enrollData->personIdS), NULL, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractIdS', 'personIdS', 'personNameS', 'courseIdS', 'courseNameS', 'courseVersionS'), 'academic', 'PersonContract', null, array('personId' => 'personIdS'), true);
        $personIdS->setJsHint(_M('Informe o código da pessoa',$module));
        $validators[] =  new MIntegerValidator('personIdS', _M('Pessoa',$module));
        $this->page->onLoad('document.' . $this->name . '.personIdS.focus();');
        $personNameS   = new MTextField('personNameS', $this->personNameS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personNameS->setReadOnly(true);
        $personNameS->setJsHint(_M('Nome da pessoa',$module));
        $hctPersonS = new MHContainer('hctPersonS', array($personLabelS, $personIdS, $personNameS));
        $hctPersonS->setShowLabel(true);
        $fields[]  = $hctPersonS;

        //Field contract
        $courseLabelS = new MText('courseLabelS', _M('Contrato', $module).':');
        $courseLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractIdS = new MLookupTextField('contractIdS', $this->personIdS->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, array('personIdS', 'personNameS', 'courseIdS', 'courseNameS', 'courseVersionS'), 'academic', 'Contract', null, array('personId' => 'personIdS'), true);
        $contractIdS->setJsHint(_M('Informe o código do contrato',$module));
        $validators[] =  new MIntegerValidator('contractIdS');
        $courseIdS = new MTextField('courseIdS', $this->getFormValue('courseIdS',$this->enrollData->courseIdS), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $courseIdS->setReadOnly(true);
        $courseIdS->setJsHint(_M('Código do curso', $module));
        $courseVersionS   = new MTextField('courseVersionS', $this->courseVersionS->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $courseVersionS->setReadOnly(true);
        $courseVersionS->setJsHint(_M('Versão do curso', $module));
        $courseNameS   = new MTextField('courseNameS', $this->courseNameS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $courseNameS->setReadOnly(true);
        $courseNameS->setJsHint(_M('Nome do curso', $module));
        $hctCourseS = new MHContainer('hctCourseS', array($courseLabelS, $contractIdS, $courseIdS, $courseVersionS, $courseNameS));
        $hctCourseS->setShowLabel(true);
        $fields[]  = $hctCourseS;

        // City
        $cityLabelS = new MText('cityLabelS', _M('Cidade', $module).':');
        $cityLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $cityIdS = new MLookupTextField('cityIdS', $this->cityIdS->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'cityNameS, stateIdS, stateNameS, countryIdS, countryNameS, zipCodeS', 'basic', 'City', null, null, true);
        $validators[] =  new MIntegerValidator('cityIdS');
        $cityIdS->setJsHint(_M('Informe o código da cidade', $module));
        $cityNameS = new MTextField('cityNameS', $this->cityNameS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $cityNameS->setJsHint(_M('Nome da cidade', $module));
        $cityNameS->setReadOnly(true);
        $hctCity = new MHContainer('hctCity', array($cityLabelS, $cityIdS, $cityNameS));
        $hctCity->setShowLabel(true);
        $fields[] = $hctCity;

        $locationS = new MTextField('locationS', $this->locationS->value, _M('Logradouro',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $locationS->setJsHint(_M('Informe o nome do local',$module));
        $fields[] = $locationS;

        $neighborhoodS = new MTextField('neighborhoodS', $this->neighborhoodS->value, _M('Bairro',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $neighborhoodS->setJsHint(_M('Informe o bairro',$module));
        $fields[] = $neighborhoodS;

        $nameS = new MTextField('nameS', $this->nameS->value, _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $nameS->setJsHint(_M('Informe o nome', $module));
        $fields[] = $nameS;

        parent::defineFields($fields, $module, 'GrdPhysicalTargetSearch');
    }
}
?>
