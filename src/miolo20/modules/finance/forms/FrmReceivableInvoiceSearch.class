<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finReceivableInvoice table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 13/12/2005
 *
 **/
$MIOLO  = MIOLO::getInstance();
$MIOLO->uses('forms/FrmInvoiceSearch.class', 'finance');
/**
 * Form to search the finInvoice table
 */
class FrmReceivableInvoiceSearch extends FrmInvoiceSearch
{

    /**
     * Class constructor
     */
    public function __construct()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $this->module = $module;

        parent::__construct();
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = $this->module;
        
        $sendDateS = new MCalendarField('sendDateS', $this->sendDateS->value, _M('Data de envio',$module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $sendDateS->setJsHint(_M('Informe a data de envio',$module));
        $fields[] = $sendDateS;
        $validators[] = new MDATEDMYValidator('sendDateS', '', 'optional');
        
        $returnDateS = new MCalendarField('returnDateS', $this->returnDateS->value, _M('Data de retorno',$module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $returnDateS->setJsHint(_M('Informe a data de retorno',$module));
        $fields[] = $returnDateS;
        $validators[] = new MDATEDMYValidator('returnDateS', '', 'optional');
        
        $returnFileLabelS = new MText('returnFileLabelS', _M('Arquivo de retorno',$module).':');
        $returnFileLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $returnFileIdS = new MLookupTextField('returnFileIdS', $this->returnFileIdS->value, null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'fileNameS', 'basic', 'File', null, null, true);
        $returnFileIdS->setJsHint(_M('Informe o código do arquivo de retorno', $module));
        $validators[]   = new MIntegerValidator('returnFileIdS', _M('Arquivo de retorno',$module));
        $fileNameS = new MTextField('fileNameS', $this->fileNameS->value, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $fileNameS->setReadOnly(true);
        $fileNameS->setJsHint(_M('Nome do arquivo', $module));
        $hctFileNameS = new MHContainer('hctFileNameS', array($returnFileLabelS, $returnFileIdS, $fileNameS));
        $hctFileNameS->setShowLabel(true);
        $fields[]   = $hctFileNameS;   
        
        // Cancelado
        $messagesTypeS =  SAGU::listTrueFalse(1);
        $statusLabel = new MText('statusLabel', _M('Cancelado',$module).':');
        $statusLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $status = new MRadioButtonGroup('isCanceled', '', $messagesTypeS, $status, null, 'horizontal');
        $status->SetShowLabel(false);
        $hctStatus = new MHContainer('hctStatus', array($statusLabel, $status));
        $fields[] = $hctStatus;
        
        $fields[] = new MButton('btnSearch', _M('Localizar', $module));
        
        parent::defineFields($fields, $validators);
        
        $this->filters->isCanceled = MIOLO::_REQUEST('isCanceled');
        
             $grdResults = $MIOLO->getUI()->getGrid($module,'GrdReceivableInvoiceSearch', $this->filters);
             $business = new BusinessFinanceBusReceivableInvoice();
             $grdResults->setQuery($business->searchReceivableInvoiceSql($this->filters), $module);
             $this->addField($grdResults);
             $grdResults->setTableName('finreceivableinvoice');
        }    

}

?>
