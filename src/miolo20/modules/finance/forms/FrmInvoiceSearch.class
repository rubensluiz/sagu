<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finInvoice table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Jona Gualberto Diel [jonas_diel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 13/12/2005
 *
 **/

/**
 * Form to search the finInvoice table
 */
class FrmInvoiceSearch extends SForm
{
    public  $module;
    public  $filters;
    
    public function __construct()
    {   
        parent::__construct(null, null, null);
        
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }

    /**
     *  Default method to define fields
     */
    public function defineFields($fields, $validators)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $parameterFields = $fields;
        unset($fields);
        
        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;
       
        // Invoice id 
        $invoiceIdS   = new MTextField('invoiceIdS', $this->invoiceIdS->value, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $validators[] = new MIntegerValidator('invoiceIdS');  
        $invoiceIdS->setJsHint(_M('Informe o código do título', $module));
        $fields[]     = $invoiceIdS;

        //Field person
        $personLabelS = new MText('personLabelS', _M('Pessoa',$module).':');
        $personLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));        
        $personIdS    = new MLookupTextField('personIdS', $this->personIdS->value, null,SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'personNameS', 'basic', 'Person', null, null, true); 
        $validators[] = new MIntegerValidator('personIdS', _M('Pessoa',$module));
        $personIdS->setJsHint(_M('Informe o código da pessoa', $module));
        $personNameS  = new MTextField('personNameS', $this->personNameS->value, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personNameS->setReadOnly(true);
        $personNameS->setJsHint(_M('Nome da pessoa', $module));
        $hctPersonS   = new MHContainer('hctPersonS', array($personLabelS, $personIdS, $personNameS));
        $hctPersonS->setShowLabel(true);
        $fields[]     = $hctPersonS;
                
        //Filed cost center
        $costCenterLabelS = new MText('costCenterLabelS', _M('Centro de custo',$module).':');
        $costCenterLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $costCenterIdS = new MLookupTextField('costCenterIdS', $this->costCenterIdS->value, null,SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'costCenterDescriptionS', 'accountancy', 'CostCenter', null, null, true);
        $costCenterIdS->setJsHint(_M('Informe o código do centro de custos', $module));
        $validators[] = new MRegExpValidator('costCenterIdS', _M('Centro de custo', $module), '^[0-9]+(\.[0-9]+)*$');
        $costCenterDescriptionS = new MTextField('costCenterDescriptionS', $this->costCenterDescriptionS->value, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $costCenterDescriptionS->setReadOnly(true);
        $costCenterDescriptionS->setJsHint(_M('Descrição do centro de custo', $module));
        $hctCostCenterS = new MHContainer('hctCostCenterS', array($costCenterLabelS, $costCenterIdS, $costCenterDescriptionS));
        $hctCostCenterS->setShowLabel(true);
        $fields[] = $hctCostCenterS;        

        //Field emission type
        $emissionTypeLabel = new MText('emissionTypeLabel', _M('Tipo de emissão', $module).':');
        $emissionTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $busEmissionType = new BusinessFinanceBusEmissionType();
        $emissionTypeId = new MSelection('emissionTypeIdS', $this->getFormValue('emissionTypeIdS',$data->emissionTypeId), '', $busEmissionType->listEmissionType());
        $emissionTypeId->setJsHint( _M('Selecione o tipo de emissão', $module) );
        $hctEmissionType = new MHContainer('hctEmissionTypeS', array($emissionTypeLabel, $emissionTypeId));
        $hctEmissionType->setShowLabel(true);
        $fields[]   = $hctEmissionType;
        
        // Parcel number
        $parcelNumberS = new MTextField('parcelNumberS', $this->parcelNumberS->value, _M('Número da parcela',$module),SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $parcelNumberS->setJsHint(_M('Informe o número de parcelas', $module));
        $fields[]      = $parcelNumberS;
        $validators[] = new MIntegerValidator('parcelNumberS', _M('Número da parcela',$module));
        
        // Emission date
        $emissionDateS = new MCalendarField('emissionDateS', $this->emissionDateS->value, _M('Data de emissão',$module),SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $emissionDateS->setJsHint(_M('Informe a data de emissão',$module));
        $fields[]      = $emissionDateS;
        $validators[]  = new MDATEDMYValidator('emissionDateS', '', 'optional');

        // Maturity date
        $maturityDateS = new MCalendarField('maturityDateS', $this->maturityDateS->value, _M('Data de vencimento',$module),SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $maturityDateS->setJsHint(_M('Informe a data de vencimento',$module));
        $fields[]      = $maturityDateS;
        $validators[]  = new MDATEDMYValidator('maturityDateS', '', 'optional');

        // Value
        $valueS       = new MTextField('valueS', $this->getFormValue('valueS', $data->valueS), _M('Valor', $module), SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'), _M('Ex.: 1.00', $module));
        $valueS->setJsHint(_M('Informe o valor',$module));
        $validators[] = new MFloatValidator('valueS', _M('Valor', $module), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'));
        $fields[]     = $valueS;
        
        // Policy id
        $policyLabelS = new MText('policyLabelS', _M('Política',$module).':');
        $policyLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $policyIdS = new MLookupTextField('policyIdS', $this->policyIdS->value, null,SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'policyDescriptionS', 'finance', 'Policy', null, null, true);
        $policyIdS->setJsHint(_M('Informe o código da política', $module));
        $validators[] = new MIntegerValidator('policyIdS', _M('Política',$module));
        $policyDescriptionS = new MTextField('policyDescriptionS', $this->policyDescriptionS->value, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $policyDescriptionS->setReadOnly(true);
        $policyDescriptionS->setJsHint(_M('Descrição da política', $module));
        $hctPolicyS = new MHContainer('hctPolicyS', array($policyLabelS,$policyIdS,$policyDescriptionS));
        $hctPolicyS->setShowLabel(true);
        $fields[] = $hctPolicyS;         
        
        // Bank invoice id
        $bankInvoiceIdS = new MTextField('bankInvoiceIdS', $this->bankInvoiceIdS->value, _M('Código bancário do título', $module),SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $bankInvoiceIdS->setJsHint(_M('Informe o código do título bancário',$module));
        $fields[] = $bankInvoiceIdS;
       
        // Automatic debit
        $messagesTypeS =  SAGU::listTrueFalse(1);
        $automaticDebitLabelS = new MText('automaticDebitLabelS', _M('Débito automático',$module).':');
        $automaticDebitLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $automaticDebitS = new MRadioButtonGroup('automaticDebitS', '', $messagesTypeS, $automaticDebitS, null, 'horizontal');
        $automaticDebitS->SetShowLabel(false);
        $hctAutomaticDebitS = new MHContainer('hctCloseInvoiceS', array($automaticDebitLabelS, $automaticDebitS));
        $fields[] = $hctAutomaticDebitS;
 
        // Income source
        $incomeSourceLabelS       = new MText('incomeSourceLabelS', _M('Origem',$module).':');
        $incomeSourceLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $incomeSourceIdS          = new MLookupTextField('incomeSourceIdS', $this->incomeSourceIdS->value, null,SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'incomeSourceDescriptionS', 'finance', 'IncomeSource', null, null, true);
        $incomeSourceIdS->setJsHint(_M('Informe o código da origem', $module));
        $validators[]             = new MIntegerValidator('incomeSourceIdS', _M('Origem',$module));
        $incomeSourceDescriptionS = new MTextField('incomeSourceDescriptionS', $this->incomeSourceDescriptionS->value, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $incomeSourceDescriptionS->setReadOnly(true);
        $incomeSourceDescriptionS->setJsHint(_M('Descrição da origem', $module));
        $hctIncomeSourceS         = new MHContainer('hctIncomeSourceS', array($incomeSourceLabelS, $incomeSourceIdS, $incomeSourceDescriptionS));
        $hctIncomeSourceS->setShowLabel(true);
        $fields[]                 = $hctIncomeSourceS;        
       
        //Field bank account
        $businessBankAccount = new BusinessFinanceBusBankAccount();
        $bankAccountLabelS = new MText('bankAccountLabelS', _M('Conta bancária', $module).':');
        $bankAccountLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $bankAccountIdS = new MComboBox('bankAccountIdS', $this->bankAccountIdS->value, '', $businessBankAccount->listBankAccount(), '', '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $bankAccountIdS->setJsHint(_M('Selecione uma conta bancária', $module));
        $validators[] = new MIntegerValidator('bankAccountIdS', _M('Conta bancária', $module));
        $hctBankAccountS = new MHContainer('hctBankAccountS', array($bankAccountLabelS, $bankAccountIdS));
        $hctBankAccountS->setShowLabel(true);
        $fields[] = $hctBankAccountS;

        //Field sector
        $businessSector = new BusinessBasicBusSector();
        $sectorIdLabelS = new MText('sectorIdLabelS', _M('Setor', $module).':');
        $sectorIdLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $sectorIdS      = new MComboBox('sectorIdS', $this->sectorIdS->value, '', $businessSector->listSector(), '', '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $sectorIdS->setJsHint(_M('Selecione um setor', $module));
        $hctSectorS     = new MHContainer('hctSectorS', array($sectorIdLabelS, $sectorIdS));
        $fields[]       = $hctSectorS;
        $validators[]   = new MIntegerValidator('sectorIdS', _M('Setor', $module));
        
        $fields = array_merge( $fields, $parameterFields );
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );
        
        $this->filters = $this->getTypesData();
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data->invoiceId        = $this->getFormValue('invoiceIdS');
        $data->personId         = $this->getFormValue('personIdS');        
        $data->accountSchemeId  = $this->getFormValue('accountSchemeIdS');
        $data->costCenterId     = $this->getFormValue('costCenterIdS');
        $data->unitId           = $this->getFormValue('unitIdS');
        $data->parcelNumber     = $this->getFormValue('parcelNumberS');
        $data->emissionDate     = $this->getFormValue('emissionDateS');
        $data->maturityDate     = $this->getFormValue('maturityDateS');
        $data->value            = $this->getFormValue('valueS');
        $data->policyId         = $this->getFormValue('policyIdS');
        $data->bankInvoiceId    = $this->getFormValue('bankInvoiceIdS');
        $data->automaticDebit   = $this->getFormValue('automaticDebitS');
        $data->incomeSourceId   = $this->getFormValue('incomeSourceIdS');
        $data->bankAccountId    = $this->getFormValue('bankAccountIdS');
        $data->sagu1InvoiceId   = $this->getFormValue('sagu1InvoiceIdS');
        $data->sectorId         = $this->getFormValue('sectorIdS');
        $data->emissionTypeId   = $this->getFormValue('emissionTypeIdS');
        
        return $data;
    }
}

?>
