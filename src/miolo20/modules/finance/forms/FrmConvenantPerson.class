<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 11/08/2005
 *
 **/

/**
 * Form to manipulate a city
 **/
class FrmConvenantPerson extends SManagementForm
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new FinConvenantPerson(), array('convenantPersonId'), 'BusConvenantPerson');
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        // Para o fluxo de aprovações
        if ( !strlen($MIOLO->_REQUEST('fluxosolicitacaoid')) > 0 )
        {
            $fields[] = FinFluxoAprovacaoConfiguracao::obterAvisoDeQueOProcessoPossuiConfiguracao(FinFluxoAprovacaoProcesso::CONCESSAO_DE_CONVENIOS);
        
            // Field Convenant Person Id
            if ( in_array($function,array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
            {
                $pk = $this->getObjectPk();
                $fields[] = new MTextLabel('', $pk->convenantPersonId, _M('Código', $module));
                $fields[] = new MHiddenField('convenantPersonId', $pk->convenantPersonId);

                $data = $this->busObject->getConvenantPerson($pk->convenantPersonId);
            }

            if($function == 'update')
            {
                $retorno = $this->verificaIncentivo();
            }

            if($retorno == null || $retorno == false )
            {
                // lookup para convênios
                $convenantLabel = new MText('convenantLabel', _M('Convênio',$module).':');
                $convenantLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
                $convenantLabel->setClass('m-caption m-caption-required');
                $convenantId = new MLookupTextField('convenantId', $data->convenantId, null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, array('description'), 'finance', 'Convenant', null, array('convenantId' => 'convenantId'), true);
                $convenantId->setJsHint(_M('Informe o código do convênio', $module));
                $description = new MTextField('description', $this->description->value, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
                $description->setReadOnly(true);
                $description->setJsHint(_M('Descrição', $module));
                $hctConvenant = new MHContainer('hctConvenant', array($convenantLabel, $convenantId, $description));
                $hctConvenant->setShowLabel(true);
                $fields[]   = $hctConvenant;
                $validators[] = new MIntegerValidator('convenantId', _M('Convênio',$module), 'required');

                //lookup para pessoas
                $fieldsPersonLabel = new MText('personLabel', _M('Pessoa', $module) . ':');
                $fieldsPersonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
                $fieldsPersonLabel->setClass('m-caption m-caption-required');
                $fieldsPerson = new MLookupTextField('personId', $data->personId, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'personName', 'basic', 'PhysicalPersonStudent', null, null, true);
                $fieldsPerson->setJsHint(_M('Informe o código da pessoa', $module));
                $fieldsPersonName = new MTextField('personName', $this->getFormValue('personName'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
                $fieldsPersonName->setJsHint(_M('Nome da pessoa', $module));
                $fieldsPersonName->setReadOnly(true);
                if ( SAGU::getParameter('BASIC', 'MODULE_PEDAGOGICO_INSTALLED') == 'YES' )
                {
                    $fieldsPerson->addAttribute('onBlur', SForm::getAjaxAction('listaInscricoes', 'divInscricoes', FALSE));
                }
                $htcFieldsPerson = new MHContainer('hctPerson', array($fieldsPersonLabel, $fieldsPerson, $fieldsPersonName));
                $htcFieldsPerson->setShowLabel(true);
                $fields[] = $htcFieldsPerson;
                $validators[] = new MIntegerValidator('personId', _M('Pessoa', $module), 'required');
            }
            else
            {
                $busConvenant = new BusinessFinanceBusConvenant();            
                $description = $busConvenant->getconvenant($data->convenantId);

                $convenantId = new MTextField('convenantid', $data->convenantId.' - '.$description->description , _M('Convênio', $module), 50);
                $convenantId->setReadOnly(true);
                $fields[] = $convenantId;

                $busPhysicalPerson = new BusinessBasicBusPhysicalPerson();
                $pessoa = $busPhysicalPerson->getPhysicalPerson($data->personId);

                $fieldsPerson = new MTextField('personid', $data->personId.' - '.$pessoa->name, _M('Pessoa', $module), 50);
                $fieldsPerson->setReadOnly(true);
                $fields[] = $fieldsPerson;
            }

            // Contrato
            $options = array(
                'module' => 'academic',
                'item' => 'ContractSimple',
                'label' => _M('Contrato', $module),
                'filter' => array('personId' => 'personId'),
            );
            $fields[] = $contractId = new SLookupContainer('contractId', $this->getRequestValue('contractId', $data->contractId), $options);
            
            if ( SAGU::getParameter('BASIC', 'MODULE_PEDAGOGICO_INSTALLED') == 'YES' )
            {
                $fields[] = new MSeparator();
                $fields[] = $this->listaInscricoes($data);                
            }

            $beginDateLabel = new MText('beginDateLabel', _M('Data inicial', $module). ':');
            $beginDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $beginDateLabel->setClass('m-caption m-caption-required');
            $beginDate = new MCalendarField('beginDate', $data->beginDate, '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
            $fields[] = new MHContainer('htcBeginDate', array($beginDateLabel, $beginDate));
            $validators[]   = new DateDMYValidator('beginDate', _M('Data inicial', $module), 'required');

            $endDateLabel = new MText('endDateLabel', _M('Data final', $module). ':');
            $endDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $endDate = new MCalendarField('endDate', $data->endDate, '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
            $fields[] = new MHContainer('htcEndDate', array($endDateLabel, $endDate));
            $validators[]   = new DateDMYValidator('endDate', _M('Data final', $module), 'optional');

            if($retorno)
            {
                $contractId->setReadOnly(true);
                $beginDate->setReadOnly(true);
                $endDate->setReadOnly(true);

                $observacao = new MTextField('observacao', SAGU::NVL($dados->observacao,_M('CONVÊNIO CANCELADO POR INADIMPLÊNCIA', $module)) , _M('Observação', $module), 50);
                $observacao->setReadOnly(true);
                $fields[] = $observacao;

                $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
                $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);

            }        

            parent::defineFields($fields, $validators, $data);        
        }
    }
    
    public function listaInscricoes($args)
    {
        $inscricoesSelection = array();
        
        $filters = new stdClass();
        $filters->personId = $this->getRequestValue('personId', $args->personId);
        if ( strlen($filters->personId) > 0 )
        {
            $inscricoes = AcpInscricao::buscarInscricoes($filters);

            foreach ($inscricoes as $inscricao)
            {
                $ofertaCurso = new AcpOfertaCurso($inscricao->ofertacursoid);

                $inscricoesSelection[$inscricao->inscricaoid] = $ofertaCurso->descricao;
            }
        }

        $fldInscricao = new MDiv('divInscricoes', array(new MLabel(_M('Inscrição:')), new MSelection('inscricaoId', $this->getRequestValue('inscricaoId', $args->inscricaoId), NULL, $inscricoesSelection, TRUE)));
        
        $this->page->onLoad("document.getElementById('divInscricoes').style = \"margin-left: 87px !important;\"");
        
        return $fldInscricao;
    }
    
    public function tbBtnSave_click()
    {
        $MIOLO     = MIOLO::getInstance();
        $module    = MIOLO::getCurrentModule();
        $action    = MIOLO::getCurrentAction();
        $function  = MIOLO::_request('function');

        $data = $this->getTypesData(); 
        
        $busPersonConvenant = new BusinessFinanceBusConvenantPerson();
        $busIncentive = new BusinessFinanceBusIncentive();
        $ok = true;
        
        // Verifica se o processo possui fluxo de aprovações.
        FinFluxoAprovacaoConfiguracao::checarAcessoDoUsuarioAoProcesso(FinFluxoAprovacaoProcesso::CONCESSAO_DE_CONVENIOS, $data->personId, $data);

        try
        {

            //verifica datas
            if( SAGU::compareTimestamp($data->beginDate, '>', $data->endDate) )
            {
                throw new Exception(_M("A data inicial @1 é maior que data final @2, por favor, digite datas válidas.", $module, $data->beginDate, $data->endDate));
            }
            
            $periodo = $busIncentive->obterUltimoPeriodoCursado($data->contractId, $data->startDate, $data->endDate);

            //obtém o percentual de aprovação
            $percentual = $busIncentive->obterPercentualDeAprovacoes($data->contractId, $periodo[0][0]);

            //obtém o percentual mínimo para renovar o incentivo
            $parse = $busPersonConvenant->searchPersonConvenantData($data);

            if(strlen($periodo[0][0]) > 0 && $parse[0][5] != null)
            {
                if($percentual[0][0] >= $parse[0][5])
                {
                    $oks = true;
                }
                else
                {
                    $oks = false;
                    $msg = (_M('Aproveitamento abaixo de '.$parse[0][5].'% -'.$parse[0][1]).'<br> Não é possível renovar contrato.'); 

                    throw new Exception($msg);
                }
            }
        }
        catch(Exception $e)
        {
            $MIOLO->error($e->getMessage(), $MIOLO->GetActionURL('finance', 'main:register:convenantPerson', NULL, array('function' => 'insert', 'convenantId' => $data->convenantId, 'personId' => $data->personId, 'contractId' => $data->contractId, 'inscricaoId' => $data->inscricaoId)));
        }
        
        if($ok)
        {
            if($function == 'update')
            {   
                // Atualiza data de fim para hoje
                $busPersonConvenant->updateConvenantPerson($data);
                
                $args = array('function' => 'search', 'event' => 'tbBtnSearch:click', 'endDateS' => $endDate);
                $goto = $MIOLO->GetActionURL(MIOLO::getCurrentModule(), MIOLO::getCurrentAction(), null, $args);
                $msg = _M('Convênio atualizado com sucesso.', $module);
                $MIOLO->information($msg, $goto);
            }
            else if($function == 'insert')
            {
                $busPersonConvenant->insertConvenantPerson($data);
                
                $args = array('function' => 'insert', 'event' => 'tbBtnNew:click');
                $goto = $MIOLO->GetActionURL(MIOLO::getCurrentModule(), MIOLO::getCurrentAction(), null, $args);
                $msg = _M('Convênio inserido com sucesso.', $module);
                $MIOLO->information($msg, $goto);
            }
        }
        else
        {
            $msg = (_M('Aproveitamento abaixo de '.$parse[0][18].'% -'.$parse[0][6]).'<br> Não é possível renovar contrato.');
            $this->addError($msg);
        }
    }
    
    public function verificaIncentivo()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data = $this->getTypesData();
        
        $busPersonConvenant = new BusinessFinanceBusConvenantPerson();
        $dados = $busPersonConvenant->getConvenantPerson($data->convenantPersonId);
        
        $inadimplencia = $busPersonConvenant->verificaStatusAluno($dados->personId);
        
        if( strlen(SAGU::getParameter('FINANCE','CODIGO_CONVENIO_PARA_VERIFICACAO_DE_INADIMPLENCIA')) > 0 && $function == 'update' )
        {
            $incentivos = explode(',', SAGU::getParameter('FINANCE','CODIGO_CONVENIO_PARA_VERIFICACAO_DE_INADIMPLENCIA'));
                        
            foreach($incentivos as $k => $incentivo)
            {                 
                if( ($incentivo == $dados->convenantId) && ($inadimplencia[0][0] == 't') &&  ($dados->endDate <= SAGU::getDateNow()) )
                {                    
                    $ok = true;
                    break;
                }else
                {
                    $ok = false;
                }                
            }
            
        return $ok;
        }
    }
    
    public function getTypesData()
    {
        $data = parent::getTypesData();
        
        // Para o fluxo de aprovações
        $data = FinFluxoSolicitacaoRegistro::obterDadosDoRegistro($data); 
        
        return $data;
    }
}
?>
