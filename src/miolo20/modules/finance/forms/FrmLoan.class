<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finLoan table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * 
 * @since
 * Class created on 12/12/2005
 *
 **/
class FrmLoan extends SManagementForm
{

    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new FinLoan(), array('incentiveTypeId'), 'BusLoan');
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $pk = $this->getObjectPk();
            $data = $this->busObject->getLoan($pk->incentiveTypeId);
            
            $fields[] = new MHiddenField('incentiveTypeId', $pk->incentiveTypeId);
            $fields[] = new MTextLabel('', $pk->incentiveTypeId, _M('Código', $module) . ':');
        }
        
        //Field loan description
        $loanDescription = new MTextField('loanDescription', $this->getFormValue('loanDescription', $data->description), _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $loanDescription->setJsHint(_M('Informe a descrição do financiamento', $module));
        $validators[] = new MRequiredValidator('loanDescription', _M('Descrição', $module), 'required');
        $fields[] = $loanDescription;
        
        //Field operation
        $operationIdLabel = new MText('operationIdLabel', _M('Operação', $module) . ':');
        $operationIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $operationIdLabel->setClass('m-caption m-caption-required');
        $operationId = new MLookupTextField('operationId', $this->getFormValue('operationId', $data->operationId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), _M('Crédito'), null, 'operationDescription', 'finance', 'Operation', null, null, true);
        $operationId->setJsHint(_M('Informe o código da operação', $module));
        $validators[] = new MIntegerValidator('operationId', _M('Operação', $module), 'required');
        $operationDescription = new MTextField('operationDescription', $this->getFormValue('operationDescription', $data->operationDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), _M('Operação usada para oferecer desconto ao beneficiado.', $module));
        $operationDescription->setReadOnly(true);
        $operationDescription->setJsHint(_M('Descrição da operação', $module));
        $hctOperation = new MHContainer('hctOperation', array($operationIdLabel, $operationId, $operationDescription));
        $hctOperation->setShowLabel(true);
        $fields[] = $hctOperation;
        
        //Field collection operation
        $collectionOperationIdLabel = new MText('collectionOperationIdLabel', _M('Operação de cobrança', $module) . ':');
        $collectionOperationIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $collectionOperationIdLabel->setClass('m-caption m-caption-required');
        $collectionOperationId = new MLookupTextField('collectionOperationId', $this->getFormValue('collectionOperationId', $data->collectionOperationId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), _M('Débito'), null, 'collectionOperationDescription', 'finance', 'Operation', null, null, true);
        $collectionOperationId->setJsHint(_M('Informe o código da operação de cobrança', $module));
        $validators[] = new MIntegerValidator('collectionOperationId', _M('Operação de cobrança', $module), 'required');
        $collectionOperationDescription = new MTextField('collectionOperationDescription', $this->getFormValue('collectionOperationDescription', $collectionOperationDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), _M('Operação usada para gerar os valores dos títulos para o beneficiador.', $module));
        $collectionOperationDescription->setReadOnly(true);
        $collectionOperationDescription->setJsHint(_M('Descrição da operação de cobrança', $module));
        $hctCollectionOperation = new MHContainer('hctCollectionOperation', array($collectionOperationIdLabel, $collectionOperationId, $collectionOperationDescription));
        $hctCollectionOperation->setShowLabel(true);
        $fields[] = $hctCollectionOperation;
        
        //operacao de pagamento
        $paymentOperationLabel = new MText('operationIdLabel', _M('Operação de estorno', $module) . ':');
        $paymentOperationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $paymentOperationLabel->setClass('m-caption m-caption-required');
        $paymentOperationId = new MLookupTextField('paymentOperation', $this->getFormValue('paymentOperation', $data->paymentOperation), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), _M('Débito'), null, 'paymentOperationDescription', 'finance', 'Operation', null, null, true);
        $paymentOperationId->setJsHint(_M('Informe o código da operação', $module));
        $validators[] = new MRequiredValidator('paymentOperation', _M('Operação de estorno', $module), 'required');
        $paymentOperationDescription = new MTextField('paymentOperationDescription', $this->paymentOperationDescription->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), _M('Operação usuada para o estorno do valor de desconto do beneficiado. Operações referentes à mensalidade não devem ser utilizadas.'));
        $paymentOperationDescription->setJsHint(_M('Descrição da operação', $module));
        $paymentOperationDescription->setReadOnly(true);
        $hctPaymentOperation = new MHContainer('hctPaymentOperation', array($paymentOperationLabel, $paymentOperationId, $paymentOperationDescription));
        $hctPaymentOperation->setShowLabel(true);
        $fields[] = $hctPaymentOperation;

        //operacao de repagamento
        $rePaymentOperationLabel = new MText('reOperationIdLabel', _M('Operação de reembolso', $module) . ':');
        $rePaymentOperationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $rePaymentOperationLabel->setClass('m-caption m-caption-required');
        $rePaymentOperationId = new MLookupTextField('rePaymentOperation', $this->getFormValue('rePaymentOperation', $data->rePaymentOperation), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), _M('Crédito'), null, 'rePaymentOperationDescription', 'finance', 'Operation', null, null, true);
        $rePaymentOperationId->setJsHint(_M('Informe o código da operação', $module));
        $validators[] = new MRequiredValidator('rePaymentOperation', _M('Operação de reembolso', $module), 'required');
        $rePaymentOperationDescription = new MTextField('rePaymentOperationDescription', $this->rePaymentOperationDescription->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), _M('Operação usuada para reembolso do valor cobrado ao beneficiador. Operações referentes à mensalidade não devem ser utilizadas.'));
        $rePaymentOperationDescription->setJsHint(_M('Descrição da operação', $module));
        $rePaymentOperationDescription->setReadOnly(true);
        $hctRePaymentOperation = new MHContainer('hctRePaymentOperation', array($rePaymentOperationLabel, $rePaymentOperationId, $rePaymentOperationDescription));
        $hctRePaymentOperation->setShowLabel(true);
        $fields[] = $hctRePaymentOperation;
        
        //Field account scheme
        $accountSchemeIdLabel = new MText('accountSchemeIdLabel', _M('Plano de contas', $module) . ':');
        $accountSchemeIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $accountSchemeIdLabel->setClass('m-caption m-caption-required');
        $accountSchemeId = new MLookupTextField('accountSchemeId', $this->getFormValue('accountSchemeId', $data->accountSchemeId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'accountSchemeDescription', 'accountancy', 'AccountScheme', null, null, true);
        $accountSchemeId->setJsHint(_M('Informe o código do plano de contas', $module));
        $validators[] = new MRegexpValidator('accountSchemeId', _M('Código do plano de contas', $module), '^[0-9]+(\.[0-9]+)*$', 'required');
        $accountSchemeDescription = new MTextField('accountSchemeDescription', $this->getFormValue('accountSchemeDescription', $data->accountSchemeDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $accountSchemeDescription->setReadOnly(true);
        $accountSchemeDescription->setJsHint(_M('Descrição do plano de contas', $module));
        $hctAccountScheme = new MHContainer('hctAccountScheme', array($accountSchemeIdLabel, $accountSchemeId, $accountSchemeDescription));
        $hctAccountScheme->setShowLabel(true);
        $fields[] = $hctAccountScheme;
        
        //Field loaner id
        $loanerIdLabel = new MText('loanerIdLabel', _M('Financiador', $module) . ':');
        $loanerIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $loanerIdLabel->setClass('m-caption m-caption-required');
        $loanerId = new MLookupTextField('loanerId', $this->getFormValue('loanerId', $data->loanerId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'loanerName', 'basic', 'LegalPerson', null, null, true);
        $loanerId->setJsHint(_M('Informe o código do financiamento', $module));
        $validators[] = new MIntegerValidator('loanerId', _M('Financiador', $module), 'required');
        $loanerName = new MTextField('loanerName', $this->getFormValue('loanerName', $data->loanerName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), _M('Informe a operação pela qual o financiador recebe os pagamentos do financiamentos', $module));
        $loanerName->setReadOnly(true);
        $loanerName->setJsHint(_M('Nome do financiador', $module));
        $hctLoanerName = new MHContainer('hctLoanerName', array($loanerIdLabel, $loanerId, $loanerName));
        $hctLoanerName->setShowLabel(true);
        $fields[] = $hctLoanerName;
        
        $percentual = new MIntegerField('percentRenovacao', $this->getFormValue('percentRenovacao', $data->percentRenovacao), _M('Percentual de aproveitamento para renovação', $module));
        $percentual->setJsHint(_M('%', $module));
        $validators[] =  new MIntegerValidator('percentRenovacao', _M('Percentual de aproveitamento para renovação', $module), 'required');
        $fields[] = $percentual;
        
        // Need adjust authorization
        $messagesType = SAGU::listTrueFalse(1);
        $needAdjustAuthorizationLabel = new MText('needAdjustAuthorizationLabel', _M('Precisa de autorização para ajuste', $module) . ':');
        $needAdjustAuthorizationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $needAdjustAuthorizationLabel->setClass('m-caption m-caption-required');
        $needAdjustAuthorization = $this->GetFormValue('needAdjustAuthorization', $data->needAdjustAuthorization ? $data->needAdjustAuthorization : DB_FALSE);
        $needAdjustAuthorization = new MRadioButtonGroup('needAdjustAuthorization', '', $messagesType, $needAdjustAuthorization, null, 'horizontal');
        $needAdjustAuthorization->SetShowLabel(false);
        $hctNeedAdjustAuthorization = new MHContainer('hctNeedAdjustAuthorization', array($needAdjustAuthorizationLabel, $needAdjustAuthorization));
        $fields[] = $hctNeedAdjustAuthorization;
        
        // Send invoices
        $sendInvoicesLabel = new MText('sendInvoicesLabel', _M('Enviar títulos', $module) . ':');
        $sendInvoicesLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $sendInvoicesLabel->setClass('m-caption m-caption-required');
        
        $sendInvoices = $this->GetFormValue('sendInvoices', $data->sendInvoices ? $data->sendInvoices : t);
        
        $sendInvoices = new MRadioButtonGroup('sendInvoices', '', $messagesType, $sendInvoices, null, 'horizontal');
        $sendInvoices->SetShowLabel(false);
        $hctSendInvoices = new MHContainer('hctSendInvoices', array($sendInvoicesLabel, $sendInvoices));
        $fields[] = $hctSendInvoices;
        
        // Generate credits
        $generateCreditsLabel = new MText('generateCreditsLabel', _M('Gerar créditos', $module) . ':');
        $generateCreditsLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $generateCreditsLabel->setClass('m-caption m-caption-required');
        $generateCredits = $this->GetFormValue('generateCredits', $data->generateCredits ? $data->generateCredits : t);
        $generateCredits = new MRadioButtonGroup('generateCredits', '', $messagesType, $generateCredits, null, 'horizontal');
        $generateCredits->SetShowLabel(false);
        $hctGenerateCredits = new MHContainer('hctGenerateCredits', array($generateCreditsLabel, $generateCredits));
        $fields[] = $hctGenerateCredits;
        
        // Rotative
        $rotativeLabel = new MText('rotativeLabel', _M('Rotativo', $module) . ':');
        $rotativeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $rotativeLabel->setClass('m-caption m-caption-required');
        $rotative = $this->GetFormValue('rotative', $data->rotative ? $data->rotative : f);
        $rotative = new MRadioButtonGroup('rotative', '', $messagesType, $rotative, null, 'horizontal');
        $rotative->SetShowLabel(false);
        $hctRotative = new MHContainer('hctRotative', array($rotativeLabel, $rotative));
        $fields[] = $hctRotative;
        
        // Group invoices values
        $groupInvoicesValuesLabel = new MText('groupInvoicesValuesLabel', _M('Agrupar valores no título', $module) . ':');
        $groupInvoicesValuesLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $groupInvoicesValuesLabel->setClass('m-caption m-caption-required');
        
        $groupInvoicesValues = $this->GetFormValue('groupInvoicesValues', $data->groupInvoicesValues ? $data->groupInvoicesValues : DB_FALSE);
        $groupInvoicesValues = new MRadioButtonGroup('groupInvoicesValues', '', $messagesType, $groupInvoicesValues, null, 'horizontal');
        $groupInvoicesValues->SetShowLabel(false);
        $hctGroupInvoicesValues = new MHContainer('hctGroupInvoicesValues', array($groupInvoicesValuesLabel, $groupInvoicesValues));
        $fields[] = $hctGroupInvoicesValues;
        
        // Is extinct
        $isExtinctLabel = new MText('isExtinctLabel', _M('Está extinto', $module) . ':');
        $isExtinctLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $isExtinctLabel->setClass('m-caption m-caption-required');
        $isExtinct = $this->GetFormValue('isExtinct', $data->isExtinct ? $data->isExtinct : DB_FALSE);
        $isExtinct = new MRadioButtonGroup('isExtinct', '', $messagesType, $isExtinct, null, 'horizontal');
        $isExtinct->SetShowLabel(false);
        $hctIsExtinct = new MHContainer('hctIsExtinct', array($isExtinctLabel, $isExtinct));
        $fields[] = $hctIsExtinct;
        
        // Apply discounts
        $applyDiscountsLabel = new MText('applyDiscountsLabel', _M('Aplicar descontos', $module) . ':');
        $applyDiscountsLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $applyDiscounts = $this->GetFormValue('applyDiscounts', strlen($data->applyDiscounts) > 0 ? $data->applyDiscounts : DB_TRUE);
        $applyDiscounts = new MRadioButtonGroup('applyDiscounts', '', $messagesType, $applyDiscounts, null, 'horizontal');
        $applyDiscounts->SetShowLabel(false);
        $hctApplyDiscounts = new MHContainer('hctApplyDiscountsCredits', array($applyDiscountsLabel, $applyDiscounts));
        $fields[] = $hctApplyDiscounts;
        
        if ( SAGU::getParameter('FINANCE', 'PERMITIR_ADITAR_INCENTIVOS') == 't' )
        {
            // Aditamento
            $aditarLabel = new MText('aditarLabel', _M('Permite que seja aditado', $module) . ':');
            $aditarLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $aditarIncentivo = $this->GetFormValue('aditarIncentivo', $data->aditarIncentivo ? $data->aditarIncentivo : DB_TRUE);
            $aditarIncentivo = new MRadioButtonGroup('aditarIncentivo', '', $messagesType, $aditarIncentivo, null, 'horizontal');
            $aditarIncentivo->SetShowLabel(false);
            $aditarIncentivo->setJsHint(_M('Caso habilitado impede que o título receba descontos da política', $module));
            $hctAditar = new MHContainer('hctAditar', array($aditarLabel, $aditarIncentivo));
            $fields[] = $hctAditar;
            
        }
        
        // Gerar títulos de cobrança
        $geraTituloDeCobrancaLabel = new MText('geraTituloDeCobrancaLabel', _M('Gerar título de cobrança', $module) . ':');
        $geraTituloDeCobrancaLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $geraTituloDeCobranca = $this->GetFormValue('geraTituloDeCobranca', strlen($data->geraTituloDeCobranca) > 0 ? $data->geraTituloDeCobranca : DB_FALSE);
        $geraTituloDeCobranca = new MRadioButtonGroup('geraTituloDeCobranca', '', $messagesType, $geraTituloDeCobranca, null, 'horizontal');
        $geraTituloDeCobranca->SetShowLabel(false);
        $hint = new MText();
        $hint->hint = _M('Gerar tíulos de cobrança para o financiador.', $module);
        $hctGeraTituloDeCobranca = new MHContainer('hctGeraTituloDeCobranca', array($geraTituloDeCobrancaLabel, $geraTituloDeCobranca, $hint));
        $fields[] = $hctGeraTituloDeCobranca;
        
        parent::defineFields($fields, $validators, $data);
    }

    /*
     * Get types data 
     */
    public function getTypesData()
    {
        $data = new finLoan();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }
            $data->description = $this->loanDescription->value;
        }
        
        $data->percentRenovacao = $this->getFormValue('percentRenovacao');
        
        return $data;
    }
}
?>
