<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Message form
 *
 * @author Samuel Koch [samuel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Samuel Koch [samuel@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 10/02/2009
 *
 **/

/**
 * Form to manipulate a message
 **/
class FrmInvoiceMessage extends SManagementForm
{

    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new FinInvoiceMessage(), array('invoiceMessageId'), 'BusInvoiceMessage');
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        if ( in_array($function,array( SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE )) )
        {
            $bankId               = MIOLO::_request('bankId');
            $invoiceMessageTypeId = MIOLO::_request('invoiceMessageTypeId');

            $pk = $this->getObjectPk();
            $data     = $this->busObject->getInvoiceMessage($pk->invoiceMessageId);
            $sep = new MText('sep', '-');
            
            $fields[] = $invoiceMessageId = new MTextField('invoiceMessageId', $pk->invoiceMessageId, _M('Código',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, true);
            $invoiceMessageId->setJsHint(_M('Código da Mensagem do título',$module));
        }
        
        //Field bank
        $bankLabel = new MText('bankLabel', _M('Banco', $module). ':');
        $bankLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $bankLabel->setClass('m-caption m-caption-required');
        $bankId = new MLookupTextField('bankId', $this->GetFormValue('bankId', $data->bankId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, array('bankDescription'), $module, 'Bank', null, null, true);
        $bankId->setJsHint(_M('Informe o código do banco', $module));
        $validators[] = new MIntegerValidator('bankId', _M('Banco', $module), 'required');
        $bankDescription = new MTextField('bankDescription', $this->GetFormValue('bankDescription', $data->bankDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $bankDescription->setJsHint( _M('Descrição do banco', $module) );
        $bankDescription->setReadOnly(true);
        $hcntBank = new MHContainer('hcntBank', array($bankLabel, $bankId, $bankDescription));
        $fields[] = $hcntBank;

        //Field origin of the message
        $invoiceMessageTypeLabel = new MText('messageTypeS', _M('Tipo de mensagem', $module).':');
        $invoiceMessageTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $invoiceMessageTypeLabel->setClass('m-caption m-caption-required');
        $busInvoiceMessageType = new BusinessFinanceBusInvoiceMessage();
        $invoiceMessageTypeId = new MSelection('invoiceMessageTypeId', $this->GetFormValue('invoiceMessageTypeId', $data->invoiceMessageTypeId), '', $busInvoiceMessageType->listInvoiceMessageType(), false);
        $validators[] = new MIntegerValidator('invoiceMessageTypeId', _M('Tipo de mensagem', $module), 'required');
        $invoiceMessageTypeId->setJsHint( _M('Selecione o tipo de mensagem', $module) );
        $hctInvoiceMessageType = new MHContainer('hctInvoiceMessageTypeId', array($invoiceMessageTypeLabel, $invoiceMessageTypeId));
        $hctInvoiceMessageType->setShowLabel(true);
        $fields[] = $hctInvoiceMessageType;

        $this->page->onLoad('document.' . $this->name . '.bankId.focus();');

        //Field message order
        $messageOrderLabel = new MText('messageOrderLabel', _M('Ordem da mensagem', $module).':');
        $messageOrderLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $messageOrderId = new MTextField('messageOrder', $this->GetFormValue('messageOrder', $data->messageOrder), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $validators[] = new MIntegerValidator('messageOrder', _M('Ordem da mensagem', $module), 'optional');
        $messageOrderId->setJsHint(_M('Informe a ordem da mensagem', $module));
        $hcntMessageOrder = new MHContainer('hcntMessageOrder', array($messageOrderLabel, $messageOrderId));
        $fields[] = $hcntMessageOrder;
        
        //Field invoice message bank value
        $invoicemessagebankvalueLabel = new MText('invoiceMessageBankValueLabel', _M('Código no banco', $module).':');
        $invoicemessagebankvalueLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $invoicemessagebankvalue = new MTextField('invoiceMessageBankValue', $this->GetFormValue('invoiceMessageBankValue', $data->invoiceMessageBankValue), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $invoicemessagebankvalue->addAttribute('maxlength', "2");
        $invoicemessagebankvalue->setJsHint(_M('Referencia o código da instrução do banco com respectiva mensagem.', $module));
        $hcntInvoicemessagebankvalue = new MHContainer('hcntinvoiceMessageBankValue', array($invoicemessagebankvalueLabel, $invoicemessagebankvalue));
        $fields[] = $hcntInvoicemessagebankvalue;
        
        //Field message tex
        $messageTextLabel = new MText('messegeTextLabel', _M('Texto da mensagem', $module). ':');
        $messageTextLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $messageTextLabel->setClass('m-caption m-caption-required');
        $messageText = new MMultiLineField('description', $this->getFormValue('description', $data->messageText), '', 60, 5, 60);
        $messageText->setJsHint(_M('Informe o texto da mensagem', $module));
        $validators[] = new MRequiredValidator('description', _M('Texto da mensagem', $module), 'required');
        $hcntMessageText = new MHContainer('hcntMessageText', array($messageTextLabel, $messageText));
        $fields[] = $hcntMessageText;
        
        // Operacao
        $fields[] = $lkpOperation = new SLookupContainer('operationId', $this->getRequestValue('operationId', $data->operationId), array(
            'label' => _M('Operação', $module),
            'item' => 'Operation',
            'module' => 'finance',
            'hint' => _M('Informe o código de operação de origem. Caso informado, esta mensagem aparecerá apenas para títulos com esta origem.', $module),
        ));
        
        $fields[] = new MSeparator( '' );
        $fields[] = new MTextLabel( 'legend', _M('Variáveis disponíveis de acordo com o tipo de mensagem', $module ) . ':' );
        
        
        $fields[] = new MSeparator( '' );
        $fields[] = new MSeparator( '' );
        $fields[] = new MTextLabel( 'legend', _M('Desconto', $module ) . ':' );
        $fields[] = $this->standartField('X_VAL_DISCO', 'Esta variável será substituída pelo valor do desconto');
        $fields[] = $this->standartField('X_DATE_DISCOUNT', 'Esta variável será substituída pela data que será concedido desconto');
        $fields[] = $this->standartField('X_TOTAL_DISCOUNT', 'Esta variável será substituída pelo valor total do título calculando o desconto');
        
        
        $fields[] = new MSeparator( '' );
        $fields[] = new MSeparator( '' );
        $fields[] = new MTextLabel( 'legend', _M('Protesto', $module ) . ':' );
        $fields[] = $this->standartField('X_DAY_NEXT_FINE', 'Esta variável será substituída pelo número de dias após a data de vencimento para cobrar multa');
        $fields[] = $this->standartField('X_PERCENT_FINE', 'Esta variável será substituída pela percentagem de multa');
        $fields[] = $this->standartField('X_DATE_FINE', 'Esta variável será substituída pela data que será cobrado multa');
        $fields[] = $this->standartField('X_VAL_FINE', 'Esta variável será substituída pelo valor da multa');
        $fields[] = $this->standartField('X_VAL_INTEREST_DAY', 'Esta variável será substituída pelo valor do juros ao dia');
        $fields[] = $this->standartField('X_VAL_INTEREST', 'Esta variável será substituída pelo valor do juros');
        
        $fields[] = new MSeparator( '' );
        $fields[] = new MSeparator( '' );
        $fields[] = new MTextLabel( 'legend', _M('Multa', $module ) . ':' );
        $fields[] = $this->standartField('X_DAY_NEXT_INTEREST', 'Esta variável será substituída pelo número de dias após a data de vencimento para cobrar juros');
        $fields[] = $this->standartField('X_PERCENT_INTEREST', 'Esta variável será substituída pela percentagem de juros');
        $fields[] = $this->standartField('X_DATE_INTEREST', 'Esta variável será substituída pela data que será cobrada a multa');
        $fields[] = $this->standartField('X_VAL_INTEREST_DAY', 'Esta variável será substituída pelo valor do juros ao dia');
        $fields[] = $this->standartField('X_VAL_INTEREST', 'Esta variável será substituída pelo valor do juros');

        
        $fields[] = new MSeparator( '' );
        $fields[] = new MSeparator( '' );
        $fields[] = new MTextLabel( 'legend', _M('Incentivo', $module ) . ':' );
        $fields[] = $this->standartField('X_INCENTIVE_DESC', 'Esta variável será substituída pela descrição do incentivo');
        $fields[] = $this->standartField('X_INCENTIVE_VAL', 'Esta variável será substituída pelo valor do incentivo');
        
        $fields[] = new MSeparator( '' );
        $fields[] = new MSeparator( '' );
        $fields[] = new MTextLabel( 'legend', _M('Livre', $module ) . ':' );
        $fields[] = $this->standartField('X_DAY_PREV_DISCO', 'Esta variável será substituída pelo número de dias antes da data de vencimento para aplicar desconto');
        $fields[] = $this->standartField('X_DAY_PROTEST', 'Esta variável será substituída pelo número de dias para protesto');
        $fields[] = $this->standartField('X_PERCENT_DISCO', 'Esta variável será substituída pela percentagem de desconto');
        $fields[] = $this->standartField('X_VAL_TAX', 'Esta variável será substituída pelo valor da taxa bancária');
        $fields[] = $this->standartField('X_COURSE_ABBREV', 'Esta variável será substituída pela abreviatura do curso (é necessário informar a Operação para esta variável funcionar corretamente)');
        $fields[] = $this->standartField('X_PARCEL_NUMBER', 'Esta variável será substituída pelo número da parcela (é necessário informar a Operação para esta variável funcionar corretamente)');
        $fields[] = $this->standartField('X_PARCEL_TOTAL', 'Esta variável será substituída pelo número total de parcelas (é necessário informar a Operação para esta variável funcionar corretamente');
        $fields[] = $this->standartField('X_CONTRACT_ID', 'Esta variável será substituída pelo número da matrícula (contrato)');
        $fields[] = $this->standartField('X_COURSE_DESCRI', 'Esta variável será substituída pelo nome do curso');
        $fields[] = $this->standartField('X_MONTH_YEAR_REF', 'Esta variável será substituída pela data de vencimento do título');
        $fields[] = $this->standartField('X_TAX_TYPE_TEXT', 'Esta variável será substituída pela descrição da operação do lançamento de cobrança');
        $fields[] = $this->standartField('X_SUPPORTER_NAME', 'Esta variável será substituída pelo nome do patrocinador, caso exista.');
        
        parent::defineFields($fields, $validators, $data);
    }
    
    public function standartField($param, $desc)
    {
        $par = new MText( '', $param.':', 'blue');
        $par->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $desc = new MText( '', _M($desc, MIOLO::getCurrentModule() ) . '.');
        return new MHContainer('', array($par, $desc));
    }

    /**
     * Overwrites smanagementform default function in order to allow
     * non-single primary keys to work correctly.
     *
     * @param $sender Those methods always have this parameter and I really don't know what can come with it. It doesn't matter, though, since it is not used by this method.
     *
     */
    public function tbBtnDelete_confirm($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $pk = $this->getObjectPk();
        $ok = $this->busObject->deleteInvoiceMessage($pk->invoiceMessageId);

        if ( $ok )
        {
            $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_DELETED');
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Informação', $module);
            SAGU::information($msg, $goto);
        }
        else
        {
            $msg = _M('Erro executando a operação solicitada.', $module);
            $errors = $this->busObject->getErrors();
            for ( $i=0; $i<count($errors); $i++ )
            {
                $msg .= '<br />' . $errors[$i];
            }
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro', $module);
            SAGU::error($msg, $goto, $caption);
        }
    }
}
?>
