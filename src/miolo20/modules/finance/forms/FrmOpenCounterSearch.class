<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finOpenCounter table
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * 
 * @since
 * Class created on 26/08/2010
 *
 **/

class FrmOpenCounterSearch extends SSearchForm
{

    /**
     * Class constructor
     */
    public function __construct()
    {
        parent::__construct(_M('Localizar', 'basic'), new FinOpenCounter(), array('openCounterId'), 'BusOpenCounter');
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        try
        {
            //Get login
            $loginUser = $MIOLO->GetLogin();
            //Business person
            $businessPhysicalPersonEmployee = new BusinessBasicBusPhysicalPersonEmployee();
            //Object person
            $person = $businessPhysicalPersonEmployee->getPersonByMioloUserName($loginUser->id);
            
            if ( !(is_object($person)) )
            {
                //Business counter
                $msg = _M('Erro: Você não tem permissão para executar este processo!', $module);
                $msg .= '<ul><li>' . _M('O usuário logado deve ser um funcionário', $module) . '.' . '</li></ul>';
                throw new Exception($msg);
            }
        }
        catch ( Exception $e )
        {
            $MIOLO->error($e->getMessage());
        }
        
        if ( $MIOLO->checkAccess('FrmCloseCounter', A_ADMIN, false, true) )
        {
            $fields[] = new MHiddenField('listAllS', SAGU::getParameter('BASIC', 'DB_TRUE') );
        }
        
        //Fields responsible
        $fields[] = new MHiddenField('responsibleUserNameS', $loginUser->id);
        $responsibleId['responsibleIdLabel'] = new MText('responsiblePersonIdS', _M('Código do responsável', $module) . ':');
        $responsibleId['responsibleIdLabel']->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $responsibleId['responsibleId'] = new MTextLabel('responsibleIdS', $person->personId);
        $hctId = new MHContainer('hctIdS', $responsibleId);
        $responsibleName['responsibleNameLabel'] = new MText('responsibleNameLabelS', _M('Nome do resposável', $module) . ':');
        $responsibleName['responsibleNameLabel']->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $responsibleName['responsibleName'] = new MTextLabel('responsibleNameS', $person->name);
        $hctName = new MHContainer('hctNameS', $responsibleName);
        $fields[] = new MBaseGroup('baseAS', _M('Responsável pelo caixa',$module), array($hctId, $hctName), 'vertical');
        
        //Field open counter
        $openCounterIdLabel = new MText('counterIdLabelS', _M('Código', $module) . ':');
        $openCounterIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $openCounterId = new MTextField('openCounterIdS', $data->openCounterIdS, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $fields[] = new MHContainer('hctOpenCounter', array($openCounterIdLabel, $openCounterId));
        
        //Field counter
        $counterIdLabel = new MText('counterIdLabelS', _M('Caixa', $module) . ':');
        $counterIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $counterId = new MLookupTextField('counterIdS', $this->getFormValue('counterIdS', $data->counterIdS), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'descriptionS, null, unitDescriptionS', $module, 'Counter', null, null, true);
        $counterId->setJsHint(_M('Informe o código do caixa', $module));
        $validators[] = new MIntegerValidator('counterIdS', _M('Caixa', $module), 'required');
        $description = new MTextField('descriptionS', $this->getFormValue('descriptionS', $data->descriptionS), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $description->setReadOnly(true);
        $unitDescription = new MTextField('unitDescriptionS', $this->getFormValue('unitDescriptionS', $data->unitDescriptionS), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $unitDescription->setReadOnly(true);
        $hctCounter = new MHContainer('hctCounterS', array($counterIdLabel, $counterId, $description, $unitDescription));
        $hctCounter->setShowLabel(true);
        $fields[] = $hctCounter;
        
        //Field operator
        $operatorIdLabel = new MText('operatorIdLabelS', _M('Operador', $module) . ':');
        $operatorIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $operatorId = new MLookupTextField('operatorIdS', $this->getFormValue('operatorIdS', $data->operatorIdS), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'operatorNameS', 'basic', 'PhysicalPersonEmployee', null, null, true);
        $operatorId->setJsHint(_M('Informe o código da operador', $module));
        $validators[] = new MIntegerValidator('operatorIdS', _M('Operador', $module), 'required');
        $operatorName = new MTextField('operatorNameS', $this->getFormValue('operatorNameS', $data->operatorNameS), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $operatorName->setJsHint(_M('Nome do operador', $module));
        $operatorName->setReadOnly(false);
        $hctOperator = new MHContainer('hctOperatorS', array($operatorIdLabel, $operatorId, $operatorName));
        $hctOperator->setShowLabel(true);
        $fields[] = $hctOperator;
        
        //Field value
        $value = new MTextField('valueS', $this->getFormValue('valueS', $data->valueS), _M('Valor de abertura', $module), SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'), _M('Ex.: 1.00', $module));
        $value->setJsHint(_M('Informe o valor de abertura', $module));
        $validators[] = new MFloatValidator('valueS', _M('Valor de abertura', $module), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), 'required');
        $fields[] = $value;
        
        //Field data register
        $registerDateLabelS = new MText('registerDateLabelS', _M('Data do cadastro', $module) . ':');
        $registerDateLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $registerDateS = new MCalendarField('dateS', $this->getFormValue('dateS', $data->dateS), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $registerDateS->setJsHint(_M('Informe a data de registro', $module));
        $validators[] = new MDATEDMYValidator('dateS', '', 'optional');
        $hctRegisterDateS = new MHContainer('hctRegisterDateS', array($registerDateLabelS, $registerDateS));
        $fields[] = $hctRegisterDateS;
        
        //Field operation
        $business = new BusinessFinanceBusOperation();
        $messagesType = $business->listOperationTypeId(1);
        $messagesType[] = array(_M('Indiferente', $module), 'A');
        $operationLabel = new MText('operationLabelS', _M('Operação', $module) . ':');
        $operationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $operation = $this->GetFormValue('operationS', $data->operationS) ? $this->GetFormValue('operationS', $data->operationS) : 'C';
        $operation = new MRadioButtonGroup('operationS', '', $messagesType, $operation, null, 'horizontal');
        $operation->SetShowLabel(false);
        $hctOperation = new MHContainer('hctOperationS', array($operationLabel, $operation));
        $fields[] = $hctOperation;
        
        $statusLabel = new MText('statusLabel', _M('Estado', $module) . ':');
        $statusLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $statusOptions = array(array(_M('Aberto', $module), 'O'),
                               array(_M('Fechado', $module), 'C'),
                               array(_M('Todos', $module), 'A'));
        $counterValue = strlen($this->getFormValue('counterStatusS', $data->counterStatusS)) > 0 ? $this->getFormValue('counterStatusS', $data->counterStatusS) : 'O';
        $counterStatus = new MRadioButtonGroup('counterStatusS', '', $statusOptions, $counterValue, null, 'horizontal');
        $counterStatus->setShowLabel(false);
        $hctStatus = new MHContainer('hctStatus', array($statusLabel, $counterStatus));
        $fields[] = $hctStatus;

        
        parent::defineFields($fields, $module, 'GrdOpenCounterSearch');
    }
    
    public function getTypesData()
    {
        $data = parent::getTypesData();

        $data->listAllS = $this->getFormValue('listAllS');
        $data->counterStatusS = $this->getFormValue('counterStatusS');

        return $data;
    }

}

?>
