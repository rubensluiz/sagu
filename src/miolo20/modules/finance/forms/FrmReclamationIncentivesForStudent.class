<?
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Receivable invoices report form
 *
 * @author Nataniel Ingor da Silva [nataniel@solis.coop.br]
 *
 * @version $Id$
 *
 \b Maintainers: \n
 * Equipe Sagu [sagu@solis.coop.br]
 *
 * @since
 * Class created on 29/10/2013
 */

/**
 * Form to generate defaulter report
 */
class FrmReclamationIncentivesForStudent extends SForm
{
    private $module;
    private $MIOLO;

    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $this->module = SAGU::getFileModule(__FILE__);
        $this->MIOLO = MIOLO::getInstance();

        parent::__construct(_M('Aproveitamento dos alunos para incentivo', $module), null, null);
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        //Field person
        $contractPersonIdLabel = new MText('contractPersonIdLabel', _M('Pessoa',$module).':');
        $contractPersonIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractPersonIdLabel->setClass('m-caption m-caption');
        $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId',$data->personId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, array('contractId', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'contractUnitId'), 'academic', 'PersonContract', null, array('personId' => 'contractPersonId'), array('personId' => 'contractPersonId'), true);
        $contractPersonId->setJsHint(_M('Informe o código da pessoa',$module));
        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName',$this->incentiveSearch->contractPersonName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractPersonName->setReadOnly(true);
        $contractPersonName->setJsHint(_M('Nome da pessoa', $module));
        $hctPerson = new MHContainer('hctPerson', array($contractPersonIdLabel, $contractPersonId, $contractPersonName));
        $hctPerson->setShowLabel(true);
        $fields[] = $hctPerson;
      
        //Field contract
        $contractIdLabel = new MText('contractIdLabel', _M('Contrato',$module).':');
        $contractIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractIdLabel->setClass('m-caption m-caption');
        $contractId = new MLookupTextField('contractId', $data->contractId ? $data->contractId : $this->getFormValue('contractId', $data->contractId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, array('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'limbo', 'contractUnitId'), 'academic', 'Contract', null, array(),  true);
        $contractId->setJsHint(_M('Informe o código do contrato', $module));
        $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId',$this->incentiveSearch->contractCourseId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseId->setReadOnly(true);
        $contractCourseId->setJsHint(_M('Código do curso', $module));
        $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion',$this->incentiveSearch->contractCourseVersion), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseVersion->setReadOnly(true);
        $contractCourseVersion->setJsHint(_M('Versão do curso', $module));
        $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName',$this->incentiveSearch->contractCourseName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractCourseName->setReadOnly(true);
        $contractCourseName->setJsHint(_M('Nome do curso', $module));
        $hctContract = new MHContainer('hctContract', array($contractIdLabel, $contractId, $contractCourseId, $contractCourseVersion, $contractCourseName));
        $hctContract->setShowLabel(true);
        $fields[] = $hctContract;
           
        //Field period
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodId', $this->getFormValue('periodId', SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID')), _M('Período ',$module), $businessPeriod->listPeriod(), true );
        $periodId->setJsHint(_M('Selecione um período', $module));
        $periodId->setClass('m-caption m-caption-required');
        $validators[] = new MRequiredValidator('periodId', _M('Período letivo',$module), 'required');
        $fields[] = $periodId;
        
        //field insentive type
        $insentiveTypeIdLabel = new MText('insentiveTypeIdLabel', _M('Tipo de incentivo',$module).':');
        $insentiveTypeIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $insentiveTypeIdLabel->setClass('m-caption m-caption-required');
        $incentiveTypeId = new MLookupTextField('incentiveTypeId', $this->getFormValue('incentiveTypeId',$data->incentiveTypeId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'incentiveTypeDescription', $module, 'IncentiveType', null, null, true);
        $incentiveTypeId->setJsHint(_M('Informe o código do tipo de incentivo',$module));
        $validators[]    = new MIntegerValidator('incentiveTypeId', _M('Tipo de incentivo',$module), 'required');
        $incentiveTypeDescription = new MTextField('incentiveTypeDescription', $this->getFormValue('incentiveTypeDescription',$this->incentiveSearch->incentiveTypeDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $incentiveTypeDescription->setReadOnly(true);
        $incentiveTypeDescription->setJsHint(_M('Descrição do tipo de incentivo', $module));
        $hctIncentive = new MHContainer('hctIncentive', array($insentiveTypeIdLabel, $incentiveTypeId, $incentiveTypeDescription));
        $hctIncentive->setShowLabel(true);
        $fields[]  = $hctIncentive;
        
        // Field course
        $lkpValue = array(
            $this->GetFormValue('courseId', $data->courseId),
            $this->GetFormValue('courseVersion', $data->courseVersion),
            $this->GetFormValue('turnId', $data->turnId),
            $this->GetFormValue('unitId', $data->unitId)
        );

        $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue, true, null);
        $validators[] = new MRequiredValidator('courseId', _M('Curso', $module));
        $validators[] = new MIntegerValidator('courseVersion', _M('Versão do curso', $module));
        $validators[] = new MIntegerValidator('turnId', _M('Turno', $module));
        $validators[] = new MIntegerValidator('unitId', _M('Unidade', $module));
        $fields[] = $courseOccurrenceLookup;

        $this->addFields($fields);
       
        $this->setValidators($validators);        

        $this->setLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $this->setShowPostButton(false);
        $this->setClose($this->MIOLO->getActionURL($this->module, 'main:report'));
        $this->page->onLoad('document.' . $this->name . '.courseId.focus();');

        parent::defineFields();

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);

        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $this->MIOLO->getActionURL($this->module, MIOLO::getCurrentAction(), null, array('event'=>'generateReport')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    /**
     * Event triggered when button print is clicked
     */
     public function generateReport()
     {
        $MIOLO = MIOLO::getInstance();
        
        //Parameters of the report
        $parameters['periodId'] = MIOLO::_REQUEST('periodId');
        $parameters['incentiveTypeId'] = MIOLO::_REQUEST('incentiveTypeId');
        $parameters['description'] = MIOLO::_REQUEST('incentiveTypeDescription');
        $parameters['courseId'] = MIOLO::_REQUEST('courseId');
        $parameters['courseVersion'] = MIOLO::_REQUEST('courseVersion');
        $parameters['turnId'] = MIOLO::_REQUEST('turnId');
        $parameters['unitId'] = MIOLO::_REQUEST('unitId');
        
        if (strlen(MIOLO::_REQUEST('contractId')) > 0)
        {
            $parameters['contractIds'] = MIOLO::_REQUEST('contractId');
        }
        if (strlen(MIOLO::_REQUEST('contractPersonId')) > 0)
        {
            $parameters['personId'] = MIOLO::_REQUEST('contractPersonId');
        }    
                                
        $report = new SReport();
        $report->setReportName('reclamationIncentivesForStudent');
        $report->setFileType( MIOLO::_REQUEST('reportFormat') );
        $report->setParameters($parameters);

        if ( !$report->generate() )
        {
            $goto = SAGU::getStackBackUrl();
            $url  = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, MIOLO::getCurrentAction());

            SAGU::error(_M("Nenhuma informação encontrada.", $module), $url);
        }
     }
}
?>
