<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * PayedOffInvoices form
 *
 * @author Rafael Luís Spengler [rafael@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 18/10/2005
 *
 **/

/**
 * Form to manipulate a message
 **/
class FrmCheckManualEntries extends MForm
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();
        parent::__construct(_M('Checagem lançamentos manuais', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnNew');
        
        $fields[] = $toolBar;
        
        $fldBeginDate = new MCalendarField('beginRegisterDate', $this->getFormValue('beginRegisterDate', $data->beginDate) ? $this->getFormValue('beginRegisterDate', $data->beginDate) : date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')), _M('Data inicial de registro', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $fldBeginDate->setJsHint(_M('Preencha este campo com a data de registro inicial dos títulos com pagamentos', $module));
        $fields[] = $fldBeginDate;
        $validators[] = new MRequiredValidator('beginRegisterDate');

        $fldEndDate = new MCalendarField('endRegisterDate', $this->getFormValue('endRegisterDate', $data->endDate) ? $this->getFormValue('endRegisterDate', $data->endDate) : date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')), _M('Data de registro final', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $fldEndDate->setJsHint(_M('Preencha este campo com a data de registro final dos títulos com pagamentos', $module));
        $fields[] = $fldEndDate;
        $validators[] = new MRequiredValidator('endRegisterDate');

        $fields[] = new MButton('generate', _M('Gerar', $module), 'SUBMIT');
        $fields[] = new Separator('');
        
        $this->setLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setShowPostButton(false);
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function generate_click($sender = NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $business = new BusinessFinanceBusEntry();

        $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdCheckManualEntries', $data);
        $grdResults->setData($business->listManualEntries($data));
        $this->addField(new Separator('<hr>'));
        $this->addField($grdResults);
    }

    /**
     *
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     *
     */
    public function getTypesData()
    {
        $data->beginRegisterDate = $this->beginRegisterDate->value;
        $data->endRegisterDate   = $this->endRegisterDate->value;
        return $data;
    }
}
?>
