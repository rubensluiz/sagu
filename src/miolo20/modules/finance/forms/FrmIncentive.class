<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finIncentive table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * 
 * @since
 * Class created on 29/12/2005
 *
 **/

/**
 * Form to search the basCenter table
 */
class FrmIncentive extends SManagementForm
{
    public $validatorsDate;
    /**
     * Class constructor
     */
    public function __construct()
    {
        parent::__construct(new FinIncentive(), array('incentiveId'), 'BusIncentive');
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        // Para o fluxo de aprovações
        if ( !strlen($MIOLO->_REQUEST('fluxosolicitacaoid')) > 0 )
        {
            $fields[] = FinFluxoAprovacaoConfiguracao::obterAvisoDeQueOProcessoPossuiConfiguracao(FinFluxoAprovacaoProcesso::CONCESSAO_DE_CONVENIOS);
            
            if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
            {
                $pk = $this->getObjectPk();
                $incentiveId = $pk->incentiveId;

                $business = new BusinessFinanceBusIncentive();
                $data     = $business->getIncentive($incentiveId);

                $fields[]  = new MHiddenField('incentiveId', $incentiveId);
                $fields[]  = new MTextLabel('incentiveId', $data->incentiveId, _M('Código', $module));
            }

            $limbo = new MHiddenField('limbo', '');
            $fields[] = $limbo;
            
            //Field person
            $contractPersonIdLabel = new MText('contractPersonIdLabel', _M('Pessoa',$module).':');
            $contractPersonIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $contractPersonIdLabel->setClass('m-caption m-caption-required');
            $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId',$data->contractPersonId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, array('contractId', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'contractUnitId'), 'academic', 'ActivePersonContract', null, array('personId' => 'contractPersonId'), array('personId' => 'contractPersonId'), !$MIOLO->page->isPostBack());
            $validators[]     = new MIntegerValidator('contractPersonId', _M('Pessoa',$module), 'required');
            $contractPersonId->setJsHint(_M('Informe o código da pessoa',$module));
            $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName',$this->incentiveSearch->contractPersonName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $contractPersonName->setReadOnly(true);
            $contractPersonName->setJsHint(_M('Nome da pessoa', $module));
            $hctPerson = new MHContainer('hctPerson', array($contractPersonIdLabel, $contractPersonId, $contractPersonName));
            $hctPerson->setShowLabel(true);
            $fields[]  = $hctPerson;

            //Field contract
            $contractIdLabel = new MText('contractIdLabel', _M('Contrato',$module).':');
            $contractIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $contractIdLabel->setClass('m-caption m-caption-required');
            $contractId = new MLookupTextField('contractId', $data->contractId ? $data->contractId : $this->getFormValue('contractId', $data->contractId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, array('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'limbo', 'contractUnitId'), 'academic', 'Contract', null, array(),  true);
            $contractId->setJsHint(_M('Informe o código do contrato', $module));
            $validators[]     = new MIntegerValidator('contractId', _M('Contrato',$module), 'required');
            $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId',$this->incentiveSearch->contractCourseId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $contractCourseId->setReadOnly(true);
            $contractCourseId->setJsHint(_M('Código do curso', $module));
            $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion',$this->incentiveSearch->contractCourseVersion), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $contractCourseVersion->setReadOnly(true);
            $contractCourseVersion->setJsHint(_M('Versão do curso', $module));
            $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName',$this->incentiveSearch->contractCourseName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $contractCourseName->setReadOnly(true);
            $contractCourseName->setJsHint(_M('Nome do curso', $module));
            $hctContract = new MHContainer('hctContract', array($contractIdLabel, $contractId, $contractCourseId, $contractCourseVersion, $contractCourseName));
            $hctContract->setShowLabel(true);
            $fields[]    = $hctContract;

            //field insentive type
            $insentiveTypeIdLabel = new MText('insentiveTypeIdLabel', _M('Tipo de incentivo',$module).':');
            $insentiveTypeIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $insentiveTypeIdLabel->setClass('m-caption m-caption-required');
            $incentiveTypeId = new MLookupTextField('incentiveTypeId', $this->getFormValue('incentiveTypeId',$data->incentiveTypeId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'incentiveTypeDescription', $module, 'IncentiveType', null, null, true);
            $incentiveTypeId->setJsHint(_M('Informe o código do tipo de incentivo',$module));
            $incentiveTypeId->addAttribute('onblur', SForm::getAjaxAction('exibeCampoPatrocinio', 'divPatrocinio', false));
            $validators[] = new MIntegerValidator('incentiveTypeId', _M('Tipo de incentivo',$module), 'required');
            $incentiveTypeDescription = new MTextField('incentiveTypeDescription', $this->getFormValue('incentiveTypeDescription',$this->incentiveSearch->incentiveTypeDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $incentiveTypeDescription->setReadOnly(true);
            $incentiveTypeDescription->setJsHint(_M('Descrição do tipo de incentivo', $module));
            $hctIncentive = new MHContainer('hctIncentive', array($insentiveTypeIdLabel, $incentiveTypeId, $incentiveTypeDescription));
            $hctIncentive->setShowLabel(true);
            $fields[]  = $hctIncentive;
            
            $fields[] = new MSeparator();
                        
            $args->incentiveTypeId = (strlen($data->incentiveTypeId) > 0) ? $data->incentiveTypeId : $args->incentiveTypeId;
            $args->incentiveId = (strlen($incentiveId) > 0) ? $incentiveId : $args->incentiveId;
            $div = new MDiv('divPatrocinio', $this->exibeCampoPatrocinio($args));
            $fields[] = $div;

            //Field start date
            $startDate = new MCalendarField('startDate', $this->getFormValue('startDate', $data->startDate), _M('Data inicial',$module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
            $startDate->setJsHint(_M('Informe a data inicial', $module));
            $startDate->setValidator(new MDATEDMYValidator('startDate', _M('Data inicial', $module), 'required'));
            $fields[] = $startDate;
            $validators[] = new MRequiredValidator('startDate');

            //Field end date
            $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), _M('Data final',$module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
            $endDate->setJsHint(_M('Informe a data de término', $module));
            $endDate->setValidator(new MDATEDMYValidator('endDate', _M('Data final', $module), 'required'));
            $fields[] = $endDate;
            $validators[] = new MRequiredValidator('endDate');

            // get Yes and No for Radio Button
            $messagesType =  SAGU::listTrueFalse(1);
            $valueIsPercentLabel = new MText('valueIsPercentLabel', _M('Valor é percentual',$module).':');
            $valueIsPercentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $valueIsPercentLabel->setClass('m-caption m-caption-required');
            $valueIsPercent = $this->GetFormValue('valueIsPercent', $data->valueIsPercent ? $data->valueIsPercent : t );

            $valueIsPercent = new MRadioButtonGroup('valueIsPercent', '', $messagesType, $valueIsPercent, null, 'horizontal');
            $valueIsPercent->SetShowLabel(false);
            $hctValueIsPercent = new MHContainer('hctValueIsPercent', array($valueIsPercentLabel, $valueIsPercent));
            $fields[]  = $hctValueIsPercent;

            //Field value
            $value = new MTextField('value', SAGU::formatNumber($this->getFormValue('value', $data->value)), _M('Valor', $module), SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'), _M('Ex.: 1.00', $module));
            $value->setJsHint(_M('Informe o valor', $module));
            $validators[] = new MFloatValidator('value', _M('Valor', $module), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), 'required');
            $fields[] = $value;

            // get Yes and No for Radio Button
            $messagesType =  SAGU::listTrueFalse(1);
            $agglutinateLabel = new MText('agglutinateLabel', _M('Aglutinar',$module).':');
            $agglutinateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $agglutinateLabel->setClass('m-caption m-caption-required');
            $agglutinate = $this->GetFormValue('agglutinate', $data->agglutinate ? $data->agglutinate : f );

            $agglutinate = new MRadioButtonGroup('agglutinate', '', $messagesType, $agglutinate, null, 'horizontal');
            $agglutinate->SetShowLabel(false);
            $hctAgglutinate = new MHContainer('hctAgglutinate', array($agglutinateLabel, $agglutinate));
            $fields[]  = $hctAgglutinate;

            //Field cost center
            $costCenterIdLabel = new MText('costCenterIdLabel', _M('Centro de custo',$module) . ':');
            $costCenterIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $costCenterId = new MLookupTextField('costCenterId', $this->getFormValue('costCenterId',$data->costCenterId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'),  null, null, 'costCenterDescription', 'accountancy', 'CostCenter', null, null, true);
            $costCenterId->setJsHint(_M('Informe o código do centro de custos',$module));
            $validators[]  = new MRegExpValidator('costCenterId', _M('Centro de custo', $module), '^[0-9]+(\.[0-9]+)*$');
            $costCenterDescription = new MTextField('costCenterDescription', $this->getFormValue('costCenterDescription',$this->incentiveSearch->costCenterDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $costCenterDescription->setReadOnly(true);
            $costCenterDescription->setJsHint(_M('Descrição do centro de custo', $module));
            $hctCostCenter = new MHContainer('hctCostCenter', array($costCenterIdLabel, $costCenterId, $costCenterDescription));
            $hctCostCenter->setShowLabel(true);
            $fields[]  = $hctCostCenter;
                
            $hintConceder = _M('(Valor nominal ou Saldo em aberto) - Define a forma em que o desconto será calculado, sobre o valor nominal do título <br>(somando os descontos caso houver mais de um) ou então aplicando somente em cima do saldo do título, neste caso aplicando conforme a ordem configurada.');
            $concederSobreLabel = new MText('concederSobreLabel', _M('Conceder desconto sobre',$module) . ':');
            $concederSobreLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $concederSobre = new MSelection('concederSobre', SAGU::NVL($this->GetFormValue('concederSobre', $data->concederSobre), FinIncentive::VALOR_NOMINAL), '', FinIncentive::tipoDeDesconto(), null, $hintConceder);
            $concederSobre->addAttribute('onchange', SForm::getAjaxAction('verificaPrioridade', 'divPrioridade', false));
            $hctConcederSobre = new MHContainer('hctConcederSobre', array($concederSobreLabel, $concederSobre));
            $hctConcederSobre->setShowLabel(true);
            $fields[] = $hctConcederSobre;
            
            $args->concederSobre = SAGU::NVL($this->GetFormValue('concederSobre', $data->concederSobre), FinIncentive::VALOR_NOMINAL);
            $args->prioridade = $this->getFormValue('prioridade', $data->prioridade);
            $fields[] = new MDiv('divPrioridade', $this->verificaPrioridade($args));
            
            if ( in_array($function, array(SForm::FUNCTION_UPDATE)) )
            {
                // Cancellation date
                $fields[] = new MCalendarField('cancellationDate', $this->getFormValue('cancellationDate', $data->cancellationDate), _M('Data de cancelamento', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
             
                $validators = array_merge($validators, $this->validatorsDate);
            }
            
            parent::defineFields($fields, $validators, $data);
        }
    }
    
    public function verificaPrioridade($args)
    {
        if ( $args->concederSobre == FinIncentive::SALDO_EM_ABERTO )
        {
            $prioridadeLabel = new MText('prioridadeLabel', _M('Prioridade') . ':');
            $prioridadeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $prioridadeLabel->setClass('m-caption m-caption');
            $prioridadeLabel->addAttribute('style', 'float:right');
            $hintPrioridade = _M('(Maior que zero) - Define a ordem em que o incentivo será aplicado, aplicando na ordem do menor ao maior sempre em cima do saldo do título.');
            $prioridade = new MIntegerField('prioridade', $args->prioridade, '', SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'), $hintPrioridade);
            
            $fields[] = new MHContainer($name, array($prioridadeLabel, $prioridade));
            
            $validators[] = new MIntegerValidator('prioridade', _M('Prioridade'));
            $this->SetValidators($validators);
        }
            
        return $fields;
    }
    
    public function exibeCampoPatrocinio($args)
    {
        if ( strlen($args->incentiveTypeId) > 0 )
        {
            $busSupport = new BusinessFinanceBusSupport();
            $patrocinio = $busSupport->getSupport($args->incentiveTypeId);
            
            $busLoan = new BusinessFinanceBusLoan();
            $financiamento = $busLoan->getLoan($args->incentiveTypeId);
        }
        
        if ( strlen($args->incentiveId) > 0 )
        {
            $business = new BusinessFinanceBusIncentive();
            $data = $business->getIncentive($args->incentiveId);
        }
                
        // Caso seja o incentivo seja do tipo patrocínio, exibe o lookup de patrocínioo
        if ( count($patrocinio) > 0 )
        {
            $supporterIdLabel = new MText('suporterIdLabel', _M('Patrocinador',$module).':');
            $supporterIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $supporterIdLabel->setClass('m-caption m-caption-required');
            $supporterIdLabel->addBoxStyle('margin-left', '62px');
            $supporterIdLabel->addBoxStyle('width', '78px');
            $supporterId = new MLookupTextField('supporterId', $this->getFormValue('supporterId',$data->supporterId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'),  null, null, 'supporterName', 'basic', 'Person', null, null, true);
            $supporterId->setJsHint(_M('Informe o código do patrocinador',$module));
            $validators[] = new MIntegerValidator('supporterId', _M('Patrocinador',$module), 'required');
            $supporterName = new MTextField('supporterName', $this->getFormValue('supporterName',$this->incentiveSearch->supporterName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $supporterName->setReadOnly(true);
            $supporterName->setJsHint(_M('Nome do patrocinador', $module));
            $hctSupporter = new MHContainer('hctSupporter', array($supporterIdLabel, $supporterId, $supporterName));
            $hctSupporter->setShowLabel(false);
            $fields[] = $hctSupporter;
        }
        
        $busCompany = new BusinessBasicBusCompany();
        $company = $busCompany->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));

        // Caso o incentivo seja do tipo financiamento e a pessoa jurídica atrelada ao financiamento é a mesma 
        // que a instituição, exibe campo Data inicial do pagamento do valor financiado
        if ( $financiamento->loanerId == $company->personId )
        {
            $labelData = new MText('labelData', _M('Data do valor financiado',$module) . ':');
            $labelData->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $labelData->setClass('m-caption m-caption-required');
            $labelData->addBoxStyle('margin-left', '62px');
            $labelData->addBoxStyle('width', '78px');
            $pagamentoValorFinanciado = new MCalendarField('pagamentoValorFinanciado', $this->getFormValue('pagamentoValorFinanciado', $data->pagamentoValorFinanciado), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'), _M('Data inicial do pagamento do valor financiado.', $module));
            $pagamentoValorFinanciado->setJsHint(_M('Informe a data inicial do pagamento do valor financiado', $module));
            $pagamentoValorFinanciado->setValidator(new MDATEDMYValidator('pagamentoValorFinanciado', _M('Data inicial do pagamento do valor financiado', $module), 'required'));
            $hctData = new MHContainer('hctData', array($labelData, $pagamentoValorFinanciado));
            $hctData->setShowLabel(false);
            $fields[] = $hctData;
            $validators[] = new MRequiredValidator('pagamentoValorFinanciado', _M('Data inicial do pagamento do valor financiado', $module), 'required');
            $validators[] = new MDATEDMYValidator('pagamentoValorFinanciado', _M('Data inicial do pagamento do valor financiado', $module), 'required');
        }
        
        $this->SetValidators($validators);
        return $fields;
    }
    
    public function SetValidators($validators)
    {
        parent::SetValidators($validators);
        $this->validatorsDate = $validators;
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender = null)
    {
        $MIOLO     = MIOLO::getInstance();
        $module    = MIOLO::getCurrentModule();
        $action    = MIOLO::getCurrentAction();
        $function  = MIOLO::_request('function');

        $data = $this->getTypesData();
        
        // Verifica se o processo possui fluxo de aprovações.
        FinFluxoAprovacaoConfiguracao::checarAcessoDoUsuarioAoProcesso(FinFluxoAprovacaoProcesso::CONCESSAO_DE_INCENTIVOS, $data->contractId, $data);

        $busIncentive = new BusinessFinanceBusIncentive();
        $periodo      = $busIncentive->obterUltimoPeriodoCursado($data->contractId, $data->startDate, $data->endDate);
        
        $ok = true;
        
        $busLearningperiod = new BusinessAcademicBusLearningPeriod();
        
        $busContract = new BusinessAcademicBusContract();
        
        $contract = $busContract->getContract($data->contractId);        
        
        $learningPeriodId = $busLearningperiod->getLearningPeriodByDatesPeriod($data->startDate, $data->endDate, $contract->courseId, $contract->courseVersion, $contract->turnId, $contract->unitId);
                
        $learningperiod = $busLearningperiod->getLearningPeriod($learningPeriodId);
        
        $filters = new stdClass();
        $filters->contractId = $data->contractId;
        $filters->periodId = $learningperiod->periodId;
        $filters->notCancelled = true;
        $filters->notExploitations = true;
        
        $busDiverseConsultation = new BusinessAcademicBusDiverseConsultation();        
        
        $reprocessarFinanceiro = false;
        
        //Busca se possui algum registro de matricula
        $enrollData = $busDiverseConsultation->getCurricularComponentCoursed($filters);
        
        // Verifica se o que mudou foi apenas a data do valor financiado e não reprocessa o financeiro.
        if ( $function == SForm::FUNCTION_UPDATE )
        {
            $incentivo = $busIncentive->getIncentive($data->incentiveId);
            $incentivo->userName = null;
            $incentivo->ipAddress = null;
            $incentivo->dateTime = null;
            $incentivo->incentivoAditado = null;
            
            $camposInalterados = true;
            foreach ( $incentivo as $campo => $valor )
            {
                if ( $data->$campo != $valor && $campo != 'pagamentoValorFinanciado' )
                {
                    $camposInalterados = false;
                }
            }
        }
        
        if ( count($enrollData) > 0 && !$camposInalterados )
        {
            $opcaoDeAjuste = MIOLO::_REQUEST('opcaoDeAjuste');
            if( strlen($opcaoDeAjuste) > 0 && strlen($learningPeriodId) > 0 )
            {
                $reprocessarFinanceiro = true;
            }
            else
            {
                $ok = false;
                
                //Adiciona opções na tela
                $opts['D'] = _M('Diluir valor pago nas parcelas restantes');
                $opts['A'] = _M('Abater parcelas sequentes com o valor pago');
                $fields[] = $selection = new MSelection('opcaoDeAjuste', null, _M('Opção de ajuste'), $opts, null, _M('Diluir igualmente o valor pago entre as parcelas em aberto ou abater o valor pago na próxima parcela e subsequentes'));
                $fields[] = new MSpacer();
                $this->AddFields($fields);
                $this->AddValidator(new MRequiredValidator('opcaoDeAjuste', _M('Opção de ajuste')));

                $this->AddInfo(_M("O contrato já possui matrícula no intervalo de datas do incentivo. <br> Selecione uma opção no campo 'Opção de ajuste' para atualizar o valor dos títulos e clique em salvar novamente.<br>Após confirmar o processo você deve conferir os títulos da pessoa atravéz das Consultas Diversas do financeiro."));
            }
        }
            
        try
        {
            if($function == 'update' && strlen($periodo[0][0]))
            {                                
                //obtém o percentual de aprovação
                $percentual = $busIncentive->obterPercentualDeAprovacoes($data->contractId, $periodo[0][0]);
                
                //obtém o percentual mínimo para renovar o incentivo
                $parse = $busIncentive->searchIncentive($data);

                if( (!($percentual[0][0] >= $parse[0][18])) && ($parse[0][18] != 0) )
                {
                     $ok = false;
                     $this->addError(_M('Aproveitamento abaixo de '.$parse[0][18].'% -'.$parse[0][6]).'<br> Não é possível renovar contrato.');
                }
            }
        }
        catch(Exception $e)
        {
            throw new Exception($e);
        }
        
        if( $ok )
        {
            $business      = new BusinessFinanceBusFinancialAid();
            $incentiveType = $business->getFinancialAid($data->incentiveTypeId);

            try 
            {
                if ( ($data->concederSobre == FinIncentive::SALDO_EM_ABERTO) && !($data->prioridade > 0) )
                {
                    throw new Exception(_M('O valor da prioridade deve ser um inteiro maior que zero(0).'));
                }
                
                if ( $data->concederSobre == FinIncentive::SALDO_EM_ABERTO )
                {
                    if ( BusinessFinanceBusIncentive::verificaPrioridadeDoIncentivo($data) == DB_TRUE )
                    {
                        throw new Exception(_M('Já existe um incentivo cadastrado para este intervalo de dados com a prioridade informada.'));
                    }
                }
        
                if ( (strtoupper($incentiveType->requireCostCenter) == strtoupper(DB_TRUE)) &&
                    (strlen($data->costCenterId) == 0) )
                {
                    throw new Exception(_M('Este incentivo requer um centro de custo',$module));
                }
                
                //Salva os dados
                $ok = $this->saveTypeData($sender);

                $this->salvaCamposCustomizaveis($ok);

                if( $reprocessarFinanceiro )
                {
                    //Reprocessa financeiro
                    $busReceivableInvoice = new BusinessFinanceBusReceivableInvoicePupil();
                    
                    if( SAGU::getParameter('BASIC', 'ENABLE_BUSINESS_USER') > '0' )
                    {
                        $busReceivableInvoice = new BusinessFinanceBusReceivableInvoicePupilUser();
                    }
                    $invoices = $busReceivableInvoice->generateReceivableInvoicesFromEnrollSummaries($data->contractId, $learningPeriodId, false);
                    
                    // Confirma a matrícula, caso atenda os requisitos
                    sPreMatricula::confirmacaoDePreMatricula($data->contractId, $learningPeriodId);
                }

                $this->confirmInsertUpdate($ok);
            
            }
            catch ( Exception $e )
            {
                $MIOLO = MIOLO::getInstance();
                $module = MIOLO::getCurrentModule();
                $cation = MIOLO::getCurrentAction();

                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
                $caption = _M('Erro', $module);
                $msg = $e->getMessage();
                if ( strlen($msg) == 0 )
                {
                    $msg = _M('Erro executando a operação solicitada.', $module);
                }

                $this->addError($e->getMessage());
            }
        }
    }
    
    public function getTypesData()
    {
        $data = parent::getTypesData();
        
        // Para o fluxo de aprovações
        $data = FinFluxoSolicitacaoRegistro::obterDadosDoRegistro($data); 
        
        return $data;
    }
    
    public function tbBtnDelete_confirm($sender = NULL) 
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        try
        {
            SDatabase::beginTransaction();
            $data = parent::getTypesData();

            $busIncentive = new BusinessFinanceBusIncentive();
            $incentivo = $busIncentive->getIncentive($data->incentiveId);

            $busDefaultOperation = new BusinessFinanceBusDefaultOperations();
            $opPagamento = $busDefaultOperation->getDefaultOperation('paymentoperation');

            $contractId = $incentivo->contractId;
            $paymentOperation = $opPagamento;
            $incentiveId = $data->incentiveId;

            parent::tbBtnDelete_confirm($sender);

            $ok = $busIncentive->excluiLancamentosDoIncentivo( $incentiveId, $contractId, $paymentOperation );
            
            SDatabase::commit();
        }
        catch ( Exception $e )
        {
            SDatabase::rollback();
            $MIOLO->error($e->getMessage());
        }
    }
}

?>
