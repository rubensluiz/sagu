<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Convenant form
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 *
 * @since
 * Class created on 23/11/2010
 *
 **/

/**
 * Form to manipulate a convenant
 **/

class FrmConvenant extends SManagementForm
{
    public $sub;
    
    /**
     * Class constructor
     **/
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        // If is the first access to form, clear subdetail session data
        if ( !$MIOLO->page->isPostBack() )
        {
            MSubDetail::clearData('ocorrenciasDoConvenio');
        }
        
        $MIOLO->uses('/ui/controls/msubdetail.class');
        
        parent::__construct(new FinConvenant(), array('convenantId'), 'BusConvenant');
    }
    
    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        // Field Convenant Id
        if ( in_array($function,array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $pk = $this->getObjectPk();
            $fields[] = new MTextLabel('', $pk->convenantId, _M('Código',$module));
            $fields[] = new MHiddenField('convenantId', $pk->convenantId);
            $convenantId = $pk->convenantId;
            $data = $this->busObject->getConvenant($pk->convenantId);
            // Set data subDetail
            $filter->convenantId = $convenantId;
            $dataSub = FinOcorrenciaDoConvenio::search($filter, true);
        }

        // Field description
        $description = new MTextField('description', $this->getFormValue('description', $data->description), _M('Descrição',$module), SAGU::getParameter('basic', 'FIELD_DESCRIPTION_SIZE'));
        $description->setJsHint(_M('Informe a descrição',$module));
        $fields[] = $description;
        $validators[] = new MRequiredValidator('description', _M('Descrição',$module));

        // Field value
        $value = new MTextField('value', $this->getFormValue('value', $data->value), _M('Valor',$module), SAGU::getParameter('basic', 'FIELD_MONETARY_SIZE'), 'Ex: 1.00');
        $value->setJsHint(_M('Informe o valor',$module));
        $fields[] = $value;
        $validators[] = new MFloatValidator('value', _M('Valor',$module), '.',2, 'required');

        //is percentual
        $isPercentualLabel = new MText('isPercentLabel', _M('É percentual', $module) . ':');
        $isPercentualLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $isPercentual = $this->GetFormValue('isPercent', $data->isPercent) ? $this->GetFormValue('isPercent', $data->isPercent) : DB_TRUE;
        $isPercentual = new MRadioButtonGroup('isPercent', '', SAGU::listTrueFalse(1), $isPercentual, null, 'horizontal');
        $isPercentual->SetShowLabel(false);
        $hctIsPercentual = new MHContainer('hctEasyAccess', array($isPercentualLabel, $isPercentual));
        $fields[] = $hctIsPercentual;
        
        // Field daysToDiscount
        $daysToDiscountLabel = new MText('daysToDiscountLabel', _M('Dias', $module));
        $daysToDiscountLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $daysToDiscount = new MTextField('daysToDiscount', $this->getFormValue('daysToDiscount', $data->daysToDiscount));
        $daysToDiscount->setJsHint(_M('Informe o numero de dias a descontar',$module) );
        $htcDaysToDiscount = new MHContainer('hctDaysToDiscount', array($daysToDiscountLabel, $daysToDiscount));
        $htcDaysToDiscount->setShowLabel(true);
        $flds[] = $htcDaysToDiscount;
        $validators[] = new MIntegerValidator('daysToDiscount', _M('Dias', $module));
        
        // Field beforeafter
        $beforeAfterLabel = new MText('beforeAfterLabel', _M('Antes ou depois do vencimento', $module));
        $beforeAfterLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $beforeAfterLabel->setClass('m-caption m-caption-required');
        $beforeAfter = $this->GetFormValue('beforeAfter', is_null($data->beforeAfter) ? 'A' : $data->beforeAfter);
        $beforeAfter = new MRadioButtonGroup('beforeAfter', '', array( array( _M('Antes',$module), 'B' ), array( _M('Depois', $module),'A' ) ), $beforeAfter, null, 'horizontal');
        $beforeAfter->setShowLabel(false);
        $htcBeforeAfter = new MHContainer('htcBeforeAfter', array($beforeAfterLabel, $beforeAfter));
        $flds[] = $htcBeforeAfter;


        //Field operation
        $label = new MText('convenantOperationLabel', _M('Operação de convênio', $module) . ':');
        $label->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
//        $operationIdLabel->setClass('m-caption m-caption-required');
        $convenantOperation = new MLookupTextField('convenantOperation', $this->getFormValue('convenantOperation', $data->convenantOperation), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'convenantOperationDescription', 'finance', 'Operation', null, null, true);
        $convenantOperation->setJsHint(_M('Informe o código da operação', $module));
        $validators[] = new MIntegerValidator('convenantOperation', _M('Operação de convênio', $module));
        $validators[] = new MRequiredValidator('convenantOperation', _M('Operação de convênio', $module));
        $description = new MTextField('convenantOperationDescription', $this->convenantOperationDescription->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $description->setReadOnly(true);
        $description->setJsHint(_M('Descrição da operação', $module));
        $hctCO = new MHContainer('hctCO', array($label, $convenantOperation, $description));
        $hctCO->setShowLabel(true);
        $fields[] = $hctCO;
        
        $percentual = new MIntegerField('percentRenovacao', $this->getFormValue('percentRenovacao', $data->percentRenovacao), _M('Percentual de aproveitamento para renovação', $module));
        $percentual->setJsHint(_M('%', $module));
        $validators[] =  new MIntegerValidator('percentRenovacao', _M('Percentual de aproveitamento para renovação', $module), 'required');
        $fields[] = $percentual;
        
        if(SAGU::getParameter('FINANCE', 'PERMITIR_ADITAR_INCENTIVOS') == 't')
        {
            // Aditamento
            $messagesType = SAGU::listTrueFalse(1);
            $aditarLabel = new MText('aditarLabel', _M('Permite que seja aditado', $module) . ':');
            $aditarLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $aditarIncentivo = $this->GetFormValue('aditarIncentivo', $data->aditarIncentivo ? $data->aditarIncentivo : DB_TRUE);
            $aditarIncentivo = new MRadioButtonGroup('aditarIncentivo', '', $messagesType, $aditarIncentivo, null, 'horizontal');
            $aditarIncentivo->SetShowLabel(false);
            $aditarIncentivo->setJsHint(_M('Caso habilitado impede que o título receba descontos da política', $module));
            $hctAditar = new MHContainer('hctAditar', array($aditarLabel, $aditarIncentivo));
            $fields[] = $hctAditar;
            
        }   

        // Identifica se o convenio é acumulativo ou não
        $acumulativoValue = $this->GetFormValue('acumulativo', is_null($data->acumulativo) ? DB_FALSE : $data->acumulativo);
        $fields[] = $acumulativo =  new MRadioButtonGroup('acumulativo', _M('Acumulativo'), SAGU::listTrueFalse(1), $acumulativoValue, null, 'horizontal');
        $acumulativo->setJsHint('Indica se o desconto é acumulativo, caso seja o valor pode ser somado a outro desconto');
        
        // Identifica se o convenio é condicional ou não
        $condicionalValue = $this->GetFormValue('condicional', is_null($data->condicional) ? DB_FALSE : $data->condicional);
        $condicional =  new MRadioButtonGroup('condicional', _M('Conceder de forma automática'), SAGU::listTrueFalse(1), $condicionalValue, null, 'horizontal');
        $condicional->setAutoPostBack(true);
        $condicional->setJsHint('Indica se a concessão do convênio é condicionado ao número de créditos que o aluno está matriculado');
        $condicional->addAttribute('onChange', "condicional_change()");
        $fields[] = $condicional;
 
        $detailFields[] = new MDiv('hintteste', _M('O convênio será concedido de forma automática a todos alunos que efetuarem matrícula nos cursos selecionados e atenderem o limite de créditos definido para o convênio'), 'm-hint');
        
        //Subdetail
        $detailFields[] = new SHiddenField('ocorrenciaDoConvenioId');
        // Ocorrencia de curso
        $lkpValue = array(
            $this->GetFormValue('courseId', $data->courseId),
            $this->GetFormValue('courseVersion', $data->courseVersion),
            $this->GetFormValue('turnId', $data->turnId),
            $this->GetFormValue('unitId', $data->unitId)
        );
        $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue);
        $detailFields[] = $courseOccurrenceLookup;
        $subValidators[] = new MRequiredValidator('courseId', _M('Curso'));
        $subValidators[] = new MRequiredValidator('courseVersion', _M('Versão'));
        $subValidators[] = new MRequiredValidator('turnId', _M('Turno'));
        $subValidators[] = new MRequiredValidator('unitId', _M('Unidade'));

        // Colunas da subdetail
        $columns[] = new MGridColumn(_M('Id', $module), 'left', true, '', false, 'ocorrenciaDoConvenioId');
        $columns[] = new MGridColumn(_M('Curso', $module), 'right', true, '', true, 'courseId');
        $columns[] = new MGridColumn(_M('Nome do curso', $module), 'left', true, '', true, 'courseName');
        $columns[] = new MGridColumn(_M('Versão', $module), 'right', true, '', true, 'courseVersion');
        $columns[] = new MGridColumn(_M('Turno', $module), 'left', true, '', true, 'turnDescription');
        $columns[] = new MGridColumn(_M('Unidade', $module), 'left', true, '', true, 'unitDescription');

        $fldsCondicional[] = $sub = new MSubDetail('ocorrenciasDoConvenio', _M('Conceder automaticamente para os alunos dos cursos'), $columns, $detailFields);        
        $sub->setValidators($subValidators);
        $sub->addActionEvent(MSubDetail::EVENT_ADD, 'eventSubAdd', __CLASS__);
        $this->sub = $sub;

        if ( $dataSub && MIOLO::_REQUEST('__EVENTTARGETVALUE') != 'tbBtnSave:click' )
        {
            MSubDetail::setData($dataSub, 'ocorrenciasDoConvenio');
        }
        
        // Field todas as disciplinas
        $todasDisciplinasLabel = new MLabel(_M('Matrícula em todas as disciplinas'). ':');
        $todasDisciplinasLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $todasDisciplinasValue = $this->GetFormValue('todasDisciplinas', is_null($data->todasDisciplinas) ? DB_FALSE : $data->todasDisciplinas);
        $todasDisciplinas = new MRadioButtonGroup('todasDisciplinas', null, SAGU::listTrueFalse(1), $todasDisciplinasValue, null, 'horizontal');
        $hint = new MDiv('hintteste', _M('Caso sim o convênio será concedido de forma automática aos alunos que cursarem todas as disciplinas de um semestre do curso'), 'm-hint');
        $todasDisciplinas->addAttribute('onChange', "todasDisciplinas_change()");
        $todasDisciplinas->setJsHint('Indica que o aluno só receberá o desconto caso se matricular em todas as disciplinas de um período do curso');
        $controls[] = new MHContainer('htcTodasDisciplinas',array($todasDisciplinasLabel,$todasDisciplinas, $hint)); 
        
        // Field crminimo 
        $crMinimoLabel = new MLabel(_M('Mínimo de créditos'). ':');
        $crMinimoLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $crMinimoLabel->setClass('m-caption m-caption-required');
        $crMinimoLabelValue = $this->GetFormValue('crMinimo', $data->crMinimo);
        $crMinimo = new MIntegerField('crMinimo', $crMinimoLabelValue, null, 10, 'Número mínimo de créditos para o aluno receber o convênio de forma automática');
        $controls[] = new MHContainer('htcCrMinimo',array($crMinimoLabel, $crMinimo)); 

        // Field crmaximo 
        $crMaximoLabel = new MLabel(_M('Máximo de créditos'). ':');
        $crMaximoLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $crMaximoLabel->setClass('m-caption m-caption-required');
        $crMaximoLabelValue = $this->GetFormValue('crMaximo', $data->crMaximo);
        $crMaximo = new MIntegerField('crMaximo', $crMaximoLabelValue, null, 10, 'Número máximo de créditos para o aluno receber o convênio de forma automática');
        $controls[] = new MHContainer('htcCrMaximo',array($crMaximoLabel, $crMaximo)); 

        $fldsCondicional[] = new MBaseGroup('tesg', _M('Condicional pelo número de créditos'), $controls, 'vertical');

        unset($controls);
        // Field aplicaCalouros 
        $aplicaCalourosLabel = new MLabel(_M('Calouros'). ':');
        $aplicaCalourosLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $aplicaCalourosValue = $this->GetFormValue('aplicaCalouros', is_null($data->aplicaCalouros) ? DB_FALSE : $data->aplicaCalouros);
        $aplicaCalouros = new MRadioButtonGroup('aplicaCalouros', null, SAGU::listTrueFalse(1), $aplicaCalourosValue, null, 'horizontal');
        $hint = new MDiv('hintteste', _M('Caso sim concede o convênio automaticamente para alunos calouros dos cursos informados'), 'm-hint');
        $controls[] = new MHContainer('htcaplicaCalouros',array($aplicaCalourosLabel,$aplicaCalouros, $hint));
        // Field aplicaVeteranos 
        $aplicaVeteranosLabel = new MLabel(_M('Veteranos'). ':');
        $aplicaVeteranosLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $aplicaVeteranosValue = $this->GetFormValue('aplicaVeteranos', is_null($data->aplicaVeteranos) ? DB_FALSE : $data->aplicaVeteranos);
        $aplicaVeteranos = new MRadioButtonGroup('aplicaVeteranos', null, SAGU::listTrueFalse(1), $aplicaVeteranosValue, null, 'horizontal');
        $hint = new MDiv('hintteste', _M('Caso sim concede o convênio automaticamente para os alunos veteranos dos cursos informados'), 'm-hint');
        $controls[] = new MHContainer('htcaplicaVeteranos',array($aplicaVeteranosLabel,$aplicaVeteranos, $hint)); 
        $fldsCondicional[] = new MBaseGroup('aplicarpara', _M('Conceder para alunos'), $controls, 'vertical');

        // Field concederPeriodo
        unset($controls);
        $concederPeriodoLabel = new MLabel(_M('Tipo de período'). ':');
        $concederPeriodoLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $concederPeriodoValue = $this->GetFormValue('concederPeriodo', is_null($data->concederPeriodo) ? 'O' : $data->concederPeriodo);
        $options[] = array(_M('Período de matrícula', 'basic'),'M');
        $options[] = array(_M('Período de ajuste de matrícula', 'basic'),'A');
        $options[] = array(_M('Ambos', 'basic'),'O');
        
        $concederPeriodo = new MRadioButtonGroup('concederPeriodo', null, $options, $concederPeriodoValue, null, 'horizontal');
        $hint = new MDiv('hintteste', _M('Tipo de período de matrícula em que o convênio será aplicado automaticamente'), 'm-hint');
        $controls[] = new MHContainer('htcconcederPeriodo',array($concederPeriodoLabel,$concederPeriodo, $hint)); 
        $fldsCondicional[] = new MBaseGroup('aplicarpara', _M('Período de concessão'), $controls, 'vertical');
        $fields[] = $div = new MDiv('divCondicional', $fldsCondicional, 'm-form-row'); 
        
        $fields[] = new MSeparator();
        $fields[] = new MSeparator();        
        $fields[] = new MSeparator();
        $bsg = new BaseGroup('bsg',_M('Limite da aplicação', $module), $flds, 'vertical');
        $bsg->showLabel = true;
        $fields[] = $bsg;        
        
        $MIOLO->page->addJsCode("
            function condicional_change(){
                document.getElementById('condicional_0').checked ? document.getElementById('divCondicional').style.display = 'block' : document.getElementById('divCondicional').style.display = 'none';
            }            
            function todasDisciplinas_change(){
                document.getElementById('todasDisciplinas_0').checked ? document.getElementById('m_htcCrMinimo').style.display = 'none' : document.getElementById('m_htcCrMinimo').style.display = 'block';
                document.getElementById('todasDisciplinas_0').checked ? document.getElementById('m_htcCrMaximo').style.display = 'none' : document.getElementById('m_htcCrMaximo').style.display = 'block';
            }
        ");

        $this->page->onLoad('condicional_change(); todasDisciplinas_change();');
        parent::defineFields($fields, $validators, $data);
    }
  
    
    /**
     * Event triggered when user chooses Save from the toolbar
     */
    public function tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data = $this->getTypesData();
        $business = new BusinessFinanceBusConvenant();
       
        if ( $this->checkAjaxFields($data) )
        {
            // Begin transactions
            $business->beginTransaction();

            // Update
            if ( $function == SForm::FUNCTION_UPDATE )
            {
                $convenantId = $business->updateConvenant($data, true);
            }
            // Insert
            if ( $function == SForm::FUNCTION_INSERT )
            {
                $convenantId = $business->insertConvenant($data, true);
            }
            // Insert or update is ok
            if ( strlen($convenantId) > 0 )
            {
                // Insert registers of the subDetail
                $data->convenantId = $convenantId;
                $ok = $this->saveDataSubDetail($data);
                // Insert or update of the subDetail is ok
                if ( $ok )
                {
                    $business->commit();
                    // Confirm insert or update by smanagmentform
                    $this->confirmInsertUpdate($ok);
                }
            }
        }
        else
        {
            $this->addAlert(_M('Campos contendo * são de preenchimento obrigatório', $module));
        }
    }

    
    /**
     * Método para verificar se os campos carregados por ajax estão preenchidos
     * @param type $data
     * @return boolean 
     */ 
    private function checkAjaxFields($data)
    {
        $okAjaxFields = true;

        if ( $data->condicional == DB_TRUE && $data->todasDisciplinas == DB_FALSE )
        {
            if ( strlen($data->crMinimo) <= 0 || strlen($data->crMaximo)<= 0 )
            {
                $okAjaxFields = false;
            }
        }
        
        return $okAjaxFields;
    }
    
    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     */
    public function getTypesData()
    {
        $data = clone ($this->object);
        $vars = get_object_vars($data);

        foreach ( $vars as $var => $value )
        {
            $fieldName = $var;
            $data->$var = MIOLO::_REQUEST($fieldName);
        }

        // Get data subDetail
        if ( is_object($this->ocorrenciasDoConvenio) )
        {
            $data->ocorrenciasDoConvenio = $this->sub->getData('ocorrenciasDoConvenio');
        }

        return $data;
    }
    
    /**
     * Save data subdetail
     * @param type $data
     * @return type 
     */
    public function saveDataSubDetail($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $ok = true;
        // Data subDetail
        $dataSubDetail = $data->ocorrenciasDoConvenio;
        if ( is_array($dataSubDetail) )
        {
            foreach ( $dataSubDetail as $sub )
            {
                $ocorrenciaDoConvenio = new FinOcorrenciaDoConvenio();
                $ocorrenciaDoConvenio->ocorrenciaDoConvenioId = $sub->ocorrenciaDoConvenioId;
                $ocorrenciaDoConvenio->convenantId = $sub->convenantId;
                $ocorrenciaDoConvenio->courseId = $sub->courseId;
                $ocorrenciaDoConvenio->courseVersion = $sub->courseVersion;
                $ocorrenciaDoConvenio->turnId = $sub->turnId;
                $ocorrenciaDoConvenio->unitId = $sub->unitId;

                // Insert
                if ( !($sub->removeData) )
                {
                    $ocorrenciaDoConvenio->convenantId = SAGU::NVL($sub->convenantId, $data->convenantId);
                    $ok = $ocorrenciaDoConvenio->save();
                }
                else if ( ($sub->removeData) || ($data->condicional == DB_FALSE) )
                {
                    $ok = $ocorrenciaDoConvenio->delete();
                }                    
            }            
        }
        return $ok;
    }
    
    public function eventSubAdd($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule();
        
        $dados = MSubDetail::getData('ocorrenciasDoConvenio');
        
        foreach ( (array) $dados as $data )
        {
            if ( array($data->courseId, $data->courseVersion, $data->turnId, $data->unitId) ==
                 array($args->courseId, $args->courseVersion, $args->turnId, $args->unitId) )
            {
                $MIOLO->page->addAJAXJsCode("alert('Ops! Não é permitido adicionar dados repetidos.');");

                $args->courseId = null;
            }
        }

        return $args;
    }
}
?>
