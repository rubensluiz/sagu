<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Defaulter form
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 22/12/2005
 *
 **/

/**
 * Form to generate document defaulter
 **/
class FrmDefaulter extends SForm
{
    private $home;
    public $showForm;

    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $this->showForm = true;
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct( _M('Inadimplente', $module), null, null );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {

        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        //Information to fill the dates
        $fields[] = new MText('txtInfoDate', _M('Informar um intervalo de datas para emitir o relatório de inadimplente.', $module));
        
        //Begin date for filter defaulter.
        $beginDateLabel = new MText('beginDateLabel', _M('Data inicial', $module) . ':');
        $beginDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $beginDateLabel->setClass('m-caption m-caption-required');
        $beginDate      = new MCalendarField('beginDate', $this->getFormValue('beginDate'), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $validators[]   = new DateDMYValidator('beginDate', _M('Data inicial', $module), 'required');
        $beginDate->setJsHint(_M('Informe a data inicial', $module));
        $hctBeginDate   = new MHContainer('hctBeginDate', array($beginDateLabel, $beginDate));
        $hctBeginDate->setShowLabel(false);
        $fields[]       = $hctBeginDate;
        
        //End date for filter defaulter.
        $endDateLabel = new MText('endDateLabel', _M('Data final', $module) . ':');
        $endDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $endDateLabel->setClass('m-caption m-caption-required');
        $endDate      = new MCalendarField('endDate', $this->getFormValue('endDate'), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $endDate->setJsHint(_M('Informe a data de término', $module));
        $validators[] = new DateDMYValidator('endDate', _M('Data final', $module), 'required');
        $hctEndDate   = new MHContainer('hctEndDate', array($endDateLabel, $endDate));
        $hctEndDate->setShowLabel(false);
        $fields[]     = $hctEndDate;

        //Information to fill the date of maturity
        $fields[] = new MText('txtInfoDate', _M('Informar a data de vencimento dos títulos.', $module));
        
        //Maturity date for filter defaulter.
        $maturityDateLabel = new MText('maturityDateLabel', _M('Data de vencimento', $module) . ':');
        $maturityDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $maturityDateLabel->setClass('m-caption m-caption-required');
        $maturityDate      = new MCalendarField('maturityDate', $this->getFormValue('maturityDate'), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $validators[]      = new DateDMYValidator('maturityDate', _M('Data de vencimento', $module), 'required');
        $maturityDate->setJsHint(_M('Informe a data de vencimento', $module));
        $hctMaturityDate   = new MHContainer('hctMaturityDate', array($maturityDateLabel, $maturityDate));
        $hctMaturityDate->setShowLabel(false);
        $fields[]          = $hctMaturityDate;

        //Inform person type       
        $optsPerson[] = new MOption('optPhysical', 'physical', _M('Pessoa física', $module), true);
        $optsPerson[] = new MOption('optLegal'   , 'legal', _M('Pessoa jurídica', $module), false);
        $optsPerson[] = new MOption('optBoth'    , 'both', _M('Ambos', $module), false);

        $radPersonLabel     = new MText('radPersonLabel', _M('Tipo de pessoa',$module) . ':');
        $radPersonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $radPersonOption    = $this->GetFormValue('personOption', $data->personOption) ? $this->getFormValue('personOption', $data->personOption) : DB_TRUE;
        $radPersonOption    = new MRadioButtonGroup('personOption', '', $optsPerson, $personOption, null, 'horizontal');
        $radPersonOption->addAttribute('onChange', 'setDivEnrolled()');
        $radPersonOption->SetShowLabel(false);
        $hctRadPersonOption = new MHContainer('hctPersonOption', array($radPersonLabel, $radPersonOption));
        $fields[]  = $hctRadPersonOption;

        //Variable to create a space in front of the checkbox
        $limbo = new MText('limbo');
        $limbo->setvisibility(false);
        $limbo->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        //if document for enroled
        //Check box is enrolled
        $ckOnlyEnrolledLabel = new MText('ckOnlyEnrolledLabel', _M('Somente matriculados', $module));
        $ckOnlyEnrolled      = new MCheckBox('onlyEnrolled', strlen($this->getFormValue('onlyEnrolled', $data->onlyEnrolled))>0 ? $this->getFormValue('onlyEnrolled', $data->onlyEnrolled) : DB_TRUE);
        $ckOnlyEnrolled->addAttribute('onChange', 'setDivLetter();');
        $hctOnlyEnrolled     = new MHContainer('hctOnlyEnrolled', array($limbo, $ckOnlyEnrolled, $ckOnlyEnrolledLabel));

        //field period
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodLabel    = new MText('periodLabel', _M('Período',$module).':');
        $periodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $periodId       = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), '', $businessPeriod->listPeriod(), true );
        $periodId->setJsHint(_M('Selecione um período', $module));
        $hctPeriod      = new MHContainer('hctPeriod', array($periodLabel, $periodId));
        
        $divPeriod   = new MDiv('divPeriod', $hctPeriod, null, 'align=left');
        $vctEnrolled = new MVContainer('vctEnrolled', array ($hctOnlyEnrolled, $divPeriod));
        $fields[]    = new MDiv('divEnrolled', $vctEnrolled, null, 'align=left');

        //Option the report of letter
        $opts[] = new MOption('optReport', 'defaulterReport', _M('Relatório',$module), true);
        $opts[] = new MOption('optLetter', 'defaulterLetter', _M('Carta',$module), false);

        $generateOptionLabel = new MText('generateOptionLabel', _M('Opção de geração',$module).':');
        $generateOptionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $generateOption      = $this->GetFormValue('generateOption', $data->generateOption) ? $this->GetFormValue('generateOption', $data->generateOption) : DB_TRUE;
        $generateOption      = new MRadioButtonGroup('generateOption', '', $opts, $generateOption, null, 'horizontal');
        $generateOption->SetShowLabel(false);
        $generateOption->addAttribute('onChange', 'setDivLetter();');
        $hctGenerateOption   = new MHContainer('hctGenerateOption', array($generateOptionLabel, $generateOption));
        $fields[]            = $hctGenerateOption;

        unset($opts);
        
        // Criação do Radio Button. Generate option
        $opts[] = new MOption('optLetterA'       , 'defaulterLetterA'       , _M('Carta A',$module)           , true);
        $opts[] = new MOption('optLetterB'       , 'defaulterLetterB'       , _M('Carta B',$module)           , false);
        $opts[] = new MOption('optEnrollRejected', 'defaulterEnrollRejected', _M('Matriculas rejeitadas',$module)    , false);
        $opts[] = new MOption('optFirstSemEnroll', 'defaulterEnrollFirstSem', _M('Primeiro Período/Matriculado',$module), false);
                       
        $letterOptionLabel = new MText('letterOptionLabel', _M('Opção de carta',$module).':');
        $letterOptionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        $letterOption    = new MRadioButtonGroup('letterOption', '', $opts, '', null, 'horizontal');
        $letterOption->SetShowLabel(false);
        $letterOption->addAttribute('onChange', 'setDivTypeLetter();');
        $hctLetterOption = new MHContainer('letterOption', array($letterOptionLabel, $letterOption));
        $divLetterOption = new MDiv('divLetterOption', $hctLetterOption, null, 'align=left');
        
        $data->defaulterLetter         = file_get_contents($MIOLO->getModulePath("basic", "/documents/defaulterLetter.txt"));
        $data->defaulterLetterA        = file_get_contents($MIOLO->getModulePath("basic", "/documents/defaulterLetterA.txt"));
        $data->defaulterLetterB        = file_get_contents($MIOLO->getModulePath("basic", "/documents/defaulterLetterB.txt"));
        $data->defaulterEnrollRejected = file_get_contents($MIOLO->getModulePath("basic", "/documents/defaulterEnrollRejected.txt"));
        $data->defaulterEnrollFirstSem = file_get_contents($MIOLO->getModulePath("basic", "/documents/defaulterEnrollFirstSem.txt"));

        $defaulterLetterLabel = new MText('defaulterLetterLabel', '', null);
        $defaulterLetterLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        $defaulterLetter    = new MMultiLineField('defaulterLetter', strlen($this->getFormValue('defaulterLetter', $data->defaulterLetter))>0 ? $this->getFormValue('defaulterLetter', $data->defaulterLetter) : '', '', 50, 10, 90);
        $hctDefaulterLetter = new MHContainer('hctDefaulterLetter', array($defaulterLetterLabel, $defaulterLetter));
        
        $defaulterLetterA    = new MMultiLineField('defaulterLetterA', strlen($this->getFormValue('defaulterLetterA', $data->defaulterLetterA))>0 ? $this->getFormValue('defaulterLetterA', $data->defaulterLetterA) : '', '', 50, 10, 90);
        $hctDefaulterLetterA = new MHContainer('hctDefaulterLetterA', array($defaulterLetterLabel, $defaulterLetterA));

        $defaulterLetterB    = new MMultiLineField('defaulterLetterB', strlen($this->getFormValue('defaulterLetterB', $data->defaulterLetterB))>0 ? $this->getFormValue('defaulterLetterB', $data->defaulterLetterB) : '', '', 50, 10, 90);
        $hctDefaulterLetterB = new MHContainer('hctDefaulterLetterB', array($defaulterLetterLabel, $defaulterLetterB));

        $defaulterEnrollRejected    = new MMultiLineField('defaulterEnrollRejected', strlen($this->getFormValue('defaulterEnrollRejected', $data->defaulterEnrollRejected))>0 ? $this->getFormValue('defaulterEnrollRejected', $data->defaulterEnrollRejected) : '', '', 50, 10, 90);
        $hctDefaulterEnrollRejected = new MHContainer('hctDefaulterEnrollRejected', array($defaulterLetterLabel, $defaulterEnrollRejected));

        $defaulterEnrollFirstSem    = new MMultiLineField('defaulterEnrollFirstSem', strlen($this->getFormValue('defaulterEnrollFirstSem', $data->defaulterEnrollFirstSem))>0 ? $this->getFormValue('defaulterEnrollFirstSem', $data->defaulterEnrollFirstSem) : '', '', 50, 10, 90);
        $hctDefaulterEnrollFirstSem = new MHContainer('hctDefaulterEnrollFirstSem', array($defaulterLetterLabel, $defaulterEnrollFirstSem));

        $divDefaulterLetter         = new MDiv('divDefaulterLetter' , $hctDefaulterLetter, null, 'align=left');
        $divDefaulterLetterA        = new MDiv('divDefaulterLetterA', $hctDefaulterLetterA, null, 'align=left');
        $divDefaulterLetterB        = new MDiv('divDefaulterLetterB', $hctDefaulterLetterB, null, 'align=left');
        $divDefaulterEnrollRejected = new MDiv('divDefaulterEnrollRejected', $hctDefaulterEnrollRejected, null, 'align=left');
        $divDefaulterEnrollFirstSem = new MDiv('divDefaulterEnrollFirstSem', $hctDefaulterEnrollFirstSem, null, 'align=left');

        //Variable to create a space in front of the checkbox
        $limbo = new MText('limbo');
        $limbo->setvisibility(false);
        $limbo->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        
        //Containet the checkbox of the tools that has demo
        $ckSaveInfLabel = new MText('ckSaveInfoLabel', _M('Salvar informações', $module), 'black');
        $ckSaveInf      = new MCheckBox('saveInfo', strlen($this->getFormValue('saveInfo', $data->saveInfo))>0 ? $this->getFormValue('saveInfo', $data->saveInfo) : DB_TRUE, '');
        $hctSaveInf     = new MHContainer('hctSaveInfo', array($limbo, $ckSaveInf, $ckSaveInfLabel));

        $vctLetter    = new MVContainer('vctLetter', array($divDefaulterLetter, $divDefaulterLetterA, $divDefaulterLetterB, $divDefaulterEnrollRejected, $divDefaulterEnrollFirstSem, $hctSaveInf));
        $vctDivLetter = new MVContainer('vctDivLetter', array($divLetterOption, $vctLetter));
        $fields[]     = new MDiv('divLetter', $vctDivLetter, null, 'align=left');
        
        unset($opts);
        // Generate option
        $opts[] = new MOption('optPdf', 'pdf', _M('Arquivo PDF (não editável)', $module), true);
        $opts[] = new MOption('optSxw', 'sxw', _M('Documento do OpenOffice.org Writer (editável)', $module), false);

        $radFileTypeLabel = new MText('radFileTypeLabel', _M('Tipo de arquivo',$module) . ':');
        $radFileTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $fileOption       = $this->GetFormValue('fileOption', $data->fileOption) ? $this->GetFormValue('fileOption', $data->fileOption) : DB_TRUE;

        $fileOption    = new MRadioButtonGroup('fileOption', '', $opts, $fileOption, null, 'horizontal');
        $fileOption->SetShowLabel(false);
        $hctFileOption = new MHContainer('hctFileOption', array($radFileTypeLabel, $fileOption));
        $fields[]      = $hctFileOption;

        $emissionDateLabel = new MText('emissionDateLabel', _M('Data de emissão', $module) . ':');
        $emissionDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $emissionDateLabel->setClass('m-caption m-caption-required');
        
        $emissionDate = new MCalendarField('emissionDate', strlen($this->getFormValue('emissionDate'))>0 ? $this->getFormValue('emissionDate') : date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $emissionDate->setJsHint(_M('Informe a data de emissão', $module));
        $validators[] = new DateDMYValidator('emissionDate', null, 'required');

        $hctEmissionDate = new MHContainer('hctEmissionDate', array($emissionDateLabel, $emissionDate));
        $hctEmissionDate->setShowLabel(false);
        $fields[]        = $hctEmissionDate;

        $this->page->addJsCode('setDivEnrolled();');
        $this->page->addJsCode('setDivLetter();');
        $jsCode =
<<<HERE
    function setDivEnrolled()
    {
        if ( (document.getElementById('personOption_optPhysical').checked == true) )
        {
            document.getElementById('divEnrolled').style.display = 'block';
            setDivLetter();
        }
        else
        {
            document.getElementById('divEnrolled').style.display = 'none';
            setDivLetter();
        }
    }
    
    function setDivLetter()
    {
        if ( document.getElementById('onlyEnrolled').checked == true )
        {
            document.getElementById('divPeriod').style.display = 'block';
        }
        else
        {
            document.getElementById('divPeriod').style.display = 'none';
        }

        if ( document.getElementById('generateOption_optLetter').checked == true )
        {
            if ( document.getElementById('personOption_optPhysical').checked == true )
            {
                if ( document.getElementById('onlyEnrolled').checked == true )
                {
                    document.getElementById('divLetter').style.display          = 'block';
                    document.getElementById('divLetterOption').style.display    = 'block';
                    document.getElementById('divDefaulterLetter').style.display = 'none';

                    setDivTypeLetter();
                }
                else
                {
                    document.getElementById('divLetter').style.display           = 'block';
                    document.getElementById('divDefaulterLetter').style.display  = 'block';
                    document.getElementById('divLetterOption').style.display     = 'none';
                    document.getElementById('divDefaulterLetterA').style.display = 'none';
                    document.getElementById('divDefaulterLetterB').style.display = 'none';
                    document.getElementById('divDefaulterEnrollRejected').style.display = 'none';
                    document.getElementById('divDefaulterEnrollFirstSem').style.display = 'none';
                }                
            }
            else
            {
                document.getElementById('divLetter').style.display           = 'block';
                document.getElementById('divDefaulterLetter').style.display  = 'block';
                document.getElementById('divLetterOption').style.display     = 'none';
                document.getElementById('divDefaulterLetterA').style.display = 'none';
                document.getElementById('divDefaulterLetterB').style.display = 'none';
                document.getElementById('divDefaulterEnrollRejected').style.display = 'none';
                document.getElementById('divDefaulterEnrollFirstSem').style.display = 'none';            
            }
        }
        else
        {
            document.getElementById('divLetter').style.display = 'none';
        }
    }
    
    function setDivTypeLetter()
    {
        if ( document.getElementById('personOption_optPhysical').checked == true )
        {
            if ( document.getElementById('letterOption_optLetterA').checked == true )
            {
                document.getElementById('divDefaulterLetterA').style.display = 'block';
                document.getElementById('divDefaulterLetterB').style.display = 'none';
                document.getElementById('divDefaulterEnrollRejected').style.display = 'none';
                document.getElementById('divDefaulterEnrollFirstSem').style.display = 'none';
            }
            if ( document.getElementById('letterOption_optLetterB').checked == true )
            {
                document.getElementById('divDefaulterLetterA').style.display = 'none';
                document.getElementById('divDefaulterLetterB').style.display = 'block';
                document.getElementById('divDefaulterEnrollRejected').style.display = 'none';
                document.getElementById('divDefaulterEnrollFirstSem').style.display = 'none';
            }
            if ( document.getElementById('letterOption_optEnrollRejected').checked == true )
            {
                document.getElementById('divDefaulterLetterA').style.display = 'none';
                document.getElementById('divDefaulterLetterB').style.display = 'none';
                document.getElementById('divDefaulterEnrollRejected').style.display = 'block';
                document.getElementById('divDefaulterEnrollFirstSem').style.display = 'none';
            }
            if ( document.getElementById('letterOption_optFirstSemEnroll').checked == true )
            {
                document.getElementById('divDefaulterLetterA').style.display = 'none';
                document.getElementById('divDefaulterLetterB').style.display = 'none';
                document.getElementById('divDefaulterEnrollRejected').style.display = 'none';
                document.getElementById('divDefaulterEnrollFirstSem').style.display = 'block';
            }
        }
        else
        {
            document.getElementById('divLetter').style.display = 'none';
        }
    }
HERE;
        $this->addJSCode($jsCode);

        $fields[] = new MSeparator('');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );
        
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('function' => 'print', 'event' => 'tbBtnPrint_click')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    /**
     * Event triggered when button search is clicked 
     */
     public function tbBtnPrint_click($sender = null)
     {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        set_time_limit(0);
        $MIOLO->uses('/core/AgataAPI.class');
        $api = new AgataAPI;

        $data->beginDate               = $this->getFormValue('beginDate');
        $data->endDate                 = $this->getFormValue('endDate');
        $data->maturityDate            = $this->getFormValue('maturityDate');
        $data->personOption            = $this->getFormValue('personOption');
        $data->onlyEnrolled            = $this->getFormValue('onlyEnrolled');
        $data->periodId                = $this->getFormValue('periodId');
        $data->generateOption          = $this->getFormValue('generateOption');
        $data->letterOption            = $this->getFormValue('letterOption');
        $data->defaulterLetter         = $this->getFormValue('defaulterLetter');
        $data->defaulterLetterA        = $this->getFormValue('defaulterLetterA');
        $data->defaulterLetterB        = $this->getFormValue('defaulterLetterB');
        $data->defaulterEnrollRejected = $this->getFormValue('defaulterEnrollRejected');
        $data->defaulterEnrollFirstSem = $this->getFormValue('defaulterEnrollFirstSem');
        $data->saveInfo                = $this->getFormValue('saveInfo');
        $data->fileOption              = $this->getFormValue('fileOption');
        $data->emissionDate            = $this->getFormValue('emissionDate');

        try
        {
            if ( $data->generateOption == 'defaulterLetter' )
            {
                if ( ($data->personOption == 'physical') && ($data->onlyEnrolled == DB_TRUE) )
                {
                    if ( $data->letterOption == 'defaulterLetterA' )
                    {
                        $genericLetter = $data->defaulterLetterA;
                    }
                    elseif ( $data->letterOption == 'defaulterLetterB' )
                    {
                        $genericLetter = $data->defaulterLetterB;
                    }
                    elseif ( $data->letterOption == 'defaulterEnrollRejected' )
                    {
                        $genericLetter = $data->defaulterEnrollRejected;
                    }
                    elseif ( $data->letterOption == 'defaulterEnrollFirstSem' )
                    {
                        $genericLetter = $data->defaulterEnrollFirstSem;
                    }
                    else
                    {
                        throw new Exception(_M('Opção inválida',$module).' !');
                    }
                }
                else
                {
                    $genericLetter = $data->defaulterLetter;
                }

                if ( strlen($genericLetter)>0 )
                {
                    //If true saves the changes to the letter
                    if ( $data->saveInfo == DB_TRUE )
                    {
                        if ( ! $fileOpen = fopen($MIOLO->getModulePath('basic', '/documents/'.$data->generateOption.'.txt'), 'w') ) 
                        {
                            throw new Exception(_M('Não foi possível brir o arquivo',$module) . ' ' . $fileOpen);
                        }

                        if ( fwrite($fileOpen, $genericLetter) === FALSE ) 
                        {
                            throw new Exception(_M('Não foi possível escrever no arquivo',$module) . ' ' . $fileOpen);
                        }

                        fclose($fileOpen);
                    }
                   
                    $genericLetter = str_replace("\r\n", '\</text:p\>\<text:p text:style-name="padrao"\>', $genericLetter);
                    $api->setParameter('$text', $genericLetter);
                }
                else
                {
                    throw new Exception(_M('Conteúdo da carta inválido', $module).' !');
                }

            }

            $business   = new BusinessFinanceBusDefaulter();
            $returnData = $business->getDefaulter($data);

            if ( is_array($returnData) != true )
            {
                throw new Exception(_M('Não há resultados para esta busca, tente outro intervalo de datas', $module).' !');
            }

            foreach( $returnData as $i => $v )
            {
                if ( ! is_null($v) )
                {
                    if ( $v[0] != $newPerson )
                    {
                        //Header of the document
                        $header[$newPerson][0] = $data->emissionDate; //Date on which the document was issued
                        $header[$newPerson][1] = $v[0]; //Person id
                        $header[$newPerson][2] = $v[1]; //Person name
                        $header[$newPerson][3] = $v[2]; //Address
                        $header[$newPerson][4] = $v[3]; //Number
                        $header[$newPerson][5] = $v[4]; //NeighBorhood
                        $header[$newPerson][6] = $v[5]; //Complement
                        $header[$newPerson][7] = $v[7]; //City
                        $header[$newPerson][8] = $v[8]; //State
                        $header[$newPerson][9] = $v[9]; //Zip code

                        $newPerson = $v[0];
                    }

                    //Body of the document
                    $body[0][$newPerson][$i] = array( $v[10], //Infoice id
                                                      $v[11], //Emission date
                                                      $v[12], //Maturity date
                                                      $v[13], //Value of title
                                                      $v[14], //Balance invoice id
                                                      $v[15], //Balance with polices invoice id
                                                    );
                }
            }
            $fileName = '/'.$data->generateOption.'.sxw';
            $filePath = $MIOLO->getModulePath('basic', '/documents/'.$data->generateOption.'.sxw');

            $api->setLanguage($MIOLO->getConf('i18n.language'));
            $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . $fileName);
            $api->setDataArray($header);
            $api->setSubDataArray($body);
            
            if ( ! $api->parseOpenOffice($filePath) )
            {
                throw new Exception(_M('O Agata retornou o seguinte erro: @1.', $module, $api->getError()));
            }

            if( $ok && $data->fileOption == 'pdf')
            {
                $outputPathPdf = '/defaulter'.$data->generateOption.'.pdf';
                $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . $outputPathPdf);

                if( ! $api->openOffice2pdf(SAGU::getParameter('BASIC', 'TEMP_DIR') . $fileName) )
                {
                    throw new Exception(_M('O Agata retornou o seguinte erro: @1.', $module, $api->getError()));
                }
            }

            $api->fileDialog();
        }
        catch ( Exception $e )
        {
            $this->addError($e->getMessage());
        }
    }
}
?>
