<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for fiReceivableInvoice table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 13/12/2005
 *
 **/
 
$MIOLO  = MIOLO::getInstance();
$MIOLO->uses('forms/FrmInvoiceConsult.class', 'finance');

/**
 * Form to search the finInvoice table
 */
class FrmReceivableInvoiceConsult extends FrmInvoiceConsult
{

    /**
     * Class constructor
     */
    public function __construct()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $this->module = $module;

        parent::__construct(_M('Localizar', $module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = $this->module;
        $function = MIOLO::_request('function');
        $data     = $this->getFormData();
        
        if ( strlen($data->policyId) > 0 )
        {                
            $this->createInvoiceFields($data);

            $sendDateLabel = new MText('sendDateLabel', _M('Data de envio', $module).':');
            $sendDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $sendDate      = new MTextLabel('sendDate', $this->getFormValue('sendDate', $data->sendDate));
            $hctSendDate   = new MHContainer('hctSendDate', array($sendDateLabel, $sendDate));
            $field[] = $hctSendDate;

            $returnDateLabel = new MText('returnDateLabel', _M('Data de retorno', $module).':');
            $returnDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $returnDate      = new MTextLabel('returnDate', $this->getFormValue('returnDate', $data->returnDate));
            $hctReturnDate   = new MHContainer('hctReturnDate', array($returnDateLabel, $returnDate));
            $field[] = $hctReturnDate;

            $returnFileLabel = new MText('returnFileId', _M('Arquivo de retorno', $module).':');
            $returnFileLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $returnFileId    = new MTextLabel('returnFileId', $this->getFormValue('returnFileId', $data->returnFileId));

            $fileNameLabel = new MText('fileName', _M('Nome do arquivo', $module).':');
            $fileName      = new MTextLabel('fileName', $this->getFormValue('fileName', $data->fileName));
            $hctFileName   = new MHContainer('hctFilename', array($fileNameLabel, $fileName));
            $field[]       = $hctFileName;

            $field[] = new MHiddenField('goto', MIOLO::_request('goto') ? MIOLO::_request('goto') : $this->getFormValue('goto', $goto));

            $field[] = new Separator('');

            $field3[] = new MVContainer('vctReceivableInvoice', $field);
            $fields[] = new MBaseGroup('bgReceivableInvoice', _M('Informação do título a receber', $module), $field3);
            $fields[] = new MSeparator('');

            $this->addFields($fields);
            $this->setLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $this->setShowPostButton(false);
            $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        }
        else
        {            
            $this->AddField(Prompt::Information(_M('Não é possível consultar este título pois ele não possui uma política.'), $MIOLO->GetActionURL($module, 'diverseConsultation')));
        }
    }

    /**
     * Function to get information about invoice and set this on form
     */
    public function getFormData()
    {
        $MIOLO     = MIOLO::getInstance();
        $module    = MIOLO::getCurrentModule();
        $action    = MIOLO::getCurrentAction();
        $invoiceId = MIOLO::_request('invoiceId') ? MIOLO::_request('invoiceId') : MIOLO::_request('invoiceId', 'GET');
        $businessReceivableInvoice = new BusinessFinanceBusReceivableInvoice();
        $busEntry = new BusinessFinanceBusEntry();
        $busContract = new BusinessAcademicBusContract();

        if (!$invoiceId)
        {
            $invoiceId = $businessReceivableInvoice->getInvoiceIdByBankInvoiceId(MIOLO::_request('returnBankCode'));
            if (!$invoiceId)
            {
                $MIOLO->Information(_M('Código de retorno do banco inválido', $module), MIOLO::_request('goto') ? MIOLO::_request('goto') : MIOLO::_request('goto', 'GET'));
            }
        }
        if (!$businessReceivableInvoice->verifyReceivableInvoice($invoiceId))
        {
            $MIOLO->Information(_M('Código do título a receber inválido', $module), MIOLO::_request('goto') ? MIOLO::_request('goto') : MIOLO::_request('goto', 'GET'));
        }

        $data = $businessReceivableInvoice->getReceivableInvoice($invoiceId);
        $data->invoiceId = $invoiceId;
        
        //Obter informações da ocorrência de curso quanto existir o contractid no lançamento do título
        $filter->invoiceId = $invoiceId;
        $lancamento = $busEntry->searchEntry($filter);        
        $contractId = $lancamento[0][12];

        
        if ( strlen($lancamento[0][12]) > 0 )
        {
            $contractId = $lancamento[0][12];
            $contrato = $busContract->getContract($contractId); 
        
            $data->courseId = $contrato->courseId;
            $data->courseVersion = $contrato->courseVersion;
            $data->turnId = $contrato->turnId;
            $data->unitId = $contrato->unitId;
        }
        else if (strlen ($lancamento[0][15]) > 0 )
        {
            $inscricaoId = $lancamento[0][15];
            $retorno = AcpInscricao::obterCursoInfo($inscricaoId);
            $data->cursoPedagogico = $retorno[0][0];
            $data->cursoPedagogicoId = $retorno[0][1];
            $data->unitId = $retorno[0][2];
        }
        
        return $data;
    }
}

?>
