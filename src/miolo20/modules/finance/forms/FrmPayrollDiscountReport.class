<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Defaulter form
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Samuel Koch [samuel@solis.coop.br]
 *
 * @since
 * Class created on 22/12/2005
 *
 **/

/**
 * Form 
 **/
class FrmPayrollDiscountReport extends MForm
{
    private $home;
    public $showForm;

    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $this->showForm = true;
        $module = MIOLO::getCurrentModule();

        $this->home   = $data->home;

        parent::__construct(_M('Desconto na folha de pagamento', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {

        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));

        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnSearch');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('PayrollDiscount', $this->home, 'payrollDiscount-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;
        

        // data inicial
        $beginDateLabel = new MText('beginDateLabel', _M('Data inicial',$module).':');
        $beginDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $beginDateLabel->setClass('m-caption m-caption-required');
        $beginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $beginDate->setJsHint(_M('Informe a data inicial',$module));
        $validators[] = new MDATEDMYValidator('beginDate', '', 'required');
        $hctBeginDate = new MHContainer('hctBeginDate', array($beginDateLabel, $beginDate));
        $hctBeginDate->setShowLabel(true);
        $field1[] = $hctBeginDate;

        // data final
        $endDateLabel = new MText('endDateLabel', _M('Data final',$module).':');
        $endDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $endDateLabel->setClass('m-caption m-caption-required');
        $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $endDate->setJsHint(_M('Informe a data de término',$module));
        $validators[] = new MDATEDMYValidator('endDate','', 'required');
        $hctEndDate = new MHContainer('hctEndDate', array($endDateLabel, $endDate));
        $hctEndDate->setShowLabel(true);
        $field1[] = $hctEndDate;



        // person 
        $personIdLabel = new MText('personIdLabel', _M('Código da pessoa', $module).':');
        $personIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
//        $field1[]      = $personIdLabel;
        $personId      = new MLookupTextField('personId', 
                                              $this->getFormValue('personId', $data->personId), 
                                              '',
                                              10,
                                              null, 
                                              null,
                                              array('personName', 'limbo', 'limbo', 'limbo', 'limbo'),
                                              'basic',
                                              'Person', 
                                              null,
                                              null,
                                              true);

//        $validators[] = new MIntegerValidator('personId');
        $personName   = new MTextField('personName', $this->getFormValue('personName', $data->personName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setReadOnly(true);
       
        $hctPerson = new MHContainer('hctPerson', array($personIdLabel, $personId, $personName));
        $hctPerson->setShowLabel(true);
        $field1[]   = $hctPerson;
//        $field1[]          = new MSeparator('');

        // Generate option
        $opts[] = new MOption('optPdf', 'pdf', _M('Arquivo PDF (não editável)', $module), true);
        $opts[] = new MOption('optSxw', 'sxw', _M('Documento do OpenOffice.org Writer (editável)', $module), false);

        $radFileTypeLabel = new MText('radFileTypeLabel', _M('Tipo de arquivo',$module) . ':');
        $radFileTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $generateOption = $this->GetFormValue('generateOption', $data->generateOption) ? $this->GetFormValue('generateOption', $data->generateOption) : 't';

        $generateOption = new MRadioButtonGroup('generateOption', '', $opts, $generateOption, null, 'horizontal');
        $generateOption->SetShowLabel(false);
        $hctGenerateOption = new MHContainer('hctGenerateOption', array($radFileTypeLabel, $generateOption));
        $field1[]  = $hctGenerateOption;
        

        // First group 
        $field1[]  = new MHiddenField('limbo', $this->getFormValue('limbo', $data->limbo));
        $fields[] = new MVContainer('container1', $field1);
        
        // Botao do primeiro Grupo.
        $btnGenerate = new MButton('btnGenerate', _M('Gerar', $module));
        $fieldss1[] = new MHContainer('hctBtn', array($btnGenerate));
        $fields[]  = $fieldss1;

        unset($field1);
        unset($fields1);
        unset($fieldss1);
      
        // fim do 1° grupo


        $this->setShowPostButton(false);

        $this->setFields($fields);
        $this->setLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $this->setValidators($validators);

        
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        $this->page->onLoad('document.' . $this->name . '.description.focus();');
    }

    /**
     * Event triggered when button search is clicked 
     */
     public function btnGenerate_click($sender = null)
     {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $data->personId       = $this->getFormValue('personId');
        $data->beginDate      = $this->getFormValue('beginDate');
        $data->endDate        = $this->getFormValue('endDate');
        $data->generateOption = $this->getFormValue('generateOption');


        $business = new BusinessFinanceBusPayrollDiscount();

      $returnData = $business->getPayrollDiscountReport($data);
      if($returnData == NULL)
      {
           $msg  = _M('Erro executando a operação solicitada.',$module);
           $goto = SAGU::getStackBackUrl();
           $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
           $caption = _M('Erro',$module);
           $MIOLO->error( $msg, $goto, $caption );
      }


      $returnNumber = count($returnData) ;

      $index = 0;
      for( $option = 0 ; $option < $returnNumber; $option++) 
      {
//            seta variaveis para percorrer dados para percorrer $returnData[$option][0] = personId
//                                                              $returnData[$option][17] = invoiceId
//                                                              $returnData[$option][11]  = contractId
           $y = $x ? $x : 0;
           $ay = $ax ? $ax : 0;
           $by = $bx ? $bx : 0;

           $x = $returnData[$option][0];
           $ax = $returnData[$option][17];
           $bx = $returnData[$option][11];


            
           if ( ( $x == $y ) AND ( $ax == $ay ) AND ( $bx == $by ) )
           {
                // Calcula itens.
               if($returnData[$option][7] == 'C')
               {

                   $arrayTotal[$index][0] = SAGU::calcNumber($arrayTotal[$index][0] . ' + ' . $returnData[$option][4]);
//                   $arrayTotal[$index][0] = $arrayTotal[$index][0] + $returnData[$option][4];
               }
                else
               {
                   $arrayTotal[$index][0] = SAGU::calcNumber($arrayTotal[$index][0] . ' - ' . $returnData[$option][4]);
//                   $arrayTotal[$index][0] = $arrayTotal[$index][0] - $returnData[$option][4];
               }

               
               // incrementa outras linhas da tabela
               $arrayS[0][$index][] = array($returnData[$option][6],$returnData[$option][7], $returnData[$option][4] );


           }
           else
           {

                $index++;   
                // incrementa cabeçario e primeira linha da tabela
                $percent = '??';
                $arrayTotal[$index][0] = 0;
                if($returnData[$option][14] == 't')
                {
                    $percent = 'Sim';
                }
                elseif($returnData[$option][14] == 'f')
                {
                    $percent = 'Não';
                }

                // Calcula itens.
               if($returnData[$option][7] == 'C')
               {
                   $arrayTotal[$index][0] =  $returnData[$option][4];
               }
                else
               {
                   $arrayTotal[$index][0] = SAGU::calcNumber($arrayTotal[$index][0] . ' - ' . $returnData[$option][4]);

               }

                    
                $array[$index] = array($returnData[$option][2],
                                       $returnData[$option][3],
                                       $returnData[$option][0],
                                       $returnData[$option][1],
                                       $returnData[$option][9],
                                       $returnData[$option][10],
                                       $returnData[$option][11],
                                       $returnData[$option][13],
                                       $percent );

//                $arrayTotal[$index][0] = $returnData[$option][4];

                $arrayS[0][$index][] = array($returnData[$option][6],$returnData[$option][7], $returnData[$option][4] );
           }
            
           //$countTotal =     count($array[$index]);
//               $array[$index][count($array[$index])] = $arrayTotal[$index][0] ;
        }
        
        
        $totalArray =  count($array) + 1; 
        for( $x = 1; $x < $totalArray ; $x++)
        {
            $array[$x][count($array[$x])] = $arrayTotal[$x][0] ;
        }
        
        $MIOLO->uses('/core/AgataAPI.class');
        $api = new AgataAPI;

        $api->setLanguage($MIOLO->getConf('i18n.language'));
        $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/payrollDiscount.sxw');
        $api->setDataArray($array);
        $api->setSubDataArray($arrayS);
        set_time_limit(0);
        $ok = $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/payrollDiscount.sxw'));

        if( $data->generateOption == 'f')
        {
            $ok = $api->openOffice2pdf('/agata/resources/defaulter.sxw');
            $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/payrollDiscount.pdf');
        }

        //se não conseguiu gerar o arquivo
        if ( !$ok )
        {
            $lblAgataError        = new MText('lblMsg1', $api->getError());
            $lblAgataError->color = 'red';
            $sep1                 = new Separator('');
            $cntErrors            = new MVContainer('cntErrors', array($lblAgataError,$sep));
            $this->divError->addControl($cntErrors);
        }
        else
        {
            $api->fileDialog();
        }
     }


    /**
     * Event triggered when button search is clicked 
     */
     public function btnReport_click($sender = null)
     {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $startDate      = $this->getFormValue('grp2StartDate');
        $endDate        = $this->getFormValue('grp2EndDate');
        $courseId       = $this->getFormValue('grp2CourseId');
        $courseId       = $this->getFormValue('grp2CourseId');
        $periodId       = $this->getFormValue('grp2PeriodId');
        $courseVersion  = $this->getFormValue('grp2CourseVersion');


     }

    /**
     * Event triggered when button search is clicked 
     */
     public function btnLetter_click($sender = null)
     {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $startDate      = $this->getFormValue('grp2StartDate');
        $endDate        = $this->getFormValue('grp2EndDate');
        $courseId       = $this->getFormValue('grp2CourseId');
//        $courseId       = $this->getFormValue('courseId');
        $periodId       = $this->getFormValue('grp2PeriodId');
        $courseVersion  = $this->getFormValue('grp2CourseVersion');


     }

    /**
     * Event triggered when button search is clicked 
     */
     public function btnMessage_click($sender = null)
     {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $startDate      = $this->getFormValue('grp2StartDate');
        $endDate        = $this->getFormValue('grp2EndDate');
        $courseId       = $this->getFormValue('grp2CourseId');
//        $courseId       = $this->getFormValue('courseId');
        $periodId       = $this->getFormValue('grp2PeriodId');
        $courseVersion  = $this->getFormValue('grp2CourseVersion');


     }



    /**
     * Get the data from form and put on a object
     **/
    public function getTypesData($sender = null)
    {
        $data->personId       = $this->getFormValue('personId');
        $data->personName     = $this->getFormValue('personName');
        $data->invoiceId      = $this->getFormValue('invoiceId');
        $data->returnBankCode = $this->getFormValue('returnBankCode');
        return $data;
    }
}
?>
