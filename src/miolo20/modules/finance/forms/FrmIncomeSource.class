<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * IncomeSource form
 *
 * @author Rudi Uhrig Neto [rudi@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 20/12/2005
 *
 **/

/**
 * Form to manipulate a incomeSource
 **/
class FrmIncomeSource extends SManagementForm
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new FinIncomeSource(), array('incomeSourceId'), 'BusIncomeSource');
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        if ( in_array($function,array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $pk = $this->getObjectPk();
            $fields[] = new MTextLabel('', $pk->incomeSourceId, _M('Código', $module));
            $fields[] = new MHiddenField('incomeSourceId', $pk->incomeSourceId);
            
            $data     = $this->busObject->getIncomeSource($pk->incomeSourceId);
        }

        $data->description = $this->getFormValue('description', $data->description);
        $descriptionLabel  = new MText('descriptionLabel', _M('Descrição', $module).':');
        $descriptionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $descriptionLabel->setClass('m-caption m-caption-required');
        $description       = new MTextField('description', $data->description, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $description->setJsHint(_M('Informe a descrição da operação', $module));
        $fields[]          = new MHContainer('hctDescription', array($descriptionLabel, $description));
        $validators[]      = new MRequiredValidator('description', _M('Descrição', $module));
        
        $isAgreementLabel = new MText('isAgreementLabel', _M('Relacionado a acordos?', $module).':');
        $isAgreementLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $isAgreementLabel->setClass('m-caption m-caption-required');
        $isAgreement      = new MRadioButtonGroup('isAgreement', '', SAGU::listTrueFalse(1), $this->getFormValue('isAgreement', $data->isAgreement) ? $this->getFormValue('isAgreement', $data->isAgreement) : 'f', '', 'horizontal');
        $isAgreement->setShowLabel(false);
        $fields[]         = new MHContainer('hctIsAgreement', array($isAgreementLabel, $isAgreement));

        if ( $function == SForm::FUNCTION_UPDATE )
        {
            $data->isExtinct = $this->getFormValue('isExtinct', $data->isExtinct);
            $isExtinctLabel = new MText('extinctLabel', _M('Está extinto', $module).':');
            $isExtinctLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $isExtinctLabel->setClass('m-caption m-caption-required');
            $isExtinct = new MRadioButtonGroup('isExtinct', '', SAGU::listTrueFalse(1), $this->getFormValue('isExtinct', $data->isExtinct) ? $this->getFormValue('isExtinct', $data->isExtinct) : 'f', '', 'horizontal');
            $isExtinct->setShowLabel(false);
            $fields[] = new MHContainer('hctIsExtinct', array($isExtinctLabel, $isExtinct));
        }
        else
        {
            $fields[] = new MHiddenField('isExtinct', DB_FALSE);
        }
        
        parent::defineFields($fields, $validators, $data);
    }
}
?>
