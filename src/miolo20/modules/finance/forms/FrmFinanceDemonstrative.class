<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Payroll Demostrative for finance
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * @maintainer: William Prigol Lopes [william@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Samuel Koch [samuel@solis.coop.br]
 *
 * @since
 * Class created on 22/12/2005
 *
 **/

/**
 * Form 
 **/
class FrmFinanceDemonstrative extends SForm
{
    private $home;
    public $showForm;

    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $this->showForm = true;
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct( _M('Demonstrativo para financeiro', $module), null, null );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {

        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        // Begin date
        $beginDateLabel = new MText('beginDateLabel', _M('Data inicial',$module).':');
        $beginDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $beginDateLabel->setClass('m-caption m-caption-required');
        $beginDate      = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $beginDate->setJsHint(_M('Informe a data inicial',$module));
        $validators[]   = new MDATEDMYValidator('beginDate', _M('Data inicial',$module), 'required');
        $hctBeginDate   = new MHContainer('hctBeginDate', array($beginDateLabel, $beginDate));
        $hctBeginDate->setShowLabel(true);
        $field1[]       = $hctBeginDate;

        // End date
        $endDateLabel = new MText('endDateLabel', _M('Data final',$module).':');
        $endDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $endDateLabel->setClass('m-caption m-caption-required');
        $endDate      = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $endDate->setJsHint(_M('Informe a data de término',$module));
        $validators[] = new MDATEDMYValidator('endDate',_M('Data final',$module), 'required');
        $hctEndDate   = new MHContainer('hctEndDate', array($endDateLabel, $endDate));
        $hctEndDate->setShowLabel(true);
        $field1[]     = $hctEndDate;

        // Person id and name
        $personIdLabel = new MText('personIdLabel', _M('Pessoa', $module).':');
        $personIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personIdLabel->setClass('m-caption m-caption-required');
        $personId      = new MLookupTextField('personId', $this->getFormValue('personId', $data->personId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, array('personName', 'limbo', 'limbo', 'limbo', 'limbo'), 'basic', 'Person', null, null, true);
        $personId->setJsHint(_M('Informe o código da pessoa', $module));
        $validators[]  = new MIntegerValidator('personId', _M('Pessoa', $module), 'required');
        $personName    = new MTextField('personName', $this->getFormValue('personName', $data->personName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setReadOnly(true);
        $personName->setJsHint(_M('Nome da pessoa', $module));
        $hctPerson     = new MHContainer('hctPerson', array($personIdLabel, $personId, $personName));
        $hctPerson->setShowLabel(true);
        $field1[]      = $hctPerson;
 
        // Operation id
        $data->operationId = explode(',', SAGU::getParameter('FINANCE', 'DEMONSTRATIVE_INCOME_TAX'));
        $businessOperation = new BusinessFinanceBusOperation();
        $dataOperation     = $businessOperation->listOperation();

        // Operation(s)
        $operationIdLabel     = new MText('operationIdLabel', _M('Operação',$module).':');
        $operationIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $operationIdLabel->setClass('m-caption m-caption-required');
        $selectionOperationId = new MMultiSelection('operationId', is_array($this->getFormValue('operationId', $data->operationId)) ?  $this->getFormValue('operationId', $data->operationId) : array($this->getFormValue('operationId', $data->operationId)), '', $dataOperation, true, null, 5);
        $selectionOperationId->setJsHint(_M('Selecione as operações', $module));
        $validators[]         = new MRequiredValidator('operationId', _M('Operação',$module));
        $hctOperationId       = new MHContainer('hctPerson', array($operationIdLabel, $selectionOperationId));
        $hctOperationId->setShowLabel(true);
        $field1[]             = $hctOperationId;
       
        // Demonstrative type
        $demonstrativeTypeOptions = array( array(_M('Para financeiro',    $module), 1),
                                           array(_M('Para imposto de renda', $module), 2) );
    
        $demonstrativeTypeLabel = new MText('demonstrativeTypeLabel', _M('Tipo de demonstrativo', $module).':');
        $demonstrativeTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $demonstrativeType      = new MRadioButtonGroup('demonstrativeType', null, $demonstrativeTypeOptions, strlen($this->getFormValue('demonstrativeType', $data->demonstrativeType))>0 ? $this->getFormValue('demonstrativeType', $data->demonstrativeType) : 1, 'vertical');
        $demonstrativeType->setShowLabel(false);
        $hctDemonstrativeType   = new MHContainer('hctDemonstrativeType', array($demonstrativeTypeLabel, $demonstrativeType));
        $field1[]               = $hctDemonstrativeType;
 
        // get Yes and No for Radio Button
        $messagesType = array( 
                             array(_M('Arquivo PDF (não editável)',$module), DB_TRUE),
                             array(_M('Documento do OpenOffice.org Writer (editável)',$module), DB_FALSE)
                             );

        // File format
        $generateOptionLabel = new MText('generateOptionLabel', _M('Tipo de arquivo', $module).':');
        $generateOptionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $generateOption      = $this->GetFormValue('generateOption', $data->generateOption) ? $this->GetFormValue('generateOption', $data->generateOption) : DB_TRUE;
        $generateOption      = new MRadioButtonGroup('generateOption', '', $messagesType, $generateOption, null, 'horizontal');
        $generateOption->SetShowLabel(false);
        $hctGenerateOption   = new MHContainer('hctGenerateOption', array($generateOptionLabel, $generateOption));
        $field1[]            = $hctGenerateOption;
        
        $field1[]  = new MHiddenField('limbo', $this->getFormValue('limbo', $data->limbo));
        $fields[]  = new MVContainer('container1', $field1);

        unset($field1);
        unset($fields1);
        unset($fieldss1);
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );
      
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('function' => 'print', 'event' => 'tbBtnPrint_click')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

   /**
    * Event triggered when button search is clicked 
    */
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $data->personId          = $this->getFormValue('personId');
        $data->beginDate         = $this->getFormValue('beginDate');
        $data->endDate           = $this->getFormValue('endDate');
        $data->generateOption    = $this->getFormValue('generateOption');
        $data->operationId       = $this->getFormValue('operationId');
        $data->demonstrativeType = $this->getFormValue('demonstrativeType');

        if ( !(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF')) )
        {
           $msg     = _M('Por favor, contate o administrador do sistema para configurar as informações da instituição', $module);
           $goto    = SAGU::getStackBackUrl();
           $goto    = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
           $caption = _M('Erro',$module);
           $MIOLO->error( $msg, $goto, $caption );
        }
        
        // Get database info
        $business    = new BusinessBasicBusCompany();
        $companyData = $business->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));
        $business    = new BusinessBasicBusLegalPerson();
        $legalData   = $business->getLegalPerson($companyData->personId);
        $business    = new BusinessFinanceBusDemonstrativeForIncomeTax();
        $returnData  = $business->getDemonstrativeForIncomeTax($data);
        $cnpj        = SAGU::formatCNPJ($legalData->cnpj);
    
        if ( $returnData == NULL )
        {
            $msg     = _M('Não foram encontradas informações para esta pessoa neste período', $module);
            $goto    = SAGU::getStackBackUrl();
            $goto    = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }

        $actualDate   = SAGU::getDateNow();
        $actualDate   = SAGU::getDateByExtense($actualDate);
        $returnNumber = count($returnData);

        $index = 0;
        for ( $option = 0 ; $option < $returnNumber; $option++ )
        {
            $y  = $x ? $x : 0;
            $ay = $ax ? $ax : 0;
            $x  = $returnData[$option][0];
            $ax = $returnData[$option][2];
            
            if (  $x == $y  )
            {
                $arrayS[0][$index][] = array(SAGU::getMonth($returnData[$option][2]), $returnData[$option][3], $returnData[$option][4]);
            }
            else
            {
                $index++;   
                $array[$index] = array( $returnData[$option][1],
                                        $returnData[$option][0],
                                        $legalData->name,
                                        $legalData->fakeName,
                                        $cnpj,
                                        $legalData->location,
                                        $legalData->number,
                                        $legalData->neighborhood,
                                        $legalData->cityName,
                                        $legalData->stateId,
                                        $data->beginDate,
                                        $data->endDate,
                                        $actualDate );

                $arrayS[0][$index][] = array(SAGU::getMonth($returnData[$option][2]), $returnData[$option][3], $returnData[$option][4]);
            }
        }
        $MIOLO->uses('/core/AgataAPI.class');
        $api = new AgataAPI;
        $api->setLanguage($MIOLO->getConf('i18n.language'));
        $outputPath = ($data->demonstrativeType == 1 ? '/demonstrativeForFinance.sxw' : '/demonstrativeForIncomeTax.sxw');
        $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . $outputPath);
        $api->setDataArray($array);
        $api->setSubDataArray($arrayS);
        
        try
        {
            $fileToParse = ($data->demonstrativeType == 1 ? '/documents/demonstrativeForFinance.sxw' : '/documents/demonstrativeForIncomeTax.sxw'); 
            $api->parseOpenOffice($MIOLO->getModulePath('basic', $fileToParse));
            if ( $data->generateOption == DB_TRUE )
            {
                $outputPath = ($data->demonstrativeType == 1 ? '/demonstrativeForFinance.pdf' : '/demonstrativeForIncomeTax.pdf');
                $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . $outputPath);
                
                $outputPDFPath = ($data->demonstrativeType == 1 ? '/demonstrativeForFinance.sxw' : '/demonstrativeForIncomeTax.sxw');
                $api->openOffice2pdf(SAGU::getParameter('BASIC', 'TEMP_DIR') . $outputPDFPath);
            }
            
            $api->fileDialog();

        }
        catch ( Exception $e )
        {
            $lblAgataError        = new MText('lblMsg1', $api->getError());
            $lblAgataError->color = 'red';
            $sep1                 = new Separator('');
            $cntErrors            = new MVContainer('cntErrors', array($lblAgataError,$sep));
            $this->divError->addControl($cntErrors);
        }
     }
}
?>
