<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Long term short term process form
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @since
 * Class created on 07/12/2005
 *
 **/

/**
 * Form to control income forecast generation
 **/
class FrmLongTermShortTerm extends SForm
{
    private $home;

    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct( _M('Transferir longo prazo para curto prazo', $module), null, null );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO   = MIOLO::getInstance();
        $module  = MIOLO::getCurrentModule();
        $action  = MIOLO::getCurrentAction();

        // Maturity period
        $maturityPeriodLabel      = new MText('maturityPeriod', _M('Período de vencimento', $module));
        $maturityPeriodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        // Initial maturity date
        $initialMaturityDateLabel = new MText('initialMaturityDateLabel', _M('Data inicial', $module).':');
        $initialMaturityDateLabel->setWidth(100);
        $initialMaturityDateLabel->setClass('m-caption m-caption-required');
        $initialMaturityDate = new MCalendarField('initialMaturityDate', $this->getFormValue('initialMaturityDate', $data->initialMaturityDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $initialMaturityDate->setJsHint(_M('Infome a data inicial de vencimento', $module));
        $validators[]             = new MDATEDMYValidator('initialMaturityDate', _M('Data inicial', $module), 'required');
        $hctInitialMaturityDate   = new MHContainer('hctInitialMaturityDate', array($initialMaturityDateLabel, $initialMaturityDate));

        // End maturity date
        $endMaturityDateLabel = new MText('endMaturityDateLabel', _M('Data final', $module).':');
        $endMaturityDateLabel->setWidth(100);
        $endMaturityDateLabel->setClass('m-caption m-caption-required');
        $endMaturityDate      = new MCalendarField('endMaturityDate', $this->getFormValue('endMaturityDate', $data->endMaturityDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $endMaturityDate->setJsHint(_M('Informe a data de vencimento final', $module));
        $hctEndMaturityDate   = new MHContainer('hctEndMaturityDate', array($endMaturityDateLabel, $endMaturityDate));
        $validators[]         = new MDATEDMYValidator('endMaturityDate', _M('Data final', $module), 'required');

        // Maturity date vertical container
        $vctMaturityDate = new MVContainer('vctMaturityDate', array($hctInitialMaturityDate, $hctEndMaturityDate));  

        $hctMaturityDate          = new MHContainer('hctMaturityDate', array($maturityPeriodLabel, $vctMaturityDate));
        $searchFields[]           = $hctMaturityDate;

        // search Course
        $searchCourseIdLabel = new MText('searchCourseIdLabel', _M('Curso', $module).':');
        $searchCourseIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $searchCourseIdLabel->setClass('m-caption m-caption-required');
        $searchCourseId      = new MLookupTextField('searchCourseId', $this->getFormValue('searchCourseId', $data->searchCourseId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'searchCourseName', 'academic', 'course', null, null, true);
        $searchCourseId->setJsHint(_M('Informe o código do curso', $module));
        $validators[]        = new MRequiredValidator('searchCourseId', _M('Código do curso',$module));
        $searchCourseName    = new MTextField('searchCourseName', $this->getFormValue('courseName', $data->courseName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $searchCourseName->setReadOnly(true);
        $searchCourseName->setJsHint(_M('Nome do curso', $module));
        $hctsearchCourse     = new MHContainer('hctsearchCourse', array($searchCourseIdLabel, $searchCourseId, $searchCourseName));
        $hctsearchCourse->setShowLabel(true);
        $searchFields[]      = $hctsearchCourse;

        // search Policy
        $searchPolicyIdLabel = new MText('searchPolicyIdLabel', _M('Política', $module).':');
        $searchPolicyIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $searchPolicyIdLabel->setClass('m-caption m-caption-required');
        $searchPolicyId      = new MLookupTextField('searchPolicyId', $this->getFormValue('searchPolicyId', $data->searchPolicyId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'searchPolicyName', $module, 'policy', null, null, true);
        $searchPolicyId->setJsHint(_M('Informe o código da política', $module));
        $validators[]        = new MIntegerValidator('searchPolicyId', _M('Política', $module), 'required');
        $searchPolicyName    = new MTextField('searchPolicyName', $this->getFormValue('searchPolicyName', $data->searchPolicyName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $searchPolicyName->setJsHint(_M('Descrição da política', $module));
        $searchPolicyName->setReadOnly(true);
        $hctsearchPolicy     = new MHContainer('hctsearchPolicy', array($searchPolicyIdLabel, $searchPolicyId, $searchPolicyName));
        $hctsearchPolicy->setShowLabel(true);
        $searchFields[]      = $hctsearchPolicy;

        $searchContainer[] = new MVContainer('vctSearch', $searchFields);
        
        $fields[] = new MBaseGroup('bgrSearch', _M('Informações para busca', $module), $searchContainer);
        //
        // End filter fields
        //

        //
        // Process fields
        //
        // Close operation
        $closeOperationLabel       = new MText('closeOperationLabel', _M('Operação de fechamento',$module).':');
        $closeOperationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $closeOperationLabel->setClass('m-caption m-caption-required');
        $closeOperationId          = new MLookupTextField('closeOperationId', $this->getFormValue('closeOperationId', $data->closeOperationId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'closeOperationDescription, closeOperationType', $module, 'operation', null, null, true);
        $closeOperationId->setJsHint(_M('Informe o código da operação de fechamento', $module));
        $validators[] = new MIntegerValidator('closeOperationId', _M('Operação de fechamento',$module), 'required');
        $closeOperationType        = new MTextField('closeOperationType', $this->getFormValue('closeOperationType', $data->closeOperationType), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $closeOperationType->setJsHint(_M('Tipo de operação de fechamento', $module));
        $closeOperationType->setReadOnly(true);
        $closeOperationDescription = new MTextField('closeOperationDescription', $this->getFormValue('closeOperationDescription', $data->closeOperationDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $closeOperationDescription->setJsHint(_M('Descrição da operação de fechamento', $module));
        $closeOperationDescription->setReadOnly(true);
        $hctCloseOperation         = new MHContainer('hctCloseOperation', array($closeOperationLabel, $closeOperationId, $closeOperationType, $closeOperationDescription));
        $hctCloseOperation->setShowLabel(true);
        $processFields[]           = $hctCloseOperation;

        // Open operation
        $openOperationLabel       = new MText('openOperationLabel', _M('Operação de abertura',$module).':');
        $openOperationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $openOperationLabel->setClass('m-caption m-caption-required');
        $openOperationId          = new MLookupTextField('openOperationId', $this->getFormValue('openOperationId', $data->openOperationId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'openOperationDescription, openOperationType', $module, 'operation', null, null, true);
        $openOperationId->setJsHint(_M('Informe o código da operação de abertura', $module));
        $validators[]             = new MIntegerValidator('openOperationId', _M('Operação de abertura', $module), 'required');
        $openOperationType        = new MTextField('openOperationType', $this->getFormValue('openOperationType', $data->openOperationType), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $openOperationType->setJsHint(_M('Tipo de operação de abertura', $module));
        $openOperationType->setReadOnly(true);
        $openOperationDescription = new MTextField('openOperationDescription', $this->getFormValue('openOperationDescription', $data->openOperationDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $openOperationDescription->setJsHint(_M('Descrição da operação de abertura', $module));
        $openOperationDescription->setReadOnly(true);
        $hctOpenOperation         = new MHContainer('hctOpenOperation', array($openOperationLabel, $openOperationId, $openOperationType, $openOperationDescription));
        $hctOpenOperation->setShowLabel(true); 
        $processFields[]          = $hctOpenOperation;

        // New course
        $newCourseIdLabel = new MText('newCourseIdLabel', _M('Novo curso', $module).':');
        $newCourseIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $newCourseIdLabel->setClass('m-caption m-caption-required');
        $newCourseId      = new MLookupTextField('newCourseId', $this->getFormValue('newCourseId', $data->newCourseId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'newCourseName', 'academic', 'course', null, null, true);
        $newCourseId->setJsHint(_M('Informe o código do curso', $module));
        $validators[]     = new MRequiredValidator('newCourseId', _M('Novo curso', $module));
        $newCourseName    = new MTextField('newCourseName', $this->getFormValue('newCourseName', $data->newCourseName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $newCourseName->setJsHint(_M('Nome do novo curso', $module));
        $newCourseName->setReadOnly(true);
        $hctNewCourse     = new MHContainer('hctNewCourse', array($newCourseIdLabel, $newCourseId, $newCourseName));
        $hctNewCourse->setShowLabel(true);
        $processFields[]  = $hctNewCourse;

        // New policy
        $newPolicyIdLabel = new MText('newPolicyIdLabel', _M('Nova política',$module).':');
        $newPolicyIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $newPolicyId      = new MLookupTextField('newPolicyId', $this->getFormValue('newPolicyId', $data->newPolicyId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'newPolicyName', $module, 'policy', null, null, true);
        $newPolicyId->setJsHint(_M('Informe o código da política', $module));
        $validators[]     = new MIntegerValidator('newPolicyId', _M('Nova política', $module));
        $newPolicyName    = new MTextField('newPolicyName', $this->getFormValue('newPolicyName', $data->newPolicyName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $newPolicyName->setJsHint(_M('Descrição da nova policy', $module));
        $newPolicyName->setReadOnly(true);
        $hctNewPolicy     = new MHContainer('hctOldPolicy', array($newPolicyIdLabel, $newPolicyId, $newPolicyName));
        $hctNewPolicy->setShowLabel(true);
        $processFields[]  = $hctNewPolicy;

        // Record date
        $recordDateLabel = new MText('recordDateLabel', _M('Data de gravação', $module).':');
        $recordDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $recordDate      = new MCalendarField('recordDate', strlen($this->getFormValue('recordDate', $data->recordDate))>0 ? $this->getFormValue('recordDate', $data->recordDate) : date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $recordDate->setJsHint(_M('Informe a data de gravação', $module));
        $hctRecordDate   = new MHContainer('hctRecordDate', array($recordDateLabel, $recordDate));
        $processFields[] = $hctRecordDate;
        
        // Bank account
        $businessBankAccount = new BusinessFinanceBusBankAccount();
        $bankAccountLabel    = new MText('bankAccountLabel', _M('Novo local de pagamento', $module).':');
        $bankAccountLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $bankAccount         = new MSelection('bankAccountId', $this->getFormValue('bankAccountId', $data->bankAccountId), '', $businessBankAccount->listBankAccount(), false);
        $bankAccount->setJsHint(_M('Selecione um local de pagamento', $module));
        $processFields[]     = new MHContainer('hctBankAccount', array($bankAccountLabel, $bankAccount));

        // Income source
        $businessIncomeSource = new BusinessFinanceBusIncomeSource();
        $incomeSourceLabel    = new MText('incomeSourceLabel', _M('Nova origem', $module).':');
        $incomeSourceLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $incomeSource         = new MSelection('incomeSourceId', $this->getFormValue('incomeSourceId', $data->incomeSourceId), '', $businessIncomeSource->listIncomeSource(), false);
        $incomeSource->setJsHint(_M('Selecione uma origem', $module));
        $processFields[]      = new MHContainer('hctIncomeSource', array($incomeSourceLabel, $incomeSource));

        // Process or simulate
        $typeLabel       = new MText('typeLabel', _M('Tipo', $module).':');
        $typeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $typeOptions = array(array(_M('Simular', $module), '0'),
                             array(_M('Processar',    $module), '1')
                            );
        $type            = new MRadioButtonGroup('type', '', $typeOptions, strlen($this->getFormValue('type', $data->type))>0 ? $this->getFormValue('type', $data->type) : '0');
        $type->setShowLabel(false);
        $type->setDisposition('horizontal');
        $processFields[] = new MHContainer('hctType', array($typeLabel, $type));

        // Process tip
        $processTip = new MText('processTip', _M('Se você não preencher os campos não requeridos, o processo irá considerar os dados dos títulos antigos para os novos títulos', $module));
        $processFields[] = $processTip;

        // End of process fields
        $vctProcess[] = new MVContainer('vctProcess', $processFields);
        $fields[]     = new MBaseGroup('mbgProcess', _M('Informações para gerar os novos títulos', $module), $vctProcess);
        //
        // End process fields
        //

        //
        // Individual process fields
        //
        $personIdLabel = new MText('personIdLabel', _M('Pessoa', $module).':');
        $personIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personId      = new MLookupTextField('personId', $this->getFormValue('personId', $data->personId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'personName', 'basic', 'physicalPerson', null, null, true);
        $validators[]  = new MIntegerValidator('personId');
        $personId->setJsHint(_M('Informe o código da pessoa', $module));
        $personName    = new MTextField('personName', $this->getFormValue('personName', $data->personName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setReadOnly(true);
        $personName->setJsHint(_M('Nome da pessoa', $module));
        $hctPerson     = new MHContainer('hctPerson', array($personIdLabel, $personId, $personName));
        $hctPerson->setShowLabel(true);
   
        // Info     
        $personTip       = new MText('personTip', _M('Se desejar processar o longo prazo para curto prazo para apenas uma pessoa, preencha as informações aqui', $module));
        $vctIndividual[] = new MVContainer('vctContainer', array($hctPerson, $personTip));

        $fields[] = new MBaseGroup('mbgIndividual', _M('Processo individual', $module), $vctIndividual);
        
        $fields[] = new MButton('submit_button', _M('Enviar'));
        //
        // End individual process fields
        //
        $fields[] = new Separator('');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );
        
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }

    /**
     * Event triggered when user set new from the toolbar
     */
    public function submit_button_Click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $data                      = $this->getTypesData();
        $businessReceivableInvoice = new BusinessFinanceBusReceivableInvoice();
        $grid                      = $MIOLO->getUI()->getGrid($module, 'GrdLongTermShortTerm');
        $dataGrid                  = $businessReceivableInvoice->searchLongTermShortTermInvoice($data);
        if ((is_array($dataGrid[0])) && ($data->type == 1))
        {
            $dataGrid = $businessReceivableInvoice->processLongTermShortTermInvoice($dataGrid, $data);
            if (!is_array($dataGrid[0]))
            {
                $MIOLO->Information(_M('Erro na atualização da informação do título. Por favor, tente novamente.'));
            }
            $grid->setNewInvoiceAction();
        }
        $grid->setData($dataGrid);
        $this->addField($grid);
    }
     
    /**
     * Get the data from form and returns as a object
     */
    public function getTypesData()
    {
        $data->initialMaturityDate = $this->getFormValue('initialMaturityDate');
        $data->endMaturityDate     = $this->getFormValue('endMaturityDate');
        $data->searchCourseId      = $this->getFormValue('searchCourseId');
        $data->searchPolicyId      = $this->getFormValue('searchPolicyId');
        $data->closeOperationId    = $this->getFormValue('closeOperationId');
        $data->openOperationId     = $this->getFormValue('openOperationId');
        $data->newCourseId         = $this->getFormValue('newCourseId');
        $data->newPolicyId         = $this->getFormValue('newPolicyId');
        $data->recordDate          = $this->getFormValue('recordDate');
        $data->bankAccountId       = $this->getFormValue('bankAccountId');
        $data->incomeSourceId      = $this->getFormValue('incomeSourceId');
        $data->type                = $this->getFormValue('type');
        $data->personId            = $this->getFormValue('personId');

        return $data;
    }
}
?>
