<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário para geração de títulos a receber a partir da matrícula de um aluno
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * @since
 * Class created on 20/05/2011
 */
class FrmReceivableInvoiceGenerationPupilFromEnroll extends SForm
{
    private $module;

    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $MIOLO = MIOLO::getInstance();
        $this->module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        parent::__construct(_M('Geração de títulos a receber a partir da matrícula', $this->module), null, null);

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event = MIOLO::_request('event');

        // Período
        $busPeriod = new BusinessAcademicBusPeriod();
        $periodValue = $this->getFormValue('periodId') ? $this->getFormValue('periodId') : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID');
        $periodId = new MComboBox('periodId', $periodValue, _M('Código do período', $this->module), $busPeriod->listPeriod());
        $validators[] = new MRequiredValidator('periodId');
        $fields[] = $periodId;

        // Pessoa
        $contractPersonLabel = new MText('contractPersonLabel', _M('Pessoa', $this->module) . ':');
        $contractPersonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractPersonLabel->setClass('m-caption m-caption-required');
        $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId'), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array ('contractId', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'contractTurnDescription', 'contractUnitId', 'contractUnitDescription', 'pupilClassId', 'pupilClassName'), 'academic', 'ActivePersonContract', null, array ('personId' => 'contractPersonId'), true);
        $contractPersonId->setJsHint(_M('Informe o código da pessoa', $this->module));
        $validators[] = new MRequiredValidator('contractPersonId', _M('Pessoa', $this->module));
        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractPersonName->setReadOnly(true);
        $contractPersonName->setJsHint(_M('Nome da pessoa', $this->module));
        $hctPerson = new MHContainer('hctContract', array ($contractPersonLabel, $contractPersonId, $contractPersonName));
        $hctPerson->setShowLabel(false);
        $fields[] = $hctPerson;

        // Contrato
        $contractCourseLabel = new MText('contractCourseLabel', _M('Contrato', $this->module) . ':');
        $contractCourseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractCourseLabel->setClass('m-caption m-caption-required');
        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId'), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array ('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion'), 'academic', 'ActiveContract', null, array ('personId' => 'contractPersonId'), true);
        $contractId->setJsHint(_M('Informe o código do contrato', $this->module));
        $validators[] = new MRequiredValidator('contractId', _M('Contrato', $this->module));
        $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId'), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseId->setReadOnly(true);
        $contractCourseId->setJsHint(_M('Código do curso', $this->module));
        $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion'), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseVersion->setReadOnly(true);
        $contractCourseVersion->setJsHint(_M('Versão do curso', $this->module));
        $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName'), '', 30);
        $contractCourseName->setReadOnly(true);
        $contractCourseName->setJsHint(_M('Nome do curso', $this->module));
        $hctContractCourse = new MHContainer('hctContractCourse', array ($contractCourseLabel, $contractId, $contractCourseId, $contractCourseVersion, $contractCourseName));
        $hctContractCourse->setShowLabel(false);
        $fields[] = $hctContractCourse;

        $fields[] = new MSeparator();
        $fields[] = new MButton('btnLoadEnroll', _M('Carregar dados da matrícula', $this->module), $this->getAjaxAction('loadEnroll', 'divEnrollData', true));
        $fields[] = new MSeparator();

        $fields[] = new MDiv('divEnrollData');

        $this->setFields($fields);
        $this->setValidators($validators);
        parent::defineFields();
    }

    /**
     * AJAX call to load all enroll data
     *
     * @param (stdClass) $args All form data in form of a stdClass object.
     */
    public function loadEnroll($args)
    {
        $MIOLO = MIOLO::getInstance();

        $periodId = $args->periodId;
        $contractId = $args->contractId;
        
        try
        {
            $busContract = new BusinessAcademicBusContract();

            $contractData = $busContract->getContract($contractId);

            $busClassPupil = new BusinessAcademicBusClassPupil();

            $contractClass = $busClassPupil->getContractCurrentClass($contractId);

            if ( strlen($contractClass->classId) <= 0 )
            {
                throw new Exception(_M('Aluno não está vinculado a uma turma. Verifique os dados acadêmicos.'));
            }

            $busClass = new BusinessAcademicBusClass();

            $busLearningPeriod = new BusinessAcademicBusLearningPeriod();

            $filters = new stdClass();
            $filters->periodId = $periodId;
            $filters->courseId = $contractData->courseId;
            $filters->courseVersion = $contractData->courseVersion;
            $filters->turnId = $contractData->turnId;
            $filters->unitId = $contractData->unitId;

            $learningPeriods = $busLearningPeriod->searchLearningPeriod($filters);

            if ( count($learningPeriods) == 1 )
            {
                $learningPeriodId = $learningPeriods[0][0];

                $fields[] = new MHiddenField('learningPeriodId', $learningPeriodId);

                $classPeriod = $busClass->getSemesterContract($contractId);

                $busEnroll = new BusinessAcademicBusEnroll();
                $busCurriculum = new BusinessAcademicBusCurriculum();

                $periodCredits = $busEnroll->getCreditsAvailableForEnroll($contractData->contractId, $classPeriod, $contractClass->classId, $learningPeriodId);

                if (SAGU::getParameter('ACADEMIC', 'ENROLL_BASED_ON_CURRICULUM') == 'YES' || $periodCredits <= 0)
                {
                    $periodCredits = $busCurriculum->getPeriodCredits($contractData->courseId, $contractData->courseVersion, $contractData->turnId, $contractData->unitId, $classPeriod);
                }

                $periodHours = $busEnroll->getHoursAvailableForEnroll($contractData->contractId, $classPeriod, $contractClass->classId, $learningPeriodId);

                if (SAGU::getParameter('ACADEMIC', 'ENROLL_BASED_ON_CURRICULUM') == 'YES' || $periodHours <= 0)
                {
                    $periodHours = $busCurriculum->getPeriodHours($contractData->courseId, $contractData->courseVersion, $contractData->turnId, $contractData->unitId, $classPeriod);
                }

                // Turma
                $classLabel = new MText('classLabel', _M('Turma', $this->module) . ':');
                $classLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $contractClass = new MTextField('contractClass', $this->getFormValue('contractClass', $contractClass->classId), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
                $contractClass->setReadOnly(true);
                $contractClass->setJsHint(_M('Turma', $this->module));
                $hctClass = new MHContainer('hctClass', array ($classLabel, $contractClass));
                $hctClass->setShowLabel(false);
                $fields[] = $hctClass;

                // Período
                $semesterLabel = new MText('semesterLabel', _M('Período do aluno', $this->module) . ':');
                $semesterLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $semester = new MTextField('semester', $this->getFormValue('semester', $classPeriod), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
                $semester->setReadOnly(true);
                $semester->setJsHint(_M('Período do aluno', $this->module));
                $hctSemester = new MHContainer('hctClass', array ($semesterLabel, $semester));
                $hctSemester->setShowLabel(false);
                $fields[] = $hctSemester;

                // Carga horária/Créditos previstos
                $hoursLabel = new MText('hoursLabel', _M('Carga horária programada', $this->module) . ':');
                $hoursLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $hours = new MTextField('hours', $this->getFormValue('hours', $periodHours . ' (' . $periodCredits . ' créd.)'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
                $hours->setReadOnly(true);
                $hours->setJsHint(_M('Carga horária programada', $this->module));
                $hctHours = new MHContainer('hctClass', array ($hoursLabel, $hours));
                $hctHours->setShowLabel(false);
                $fields[] = $hctHours;

                // creditos cursados
                $busEnroll = new BusinessAcademicBusEnroll();
                $busLearningPeriod = new BusinessAcademicBusLearningPeriod();
                $creditos = $busEnroll->getTotalCredits($contractId, $learningPeriodId, true);
                $ch = $busEnroll->getContractEnrolledHours($contractId, $learningPeriodId);

                $msg = SAGU::NVL($ch, '-') . ' (' . SAGU::NVL($creditos, '-') . ' créd.)';
                
                $lbl = new MText('hoursLabel', _M('Carga horária cursada', $this->module) . ':');
                $lbl->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $txt = new MTextField('txt', $msg, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
                $txt->setReadOnly(true);
                $hct = new MHContainer('hct', array ($lbl, $txt));
                $hct->setShowLabel(false);
                $fields[] = $hct;
                
                $busDiverseConsultation = new BusinessAcademicBusDiverseConsultation();

                $filters = new stdClass();
                $filters->contractId = $contractId;
                $filters->periodId = $periodId;
                $filters->notCancelled = true;
                $filters->notExploitations = true;
                $filters->notExcused = true;

                $enrollData = $busDiverseConsultation->getCurricularComponentCoursed($filters, true);

                if ( count($enrollData) > 0 )
                {
                    $tableData = array();

                    foreach ($enrollData as $enroll)
                    {
                        /*
                         * [0] - Código da matrícula
                         * [1] - Código da disciplina oferecida
                         * [2] - Período
                         * [3] - Código da disciplina
                         * [4] - Disciplina
                         * [5] - Horário
                         * [6] - Carga horária
                         * [7] - Nota
                         * [8] - Frequência
                         * [9] - Código do estado
                         * [10] - Estado
                         * [11] - Turma
                         */
 
                        $tableData[] = array($enroll[3], $enroll[4], $enroll[6], $enroll[11], $enroll[13]);
                    }



           
                    $tableColumns = array(_M('Código', $this->module),
                                          _M('Disciplina', $this->module),
                                          _M('Carga horária - Créditos', $this->module),
                                          _M('Turma', $this->module),
                                          _M('Semestre', $this->module));

                    $tableTitle = _M('Disciplinas nas quais o aluno selecionado está matriculado', $this->module);

                    $fields[] = new MTableRaw($tableTitle, $tableData, $tableColumns);

                    $fields[] = new MSeparator();

                    //Buscando dados financeiros
                    $busReceivableInvoice = new BusinessFinanceBusReceivableInvoicePupil();
                    
                    if( SAGU::getParameter('BASIC', 'ENABLE_BUSINESS_USER') > '0' )
                    {
                        $busReceivableInvoice = new BusinessFinanceBusReceivableInvoicePupilUser();
                    }

                    if ( ! $busReceivableInvoice->beginTransaction() )
                    {
                        throw new Exception(_M('Não foi possível iniciar uma nova transação.', $this->module));
                    }

                    // when simulating, disable enroll checks (last parameter)
                    $eCalouro = AcdContract::alunoCalouro($contractId, $periodId) ? DB_TRUE : DB_FALSE;
                    $invoices = $busReceivableInvoice->generateReceivableInvoicesFromEnrollSummaries($contractId, $learningPeriodId, $eCalouro);

                    $data = array();
                    $parcelNumber = 0;
                    $columns = array(_M('Número da parcela', $this->module),
                                     _M('Data de vencimento', $this->module),
                                     _M('Valor', $this->module),
                                     _M('Valor atualizado', $this->module),
                                     _M('Status', $this->module));

                    $busEntry = new BusinessFinanceBusEntry();

                    if ( count($invoices) == 0 )
                    {
                        $fields[] = new MText('txtNoInvoicesMsg', _M('Nenhuma alteração necessária.', $this->module));
                    }
                    else
                    {
                        foreach ( $invoices as $invoiceId )
                        {
                            $invoice = $busReceivableInvoice->getInvoice($invoiceId);

                            $row = array();

                            $row[] = $invoice->parcelNumber;
                            $row[] = $invoice->maturityDate;

                            $subRow = array();

                            $entries = $busEntry->getInvoiceEntries($invoiceId);
                            foreach ( $entries as $entry )
                            {
                                $subRow[] = array($entry->operationDescription,
                                                  $entry->operationTypeId,
                                                  $entry->value);
                            }

                            //FIXME: Verifica parâmetro que abilita regra de negócio específica
                            if ( SAGU::getParameter('BASIC', 'ENABLE_BUSINESS_USER') > '0' )
                            {
                                $subRow[] = array(_M('Saldo', $this->module),
                                                  '',
                                                  $busReceivableInvoice->getInvoiceBalance($invoice->invoiceId)); // trocado para o balance
                            }
                            else
                            {
                                $subRow[] = array(_M('Saldo', $this->module),
                                                  '',
                                                  $invoice->value); // entry value
                            }


                            $row[] = new MTableRaw(null, $subRow, null);
                            $row[] = $busReceivableInvoice->getInvoiceBalanceWithPolicies($invoiceId);
                            
                            $finStatusDoTitulo = new FinStatusDoTituloLog();
                            $status = $finStatusDoTitulo->obtemStatusDoTituloLog($invoiceId);
                            $row[] = $status;

                            $data[] = $row;
                        }
                        // Table where invoices data will be displayed
                        $fields[] = new MTableRaw(_M('Simulação de títulos', $this->module), $data, $columns);
                        $fields[] = new MSeparator();
                        $fields[] = new MButton('btnGenerate', _M('Aplicar', $this->module), $this->getAjaxAction('generateFinance', 'divEnrollData'));
                    }

                    return new MVContainer('divEnrollData', $fields);
                }
                else
                {
                    throw new Exception(_M('Nenhum registro de matrícula encontrado. Confira os dados informados ou verifique se o aluno está realmente matriculado no módulo acadêmico', $this->module));
                }
            }
            else
            {
                throw new Exception(_M('Não foi possível obter os dados do período letivo. Confira os dados informados ou verifique o cadastro de período letivo no módulo acadêmico', $this->module));
            }
        }
        catch ( Exception $e )
        {
            $this->addError($e->getMessage());
        }
    }

    /**
     * Simulate the pupil's finance if the enroll were submitted
     *
     * @param (stdClass) $args Object containing all form data
     */
    public function generateFinance($args)
    {
        $MIOLO = MIOLO::getInstance();

        $fields = array();
        $busReceivableInvoice = new BusinessFinanceBusReceivableInvoicePupil();
                
        if( SAGU::getParameter('BASIC', 'ENABLE_BUSINESS_USER') > '0' )
        {
            $busReceivableInvoice = new BusinessFinanceBusReceivableInvoicePupilUser();
        }

        try
        {
            if ( ! $busReceivableInvoice->beginTransaction() )
            {
                throw new Exception(_M('Não foi possível iniciar uma nova transação.', $this->module));
            }

            $invoices = $busReceivableInvoice->generateReceivableInvoicesFromEnrollSummaries($args->contractId, $args->learningPeriodId);

            $busReceivableInvoice->commitTransaction();
            
            /*
             * 
             * Verifica se a primeira parcela esta paga e altera o status de pre-matriculado para matriculado
             * 
             */
            $busInvoice = new BusinessFinanceBusInvoice();
            $pagouPrimeiraParcela = sPreMatricula::pagouPrimeiraParcela($args->contractId, $args->learningPeriodId);
            
            if ( $pagouPrimeiraParcela == DB_TRUE )
            {
                foreach ( $invoices as $invoiceId )
                {
                    $invoice = $busReceivableInvoice->getInvoice($invoiceId);
                    
                    if ( $invoice->parcelNumber == '1' )
                    {
                        $busInvoice->primeiraParcelaPreMatricula($invoice);
                    }
                }
            }

            $msg = MPrompt::Information(_M('Dados salvos.', $this->module), 'NONE');

            $action = $MIOLO->getActionUrl($this->module, 'main', null, array('personId' => $args->contractPersonId));
            $msg->addButton(_M('Consultar títulos', $this->module), $action);

            $action = $MIOLO->getActionUrl($this->module, MIOLO::getCurrentAction());
            $msg->addButton(_M('Novo', $this->module), $action);

            $action = $MIOLO->getActionUrl($this->module, 'main:process:receivableInvoice');
            $msg->addButton(_M('Fechar', $this->module), $action);

            $fields[] = $msg;
        }
        catch ( Exception $e )
        {
            $busReceivableInvoice->undoTransaction();
            $this->addError($e->getMessage());
        }

        return $fields;
    }
}
?>