<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Finance entry handler.
 * Contains the menus to access entry registers
 *
 * @author Nataniel I. da Silva [nataniel@solis.coop.br]
 *
 * @version $Id$
 *
 * @since
 * Class created on 25/07/2014
 *
 **/

class FrmLancamentoSemVinculoBusca extends SSearchForm
{
    protected $campoBuscaGenerica = true;
    
    public function __construct($data)
    {
        parent::__construct(_M('Localizar', $module), new FinLancamentoSemVinculo());
    }
    
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $data = $this->getTypesData();
        
        /*$lancamentoLabel = new MText('lancamentoLabel', _M('Código do lançamento', $module).':');
        $lancamentoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $lancamentoLabel->setClass('m-caption m-caption');
        $lancamentoId = new MTextField('lancamentoSemVinculoId', $this->getFormValue('lancamentoSemVinculoId', $data->lancamentoSemVinculoId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $lancamentoId->setJsHint(_M('Informe o código do lançamento'));
        $fields[] = new MHContainer('hctLancamento', array($lancamentoLabel, $lancamentoId));
        
        $operationLabel = new MText('operationLabel', _M('Operação', $module).':');
        $operationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $operationLabel->setClass('m-caption m-caption');
        $operationId = new MLookupTextField('operationId', $this->getFormValue('operationId',$data->operationId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'operationDescription', $module, 'Operation', null, null, true);
        $operationId->setJsHint(_M('Informe o código da operação',$module));
        $operationDescription = new MTextField('operationDescription', $this->getFormValue('operationDescription',$data->operationDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $operationDescription->setReadOnly(true);
        $fields[] = new MHContainer('hctOperation', array($operationLabel, $operationId, $operationDescription));
        
        $tipoDeMovimentacaoLabel = new MText('isShowDocumentEndCourseLabel', _M('Tipo de movimentação:', $module));
        $tipoDeMovimentacaoLabel->setClass('m-caption m-caption');
        $tipoDeMovimentacaoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $radioCounter = new MRadioButton('tipoDeMovimentacao', 'caixa', '', ( $tipoDeMovimentacao == MOVIMENTACAO_DE_CAIXA ) ? true : false, "De caixa");
        $radioBank = new MRadioButton('tipoDeMovimentacao', 'banco', '', ( $tipoDeMovimentacao == MOVIMENTACAO_BANCARIA ) ? true : false, "Bancária");
        $tipoDeMovimentacaoContainer = new MHContainer('tipoDeMovimentacaoContainer', array($tipoDeMovimentacaoLabel, $radioCounter, $radioBank));
        $fields[] = $tipoDeMovimentacaoContainer;
        
        // Espécies
        $BusSpecies = new BusinessFinanceBusSpecies();
        $species = $BusSpecies->listSpecies();
        
        $speciesLabel = new MText('speciesLabel', _M('Espécie',$module).':');
        $speciesLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $speciesLabel->setClass('m-caption m-caption');
        $specieId = new MComboBox('specieId', $this->getFormValue('specieId', $data->specieId), '', $species);
        //$validators[] = new MRequiredValidator('specieId', _M('Espécie', $module), 'required');
        $hctSpecies = new MHContainer('hctSpecies', array($speciesLabel, $specieId));
        $hctSpecies->addAttribute("style", "margin-top:5px;");
        $fields[] = $hctSpecies;
        
        // Valor
        $value = new MTextField('valorS', SAGU::formatNumber($this->getFormValue('valorS', $data->valorS)), _M('Valor', $module), SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'), _M('Ex.: 1.00', $module));
        $value->setJsHint(_M('Informe o valor', $module));
        $validators[] = new MFloatValidator('valorS', _M('Valor', $module), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), 'optional');
        $fields[] = $value;
        
        // Cost center
        $costCenterIdLabel = new MText('costCenterIdLabel', _M('Centro de custo', $module).':');
        $costCenterIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $costCenterIdLabel->setClass('m-caption m-caption');
        $costCenterId = new MLookupTextField('costCenterId', $data->costCenterId ? $data->costCenterId : $this->getFormValue('costCenterId',$data->costCenterId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'costCenterDescription', 'accountancy', 'CostCenter', null, null, true);
        $costCenterId->setJsHint(_M('Informe o código do centro de custos', $module));
        //$validators[] = new MRegExpValidator('costCenterId',  _M('Centro de custo', $module), '^[0-9]+(\.[0-9]+)*$', 'required');
        $costCenterDescription = new MTextField('costCenterDescription', $this->getFormValue('costCenterDescription',$data->costCenterDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $costCenterDescription->setReadOnly(true);
        $costCenterDescription->setJsHint(_M('Descrição do centro de custo', $module));
        $fields[] = new MHContainer('hctCostCenter', array($costCenterIdLabel, $costCenterId, $costCenterDescription));
        
        // Contra partida
        $contraPartidaLabel = new MText('contraPartidaLabel', _M('Contra partida',$module).':');
        $contraPartidaLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contraPartidaLabel->setClass('m-caption m-caption');
        $contraPartidaId = new MLookupTextField('contraPartidaId', $this->getFormValue('contraPartidaId',$data->contraPartidaId), null,SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'descricaoContraPartida', 'accountancy', 'AccountScheme', null, null, true);
        $contraPartidaId->setJsHint(_M('Informe o código da contra partida', $module));
        //$validators[] = new MRegexpValidator('contraPartidaId',_M('Contra partida',$module), '^[0-9]+(\.[0-9]+)*$', 'required');
        $descricaoContraPartida = new MTextField('descricaoContraPartida', $this->getFormValue('descricaoContraPartida',$data->descricaoContraPartida), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), _M('Plano de contas', $module));
        $descricaoContraPartida->setReadOnly(true);
        $descricaoContraPartida->setJsHint(_M('Descrição do plano de contas', $module));
        $hctAccountScheme = new MHContainer('hctAccountScheme', array($contraPartidaLabel, $contraPartidaId, $descricaoContraPartida));
        $hctAccountScheme->setShowLabel(true);
        $fields[] = $hctAccountScheme;
        
        // Data de competência 
        $competencyDateLabel = new MText('competencyDateLabel', _M('Data de competência',$module).':');
        $competencyDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $competencyDateLabel->setClass('m-caption m-caption');
        $competencyDate = new MCalendarField('dataDeCompetencia', $this->getFormValue('competencyDate',$data->competencyDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE')); 
        $competencyDate->setJsHint(_M('Data de vencimento de competência', $module));
        $validators[] = new MDATEDMYValidator('dataDeCompetencia', _M('Data de competência', $module), 'optional');
        $hctCompetencyDate = new MHContainer('hctCompetencyDate', array($competencyDateLabel, $competencyDate));
        $hctCompetencyDate->setShowLabel(true);
        $fields[] = $hctCompetencyDate;
        
        // Data de caixa
        $counterDateLabel = new MText('competencyDateLabel', _M('Data de caixa',$module).':');
        $counterDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $counterDateLabel->setClass('m-caption m-caption');
        $counterDate = new MCalendarField('dataDeCaixa', $this->getFormValue('dataDeCaixa',$data->dataDeCaixa), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE')); 
        $counterDate->setJsHint(_M('Data de caixa', $module));
        $validators[] = new MDATEDMYValidator('counterDate', _M('Data de caixa', $module), 'optional');
        $hctCounterDate = new MHContainer('hctCounterDate', array($counterDateLabel, $counterDate));
        $hctCounterDate->setShowLabel(true);
        $fields[] = $hctCounterDate;*/
                
        $fields[] = new MDiv('divPlanoDeContas');
        
        parent::defineFields($fields, $module, 'GrdLancamentoSemVinculo', $validators);
    }
}

