<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for finSPC table
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 *
 * @since
 * Class created on 20/10/2011
 *
 **/
class FrmBankMovementReport extends SForm
{
    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        parent::__construct(_M('Movimentações bancárias', $module), null, null);

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('event'=>'generateReport')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        // Conta bancária
        $businessBankAccount = new BusinessFinanceBusBankAccount();
        $bankAccountLabel = new MText('bankAccountLabel', _M('Conta bancária', $module).':');
        $bankAccountLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $bankAccountLabel->setClass('m-caption m-caption-required');
        $bankAccountId = new MComboBox('bankAccountId', $this->bankAccountId->value, '', $businessBankAccount->listBankAccount(), '', '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $bankAccountId->setJsHint(_M('Selecione uma conta bancária', $module));
        $validators[] = new MIntegerValidator('bankAccountId', _M('Conta bancária', $module),'required');
        $hctBankAccount = new MHContainer('hctBankAccount', array($bankAccountLabel, $bankAccountId));
        $hctBankAccount->setShowLabel(true);
        $fields[] = $hctBankAccount;

        // Periodo
        $fields[] = $period = new SBeginEndPeriod(array(
            'title' => _M('Período', $module),
            'begin' => array('dateId' => 'beginDate'),
            'end' => array('dateId' => 'endDate'),
            'baseGroup' => false
        ));

        $opt['data_quitacao'] = _M('Data de quitação');
        $opt['nome_pessoa'] = _M('Nome da pessoa');
        $opt['nosso_numero'] = _M('Nosso número (decrescente)');
        $orderValue = new MSelection('orderValue', $this->orderValue->value,'Ordenação', $opt);
        $orderValue->setJsHint(_M('Selecione a forma de ordenação', $module));
        $orderValue->setAllowNullValue(false);
        $fields[] = $orderValue;
        
        //Format report
        $fields[] = $reportFormat = new MSelection('reportFormat', $this->getFormValue('reportFormat') ? $this->getFormValue('reportFormat') : SReport::FILETYPE_PDF, _M('Formato', $module), SReport::listReportFormat());
        $validators[] = new MRequiredValidator('reportFormat');
        $fields[] = new MSeparator();

        $this->setFields($fields);
        $this->setValidators($validators);
        parent::defineFields();
    }

    /**
     * Método para geração do Relatório
     *
     */
    public function generateReport($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $data = $this->getTypesData();

        
        $options['module'] = $module;
        $options['reportName'] = 'bankMovementReport';

        try
        {
            if ( strlen($data->bankAccountId)>0 )
            {
                $businessBankAccount = new BusinessFinanceBusBankAccount();
                $bankAccount = $businessBankAccount->getBankAccount($data->bankAccountId);

                if ( !strlen($bankAccount->bankAccountId)>0 )
                {
                    throw new Exception( _M('O Código da conta bancária informado não existe.', $module ) );
                }
                $options['parameters']['bankaccountid'] = (int) $bankAccount->bankAccountId;
            }
            if ( strlen($data->beginDate)>0 )
            {
                $options['parameters']['begindate'] = $data->beginDate;
            }
            if ( strlen($data->endDate)>0 )
            {
                $options['parameters']['enddate'] = $data->endDate;
            }
            if ( strlen($data->orderValue)>0 )
            {
                $options['parameters']['ordervalue'] = $data->orderValue;
            }
            if ( strlen($data->reportFormat)>0 )
            {
                $options['fileType'] = $data->reportFormat;
            }
            //MIOLO::VD($options);
            $sreport = new SReport($options);

            if ( !$sreport->generate() )
            {
                throw new Exception( _M('Nenhum registro encontrado.', $module ) );
            }
        }
        catch (Exception $e)
        {
            $this->addError($e->getMessage());
        }
    }

    /**
     * Método que obtem os dados do formulário.
     *
     */
    public function getTypesData()
    {
        $data = new stdClass();
        $data->bankAccountId = $this->GetFormValue('bankAccountId');
        $data->beginDate = $this->GetFormValue('beginDate');
        $data->endDate = $this->GetFormValue('endDate');
        $data->reportFormat = $this->GetFormValue('reportFormat');
        $data->orderValue = $this->GetFormValue('orderValue');
        
        return $data;
    }
}
?>
