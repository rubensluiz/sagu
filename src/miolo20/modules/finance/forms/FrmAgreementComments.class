<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Agreement Comments Form
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 22/12/2005
 *
 **/

/**
 * Form to manipulate a bank account
 **/
class FrmAgreementComments extends SManagementForm
{

    /**
     * Class constructor
     **/
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();
        
        parent::__construct( new FinAgreementComments(), array('agreementCommentsId'), 'BusAgreementComments' );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');            
        
        $goto     = MIOLO::_request('goto') ? MIOLO::_request('goto') : MIOLO::_request('goto', 'GET');
        $personId = MIOLO::_request('personId') ? MIOLO::_request('personId') : MIOLO::_request('personId', 'GET');
        
        $fields[] = new MHiddenField('goto', $goto);
        if ( in_array($function,array('update','delete')) )
        {
            $data->agreementCommentsId = $this->getFormValue('agreementCommentsId', MIOLO::_request('agreementCommentsId') ? MIOLO::_request('agreementCommentsId') : MIOLO::_request('agreementCommentsId', 'GET'));
            $agreementCommentsIdHidden = new MHiddenField('agreementCommentsId', $this->getFormValue('agreementCommentsId', $data->agreementCommentsId));
            $fields[] = $agreementCommentsIdHidden;
            $businessAgreementComments = new BusinessFinanceBusAgreementComments();
            $data = $businessAgreementComments->getAgreementComments($data->agreementCommentsId);
        }
        // If personId comes from URL that was setted on that variable else personId comes 
        // from business connection, so replace here to continue on the right form
        $personId = strlen($personId)>0 ? $personId : $data->personId;
        // Person
        $businessPerson = new BusinessBasicBusPerson();
        $personName = $businessPerson->getPersonName($personId);
        $personLabel = new MText('personLabel', _M('Código da pessoa', $module).':');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $person      = new MTextLabel('person', $personId.' - '.$personName);
        $fields[]    = new MHContainer('hctPerson', array($personLabel, $person));
        $fields[]    = new MHiddenField('personId', $this->getFormValue('personId', $personId));
        
        // Agreement
        $agreementTitleLabel = new MText('agreementTitleLabel', _M('Título', $module).':');
        $agreementTitleLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $agreementTitle      = new MTextField('agreementTitle', $this->getFormValue('agreementTitle', $data->agreementTitle), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $fields[]   = new MHContainer('hctAgreementTitle', array($agreementTitleLabel, $agreementTitle));

        if ( $function == 'update')
        {
            $dateTimeLabel = new MText('dateTimeLabel', _M('Data e hora do registro', $module));
            $dateTime      = new MTextLabel('dateTime', $this->getFormValue('dateTime', $data->dateTime));
        }          
          
        $commentsLabel = new MText('commentsLabel', _M('Comentários', $module).':');
        $commentsLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $commentsLabel->setClass('m-caption m-caption-required');
        $comments = new MMultiLineField('comments', $this->getFormValue('comments', $data->comments), '', 60, 4, 60);
        $comments->setJsHint(_M('Informe os comentários', $module));
        $fields[] = new MHContainer('hctcomments', array($commentsLabel, $comments));
        $validators[] = new MRequiredValidator('comments', _M('Comentários', $module));

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Última modificação',$module));
            $fields[] = new MSeparator('');
        }

        $sep = new MSeparator('');
        $sep->setWidth('99%');
        $fields[] = $sep;
        
        parent::defineFields( $fields, $validators, $data );

        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $goto   = MIOLO::_request('goto') ? MIOLO::_request('goto') : MIOLO::_request('goto', 'GET');
        
        $data   = $this->getTypesData();
        $opts   = array('event'=>'tbBtnDelete_confirm',
                        'function'=>'delete',
                        'agreementCommentsId'=>MIOLO::_request('agreementCommentsId'), 'goto'=>urlencode($goto));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = SAGU::getParameter('BASIC', 'MSG_CONFIRM_RECORD_DELETE');
        $caption = _M('Questão', $module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender = NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $goto   = MIOLO::_request('goto') ? MIOLO::_request('goto') : MIOLO::_request('goto', 'GET');
        $agreementCommentsId =  MIOLO::_request('agreementCommentsId') ? MIOLO::_request('agreementCommentsId') : MIOLO::_request('agreementCommentsId', 'GET');
        $business = $this->busObject;
        $ok       = $business->deleteAgreementComments($agreementCommentsId);

        if ( $ok )
        {
            $goto    = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $msg     = SAGU::getParameter('BASIC', 'MSG_RECORD_DELETED');
            $caption = _M('Informação', $module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Erro executando a operação solicitada.', $module);
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $goto     = MIOLO::_request('goto') ? MIOLO::_request('goto') : MIOLO::_request('goto', 'GET');
        $data     = $this->getTypesData();
        $business = $this->busObject;

        if ( $function == 'update' )
        {
            $ok  = $business->updateAgreementComments($data);
            $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED');
        }
        else
        {
            $ok  = $business->insertAgreementComments($data);
            $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED_INFO');
        }
        if ( $ok )
        {
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, 'main');
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg     = _M('Erro executando a operação solicitada.', $module);
            $goto    = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = parent::getTypesData();
        $vars = get_object_vars($data);

        foreach ( $vars as $var => $value )
        {
            if ( $this->$var )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }
        return $data;
    }
}

?>
