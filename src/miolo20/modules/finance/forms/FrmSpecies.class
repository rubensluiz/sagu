<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Species form
 *
 * @author Rudi Uhrig Neto [rudi@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 20/12/2005
 *
 **/

$MIOLO->uses('classes/cielo/FinCieloBandeira.class', 'finance');

class FrmSpecies extends SManagementForm
{

    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new FinSpecies(), array('speciesId'), 'BusSpecies');
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $pk = $this->getObjectPk();
            $fields[] = new MTextLabel('speciesId', $pk->speciesId, _M('Código', $module));
            $fields[] = new MHiddenField('speciesId', $pk->speciesId);
            $data = $this->busObject->getSpecies($pk->speciesId);
        }
        
        $data->description = $this->getFormValue('description', $data->description);
        $speciesDescription = new MTextField('description', $data->description, _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $speciesDescription->setJsHint(_M('Informe a descrição da espécie', $module));
        $fields[] = $speciesDescription;
        
        $validators[] = new MRequiredValidator('description');
        
        $data->speciesTypeId = $this->getFormValue('speciesTypeId', $data->speciesTypeId);
        $busSpeciesType = new BusinessFinanceBusSpeciesType();
        $specieTypes = $busSpeciesType->listSpeciesType(true);
        $fields[] = $speciesType = new MSelection('speciesTypeId', $data->speciesTypeId, _M('Tipo'), $specieTypes);
        $speciesType->addAttribute('onchange', SForm::getAjaxAction('speciesTypeChange', 'divCartao', false));
        $validators[] = new MRequiredValidator('speciesTypeId');
        
        if ( $data->speciesTypeId == SAGU::getParameter('FINANCE', 'CREDIT_CARD_SPECIESTYPE_ID') )
        {
            $flds[] = new MSelection('bandeira', strtolower($data->bandeira), _M('Bandeira'), FinCieloBandeira::listarBandeiras());
            $flds[] = new MSelection('modalidade', $data->modalidade, _M('Modalidade'), array('C' => _M('Crédito'), 'D' => _M('Débito')));
            $flds[] = new MIntegerField('numParcelas', $data->numParcelas, _M('Permite parcelamento em até'), 10, _M('vez(es)'));
            
            $fields[] = new MDiv('divCartao', SAGU::alignFields($flds));
        }
        else
        {
            $fields[] = new MDiv('divCartao');
        }
        
        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            // Is extinct
            $opts = SAGU::listTrueFalse(1);
            $enabledLabel = new MText('isEnabledLabel', _M('Habilitado', $module) . ':');
            $enabledLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $enabledLabel->setClass('m-caption m-caption-required');
            $enabled = new MRadioButtonGroup('isEnabled', '', $opts, $this->getFormValue('isEnabled', $data->isEnabled) ? $this->getFormValue('isEnabled', $data->isEnabled) : DB_TRUE, null, 'horizontal');
            $enabled->setShowLabel(false);
            $enabled->setJsHint(_M('Informe aqui se esta operação está habilitada', $module));
            $fields[] = new MHcontainer('hctEnabled', array($enabledLabel, $enabled));
        }
        
        parent::defineFields($fields, $validators, $data);
    }
    
    public function speciesTypeChange($args)
    {
        if ( $args->speciesTypeId == SAGU::getParameter('FINANCE', 'CREDIT_CARD_SPECIESTYPE_ID') )
        {
            $fields[] = new MSelection('bandeira', FinCieloBandeira::BANDEIRA_VISA, _M('Bandeira'), FinCieloBandeira::listarBandeiras());
            $fields[] = new MSelection('modalidade', 'C', _M('Modalidade'), array('C' => _M('Crédito'), 'D' => _M('Débito')));
            $fields[] = new MIntegerField('numParcelas', 1, _M('Permite parcelamento em até'), 10, _M('vez(es)'));
        }
        else
        {
            $fields[] = new MDiv('divCartao');
        }
        
        return SAGU::alignFields($fields);
    }
}

?>
