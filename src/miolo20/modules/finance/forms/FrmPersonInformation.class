<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Person Information
 *
 * @author Eduardo Beal Miglioransa[eduardo@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br] 
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 17/08/2005
 *
 **/

/**
 * Form to show the agreements
 **/
class FrmPersonInformation extends SManagementForm
{

    /**
     * Class constructor
     **/
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();
        
        parent::__construct( new FinPersonInformation(), array('personId'), 'BusPersonInformation', _M('Informações da pessoa', $module) );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        
        $personId = MIOLO::_request('personId') ? MIOLO::_request('personId') : MIOLO::_request('personId', 'GET');
        $business = $this->busObject;
        $data = $business->getPersonInformation($personId);
        if( strlen($data->personId) == 0 )
        {
            $data->status = 'insert';
            $data->personName = _M('Esta pessoa não possui nenhuma informação.', $module);
        }
        else
        {
            $data->status = 'update';
            $data->personName = $data->name;
        }
        $fields[] = new MHiddenField('status', $data->status);
        // Person id
        $personIdLabel = new MText('personIdLabel', _M('Código da pessoa', $module).':');
        $personIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $personId = new MTextField('personId', $this->getFormValue('personId',$data->personId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $personId->setReadOnly(true);
        $personName = new MTextField('personName', $data->personName ? $data->personName : $this->getFormValue('personName',$data->personName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setReadOnly(true);
        $fields[] = new MHContainer('hctPersonName', array($personIdLabel, $personId, $personName));

        $informationLabel = new MText('informationLabel', _M('Informação', $module).':');
        $informationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $informationLines = new MMultiLineField('information', $this->getFormValue('information', $data->information), '', 80, 15, 80);
        $informationLines->setJsHint(_M('Entre com a informação',$module));
        $fields[] = new MHContainer('hctInformation', array($informationLabel, $informationLines));

        $btnSave = new MButton('btnSave', _M('Salvar', $module), 'SUBMIT');
        $btnClose = new MButton('btnPersonInformationClose', _M('Fechar janela', $module), 'self.close()');
        $fields[] = new MHContainer('hctBtnInformation', array($btnSave, $btnClose));
        
        parent::defineFields( $fields, $validators, $data );
        $this->disableToolbar();
    }

    /**
     * Event triggered when button search is clicked 
     */
     public function btnSave_click($sender = null)
     {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $data   = $this->getTypesData();

        // retira espaços.
        $data->information = trim($data->information);


        if (strlen($data->information) == 0 )
        {
            $this->addError(_M('É necessário inserir o texto no campo de texto', $module));
        }
        else
        {
            $business = $this->busObject;
            if($data->status == 'insert')
            {
                $ok = $business->insertPersonInformation($data);
                $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED');
            }
            elseif($data->status == 'update')
            {
                $ok = $business->updatePersonInformation($data);
                $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED'); 
            }
            if($ok)
            {

                unset($fields);
                $fields[] = new MText('InformationLabel', $msg);
                $fields[] = new MLabel('');

                $fields[] = new MButton('btnPersonIformationSaved', _M('Fechar janela', $module), 'self.close()');
                $this->setFields($fields);

            }

        }
     }
    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new FinPersonInformation();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            $data->$var = $this->$var->value;
        }
        // Pega estado do formulário ( update ou insert)
        $data->status = $this->status->value;
        return $data;
    }

}
?>
