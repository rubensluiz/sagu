<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finSPC table
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * 
 * @since
 * Class created on 20/12/2010
 *
 **/

class FrmDiscountsIncentivesAndLoanReport extends SForm
{
    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        parent::__construct(_M('Descontos, Incentivos e Financiamentos', $module), null, null);

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('event'=>'generateReport')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event = MIOLO::_request('event');

        // Incentive types
        $busIncentiveType = new BusinessFinanceBusIncentiveType();
        $incentiveTypeIdLabel = new MText('incentiveTypeIdLabel', _M('Tipos de incentivo',$module).':');
        $incentiveTypeIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $incentiveTypeId = new MMultiSelection('incentiveTypeId', is_array($this->getFormValue('incentiveTypeId', $data->incentiveTypeId)) ?  $this->getFormValue('operationId', $data->operationId) : array($this->getFormValue('incentiveTypeId', $data->incentiveTypeId)), '', $busIncentiveType->listIncentiveType(), true, null, 5);
        $incentiveTypeId->setJsHint(_M('Selecione os tipos de incentivo', $module));
        $htcIncentiveType = new MHContainer('hctIncentiveType', array($incentiveTypeIdLabel, $incentiveTypeId));
        $htcIncentiveType->setShowLabel(true);
        $fields[] = $htcIncentiveType;
        
        // Convenant
        $busConvenant = new BusinessFinanceBusConvenant();
        $convenantIdLabel = new MText('convenantIdLabel', _M('Convênios',$module).':');
        $convenantIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $convenantId = new MMultiSelection('convenantId', is_array($this->getFormValue('convenantId', $data->convenantId)) ?  $this->getFormValue('operationId', $data->operationId) : array($this->getFormValue('convenantId', $data->convenantId)), '', $busConvenant->listConvenants(), true, null, 5);
        $convenantId->setJsHint(_M('Selecione os tipos de incentivo', $module));        
        $htcconvenant = new MHContainer('hctconvenant', array($convenantIdLabel, $convenantId));
        $htcconvenant->setShowLabel(true);
        $fields[] = $htcconvenant;

        //Period
        $startDateLabel = new MText('startDateLabel', _M('Período', $module) . ':');
        $startDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $startDate = new MCalendarField('startDate', $this->getFormValue('startDate', $data->startDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $endDateLabel = new MText('endDateLabel', _M('à', $module) . ':');
        $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endEmissionDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));

        $validators[] = new MDATEDMYValidator('startDate', _M('Data inicial', $module), 'optional');
        $validators[] = new MDATEDMYValidator('endDate', _M('Data final', $module), 'optional');
        
        $fields[] = new MHContainer('hctPeriod', array( $startDateLabel, $startDate, $endDateLabel, $endDate ));
        
        //Reference Month        
        $referenceMonth = new MComboBox('referenceMonth', $this->getFormValue('periodId'), _M('Mês de referência', $module), SAGU::listMonths(), true, _M('Vencimento do título', $module) );
        $referenceMonth->setJsHint(_M('Selecione o mês de referência do vencimento do título', $module));
        $fields[] = $referenceMonth;
        
        //Format report
        $fields[] = $reportFormat = new MSelection('reportFormat', $this->getFormValue('reportFormat') ? $this->getFormValue('reportFormat') : SReport::FILETYPE_PDF, _M('Formato', $module), SReport::listReportFormat());
        $validators[] = new MRequiredValidator('reportFormat');
        $fields[] = new MSeparator();

        $this->setFields($fields);
        $this->setValidators($validators);
        parent::defineFields();
    }


    public function generateReport()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        try 
        {
            //Parameters of the report
            if (strlen(MIOLO::_REQUEST('startDate')) > 0)
            {
                $parameters['startdate'] = MIOLO::_REQUEST('startDate');
            }
            if (strlen(MIOLO::_REQUEST('endDate')) > 0)
            {
                $parameters['enddate'] = MIOLO::_REQUEST('endDate');
            }
            if (strlen(MIOLO::_REQUEST('referenceMonth')) > 0)
            {
                $parameters['referencemonth'] = (int) MIOLO::_REQUEST('referenceMonth');
            }
            if ( count($this->getFormValue('incentiveTypeId') ) > 0)
            {
                $parameters['incentivetypeid'] = implode($this->getFormValue('incentiveTypeId'), ',');
            }
            if ( count($this->getFormValue('convenantId') ) > 0)
            {
                $parameters['convenantid'] = implode($this->getFormValue('convenantId'), ',');
            }
            
            if (strlen(MIOLO::_REQUEST('typeOperation')) > 0)
            {
                $parameters['operation'] = MIOLO::_REQUEST('typeOperation');
            }

            $report = new SReport();
            $report->setReportName('discountsIncentivesAndLoan');
            $report->setFileType( MIOLO::_REQUEST('reportFormat') );
            $report->setParameters($parameters);
        
            if( is_null($parameters['incentivetypeid']) && is_null($parameters['convenantid']) )
            {
                throw new Exception ( _M('Selecione um Tipo de incentivo e/ou Convênio', $module) );
            }
            
            if ( !$report->generate() )
            {
                throw new Exception( _M('Nenhum registro encontrado.', $module ) );
            }
        }
        catch (Exception $e)
        {
            $msg[] = $e->getMessage();
            $this->addError($msg);
        }
    }
}

?>
