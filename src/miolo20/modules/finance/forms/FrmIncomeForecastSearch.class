<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for FinIncomeForecast
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]   
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 16/12/2005
 *
 **/
class FrmIncomeForecastSearch extends SSearchForm
{
    public function __construct()
    {
        parent::__construct(_M('Localizar', 'finance'), new FinIncomeForecast(), array('incomeForecastId'), 'BusIncomeForecast');
    }

    public function defineFields()
    {
    	$MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $fields = array();

        $fields[] = $incomeForecastIdS = new MTextField('incomeForecastIdS', null, _M('Código da previsão de lançamento', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $incomeForecastIdS->setJsHint(_M('Informe o código da previsão de lançamento.', $module));

        //Field person
        $contractPersonLabelS = new MText('contractPersonLabelS', _M('Pessoa', $module) . ':');
        $contractPersonLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractPersonIdS = new MLookupTextField('contractPersonIdS', $this->getFormValue('contractPersonIdS', $data->contractPersonIdS), _M('Pessoa',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractIdS', 'contractPersonIdS', 'contractPersonNameS', 'contractCourseIdS', 'contractCourseNameS', 'contractCourseVersionS'), 'academic', 'PersonContract', null, array('personId' => 'contractPersonIdS'), !$this->page->isPostBack());
        $contractPersonIdS->setJsHint(_M('Informe o código da pessoa',$module));
        $validators[] = new MIntegerValidator('contractPersonIdS', _M('Pessoa', $module), 'optional');
        $contractPersonNameS = new MTextField('contractPersonNameS', $this->getFormValue('contractPersonNameS',$this->postEnrollConditionUnblockSearch->contractPersonNameS), _M('Nome',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractPersonNameS->setJsHint(_M('Nome da pessoa', $module));
        $contractPersonNameS->setReadOnly(true);
        $hctPersonS = new MHContainer('hctContractS', array($contractPersonLabelS, $contractPersonIdS, $contractPersonNameS));
        $hctPersonS->setShowLabel(false);
        $fields[]  = $hctPersonS;

        //Field contract
        $contractLabelS = new MText('contractLabelS', _M('Contrato', $module) . ':');
        $contractLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractIdS  = new MLookupTextField('contractIdS', $this->getFormValue('contractIdS'), _M('Contrato',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractPersonIdS', 'contractPersonNameS', 'contractCourseIdS', 'contractCourseNameS', 'contractCourseVersionS'), 'academic', 'Contract', null, array('personId' => 'contractPersonIdS', 'courseId' => 'contractCourseIdS', 'courseVersion' => 'contractCourseVersionS'), !$this->page->isPostBack());
        $contractIdS->setJsHint(_M('Informe o código do contrato',$module));
        $validators[] = new MIntegerValidator('contractIdS', _M('Contrato', $module), 'optional');
        $contractCourseIdS = new MTextField('contractCourseIdS', $this->getFormValue('contractCourseIdS',$this->contractCourseIdS->value), _M('Curso',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseIdS->setJsHint(_M('Código do curso', $module));
        $contractCourseIdS->setReadOnly(true);
        $contractCourseVersionS = new MTextField('contractCourseVersionS', $this->getFormValue('contractCourseVersionS',$this->contractCourseVersionS->value), _M('Versão',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseVersionS->setJsHint(_M('Versão do curso', $module));
        $contractCourseVersionS->setReadOnly(true);
        $contractCourseNameS = new MTextField('contractCourseNameS', $this->getFormValue('contractCourseNameS',$this->contractCourseNameS->value), _M('Descrição',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractCourseNameS->setJsHint(_M('Nome do curso', $module));
        $contractCourseNameS->setReadOnly(true);
        $hctContractS = new MHContainer('hctContractS', array($contractLabelS, $contractIdS, $contractCourseIdS, $contractCourseVersionS, $contractCourseNameS));
        $hctContractS->setShowLabel(false);
        $fields[]    = $hctContractS;

        // Operation information
        $operationIdLabel = new MText('operationIdLabel', _M('Operação', $module).':');
        $operationIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $operationIdS = new MLookupTextField('operationIdS', $this->getFormValue('operationIdS',$data->operationIdS), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'operationDescriptionS', $module, 'Operation', null, null, true);
        $operationIdS->setJsHint(_M('Informe o código da operação', $module));
        $validators[] =  new MIntegerValidator('operationIdS', _M('Operação', $module));
        $operationDescriptionS = new MTextField('operationDescriptionS', $this->getFormValue('operationDescriptionS',$data->operationDescriptionS),'', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $operationDescriptionS->setReadOnly(true);
        $operationDescriptionS->setJsHint(_M('Descrição da operação', $module));
        $hctOperationS = new MHContainer('hctOperationS', array($operationIdLabel, $operationIdS, $operationDescriptionS));
        $hctOperationS->setShowLabel(true);
        $fields[]  = $hctOperationS;

        //Field account scheme
        $accountSchemeLabelS = new MText('accountSchemeLabelS', _M('Plano de contas',$module).':');
        $accountSchemeLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $accountSchemeIdS = new MLookupTextField('accountSchemeIdS', $this->accountSchemeIdS->value, null,SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'accountSchemeDescriptionS', 'accountancy', 'AccountScheme', null, null, true);
        $accountSchemeIdS->setJsHint(_M('Informe o código do plano de contas', $module));
        $validators[] = new MRegexpValidator('accountSchemeIdS', _M('Plano de contas', $module), '^[0-9]+(\.[0-9]+)*$');
        $accountSchemeDescriptionS = new MTextField('accountSchemeDescriptionS', $this->accountSchemeDescriptionS->value, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $accountSchemeDescriptionS->setReadOnly(true);
        $accountSchemeDescriptionS->setJsHint(_M('Descrição do plano de contas', $module));
        $hctAccountSchemeS = new MHContainer('hctAccountSchemeS', array($accountSchemeLabelS, $accountSchemeIdS, $accountSchemeDescriptionS));
        $hctAccountSchemeS->setShowLabel(true);
        $fields[] = $hctAccountSchemeS;

        //Filed cost center
        $costCenterLabelS = new MText('costCenterLabelS', _M('Centro de custo',$module).':');
        $costCenterLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $costCenterIdS = new MLookupTextField('costCenterIdS', $this->costCenterIdS->value, null,SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'costCenterDescriptionS', 'accountancy', 'CostCenter', null, null, true);
        $costCenterIdS->setJsHint(_M('Informe o código do centro de custos', $module));
        $validators[] = new MRegExpValidator('costCenterIdS', _M('Centro de custo', $module), '^[0-9]+(\.[0-9]+)*$');
        $costCenterDescriptionS = new MTextField('costCenterDescriptionS', $this->costCenterDescriptionS->value, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $costCenterDescriptionS->setReadOnly(true);
        $costCenterDescriptionS->setJsHint(_M('Descrição do centro de custo', $module));
        $hctCostCenterS = new MHContainer('hctCostCenterS', array($costCenterLabelS, $costCenterIdS, $costCenterDescriptionS));
        $hctCostCenterS->setShowLabel(true);
        $fields[] = $hctCostCenterS;

        //Field record date
        $recordDateS = new MCalendarField('recordDateS', $this->recordDateS->value, _M('Data de gravação', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $recordDateS->setJsHint(_M('Informe a data de gravação',$module));
        $fields[] = $recordDateS;
        $validators[] = new MDATEDMYValidator('recordDateS');
        
        //Field maturity date
        $maturityDateS = new MCalendarField('maturityDateS', $this->maturityDateS->value, _M('Data de vencimento', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $maturityDateS->setJsHint(_M('Informe a data de vencimento',$module));
        $fields[] = $maturityDateS;
        $validators[] = new MDATEDMYValidator('maturityDateS');
        
        $fields[] = $incentiveIdS = new MTextField('incentiveIdS', null, _M('Código do incentivo', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $incentiveIdS->setJsHint(_M('Informe o código do incentivo.', $module));
        
        // Field period
        $busPeriod = new BusinessAcademicBusPeriod();
        $periodIdS = new MComboBox('periodIdS', $this->periodIdS->value, _M('Período',$module), $busPeriod->listPeriod(), true, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $periodIdS->setJsHint(_M('Selecione um período', $module));
        $fields[] = $periodIdS;

        // Learning period
        $learningPeriodIdLabelS = new MText('learningPeriodIdLabelS', _M('Período letivo', $module).':');
        $learningPeriodIdLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $learningPeriodIdS = new MLookupTextField('learningPeriodIdS', $this->getFormValue('learningPeriodIdS', $data->learningPeriodIdS), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, array(null, null, null, null, null, 'learningPeriodDescriptionS'), 'academic', 'LearningPeriod', null, array('periodId' => 'periodIdS'), true);
        $learningPeriodIdS->setJsHint(_M('Informe o código do período letivo', $module));
        $validators[] =  new MIntegerValidator('learningPeriodIdS', _M('Período letivo', $module));
        $learningPeriodDescriptionS   = new MTextField('learningPeriodDescriptionS', $this->getFormValue('learningPeriodDescriptionS', $data->learningPeriodDescriptionS), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $learningPeriodDescriptionS->setJsHint(_M('Descrição do período letivo', $module));
        $learningPeriodDescriptionS->setReadOnly(true);
        $fields[]= new MHContainer('hctLearningPeriodS', array($learningPeriodIdLabelS, $learningPeriodIdS, $learningPeriodDescriptionS));
        
        $fields[] = $invoiceIdS = new MTextField('invoiceIdS', null, _M('Código do título', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $invoiceIdS->setJsHint(_M('Informe o código do título.', $module));
        
        $isAccountedLabelS = new MText('isAccountedLabelLabelS', _M('Está contabilizado',$module).':');
        $isAccountedLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $isAccountedS = new MRadioButtonGroup('isAccountedS', '', SAGU::listTrueFalseIndifferent(1), $this->isAccountedS->value, '', 'horizontal');
        $hctIsAccountedS = new MHContainer('hctIsAccountedS', array($isAccountedLabelS, $isAccountedS));
        $hctIsAccountedS->setShowLabel(false);
        $fields[] = $hctIsAccountedS;
        
        $isProcessedLabelS = new MText('isProcessedLabelLabelS', _M('Está processado',$module).':');
        $isProcessedLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $isProcessedS = new MRadioButtonGroup('isProcessedS', '', SAGU::listTrueFalseIndifferent(1), $this->isProcessedS->value, '', 'horizontal');
        $hctIsProcessedS = new MHContainer('hctIsProcessedS', array($isProcessedLabelS, $isProcessedS));
        $hctIsProcessedS->setShowLabel(false);
        $fields[] = $hctIsProcessedS;

        $isGeneratedLabelS = new MText('isGeneratedLabelLabelS', _M('Foi gerado',$module).':');
        $isGeneratedLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $isGeneratedS = new MRadioButtonGroup('isGeneratedS', '', SAGU::listTrueFalseIndifferent(1), $this->isGeneratedS->value, '', 'horizontal');
        $hctIsGeneratedS = new MHContainer('hctIsGeneratedS', array($isGeneratedLabelS, $isGeneratedS));
        $hctIsGeneratedS->setShowLabel(false);
        $fields[] = $hctIsGeneratedS;
                
        $isSupressedLabelS = new MText('isSupressedLabelLabelS', _M('É suprimida',$module).':');
        $isSupressedLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $isSupressedS = new MRadioButtonGroup('isSupressedS', '', SAGU::listTrueFalseIndifferent(1), $this->isSupressedS->value, '', 'horizontal');
        $hctIsSupressedS = new MHContainer('hctIsSupressedS', array($isSupressedLabelS, $isSupressedS));
        $hctIsSupressedS->setShowLabel(false);
        $fields[] = $hctIsSupressedS;
        
        parent::defineFields($fields, $module, 'GrdIncomeForecastSearch');
    }
    
    public function getTypesData()
    {
        $data = parent::getTypesData();

        $data->personId = MIOLO::_REQUEST('contractPersonIdS');
        $data->periodId = MIOLO::_REQUEST('periodIdS');
        $data->courseId = MIOLO::_REQUEST('courseIdS');
        
        return $data;
    }
}
