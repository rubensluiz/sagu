<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Invoice cancelation form
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @since
 * Class created on 27/08/2010
 *
 **/

/**
 * Form to cancel an invoice
 **/
class FrmInvoiceCancellation extends SManagementForm
{
    private $businessInvoice;
    /**
     * Class constructor
     **/
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();
        parent::__construct(new FinInvoice(), array('invoiceId'), 'BusInvoice', _M('Cancelamento de títulos', $module));
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $data = new stdClass();
        
        $busReasonCancellation = new BusinessFinanceBusReasonCancellationFinance();
        $reasonCancellations   = $busReasonCancellation->listReasonCancellationFinance();

        $this->toolbar->disableButton('tbBtnPrint');
        $this->toolbar->disableButton('tbBtnSearch');
        $this->toolbar->disableButton('tbBtnDelete');
        $this->toolbar->disableButton('tbBtnSave');
        $this->toolbar->disableButton('tbBtnNew');

        $invoiceIdH = new MLookupTextField('invoiceId', $data->invoiceId ? $data->invoiceId : $this->getFormValue('invoiceId', $data->invoiceId), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'limbo, invoiceName', 'finance', 'invoice', null, null, true);
        $invoiceIdLabel = new MText('invoiceIdLabel', _M('Título', $module) . ':');
        $invoiceIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $invoiceIdLabel->setClass('m-caption m-caption-required');
        $invoiceName = new MTextField('invoiceName', $data->invoiceName, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $fields[] = new MHContainer('hctInvoiceId', array($invoiceIdLabel, $invoiceIdH, $invoiceName));
        $fields[] = new MSelection('reasonCancellation', $data->reasonCancellation, _M('Motivo do cancelamento', $module), $reasonCancellations);
        $fields[] = new MButton('btnConfirm', _M('Cancelar', $module));
        $validators[] = new MIntegerValidator('invoiceId', _M('Título'), 'required');
        $validators[] = new MRequiredValidator('reasonCancellation');

        parent::defineFields($fields, $validators, $data);
    }

    public function btnConfirm_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $this->businessInvoice = new BusinessFinanceBusInvoice();
        $data = $this->getData();
        $dataInvoice = $this->businessInvoice->getInvoice($data->invoiceId);
        if ( !$dataInvoice->isCanceled )
        {
            $this->addError(_M('Este título já está cancelado', $module));
        }
        else
        {
            $std = $dataInvoice;            
            $std->isCanceled = DB_TRUE;
            $std->isImported = DB_FALSE;
            $std->reasonCancellationId = $data->reasonCancellation;
            
            $ok = $this->businessInvoice->updateInvoice($std);
            if ( $ok )
            {
                $MIOLO->information(_M('Título cancelado com sucesso.', $module), $MIOLO->getActionURL($module, $action, null));
            }
        }
    }
}
?>
