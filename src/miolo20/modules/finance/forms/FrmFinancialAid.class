<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finFinancialAid table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * 
 * @since
 * Class created on 12/12/2005
 *
 **/
class FrmFinancialAid extends SManagementForm
{

    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new FinFinancialAid(), array('incentiveTypeId'), 'BusFinancialAid');
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $pk = $this->getObjectPk();
            $data = $this->busObject->getFinancialAid($pk->incentiveTypeId);
            
            $fields[] = new MHiddenField('incentiveTypeId', $pk->incentiveTypeId);
            $fields[] = new MTextLabel('', $data->incentiveTypeId, _M('Código', $module));
        }
                
        // Descritpion 
        $financialAidDescription = new MTextField('financialAidDescription', $this->getFormValue('financialAidDescription', $data->description), _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $financialAidDescription->setJsHint(_M('Informe a descrição do auxílio financeiro', $module));
        $validators[] = new MRequiredValidator('financialAidDescription', _M('Descrição', $module), 'required');
        $fields[] = $financialAidDescription;
        
        // Operation code
        $operationIdLabel = new MText('operationIdLabel', _M('Operação', $module) . ':');
        $operationIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $operationIdLabel->setClass('m-caption m-caption-required');
        $operationId = new MLookupTextField('operationId', $this->getFormValue('operationId', $data->operationId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'operationDescription', 'finance', 'Operation', null, null, true);
        $operationId->setJsHint(_M('Informe o código da operação', $module));
        $validators[] = new MRequiredValidator('operationId', _M('Operação', $module), 'required');
        $operationDescription = new MTextField('operationDescription', $this->operationDescription->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), _M('Quando um aluno recebe desconto, a operação de desconto utilizada nos títulos será esta', $module));
        $operationDescription->setJsHint(_M('Descrição da operação', $module));
        $operationDescription->setReadOnly(true);
        $hctOperation = new MHContainer('hctOperation', array($operationIdLabel, $operationId, $operationDescription));
        $hctOperation->setShowLabel(true);
        $fields[] = $hctOperation;
        
        //operacao de pagamento
        $paymentOperationLabel = new MText('operationIdLabel', _M('Operação de estorno', $module) . ':');
        $paymentOperationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $paymentOperationLabel->setClass('m-caption m-caption-required');
        $paymentOperationId = new MLookupTextField('paymentOperation', $this->getFormValue('paymentOperation', $data->paymentOperation), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'paymentOperationDescription', 'finance', 'Operation', null, null, true);
        $paymentOperationId->setJsHint(_M('Informe o código da operação', $module));
        $validators[] = new MRequiredValidator('paymentOperation', _M('Operação', $module), 'required');
        $paymentOperationDescription = new MTextField('paymentOperationDescription', $this->paymentOperationDescription->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $paymentOperationDescription->setJsHint(_M('Descrição da operação', $module));
        $paymentOperationDescription->setReadOnly(true);
        $hctPaymentOperation = new MHContainer('hctPaymentOperation', array($paymentOperationLabel, $paymentOperationId, $paymentOperationDescription));
        $hctPaymentOperation->setShowLabel(true);
        $fields[] = $hctPaymentOperation;

        //operacao de repagamento
        $rePaymentOperationLabel = new MText('reOperationIdLabel', _M('Operação de reembolso', $module) . ':');
        $rePaymentOperationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $rePaymentOperationLabel->setClass('m-caption m-caption-required');
        $rePaymentOperationId = new MLookupTextField('rePaymentOperation', $this->getFormValue('rePaymentOperation', $data->rePaymentOperation), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'rePaymentOperationDescription', 'finance', 'Operation', null, null, true);
        $rePaymentOperationId->setJsHint(_M('Informe o código da operação', $module));
        $validators[] = new MRequiredValidator('rePaymentOperation', _M('Operação', $module), 'required');
        $rePaymentOperationDescription = new MTextField('rePaymentOperationDescription', $this->rePaymentOperationDescription->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $rePaymentOperationDescription->setJsHint(_M('Descrição da operação', $module));
        $rePaymentOperationDescription->setReadOnly(true);
        $hctRePaymentOperation = new MHContainer('hctRePaymentOperation', array($rePaymentOperationLabel, $rePaymentOperationId, $rePaymentOperationDescription));
        $hctRePaymentOperation->setShowLabel(true);
        $fields[] = $hctRePaymentOperation;
        
        $percentual = new MIntegerField('percentRenovacao', $this->getFormValue('percentRenovacao', $data->percentRenovacao), _M('Percentual de aproveitamento para renovação', $module));
        $percentual->setJsHint(_M('%', $module));
        $validators[] =  new MIntegerValidator('percentRenovacao', _M('Percentual de aproveitamento para renovação', $module), 'required');
        $fields[] = $percentual;
        
        // Adjust authorization
        $messagesType = SAGU::listTrueFalse(1);
        $needAdjustAuthorizationLabel = new MText('needAdjustAuthorizationLabel', _M('Precisa de autorização para ajuste', $module) . ':');
        $needAdjustAuthorizationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $needAdjustAuthorizationLabel->setClass('m-caption m-caption-required');
        $needAdjustAuthorization = $this->GetFormValue('needAdjustAuthorization', $data->needAdjustAuthorization ? $data->needAdjustAuthorization : DB_FALSE);
        $needAdjustAuthorization = new MRadioButtonGroup('needAdjustAuthorization', '', $messagesType, $needAdjustAuthorization, null, 'horizontal');
        $needAdjustAuthorization->SetShowLabel(false);
        $hctNeedAdjustAuthorization = new MHContainer('hctNeedAdjustAuthorization', array($needAdjustAuthorizationLabel, $needAdjustAuthorization));
        $fields[] = $hctNeedAdjustAuthorization;
        
        // Send invoices
        $sendInvoicesLabel = new MText('sendInvoicesLabel', _M('Enviar títulos', $module) . ':');
        $sendInvoicesLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $sendInvoices = $this->GetFormValue('sendInvoices', strlen($data->sendInvoices) > 0 ? $data->sendInvoices : DB_TRUE);
        $sendInvoices = new MRadioButtonGroup('sendInvoices', '', $messagesType, $sendInvoices, null, 'horizontal');
        $sendInvoices->SetShowLabel(false);
        $hctSendInvoices = new MHContainer('hctSendInvoices', array($sendInvoicesLabel, $sendInvoices));
        $fields[] = $hctSendInvoices;
        
        // Generate credits 
        $generateCreditsLabel = new MText('generateCreditsLabel', _M('Gerar créditos', $module) . ':');
        $generateCreditsLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $generateCredits = $this->GetFormValue('generateCredits', strlen($data->generateCredits) > 0 ? $data->generateCredits : DB_TRUE);
        $generateCredits = new MRadioButtonGroup('generateCredits', '', $messagesType, $generateCredits, null, 'horizontal');
        $generateCredits->SetShowLabel(false);
        $hctGenerateCredits = new MHContainer('hctGenerateCredits', array($generateCreditsLabel, $generateCredits));
        $fields[] = $hctGenerateCredits;
        
        // Require cost center
        $requireCostCenterLabel = new MText('requireCostCenterLabel', _M('Centro de custo requerido', $module) . ':');
        $requireCostCenterLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $requireCostCenter = $this->GetFormValue('requireCostCenter', strlen($data->requireCostCenter) > 0 ? $data->requireCostCenter : DB_FALSE);
        $requireCostCenter = new MRadioButtonGroup('requireCostCenter', '', $messagesType, $requireCostCenter, null, 'horizontal');
        $requireCostCenter->SetShowLabel(false);
        $hctRequireCostCenter = new MHContainer('hctRequireCostCenter', array($requireCostCenterLabel, $requireCostCenter));
        $fields[] = $hctRequireCostCenter;
        
        // Is extinct
        $isExtinctLabel = new MText('isExtinctLabel', _M('Está extinto', $module) . ':');
        $isExtinctLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $isExtinctLabel->setClass('m-caption m-caption-required');
        $isExtinct = $this->GetFormValue('isExtinct', $data->isExtinct ? $data->isExtinct : DB_FALSE);
        $isExtinct = new MRadioButtonGroup('isExtinct', '', $messagesType, $isExtinct, null, 'horizontal');
        $isExtinct->SetShowLabel(false);
        $hctIsExtinct = new MHContainer('hctIsExtinct', array($isExtinctLabel, $isExtinct));
        $fields[] = $hctIsExtinct;
        
        // Apply discounts
        $applyDiscountsLabel = new MText('applyDiscountsLabel', _M('Aplicar descontos', $module) . ':');
        $applyDiscountsLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $applyDiscounts = $this->GetFormValue('applyDiscounts', strlen($data->applyDiscounts) > 0 ? $data->applyDiscounts : DB_TRUE);
        $applyDiscounts = new MRadioButtonGroup('applyDiscounts', '', $messagesType, $applyDiscounts, null, 'horizontal');
        $applyDiscounts->SetShowLabel(false);
        $applyDiscounts->setJsHint(_M('Caso habilitado impede que o título receba descontos da política', $module));
        $hctApplyDiscounts = new MHContainer('hctApplyDiscountsCredits', array($applyDiscountsLabel, $applyDiscounts));
        $fields[] = $hctApplyDiscounts;
        
        if(SAGU::getParameter('FINANCE', 'PERMITIR_ADITAR_INCENTIVOS') == 't')
        {
            // Aditamento
            $aditarLabel = new MText('aditarLabel', _M('Permite que seja aditado', $module) . ':');
            $aditarLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $aditarIncentivo = $this->GetFormValue('aditarIncentivo', $data->aditarIncentivo ? $data->aditarIncentivo : DB_TRUE);
            $aditarIncentivo = new MRadioButtonGroup('aditarIncentivo', '', $messagesType, $aditarIncentivo, null, 'horizontal');
            $aditarIncentivo->SetShowLabel(false);
            $aditarIncentivo->setJsHint(_M('Caso habilitado impede que o título receba descontos da política', $module));
            $hctAditar = new MHContainer('hctAditar', array($aditarLabel, $aditarIncentivo));
            $fields[] = $hctAditar;
            
        }        
        parent::defineFields($fields, $validators, $data);
    }

    /*
     * Get types data 
     */
    public function getTypesData()
    {
        $data = new finFinancialAid();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }
            $data->description = $this->financialAidDescription->value;
        }
        
        $data->percentRenovacao = $this->getFormValue('percentRenovacao');
        
        return $data;
    }

}

?>
