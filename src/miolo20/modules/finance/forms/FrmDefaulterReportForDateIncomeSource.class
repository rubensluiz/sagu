<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Defaulter Report for date form
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 22/12/2005
 *
 **/

/**
 * Form to generate document defaulter
 **/
class FrmDefaulterReportForDateIncomeSource extends MForm
{
    private $home;
    public $showForm;

    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $this->showForm = true;
        $module = MIOLO::getCurrentModule();

        $this->home   = $data->home;

        parent::__construct(_M('Inadimplente', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {

        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar', $MIOLO->getActionURL($module, $action));
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnSearch');
 

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Defaulter', $this->home, 'defaulter-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;
        

        // início 1° grupo

        // data inicial
        $startDateLabel = new MText('startDateLabel', _M('Data inicial',$module).':');
        $startDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $startDateLabel->setClass('m-caption m-caption-required');
        $startDate = new MCalendarField('startDate', $this->getFormValue('startDate', $data->startDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $startDate->setJsHint(_M('Informe a data inicial',$module));
        $validators[] = new MDATEDMYValidator('startDate');
        $hctStartDate = new MHContainer('hctStartDate', array($startDateLabel, $startDate));
        $hctStartDate->setShowLabel(true);
        $field1[] = $hctStartDate;

        // data final
        $endDateLabel = new MText('endDateLabel', _M('Data final',$module).':');
        $endDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $endDateLabel->setClass('m-caption m-caption-required');
        $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $endDate->setJsHint(_M('Informe a data de término',$module));
        $validators[] = new MDATEDMYValidator('endDate');
        $hctEndDate = new MHContainer('hctEndDate', array($endDateLabel, $endDate));
        $hctEndDate->setShowLabel(true);
        $field1[] = $hctEndDate;

        // income source
        $incomeSourceLabel = new MText('incomeSourceLabel', _M('Origem',$module).':');
        $incomeSourceLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));        
        $incomeSourceLabel->setClass('m-caption m-caption-required');
        $incomeSourceId = new MLookupTextField('incomeSourceId', $this->getFormValue('incomeSourceId',$data->incomeSourceId), null,SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null,
            'incomeSourceDescription',
            'finance', 'IncomeSource', null, null, true);
        $incomeSourceId->setJsHint(_M('Selecione o código da origem', $module));
        $validators[] = new MIntegerValidator('incomeSourceId', _M('Origem', $module), 'required');
        $incomeSourceDescription = new MTextField('incomeSourceDescription', $this->getFormValue('incomeSourceDescription',$data->incomeSourceDescription), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $incomeSourceDescription->setReadOnly(true);
        $hctIncomeSource = new MHContainer('hctIncomeSource', array($incomeSourceLabel, $incomeSourceId, $incomeSourceDescription));
        $hctIncomeSource->setShowLabel(true);
        $field1[]   = $hctIncomeSource;

        // course
        $courseLabel = new MText('courseLabel', _M('Curso',$module).':');
        $courseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $courseId = new MLookupTextField('courseId', $this->getFormValue('courseId',$data->courseId), null,SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, array('courseVersion','courseName','','','','','grp2UnitId'), $module, 'CourseAccountSchemeCostCenter', null, array('courseId' => 'courseId'), true);
        $courseId->setJsHint(_M('Selecione o código do curso', $module));
        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion',$data->courseVersion), null,SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $couseVersionDescription = new MText('couseVersionDescription',_M('Versão',$module));
        $courseName = new MTextField('courseName', $this->getFormValue('courseName',$data->courseName), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $courseName->setReadOnly(true);
        $hctCourse = new MHContainer('hctCourse', array($courseLabel, $courseId, $couseVersionDescription, $courseVersion, $courseName));
        $hctCourse->setShowLabel(true);
        $field1[]   = $hctCourse;

        // Periodo do próximo semestre.
        // $dataPeriod  : Dados obtidos do list do business period
        $businessPeriod = new BusinessAcademicBusPeriod();
        $dataPeriod = $businessPeriod->listPeriod();

        $periodLabel = new MText('periodLabel', _M('Período do processo seletivo', $module) .':');
        $periodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $periodId = new MComboBox('periodId', $this->periodId->value, '', $dataPeriod, false, '', 2);
        $periodId->setJsHint( _M('Escolha o período do processo seletivo',$module) );
        $mhcPeriod = new MHContainer('mhcPeriod', array($periodLabel,$periodId));
        $mhcPeriod->setShowLabel(true);
        $field2[]   = $mhcPeriod;
        
        $MVContainerNull = new MVContainer('MVContainerNull', '');
        // Seta container como não ativo no form.
        $MVContainerNull->addBoxStyle('display', 'none');

        $MVContainerDefaulter = new MVContainer('MVContainerDefaulter', $field2);
        // Seta container como não ativo no form.
        $MVContainerDefaulter->addBoxStyle('display', 'none');


        // Criação do Radio Button.
        $messagesType[0][0] = _M('Graduação',$module);
        $messagesType[0][1] = 'graduation';
        $messagesType[1][0] = _M('Calouro',$module);
        $messagesType[1][1] = 'freshman';
 

        $options = ($messagesType[0][1].','.
                    $messagesType[1][1]);
        
        $nameFields = ('MVContainerNull,'.
                       'MVContainerDefaulter');
        $generateOptionLabel = new MText('generateOptionLabel', _M('Opção de geração',$module).':');
        $generateOptionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $generateOption = $this->GetFormValue('generateOption', $data->generateOption) ? $this->GetFormValue('generateOption', $data->generateOption) : '';
        $generateOption = new MRadioButtonGroup('generateOption', '', $messagesType, $generateOption, null, 'horizontal');
        $generateOption->SetShowLabel(false);
 
        $url = $MIOLO->getActionURL( 'basic', 'html:scripts:DocSelectedRadioButton.js' );
        $this->page->scripts->add($url);
        $generateOption->addAttribute('onClick', 'DocSelectedRadioButton( \''. $generateOption->name . '\', \''. $nameFields . '\', \'' . $options .  '\'  )');
        $hctGenerateOption = new MHContainer('hctGenerateOption', array($generateOptionLabel, $generateOption));
        $field1[]  = $hctGenerateOption;

        // terceiro grupo 
        $field1[]  = new MHiddenField('limbo', $this->getFormValue('limbo', $data->limbo));
        $fields1[] = new MVContainer('container3', $field1);
        $fields1[] = new MSeparator('');
        $fields1[] = $MVContainerNull;
        $fields1[] = $MVContainerDefaulter;
        // fim do 3° grupo

        // First group 
        $fields[]  = new MBaseGroup('mbgDefaulter', _M('Inadimplente', $module), $fields1);
        // Botao do primeiro Grupo.
        $btnGenerate = new MButton('btnGenerate', _M('Gerar', $module));
        $fieldss1[] = new MHContainer('hctBtn', array($btnGenerate));
        $fields[]  = $fieldss1;

        $fields[] = new MSeparator('');
        $this->setShowPostButton(false);

        $this->setFields($fields);
        $this->setLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $this->setValidators($validators);
        
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        $this->page->onLoad('document.' . $this->name . '.periodIdvd.focus();');
    }

    /**
     * Event triggered when button search is clicked 
     */
     public function btnGenerate_click($sender = null)
     {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $data->periodId       = $this->getFormValue('periodId');
        $data->incomeSourceId = $this->getFormValue('incomeSourceId');
        $data->startDate      = $this->getFormValue('startDate');
        $data->endDate        = $this->getFormValue('endDate');
        $data->courseId       = $this->getFormValue('courseId');
        $data->courseVersion  = $this->getFormValue('courseVersion');
        $data->generateOption = $this->getFormValue('generateOption');

        $business   = new BusinessFinanceBusDefaulter();
        $returnData = $business->getReportDefaulterForDateIncomeSource($data);

        $filters    = $returnData; 
        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdDefaulterReportForDateIncomeSource',$filters);
        $grdResults->setData($returnData);
        $this->addField($grdResults);



     }
}
?>
