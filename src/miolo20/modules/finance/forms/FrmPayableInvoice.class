<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finPayableInvoice table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * 
 * @since
 * Class created on 13/12/2005
 *
 **/
$MIOLO  = MIOLO::getInstance();
/**
 * Form to search the finInvoice table
 */
class FrmPayableInvoice extends SManagementForm
{

    /**
     * Class constructor
     */
    public function __construct()
    {
        parent::__construct(new FinPayableInvoice(), array('invoiceId'), 'BusPayableInvoice');
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $readOnly = false;
        // Field Convenant Id
        if ( in_array($function,array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $pk = $this->getObjectPk();
            $invoiceId = $pk->invoiceId;
            $data     = $this->busObject->getPayableInvoice($invoiceId);

            $invoiceIdH  = new MHiddenField('invoiceId', $this->getFormValue('invoiceId', $invoiceId) ? $this->getFormValue('invoiceId', $invoiceId) : MIOLO::_request('invoiceId', 'GET'));
            $invoiceIdLabel = new MText('invoiceIdLabel', _M('Título', $module).':');
            $invoiceIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $invoiceIdLabel->setClass('m-caption m-caption-required');
            $invoiceId_ =  new MText('invoiceId', $data->invoiceId);
            $fields[] = new MHContainer('hctInvoiceId', array($invoiceIdLabel, $invoiceId_, $invoiceIdH));

            if ($data->statusId == FinPayableInvoice::STATUS_PAYED)
            {
                $readOnly = true;
            }
        }

        //Field person
        $personLabel = new MText('personLabel', _M('Pessoa',$module).':');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personLabel->setClass('m-caption m-caption-required');

        if (in_array($function,array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)))
        {
            $businessPerson = new BusinessBasicBusPerson();
            $dataPerson     = $businessPerson->getPersonName($data->personId);
            $personIdLabel  = new MText('personIdLabel', _M('Pessoa', $module).':');
            $personIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $personIdLabel->setClass('m-caption m-caption-required');
            $personId       = new MText('personId', $this->getFormValue('personId',$data->personId));
            $personName     = new MText('personName', $dataPerson);
            $personIdH      = new MHiddenField('personId', $this->getFormValue('personId',$data->personId));
            $fields[]       = new MHContainer('hctPersonId', array($personIdLabel, $personId, $spacing, $personName, $personIdH));
        }
        else
        {
            $personId = new MLookupTextField('personId', $data->personId ? $data->personId : $this->getFormValue('personId',$data->personId), null,SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'personName', 'basic', 'Person', null, null, true);
            $personId->setJsHint(_M('Informe o código da pessoa', $module));
            $validators[] = new MIntegerValidator('personId',_M('Pessoa',$module), 'required');
            $personName = new MTextField('personName', $this->getFormValue('personName',$data->personName), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $personName->setReadOnly(true);
            $personName->setJsHint(_M('Nome da pessoa', $module));
            $hctPerson  = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
            $hctPerson->setShowLabel(true);
            $fields[]   = $hctPerson;
        }

        //Field cost center
        $costCenterLabel = new MText('costCenterLabel', _M('Centro de custo',$module).':');
        $costCenterLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $costCenterLabel->setClass('m-caption m-caption-required');
        $costCenterId = new MLookupTextField('costCenterId',$this->getFormValue('costCenterId',$data->costCenterId), null,SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'costCenterDescription', 'accountancy', 'CostCenter', null, null, true);
        $costCenterId->setJsHint(_M('Informe o código do centro de custos', $module));
        $costCenterId->setReadOnly($readOnly);
        $validators[] = new MRegexpValidator('costCenterId',_M('Centro de custo',$module), '^[0-9]+(\.[0-9]+)*$', 'required');
        $costCenterDescription = new MTextField('costCenterDescription',$this->getFormValue('costCenterDescription',$data->costCenterDescription), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $costCenterDescription->setReadOnly(true);
        $costCenterDescription->setJsHint(_M('Descrição do centro de custo', $module));
        $hctCostCenter = new MHContainer('hctCostCenter', array($costCenterLabel, $costCenterId, $costCenterDescription));
        $hctCostCenter->setShowLabel(true);
        $fields[]   = $hctCostCenter;

        //Field parcel number
        $parcelNumberLabel = new MText('parcelNumberLabel', _M('Número da parcela',$module).':');
        $parcelNumberLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $parcelNumberLabel->setClass('m-caption m-caption-required');
        $parcelNumber = new MTextField('parcelNumber', $this->getFormValue('parcelNumber',$data->parcelNumber), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $parcelNumber->setJsHint(_M('Informe o número de parcelas', $module));
        $parcelNumber->setReadOnly($readOnly);
        $validators[] = new MIntegerValidator('parcelNumber',_M('Número da parcela',$module), 'required');
        $hctParcelNumber = new MHContainer('hctParcelNumber', array($parcelNumberLabel, $parcelNumber));
        $hctParcelNumber->setShowLabel(true);
        $fields[]   = $hctParcelNumber;

        //Field emission date
        $emissionDateLabel = new MText('emissionDateLabel', _M('Data de emissão',$module).':');
        $emissionDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $emissionDateLabel->setClass('m-caption m-caption-required');
        $data->emissionDate = strlen($data->emissionDate) > 0 ? $data->emissionDate : date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'));
        $emissionDate = new MCalendarField('emissionDate', $this->getFormValue('emissionDate',$data->emissionDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $emissionDate->setJsHint(_M('Informe a data de emissão',$module));
        $emissionDate->setReadOnly($readOnly);
        $validators[] = new MDATEDMYValidator('emissionDate', _M('Data de emissão',$module), 'required');
        $hctEmissionDate = new MHContainer('hctEmissionDate', array($emissionDateLabel, $emissionDate));
        $hctEmissionDate->setShowLabel(true);
        $fields[]   = $hctEmissionDate;

        //Field maturity date
        $maturityDateLabel = new MText('maturityDateLabel', _M('Data de vencimento',$module).':');
        $maturityDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $maturityDateLabel->setClass('m-caption m-caption-required');
        $maturityDate = new MCalendarField('maturityDate', $this->getFormValue('maturityDate',$data->maturityDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $maturityDate->setJsHint(_M('Informe a data de vencimento',$module));
        $maturityDate->setReadOnly($readOnly);
        $validators[] = new MDATEDMYValidator('maturityDate', _M('Data de vencimento',$module), 'required');
        $hctMaturityDate = new MHContainer('hctMaturityDate', array($maturityDateLabel, $maturityDate));
        $hctMaturityDate->setShowLabel(true);
        $fields[]   = $hctMaturityDate;
        
        //Field receive date
        $receiveDateLabel = new MText('receiveDateLabel', _M('Data de recebimento', $module) . ':');
        $receiveDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $receiveDate = new MCalendarField('receiveDate', $this->getFormValue('receiveDate',$data->receiveDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $receiveDate->setJsHint(_M('Informe a data de recebimento',$module));
        $receiveDate->setReadOnly($readOnly);
        $validators[] = new MDATEDMYValidator('receiveDate', _M('Data de recebimento',$module), 'optional');
        $hctReceiveDate = new MHContainer('hctMaturityDate', array($receiveDateLabel, $receiveDate));
        $hctReceiveDate->setShowLabel(true);
        $fields[] = $hctReceiveDate;   

        //Field valor 
        $valueLabel   = new MText('valueLabel', _M('Valor',$module).':');
        $valueLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $valueLabel->setClass('m-caption m-caption-required');
        $value        = new MTextField('value', SAGU::formatNumber($this->getFormValue('value',$data->value)), '', SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'), _M('Ex.: 1.00', $module));
        $value->setJsHint(_M('Informe o valor',$module));
        $value->setReadOnly($readOnly);
        $validators[] =   new MFloatValidator('value', _M('Valor', $module), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), 'required');
        $hctValue     = new MHContainer('hctValue', array($valueLabel, $value));
        $fields[]     = $hctValue;

        //Field document number
        $documentNumberLabel = new MText('documentNumberLabel', _M('Número do documento', $module) . ':');
        $documentNumberLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $documentNumberLabel->setClass('m-caption m-caption-required');
        $documentNumber = new MTextField('documentNumber', $this->getFormValue('documentNumber', $data->documentNumber), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $documentNumber->setJsHint(_M('Informe o número do documento', $module));
        $documentNumber->setReadOnly($readOnly);
        $fields[] = new MHContainer('hctDN', array($documentNumberLabel, $documentNumber));
        $validators[] = new MRequiredValidator('documentNumber', _M('Número do documento', $module));

        //Field description
        $descriptionLabel = new MText('descriptionLabel', _M('Descrição', $module).':');
        $descriptionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $descriptionLabel->setClass('m-caption m-caption-required');
        $description = new MMultiLineField('description', $this->getFormValue('description',$data->description), '', 40, 4, 80);
        $description->setJsHint(_M('Comentários',$module));
        $description->setReadOnly($readOnly);
        $hctDescription = new MHContainer('hctDescription', array($descriptionLabel, $description));
        $fields[]   = $hctDescription;
        $validators[] = new MRequiredValidator('description', _M('Descrição', $module));

        // Entry 
        if( $function == SForm::FUNCTION_INSERT )
        {
            // Operation
            $operationLabel = new MText('operationLabel', _M('Operação', $module).':');
            $operationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $operationLabel->setClass('m-caption m-caption-required');
            $operationId = new MLookupTextField('operationId', $data->operationId ?  $data->operationId : $this->getFormValue('operationId',$data->operationId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'operationDescription', $module, 'Operation', null, null, true);
            $operationId->setJsHint(_M('Informe o código da operação',$module));
            $validators[] = new MIntegerValidator('operationId', _M('Operação', $module), 'required');
            $operationDescription = new MTextField('operationDescription', $this->getFormValue('operationDescription',$data->operationDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $operationDescription->setReadOnly(true);
            $operationDescription->setJsHint(_M('Descrição da operação', $module));
            $flds[] = new MHContainer('hctOperation', array($operationLabel, $operationId, $operationDescription));
        
            // Entry date
            $data->entryDate = strlen($data->entryDate) > 0 ? $data->entryDate : date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')); 
            $entryDateLabel = new MText('entryDateLabel', _M('Data de lançamento', $module).':');
            $entryDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $entryDateLabel->setClass('m-caption m-caption-required');
            
            // Nome do field esta com entryDate1 porque inexplicavelmente nao funciona com o nome entryDate
            $entryDate = new MCalendarField('entryDate1', $this->getFormValue('entryDate',$data->entryDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
            $entryDate->setJsHint(_M('Informe a data do lançamento',$module));

            $validators[] = new MDATEDMYValidator('entryDate1', _M('Data de lançamento',$module), 'required');
            $flds[] = new MHContainer('hctEntryDate', array($entryDateLabel, $entryDate));

            // Comments
            $entryCommentsLabel = new MText('entryCommentsLabel', _M('Comentários', $module).':');
            $entryCommentsLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $entryComments = new MMultiLineField('entryComments', $data->comments ? $data->comments : $this->getFormValue('entryComments',$data->entryComments), '', 40, 2, 40);
            $entryComments->setJsHint(_M('Informe os comentários',$module));
            $flds[] = new MHContainer('hctEntryComments', array($entryCommentsLabel, $entryComments));
       
            $fields[] = new MBaseGroup('entryGroup', _M('Lançamento', $module), $flds, 'vertical');
            unset($flds);
        }

        //Status
        $businessPayableInvoiceStatus = new BusinessFinanceBusPayableInvoiceStatus();
        $statusLabel = new MText( 'statusLabel', _M('Estado', $module) . ':' );
        $statusLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $statusLabel->setClass('m-caption m-caption-required');
        $statusId = new MSelection('statusId', $this->getFormValue('statusId',$data->statusId), '', $businessPayableInvoiceStatus->listPayableInvoiceStatus(FinPayableInvoice::STATUS_PAYED));
        $statusId->setJsHint( _M('Selecione o status', $module) );
        $statusId->setReadOnly($readOnly);
        $validators[] = new MRequiredValidator('statusId',_M('Estado', $module));
        $fields[] = new MHContainer('hctStatus', array($statusLabel, $statusId));
        
        parent::defineFields($fields, $validators, $data);
    }
    
    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' && $var != 'emissionDate' )
            {
                $this->$var->value = $this->getFormValue($var.'S') ? $this->getFormValue($var.'S') : '';
            }
            $this->emissionDate->value = date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'));
        } 
    }
    
    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'         => 'tbBtnDelete_confirm',
                        'function'        => 'delete',
                        'invoiceId' => MIOLO::_request('invoiceId')
                       );
                       
        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = SAGU::getParameter('BASIC', 'MSG_CONFIRM_RECORD_DELETE');
        $caption = _M('Questão',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }
    
    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $busBankInvoiceInfo = new BusinessFinanceBusBankAccount();
        $busBankInvoiceInfo->deleteBankInvoiceInfoInvoice(MIOLO::_request('invoiceId'));
        $busEntry = new BusinessFinanceBusEntry();
        $busEntry->deleteEntryInvoice(MIOLO::_request('invoiceId'));
        $business = new BusinessFinanceBusPayableInvoice();
        $ok = $business->deletePayableInvoice(MIOLO::_request('invoiceId'));
        

        if ( $ok )
        {
            $msg  = SAGU::getParameter('BASIC', 'MSG_RECORD_DELETED');
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Informação',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Erro executando a operação solicitada.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }
    
    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = new BusinessFinanceBusPayableInvoice();

        if ( $function == 'update' )
        {
            $ok  = $business->updatePayableInvoice($data);
            $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED');
        }
        else
        {
            $ok  = $business->insertPayableInvoice($data);
            $data->invoiceId = $ok;
            if( strlen($ok) > 0)
            {
                $businessEntry = new BusinessFinanceBusEntry();
                $data->comments = $data->entryComments;
                $ok  = ( strlen($businessEntry->insertEntry($data)) > 0 );
            }

            $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED');
        }

        if ( $ok )
        {
            
            $opts = array('invoiceIdS'=>$data->invoiceId);
            $goto = SAGU::getStackBackUrl();

            $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts );
            if ( $function == 'update' )
            {
                $caption = _M('Informação', $module);
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $optsYes = array('event'   =>'tbBtnNew_click',
                                 'function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $optsYes);
                
                $optsNo  = array('event'     =>'tbBtnSearch_click',
                                 'function'  =>'search',
                                 'invoiceIdS'=>$data->invoiceId);

                $gotoNo   = SAGU::getStackBackUrl();
                $gotoNo   = strlen($gotoNo)>0 ? $gotoNo : $MIOLO->getActionURL($module, $action, null, $optsNo);

                $optsEntry = array('event'    =>'isInvoice',
                                   'function' =>'insert',
                                   'invoiceId'=>$data->invoiceId);
                $actionEntry = 'main:register:entry';
                $gotoEntry   = $MIOLO->getActionURL($module, $actionEntry, null, $optsEntry);

                $gotoQuestion[0][0] = $gotoYes;
                $gotoQuestion[1][0] = $gotoNo;
                $gotoQuestion[2][0] = $gotoEntry;

                $event[0][0] = null;
                $label[0][0] = _M('Sim', $module);
                $label[1][0] = _M('Não', $module);
                $label[2][0] = _M('Inserir lançamento', $module);
                $numbersOfButtons = 3;

                SAGU::manyButtonsQuestion($msg, $gotoQuestion, $event, $label, $numbersOfButtons);
            }
        }
        else
        {
            $msg  = _M('Erro executando a operação solicitada.', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    public function getTypesData()
    {
        $data = new FinPayableInvoice();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var )
            {
                $data->$var = $this->$var->value;
            }
        }

        $data->referenceMaturityDate = $data->maturityDate;

        //fields for entry
        $data->operationId    = $this->operationId->value;
        $data->entryDate      = $this->entryDate1->value;
        $data->entryComments  = $this->comments->value;
        $data->creationType   = SAGU::getParameter('FINANCE', 'MANUAL_ENTRY_CREATION_TYPE');
        return $data;
    }


}

?>
