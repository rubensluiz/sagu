<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @since
 * Class created on 07/12/2005
 *
 **/

/**
 * Form to control import return files for bank
 **/
class FrmReturnAutomaticDebit748 extends SForm
{
    private $home;
    
    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct( _M('Retorno de débito automático para o Bansicredi', $module), null, null );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO   = MIOLO::getInstance();
        $module  = MIOLO::getCurrentModule();
        $action  = MIOLO::getCurrentAction();
        
        $data->bankId = '748'; 
        $fields[] = new MHiddenField('bankId', '748');

        $busOperation = new BusinessFinanceBusOperation();

        $fields[] = new MSelection('operationId', $this->getFormValue('operationId', $data->operationId), _M('Código da operação', $module), $busOperation->listOperation(null, true), true);
        $validators[] = new MRequiredValidator('operationId');
        
        $busBankAccount = new BusinessFinanceBusBankAccount();

        $fields[] = new MSelection('bankAccountId', $this->getFormValue('bankAccountId', $data->bankAccountId), _M('Código da conta bancária', $module), $busBankAccount->listBankAccount($data));
        $validators[] = new MRequiredValidator('bankAccountId', $data->bankAccountId);

        $fields[] = new MFileField('returnFile', $this->getFormValue('returnFile', $data->returnFile), _M('Arquivo de retorno', $module));
        $validators[]= new MRequiredValidator('returnFile', $data->returnFile);

        $fields[] = new MSeparator('');
        $fields[] = new MButton('send', _M('Enviar', $module), 'SUBMIT');
        $fields[] = new MSeparator('');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }

   /**
     * Get this action when submit button on this form is clicked
     */
    public function send_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $data   = $this->getTypesData();
        $MIOLO->getClass($module, 'ReturnAutomaticDebit748');

        try
        {
            if ($_FILES["returnFile"]["error"] === 0)
            {
                $data->uploadFileName = $_FILES["returnFile"]["name"];
                $data->contentType    = $_FILES["returnFile"]["type"];
                $data->size           = $_FILES["returnFile"]["size"];
                $tempFile             = $_FILES["returnFile"]["tmp_name"];
                
                $businessFile = new BusinessBasicBusFile();
                $businessFile->insertFile($data, $tempFile);

                $args = array('event'=>'process_click',
                              'fileId'=>$dataFile->fileId,
                              'bankAccountId'=>$data->bankAccountId,
                              'operationId'=>$data->operationId
                             );

                $goProcessURL = $MIOLO->getActionURL($module, $action, null, $args);
                $MIOLO->information(_M('Arquivo enviado com sucesso. Por favor, clique no botão "OK" para continuar o processo', $module), $goProcessURL);
            }
            else
            {
                throw new Exception(_M('Alguns problemas ocorreram ao atualizar o arquivo. Por favor, tente novamente.', $module));
            }
        }
        catch ( Exception $e )
        {
            $MIOLO->information($e->getMessage());
        }
        $automaticDebit = new ReturnAutomaticDebit748($data);
    }
   
    /**
     * Get this action when submit button on this form is clicked
     */
    public function process_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $MIOLO->getClass($module, 'ReturnAutomaticDebit748');
        $data = $this->getTypesData();
        
        $data->fileId        = MIOLO::_request('fileId');
        $data->bankAccountId = MIOLO::_request('bankAccountId');
        $data->operationId   = MIOLO::_request('operationId');
        
        try
        {
            $importAutomaticDebit = new ReturnAutomaticDebit748($data);

            //  $returnInfo = $automaticDebit->returnInfoData();

            if (is_object($importAutomaticDebit->statistics))
            {
                if (is_array($importAutomaticDebit->statistics->ReturnsOk))
                {
                    $field1 = $MIOLO->getUI()->getGrid($module, 'GrdReturnAutomaticDebit748');
                    $field1->setTitle(_M('Informações sobre retornos foram processadas com sucesso', $module));
                    $field1->setData($importAutomaticDebit->statistics->ReturnsOk);
                    $fields[] = $field1;
                }
                if (is_array($importAutomaticDebit->statistics->ReturnsError))
                {
                    $field2 = $MIOLO->getUI()->getGrid($module, 'GrdReturnAutomaticDebit748');
                    $field2->setData($importAutomaticDebit->statistics->ReturnsError);
                    $field2->setTitle(_M('Informações sobre retornos não encontradas', $module));
                    $fields[] = $field2;
                }
                $fields[] = new Separator('');
                $url           = $MIOLO->getActionURL($module, $this->home);
                $fields[] = new MButton('btnBack', _M('Voltar', $module), $url);
                $this->setFields($fields);
                $this->setShowPostButton(false);
            }
        }
        catch( Exception $e )
        {
            $this->AddError($e->getMessage());
        }
    }

    /**
     * Get the data from form and returns as a object
     */
    public function getTypesData()
    {
        $data->bankAccountId = $this->getFormValue('bankAccountId');
        $data->operationId   = $this->getFormValue('operationId');
        
        return $data;
    }
}
?>
