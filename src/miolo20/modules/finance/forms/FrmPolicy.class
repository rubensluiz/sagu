<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Policy form
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * @maintainer William Prigol Lopes [william@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 08/09/2005
 */
/**
 * Form to manipulate a policy
 */
// FIXME: sempre é incluído para declarar as funções da subdetail não associadas à MSubDetail.
MIOLO::uses('/ui/controls/msubdetail.class');
class FrmPolicy extends SManagementForm
{
    const BEFORE = 'B';
    const AFTER = 'A';

    /**
     * Class constructor
     */
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();

        // If is the first access to form, clear subdetail session data
        if ( !$MIOLO->page->isPostBack() )
        {
            MSubDetail::clearData('subDiscount');
        }

        parent::__construct(new FinPolicy(), array('policyId'), 'BusPolicy');
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);

            $pk = $this->getObjectPk();
            $policyId = $pk->policyId;
            $fields[] = new MTextLabel('policyId', $policyId, _M('Código', $module));
            $fields[] = new MHiddenField('policyId', $policyId);
            $data = $this->busObject->getPolicy($policyId);

            // Filters policy discount
            $filters = new stdClass();
            $filters->policyId = $policyId;

            $businessPolicyDiscount = new BusinessFinanceBusPolicyDiscount();
            $dataPolicyDiscount = $businessPolicyDiscount->searchPolicyDiscount($filters, true);

            if ( strlen(MIOLO::_REQUEST('bankTaxValue')) > 0 )
            {
                $data->bankTaxValue = MIOLO::_REQUEST('bankTaxValue');
            }
            if ( strlen(MIOLO::_REQUEST('daysToProtest')) > 0 )
            {
                $data->daysToProtest = MIOLO::_REQUEST('daysToProtest');
            }
            if ( strlen(MIOLO::_REQUEST('monthlyInterestPercent')) > 0 )
            {
                $data->monthlyInterestPercent = MIOLO::_REQUEST('monthlyInterestPercent');
            }
            if ( strlen(MIOLO::_REQUEST('daysToInterest')) > 0 )
            {
                $data->daysToInterest = MIOLO::_REQUEST('daysToInterest');
            }
            if ( strlen(MIOLO::_REQUEST('daysToFine')) > 0 )
            {
                $data->daysToFine = MIOLO::_REQUEST('daysToFine');
            }
            if ( strlen(MIOLO::_REQUEST('finePercent')) > 0 )
            {
                $data->finePercent = MIOLO::_REQUEST('finePercent');
            }
            if ( strlen(MIOLO::_REQUEST('daysToDiscount')) > 0 )
            {
                $data->daysToDiscount = MIOLO::_request('daysToDiscount');
            }
            if ( strlen(MIOLO::_REQUEST('discountPercent')) > 0 )
            {
                $data->discountPercent = MIOLO::_REQUEST('discountPercent');
            }
            if ( strlen(MIOLO::_REQUEST('interestType')) > 0 )
            {
                $data->interestType = MIOLO::_REQUEST('interestType');
            }
        }

        // Check data
        if ( !$data->applyFine )
        {
            $data->applyFine = $this->getFormValue('applyFine', DB_FALSE);
        }
        if ( !$data->applyInterest )
        {
            $data->applyInterest = $this->getFormValue('applyInterest', DB_FALSE);
        }

        // Field description
        $descriptionLabel = new MText('descriptionLabel', _M('Descrição', $module) . ':');
        $descriptionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $descriptionLabel->setClass('m-caption m-caption-required');
        $description = new MTextField('description', $this->getFormValue('description', $data->description), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $validators[] = new MRequiredValidator('description', _M('Descrição', $module));
        $description->setJsHint(_M('Informe a descrição da política', $module));
        $fields[] = new MHContainer('hctDescription', array($descriptionLabel, $description));

        // Field operation
        $operationLabel = new MText('operationLabel', _M('Operação', $module) . ':');
        $operationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $operationLabel->setClass('m-caption m-caption-required');
        $operationId = new MLookupTextField('operationId', $this->getFormValue('operationId', $data->operationId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'operationDescription', $module, 'Operation', null, null, true);
        $operationId->setJsHint(_M('Informe o código da operação', $module));
        $validators[] = new MIntegerValidator('operationId', _M('Operação', $module), 'required');
        $operationDescription = new MTextField('operationDescription', $this->getFormValue('operationDescription', $data->operationDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $operationDescription->setJsHint(_M('Descrição da operação', $module));
        $operationDescription->setReadOnly(true);
        $fields[] = new MHContainer('hctOperationId', array($operationLabel, $operationId, $operationDescription));

        // Field collection type
        $collectionTypeLabel = new MText('collectionType', _M('Tipo de cobrança', $module) . ':');
        $collectionTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $collectionTypeLabel->setClass('m-caption m-caption-required');
        $bussinessCollectionType = new BusinessFinanceBusCollectionType();
        $scnCollectionType = new MSelection('collectionTypeId', $this->getFormValue('collectionTypeId', $data->collectionTypeId), '', $bussinessCollectionType->listCollectionType(), false);
        $scnCollectionType->setJsHint(_M('Selecione o tipo de cobrança', $module));
        $hctCollectionType = new MHContainer('collectionType', array($collectionTypeLabel, $scnCollectionType));
        $divInformationRecovery = new MDiv('divInformationRecovery', $this->showCollectionTypePhp($data));
        $fields[] = new MVContainer('collectionType1', array($hctCollectionType, $divInformationRecovery));
        $validators[] = new MRequiredValidator('collectionTypeId', _M('Tipo de cobrança', $module), 'required');

        // Field collection type
        $emissionTypeLabel = new MText('emissionType', _M('Tipo de emissão', $module) . ':');
        $emissionTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $emissionTypeLabel->setClass('m-caption m-caption-required');
        $bussinessEmissionType = new BusinessFinanceBusEmissionType();
        $emissionTypeId = new MSelection('emissionTypeId', $this->getFormValue('emissionTypeId', $data->emissionTypeId), '', $bussinessEmissionType->listEmissionType(), false);
        $emissionTypeId->setJsHint(_M('Selecione o tipo de emissão', $module));
        $hctEmissionType = new MHContainer('emissionType', array($emissionTypeLabel, $emissionTypeId));
        $validators[] = new MRequiredValidator('emissionTypeId', _M('Tipo de emissão', $module), 'required');
        $fields[] = $hctEmissionType;

        $fields[] = new MSeparator('');

        if ( $this->getFormValue('collectionTypeId', $data->collectionTypeId) == SAGU::getParameter('FINANCE', 'COLLECTION_TYPE_TO_APPLY_PROTEST') )
        {
            $fields[] = new MHiddenField('daysToProtestH', $data->daysToProtest);
            $fields[] = new MHiddenField('bankTaxValueH', $data->bankTaxValue);
        }

        // Apply interest
        $applyInterestLabel = new MText('applyInterestLabel', _M('Aplicar juros', $module) . ':');
        $applyInterestLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $applyInterestLabel->setClass('m-caption m-caption-required');
        $applyInterest = new MSelection('applyInterest', strlen($this->getFormValue('applyInterest', $data->applyInterest)) > 0 ? $this->getFormValue('applyInterest', $data->applyInterest) : DB_FALSE, '', SAGU::listTrueFalse());
        $applyInterest->setJsHint(_M('Selecione sim para aplicar juros', $module));
        $validators[] = new MRequiredValidator('applyInterest', _M('Aplicar juros', $module));
        $hcyInterest = new MHContainer('hctApplyInterest', array($applyInterestLabel, $applyInterest));
        $divInterest = new MDiv('divInterest', $this->showInterestPhp($data));
        $fields[] = new MVContainer('vctApplyInterest', array($hcyInterest, $divInterest));

        if ( $this->getFormValue('applyInterest', $data->applyInterest) == DB_TRUE )
        {
            $fields[] = new MHiddenField('monthlyInterestPercentH', $data->monthlyInterestPercent);
            $fields[] = new MHiddenField('daysToInterestH', $data->daysToInterest);
            $fields[] = new MHiddenField('interestTypeH', $data->interestType);
        }

        // Apply fine
        $applyFineLabel = new MText('applyFineLabel', _M('Aplicar multa', $module) . ':');
        $applyFineLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $applyFineLabel->setClass('m-caption m-caption-required');
        $applyFine = new MSelection('applyFine', strlen($this->getFormValue('applyFine', $data->applyFine)) > 0 ? $this->getFormValue('applyFine', $data->applyFine) : DB_FALSE, '', SAGU::listTrueFalse());
        $applyFine->setJsHint(_M('Selecione sim para aplicar multa', $module));
        $validators[] = new MRequiredValidator('applyFine', _M('Aplicar multa', $module));
        $hctapplyFine = new MHContainer('hctApplyFine', array($applyFineLabel, $applyFine));
        $divBgrApplyFine = new MDiv('divBgrApplyFine', $this->showBgrApplyFinePhp($data));
        $fields[] = new MVContainer('vctApplyFine', array($hctapplyFine, $divBgrApplyFine));

        if ( $this->getFormValue('applyFine', $data->applyFine) == DB_TRUE )
        {
            $fields[] = new MHiddenField('finePercentH', $data->finePercent);
            $fields[] = new MHiddenField('daysToFineH', $data->daysToFine);
        }

        // SubDetail policy discount
        $labelDiscountId = new MText('discountIdLabel', _M('Código', $module) . ':');
        $labelDiscountId->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $fieldDiscountId = new MTextField('discountId', null, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), '', null, true);
        $hctDiscountId = new MHContainer('hctDiscountId', array($labelDiscountId, $fieldDiscountId));
        $hctDiscountId->setShowLabel(true);
        $sFields[] = $hctDiscountId;
        $sFields[] = new SHiddenField('policyId', null);

        $labelDiscountValue = new MText('discountValueLabel', _M('Valor', $module) . ':');
        $labelDiscountValue->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $labelDiscountValue->setClass('m-caption m-caption-required');
        $fieldDiscountValue = new MTextField('discountValue', null, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), 'Ex.: 1.00');
        $fieldDiscountValue->setJsHint(_M('Informe o valor do desconto', $module));
        $hctDiscountValue = new MHContainer('hctDiscountValue', array($labelDiscountValue, $fieldDiscountValue));
        $hctDiscountValue->setShowLabel(true);
        $sFields[] = $hctDiscountValue;

        $labelIsPercent = new MText('isPercentLabel', _M('É percentual', $module) . ':');
        $labelIsPercent->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $labelIsPercent->setClass('m-caption m-caption-required');
        $fieldIsPercent = new MSelection('isPercent', null, '', SAGU::listTrueFalse(0));
        $fieldIsPercent->setValue(DB_TRUE);
        $hctIsPercent = new MHContainer('hctIsPercent', array($labelIsPercent, $fieldIsPercent));
        $hctIsPercent->setShowLabel(false);
        $sFields[] = $hctIsPercent;

        $labelDaysToDiscount = new MText('daysToDiscountLabel', _M('Dias', $module) . ':');
        $labelDaysToDiscount->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $labelDaysToDiscount->setClass('m-caption m-caption-required');
        $fieldDaysToDiscount = new MTextField('daysToDiscount', null, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $fieldDaysToDiscount->setJsHint(_M('Informe o numero de dias para desconto', $module));
        $hctDaysToDiscount = new MHContainer('hctDaysToDiscount', array($labelDaysToDiscount, $fieldDaysToDiscount));
        $hctDaysToDiscount->setShowLabel(true);
        $sFields[] = $hctDaysToDiscount;

        $labelBeforeAfter = new MText('beforeAfterLabel', _M('Antes ou depois do vencimento', $module) . ':');
        $labelBeforeAfter->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $labelBeforeAfter->setClass('m-caption m-caption-required');
        $options[self::BEFORE] = _M('Antes', $module);
        $options[self::AFTER] = _M('Depois', $module);
        $fieldBeforeAfter = new MSelection('beforeAfter', null, '', $options);
        $fieldBeforeAfter->setValue(self::BEFORE);
        $hctBeforeAfter = new MHContainer('hctbBeforeAfter', array($labelBeforeAfter, $fieldBeforeAfter));
        $hctBeforeAfter->setShowLabel(true);
        $sFields[] = $hctBeforeAfter;

        $labelBeginClassPeriod = new MText('beginClassPeriodLabel', _M('Período inicial', $module) . ':');
        $labelBeginClassPeriod->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $fieldBeginClassPeriod = new MTextField('beginClassPeriod', null, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $fieldBeginClassPeriod->setJsHint(_M('Informe o período inicial do curso', $module));
        $hctBeginClassPeriod = new MHContainer('hctBeginClassPeriod', array($labelBeginClassPeriod, $fieldBeginClassPeriod));
        $hctBeginClassPeriod->setShowLabel(true);
        $sFields[] = $hctBeginClassPeriod;

        $labelEndClassPeriod = new MText('endClassPeriodLabel', _M('Período final', $module) . ':');
        $labelEndClassPeriod->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $fieldEndClassPeriod = new MTextField('endClassPeriod', null, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $fieldEndClassPeriod->setJsHint(_M('Informe o período final do curso', $module));
        $hctEndClassPeriod = new MHContainer('hctEndClassPeriod', array($labelEndClassPeriod, $fieldEndClassPeriod));
        $hctEndClassPeriod->setShowLabel(true);
        $sFields[] = $hctEndClassPeriod;

        $labelParcelNumber = new MText('parcelNumberLabel', _M('Parcela', $module) . ':');
        $labelParcelNumber->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $fieldParcelNumber = new MTextField('parcelNumber', null, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $fieldParcelNumber->setJsHint(_M('Informe o número da parcela', $module));
        $hctParcelNumber = new MHContainer('hctParcelNumber', array($labelParcelNumber, $fieldParcelNumber));
        $hctParcelNumber->setShowLabel(true);
        $sFields[] = $hctParcelNumber;

        // Columns
        $columns[] = new MGridColumn(_M('Código', $module), 'left', true, '30%', false, 'discountId');
        $columns[] = new MGridColumn(_M('Código', $module), 'left', true, '30%', false, 'policyId');
        $columns[] = new MGridColumn(_M('Valor', $module), 'left', true, '30%', true, 'discountValue');
        $columns[] = new MGridColumn(_M('É percentual', $module), 'left', true, '30%', true, 'isPercent', false, SAGU::listTrueFalse(0));
        $columns[] = new MGridColumn(_M('Dias', $module), 'left', true, '30%', true, 'daysToDiscount');
        $columns[] = new MGridColumn(_M('Antes ou depois do vencimento', $module), 'left', true, '10%', true, 'beforeAfter', false, $options);
        $columns[] = new MGridColumn(_M('Período inicial', $module), 'left', true, '30%', true, 'beginClassPeriod');
        $columns[] = new MGridColumn(_M('Período final', $module), 'left', true, '10%', true, 'endClassPeriod');
        $columns[] = new MGridColumn(_M('Parcela', $module), 'left', true, '10%', true, 'parcelNumber');

        // SubDetail validators
        $valids[] = new MRequiredValidator('isPercent', _M('É percentual', $module));
        $valids[] = new MRequiredValidator('beforeAfter', _M('Antes ou depois do vencimento', $module));
        $valids[] = new MIntegerValidator('daysToDiscount', _M('Dias', $module), 'required');
        $valids[] = new MIntegerValidator('beginClassPeriod', _M('Período inicial', $module), 'optional');
        $valids[] = new MIntegerValidator('endClassPeriod', _M('Período final', $module), 'optional');
        $valids[] = new MIntegerValidator('parcelNumber', _M('Parcela', $module), 'optional');
        $valids[] = new MFloatValidator('discountValue', _M('Valor', $module), '.', 2, 'required');

        $fields[] = $sub = new MSubDetail('subDiscount', _M('Aplicar desconto', $module), $columns, $sFields, true);
        $sub->setValidators($valids);
        // Set data subDetail
        if ( $dataPolicyDiscount && MIOLO::_REQUEST('__EVENTTARGETVALUE') != 'tbBtnSave:click' )
        {
            MSubDetail::setData($dataPolicyDiscount, 'subDiscount');
        }

        if ( $function != SForm::FUNCTION_INSERT )
        {
            // Is extinct
            $opts = SAGU::listTrueFalse(1);
            $isExtinctLabel = new MText('isExtinctLabel', _M('Está extinto', $module) . ':');
            $isExtinctLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $isExtinctLabel->setClass('m-caption m-caption-required');
            $isExtinct = new MRadioButtonGroup('isExtinct', '', $opts, $this->getFormValue('isExtinct', $data->isExtinct) ? $this->getFormValue('isExtinct', $data->isExtinct) : DB_FALSE, null, 'horizontal');
            $isExtinct->setShowLabel(false);
            $isExtinct->setJsHint(_M('Selecione se esta política está extinta ou não', $module));
            $fields[] = new MHcontainer('hctIsExtinct', array($isExtinctLabel, $isExtinct));
        }

        parent::defineFields($fields, $validators, $data);

        $this->collectionTypeId->addAttribute('onChange', $this->getAjaxAction('showCollectionTypePhp', 'divInformationRecovery', false, $data));
        $this->applyInterest->addAttribute('onChange', $this->getAjaxAction('showInterestPhp', 'divInterest', false, $data));
        $this->applyFine->addAttribute('onChange', $this->getAjaxAction('showBgrApplyFinePhp', 'divBgrApplyFine', false, $data));
    }

    /**
     * Function collection type, creates two required fields (days to protest and bank tax
     * value) ajax in the case of option to collectiontype is equal three.
     * @param $args is array of the arguments
     */
    public function showCollectionTypePhp($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data = $args;

        if ( $data->collectionTypeId != SAGU::getParameter('FINANCE', 'COLLECTION_TYPE_TO_APPLY_PROTEST') )
        {
            return ' ';
        }

        // Days to protest
        $daysToProtestLabel = new MText('daysToProtestLabel', _M('Dias para protesto', $module) . ':');
        $daysToProtestLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $daysToProtestLabel->setClass('m-caption m-caption-required');
        $daysToProtest = new MTextField('daysToProtest', $this->getFormValue('daysToProtest', $data->daysToProtest), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $daysToProtest->setJsHint(_M('Informe o dia para protesto', $module));
        $validators[] = new MRegExpValidator('daysToProtest', _M('Dias para protesto', $module), '(^-?[0-9][0-9]*$)');
        $validators[count($validators) - 1]->type = 'required';
        $fieldsCollection[] = new MHContainer('hctDaysToProtest', array($daysToProtestLabel, $daysToProtest));

        // Bank tax value
        $bankTaxValueLabel = new MText('bankTaxValueLabel', _M('Valor da taxa bancária', $module) . ':');
        $bankTaxValueLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $bankTaxValueLabel->setClass('m-caption m-caption-required');
        $bankTaxValue = new MTextField('bankTaxValue', SAGU::formatNumber($this->getFormValue('bankTaxValue', $data->bankTaxValue)), '', SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'), _M('Formato', $module) . ': 0.00');
        $bankTaxValue->setJsHint(_M('Informe o valor da taxa bancária. Ex.: 1.00', $module));
        $validators[] = new MFloatValidator('bankTaxValue', _M('Valor da taxa bancária', $module), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), 'required');
        $fieldsCollection[] = new MHContainer('hctBankTaxValue', array($bankTaxValueLabel, $bankTaxValue));

        // Alignment and positioning of extra elements
        $vctCollection[] = new MVContainer('vctCollection', $fieldsCollection);
        $bgrCollection = new MBaseGroup('bgrCollection', _M('Informações de cobrança', $module), $vctCollection);

        $field = $bgrCollection;

        return $field;
    }

    /**
     * Function interest, creates two required fields (Monthly interest percent and days to
     * interest) ajax in the case of option to apply interest is true.
     * @param $args is array of the arguments
     */
    public function showInterestPhp($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data = $args;
        if ( $data->applyInterest == DB_FALSE )
        {
            return ' ';
        }

        // Monthly interest percent
        $interestFields[] = new MLabel(_M('Informar o percentual de juros que será aplicado ao mês', $module) . '.');
        $monthlyInterestPercentLabel = new MText('monthlyInterestPercentLabel', _M('Percentual de juros ao mês', $module) . ':');
        $monthlyInterestPercentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $monthlyInterestPercentLabel->setClass('m-caption m-caption-required');
        $monthlyInterestPercent = new MTextField('monthlyInterestPercent', $this->getFormValue('monthlyInterestPercent', $data->monthlyInterestPercent), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), '%');
        $monthlyInterestPercent->setJsHint(_M('Informe o percentual de juros mensal. Ex.: 1.00', $module));
        $validators[] = new MFloatValidator('monthlyInterestPercent', _M('Percentual de juros ao mês', $module), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), 'required');
        $interestFields[] = new MHContainer('hctMonthlyInterestPercent', array($monthlyInterestPercentLabel, $monthlyInterestPercent));

        // Days to interest
        $interestFields[] = new MLabel(_M('Informar a quantidade de dias após a data de vencimento ao qual os juros devem ser aplicados', $module) . '.');
        $daysToInterestLabel = new MText('daysToInterestLabel', _M('Dias para aplicar juros', $module) . ':');
        $daysToInterestLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $daysToInterestLabel->setClass('m-caption m-caption-required');
        $daysToInterest = new MTextField('daysToInterest', $this->getFormValue('daysToInterest', $data->daysToInterest), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $daysToInterest->setJsHint(_M('Informe o dia para aplicar juros', $module));
        $validators[] = new MRegExpValidator('daysToInterest', _M('Dias para juros', $module), '(^-?[0-9][0-9]*$)');
        $validators[count($validators) - 1]->type = 'required';
        $interestFields[] = new MHContainer('hctDaysToInterest', array($daysToInterestLabel, $daysToInterest));

        // Interest type
        // Option the interest
        $opts[] = new MOption('optSimple', 'S', _M('Simples', $module), true);
        $opts[] = new MOption('optCompound', 'C', _M('Composto', $module), false);

        $interestTypeLabel = new MText('typeInterestLabel', _M('Tipo de juros', $module) . ':');
        $interestTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $interestType = new MRadioButtonGroup('interestType', '', $opts, $data->interestType, null, 'horizontal');
        $interestType->SetShowLabel(false);
        $hctInterestType = new MHContainer('hctInterestType', array($interestTypeLabel, $interestType));
        $interestFields[] = $hctInterestType;
        $vctInterest = new MVContainer('vctInterest', $interestFields);
        $mbgInterest = new MBaseGroup('bgrInterest', _M('Juros', $module), array($vctInterest));

        $field = $mbgInterest;

        return $field;
    }

    /**
     * Function apply fine, creates two required fields (fine percent and days to fine)
     * ajax in the case of option to apply fine is true.
     * @param $args is array of the arguments
     */
    public function showBgrApplyFinePhp($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data = $args;
        if ( $data->applyFine == DB_FALSE )
        {
            return ' ';
        }

        // Fine percent
        $fineFields[] = new MText('finePercentTip', _M('Informar o percentual de multa que será aplicado mensalmente após o vencimento', $module) . '.');
        $finePercentLabel = new MText('finePercentLabel', _M('Percentual de multa', $module) . ':');
        $finePercentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $finePercentLabel->setClass('m-caption m-caption-required');
        $finePercent = new MTextField('finePercent', $this->getFormValue('finePercent', $data->finePercent), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), '%');
        $finePercent->setJsHint(_M('Informe o percentual de multa. Ex.: 1.00', $module));
        $validators[] = new MFloatValidator('finePercent', _M('Percentual de multa', $module), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), 'required');
        $fineFields[] = new MHContainer('hctFinePercent', array($finePercentLabel, $finePercent));

        // Days to fine
        $fineFields[] = new MText('daysToFineLabel', _M('Informar a quantia de dias após a data de vencimento ao qual a multa deverá ser aplicada', $module) . '.');
        $daysToFineLabel = new MText('daysToFineLabel', _M('Dias para multa', $module) . ':');
        $daysToFineLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $daysToFineLabel->setClass('m-caption m-caption-required');
        $daysToFine = new MTextField('daysToFine', $this->getFormValue('daysToFine', $data->daysToFine), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $daysToFine->setJsHint(_M('Informe o dia para aplicar multa', $module));
        $validators[] = new MRegExpValidator('daysToFine', _M('Dias para multa', $module), '(^-?[0-9][0-9]*$)', 'required');
        $fineFields[] = new MHContainer('hctDaysToFine', array($daysToFineLabel, $daysToFine));
        $vctFineFields[] = new MVContainer('hctFine', $fineFields);
        $mbgFine = new MBaseGroup('bgrApplyFine', _M('Multa', $module), $vctFineFields);

        $field = $mbgFine;

        return $field;
    }

    /*
     * Saves data of the Subdetail
     */
    public function saveDataSubDetail($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $ok = true;

        $businessDiscount = new BusinessFinanceBusPolicyDiscount();

        // Data subDetail
        $dataSubDetail = $data->subDiscount;
        if ( is_array($dataSubDetail) )
        {
            // If function is insert
            if ( $function == SForm::FUNCTION_INSERT )
            {
                foreach ( $dataSubDetail as $sub )
                {
                    // Insert
                    if ( !($sub->removeData) )
                    {
                        $sub->policyId = $data->policyId;
                        $ok = $businessDiscount->insertPolicyDiscount($sub);
                    }
                }
            }
            // If function is update
            if ( $function == SForm::FUNCTION_UPDATE )
            {
                foreach ( $dataSubDetail as $sub )
                {
                    // Insert
                    if ( !$sub->removeData && (strlen($sub->discountId) == 0) )
                    {
                        $ok = $businessDiscount->insertPolicyDiscount($sub);
                    }
                    // Update
                    elseif ( !$sub->removeData && (strlen($sub->discountId) > 0) )
                    {
                        $ok = $businessDiscount->updatePolicyDiscount($sub);
                    }
                    // Delete
                    elseif ( $sub->removeData && (strlen($sub->discountId) > 0) )
                    {
                        $ok = $businessDiscount->deletePolicyDiscount($sub->discountId);
                    }
                }
            }
        }

        return $ok;
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     */
    public function tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data = $this->getTypesData();
        $business = new BusinessFinanceBusPolicy();

        // There are the fields that make part of Ajax that are appearing are met.
        if ( $this->checkAjaxFields($data) )
        {
            // Begin transactions
            $business->beginTransaction();

            // Update policy
            if ( $function == SForm::FUNCTION_UPDATE )
            {
                $ok = $business->updatePolicy($data);
            }
            // Insert policy
            if ( $function == SForm::FUNCTION_INSERT )
            {
                $ok = $business->insertPolicy($data);
            }
            // Insert or update is ok
            if ( $ok )
            {
                // Insert registers of the subDetail
                $data->policyId = $ok;
                $ok = $this->saveDataSubDetail($data);
                // Insert or update of the subDetail is ok
                if ( $ok )
                {
                    $business->commit();
                    // Confirm insert or update by smanagmentform
                    $this->confirmInsertUpdate($ok);
                }
            }
        }
        else
        {
            $this->addError(_M('Campos contendo * são de preenchimento obrigatório', $module));
        }
    }

    /**
     * Method to verify that Ajax are in the fields that are empty. Returns true if all fields
     * are filled.
     */
    public function checkAjaxFields($data)
    {
        $okAjaxFields = true;

        if ( $data->collectionTypeId == SAGU::getParameter('FINANCE', 'COLLECTION_TYPE_TO_APPLY_PROTEST') )
        {
            if ( $data->bankTaxValue == '' )
            {
                $okAjaxFields = false;
            }

            if ( $data->daysToProtest == '' )
            {
                $okAjaxFields = false;
            }
        }
        if ( $data->applyInterest == DB_TRUE )
        {
            if ( $data->monthlyInterestPercent == '' )
            {
                $okAjaxFields = false;
            }

            if ( $data->daysToInterest == '' )
            {
                $okAjaxFields = false;
            }
        }
        if ( $data->applyFine == DB_TRUE )
        {
            if ( $data->daysToFine == '' )
            {
                $okAjaxFields = false;
            }

            if ( $data->finePercent == '' )
            {
                $okAjaxFields = false;
            }
        }

        return $okAjaxFields;
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     */
    public function getTypesData()
    {
        $data = clone ($this->object);
        $vars = get_object_vars($data);

        foreach ( $vars as $var => $value )
        {
            $fieldName = $var;
            $data->$var = MIOLO::_REQUEST($fieldName);
        }

        // Get data subDetail
        if ( is_object($this->subDiscount) )
        {
            $data->subDiscount = MSubDetail::getData('subDiscount');
        }

        return $data;
    }
}
?>
