<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Close invoice form
 *
 * @author Eduardo Beal Miglioranza [eduardo@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 22/12/2005
 *
 **/

/**
 * Form to manipulate a bank account
 **/
class FrmCloseInvoice extends SForm
{
    private $home;

    /**
     * Variable instance class that manipulates date.
     */
    private $krono;

    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        if ( MIOLO::_REQUEST('event') == 'btnReemitirTituloVencido_click' )
        {
            $this->btnReemitirTituloVencido_click();
        }
        else
        {
        
            $module     = MIOLO::getCurrentModule();

            $MIOLO = MIOLO::getInstance();
            $MIOLO->information(_M("Este formulário não é mais utilizado no sistema. Para utilizar a baixa manual de títulos, você deve alterar a configuração do parâmetro CLOSE_INVOICE_HANDLER para 'main:closeInvoiceAlt1'."));

            $this->home = $data->home;
            $this->krono = new MKrono( );

            parent::__construct( _M('Baixar título', $module), null, null );
        }
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        try
        {
            //Get login
            $loginUser = $MIOLO->GetLogin();
            //Business person
            $businessPhysicalPersonEmployee = new BusinessBasicBusPhysicalPersonEmployee();
            //Object person
            $person = $businessPhysicalPersonEmployee->getPersonByMioloUserName($loginUser->id);

            if ( is_object($person) )
            {
                //Business open counter
                $businessOpenCounter = new BusinessFinanceBusOpenCounter();

                //Filter counter
                $filter = new stdClass();
                $filter->operatorId = $person->personId;
                $filter->open = 't';
                //Get data counter
                $openCounter = $businessOpenCounter->searchOpenCounter($filter);
                if ( is_array($openCounter) )
                {
                    $objectOpenCounter = $businessOpenCounter->getOpenCounter($openCounter[0][0]);

                    $data->openCounterId = $objectOpenCounter->openCounterId;
                    $data->counterId = $objectOpenCounter->counterId;
                    $data->counterDescription = $objectOpenCounter->counterDescription;
                    $data->unitDescription = $objectOpenCounter->unitDescription;
                    $data->operatorId = $objectOpenCounter->operatorId;
                    $data->operatorName = $objectOpenCounter->operatorName;

                    $person = $businessPhysicalPersonEmployee->getPersonByMioloUserName($objectOpenCounter->responsibleUserName);
                }
                else
                {
                    $msg = _M('Erro. Você não tem permissão para acessar este processo!', $module) . ' ' .
                           _M('O usuário atual do sistema não é um operador de caixa.', $module);
                    throw new Exception($msg);
                }
            }
            else
            {
                $msg = _M('Você não tem permissão para acessar este processo.', $module) . ' ' .
                       _M('O usuário atual do sistema não é um funcionário ou não é um operador de caixa.', $module);
                throw new Exception($msg);
            }
        }
        catch ( Exception $e )
        {
            $businessInvoice = new BusinessFinanceBusReceivableInvoice();
            $invoiceData = $businessInvoice->getInvoice(MIOLO::_request('invoiceId'));
            $MIOLO->error($e->getMessage(), $MIOLO->getActionURL($module, 'main', null, array('personId'=>$invoiceData->personId, 'event'=>'btnSearch_click')));
        }

        //Fields counter
        $fields[] = new MHiddenField('openCounterId', $data->openCounterId);
        $responsibleId['responsibleIdLabel'] = new MText('responsiblePersonId', _M('Código do responsável', $module) . ':');
        $responsibleId['responsibleIdLabel']->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $responsibleId['responsibleId'] = new MTextLabel('responsibleId', $person->personId);
        $hctId = new MHContainer('hctIdS', $responsibleId);
        $responsibleName['responsibleNameLabel'] = new MText('responsibleNameLabel', _M('Nome do resposável', $module) . ':');
        $responsibleName['responsibleNameLabel']->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $responsibleName['responsibleName'] = new MTextLabel('responsibleName', $person->name);
        $hctName = new MHContainer('hctNameS', $responsibleName);
        $counterId['counterIdLabel'] = new MText('counterIdLabel', _M('Caixa', $module) . ':');
        $counterId['counterIdLabel']->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $counterId['counterId'] = new MTextLabel('counterId', $data->counterId);
        $counterId['counterDescription'] = new MTextLabel('counterDescription', $data->counterDescription);
        $counterId['unitDescriptionLabel'] = new MText('unitDescriptionLabel', _M('Unidade', $module) . ':');
        $counterId['unitDescriptionS'] = new MTextLabel('unitDescription', $data->unitDescription);
        $hctCounter = new MHContainer('hctCounterDescription', $counterId);
        $operator['operatorLabel'] = new MText('operatorLabel', _M('Operador', $module) . ':');
        $operator['operatorLabel']->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $operator['operatorId'] = new MTextLabel('operatorId', $data->operatorId);
        $operator['operatorName'] = new MTextLabel('operatorName', $data->operatorName);
        $hctOperator = new MHContainer('hctOperator', $operator);
        $fields[] = new MBaseGroup('baseOpenCounter', _M('Caixa',$module), array($hctId, $hctName, $hctCounter, $hctOperator), 'vertical');

        //Field invoice
        $invoiceId    = $this->getFormValue('invoiceId', $data->invoiceId) ? $this->getFormValue('invoiceId', $data->invoiceId) : MIOLO::_request('invoiceId', 'GET');
        $fldInvoiceId = new MTextLabel('invoiceId', $invoiceId, _M('Título', $module));
        $fields[]     = $fldInvoiceId;

        // Static information about invoice close type
        $selData = array(array('I', _M('Integral', $module)),
                         array('P', _M('Parcial', $module))
                        );

        $closeTypeData = $this->getFormValue('closeType') ? $this->getFormValue('closeType') : 'I';
        $closeType     = new MSelection('closeType', $closeTypeData, _M('Tipo de fechamento', $module), $selData);
        $closeType->setJsHint(_M('Selecione um tipo de fechamento', $module));
        $closeType->setAutoSubmit(true);
        $fields[]      = $closeType;

        // Process fields
        if ( (strlen($closeTypeData)>0) && (strlen($invoiceId)>0) )
        {
            $businessReceivableInvoice = new BusinessFinanceBusReceivableInvoice();
            if ( $closeTypeData == 'I' )
            {
                $dataReceivableInvoice = $businessReceivableInvoice->getReceivableInvoiceValues($invoiceId);
                $nominalValue          = $dataReceivableInvoice->nominalValue;
            }
            else
            {
                $nominalValue = $businessReceivableInvoice->getNominalValue($invoiceId);
            }

            //Field nominal value
            $fldNominalValue = new MTextField('nominalValue', $nominalValue, _M('Valor nominal', $module), SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE') );
            $fldNominalValue->setReadOnly(true);

            //Field value
            $fldValue = new MTextField('value', strlen($this->getFormValue('value', $data->value))>0 ? $this->getFormValue('value', $data->value) : $dataReceivableInvoice->balanceWithPolicies,  _M('Valor', $module), SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'));

            //Field species
            $speciesIdLabel = new MText('speciesIdLabel', _M('Espécie',$module).':');
            $speciesIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $speciesIdLabel->setClass('m-caption m-caption-required');
            $business     = new BusinessFinanceBusSpecies();
            $speciesId    = new MComboBox('speciesId', $this->speciesId->value, '', $business->listSpecies(), false, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $validators[] = new MIntegerValidator('speciesId', _M('Espécie', $module));
            $speciesId->setJsHint( _M('Selecione uma espécie',$module) );
            $hctSpecies   = new MHContainer('hctSpecies', array($speciesIdLabel, $speciesId));
            $hctSpecies->setShowLabel(true);
            $fields[]     = $hctSpecies;

            //Field default operation
            $businessDefaultOperations = new BusinessFinanceBusDefaultOperations();
            $dataDefaultOperations     = $businessDefaultOperations->getDefaultOperations();
            $businessOperation         = new BusinessFinanceBusOperation();
            $dataOperation             = $businessOperation->listOperation('C', true);
            $fldOperation              = new MSelection('operationId', strlen($this->getFormValue('operationId'))>0 ? $this->getFormValue('operationId') : $dataDefaultOperations->paymentOperation,  _M('Operação (somente crédito)', $module), $dataOperation, true);
            $fldOperation->setJsHint(_M('Selecione uma operação', $module));
            $validators[] = new MRequiredValidator('operationId', _M('Operação (somente crédito)', $module), 'required');

            switch ( $closeTypeData )
            {
                case 'I':
                    $fldValue->setReadOnly(true);
                    break;
                case 'P':
                    $fldValue->setJsHint(_M('Informe o valor', $module));
                    break;
            }

            $fields[] = $fldNominalValue;
            $fields[] = $fldValue;
            $fields[] = $fldOperation;

            $comments = new MMultiLineField('comments', $this->getFormValue('comments', defined('DEFAULT_CLOSE_INVOICE_COMMENTS') ? DEFAULT_CLOSE_INVOICE_COMMENTS : ''), _M('Comentários', $module), 60, 4, 60);
            $comments->setJsHint(_M('Adicionar comentários', $module));
            $fields[] = $comments;
        }
        else
        {
            $fields[] = new MHiddenField('value', $this->getFormValue('value'));
            $fields[] = new MSeparator(_M('Por favor, selecione o tipo de fechameto.', $module));
        }

        // Is counter moviment
        $data->operation =  'C';
        $fields[] = new MHiddenField('operation', $this->getFormValue('operation') ?  $this->getFormValue('operation') : $data->operation);

        $fields[] = new MHiddenField('goto', $this->getFormValue('goto') ? $this->getFormValue('goto') : MIOLO::_request('goto', 'GET'));
        $fields[] = new MSeparator('');
        $fields[] = new MButton('btnCloseInvoice', _M('Baixar título', $module), 'SUBMIT' );
        $fields[] = new MSeparator('');

        $this->setFields($fields);
        if ( count($validators) > 0 )
        {
            $this->setValidators($validators);
        }

        $this->setLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action, 0, strrpos($action,':'))));
        $this->page->onLoad('document.' . $this->name . '.closeType.focus();');
    }

    /**
     * Event triggered when the button close invoice is clicked
     */
    public function btnCloseInvoice_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $businessInvoice = new BusinessFinanceBusReceivableInvoice();

        $businessInvoice->beginTransaction();
        try
        {
            if ( $businessInvoice->closeInvoice($data) )
            {
                $businessInvoice->commit();

                if ( strlen($this->getFormValue('goto'))>0 )
                {
                    //Goto finance module
                    $invoiceData = $businessInvoice->getInvoice($data->invoiceId);
                    $varsFinancial = array('personId'=>$invoiceData->personId);
                    $gotoFinancial = $MIOLO->getActionURL($module, 'main', null, $varsFinancial);

                    //Print receipt
                    $varsPrint   = array('personId'=>$invoiceData->personId,
                                         'invoiceId'=>$invoiceData->invoiceId,
                                         'event'=>'btnPrintInvoice_click');

                    $gotoPrint   = $MIOLO->getActionURL($module, $action, null, $varsPrint);
                    $msg = _M('O título foi fechado com sucesso', $module);

                    //Business SPC
                    $businessSpc = new BusinessFinanceBusSpc();
                    $filtersSpc = new stdClass();
                    $filtersSpc->personId = $invoiceData->personId;

                    //Verify the person in SPC
                    $dataSpc = $businessSpc->peopleInTheSpc($filtersSpc);

                    //If you have active movements concatenates the message
                    if ( count($dataSpc)>0 );
                    {
                        $msg .='<ul><li>' . _M('Esta pessoa possui movimentações ativas no cadastro de spc.', $module) . '</li></ul>';
                    }

                    $msg .= '<ul>' .
                            ' <li>' . _M('Clique OK para retornar ao módulo financeiro', $module) . '.</li>' .
                            ' <li>' . _M('Clique IMPRIMIR para imprimir o comprovante fiscal', $module) . '.</li>' .
                            '</ul>';

                    $prompt = new MPrompt(_M('Questão', $module), $msg);
                    $prompt->setType('question');
                    $prompt->addButton(_M('OK', $module), $gotoFinancial);
                    $prompt->addButton(_M('Imprimir', $module), $gotoPrint);

                    $this->setFields($prompt);
                }
                else
                {
                    $MIOLO->information(_M('O título foi fechado com sucesso', $module), 'window.opener.location.reload(); self.close();');
                }
            }
            else
            {
                throw new Exception(_M('Alguns erros ocorreram neste processo. Por favor, tente novamente.', $module), 'self.close();');
            }
        }
        catch ( Exception $e )
        {
            $businessInvoice->rollback();
            $this->AddError($e->getMessage());
        }

        $businessInvoice->commit();
    }

    public function btnPrintInvoice_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $filters->invoiceId = MIOLO::_request('invoiceId');
        $filters->personId = MIOLO::_request('personId');

        $businessCompany = new BusinessBasicBusCompany();
        $businessLegalPerson = new BusinessBasicBusLegalPerson();
        $businessPerson = new BusinessBasicBusPerson();
        $businessDocument = new BusinessBasicBusDocument();
        $businessConfig = new BusinessBasicBusConfig();
        $businessEntry = new BusinessFinanceBusEntry();
        $businessInvoice = new BusinessFinanceBusInvoice();
        $businessDefaultOperations = new BusinessFinanceBusDefaultOperations();

        if (SAGU::checkParameter( 'DEFAULT_COMPANY_CONF') )
        {
            $companyData = $businessCompany->getCompany( SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF') );

            if (is_null( $companyData->companyId ))
            {
                $MIOLO->error(_M('Parâmetro DEFAULT_COMPANY_CONF aponta para a empresa inexistente @1.', $module, SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF') ) );
            }
        } else
        {
            $MIOLO->error( _M('Problemas ao procurar as informações da instituição, por favor, verifique o cadastro da instituição' ) );
        }

        $personData = $businessLegalPerson->getLegalPerson( $companyData->personId );

        $tags = array
        (
            '$COMPANYNAME'   => $personData->name,
            '$LOCATION1'     => $personData->locationType . $personData->location . ', '. $personData->number,
            '$NEIGHBORHOOD1' => $personData->neighborhood,
            '$CITY1'         => $personData->cityName . '-' . $personData->stateId,
            '$ZIPCODE1'      => $personData->zipCode,
            '$PHONE1'        => $personData->phone,
            '$CNPJ1'         => $personData->cnpj,
            '$IE1'           => $personData->stateRegistration
        );

        //Function that returno default operation
        $dataDefaultOperations = $businessDefaultOperations->getDefaultOperations();

        //Procura os valores da mensalidade
        $filters->operationId = $dataDefaultOperations->addCurricularComponentOperation;
        $entryData = $businessEntry->searchEntry($filters);

        if ( is_array($entryData) )
        {
            foreach ( $entryData AS $value )
            {
                $value[3] = SAGU::truncarString(29, $value[3]);
                $tags1 = array(
                    '$O01' => $value[2],
                    '$D01' => $value[3],
                    '$V01' => $value[5]
                );
            }
        }

        //Procura o valor com juros e multa
        $filters->operationId = $dataDefaultOperations->interestOperation;
        $entryData = $businessEntry->searchEntry($filters);

        if ( is_array($entryData) )
        {
            foreach ( $entryData AS $value )
            {
                $value[3] = SAGU::truncarString(29, $value[3]);
                $tags2 = array(
                    '$O02' => $value[2],
                    '$D02' => $value[3],
                    '$V02' => $value[5]
                );
            }
        }
        else
        {
            //Procura o valor Desconto
            $filters->operationId = $dataDefaultOperations->discountOperation;
            $entryData = $businessEntry->searchEntry($filters);

            if ( is_array($entryData) )
            {
                foreach ( $entryData AS $value )
                {
                    $value[3] = SAGU::truncarString(29, $value[3]);
                    $tags2 = array(
                        '$O02' => $value[2],
                        '$D02' => $value[3],
                        '$V02' => $value[5]
                    );
                }
            }
            else
            {
                $tags2 = array(
                        '$O02' => ' ',
                        '$D02' => ' ',
                        '$V02' => ' '
                    );
            }
        }

        //Procura o valor pagamento
        $filters->operationId = $dataDefaultOperations->paymentOperation;
        $entryData = $businessEntry->searchEntry($filters);

        if ( is_array($entryData) )
        {
            foreach ( $entryData AS $value )
            {
                $value[3] = SAGU::truncarString(29, $value[3]);
                $tags3 = array(
                    '$O03' => $value[2],
                    '$D03' => $value[3],
                    '$V03' => $value[5]
                );
            }
        }

        if ( $businessPerson->isPersonLegal($filters->personId) )
        {
            $personData = $businessLegalPerson->getLegalPerson( $filters->personId );
            $personData->document = $personData->cnpj;
        }
        else
        {
            $personData = $businessPerson->getPerson($filters->personId);
            $personDocument = $businessDocument->getDocument( $filters->personId, SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_RG'));
            $personData->document = $personDocument->content;
        }

        $tags4 = array
        (
            '$PERSONNAME'    => $personData->name,
            '$LOCATION2'     => $personData->locationType . $personData->location . ', '. $personData->number,
            '$NEIGHBORHOOD2' => $personData->neighborhood,
            '$CITY2'         => $personData->cityName . '-' . $personData->stateId,
            '$ZIPCODE2'      => $personData->zipCode,
            '$PHONE2'        => $personData->phone,
            '$CNPJRG'        => $personData->document
        );

        $tag5 = array
        (
            '$DATE'    => $this->krono->kDate("d/m/Y H:i:s"),
            '$INVOICE' => $filters->invoiceId
        );

        $tags = array_merge($tags, $tags1, $tags2, $tags3, $tags4, $tag5);

        $parameter = SAGU::getParameter('BASIC', 'PRINT_RECEIPT');
        $contenReceipt = SAGU::interpretsReceipt($parameter, $tags);

        $MIOLO->uses( 'classes/fiscalPrinterClient.class', 'basic' );

        $serverPort = SAGU::getParameter('BASIC', 'PRINT_SERVER_PORT');
        $serverAddres = SAGU::getParameter('BASIC', 'PRINT_SERVER_ADDRESS');

        if ( $serverAddres == 'minhaMaquina' )
        {
            $serverAddres = $_SERVER['REMOTE_ADDR'];
        }

        $socket = new fiscalPrinterClient($serverAddres, $serverPort);

        $this->start($socket);

        $nMaxTentativas = 10;
        $nTentativas    = 0;

        do
        {
            $socket->displayMsg("--LN--");
            $socket->displayMsg("--LINE--");
            $socket->displayMsg("Enviando Dados");
            $socket->displayMsg("--LINE--");

            $socket->send($contenReceipt);
            $socket->send(PRINT_SERVER_SIGNAL_FINISH);

            $ok = $socket->waitingResponse($socket->getTextConfirmCode());

            if ( ! $ok )
            {
                $socket->displayMsg("--LN--");
                $socket->displayMsg("--LINE--");
                $socket->displayMsg("Uma falha no envio envio do conteudo.");
                $socket->displayMsg("--LINE--");
                $nTentativas++;

                $socket->closeConnection();
                $this->start($socket);
            }
            else
            {
                $socket->displayMsg("--LN--");
                $socket->displayMsg("--LINE--");
                $socket->displayMsg("Conteudo enviado com sucesso.");
                $socket->displayMsg("--LINE--");

                do
                {
                    $socket->send(PRINT_SERVER_SIGNAL_PRINT);
                    $ok = $socket->waitingResponse(PRINT_SERVER_SIGNAL_PRINTER_SUCCESSFUL);

                    if ( $ok )
                    {
                        $socket->displayMsg("--LN--");
                        $socket->displayMsg("--LINE--");
                        $socket->displayMsg("Print OK.");
                        $socket->displayMsg("--LINE--");
                    }
                    else
                    {
                        $socket->displayMsg("--LN--");
                        $socket->displayMsg("--LINE--");
                        $socket->displayMsg("Print FAIL.");
                        $socket->displayMsg("--LINE--");
                        $nTentativas++;

                        $socket->closeConnection();
                        $this->start($socket);
                    }

                }
                while ( ! $ok && $nTentativas < $nMaxTentativas );

                do
                {
                    $socket->send(PRINT_SERVER_SIGNAL_EXIT);
                    $ok = $socket->waitingResponse(PRINT_SERVER_SIGNAL_EXIT_OK);

                    if ( $ok )
                    {
                        $socket->displayMsg("--LN--");
                        $socket->displayMsg("--LINE--");
                        $socket->displayMsg("EXIT OK.");
                        $socket->displayMsg("--LINE--");

                        break 2;
                    }
                    else
                    {
                        $socket->displayMsg("--LN--");
                        $socket->displayMsg("--LINE--");
                        $socket->displayMsg("EXIT FAIL.");
                        $socket->displayMsg("--LINE--");
                        $nTentativas++;

                        $socket->closeConnection();
                        $this->start($socket);
                    }

                }
                while ( ! $ok && $nTentativas < $nMaxTentativas );

            }
        }
        while ( ! $ok && $nTentativas < $nMaxTentativas );


        $socket->closeConnection();

        $vars = array('personId'=>$filters->personId);
        $this->page->redirect($MIOLO->getActionURL('finance', 'main', null, $vars));

    }

    public function start($socket)
    {
        if(!$socket->starting())
        {
            $socket->displayMsg("--LINE--");
            $socket->displayMsg("\nClient Connect Error:". $socket->getError() ."");
            $socket->displayMsg("--LINE--");
            die();
        }
    }
    
    /**
     * Efetua a reemissão do título ressebido por request.
     * 
     * @param stdClass $args
     */
    public function btnReemitirTituloVencido_click($args = null)
    {        
        $MIOLO  = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        $data = $this->getTypesData();
        
        // Verifica se o processo possui fluxo de aprovações.
        FinFluxoAprovacaoConfiguracao::checarAcessoDoUsuarioAoProcesso(FinFluxoAprovacaoProcesso::REEMISSAO_DE_TITULOS, $data->invoiceId, $data);
        
        try
        {
            SDatabase::beginTransaction();

            // Cria um novo título com os lançamentos do antigo + juros e multa recalculados em um novo lançamento.
            if ( $this->reemitirTituloAntigo($data->invoiceId) )
            {
                $busReceivableInvoice = new BusinessFinanceBusReceivableInvoice();
                
                // Se o título antigo ainda está aberto.
                if ( !$busReceivableInvoice->isClosed($data->invoiceId) )
                {
                    $busDefaultOperations = new BusinessFinanceBusDefaultOperations();
                    $operationId = $busDefaultOperations->getDefaultOperation('transferenciadesaldooperation');
                    $value       = $busReceivableInvoice->getInvoiceBalance($data->invoiceId);
                    
                    if ( strlen($operationId) > 0 )
                    {
                        // Fecha o título com um lançamento de 'Transferência de saldo'.
                        $this->insereLancamentoParaOTitulo($data->invoiceId, $operationId, $value);
                    }
                    else
                    {
                        throw new Exception(_M("Necessário configurar nas operações padrões a operação de 'Transferência de saldo'."));
                    }
                }
            }
            
            SDatabase::commit();
            
            $goto = $MIOLO->getActionURL($module, 'main:diverseConsultation', null, array('personId' => $data->personId));
            $MIOLO->information("Reemissão do título efetuada com sucesso!", $goto);
        }
        catch ( Exception $e )
        {
            SDatabase::rollback();
            $MIOLO->error($e->getMessage());
        }
    }
    
    /**
     * Fecha o título com um lancamento nomeado transferência de saldo.
     * 
     * @param type $invoiceId
     * @return boolean
     */
    public function insereLancamentoParaOTitulo($invoiceId, $operationId, $value, $comments = null)
    {        
        $busReceivableInvoice = new BusinessFinanceBusReceivableInvoice();
        $busEntry             = new BusinessFinanceBusEntry();
        
        $invoiceData = $busReceivableInvoice->getReceivableInvoice($invoiceId);
        
        $dataEntry = new stdClass();
        $dataEntry->invoiceId = $invoiceId;
        $dataEntry->operationId = $operationId;
        $dataEntry->entryDate = date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'));
        $dataEntry->value = str_replace(',', '.', $value);
        $dataEntry->costCenterId = $invoiceData->costCenterId;
        $dataEntry->comments = $comments;
        
        return $busEntry->insertEntry($dataEntry);
    }
    
    /**
     * Cria um novo título, recebendo os lançamentos do título fechado, exeto o lançamento que o fechou.
     * Adiciona um novo lançamento referente aos juros e multas e joga a data do título para amanhã.
     * 
     * @param int $invoiceId
     */
    public function reemitirTituloAntigo($oldInvoiceId)
    {
        $ok = false;
        
        // Cria o novo título
        $newInvoiceId = $this->gerarNovoTituloClonadoDoAntigo($oldInvoiceId);
        
        if ( strlen($newInvoiceId) > 0 )
        {
            // Verifica se o título fechado tem vínculo com o pedagógico, e cria o vínculo para o novo título também
            $prcTitulo = PrcTituloInscricao::obterTitulo($oldInvoiceId);
                        
            if ( strlen($prcTitulo->invoiceid) > 0 )
            {
                $prcTituloInscricao = new PrcTituloInscricao($prcTitulo->tituloinscricaoid);
                $prcTituloInscricao->tituloinscricaoid = null;
                $prcTituloInscricao->invoiceid = $newInvoiceId;
                $prcTituloInscricao->save();
            }
            
            // Insere os lançamentos do título antigo para o novo.
            if ( $this->insereLancamentoDeReemissaoDeTituloParaONovoTitulo($oldInvoiceId, $newInvoiceId) )
            {
                // Atualiza data de vencimento e insere lançamento de juros e multa para o novo título.
                if ( $this->recalcularValorEInserirLancamentoDeJurosEMultas($oldInvoiceId, $newInvoiceId) )
                {
                    $ok = $this->registraLogDoProcessoDeReemissaoDeTitulos($oldInvoiceId, $newInvoiceId);
                }
            }
        }
        
        return $ok;
    }
    
    /**
     * Insere novo título para a pessoa identico ao antigo.
     * 
     * @param int $invoiceId
     * @return int
     */
    private function gerarNovoTituloClonadoDoAntigo($invoiceId)
    {
        $busReceivableInvoice = new BusinessFinanceBusReceivableInvoice();
        
        $invoiceData = $busReceivableInvoice->getReceivableInvoice($invoiceId);
        $invoiceData->invoiceId = null;
        
        return $busReceivableInvoice->insertReceivableInvoice($invoiceData);
    }
    
    /**
     * Insere o lançamento de reemissão de título para o título novo, 
     * com o valor equivalente do balance do antigo.
     * 
     * @param int $oldInvoiceId
     * @param int $newInvoiceId
     * @return boolean
     */
    private function insereLancamentoDeReemissaoDeTituloParaONovoTitulo($oldInvoiceId, $newInvoiceId)
    {
        // Lança os lançamentos do título fechado para o novo.
        $busDefaultOperations = new BusinessFinanceBusDefaultOperations();
        $busReceivableInvoice = new BusinessFinanceBusReceivableInvoice();
        
        $reemissaoDeTituloOperation = $busDefaultOperations->getDefaultOperation('reemissaodetitulooperation');
        $invoiceBalance = $busReceivableInvoice->getInvoiceBalance($oldInvoiceId);
        $comments = _M('Valor referente ao título reemitido ' . $oldInvoiceId . '.');
        
        if ( strlen($reemissaoDeTituloOperation) > 0 )
        {
            $ok = $this->insereLancamentoParaOTitulo($newInvoiceId, $reemissaoDeTituloOperation, $invoiceBalance, $comments);
        }
        else
        {
            $ok = false;
            throw new Exception(_M("Necessário configurar nas operações padrões a operação de 'Reemissão de título'."));
        }
        
        return $ok;
    }
    
    /**
     * Atualiza data de vencimento para amanhã e insere lançamento de juros e multa para o novo título.
     * 
     * @param int $invoiceId
     * @return boolean
     */
    private function recalcularValorEInserirLancamentoDeJurosEMultas($oldInvoiceId, $newInvoiceId)
    {        
        $ok = false;
        
        $busReceivableInvoice = new BusinessFinanceBusReceivableInvoice();
        $maturityDate = date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'), strtotime("+1 day"));
     
        $invoiceBalance = $busReceivableInvoice->getInvoiceBalance($oldInvoiceId);
        $invoiceBalanceWithPolicies = $busReceivableInvoice->getInvoiceBalanceWithPolicies($oldInvoiceId, $maturityDate);
        $policieValue = $invoiceBalanceWithPolicies - $invoiceBalance;
        
        $busDefaultOperations = new BusinessFinanceBusDefaultOperations();
        $interestOperation = $busDefaultOperations->getDefaultOperation('interestoperation');
        
        if ( $this->insereLancamentoParaOTitulo($newInvoiceId, $interestOperation, $policieValue) )
        {
            $invoiceData = $busReceivableInvoice->getReceivableInvoice($newInvoiceId);
            $invoiceData->emissionDate = date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'));
            $invoiceData->maturityDate = $maturityDate;
            $invoiceData->referenceMaturityDate = $maturityDate;
        
            $ok = $busReceivableInvoice->updateReceivableInvoice($invoiceData);
        }
        
        return $ok;
    }
    
    /**
     * Registra log do processo de reemissão do título.
     * 
     * @param int $oldInvoiceId
     * @param int $newInvoiceId
     * @return boolean
     */
    private function registraLogDoProcessoDeReemissaoDeTitulos($oldInvoiceId, $newInvoiceId)
    {
        $finReemissaoDeTitulosLog = new FinReemissaoDeTitulosLog();
        $finReemissaoDeTitulosLog->oldInvoiceId = $oldInvoiceId;
        $finReemissaoDeTitulosLog->newInvoiceId = $newInvoiceId;
        
        return $finReemissaoDeTitulosLog->save();
    }

    /**
     * Get the types data information
     */
    public function getTypesData()
    {
        $MIOLO     = MIOLO::getInstance();
        $loginUser = $MIOLO->getLogin();
        
        $data->invoiceId     = MIOLO::_REQUEST('invoiceId');
        $data->personId      = MIOLO::_REQUEST('personId');
        $data->idUser        = $loginUser->id;
        $data->operationId   = $this->getFormValue('operationId');
        $data->closeType     = $this->getFormValue('closeType');
        $data->value         = $this->getFormValue('value');
        $data->operation     = $this->getFormValue('operation');
        $data->speciesId     = $this->getFormValue('speciesId');
        $data->counterId     = $this->getFormValue('counterId');
        $data->responsableId = $this->getFormValue('responsableId');
        $data->operatorId    = $this->getFormValue('operatorId');
        $data->comments      = $this->getFormValue('comments');
        $data->openCounterId = $this->getFormValue('openCounterId');

        $data->payments[$data->speciesId] = array($data->speciesId, $data->value);
        
        // Para o fluxo de aprovações
        $data = FinFluxoSolicitacaoRegistro::obterDadosDoRegistro($data); 

        return $data;
    }
}

?>
