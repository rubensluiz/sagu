<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Rotative Credit Program form
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 18/10/2005
 *
 **/

/**
 * Form to manipulate a message
 **/
class FrmRotativeCreditProgram extends SForm
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();
        parent::__construct( _M('Programa de crédito rotativo', $module), null, null );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $options = array( array(_M('Parcelas fora da data', $module), 1),
                          array(_M('Parcelas fora da data por um período específico', $module), 2),
                          array(_M('Parcelas futuras', $module), 3),
                          array(_M('Totais por pessoa', $module), 4)
                        );
        $rbgReportTypeLabel = new MText('rbgReportTypeLabel', _M('Tipo de relatório', $module).':');
        $rbgReportTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $rbgReportType = new MRadioButtonGroup('rbgReportType', null, $options,  strlen($this->getFormValue('rbgReportType', $data->rbgReportType))>0 ? $this->getFormValue('rbgReportType', $data->rbgReportType) : 1, null, 'vertical');
        $rbgReportType->setShowLabel(false);
        $fields[] = new MHContainer('hctReportType', array($rbgReportTypeLabel, $rbgReportType));
       
        $rbgListModeLabel = new MText('rbgListModeLabel', _M('Modo de listagem', $module).':');
        $rbgListModeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $options = array( array(_M('Listar todos', $module), 1),
                          array(_M('Paginar', $module), 2)
                        );
                        
        $rbgListMode = new MRadioButtonGroup('rbgListMode', null, $options, strlen($this->getFormValue('rbgListMode', $data->rbgListMode))>0 ? $this->getFormValue('rbgListMode', $data->rbgListMode) : 1, null, 'horizontal');
        $rbgListMode->setShowLabel(false);
        $fields[] = new MHcontainer('hctListMode', array($rbgListModeLabel, $rbgListMode));
      
        $fields[] = new MSeparator('');
        $fields[] = new MButton('generate', _M('Gerar', $module), 'SUBMIT');
        $fields[] = new MSeparator('');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );
        
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
    }
    
    /**
     * Get this action when submit button on this form is clicked
     */
     public function generate_click($sender = null)
     {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $data = $this->getTypesData();
        
        $grid = $MIOLO->getUI()->getGrid($module, 'GrdRotativeCreditProgram');
        $this->addField(new MSeparator('<hr>'));
        $this->addField($grid);
     }
    
    /**
     * Get the data from form and returns as a object
     */
    public function getTypesData()
    {
        $data->reportType = $this->reportType->value;
        $data->listMode   = $this->listMode->value;
        return $data;
    }

}
?>
