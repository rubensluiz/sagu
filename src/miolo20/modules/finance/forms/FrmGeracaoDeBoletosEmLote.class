<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for acdCenter table
 *
 * @author Augusto A. Silva [augusto@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Augusto A. Silva
 *
 * @since
 * Class created on 03/09/2013
 *
 **/

/**
 * Form to search the basCenter table
 */
MIOLO::uses('classes/sTextGenerate.class', 'basic');

class FrmGeracaoDeBoletosEmLote extends SForm
{
    private $grid;
    
    /**
     * Class constructor
     */
    public function __construct($data)
    {
        parent::__construct(_M("Geração de boletos em lote"), null, null);
        
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
    }

    /**
     *  Default method to define fields
     */
    public function defineFields($args)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        $value = strlen($this->getFormValue('statusA', $_REQUEST['statusA'])) > 0 ? $this->getFormValue('statusA', $_REQUEST['statusA']): DB_FALSE;         
  
         // Field person
        $contractPersonLabel = new MText('contractPersonLabel', _M('Pessoa', $module) . ':');
        $contractPersonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractPersonLabel->setClass('m-caption');
        $contractPersonId = new MLookupTextField('personId', $this->getFormValue('personId'), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractId', 'personId', 'personName', 'courseId', 'courseName', 'courseVersion', 'turnId', 'turnDescription', 'pupilClassId', 'pupilClassName'), 'academic', 'ActivePersonContract', null, array('personId' => 'personId'), true);
        $contractPersonId->setJsHint(_M('Informe o código da pessoa', $module));
        $contractPersonName = new MTextField('personName', $this->getFormValue('personName'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractPersonName->setReadOnly(true);
        $contractPersonName->setJsHint(_M('Nome da pessoa', $module));
        $fields[] = new MHContainer('hctContract', array($contractPersonLabel, $contractPersonId, $contractPersonName));

        if((SAGU::getParameter('BASIC', 'MODULE_ACADEMIC_INSTALLED') != 'YES') && (SAGU::getParameter('BASIC', 'MODULE_PEDAGOGICO_INSTALLED') != 'YES'))
        {
            $_REQUEST['statusA'] = DB_TRUE;
            $fields[] = new MDiv('divconsultaPedagogico', array($this->gerarCamposAcademico()), null, array('align' => 'right', 'margin-left' => '20%', 'margin-left' => '20%'));
        }
        else
        {
            if($value == DB_FALSE && (SAGU::getParameter('BASIC', 'MODULE_ACADEMIC_INSTALLED') != 'YES') && (SAGU::getParameter('BASIC', 'MODULE_PEDAGOGICO_INSTALLED') == 'YES'))
            {
               $value = DB_TRUE;
            }
            if((SAGU::getParameter('BASIC', 'MODULE_ACADEMIC_INSTALLED') == 'YES') && (SAGU::getParameter('BASIC', 'MODULE_PEDAGOGICO_INSTALLED') == 'YES'))
            {
                // Consulta Academico ou Pedagogico
                $list = array(
                        DB_FALSE => _M('Acadêmico', 'basic'),
                        DB_TRUE => _M('Pedagógico', 'basic')
                             );
                $modulo = new MRadioButtonGroup('statusA', null, $list, $value, null, true);
                $ajaxAction = $this->getAjaxAction('consultaPedagogico', 'divconsultaPedagogico', false);
                $modulo->addAttribute('onChange', $ajaxAction); 
                $label = new MText('contractPersonLabel', _M('Módulo:',$module));
                $label->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $label->setClass('m-caption');
                $fields[] =  new MHContainer('mhcontainers',array($label,$modulo)); 
                $fields[] = new MSeparator();
            }
            if($value == DB_FALSE || ( SAGU::getParameter('BASIC', 'MODULE_ACADEMIC_INSTALLED') == 'YES' && SAGU::getParameter('BASIC', 'MODULE_PEDAGOGICO_INSTALLED') != 'YES'))
            {            
                $_REQUEST['statusA'] = DB_FALSE;
                $fields[] = new MDiv('divconsultaPedagogico', array($this->gerarCamposAcademico()), null, array('align' => 'right', 'margin-left' => '20%', 'margin-left' => '20%'));
            }        
            else if($value == DB_TRUE || ( (SAGU::getParameter('BASIC', 'MODULE_PEDAGOGICO_INSTALLED') == 'YES') && SAGU::getParameter('BASIC', 'MODULE_ACADEMIC_INSTALLED') != 'YES'))
            {
                $_REQUEST['statusA'] = DB_TRUE;
                $fields[] = new MDiv('divconsultaPedagogico', array($this->gerarCamposPedagogico()), null, array('align' => 'right', 'margin-left' => '20%', 'margin-left' => '20%'));
            }
        }
        
        // Field unit
        $fields[] = sMultiUnidade::obterCombo(false, false, true, null);
        
        // Data de vencimento do título.
        $maturityDateLabel = new MText('maturityDateLabel', _M('Período de vencimento', $module) . ':');
        $maturityDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $maturityDateLabel->setClass('m-caption m-caption-required');
        $maturityDateBegin = new MCalendarField('maturityDateBegin');
        $maturityDateEnd = new MCalendarField('maturityDateEnd');
        $fields[] = new MHContainer('maturityHC', array($maturityDateLabel, $maturityDateBegin, $maturityDateEnd));
        $validators[] = new MRequiredValidator('maturityDateBegin', _M('Período inicial do vencimento'));
        $validators[] = new MRequiredValidator('maturityDateEnd', _M('Período final do vencimento'));
        
        // Field remittance
        $labelRemittance = new MText('labelRemittance', _M('Enviados na remessa?:', $module));
        $labelRemittance->setClass('m-caption');
        $labelRemittance->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $radioYes = new MRadioButton('remittance', DB_TRUE, '', false, "Sim");
        $radioNo = new MRadioButton('remittance', DB_FALSE, '', false, "Não");
        $radioAll = new MRadioButton('remittance', DB_ALL, '', true, "Todos");
        $remittanceContainer = new MHContainer('remittanceContainer', array($labelRemittance, $radioYes, $radioNo, $radioAll));
        $fields[] = $remittanceContainer;
        
        foreach($fields as $field)
        {
            $field->addStyle('margin-left', '20%');
            $field->addStyle('margin-left', '20%');
            $field->addStyle('align', 'right');
        }
        // Listar os títulos
        $fields[] = new MButton('btnListarTitulos', _M('Listar títulos', $module));
        
        parent::defineFields(array('fields' => $fields, 'validators' => $validators));
        
        $MIOLO->page->addJsCode("(function stopCarregamento() { stopShowLoading(); setTimeout(stopCarregamento, 10);})()");
        
    }
    
    public function gerarCamposAcademico()
    {
          // Field contract
            $contractCourseLabel = new MText('contractCourseLabel', _M('Contrato', $module) . ':');
            $contractCourseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $contractCourseLabel->setClass('m-caption');
            $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId'), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('personId', 'personName', 'courseId', 'courseName', 'courseVersion', 'turnId', 'turnDescription', 'unitId', 'unitDescription', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'pupilClassId', 'pupilClassName'), 'academic', 'ActiveContract', null, array('personId' => 'personId'), true);
            $flds[] = new MHContainer('hctContractCourse', array($contractCourseLabel, $contractId));

            // Field turn
            $contractTurnLabel = new MText('contractTurnLabel', _M('Turno', $module) . ':');
            $contractTurnLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $contractTurnId = new MTextField('turnId', $this->getFormValue('turnid'), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $contractTurnId->setReadOnly(true);
            $contractTurnId->setJsHint(_M('Código do turno', $module));
            $contractTurnDescription = new MTextField('turnDescription', $this->getFormValue('turnDescription'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $contractTurnDescription->setReadOnly(true);
            $contractTurnDescription->setJsHint(_M('Descrição do turno', $module));
            $flds[] = new MHContainer('hctContractTurn', array($contractTurnLabel, $contractTurnId, $contractTurnDescription));

            //field insentive type
            $insentiveTypeIdLabel = new MText('insentiveTypeIdLabel', _M('Incentivo',$module).':');
            $insentiveTypeIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $insentiveTypeIdLabel->setClass('m-caption');
            $incentiveTypeId = new MLookupTextField('incentiveTypeId', $this->getFormValue('incentiveTypeId'), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'incentiveTypeDescription', $module, 'IncentiveType', null, null, true);
            $incentiveTypeId->setJsHint(_M('Informe o código do tipo de incentivo',$module));
            $incentiveTypeDescription = new MTextField('incentiveTypeDescription', $this->getFormValue('incentiveTypeDescription'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $incentiveTypeDescription->setReadOnly(true);
            $incentiveTypeDescription->setJsHint(_M('Descrição do tipo de incentivo', $module));
            $hctIncentive = new MHContainer('hctIncentive', array($insentiveTypeIdLabel, $incentiveTypeId, $incentiveTypeDescription));
            $hctIncentive->setShowLabel(true);
            $flds[]  = $hctIncentive;

            //Course
            $courseLabel = new MText('courseLabel', _M('Curso', $module) . ':');
            $courseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $courseLabel->setClass('m-caption');
            $courseId = new MLookupTextField('courseId', $this->getFormValue('courseId'), null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'courseName', 'academic', 'Course', null, null, true);
            $courseId->setJsHint(_M('Informe o código do curso', $module));
            $courseName = new MTextField('courseName', $this->courseName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $courseName->setReadOnly(true);
            $courseName->setJsHint(_M('Nome do curso', $module));
            $hctCourse = new MHContainer('hctCourse', array( $courseLabel, $courseId, $courseName ));
            $hctCourse->setShowLabel(true);
            $flds[] = $hctCourse;  
        
            return $flds;
    }
    
    public function gerarCamposPedagogico()
    {
       //Course
        $courseLabel = new MText('courseLabel', _M('Curso', $module) . ':');
        $courseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $courseLabel->setClass('m-caption');
        $courseId = new MLookupTextField('cursoid', $this->getFormValue('cursoid'), null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'cursoName', 'pedagogico', 'Curso', null, null, true);
        $courseId->setJsHint(_M('Informe o código do curso', $module));
        $courseName = new MTextField('cursoName', $this->cursoName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Nome do curso', $module));
        $hctCourse = new MHContainer('hctCourse', array( $courseLabel, $courseId, $courseName ));
        $hctCourse->setShowLabel(true);
        $flds[] = $hctCourse;

       //Turma
        $classLabel = new MText('classLabel', _M('Turma', $module) . ':');
        $classLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $classLabel->setClass('m-caption');
        $escolheTurmaPedagogico = new sEscolha('ofertaturmaidS', $this->getFormValue('ofertaturmaidS'), _M('Turma'), new AcpOfertaTurma());
        $hctTurma = new MHContainer('hctTurma', array( $classLabel, $escolheTurmaPedagogico ));
        $hctTurma->setShowLabel(true);
        $flds[] = $hctTurma;

         //Inscricao
        $inscricaoLabel = new MText('classLabel', _M('Inscrição', $module) . ':');
        $inscricaoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $inscricaoLabel->setClass('m-caption');
        $escolhaInscricao = new sEscolha('inscricaoidS', $this->getFormValue('inscricaoIdS'), _M('Inscrição'), new AcpInscricao());
        $hctInscricao = new MHContainer('hctInscricao', array( $inscricaoLabel,$escolhaInscricao ));
        $hctInscricao->setShowLabel(true);
        $flds[] = $hctInscricao;

        // Field turn
        $contractTurnLabel = new MText('contractTurnLabel', _M('Turno', $module) . ':');
        $contractTurnLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractTurnId = new MTextField('turnId', $this->getFormValue('turnid'), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractTurnId->setReadOnly(true);
        $contractTurnId->setJsHint(_M('Código do turno', $module));
        $contractTurnDescription = new MTextField('turnDescription', $this->getFormValue('turnDescription'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractTurnDescription->setReadOnly(true);
        $contractTurnDescription->setJsHint(_M('Descrição do turno', $module));
        $flds[] = new MHContainer('hctContractTurn', array($contractTurnLabel, $contractTurnId, $contractTurnDescription));

        return $flds;
    }
    
    public function consultaPedagogico($args)
    {
        if(!isset($args->cursoName))
        {
            $_REQUEST['statusA'] = DB_TRUE;
            $fields[] = new MDiv('divReturn', array($this->gerarCamposPedagogico()), null, array('align' => 'right', 'margin-left' => '20%', 'margin-left' => '20%'));
        }
        else
        {
            $_REQUEST['statusA'] = DB_FALSE;                   
            $fields[] = new MDiv('divReturnA', array($this->gerarCamposAcademico()), null, array('align' => 'right', 'margin-left' => '20%', 'margin-left' => '20%'));
        }
        
        return SAGU::alignFields($fields);
    }
    
    /**
     * Lista os títulos a serem gerados os boletos.
     * 
     * @param type $args
     */
    public function btnListarTitulos_click($args = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        $gridData = $this->obterDadosParaGrid();

        if ( count($gridData) > 0 )
        {
            $grdResults = $this->getGrid();
            $grdResults->setData($gridData);
            $grdResults->setTitle(_M('Títulos com boletos a serem gerados', $module));
            $fields[] = $grdResults;
            
            $fields[] = new MButton('btnGerarBoletos', _M('Gerar boletos dos títulos selecionados', $module));
            $this->addFields($fields);
        }
        else
        {
            $this->addAlert(_M('Nenhum registro encontrado', $module));       
        }
    }
    
    /**
     * Retorna os dados para popular a grid.
     * 
     * @return array
     */
    private function obterDadosParaGrid($args)
    {
        $dataForm = $this->obterDadosForm();

        if ( !strlen($dataForm->maturityDateBegin) > 0 || !strlen($dataForm->maturityDateEnd) > 0 )
        {
            $this->addError(_M("Período de vencimento deve ser informado."));
            return;
        }
        if($_REQUEST['statusA'] == DB_FALSE)
        {
            $busReceivableInvoice = new BusinessFinanceBusReceivableInvoice();
            $dataSearch = $busReceivableInvoice->listarBoletoEmLoteAcademico($dataForm);
        }
        if($_REQUEST['statusA'] == DB_TRUE)
        {
            $acpInscricaoTurmaGrupo = new PrcTituloInscricao();
            $dataSearch = $acpInscricaoTurmaGrupo->listGridGeracaoBoletoEmLote($dataForm);
        }
        foreach ( $dataSearch as $data )
        {
            // Remove os registros desnecessários.
            unset($data[1]);
            unset($data[2]);
            unset($data[4]);
            
            $invoice = array();
            foreach ( $data as $register )
            {
                $invoice[] = $register;
            }
            
            $dataGrid[] = $invoice;
        }
        
        return $dataGrid;
    }
    
    /**
     * Retorna os dados do formulário.
     * 
     * @return \stdClass
     */
    private function obterDadosForm()
    {
        $data = new stdClass();
        $data->personId = $this->getFormValue('personId');
        $data->contractId = $this->getFormValue('contractId');
        $data->courseId = $this->getFormValue('courseId');
        $data->unitId = $this->getFormValue('unitId');
        $data->remittance = $this->getFormValue('remittance');
        $data->incentiveTypeId = $this->getFormValue('incentiveTypeId');
        $data->maturityDateBegin = $this->getFormValue('maturityDateBegin');
        $data->maturityDateEnd = $this->getFormValue('maturityDateEnd');
        $data->apenasComValorAtual = DB_TRUE;
        $data->turnId = $this->getFormValue('turnIdS');
        $data->cursoId = $this->getFormValue('cursoid');
        $data->ofertaturmaId = $this->getFormValue('ofertaturmaidS');
        $data->inscricaoId = $this->getFormValue('inscricaoidS');        
        
        return $data;        
    }
    
    /**
     * Retorna a grid.
     * 
     * @return SGrid
     */
    public function getGrid()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        if ( !$this->grid )
        {
            $this->grid = $MIOLO->getUI()->getGrid($module, 'GrdGeracaoDeBoletosEmLote');
        }
        
        return $this->grid;
    }
    
    /**
     * Gera os boletos dos títulos selecionados.
     * 
     * @param type $args
     */
    public function btnGerarBoletos_click($args = null)
    {        
        $MIOLO  = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        $this->btnListarTitulos_click();
        $invoices = $this->obterRegistrosSelecionados();
        
        if ( count($invoices) > 0 )
        {
            $data = new stdClass();
            $data->invoiceIds = $invoices;
            $this->gerarBoletos($data);
        }
        else
        {
            $this->addAlert(_M("Nenhum título foi selecionado."));
        }
    }
    
    /**
     * Método que gera os boletos
     * 
     * @param type $args
     */
    private function gerarBoletos($args)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        $MIOLO->uses('classes/IntegrationSAGUSAB.class', $module);
        $MIOLO->uses('classes/sFileUtilities.class', 'basic');
        
        $sFileUtilities = new sFileUtilities('boletos_gerados.zip', '/tmp/');
        $sFileUtilities->searchFiles = 'boleto_';
        $sFileUtilities->unlinkFiles();

        foreach ( $args->invoiceIds as $invoiceId )
        {
            $integrationSAGUSAB = new IntegrationSAGUSAB($invoiceId);
            $integrationSAGUSAB->generateInvoice(false);
        }
        
        $sFileUtilities->zipFiles();
        $sFileUtilities->unlinkFiles();
        $sFileUtilities->downloadFile();
                
        $MIOLO->information(_M('Boletos gerados com sucesso.', $module), $MIOLO->getActionUrl($module, 'main:process:geracaoDeBoletosEmLote'));
    }
}

?>
