<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finInvoice table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 13/12/2005
 *
 **/

/**
 * Form to search the finInvoice table
 */
class FrmInvoice extends SForm
{
    public  $module;
    public  $filters;
    public  $data;
    
    public function __construct()
    {
        $function = MIOLO::_REQUEST('function');
        
        parent::__construct(null, null, null);
        
        if ( $function == 'insert' )
        {
            $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        }
        elseif ( $function == 'delete' )
        {
            $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        }
    }

    /**
     *  Default method to define fields
     */
    public function defineFields($data, $fields)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        $parameterFields = $fields;
        unset($fields);
        
        $spacing = new MText('spacing', '-');
        if ( in_array($function, array('update', 'delete')) )
        {
            $fields[] = new MSeparator('');
            $invoiceId = MIOLO::_request('invoiceId') ? MIOLO::_request('invoiceId') : MIOLO::_request('invoiceId', 'GET');
            $busBankAccount = new BusinessFinanceBusInvoice();            
            $isAccounted = $busBankAccount->testIsAccounted($invoiceId) ? true : false;

            if ($isAccounted == true)
            {
                $infoData[] = _M('Este título foi contabilizado. Alguns dados não podem ser modificados', $module);
            }

            $invoiceIdH  = new MHiddenField('invoiceId', $this->getFormValue('invoiceId', $invoiceId) ? $this->getFormValue('invoiceId', $invoiceId) : MIOLO::_request('invoiceId', 'GET'));
            $invoiceIdLabel = new MText('invoiceIdLabel', _M('Título', $module).':');
            $invoiceIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $invoiceIdLabel->setClass('m-caption m-caption-required');
            $invoiceId_ =  new MText('invoiceId', $data->invoiceId);
            $fields[] = new MHContainer('hctInvoiceId', array($invoiceIdLabel, $invoiceId_, $invoiceIdH));
        }

        $MIOLO->getClass('accountancy', 'accountancy');
        $lastAccountingDate = accountancy::getLastAccountingDate();
        
        if ( strlen($lastAccountingDate) > 0 )
        {
            $infoData[] = _M('Atenção! Última data contábil definida', $module) . ': ' . $lastAccountingDate;
        }

        if ( count($infoData) > 0 )
        {
            $this->addInfo($infoData);
        }
        
        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;
        
        //Field person
        $personLabel = new MText('personLabel', _M('Pessoa',$module).':');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personLabel->setClass('m-caption m-caption-required');

        if ($function == 'insert')
        {
            //Field person
            $personId = new MLookupTextField('personId', $data->personId ? $data->personId : $this->getFormValue('personId',$data->personId), null,SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'personName', 'basic', 'Person', null, null, true);
            $personId->setJsHint(_M('Informe o código da pessoa', $module));
            $validators[] = new MIntegerValidator('personId',_M('Pessoa',$module), 'required');
            $personName = new MTextField('personName', $this->getFormValue('personName',$data->personName), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $personName->setReadOnly(true);
            $personName->setJsHint(_M('Nome da pessoa', $module));
            $hctPerson  = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
            $hctPerson->setShowLabel(true);
            $fields[]   = $hctPerson;
        }
        else
        {
            $businessPerson = new BusinessBasicBusPerson();
            $dataPerson     = $businessPerson->getPersonName($data->personId);  
            $personIdLabel  = new MText('personIdLabel', _M('Pessoa', $module).':');
            $personIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $personIdLabel->setClass('m-caption m-caption-required');
            $personId       = new MText('personId', $this->getFormValue('personId',$data->personId));
            $personName     = new MText('personName', $dataPerson);
            $personIdH      = new MHiddenField('personId', $this->getFormValue('personId',$data->personId));
            $fields[]       = new MHContainer('hctPersonId', array($personIdLabel, $personId, $spacing, $personName, $personIdH));
        }


        if ( $isAccounted )
        {            
            // Cost center
            $costCenterLabel       = new MText('costCenterLabel', _M('Centro de custo',$module).':');
            $costCenterLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $costCenterLabel->setClass('m-caption m-caption-required');
            $costCenterId          = new MText('costCenterId',$this->getFormValue('costCenterId', $data->costCenterId));
            $businessCostCenter    = new BusinessAccountancyBusCostCenter();
            $dataCostCenter        = $businessCostCenter->getCostCenter($data->costCenterId);
            $costCenterDescription = new MText('costCenterDescription', $dataCostCenter->description);
            $hctCostCenter         = new MHContainer('hctCostCenter', array($costCenterLabel, $costCenterId, $spacing, $costCenterDescription));
            $fields[]              = $hctCostCenter;
        } 
        else
        {            
            //Field cost center
            $costCenterLabel = new MText('costCenterLabel', _M('Centro de custo',$module).':');
            $costCenterLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $costCenterLabel->setClass('m-caption m-caption-required');
            $costCenterId = new MLookupTextField('costCenterId',$this->getFormValue('costCenterId',$data->costCenterId), null,SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'costCenterDescription', 'accountancy', 'CostCenter', null, null, true);
            $costCenterId->setJsHint(_M('Informe o código do centro de custos', $module));
            $validators[] = new MRegexpValidator('costCenterId',_M('Centro de custo',$module), '^[0-9]+(\.[0-9]+)*$', 'required');                
            $costCenterDescription = new MTextField('costCenterDescription',$this->getFormValue('costCenterDescription',$data->costCenterDescription), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $costCenterDescription->setReadOnly(true);
            $costCenterDescription->setJsHint(_M('Descrição do centro de custo', $module));
            $hctCostCenter = new MHContainer('hctCostCenter', array($costCenterLabel, $costCenterId, $costCenterDescription));
            $hctCostCenter->setShowLabel(true);
            $fields[]   = $hctCostCenter;
        }
        
        //Field emission type
        $emissionTypeLabel = new MText('emissionTypeLabel', _M('Tipo de emissão', $module).':');
        $emissionTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $emissionTypeLabel->setClass('m-caption m-caption-required');
        $busEmissionType = new BusinessFinanceBusEmissionType();
        $emissionTypeId = new MSelection('emissionTypeId', $this->getFormValue('emissionTypeId',$data->emissionTypeId), '', $busEmissionType->listEmissionType());
        $emissionTypeId->setJsHint( _M('Selecione o tipo de emissão', $module) );
        $validators[] = new MRequiredValidator('emissionTypeId',_M('Tipo de emissão', $module));
        $hctEmissionType = new MHContainer('hctEmissionType', array($emissionTypeLabel, $emissionTypeId));
        $hctEmissionType->setShowLabel(true);
        $fields[]   = $hctEmissionType;
            
        //Field parcel number
        $parcelNumberLabel = new MText('parcelNumberLabel', _M('Número da parcela',$module).':');
        $parcelNumberLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $parcelNumberLabel->setClass('m-caption m-caption-required');
        $parcelNumber = new MTextField('parcelNumber', $this->getFormValue('parcelNumber',$data->parcelNumber), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $parcelNumber->setJsHint(_M('Informe o número de parcelas', $module));
        $validators[] = new MIntegerValidator('parcelNumber',_M('Número da parcela',$module), 'required');
        $hctParcelNumber = new MHContainer('hctParcelNumber', array($parcelNumberLabel, $parcelNumber));
        $hctParcelNumber->setShowLabel(true);
        $fields[]   = $hctParcelNumber;

        //Field emission date
        $emissionDateLabel = new MText('emissionDateLabel', _M('Data de emissão',$module).':');
        $emissionDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $emissionDateLabel->setClass('m-caption m-caption-required');
        $data->emissionDate = strlen($data->emissionDate) > 0 ? $data->emissionDate : date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')); 
        $emissionDate = new MCalendarField('emissionDate', $this->getFormValue('emissionDate',$data->emissionDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $emissionDate->setJsHint(_M('Informe a data de emissão',$module));
        $validators[] = new MDATEDMYValidator('emissionDate', _M('Data de emissão',$module), 'required');
        $hctEmissionDate = new MHContainer('hctEmissionDate', array($emissionDateLabel, $emissionDate));
        $hctEmissionDate->setShowLabel(true);
        $fields[]   = $hctEmissionDate;

        //Field maturity date
        $maturityDateLabel = new MText('maturityDateLabel', _M('Data de vencimento',$module).':');
        $maturityDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $maturityDateLabel->setClass('m-caption m-caption-required');
        $maturityDate = new MCalendarField('maturityDate', $this->getFormValue('maturityDate',$data->maturityDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $maturityDate->setJsHint(_M('Informe a data de vencimento',$module));
        $validators[] = new MDATEDMYValidator('maturityDate', _M('Data de vencimento',$module), 'required');
        $hctMaturityDate = new MHContainer('hctMaturityDate', array($maturityDateLabel, $maturityDate));
        $hctMaturityDate->setShowLabel(true);
        $fields[]   = $hctMaturityDate;

        //Field Reference maturity date
        $referenceMaturityDateLabel = new MText('referenceMaturityDateLabel', _M('Data de vencimento de referência',$module).':');
        $referenceMaturityDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $referenceMaturityDateLabel->setClass('m-caption m-caption-required');
        $referenceMaturityDate = new MCalendarField('referenceMaturityDate', $this->getFormValue('referenceMaturityDate',$data->referenceMaturityDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $referenceMaturityDate->setJsHint(_M('Informe a data de vencimento de referência',$module));
        $validators[] = new MDATEDMYValidator('referenceMaturityDate', _M('Data de vencimento de referência',$module), 'required');
        $hctReferenceMaturityDate = new MHContainer('hctReferenceMaturityDate', array($referenceMaturityDateLabel, $referenceMaturityDate));
        $hctReferenceMaturityDate->setShowLabel(true);
        $fields[] = $hctReferenceMaturityDate;
        
        if ( $function == SForm::FUNCTION_UPDATE )
        {
            //Field valor 
            $competencyDateLabel = new MText('competencyDateLabel', _M('Data de competência',$module).':');
            $competencyDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $competencyDateLabel->setClass('m-caption m-caption');
            $competencyDate = new MTextField('competencyDate', $this->getFormValue('competencyDate',$data->competencyDate), null, SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
            $competencyDate->setJsHint(_M('Data de vencimento de competência', $module));
            $competencyDate->setReadOnly(true);
            $hctCompetencyDate = new MHContainer('hctCompetencyDate', array($competencyDateLabel, $competencyDate));
            $hctCompetencyDate->setShowLabel(true);
            $fields[] = $hctCompetencyDate;
        }

        //Field valor 
        $valueLabel   = new MText('valueLabel', _M('Valor',$module).':');
        $valueLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $valueLabel->setClass('m-caption m-caption-required');
        $value        = new MTextField('value', SAGU::formatNumber($this->getFormValue('value',$data->value)), '', SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'), _M('Ex.: 1.00', $module));
        $value->setJsHint(_M('Informe o valor',$module));
        $validators[] =   new MFloatValidator('value', _M('Valor', $module), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), 'required');
        $hctValue     = new MHContainer('hctValue', array($valueLabel, $value));
        $fields[]     = $hctValue;
      
        //Field policy 
        $policyLabel = new MText('policyLabel', _M('Política', $module). ':');
        $policyLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $policyLabel->setClass('m-caption m-caption-required');
        $policyId    = new MLookupTextField('policyId', $this->getFormValue('policyId', $data->policyId), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'policyDescription', 'finance', 'Policy', null, null, true);                                         
        $policyId->setJsHint(_M('Informe o código da política', $module));
        $validators[] = new MIntegerValidator('policyId',_M('Política', $module), 'required');
        $policyDescription = new MTextField('policyDescription', $this->getFormValue('policyDescription',$data->policyDescription), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $policyDescription->setReadOnly(true);
        $policyDescription->setJsHint(_M('Descrição da política', $module));
        $hctPolicy = new MHContainer('hctPolicy', array($policyLabel, $policyId, $policyDescription));
        $hctPolicy->setShowLabel(true);
        $fields[]   = $hctPolicy;

        if ( $function == 'update' )
        {        
            // Bank Invoice
            $bankInvoiceIdLabel = new MText('bankInvoiceIdLabel', _M('Código bancário do título', $module).':');
            $bankInvoiceIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $bankInvoiceId      = new MTextField('bankInvoiceId', $this->getFormValue('bankInvoiceId',$data->bankInvoiceId), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $hctBankInvoiceId   = new MHContainer('hctBankInvoiceId', array($bankInvoiceIdLabel, $bankInvoiceId));
            $fields[]   = $hctBankInvoiceId;
        }  

        // Automatic debit
        $messagesType =  SAGU::listTrueFalse(1); 
        $automaticDebitLabel = new MText('automaticDebitLabel', _M('Débito automático',$module).':');
        $automaticDebitLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $automaticDebitLabel->setClass('m-caption m-caption-required');
        $automaticDebit = $this->GetFormValue('automaticDebit', $data->automaticDebit ? $data->automaticDebit : f );
        $automaticDebit = new MRadioButtonGroup('automaticDebit', '', $messagesType, $automaticDebit, null, 'horizontal');
        $automaticDebit->SetShowLabel(false);
        $hctAutomaticDebit = new MHContainer('hctCloseInvoice', array($automaticDebitLabel, $automaticDebit));
        $fields[]  = $hctAutomaticDebit; 
        
        // Cancelado
        $messagesType =  SAGU::listTrueFalse(1); 
        $isCanceledLabel = new MText('isCanceledLabel', _M('Cancelado',$module).':');
        $isCanceledLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $isCanceledLabel->setClass('m-caption m-caption');
        
        if( $this->verificaGrupoDoUsuarioAdmin() == DB_TRUE )
        {
            $isCanceledValue = $this->GetFormValue('isCanceled', $data->isCanceled ? $data->isCanceled : DB_FALSE );
            $isCanceled = new MRadioButtonGroup('isCanceled', '', $messagesType, $isCanceledValue, null, 'horizontal');
            $isCanceled->SetShowLabel(false);
            $hctArray = array($isCanceledLabel, $isCanceled);
        }
        else
        {
            $isCanceled = new SHiddenField('isCanceled', $data->isCanceled);
            $isCanceledValue = $data->isCanceled == DB_TRUE ? _M('SIM', $module) : _M('NÃO', $module);
            $isCanceledInfo = new MText('isCanceledInfo', $isCanceledValue);
            $isCanceledInfo->addAttribute('style', 'margin-top:3px');
            $hint = new MLabel(_M('Esta opção pode ser alterada apenas por usuários com permissão de administrador', $module), '#287eb0');
            $hint->setClass('m-hint');
            $hctArray = array($isCanceledLabel, $isCanceledInfo, $hint, $isCanceled);
        }
        
        $hctIsCanceled = new MHContainer('hctIsCanceled', $hctArray);
        $fields[]  = $hctIsCanceled;
        
        //Field comments        
        $commentsLabel = new MText('commentsLabel', _M('Comentários',$module).':');
        $commentsLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $comments = new MMultiLineField('comments', $this->getFormValue('comments',$data->comments), '', 40, 4, 80);
        $comments->setJsHint(_M('Comentários',$module));
        $hctComments = new MHContainer('hctComments', array($commentsLabel, $comments));
        $fields[]   = $hctComments;
        
        // Income Source
        $incomeSourceLabel = new MText('incomeSourceLabel', _M('Origem',$module).':');
        $incomeSourceLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));        
        $incomeSourceLabel->setClass('m-caption m-caption-required');
        $incomeSourceId  = new MLookupTextField('incomeSourceId', $this->getFormValue('incomeSourceId',$data->incomeSourceId), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'incomeSourceDescription', 'finance', 'IncomeSource', null, null, true);
        $incomeSourceId->setJsHint(_M('Informe o código da origem', $module));
        $validators[]    = new MIntegerValidator('incomeSourceId', _M('Origem',$module), 'required');
        $incomeSourceDescription = new MTextField('incomeSourceDescription', $this->getFormValue('incomeSourceDescription',$data->incomeSourceDescription), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $incomeSourceDescription->setReadOnly(true);
        $incomeSourceDescription->setJsHint(_M('Descrição da origem', $module));
        $hctIncomeSource = new MHContainer('hctIncomeSource', array($incomeSourceLabel, $incomeSourceId, $incomeSourceDescription));
        $hctIncomeSource->setShowLabel(true);
        $fields[]        = $hctIncomeSource;
        
        // bank account
        $busBankAccount = new BusinessFinanceBusBankAccount();
        $bankAccountLabel = new MText('bankAccountLabel', _M('Conta bancária',$module).':');
        $bankAccountLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $bankAccountLabel->setClass('m-caption m-caption-required');
        $bankAccountsList = $busBankAccount->listBankAccount();

        if( !is_array($bankAccountsList) )
        {
            $msg  = _M('Não há contas bancárias definidas. Registre uma conta bancária para poder executar a operação.',$module);
            $opts   = array('event' => 'tbBtnInsert');
            $goto = $MIOLO->getActionURL($module, 'main:register:bankAccount', null, $opts);
            $caption = _M('Erro', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    
        // estava ocorrendo um problema no cadastro quando a conta bancaria padrao configurada estava errada
        // trazia preenchido, e, na hora de salvar, causava erro de integridade
        $defaultBankAccountId = SAGU::getParameter('BASIC', 'DEFAULT_BANK_ACCOUNT_ID');
        
        if ( strlen($defaultBankAccountId) > 0 && !$busBankAccount->verificaSeExiste($defaultBankAccountId) )
        {
            $defaultBankAccountId = '';
        }
        
        $bankAccountId = new MComboBox('bankAccountId', strlen($this->getFormValue('bankAccountId',$data->bankAccountId)) > 0 ? $this->getFormValue('bankAccountId', $data->bankAccountId) : $defaultBankAccountId, '', $bankAccountsList, '', '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $bankAccountId->setJsHint(_M('Selecione a conta bancária', $module));
        $validators[] = new MIntegerValidator('bankAccountId', _M('Conta bancária',$module), 'required');
        $hctBankAccount = new MHContainer('hctBankAccount', array($bankAccountLabel, $bankAccountId));
        $hctBankAccount->setShowLabel(true);
        $fields[]   = $hctBankAccount;
        
        // Sector Id
        $sectorIdLabel  = new MText('sectorIdLabel', _M('Setor', $module).':');
        $sectorIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $businessSector = new BusinessBasicBusSector();
        $sectors        = $businessSector->listSector();
        $sectorId       = new MComboBox('sectorId', $this->getFormValue('sectorId', $data->sectorId), '', $sectors, '', '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $sectorId->setJsHint(_M('Selecione um setor'));
        $hctSector      = new MHContainer('hctSector', array($sectorIdLabel, $sectorId));
        $hctSector->setShowLabel(true);
        $fields[]       = $hctSector;

        $flds[] = new MBaseGroup('invoiceGroup', _M('Título', $module), $fields, 'vertical');
        unset($fields);

        // Entry 
        if( $function == 'insert' )
        {
            // Operation
            $operationLabel = new MText('operationLabel', _M('Operação', $module).':');
            $operationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $operationLabel->setClass('m-caption m-caption-required');
            $operationId = new MLookupTextField('operationId', $data->operationId ?  $data->operationId : $this->getFormValue('operationId',$data->operationId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'operationDescription', $module, 'Operation', null, null, true);
            $operationId->setJsHint(_M('Informe o código da operação',$module));
            $validators[] = new MIntegerValidator('operationId', _M('Operação', $module), 'required');
            $operationDescription = new MTextField('operationDescription', $this->getFormValue('operationDescription',$data->operationDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $operationDescription->setReadOnly(true);
            $operationDescription->setJsHint(_M('Descrição da operação', $module));
            $fields[] = new MHContainer('hctOperation', array($operationLabel, $operationId, $operationDescription));
        
            // Entry date
            $data->entryDate = strlen($data->entryDate) > 0 ? $data->entryDate : date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')); 
            $entryDateLabel = new MText('entryDateLabel', _M('Data de lançamento', $module).':');
            $entryDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $entryDateLabel->setClass('m-caption m-caption-required');
            
            // Nome do field esta com entryDate1 porque inexplicavelmente nao funciona com o nome entryDate
            $entryDate = new MCalendarField('entryDate1', $this->getFormValue('entryDate',$data->entryDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
            $entryDate->setJsHint(_M('Informe a data do lançamento',$module));

            $validators[] = new MDATEDMYValidator('entryDate1', _M('Data de lançamento',$module), 'required');
            $fields[] = new MHContainer('hctEntryDate', array($entryDateLabel, $entryDate));

            // Comments
            $entryCommentsLabel = new MText('entryCommentsLabel', _M('Comentários', $module).':');
            $entryCommentsLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $entryComments = new MMultiLineField('entryComments', $data->comments ? $data->comments : $this->getFormValue('entryComments',$data->entryComments), '', 40, 2, 40);
            $entryComments->setJsHint(_M('Informe os comentários',$module));
            $fields[] = new MHContainer('hctEntryComments', array($entryCommentsLabel, $entryComments));
       
            // Bank return code
            $bankReturnCodeLabel = new MText('bankReturnCodeLabel', _M('Código de retorno do banco', $module).':');
            $bankReturnCodeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $bankReturnCode = new MTextField('bankReturnCode', $this->getFormValue('bankReturnCode', $data->bankReturnCode), '', 20);
            $bankReturnCode->setJsHint(_M('Informe o código do retorno do banco', $module));
            $fields[] = new MHContainer('hctBankReturnCode', array($bankReturnCodeLabel, $bankReturnCode));
            
            $flds[] = new MBaseGroup('entryGroup', _M('Lançamento', $module), $fields, 'vertical');
            unset($fields);
        }
        
        $flds = array_merge( $flds, $parameterFields );
        
        parent::defineFields( array( 'fields' => $flds, 'validators' => $validators ) );
    }
    
    //Verifica se o usuário que está logado no sistema tem permissão de admin.
    public function verificaGrupoDoUsuarioAdmin()
    {
        $MIOLO = MIOLO::getInstance();
        $acesso = $MIOLO->getLogin();
        
        $grupoAdmin = SAGU::getParameter('BASIC', 'DEFAULT_GROUP_ADMIN_ID');
            
        $grupos = array();
        $groupUser = new BusinessAdminUser();        
        $grupos = $groupUser->listGroupsByUser($acesso->idkey);   
                
        foreach( $grupos as $key => $grupo )
        {            
            if( $grupo[0] ==  $grupoAdmin)
            {
                return DB_TRUE;
            }
        }
        
        return DB_FALSE;
    }
}
?>
