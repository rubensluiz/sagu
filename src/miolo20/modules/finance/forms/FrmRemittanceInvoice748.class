<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Long term short term process form
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 07/12/2005
 *
 **/

/**
 * Form to control income forecast generation
 **/
class FrmRemittanceInvoice748 extends SForm
{
    private $home;
    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $module     = MIOLO::getCurrentModule();
        $this->home = $data->home;

        parent::__construct( _M('Sicredi', $module), null, null );
    }

   /**
    * Default method to define fields
    */
    public function defineFields()
    {
        $MIOLO   = MIOLO::getInstance();
        $module  = MIOLO::getCurrentModule();
        $action  = MIOLO::getCurrentAction();

        // Bank account info
        $businessBankAccount = new BusinessFinanceBusBankAccount();
        $data->bankAccountId = $this->getFormValue('bankAccountId', $data->bankAccountId);
        $data->bankId        = 748;
        $dataBankAccount     = $businessBankAccount->listBankAccount($data);

        // Verify if the specific bank account is registered
        if ( is_array($dataBankAccount[0]) )
        {
            // FIELD - Bank account id
            $field        = new MSelection('bankAccountId', $this->getFormValue('bankAccountId', $data->bankAccountId), _M('Código da conta bancária', $module), $dataBankAccount);
            $field->setAutoSubmit(true);
            $fields[]     = $field;
            $validators[] = new MRequiredValidator('bankAccountId', _M('Código da conta bancária', $module));
        }
        else
        {
            $fields[] = new Separator(_M('Não há contas bancárias registradas. Por favor, registre uma conta bancária e retorne a este processo para continuar.', $module));
            $fields[] = new MHiddenField('bankAccountId', $this->getFormValue('bankAccountId', $data->bankAccountId));
        }

        $bankAccountId = $this->getFormValue('bankAccountId', $data->bankAccountId);
        if ( strlen($bankAccountId)>0 )
        {
            $bankId = $businessBankAccount->getBankIdByBankAccountId($bankAccountId);
            if ( strlen($bankId)>0 )
            {
                $MIOLO->getClass($module, 'RemittanceInvoice');
                if ( remittanceInvoice::remittanceExists($bankId) )
                {
                    //Get sequence of a determined bank
                    $bankRemittanceSequence = $businessBankAccount->getBankAccount($bankAccountId);
                    if ( strlen($bankRemittanceSequence->bankRemittanceSequence) > 0 )
                    {
                        $dataSequence = $bankRemittanceSequence->bankRemittanceSequence;
                        $dataSequence++;
                    }
                    else
                    {
                        $dataSequence = 1;
                    }
                    // FIELD - Sequence File
                    $sequenceFile      = $dataSequence ? $dataSequence : $this->getFormValue('sequenceFile', $data->sequenceFile);
                    $sequenceFileLabel = new MText('sequenceFileLabel', _M('Arquivo de sequência', $module).':');
                    $sequenceFileLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                    $sequenceFile      = new MTextField('sequenceFile', $sequenceFile, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
                    $field1[]          = new MHContainer('hctSequenceFile', array($sequenceFileLabel, $sequenceFile));

                    $businessCompany = new BusinessBasicBusCompany();
                    $dataCompany     = $businessCompany->listCompany();

                    // FIELD - Company
                    if ( is_array($dataCompany[0]) )
                    {
                        $companyIdLabel = new MText('companyIdLabel', _M('Empresa', $module).':');
                        $companyIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                        $companyId      = new MSelection('companyId', $this->getFormValue('companyId', $data->companyId) ? $this->getFormValue('companyId', $data->companyId) : SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'), '', $dataCompany);
                        $field1[]       = new MHContainer('hctCompanyId', array($companyIdLabel, $companyId));
                    }
                    else
                    {
                        $field1[] = new Separator(_M('Sem empresa registrada. Por favor, registre uma empresa para retornar a este processo e continuar.', $module), $dataCompany);
                        $field1[] = new MHiddenField('companyId', $this->getFormValue('companyId', $data->companyId));
                    }

                    // FIELD - Income source
                    $businessIncomeSource = new BusinessFinanceBusIncomeSource();
                    $dataIncomeSource     = $businessIncomeSource->listIncomeSource();
                    $incomeSourceLabel    = new MText('incomeSourceLabel', _M('Origem', $module).':');
                    $incomeSourceLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                    $incomeSource         = new MMultiSelection('incomeSourceId', is_array($this->getFormValue('incomeSourceId', $data->incomeSourceId)) ? $this->getFormValue('incomeSourceId', $data->incomeSourceId) : array($this->getFormValue('incomeSourceId', $data->incomeSourceId)), '', $dataIncomeSource, true, null, 5);
                    $field1[] = new MHContainer('hctIncomeSource', array($incomeSourceLabel, $incomeSource));

                    // FIELD - Policy
                    $businessPolicy = new BusinessFinanceBusPolicy();
                    $dataPolicy     = $businessPolicy->listPolicy();

                    $policyIdLabel = new MText('policyIdLabel', _M('Código da política', $module).':');
                    $policyIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                    $policyIdLabel->setClass('m-caption m-caption-required');
                    $policyId      = new MMultiSelection('policyId', is_array($this->getFormValue('policyId', $data->policyId)) ? $this->getFormValue('policyId', $data->policyId) : array($this->getFormValue('policyId', $data->policyId)), '', $dataPolicy, true, null, 5);
                    $field1[]      = new MHContainer('hctPolicyId', array($policyIdLabel, $policyId));
                    $validators[]  = new MRequiredValidator('policyId', _M('Código da política', $module));

                    // FIELD - Initial maturity date
                    $initialMaturityDateLabel = new MText('initialMaturityDateLabel', _M('Data inicial de vencimento', $module).':');
                    $initialMaturityDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                    $initialMaturityDateLabel->setClass('m-caption m-caption-required');
                    $initialMaturityDate      = new MCalendarField('initialMaturityDate', $this->getFormValue('initialMaturityDate', $data->initialMaturityDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
                    $validators[]             = new MDATEDMYValidator('initialMaturityDate', _M('Data inicial de vencimento', $module), 'required');

                    // FIELD - Initial maturity date
                    $finalMaturityDateLabel = new MText('finalMaturityDateLabel', _M('Data de vencimento final', $module).':');
                    $finalMaturityDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                    $finalMaturityDateLabel->setClass('m-caption m-caption-required');
                    $finalMaturityDate      = new MCalendarField('finalMaturityDate', $this->getFormValue('finalMaturityDate', $data->finalMaturityDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
                    $validators[]           = new MDATEDMYValidator('finalMaturityDate', _M('Data de vencimento final', $module), 'required');
                    $field1[]               = new MHContainer('hctMaturityDate', array($initialMaturityDateLabel, $initialMaturityDate, $finalMaturityDateLabel, $finalMaturityDate));

                    // FIELD - Instructions
                    $instructions = array( array(_M('Registro do título', $module), 1),
                                           array(_M('Ordem de fechamento',   $module), 2) );

                    $instructionsFieldLabel = new MText('instructionsFieldLabel', _M('Instrução', $module).':');
                    $instructionsFieldLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                    $instructionsField      = new MRadioButtonGroup('instruction', '', $instructions, is_null($this->getFormValue('instructions', $data->instructions)) ? 1 : $this->getFormValue('instructions', $data->instructions) , null, 'horizontal');
                    $instructionsField->setShowLabel(false);

                    $field11[] = new MHContainer('hctInstructionsField', array($instructionsFieldLabel, $instructionsField));

                    // FIELD - Is post invoice
                    $isPostInvoiceFieldLabel = new MText('isPostInvoice', _M('Submeter título', $module).':');
                    $isPostInvoiceFieldLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                    $isPostInvoice = array( array(_M('Sim - aluno', $module), 1),
                                            array(_M('Não - Empresa', $module), 2) );

                    $isPostInvoiceField = new MRadioButtonGroup('isPostInvoice', '', $isPostInvoice, is_null($this->getFormValue('isPostInvoice', $data->isPostInvoice)) ? 1 : $this->getFormValue('isPostInvoice', $data->isPostInvoice), null, 'horizontal');
                    $isPostInvoiceField->setShowLabel(false);

                    $field11[] = new MHContainer('hctIsPostInvoice', array($isPostInvoiceFieldLabel, $isPostInvoiceField));

                    // FIELD - Resend invoices
                    $resendInvoicesFieldLabel = new MText('resendInvoices', _M('Reenviar títulos', $module).':');
                    $resendInvoicesFieldLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                    $resendInvoicesField      = new MRadioButtonGroup('resendInvoices', '', SAGU::listYesNo(1), is_null($this->getFormValue('resendInvoices', $data->resendInvoices)) ? DB_FALSE : $this->getFormValue('resendInvoices', $data->resendInvoices), null, 'horizontal');
                    $resendInvoicesField->setShowLabel(false);
                    $field11[]  = new MHContainer('hctResendInvoices', array($resendInvoicesFieldLabel, $resendInvoicesField));
                    $field1[]   = new MVContainer('vctRadio', $field11);
                    $fieldbg1[] = new MVContainer('hctBase1', $field1);
                    
                    // Main information -> FIELD1 (Base group)
                    $fields[] = new MBaseGroup('mbgMainInformation', _M('Informações básicas de remessa', $module), $fieldbg1);

                    // FIELD - Defaulter limit date
                    $defaulterLimitDateLabel = new MText('defaulterLimitDateLabel', _M('Data limite para inadimplência', $module).':');
                    $defaulterLimitDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                    $defaulterLimitDateLabel->setClass('m-caption m-caption-required');
                    $defaulterLimitDate      = new MCalendarField('defaulterLimitDate', $this->getFormValue('defaulterLimitDate', $data->defaulterLimitDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
                    $field2[]                = new MHContainer('hctDefaulterLimitDate', array($defaulterLimitDateLabel, $defaulterLimitDate));
                    $validators[] = new MDATEDMYValidator('defaulterLimitDate', _M('Data limite para inadimplência', $module), 'required');

                    // FIELD - Messages type
                    $messagesType = array( array(_M('Normal', $module), 1),
                                           array(_M('Inadimplente', $module), 2) );

                    $messagesTypeFieldLabel = new MText('messagesTypeLabel', _M('Tipo de mensagem', $module).':');
                    $messagesTypeFieldLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                    $messagesTypeField      = new MRadioButtonGroup('messagesType', '', $messagesType, is_null($this->getFormValue('messagesType', $data->messagesType)) ?  1 : $this->getFormValue('messagesType', $data->messagesType), null, 'horizontal');
                    $messagesTypeField->setShowLabel(false);

                    $field2[]  = new MHContainer('hctMessagesType', array($messagesTypeFieldLabel, $messagesTypeField));
                    $field2[]  = new MHContainer('hctDaysToProtest', array($daysToProtestLabel, $daysToProtest));
                    $fields2[] = new MVContainer('hctInvoicesWithRegister', $field2);
                    $fields[]  = new MBaseGroup('invoicesWithRegister', _M('Informações de remessa com registro', $module), $fields2);
                }
                else
                {
                    $fields[] = new MSeparator(_M('Desculpe, este banco não tem suporte para geração de remessas. Por favor, selecione outro banco.', $module));
                }
            }
            else
            {
                $fields[] = new MSeparator(_M('Por favor, registre um banco para esta conta corrente para continuar este processo.', $module));
            }
        }
        else
        {
            $fields[] = new MSeparator(_M('Por favor, selecione um banco para continuar este processo.', $module));
        }
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }

   /**
    * Event triggered when user set new from the toolbar
    */
    public function submit_button_Click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();

        $businessBankAccount = new BusinessFinanceBusBankAccount();

        $MIOLO->getClass($module, 'RemittanceInvoice748');
        $invoiceData = new RemittanceInvoice748($data);

        if ( is_array($invoiceData->statisticsData->invoice[0]) )
        {
            $cols = array(_M('Código do título', $module), _M('Nome da pessoa', $module), _M('Valor', $module), _M('Tipo de cobrança', $module));

            $tableRaw = new MTableRaw(_M('Detalhes para remessa bancária @1', $module, '748'), $invoiceData->statisticsData->invoice, $cols, true);
            $tableRaw->setAlternate(true);
            $tableRaw->addAttribute('width=\"100%\"');

            $this->addField($tableRaw);
            $this->addField(new MHiddenField('fileId', $this->getFormValue('fileId', $invoiceData->statisticsData->fileId)));
            if ( strlen($invoiceData->statisticsData->fileData) )
            {
                $this->addField(new MHiddenField('hiddenFileName', urlencode($invoiceData->statisticsData->fileName)));
                $this->addField(new MSeparator('<hr>'));
                $this->addField(new MButton('btnFile', _M('Obter arquivo', $module)));
                $this->addField(new MSeparator(''));
            }
            $this->setShowPostButton(false);
        }
    }

   /**
    * Handle a action when button 'btnFile' is clicked
    *
    * @param: No parameters needed
    *
    * @return: No return
    */
    public function btnFile_click()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $fileContent = SAGUFile::getFileBody($this->getFormValue('fileId'));
        SAGU::returnAsFile($this->getFormValue('hiddenFileName'), $fileContent, 'text/remittance-748');
    }

   /**
    * Get the data from form and returns as a object
    */
    public function getTypesData()
    {
        $data->bankAccountId       = $this->getFormValue('bankAccountId');
        $data->sequenceFile        = $this->getFormValue('sequenceFile');
        $data->companyId           = $this->getFormValue('companyId');
        $data->incomeSourceId      = $this->getFormValue('incomeSourceId');
        $data->defaulterLimitDate  = $this->getFormValue('defaulterLimitDate');
        $data->initialMaturityDate = $this->getFormValue('initialMaturityDate');
        $data->finalMaturityDate   = $this->getFormValue('finalMaturityDate');
        $data->initialEmissionDate = $this->getFormValue('initialEmissionDate');
        $data->finalEmissionDate   = $this->getFormValue('finalEmissionDate');
        $data->policyId            = $this->getFormValue('policyId');
        $data->messagesType        = $this->getFormValue('messagesType');
        $data->instruction         = $this->getFormValue('instruction');
        $data->isPostInvoice       = $this->getFormValue('isPostInvoice');
        $data->resendInvoices      = $this->getFormValue('resendInvoices');
        $data->daysToProtest       = $this->getFormValue('daysToProtest');
        return $data;
    }
}
?>