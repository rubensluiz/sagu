<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Finance entry handler.
 * Contains the menus to access entry registers
 *
 * @author Nataniel I. da Silva [nataniel@solis.coop.br]
 *
 * @version $Id$
 *
 * @since
 * Class created on 25/07/2014
 *
 **/

class FrmLancamentoSemVinculo extends SManagementForm
{
    
    public function __construct()
    {
        parent::__construct(new FinLancamentoSemVinculo(), array('lancamentoSemVinculoId'), null, _M('Lançamento sem vínculo'));
    }
    
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $function = MIOLO::_REQUEST("function");
        
        $data = $this->getTypesData();
        
        if ( $function != SForm::FUNCTION_INSERT )
        {
            $finLancamentoSemVinculo = new FinLancamentoSemVinculo($data->lancamentoSemVinculoId);
            $fields[] = new MTextField('lancamentoSemVinculo', MIOLO::_REQUEST('lancamentoSemVinculoId'), _M('Código do lançamento'), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, true);
        }
        
        $fields[] = new SHiddenField('lancamentoSemVinculoId', MIOLO::_REQUEST('lancamentoSemVinculoId'));
        
        $operationLabel = new MText('operationLabel', _M('Operação', $module).':');
        $operationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $operationLabel->setClass('m-caption m-caption-required');
        $operationId = new MLookupTextField('operationId', $this->getFormValue('operationId',$data->operationId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'operationDescription', $module, 'Operation', null, null, true);
        $operationId->setJsHint(_M('Informe o código da operação',$module));
        $operationId->addAttribute('onblur', $this->getAjaxAction('obtemPlanoDeContaDaOperacao', 'divPlanoDeContas', false, $args));
        $operationId->autoSetRequired = false;
        $validators[] = new MIntegerValidator('operationId', _M('Operação', $module), 'required');
        $operationDescription = new MTextField('operationDescription', $this->getFormValue('operationDescription',$data->operationDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $operationDescription->setReadOnly(true);
        $fields[] = new MHContainer('hctOperation', array($operationLabel, $operationId, $operationDescription));
        
        // Plano de contas
        $planoDeContasLabel = new MText('planoDeContasLabel', _M('Plano de contas', $module).':');
        $planoDeContasLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $planoDeContasLabel->setClass('m-caption m-caption-required');
        $planoDeContas = new MLookupTextField('accountSchemeId', $this->getFormValue('accountSchemeId',$data->accountSchemeId), null,SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'descricaoPlanoDeContas', 'accountancy', 'AccountScheme', null, null, true);
        $planoDeContas->setJsHint(_M('Informe o código do planos de contas',$module));
        $planoDeContas->autoSetRequired = false;
        $validators[] = new MRequiredValidator('accountSchemeId', _M('Plano de contas', $module), 'required');
        $descricaoPlanoDeContas = new MTextField('descricaoPlanoDeContas', $this->getFormValue('descricaoPlanoDeContas', $data->descricaoPlanoDeContas), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $descricaoPlanoDeContas->setReadOnly(true);
        $fields[] = new MHContainer('hctPlanoDeContas', array($planoDeContasLabel, $planoDeContas, $descricaoPlanoDeContas));
            
        // Movimentações
        if ( $function == SForm::FUNCTION_UPDATE && strlen($data->lancamentoSemVinculoId) > 0 )
        {
            $tipoDeMovimentacao = ($finLancamentoSemVinculo->tipoDeMovimentacao == FinLancamentoSemVinculo::TIPO_DE_MOVIMENTACAO_BANCARIA) ? MOVIMENTACAO_BANCARIA : (($finLancamentoSemVinculo->tipoDeMovimentacao == FinLancamentoSemVinculo::TIPO_DE_MOVIMENTACAO_DE_CAIXA) ? MOVIMENTACAO_DE_CAIXA : null);
        }
        else
        {
            $tipoDeMovimentacao = ($data->tipoDeMovimentacao == FinLancamentoSemVinculo::TIPO_DE_MOVIMENTACAO_BANCARIA) ? MOVIMENTACAO_BANCARIA : (($data->tipoDeMovimentacao == FinLancamentoSemVinculo::TIPO_DE_MOVIMENTACAO_DE_CAIXA) ? MOVIMENTACAO_DE_CAIXA : null);
        }
        
        $tipoDeMovimentacaoLabel = new MText('isShowDocumentEndCourseLabel', _M('Tipo de movimentação:', $module));
        $tipoDeMovimentacaoLabel->setClass('m-caption m-caption-required');
        $tipoDeMovimentacaoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $radioCounter = new MRadioButton('tipoDeMovimentacao', 'caixa', '', ( $tipoDeMovimentacao == MOVIMENTACAO_DE_CAIXA ) ? true : false, "De caixa");
        $radioCounter->addAttribute('onChange', $this->getAjaxAction('verificaMovimentacao', 'divMovementInfo', false, array('caixa' => DB_TRUE)));
        $radioBank = new MRadioButton('tipoDeMovimentacao', 'banco', '', ( $tipoDeMovimentacao == MOVIMENTACAO_BANCARIA ) ? true : false, "Bancária");
        $radioBank->addAttribute('onChange', $this->getAjaxAction('verificaMovimentacao', 'divMovementInfo', false, array('caixa' => DB_FALSE)));
        $tipoDeMovimentacaoContainer = new MHContainer('tipoDeMovimentacaoContainer', array($tipoDeMovimentacaoLabel, $radioCounter, $radioBank));
        $fields[] = $tipoDeMovimentacaoContainer;
        
        $args = new stdClass();
        $args->caixa = ($tipoDeMovimentacao == MOVIMENTACAO_DE_CAIXA ) ? DB_TRUE : DB_FALSE;
        $fields[] = new MDiv('divMovementInfo', $this->verificaMovimentacao($args));
        
        // Espécies
        $BusSpecies = new BusinessFinanceBusSpecies();
        $species = $BusSpecies->listSpecies();
        
        $speciesLabel = new MText('speciesLabel', _M('Espécie',$module).':');
        $speciesLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $speciesLabel->setClass('m-caption m-caption-required');
        $specieId = new MComboBox('specieId', $this->getFormValue('specieId', $data->specieId), '', $species);
        $specieId->autoSetRequired = false;
        $validators[] = new MRequiredValidator('specieId', _M('Espécie', $module), 'required');
        $hctSpecies = new MHContainer('hctSpecies', array($speciesLabel, $specieId));
        $hctSpecies->addAttribute("style", "margin-top:5px;");
        $fields[] = $hctSpecies;
                        
        // Valor
        $value = new MTextField('valor', strlen($finLancamentoSemVinculo->valorFormatado) > 0 ? $finLancamentoSemVinculo->valorFormatado : SAGU::formatNumber($this->getFormValue('valor', $data->valor)), _M('Valor', $module), SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'), _M('Ex.: 1.00', $module));
        $value->setJsHint(_M('Informe o valor', $module));
        $value->autoSetRequired = false;
        $validators[] = new MFloatValidator('valor', _M('Valor', $module), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), 'required');
        $fields[] = $value;
        
        // Cost center
        $costCenterIdLabel = new MText('costCenterIdLabel', _M('Centro de custo', $module).':');
        $costCenterIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $costCenterIdLabel->setClass('m-caption m-caption-required');
        $costCenterId = new MLookupTextField('costCenterId', $data->costCenterId ? $data->costCenterId : $this->getFormValue('costCenterId',$data->costCenterId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'costCenterDescription', 'accountancy', 'CostCenter', null, null, true);
        $costCenterId->setJsHint(_M('Informe o código do centro de custos', $module));
        $costCenterId->autoSetRequired = false;
        $validators[] = new MRegExpValidator('costCenterId',  _M('Centro de custo', $module), '^[0-9]+(\.[0-9]+)*$', 'required');
        $costCenterDescription = new MTextField('costCenterDescription', $this->getFormValue('costCenterDescription',$data->costCenterDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $costCenterDescription->setReadOnly(true);
        $costCenterDescription->setJsHint(_M('Descrição do centro de custo', $module));
        $fields[] = new MHContainer('hctCostCenter', array($costCenterIdLabel, $costCenterId, $costCenterDescription));
        
        // Contra partida
        $contraPartidaLabel = new MText('contraPartidaLabel', _M('Contra partida',$module).':');
        $contraPartidaLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contraPartidaLabel->setClass('m-caption m-caption-required');
        $contraPartidaId = new MTextField('contraPartidaId', $this->getFormValue('contraPartidaId',$data->contraPartidaId), null,SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contraPartidaId->setJsHint(_M('Informe o código da contra partida', $module));
        $contraPartidaId->autoSetRequired = false;
        $contraPartidaId->setReadOnly(true);
        $validators[] = new MRegexpValidator('contraPartidaId',_M('Contra partida',$module), '^[0-9]+(\.[0-9]+)*$', 'required', _M('Verifique se existe um plano de contas cadastrado para a conta bancária ou para o caixa. A contra partida será carregado a partir desta informação.', $module));
        $descricaoContraPartida = new MTextField('descricaoContraPartida', $this->getFormValue('descricaoContraPartida',$data->descricaoContraPartida), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), _M('Plano de contas vinculado a conta bancária ou ao caixa aberto.', $module));
        $descricaoContraPartida->setReadOnly(true);
        $descricaoContraPartida->setJsHint(_M('Descrição do plano de contas', $module));
        $hctAccountScheme = new MHContainer('hctAccountScheme', array($contraPartidaLabel, $contraPartidaId, $descricaoContraPartida));
        $hctAccountScheme->setShowLabel(true);
        $fields[] = $hctAccountScheme;
        
        // Data de competência 
        $competencyDateLabel = new MText('competencyDateLabel', _M('Data de competência',$module).':');
        $competencyDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $competencyDateLabel->setClass('m-caption m-caption-required');
        $competencyDate = new MCalendarField('dataDeCompetencia', $this->getFormValue('dataDeCompetencia',$data->dataDeCompetencia), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE')); 
        $competencyDate->setJsHint(_M('Data de vencimento de competência', $module));
        $competencyDate->autoSetRequired = false;
        $hctCompetencyDate = new MHContainer('hctCompetencyDate', array($competencyDateLabel, $competencyDate));
        $hctCompetencyDate->setShowLabel(true);
        $fields[] = $hctCompetencyDate;
        
        $validators[] = new MDATEDMYValidator('dataDeCompetencia', _M('Data de competência', $module), 'required'); 
        $validators[] = new MRequiredValidator('dataDeCompetencia', _M('Data de competência', $module), 'required');
        
        // Data de caixa
        $counterDateLabel = new MText('competencyDateLabel', _M('Data de caixa',$module).':');
        $counterDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $counterDateLabel->setClass('m-caption m-caption-required');
        $counterDate = new MCalendarField('dataDeCaixa', $this->getFormValue('dataDeCaixa',$data->dataDeCaixa), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE')); 
        $counterDate->setJsHint(_M('Data de caixa', $module));
        $counterDate->autoSetRequired = false;
        $hctCounterDate = new MHContainer('hctCounterDate', array($counterDateLabel, $counterDate));
        $hctCounterDate->setShowLabel(true);
        $fields[] = $hctCounterDate;
        
        $validators[] = new MDATEDMYValidator('dataDeCaixa', _M('Data de caixa', $module), 'required');
        $validators[] = new MRequiredValidator('dataDeCaixa', _M('Data de caixa', $module), 'required');
        
        // Observação
        $obsLabel = new MText('obsLabel', _M('Observação', $module).':');
        $obsLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $obs = new MMultiLineField('obs', $this->getFormValue('obs',$data->obs), '', 40, 4, 80);
        $obs->setJsHint(_M('Informe uma observação', $module));
        $fields[] = new MHContainer('hctMessage', array($obsLabel, $obs));
        
        $fields[] = new MDiv('divPlanoDeContas');
        $fields[] = new MDiv('divContraPartida');
        
        parent::defineFields($fields, $validators, $data);
    }
    
    public function obtemPlanoDeContaDaOperacao($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $busOperation = new BusinessFinanceBusOperation();
        $busAccountancy = new BusinessAccountancyBusAccountScheme();
        
        $display = 'inline';
        $readOnly = 'false';
        $accountSchemeId = null;
        $descricaoPlanoDeContas = null;
        $operationDescription = null;
        
        if ( strlen($args->operationId) > 0 )
        {
            $operationData = $busOperation->getOperation($args->operationId);
            $accountancyData = $busAccountancy->getAccountScheme($operationData->accountSchemeId);
            
            $accountSchemeId = $accountancyData->accountSchemeId;
            $descricaoPlanoDeContas = $accountancyData->description;
            $operationDescription = $operationData->description;
                 
            if ( strlen($accountancyData->accountSchemeId) > 0 )
            {
                $display = 'none';
                $readOnly = 'true';
            }
        }
        
        $jsCode = " document.getElementById('accountSchemeId').value = '{$accountSchemeId}';
                    document.getElementById('descricaoPlanoDeContas').value = '{$descricaoPlanoDeContas}'; 
                    document.getElementById('operationDescription').value = '{$operationDescription}'; ";
        
        $jsCode .= " var buttons = document.querySelectorAll('#m_accountSchemeId button'); 
                    for ( var i = 0; i < buttons.length; i++ )
                    {
                        buttons[i].style.display = '$display';
                    }
                    document.getElementById('accountSchemeId').readOnly = $readOnly; ";
                
        if ( !strlen($accountancyData->accountSchemeId) > 0 && strlen($args->operationId) > 0 )
        {
            $jsCode .= " alert('A operação {$args->operationId} não possuí vínculo com nenhum plano de contas.'); ";
        }
        
        $MIOLO->page->addAJAXJsCode($jsCode);
                
        return '';
    }
    
    /**
     * Obtém a contra partida(plano de contas) do caixa aberto ou da conta bancária
     * 
     * @param type $args
     */
    public function obtemContraPartidaDaMovimentacao($args)
    {
        $MIOLO = MIOLO::getInstance();        
        $contraPartida = null;
        $descricaoContraPartida = null;
        
        // Obtém da conta bancária o plano de contas
        if ( $args->tipoDeMovimentacao == 'banco' && !strlen($args->openCounterId) > 0 )
        {
            $bankAccountId = $args->bankAccountId_sel;
            $busBankAccount = new BusinessFinanceBusBankAccount();
            
            if ( strlen($bankAccountId) > 0 )
            {
                $infoBankAccount = $busBankAccount->getBankAccount($bankAccountId);
                $contraPartida = $infoBankAccount->accountSchemeId;
            }
        }
        // Obtém do caixa aberto o plano de contas
        else if ( strlen($args->openCounterId) > 0 )
        {
            $busCounter = new BusinessFinanceBusCounter();
            $busOpenCounter = new BusinessFinanceBusOpenCounter();
            $infoOpenCounter = $busOpenCounter->getOpenCounter($args->openCounterId);
            
            $infoCounter = $busCounter->getCounter($infoOpenCounter->counterId);
            $contraPartida = $infoCounter->accountSchemeId;
        }
        
        if ( strlen($contraPartida) > 0 )
        {
            $busAccountSchema = new BusinessAccountancyBusAccountScheme();
            $accountScheme = $busAccountSchema->getAccountScheme($contraPartida);
            $descricaoContraPartida = $accountScheme->description;
        }
        
        $jsCode = " document.getElementById('contraPartidaId').value = '{$contraPartida}';
                    document.getElementById('descricaoContraPartida').value = '{$descricaoContraPartida}';
                  ";
        
        $MIOLO->page->addAJAXJsCode($jsCode);
        
        return '';
    }
    
    /**
     * Verifica qual tipo de movimentação foi solicitada.
     * 
     * @param stdClass $args
     * @return string
     */
    public function verificaMovimentacao($args)
    {
        $MIOLO = MIOLO::getInstance();
        
        $jsCode = " document.getElementById('contraPartidaId').value = '';
                    document.getElementById('descricaoContraPartida').value = '';
                  ";
        
        if ( $args->phpFunction )
        {
            $MIOLO->page->addAJAXJsCode($jsCode);
        }
        
        if ( $args->caixa == DB_FALSE )
        {
            $fieldsMovement = $this->geraCamposDeSelecaoBancaria($args);
        }
        else
        {
            $fieldsMovement = $this->geraCamposDeSelecaoDeCaixa($args);
        }
                
        return $fieldsMovement;
    }
    
    /**
     * Gera o campo de seleção de caixas.
     * 
     * @return \MHContainer
     */
    public function geraCamposDeSelecaoDeCaixa($args=null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $function = MIOLO::_REQUEST("function");
        
        $data = $this->getTypesData();
                
        if ( $function == 'update' )
        {
            $BusOpenCounter = new BusinessFinanceBusOpenCounter();
            $openCounter = $BusOpenCounter->getOpenCounter($args->openCounterId);
            
            $counterId_openCounterId = $openCounter->openCounterId;
        }
        
        $BusCounter = new BusinessFinanceBusCounter();
        $counters = $BusCounter->listCountersInOperation();
        
        foreach ( $counters as $counter )
        {
            if ( !is_null($counter[2]) )
            {
                $options[$counter[2]] = $counter[1];
            }
        }
        
        $flds[] = new MSeparator();
        
        $counterLabel = new MText('counterLabel', _M('Caixa aberto:', $module));
        $counterLabel->setClass('m-caption m-caption-required');
        $counterLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $counterLabel->addAttribute('style', 'float:right');
        $counterField = new MSelection('openCounterId', ($counterId_openCounterId) ? $counterId_openCounterId : null, null, $options);
        $counterField->addAttribute('onchange', SForm::getAjaxAction('obtemContraPartidaDaMovimentacao', 'divContraPartida', false));
        $validators[] = new MRequiredValidator('openCounterId', _M('Caixa aberto', $module), 'required');
        $counterContainer = new MHContainer('counterContainer', array($counterLabel, $counterField));
        $counterContainer->addAttribute("style", "margin-top:5px;");
        $flds[] = $counterContainer;
        
        $this->setValidators($validators);
        
        return $flds;
    }
    
    /**
     * Gera o campo de seleção de contas bancárias.
     * 
     * @return \MHContainer
     */
    public function geraCamposDeSelecaoBancaria($args=null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $busDefaultOperations = new BusinessFinanceBusDefaultOperations();
        $busOperation = new BusinessFinanceBusOperation();
        $operations = $busDefaultOperations->getDefaultOperations();
        
        $business = new BusinessFinanceBusBankAccount();
        $flds[] = new MSeparator();

        $bankAccountLabel = new MText('bankAccountLabel', _M('Conta bancária',$module).':');
        $bankAccountLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $bankAccountLabel->setClass('m-caption m-caption-required');
        $bankAccountLabel->addAttribute('style', 'float:right');
        $bankAccountId = new MComboBox('bankAccountId', ($args->bankAccountId) ? $args->bankAccountId : null, '', $business->listBankAccount());
        $bankAccountId->setJsHint(_M('Código da conta bancária', $module).':');
        $bankAccountId->addAttribute('onchange', SForm::getAjaxAction('obtemContraPartidaDaMovimentacao', 'divContraPartida', false));
        $validators[] = new MRequiredValidator('bankAccountId', _M('Conta bancária', $module), 'required');
        $hctBankAccount = new MHContainer('hctBankAccount', array($bankAccountLabel, $bankAccountId));
        $hctBankAccount->addAttribute("style", "margin-top:5px;");
        $flds[] = $hctBankAccount;
        $flds[] = new MSeparator();
        
        $this->setValidators($validators);
        
        return $flds;
    }
    
    public function tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST("function");
        
        $data = new stdClass();
        $data = $this->getTypesData();
        
        if ( !strlen($data->dataDeCompetencia) > 0 )
        {
            $this->addError("O campo 'Data de competência' deve ser informado");
            return '';
        }
        
        if ( !strlen($data->dataDeCaixa) > 0 )
        {
            $this->addError("O campo 'Data de caixa' deve ser informado");
            return '';
        }
               
        try
        {
            SDatabase::beginTransaction();

            $this->saveTypeData($sender);

            $finLancamentoSemVinculo = new FinLancamentoSemVinculo();
            $lancamentoSemVinculoId = ($function == SForm::FUNCTION_INSERT) ? $finLancamentoSemVinculo->getLastInsertId() : $data->lancamentoSemVinculoId;

            $counterMovementId = null;
            $bankMovementId = null;
            $movimentacaoDoLancamentoSemVinculoId = NULL;

            if ( $data->tipoDeMovimentacao == FinLancamentoSemVinculo::TIPO_DE_MOVIMENTACAO_DE_CAIXA )
            {
                $busCounterMovement = new BusinessFinanceBusCounterMovement();

                $data->value = $data->valor;
                $data->operation = 'C';
                $data->speciesId = $data->specieId;
                $data->observation = $data->obs;
                $data->costCenterId = $data->costCenterId;

                if ( $function == SForm::FUNCTION_UPDATE )
                {
                    // Obtém as movimentações relacionadas
                    $finMovimentacaoDoLancamentoSemVinculo = new FinMovimentacaoDoLancamentoSemVinculo();                
                    $finMovimentacaoDoLancamentoSemVinculo->lancamentoSemVinculoId = $lancamentoSemVinculoId;
                    $movimentacao = $finMovimentacaoDoLancamentoSemVinculo->obtemMovimentacaoDoLancamentoSemVinculo();

                    $movimentacaoDoLancamentoSemVinculoId = $movimentacao->movimentacaoDoLancamentoSemVinculoId;

                    $data->counterMovementId = $counterMovementId = $movimentacao->counterMovementId;
                    $busCounterMovement->updateCounterMovement($data);
                }
                else
                {
                    $busCounterMovement->insertCounterMovement($data);
                    $counterMovementId = $busCounterMovement->getLastInsertId();
                }
                
                // atualiza counterMovementId na tabela finLancamentoSemVinculo
                // o codigo esta aqui pois como busca depois o bankMovementId (depois de inserir), nao queria mover a logica talvez causando impactos
                $lsv = new FinLancamentoSemVinculo($lancamentoSemVinculoId);
                $lsv->counterMovementId = $counterMovementId;
                $lsv->save();
            }

            if ( $data->tipoDeMovimentacao == FinLancamentoSemVinculo::TIPO_DE_MOVIMENTACAO_BANCARIA )
            {
                if ( $function == SForm::FUNCTION_UPDATE )
                {
                    // Obtém as movimentações relacionadas
                    $finMovimentacaoDoLancamentoSemVinculo = new FinMovimentacaoDoLancamentoSemVinculo();                
                    $finMovimentacaoDoLancamentoSemVinculo->lancamentoSemVinculoId = $lancamentoSemVinculoId;
                    $movimentacao = $finMovimentacaoDoLancamentoSemVinculo->obtemMovimentacaoDoLancamentoSemVinculo();
                    
                    $movimentacaoDoLancamentoSemVinculoId = $movimentacao->movimentacaoDoLancamentoSemVinculoId;
                    $bankMovementId = $movimentacao->bankMovementId;
                }

                $busBankAccount = new BusinessFinanceBusBankAccount();
                $infoBancoAccount = $busBankAccount->getBankAccount($data->bankAccountId);

                if ( is_null($infoBancoAccount->branchNumberDigit) )
                {
                    throw new Exception(_M('Não foi possível inserir uma movimentação bancária para a conta selecionada. Por favor, verifique o cadastro da conta bancária.', $module));
                }
                
                $finBankMovement = new FinBankMovement($bankMovementId);
                $finBankMovement->bankId = $infoBancoAccount->bankId;
                $finBankMovement->value = $data->valor;
                $finBankMovement->valuePaid = $data->valor;
                $finBankMovement->branch = $infoBancoAccount->branchNumberDigit;
                $finBankMovement->branchNumber = $infoBancoAccount->branchNumber;
                $finBankMovement->wallet = $infoBancoAccount->wallet;
                $finBankMovement->occurrencedate = $data->dataDeCaixa;
                $finBankMovement->bankMovementStatusId = 4;

                $return = $finBankMovement->save(); 

                $bankMovementId = (!strlen($bankMovementId) > 0) ? $finBankMovement->getLastInsertId() : $bankMovementId;
                
                // atualiza bankMovementId na tabela finLancamentoSemVinculo
                // o codigo esta aqui pois como busca depois o bankMovementId (depois de inserir), nao queria mover a logica talvez causando impactos
                $lsv = new FinLancamentoSemVinculo($lancamentoSemVinculoId);
                $lsv->bankMovementId = $bankMovementId;
                $lsv->save();
            }

            // Insere/atualiza na tabela de movimentação de lançamento sem vínculo
            $finMovimentacaoDoLancamentoSemVinculo = new FinMovimentacaoDoLancamentoSemVinculo();
            $finMovimentacaoDoLancamentoSemVinculo->movimentacaoDoLancamentoSemVinculoId = $movimentacaoDoLancamentoSemVinculoId;
            $finMovimentacaoDoLancamentoSemVinculo->lancamentoSemVinculoId = $lancamentoSemVinculoId;
            $finMovimentacaoDoLancamentoSemVinculo->counterMovementId = $counterMovementId;
            $finMovimentacaoDoLancamentoSemVinculo->bankMovementId = $bankMovementId;
            $finMovimentacaoDoLancamentoSemVinculo->save();

            SDatabase::commit();
            
            $goto = $MIOLO->GetActionURL($module, $action, null, array('buscaS' => $movimentacaoDoLancamentoSemVinculoId));
            $this->messageSuccess(SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED_INFO'), $goto);
        }
        catch ( Exception $erro )
        {
            SDatabase::rollback();
            
            $MIOLO->error($erro->getMessage());
        }
        
    }
    
    public function getTypesData()
    {
        $data = parent::getTypesData();
                        
        $data->tipoDeMovimentacao = $this->getFormValue('tipoDeMovimentacao') == MOVIMENTACAO_BANCARIA ? FinLancamentoSemVinculo::TIPO_DE_MOVIMENTACAO_BANCARIA : FinLancamentoSemVinculo::TIPO_DE_MOVIMENTACAO_DE_CAIXA;

        return $data;
    }
    
    public function getRequestValues()
    {
        $data = parent::getRequestValues();
        
        $data['tipoDeMovimentacao'] = $data['tipoDeMovimentacao'] == MOVIMENTACAO_BANCARIA ? FinLancamentoSemVinculo::TIPO_DE_MOVIMENTACAO_BANCARIA : FinLancamentoSemVinculo::TIPO_DE_MOVIMENTACAO_DE_CAIXA;
                
        return $data;
    }
        
    public function tbBtnDelete_confirm($sender = NULL)
    {
        $data = $this->getTypesData();
        
        $finLacamentoSemVinculo = new FinLancamentoSemVinculo($data->lancamentoSemVinculoId);
        $busCounterMovement = new BusinessFinanceBusCounterMovement();
        $finBankMovement = new FinBankMovement();
        
        try
        {
            SDatabase::beginTransaction();
            
            // Obtém as movimentações relacionadas
            $finMovimentacaoDoLancamentoSemVinculo = new FinMovimentacaoDoLancamentoSemVinculo();
            
            // Obtém as movimentações referente ao lancamento
            $finMovimentacaoDoLancamentoSemVinculo->lancamentoSemVinculoId = $finLacamentoSemVinculo->lancamentoSemVinculoId;
            $movimentacao = $finMovimentacaoDoLancamentoSemVinculo->obtemMovimentacaoDoLancamentoSemVinculo();
            
            // Exclui a movimentação do lancamento sem vinculo
            $finMovimentacaoDoLancamentoSemVinculo->movimentacaoDoLancamentoSemVinculoId = $movimentacao->movimentacaoDoLancamentoSemVinculoId;
            $finMovimentacaoDoLancamentoSemVinculo->delete();

            // Exclui a movimentação de caixa 
            if ( $finLacamentoSemVinculo->tipoDeMovimentacao == FinLancamentoSemVinculo::TIPO_DE_MOVIMENTACAO_DE_CAIXA )
            {
                if ( strlen($movimentacao->counterMovementId) > 0 )
                {
                    $busCounterMovement->deleteCounterMovement($movimentacao->counterMovementId);
                }
            }

            // Exclui a movimentação bancária
            if ( $finLacamentoSemVinculo->tipoDeMovimentacao == FinLancamentoSemVinculo::TIPO_DE_MOVIMENTACAO_BANCARIA )
            {
                if ( strlen($movimentacao->bankMovementId) > 0 )
                {
                    $finBankMovement->bankMovementId = $movimentacao->bankMovementId;
                    $finBankMovement->delete();
                }
            }
        
            // Exclui o lancamento
            parent::tbBtnDelete_confirm($sender);
            
            SDatabase::commit();
        }
        catch ( Exception $erro )
        {
            SDatabase::rollback();
            
            $this->addError(_M('Não foi possível excluir o lançamento. <br>') . $erro->getMessage());
        }
    }
    
}

?>

