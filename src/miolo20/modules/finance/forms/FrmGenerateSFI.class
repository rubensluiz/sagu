<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Types cobranca bancaria
 *
 * @author Nataniel Ingor da Silva [nataniel@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Nataniel Ingor da Silva [nataniel@solis.com.br]
 *
 * @since
 * Class created on 12/08/2013
 */
class FrmGenerateSFI extends SForm
{
    
    /**
     * Class constructor
     **/
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();
        parent::__construct( _M('Expotação de dados para o sistema SFI', $module), null, null );
    }
    
     public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $information[] = new MText('information', _M('Por favor, selecione uma das opções abaixo.', $module));
        $fields[] = $information;
        
        $fields[] = new MSeparator();                
        $fields[] = new MSeparator(); 
        
        $fields[] = $exportDates = new MSelection('exportDates', SAGU::NVL($this->GetFormValue('exportDates'), 'pessoas'), 'Tipo de exportação', $options=array('pessoas' => 'Exportar dados de pessoas', 'titulosEmitidos' => 'Exportar títulos emitidos', 'titulosBaixados' => 'Exportar títulos baixados'), NULL, NULL, NULL, true);
        $exportDates->setAutoPostBack(true);
        
        $fields[] = new MSeparator(); 
        $fields[] = new MSeparator(); 
        
        if(SAGU::NVL($this->GetFormValue('exportDates'), 'pessoas') != 'pessoas')
        {       
            $filter = new MText('filter', _M('Filtros:'));
            $fields[] = $filter; 

            $period = new MText('period', _M('Período de exportação:'));
            $fields[] = $period;

            $fields[] = new MSeparator(); 

            $fields[] = $month =  new MSelection('month',  array(), 'Mês', array('01' => 'Janeiro', '02' => 'Fevereiro', '03' => 'Março', '04' => 'Abril', '05' => 'Maio', '06' => 'Junho' , '07' => 'Julho', '08' => 'Agosto', '09' =>'Setembro', '10' =>'Outubro', '11' => 'Novembro', '12' => 'Dezembro'));
            $valids[] = new MRequiredValidator('month','','', 'O campo "Mês" é requerido.');
            
            if(SAGU::NVL($this->GetFormValue('exportDates')) == 'titulosEmitidos')
            {
                $anos = $this->retornaDataTitulosEmitidos();
            }
            
            if(SAGU::NVL($this->GetFormValue('exportDates')) == 'titulosBaixados')
            {
                $anos = $this->retornaDataTitulosBaixados();
            }
            
            $fields[] = $year =  new MSelection('year', array(), 'Ano', $anos);
            $valids[] = new MRequiredValidator('year','','', 'O campo "Ano" é requerido.');
        }
        
        $fields[] = new MSeparator(); 
        $export = new MButton('btnExport', _M('Exportar dados', $module));
        $export->setJshint(_M('Exportar dados', $module));
        $export->setShowLoading(false);
        $field = new MDiv('divOptions', $export, null, 'align="center"');
        $fields[] = $field;
        
        
        parent::defineFields(array('fields' => $fields, 'validators' => $valids));


        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
     }
     
     
     
     public function btnExport_click()
    {          
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $filtros = $this->getData();
        
        
        if($this->GetFormValue('exportDates') == 'pessoas')
        {
            $MIOLO->uses('classes/FinExportacaoSFIPessoas.class', 'finance');

            try
            {
                new FinExportacaoSFIPessoas($filtros);

            }catch (Exception $e)
            {
                $this->AddError($e->getMessage());
            }
        }
        
        if($this->GetFormValue('exportDates') == 'titulosEmitidos')
        {
            
            $MIOLO->uses('classes/FinExportacaoSFITitulosEmitidos.class', 'finance');
            try
            {
                new FinExportacaoSFITitulosEmitidos($filtros);
            }
            catch(Exception $e)
            {
                $this->AddError($e->getMessage());
            }
                        
        }
        
        if($this->GetFormValue('exportDates') == 'titulosBaixados')
        {
            $MIOLO->uses('classes/FinExportacaoSFITitulosBaixados.class', 'finance');
            try
            {
                new FinExportacaoSFITitulosBaixados($filtros);
            }
            catch(Exception $e)
            {
                $this->AddError($e->getMessage());  
            } 
        }          
    }
    
    public function retornaDataTitulosEmitidos(){
        
        $sql = 'SELECT DISTINCT 
                        COALESCE(EXTRACT (\'YEAR\' FROM competencyDate), EXTRACT (\'YEAR\' FROM referenceMaturityDate)) AS ano
                           FROM finreceivableinvoice ORDER BY 1 DESC';
        
        $msql = new MSQL();
        $msql->setDb( SDatabase::getInstance() );            
        $msql->createFrom($sql);
        
        $returnsql = SDatabase::queryAssociative($msql);   
        
        $return = array();
        foreach($returnsql as $line)
        {
            $return[$line['ano']] = $line['ano'];
        }
        
        return $return;
    }
    
    public function retornaDataTitulosBaixados(){
        
        $sql = 'SELECT DISTINCT 
                        EXTRACT (\'YEAR\' FROM entrydate) AS ano
                           FROM finentry ORDER BY 1 DESC';
        
        $msql = new MSQL();
        $msql->setDb( SDatabase::getInstance() );            
        $msql->createFrom($sql);
        
        $returnsql = SDatabase::queryAssociative($msql);   
        
        $return = array();
        foreach($returnsql as $line)
        {
            $return[$line['ano']] = $line['ano'];
        }
         
        return $return;
    }
    
        
}
?>
