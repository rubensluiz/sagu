<?php

class FinCielo
{
    
    // Encoding
    const ENCODING = 'ISO-8859-1';
    
    // Versão
    const VERSAO = '1.1.0';    
    
    // Endereço do serviço
    // Ex.: https://qasecommerce.cielo.com.br/servicos/ecommwsec.do
    private $endereco;
    
    // Código da loja
    // Ex.: 1006993069
    private $loja;
    
    // Chave da loja
    // Ex.: 25fbb99741c739dd84d7b06ec78c9bac718838630f30b112d033ce2e621b34f3
    private $lojaChave;
    
    // Código da cielo
    // Ex.: 1001734898
    private $cielo;
    
    // Chave da cielo
    // Ex.: e84827130b9837473681c2787007da5914d6359947015a5cdb2b8843db0fa832
    private $cieloChave;
    
    // Id da sessão
    private $sessionId;
    
    private $returnFile = 'retornoCielo.php';
    
    private $certifiedFile = 'cieloSign.crt';
    
    public function __construct($sessionId = NULL)
    {
        $this->endereco = SAGU::getParameter('FINANCE', 'CIELO_ENDERECO_SERVICO');
        $this->loja = SAGU::getParameter('FINANCE', 'CIELO_COD_INSTITUICAO');
        $this->lojaChave = SAGU::getParameter('FINANCE', 'CIELO_CHAVE_INSTITUICAO');
        $this->cielo = SAGU::getParameter('FINANCE', 'CIELO_ID');
        $this->cieloChave = SAGU::getParameter('FINANCE', 'CIELO_KEY');
        
        if ( !$sessionId )
        {
            $this->sessionId = 'cielo_' . rand();
        }
        else
        {
            $this->sessionId = $sessionId;
        }
        
        if( !isset($_SESSION[$this->sessionId]) )
        {
            $_SESSION[$this->sessionId] = new ArrayObject();
        }
    }
    
    // Envia requisição
    public function httprequest($paEndereco, $paPost)
    {
        try
        {
            $sessao_curl = curl_init($paEndereco);
            curl_setopt($sessao_curl, CURLOPT_URL, $paEndereco);

            curl_setopt($sessao_curl, CURLOPT_FAILONERROR, TRUE);

            //  CURLOPT_SSL_VERIFYPEER
            //  verifica a validade do certificado
            curl_setopt($sessao_curl, CURLOPT_SSL_VERIFYPEER, TRUE);
            //  CURLOPPT_SSL_VERIFYHOST
            //  verifica se a identidade do servidor bate com aquela informada no certificado
            curl_setopt($sessao_curl, CURLOPT_SSL_VERIFYHOST, 2);

            //  CURLOPT_SSL_CAINFO
            //  informa a localização do certificado para verificação com o peer
            curl_setopt($sessao_curl, CURLOPT_CAINFO, getcwd() . '/' . $this->certifiedFile);
            curl_setopt($sessao_curl, CURLOPT_SSLVERSION, 3);

            //  CURLOPT_CONNECTTIMEOUT
            //  o tempo em segundos de espera para obter uma conexão
            curl_setopt($sessao_curl, CURLOPT_CONNECTTIMEOUT, 10);

            //  CURLOPT_TIMEOUT
            //  o tempo máximo em segundos de espera para a execução da requisição (curl_exec)
            curl_setopt($sessao_curl, CURLOPT_TIMEOUT, 40);

            //  CURLOPT_RETURNTRANSFER
            //  TRUE para curl_exec retornar uma string de resultado em caso de sucesso, ao
            //  invés de imprimir o resultado na tela. Retorna FALSE se há problemas na requisisão
            curl_setopt($sessao_curl, CURLOPT_RETURNTRANSFER, true);

            curl_setopt($sessao_curl, CURLOPT_POST, true);
            curl_setopt($sessao_curl, CURLOPT_POSTFIELDS, $paPost );

            $return = curl_exec($sessao_curl);
            
            if ( !$return )
            {
                $return = curl_error($sessao_curl);
            }
            
            curl_close($sessao_curl);
            
            return $return;
        }
        catch ( Exception $e)
        {
            // TODO: Log de erro
        }
    }
    
    // Monta URL de retorno
    function returnURL()
    {
        $pageURL = 'http';

        if ($_SERVER["SERVER_PORT"] == 443) // protocolo https
        {
            $pageURL .= 's';
        }
        
        $pageURL .= "://";
        
        if ($_SERVER["SERVER_PORT"] != "80")
        {
            $pageURL .= $_SERVER["SERVER_NAME"].":".$_SERVER["SERVER_PORT"].$_SERVER["REQUEST_URI"];
        }
        else 
        {
            $pageURL .= $_SERVER["SERVER_NAME"]. substr($_SERVER["REQUEST_URI"], 0);
        }
        
        // ALTERNATIVA PARA SERVER_NAME -> HOST_HTTP
        $file = substr($_SERVER["SCRIPT_NAME"],strrpos($_SERVER["SCRIPT_NAME"],"/")+1);

        $returnURL = str_replace($file, $this->returnFile, $pageURL);
                
        $char = '&';
        if ( substr_count($returnURL, '?') == 0 )
        {
            $char = '?';
        }
        $returnURL .= $char . 'session_id=' . $this->sessionId;
        
        return $returnURL;
    }
    
    public function append($value)
    {
        $_SESSION[$this->sessionId]->append($value);
    }
    
    public function getEndereco()
    {
        return $this->endereco;
    }

    public function setEndereco($endereco)
    {
        $this->endereco = $endereco;
    }

    public function getLoja()
    {
        return $this->loja;
    }

    public function setLoja($loja)
    {
        $this->loja = $loja;
    }

    public function getLojaChave()
    {
        return $this->lojaChave;
    }

    public function setLojaChave($lojaChave)
    {
        $this->lojaChave = $lojaChave;
    }

    public function getCielo()
    {
        return $this->cielo;
    }

    public function setCielo($cielo)
    {
        $this->cielo = $cielo;
    }

    public function getCieloChave()
    {
        return $this->cieloChave;
    }

    public function setCieloChave($cieloChave)
    {
        $this->cieloChave = $cieloChave;
    }
    
    public function getReturnFile()
    {
        return $this->returnFile;
    }

    public function setReturnFile($returnFile)
    {
        $this->returnFile = $returnFile;
    }

    public function getCertifiedFile()
    {
        return $this->certifiedFile;
    }

    public function setCertifiedFile($certifiedFile)
    {
        $this->certifiedFile = $certifiedFile;
    }
    
    public function getSessionId()
    {
        return $this->sessionId;
    }
    
    public function getSessionValue()
    {
        return $_SESSION[$this->sessionId];
    }
    
    public function limparSessao()
    {
        $_SESSION[$this->sessionId] = new ArrayObject();
        
        return $_SESSION[$this->sessionId]->count() == 0;
    }
    
}

?>
