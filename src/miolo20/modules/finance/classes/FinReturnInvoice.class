<?php
/**
 * <--- Copyright 2005-2012 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Classe abstrata para importação de arquivos retorno. Implementa situações
 *  em comum entre os bancos.
 *
 * @author Equipe SAGU [sagu@solis.coop.br]
 *
 * \b Maintainers: \n
 * Equipe SAGU [sagu@solis.coop.br]
 *
 * @since
 * Class created on 02/03/2012
 *
 */
abstract class FinReturnInvoice
{
    const TYPE_HEADER = 1;
    const TYPE_LOT_HEADER = 2;
    const TYPE_TRAILER = 3;
    const TYPE_LOT_TRAILER = 4;
    const TYPE_DETAIL = 5;
    const TYPE_DETAIL_T = 6;
    const TYPE_DETAIL_U = 7;
    
    /**
     * Tipo da linha atual que esta sendo processada (header, trailer, detalhe, etc..)
     *
     * @var int
     */
    private $currentLineType;
    
    /**
     *
     * @var int
     */
    private $fileId;
    
    /**
     * @var int
     */
    private $bankReturnId;
    
    /**
     *
     * @var FinReturnInvoiceHeader
     */
    private $header;

    /**
     *
     * @var FinReturnInvoiceLotHeader
     */
    private $lotHeader;
    
    /**
     *
     * @var FinReturnInvoiceTrailer
     */
    private $trailer;
    
    /**
     *
     * @var FinReturnInvoiceLotTrailer
     */
    private $lotTrailer;
    
    /**
     * Contem os objetos de detalhes (FinReturnInvoiceDetail)
     *
     * @var array 
     */
    private $details = array();
    
    /**
     * Atributo interno com cache das informacoes do arquivo
     * 
     * @var stdClass
     */
    private $_fileInformation = null;

    
    public function __construct()
    {
        $this->header = new FinReturnInvoiceHeader();
        
        // Valida se existe o metodo na classe que esta estendendo
        // FIXME Foi tentado fazer metodo abstrato para obrigar classe ReturnInvoiceXXX a ter o metodo, porem, o php estava exigindo que este metodo fosse declarado nas outras classes referentes à leitura dos arquivos retorno
        if ( !method_exists($this, 'validateFileName') )
        {
            // Comentado throw devido a necessidade de instanciar diretamente objetos da classe de boletos
//            throw new Exception( _M('Deve existir um método chamado validateFileName() para esta classe', $module) );
        }
    }
    
    public function getFileId()
    {
        return $this->fileId;
    }

    public function setFileId($fileId)
    {
        $this->fileId = $fileId;
    }

    public function getBankReturnId()
    {
        return $this->bankReturnId;
    }

    public function setBankReturnId($bankReturnId)
    {
        $this->bankReturnId = $bankReturnId;
    }

    /**
     *
     * @return FinReturnInvoiceHeader
     */
    public function getHeader()
    {
        return $this->header;
    }

    public function setHeader($header)
    {
        $this->header = $header;
    }

    /**
     *
     * @return FinReturnInvoiceLotHeader
     */
    public function getLotHeader()
    {
        return $this->lotHeader;
    }

    public function setLotHeader($lotHeader)
    {
        $this->lotHeader = $lotHeader;
    }

    /**
     *
     * @return FinReturnInvoiceTrailer
     */
    public function getTrailer()
    {
        return $this->trailer;
    }

    public function setTrailer($trailer)
    {
        $this->trailer = $trailer;
    }

    /**
     *
     * @return FinReturnInvoiceLotTrailer
     */
    public function getLotTrailer()
    {
        return $this->lotTrailer;
    }

    public function setLotTrailer($lotTrailer)
    {
        $this->lotTrailer = $lotTrailer;
    }
    
    /**
     *
     * @return array Array contendo objetos do tipo FinReturnInvoiceDetail
     */
    public function getDetails()
    {
        return $this->details;
    }

    public function setDetails($details)
    {
        $this->details = $details;
    }
    
    public function getCurrentLineType()
    {
        return $this->currentLineType;
    }

    public function setCurrentLineType($currentLineType)
    {
        $this->currentLineType = $currentLineType;
    }
    
    protected function processarHeaderArquivo($linha)
    {
        $this->setCurrentLineType(self::TYPE_HEADER);
    }

    protected function processarHeaderLote($linha)
    {
        $this->setCurrentLineType(self::TYPE_LOT_HEADER);
    }

    protected function processarTrailerLote($linha)
    {
        $this->setCurrentLineType(self::TYPE_LOT_TRAILER);
    }

    protected function processarTrailerArquivo($linha)
    {
        $this->setCurrentLineType(self::TYPE_TRAILER);
    }

    protected function processarDetalheU($linha)
    {
        $this->setCurrentLineType(self::TYPE_DETAIL_U);
    }

    protected function processarDetalheT($linha)
    {
        $this->setCurrentLineType(self::TYPE_DETAIL_T);
    }

    protected function processarDetalhe($linha)
    {
        $this->setCurrentLineType(self::TYPE_DETAIL);
    }
    
        
    /**
     * Retorna o vetor de objetos fin.bankMovement, obtido através da intrepretação das linhas do arquivo.
     * 
     * @return array Objetos do tipo FinBankMovement
     */
    public function getBankMovements()
    {
        $bankMovements = array();
        $detail = new FinReturnInvoiceDetail();
        
        foreach ( $this->details as $detail )
        {
            $bankMovements[] = $row = new FinBankMovement();
            
            $row->fileDiscount = $detail->getValDiscount();
            $row->fileInterestFine = $detail->getValInterestFine();
            $row->otherDiscounts = $detail->getValDiscount();
            $row->otherAdditions = $detail->getAdditions();
            $row->expenditure = $detail->getExpenditure();
            $row->value = $detail->getValue();
            $row->valuePaid = $detail->getValuePaid();
            $row->ourNumber = $detail->getOurNumber();
            $row->branch = $detail->getBranch();
            $row->branchNumber = $detail->getBranchNumber();
            $row->wallet = $detail->getWallet();
            $row->occurrenceDate = $detail->getOccurrenceDate();
            $row->creditDate = $detail->getCreditDate();
            $row->fileMaturityDate = $detail->getMaturityDate();
            $row->bankId = $detail->getBankId();
            $row->fileId = $this->getFileId();
            $row->occurrence = $detail->getOccurrence();
            $row->invoiceId = $detail->getInvoiceId();
        }
        
        return $bankMovements;
    }
    
    /**
     * Processa arquivo de retorno
     *
     * @param $data string to break and analyze
     *
     * @return boolean True if succeed, otherwise false
     */
    public function process()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $busFile = new BusinessFinanceBusFinFile();
        
        $this->beforeProcess();
        
        $linhas = file($_FILES['uploadFile']['tmp_name']);
                
        // Verifica se o arquivo de retorno é de 400 linhas ou 240
        if ( strlen(str_replace(array("\r", "\n"), '',$linhas[0])) > 240 )
        {
            //Checa o código do banco e bate com o código que está no arquivo de importaçao
            $codigoBancoNoRetorno = substr(file_get_contents($_FILES['uploadFile']['tmp_name']), 76, 3);
            $nomeBancoNoRetorno = substr(file_get_contents($_FILES['uploadFile']['tmp_name']), 79, 15);
        }
        else
        {
            //Checa o código do banco e bate com o código que está no arquivo de importaçao
            $codigoBancoNoRetorno = substr(file_get_contents($_FILES['uploadFile']['tmp_name']), 0, 3);
            $nomeBancoNoRetorno = substr(file_get_contents($_FILES['uploadFile']['tmp_name']), 102, 15);
        }
                
        if( $codigoBancoNoRetorno != MIOLO::_REQUEST('bankId') )
        {
            throw new Exception(_M("O código do banco que você selecionou não bate com o código fornecido no retorno. Código no retorno: @1 - @2", $module, $codigoBancoNoRetorno, $nomeBancoNoRetorno));
        }
        
        if ( ! $this->validateFileName() )
        {
            $exemples = "<ul>
                            <b>Modelos:</b>
                            <li>BANCO DO BRASIL S. A. - CBRqualquer_nome.RET</li>
                            <li>BANRISUL - qualquer_nome.RET</li>
                            <li>BRADESCO - CBqualquer_nome.RET</li>
                            <li>CAIXA ECONÔMICA FEDERAL - qualquer_nome.RET</li>
                            <li>ITAÚ - CNqualquer_nome.RET</li>
                         </ul>";
            
            throw new Exception( _M("O nome do arquivo (@1) não é válido para este banco.<br><br> {$exemples}", $module, $this->getFileName()) );
        }
        
        $this->setNomeArquivo( $this->getFileInformation()->absolutePath );
        $rb = new RetornoBanco( $this );
        $rb->processar();
        
        // Define valor do sequencial do banco
        $this->setBankReturnId($this->header->getBankReturnSequence());

        $this->afterProcess();
        
        // Atualiza FinFile com o valor do sequencial do banco
        $fileData = $busFile->getFinanceFile($this->fileId);
        $fileData->bankReturnId = $this->bankReturnId;
        $busFile->updateFinanceFile($fileData);
    }
    
    /**
     * Funcao chamada antes de processar todo arquivo
     */
    public function beforeProcess()
    {
    }
    
    /**
     * Funcao chamada depois de processar todo arquivo
     */
    public function afterProcess()
    {
    }
    
    
    /**
     * Trigger acionado depois de processar linha
     * 
     * @param int $numLn
     * @param array $vlinha
     */
    public function aposProcessarLinha($numLn, $vlinha)
    {
        if ( is_array($vlinha) )
        {
            $this->convertToObjects($vlinha);
        }
    }
    
    /**
     * Converte linha vinda do sistema de retorno para objetos do SAGU
     *
     * @param array $linha 
     */
    private function convertToObjects($linha)
    {
        switch ( $this->getCurrentLineType() )
        {
            case self::TYPE_HEADER:
                @$bankId = substr($linha['cod_nome_banco'], 0, 3);
                @$bankName = substr($linha['cod_nome_banco'], 3);
                
                $this->header = $obj = new FinReturnInvoiceHeader();
                $obj->setBankId( SAGU::NVL($bankId, $linha['banco']) );
                $obj->setBankName( SAGU::NVL($bankName, $linha['nome_banco']) );
                $obj->setBranch( $linha['agencia'] );
                $obj->setBranchNumber( $linha['conta_corrente'] );
                $obj->setBankReturnSequence( $linha['sequencial_reg'] );
                break;
            
            case self::TYPE_LOT_HEADER:
                $this->lotHeader = $obj = new FinReturnInvoiceLotHeader();
                break;
            
            case self::TYPE_TRAILER:
                $this->trailer = $obj = new FinReturnInvoiceTrailer();
                break;
            
            case self::TYPE_LOT_TRAILER:
                $this->lotTrailer = $obj = new FinReturnInvoiceLotTrailer();
                break;
            
            case self::TYPE_DETAIL:
            case self::TYPE_DETAIL_T:
            case self::TYPE_DETAIL_U:
                // Quando for do tipo U, mescla esta linha com objeto anterior (alguns bancos utilizam a informacao quebrada em 2 linhas)
                $obj = null;
                if ( $this->getCurrentLineType() == self::TYPE_DETAIL_U )
                {
                    $obj = end($this->details);
                }
                else
                {
                    $this->details[] = $obj = new FinReturnInvoiceDetail();
                }
                
                // O valor de abatimento deve ser somado ao valor de desconto. 
                // O lançamento será o mesmo de desconto bancário, não há necessidade de um novo lançamento para abatimentos.
                $valorDesconto = MUtil::NVL($linha['valor_desconto'], $linha['desconto_concedido']) + $linha['valor_abatimento'];
                $obj->setValDiscount( str_replace(',', '.', $valorDesconto) );

                $obj->setCreditDate( $linha['data_credito'] );
                $obj->setMaturityDate( MUtil::NVL($linha['data_vencimento'], $linha['vencimento']) );
                $obj->setOccurrenceDate( SAGU::NVL($linha['data_ocorrencia'], $linha['data_ent_liq']) );
                $obj->setOurNumber( $linha['nosso_numero'] );
                $obj->setValue( MUtil::NVL($linha['valor'], $linha['valor_liquido']) );
                $obj->setValuePaid( SAGU::NVL($linha['valor_recebido'], $linha['valor_pago']) );
                $obj->setExpenditure( $linha['valor_tarifa'] );
                $obj->setTaxDiscount( $linha['taxa_desconto'] );
                $obj->setValInterestFine( SAGU::NVL($linha['acrescimos'], $linha['juros_mora']) );
                $obj->setBankId( $this->header->getBankId() );
                $obj->setWallet( $linha['carteira'] );
                $obj->setBranch( SAGU::NVL($linha['agencia'], $this->header->getBranch()) );
                $obj->setBranchNumber( SAGU::NVL($linha['conta_corrente'], $linha['cc_cedente'], $this->header->getBranchNumber()) );
                $obj->setOccurrence($linha['codigo_ocorrencia']);
                $obj->setInvoiceId($linha['cod_titulo']);
                
                break;
        }
    }

    /**
     * Os valores presentes nos arquivos retorno geralmente precisam ser divididos por 100, já que não utilizam vírgula.
     */
//    protected function adjustValue($value)
//    {
//        if ( strlen($value)>0 )
//        {
//            $value = SAGU::formatNumber($value);
//        }
//        else
//        {
//            return false;
//        }
//
//        $value = SAGU::calcNumber('('.$value.'/100)', true);
//
//        return SAGU::formatNumber($value);
//    }

    /**
     * Método abstrato que separa o arquivo na seções, com cada linha tornando-se uma
     *  posição do vetor. Atribui valor ao atributo trimmedFile.
     */
    public function trimFile()
    {
    }
    
    /**
     * Return the correctly file name 
     *
     * @param: $transferorCode (string):  Transferor code bank (needed to generate the file)
     *
     * @return (string): string containing the file name for remittance
     *
     */
    protected function returnFileName($transferorCode)
    {
        $monthCode = $this->returnMonthCode(date('m'));
        $dayNumber = date('d');

        return strtoupper($transferorCode.$monthCode.$dayNumber.'.RET');
    }
    
    /**
     * Return the correct month code (Baseed on defaults of BANSICREDI documentation in 2003/September
     * 
     * @param $month (string): String containing the month code to return
     *
     * @return (string): String containing the correct month code
     *
     */
    protected function returnMonthCode($month)
    {
        switch ($month)
        {
            case 01:
                return 1;
                break;
            case 02:
                return 2;
                break;
            case 03:
                return 3;
                break;
            case 04:
                return 4;
                break;
            case 05:
                return 5;
                break;
            case 06:
                return 6;
                break;
            case 07:
                return 7;
                break;
            case 08:
                return 8;
                break;
            case 09:
                return 9;
                break;
            case 10: 
                return 'O';
                break;
            case 11:
                return 'N';
                break;
            case 12:
                return 'D';
                break;
            default:
                return false;
        }
    }
    
    /**
     * Get the file information and process
     *
     * @param: $fileId int identification of file
     *
     * @return stdClass Object containning file information
     *
     */
    protected function getFileInformation()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        if ( strlen($this->fileId) <= 0 )
        {
            throw new Exception( _M('Não foi informado um arquivo para a importação', $module) );
        }

        // Caso ainda nao esteja no cache, adiciona
        if ( $this->_fileInformation->fileId != $this->fileId )
        {
            $businessFile = new BusinessBasicBusFile();

            $this->_fileInformation = $businessFile->getFile($this->fileId);
        }

        return $this->_fileInformation;
    }
    
    
    /**
     * Obtem nome do arquivo atual
     *
     * @return string
     */
    public function getFileName()
    {
        return $this->getFileInformation()->uploadFileName;
    }
}
?>
