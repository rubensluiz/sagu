<?php
 /**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This class Print Internal Invoice
 *
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 14/06/2006
 *
 **/
 
define( 'REPORT_ID', 'AC002' );
define( 'FPDF_FONTPATH', $MIOLO->getModulePath( 'basic', '/classes/fpdf/font/' ) );

$MIOLO = MIOLO::getInstance();
$module = 'finance';
$MIOLO->Uses( 'classes/fpdf/fpdf.php', 'basic' );

class RptPrintInternalInvoice
{

    public function RptPrintInternalInvoice($invoiceId)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        // Create the PDF file
        $pdf = new fpdf( );
        $pdf->addPage( 'P', 'mm', 'A4' );
        $pdf->setMargins( 10, 10 );
        $pdf->setFont( 'Arial', '', 8 );
        
        $businessCompany = new BusinessBasicBusCompany();
        if (SAGU::checkParameter('DEFAULT_COMPANY_CONF'))
        {
            $companyData = $businessCompany->getCompany( SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF') );
            
            if (is_null( $companyData->companyId ))
            {
                $MIOLO->error( _M('Parâmetro DEFAULT_COMPANY_CONF aponta para a empresa inexistente @1.', $module, SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF') ) );
            }
        } else
        {
            $MIOLO->error( _M('Problemas ao procurar as informações da instituição, por favor, verifique o cadastro da instituição' ) );
        }
        $businessLegalPerson = new BusinessBasicBusLegalPerson();
        $personData = $businessLegalPerson->getLegalPerson( $companyData->personId );
        // Imagem
        

        if (strlen( SAGUFile::getPhotoPath( $companyData->personId ) ) > 0)
        {
            $pdf->image( SAGUFile::getPhotoPath( $companyData->personId ), 10, 10, 15, 15, SAGU::getParameter('BASIC', 'PHOTO_FORMAT') );
        }
        
        $pdf->cell( 15, 2.6, '' );
        $pdf->cell( 80, 2.6, SAGU::getShortenName( $companyData->name, 50 ) );
        
        if (strlen( SAGUFile::getPhotoPath( $companyData->personId ) ) > 0)
        {
            $pdf->image( SAGUFile::getPhotoPath( $companyData->personId ), 105, 10, 15, 15, SAGU::getParameter('BASIC', 'PHOTO_FORMAT') );
        }
        
        $pdf->cell( 15, 2.6, '' );
        $pdf->cell( 80, 2.6, SAGU::getShortenName( $companyData->name, 50 ) );
        $pdf->ln();
        
        $pdf->cell( 15, 2.6, '' );
        $pdf->cell( 80, 2.6, $personData->location . ', ' . $personData->number . ' ' . $personData->complement );
        $pdf->cell( 15, 2.6, '' );
        $pdf->cell( 80, 2.6, $personData->location . ', ' . $personData->number . ' ' . $personData->complement );
        $pdf->ln();
        
        $pdf->cell( 15, 2.6, '' );
        $pdf->cell( 80, 2.6, _M('Bairro', $module ) . ': ' . $personData->neighborhood . ' - ' . $personData->zipCode . ' - ' . $personData->cityName . '/' . $personData->stateId );
        $pdf->cell( 15, 2.6, '' );
        $pdf->cell( 80, 2.6, _M('Bairro', $module ) . ': ' . $personData->neighborhood . ' - ' . $personData->zipCode . ' - ' . $personData->cityName . '/' . $personData->stateId );
        $pdf->ln();
        
        $pdf->cell( 15, 2.6, '' );
        $pdf->cell( 80, 2.6, _M('Telefone', $module ) . ': ' . $personData->phone . ' ' . (strlen( $personData->fax ) > 0 ? ' - ' . _M('Fax', $module ) . ': ' . $personData->fax : '') );
        $pdf->cell( 15, 2.6, '' );
        $pdf->cell( 80, 2.6, _M('Telefone', $module ) . ': ' . $personData->phone . ' ' . (strlen( $personData->fax ) > 0 ? ' - ' . _M('Fax', $module ) . ': ' . $personData->fax : '') );
        $pdf->ln();
        $pdf->cell( 15, 2.6, '' );
        
        $pdf->cell( 80, 2.6, _M('CNPJ', $module ) . ': ' . SAGU::formatCNPJ( $personData->cnpj ) . ' - ' . _M('Insc. est.', $module ) . ': ' . (strlen( $personData->stateRegistration ) > 0 ? $personData->stateRegistration : _M('Isento', $module )) );
        $pdf->cell( 15, 2.6, '' );
        $pdf->cell( 80, 2.6, _M('CNPJ', $module ) . ': ' . SAGU::formatCNPJ( $personData->cnpj ) . ' - ' . _M('Insc. est.', $module ) . ': ' . (strlen( $personData->stateRegistration ) > 0 ? $personData->stateRegistration : _M('Isento', $module )) );
        $pdf->ln();
        
        $businessReceivableInvoice = new BusinessFinanceBusReceivableInvoice();
        $receivableInvoiceData = $businessReceivableInvoice->getReceivableInvoice( $invoiceId );
        
        $pdf->setFont( 'Arial', 'B', 8 );
        $pdf->cell( 15, 2.6, '' );
        $pdf->cell( 80, 2.6, _M('Data de vencimento', $module ) . ': ' . $receivableInvoiceData->maturityDate );
        $pdf->setFont( 'Arial', 'B', 8 );
        $pdf->cell( 15, 2.6, '' );
        $pdf->cell( 80, 2.6, _M('Data de vencimento', $module ) . ': ' . $receivableInvoiceData->maturityDate );
        $pdf->ln();
        
        $businessPerson = new BusinessBasicBusPerson();
        $dataPerson = $businessPerson->getPersonName( $receivableInvoiceData->personId );
        
        $pdf->setFont( 'Arial', 'B', 8 );
        $pdf->cell( 15, 3, _M('Aluno', $module ) . ': ' );
        $pdf->setFont( 'Arial', '', 8 );
        $pdf->cell( 80, 3, $receivableInvoiceData->personId . ' - ' . SAGU::getShortenName( $dataPerson, 40 ) );
        $pdf->setFont( 'Arial', 'B', 8 );
        $pdf->cell( 15, 3, _M('Aluno', $module ) . ': ' );
        $pdf->setFont( 'Arial', '', 8 );
        $pdf->cell( 80, 3, $receivableInvoiceData->personId . ' - ' . SAGU::getShortenName( $dataPerson, 40 ) );
        $pdf->ln();
        
        if ((SAGU::getParameter('BASIC', 'MODULE_ACADEMIC_INSTALLED') == 'YES') && (strlen( $receivableInvoiceData->courseId ) > 0))
        {
            $businessCourse = new BusinessAcademicBusCourse();
            $dataCourse = $businessCourse->getCourse( $receivableInvoiceData->courseId );
            $pdf->setFont( 'Arial', 'B', 8 );
            $pdf->cell( 15, 3, _M('Curso', $module ) . ': ' );
            $pdf->setFont( 'Arial', '', 8 );
            $pdf->cell( 80, 3, $receivableInvoiceData->courseId . ' - ' . $dataCourse->shortName );
            $pdf->setFont( 'Arial', 'B', 8 );
            $pdf->cell( 15, 3, _M('Curso', $module ) . ': ' );
            $pdf->setFont( 'Arial', '', 8 );
            $pdf->cell( 80, 3, $receivableInvoiceData->courseId . ' - ' . $dataCourse->shortName );
            $pdf->ln();
            
            $businessUnit = new BusinessBasicBusUnit();
            $dataUnit = $businessUnit->getUnit( $receivableInvoiceData->unitId );
            
            $pdf->setFont( 'Arial', 'B', 8 );
            $pdf->cell( 15, 3, _M('Unidade', $module ) . ': ' );
            $pdf->setFont( 'Arial', '', 8 );
            $pdf->cell( 80, 3, $receivableInvoiceData->unitId . ' - ' . $dataUnit->description );
            $pdf->setFont( 'Arial', 'B', 8 );
            $pdf->cell( 15, 3, _M('Unidade', $module ) . ': ' );
            $pdf->setFont( 'Arial', '', 8 );
            $pdf->cell( 80, 3, $receivableInvoiceData->unitId . ' - ' . $dataUnit->description );
            $pdf->ln();
        }
        $pdf->ln();
        
        $pdf->setFont( 'Arial', 'B', 9 );
        $pdf->cell( 10, 3.5, _M('Op.', $module ), 1, 0, 'C' );
        $pdf->cell( 60, 3.5, _M('Descrição da operação', $module ), 1, 0, 'C' );
        $pdf->cell( 20, 3.5, _M('Valor', $module ), 1, 0, 'C' );
        $pdf->cell( 5, 3.5, '' );
        $pdf->setFont( 'Arial', 'B', 9 );
        $pdf->cell( 10, 3.5, _M('Op.', $module ), 1, 0, 'C' );
        $pdf->cell( 60, 3.5, _M('Descrição da operação', $module ), 1, 0, 'C' );
        $pdf->cell( 20, 3.5, _M('Valor', $module ), 1, 0, 'C' );
        $pdf->ln();
        
        $pdf->setFont( 'Arial', '', 9 );
        $busEntry = new BusinessFinanceBusEntry();
        $entryData = $busEntry->listEntryData( $receivableInvoiceData->invoiceId, 3 );
        
        if (is_array( $entryData[0] ))
        {
            foreach ( $entryData as $key => $ed )
            {
                
                if ($key == 0)
                {
                    $pdf->setFillColor( 255 );
                } else
                {
                    $pdf->setFillColor( 2 % $key == 0 ? 255 : 235 );
                }
                // Calculate spaces for string
                $x = $pdf->getX();
                $y = $pdf->getY();
                $strsize = $pdf->getStringWidth( $ed[3] );
                $breaks = ceil( $strsize / 50 ) > 1 ? ceil( $strsize / 50 ) : 1;
                $lines = 4 * $breaks;
                $pdf->cell( 10, $lines, $ed[2], 1, 0, 'C' );
                $pdf->multiCell( 60, 4, trim( $ed[3] ), 'LRT', 'L' );
                $y2 = $pdf->getY();
                $pdf->setY( $y );
                $pdf->setX( $x + 70 );
                $pdf->cell( 20, $lines, $ed[6], 1, 0, 'R' );
                
                $pdf->cell( 5, 4, '' );
                $x = $pdf->getX();
                $y = $pdf->getY();
                $pdf->cell( 10, $lines, $ed[2], 1, 0, 'C' );
                $pdf->multiCell( 60, 4, $ed[3], 'LRT', 'L' );
                $y2 = $pdf->getY();
                $pdf->setY( $y );
                $pdf->setX( $x + 70 );
                $pdf->cell( 20, $lines, $ed[6], 1, 0, 'R' );
                $pdf->ln();
            }
            $balance = ( float ) $businessReceivableInvoice->getInvoiceBalance( $receivableInvoiceData->invoiceId );
            
            $balanceWithPolicies = ( float ) $businessReceivableInvoice->getInvoiceBalanceWithPolicies( $receivableInvoiceData->invoiceId );
            
            $situation = ( float ) SAGU::calcNumber( '(' . $balanceWithPolicies . ')-(' . $balance . ')', true );
            if ($situation < (float)SAGU::formatNumber('0'))
            {
                $msg = _M('Desconto', $module );
            } elseif ($situation > (float)SAGU::formatNumber('0'))
            {
                $msg = _M('Juros', $module );
            } else
            {
                $msg = '';
            }

            $pdf->setFillColor( 230 );
            $pdf->cell( 70, 4, _M('Valor nominal', $module ), 1, 0, 'L', 1 );
            $pdf->cell( 20, 4, SAGU::formatNumber( $balance ), 1, 0, 'R', 1 );
            
            $pdf->cell( 5, 4, '' );
            $pdf->cell( 70, 4, _M('Valor nominal', $module ), 1, 0, 'L', 1 );
            $pdf->cell( 20, 4, SAGU::formatNumber( $balance ), 1, 0, 'R', 1 );
            $pdf->ln();
            if (strlen( $msg ) > 0)
            {
                $pdf->cell( 70, 4, $msg, 1, 0, 'L', 1 );
                $pdf->cell( 20, 4, SAGU::formatNumber( $situation ), 1, 0, 'R', 1 );
                
                $pdf->cell( 5, 4, '' );
                $pdf->cell( 70, 4, $msg, 1, 0, 'L', 1 );
                $pdf->cell( 20, 4, SAGU::formatNumber( $situation ), 1, 0, 'R', 1 );
                $pdf->ln();
            }

            $pdf->setFillColor( 255 );
            $pdf->cell( 70, 4, _M('Saldo em aberto', $module ), 1, 0 );
            $pdf->cell( 20, 4, SAGU::formatNumber( $balanceWithPolicies ), 1, 0, 'R' );
            $pdf->cell( 5, 4, '' );
            $pdf->cell( 70, 4, _M('Saldo em aberto', $module ), 1, 0 );
            $pdf->cell( 20, 4, SAGU::formatNumber( $balanceWithPolicies ), 1, 0, 'R' );
            $pdf->ln();
            
            $pdf->cell( 70, 4, '', 1, 0 );
            $pdf->cell( 20, 4, '', 1, 0 );
            $pdf->cell( 5, 4, '' );
            $pdf->cell( 70, 4, '', 1, 0 );
            $pdf->cell( 20, 4, '', 1, 0 );
            $pdf->ln();
            
            $pdf->cell( 70, 4, _M('Total geral', $module ), 1, 0 );
            $pdf->cell( 20, 4, '', 1, 0 );
            $pdf->cell( 5, 4, '' );
            $pdf->cell( 70, 4, _M('Total geral', $module ), 1, 0 );
            $pdf->cell( 20, 4, '', 1, 0 );
            $pdf->ln();
        }
        $pdf->output();
    }
}
?>
