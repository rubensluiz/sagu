<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Class
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 01/06/2006
 *
 **/

class FINANCE
{

    /** 
     * Return the number in a configured format
     *
     * @param: $number (float): the number to format
     *
     * @returns (varchar): Returns the value formatted 
     *
     */
     public function formatFinanceReportNumber($number)
     {
        $MIOLO = MIOLO::getInstance();
        $db    = SDatabase::getInstance();
        
        $operationType = substr($number, strlen($number)-1, 1);
        
        if ( $operationType == 'D' || $operationType == 'C' )
        {
            $number = trim(substr($number, 0, strlen($number)-1));

            $flag = true;
        }

        $number = SAGU::formatNumber($number);

        $number = number_format($number, SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), SAGU::getParameter('BASIC', 'REPORT_DECIMAL_SEPARATOR'), SAGU::getParameter('BASIC', 'REPORT_THOUSAND_SEPARATOR'));
        
        if ( $flag )
        {
            return $number . ' ' . $operationType;
        }
        else
        {
            return $number;
        }
    }
    
    /** 
     * Return the account scheme id formatted
     *
     * @param: $accountSchemeId (string): the account scheme id
     *
     * @returns (varchar): Returns the value formatted
     *
     */
     public function formatAccountSchemeId($accountSchemeId)
     {
        $length = strlen($accountSchemeId);
        switch ($length)
        {
            case 3:
                return substr($accountSchemeId, 0, 3);
                break;
            case 5:
                return substr($accountSchemeId, 0, 3).'.'.
                       substr($accountSchemeId, 3, 2);
                break;
            case 7:
                return substr($accountSchemeId, 0, 3).'.'.
                       substr($accountSchemeId, 3, 2).'.'.
                       substr($accountSchemeId, 5, 2);
                break;
            case 10:
                return substr($accountSchemeId, 0, 3).'.'.
                       substr($accountSchemeId, 3, 2).'.'.
                       substr($accountSchemeId, 5, 2).'.'. 
                       substr($accountSchemeId, 7, 3);
                break;
            case 13:
                return substr($accountSchemeId, 0, 3).'.'.
                       substr($accountSchemeId, 3, 2).'.'.
                       substr($accountSchemeId, 5, 2).'.'.
                       substr($accountSchemeId, 7, 3).'.'.
                       substr($accountSchemeId, 10, 3); 
                break;
            default:
                return $accountSchemeId;
                break;
        }
    }

   /**
    * Return the cost center formatted
    *
    * @param: $costCenterId (string): The cost center id
    *
    * @returns (varchar): Returns the cost center formatted
    *
    */
    public function formatCostCenterId($costCenterId)
    {
        $length = strlen($costCenterId);
        switch ($length)
        {
            case 1:
                return $costCenterId;
                break;
            case 3:
                return substr($costCenterId, 0, 1).'.'.
                       substr($costCenterId, 1, 2);
                break;
            case 5:
                return substr($costCenterId, 0, 1).'.'.
                       substr($costCenterId, 1, 2).'.'.
                       substr($costCenterId, 3, 2);
                break;
            case 8:
                return substr($costCenterId, 0, 1).'.'.
                       substr($costCenterId, 1, 2).'.'.
                       substr($costCenterId, 3, 2).'.'.
                       substr($costCenterId, 5, 3);
                break;
            default:
                return $costCenterId;
        }
    }



}
