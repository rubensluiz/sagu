<?php
 /**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This class generate the bank remittance
 *
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 14/06/2006
 *
 **/
 
/**
 * Class to generate the bank remittance
 */
class ReturnFEBRABANInvoice748
{
    var $process;
    var $processInfo;
    /**
     * Return the correctly file name 
     *
     * @param: $transferorCode (string):  transferor code bank (needed to generate the file)
     *
     * @return (string): string containing the file name for remittance
     *
     */
    private function returnFileName($transferorCode)
    {
        $monthCode = $this->returnMonthCode(date("m"));
        $dayNumber = date("d");
        return strToUpper($transferorCode.$monthCode.$dayNumber.'.CRM');
    }

    /**
     * Return the value adjusted
     *
     * @param $value: Non formatted value
     *
     * @return: Formatted value 
     *
     */
    private function adjustValue($value)
    {
        if ( strlen($value)>0 )
        {
            $value = SAGU::formatNumber($value);
        }
        else
        {
            return false;
        }
        $value = SAGU::calcNumber('('.$value.'/100)', true);
        return SAGU::formatNumber($value);
    }

    /**
     * BANSICREDI document species
     *
     * @param $code (string): Document species
     *
     * @return: Description for document specie
     *
     */
    private function returnDocumentSpecie($code)
    {
        $ds['A'] = _M('Duplicata mercantil por indicação', $module);
        $ds['B'] = _M('Duplicata rural', $module);
        $ds['C'] = _M('Nota promissória', $module);
        $ds['D'] = _M('Nota promissória rural', $module);
        $ds['E'] = _M('Nota do seguro', $module);
        $ds['F'] = _M('Cobrança seriada', $module);
        $ds['G'] = _M('Recibo', $module);
        $ds['H'] = _M('Nota de acomodação', $module);
        $ds['I'] = _M('Nota de débito', $module);
        $ds['J'] = _M('Duplicata de serviços por indicação', $module);
        $ds['K'] = _M('Outros', $module);
        
        return $ds[$code];
    }

    /**
     * BANSICREDI occurrence reasons rules (maybe implemented in database rules)
     *
     * @param: $code (string): Code for reasons
     *
     * @return: (object): Object containng information about return if valid or not
     *
     */
    private function returnReason($code)
    {
        $module = MIOLO::getCurrentModule();
        $reasons['01']['isValid']     = false;
        $reasons['01']['description'] = _M('Código do banco inválido', $module);
        $reasons['02']['isValid']     = false;
        $reasons['02']['description'] = _M('Código do registro detalhe inválido', $module);
        $reasons['03']['isValid']     = false;
        $reasons['03']['description'] = _M('Código de ocorrência inválido', $module);
        $reasons['04']['isValid']     = false;
        $reasons['04']['description'] = _M('Código de ocorrência não permitido para esta carteira', $module);
        $reasons['05']['isValid']     = false;
        $reasons['05']['description'] = _M('Código de ocorrência não numérico', $module);
        $reasons['07']['isValid']     = false;
        $reasons['07']['description'] = _M('Agência/Conta/Dígito inválido', $module);
        $reasons['08']['isValid']     = false;
        $reasons['08']['description'] = _M('Nosso número inválido', $module);
        $reasons['09']['isValid']     = false;
        $reasons['09']['description'] = _M('Nosso número duplicado', $module);
        $reasons['10']['isValid']     = false;
        $reasons['10']['description'] = _M('Carteira inválida', $module);
        $reasons['14']['isValid']     = false;
        $reasons['14']['description'] = _M('Título protestado', $module);
        $reasons['15']['isValid']     = false;
        $reasons['15']['description'] = _M('Carteira/Agência/Conta/Nosso número inválido', $module);
        $reasons['16']['isValid']     = false;
        $reasons['16']['description'] = _M('Data de vencimento inválida', $module);
        $reasons['17']['isValid']     = false;
        $reasons['17']['description'] = _M('Data de vencimento anterior à data de emissão', $module);
        $reasons['18']['isValid']     = false;
        $reasons['18']['description'] = _M('Vencimento fora do prazo de operação', $module);
        $reasons['20']['isValid']     = false;
        $reasons['20']['description'] = _M('Valor do título inválido', $module);
        $reasons['21']['isValid']     = false;
        $reasons['21']['description'] = _M('Espécie do título inválida', $module);
        $reasons['22']['isValid']     = false;
        $reasons['22']['description'] = _M('Espécie não permitida para a carteira', $module);
        $reasons['24']['isValid']     = false;
        $reasons['24']['description'] = _M('Data de emissão inválida', $module);
        $reasons['29']['isValid']     = false;
        $reasons['29']['description'] = _M('Valor do desconto maior/igual ao valor da fatura', $module);
        $reasons['31']['isValid']     = false;
        $reasons['31']['description'] = _M('Concessão de desconto - existe desconto anterior', $module);
        $reasons['33']['isValid']     = false;
        $reasons['33']['description'] = _M('Valor do abatimento inválido', $module);
        $reasons['34']['isValid']     = false;
        $reasons['34']['description'] = _M('Valor do abatimento é maior/igual ao valor do título', $module);
        $reasons['36']['isValid']     = false;
        $reasons['36']['description'] = _M('Concessão de abatimento - existe abatimento anterior', $module);
        $reasons['38']['isValid']     = false;
        $reasons['38']['description'] = _M('Prazo para protesto inválido', $module);
        $reasons['39']['isValid']     = false;
        $reasons['39']['description'] = _M('Pedido para protesto não permitido para o título', $module);
        $reasons['40']['isValid']     = false;
        $reasons['40']['description'] = _M('Título com ordem de protesto emitida', $module);
        $reasons['41']['isValid']     = false;
        $reasons['41']['description'] = _M('Pedido de cancelamento/sustação sem instrução de protesto', $module);
        $reasons['44']['isValid']     = false;
        $reasons['44']['description'] = _M('Agência cedente não prevista', $module);
        $reasons['45']['isValid']     = false;
        $reasons['45']['description'] = _M('Nome do sacado inválido');
        $reasons['46']['isValid']     = false;
        $reasons['46']['description'] = _M('Tipo/Número de inscrição do sacado inválido', $module);
        $reasons['47']['isValid']     = false;
        $reasons['47']['description'] = _M('Endereço do sacado não informado', $module);
        $reasons['48']['isValid']     = false;
        $reasons['48']['description'] = _M('CEP irregular', $module);
        $reasons['49']['isValid']     = false;
        $reasons['49']['description'] = _M('Número de inscrição do sacador/avalista inválido', $module);
        $reasons['50']['isValid']     = false;
        $reasons['50']['description'] = _M('Sacador/Avalista inválido', $module);
        $reasons['51']['isValid']     = false;
        $reasons['51']['description'] = _M('Movimento para título não cadastrado', $module);
        $reasons['52']['isValid']     = false;
        $reasons['52']['description'] = _M('Entrada para título já cadastrado', $module);
        $reasons['A']['isValid']      = true;
        $reasons['A']['description']  = _M('Aceito', $module);
        $reasons['D']['isValid']      = false;
        $reasons['D']['description']  = _M('Rejeito', $module);
        $reasons['A1']['isValid']     = false;
        $reasons['A1']['description'] = _M('Praça do sacado não registrada', $module);
        $reasons['A3']['isValid']     = false;
        $reasons['A3']['description'] = _M('Agência depositária divergente', $module);
        $reasons['A4']['isValid']     = false;
        $reasons['A4']['description'] = _M('Cedente não cadastrado ou com CGC/CIC inválido', $module);
        $reasons['A5']['isValid']     = false;
        $reasons['A5']['description'] = _M('Sacado não registrado', $module);
        $reasons['A6']['isValid']     = false;
        $reasons['A6']['description'] = _M('Data da instrução/ocorrência inválida', $module);
        $reasons['A8']['isValid']     = false;
        $reasons['A8']['description'] = _M('Liquidação recebida fora do BANSICREDI - por compensação eletrônica', $module);
        $reasons['A9']['isValid']     = false;
        $reasons['A9']['description'] = _M('Manutenção de título vencido', $module);
        $reasons['B1']['isValid']     = true;
        $reasons['B1']['description'] = _M('Baixa da carteira', $module);
        $reasons['B3']['isValid']     = true;
        $reasons['B3']['description'] = _M('Registro de entrada do título', $module);
        $reasons['B4']['isValid']     = false;
        $reasons['B4']['description'] = _M('Tipo de moeda inválido', $module);
        $reasons['B5']['isValid']     = false;
        $reasons['B5']['description'] = _M('Tipo de desconto/juros inválidos', $module);
        $reasons['B6']['isValid']     = false;
        $reasons['B6']['description'] = _M('Mensagem padrão não registada', $module);
        $reasons['B7']['isValid']     = false;
        $reasons['B7']['description'] = _M('Seu número inválido', $module);
        $reasons['B8']['isValid']     = false;
        $reasons['B8']['description'] = _M('Percentual de multa inválido', $module);
        $reasons['B9']['isValid']     = false;
        $reasons['B9']['description'] = _M('Percentual ou valor de juros inválido', $module);
        $reasons['C1']['isValid']     = false;
        $reasons['C1']['description'] = _M('Data limite para concessão de desconto inválido', $module);
        $reasons['C2']['isValid']     = false;
        $reasons['C2']['description'] = _M('Aceite do título inválido', $module);
        $reasons['C3']['isValid']     = false;
        $reasons['C3']['description'] = _M('Campo modificado na instrução "31 - Modificação de outros dados" inválido');
        $reasons['C4']['isValid']     = false;
        $reasons['C4']['description'] = _M('Título ainda não confirmado pela centralizadora', $module);
        $reasons['C5']['isValid']     = false;
        $reasons['C5']['description'] = _M('Título rejeitado pela centralizadora', $module);
        $reasons['C6']['isValid']     = false;
        $reasons['C6']['description'] = _M('Título já baixado', $module);
        $reasons['C7']['isValid']     = false;
        $reasons['C7']['description'] = _M('Título já liquidado', $module);
        $reasons['C8']['isValid']     = false;
        $reasons['C8']['description'] = _M('Existe mesma instrução pendente de confirmação para este título', $module);
        $reasons['C9']['isValid']     = false;
        $reasons['C9']['description'] = _M('Instrução prévia de concessão de abatimento não existe ou não confirmada', $module);
        $reasons['D1']['isValid']     = true;
        $reasons['D1']['description'] = _M('Título no prazo', $module);
        $reasons['D2']['isValid']     = false;
        $reasons['D2']['description'] = _M('Espécie de documento não permite protesto do título', $module);
        $reasons['D3']['isValid']     = false;
        $reasons['D3']['description'] = _M('Título possui instrução de baixa pendente de confirmação', $module);
        $reasons['D4']['isValid']     = false;
        $reasons['D4']['description'] = _M('Quantidade de mensagens padrão excede o limite permitido', $module);
        $reasons['D5']['isValid']     = false;
        $reasons['D5']['description'] = _M('Quantidade inválida no pedido de bloquetos pré-impressos da cobrança sem registro', $module);
        $reasons['D6']['isValid']     = false;
        $reasons['D6']['description'] = _M('Tipo de impressão inválida para cobrança sem registro', $module);
        $reasons['D7']['isValid']     = false;
        $reasons['D7']['description'] = _M('Cidade ou estado não informado', $module);
        $reasons['D8']['isValid']     = false;
        $reasons['D8']['description'] = _M('Sequência para composição do nosso número do ano atual esgotada', $module);
        $reasons['D9']['isValid']     = false;
        $reasons['D9']['description'] = _M('Registro mensagem (instruções para impressão no bloqueto de cobrança SEM registro) para título não cadastrado', $module);
        $reasons['E2']['isValid']     = false;
        $reasons['E2']['description'] = _M('Registro complementar para o cadastro do título da cobrança com registro não cadastrado', $module);
        $reasons['X1']['isValid']     = false;
        $reasons['X1']['description'] = _M('Regularização centralizadora - Rede BANSICREDI', $module);
        $reasons['X2']['isValid']     = false;
        $reasons['X2']['description'] = _M('Regularização centralizadora - Compensação', $module);
        $reasons['X3']['isValid']     = false;
        $reasons['X3']['description'] = _M('Regularização centralizadora - Banco correspondente', $module);

        return $reasons[$code] ? $reasons[$code] : _M('Não há código registrado', $module); 
    }

    /**
     * Occurrency without register
     *
     * @param $code: Code for occurrency
     *
     * @return: Array with description and message
     *          'reasons' -> containing reasons for this occurrency
     *          'description' -> Show a message description for this occurrency
     *
     */
    private function returnOccurrency($code)
    {
        $module = MIOLO::getCurrentModule();
        $occurrency['02']['reasons']     = '00, 17, 21, 45, 46, 47';
        $occurrency['02']['description'] = _M('Entrada confirmada', $module);
        $occurrency['02']['isValid']     = true;
        $occurrency['03']['reasons']     = '02, 03, 04, 05, 08, 09, 10, 16, 18, 20, 21, 22, 24, 38, 44, 50, 63, A1, A2, A3';
        $occurrency['03']['description'] = _M('Entrada rejeitada', $module);
        $occurrency['03']['isValid']     = false;
        $occurrency['06']['reasons']     = '00, A8';
        $occurrency['06']['description'] = _M('Liquidação normal', $module);
        $occurrency['06']['isValid']     = true;
        $occurrency['09']['reasons']     = '00, 10';
        $occurrency['09']['description'] = _M('Quitação automática por arquivo', $module);
        $occurrency['09']['isValid']     = true;
        $occurrency['10']['reasons']     = '00, 14';
        $occurrency['10']['description'] = _M('Quitação por instruções da agência', $module);
        $occurrency['10']['isValid']     = true;
        $occurrency['12']['reasons']     = '00';
        $occurrency['12']['description'] = _M('Abatimento concedido', $module);
        $occurrency['12']['isValid']     = true;
        $occurrency['13']['reasons']     = '00';
        $occurrency['13']['description'] = _M('Abatimento cancelado', $module);
        $occurrency['13']['isValid']     = false;
        $occurrency['14']['reasons']     = '00';
        $occurrency['14']['description'] = _M('Vencimento modificado', $module);
        $occurrency['14']['isValid']     = false;
        $occurrency['15']['reasons']     = '00';
        $occurrency['15']['description'] = _M('Liquidação no cartório', $module);
        $occurrency['15']['isValid']     = true;
        $occurrency['17']['reasons']     = '00, A8';
        $occurrency['17']['description'] = _M('Liquidação depois de quitação', $module);
        $occurrency['17']['isValid']     = true;
        $occurrency['19']['reasons']     = 'A, D';
        $occurrency['19']['description'] = _M('Confirmação de recebimento da instrução de protesto', $module);
        $occurrency['19']['isValid']     = false;
        $occurrency['20']['reasons']     = '00';
        $occurrency['20']['description'] = _M('Confirmação de recebimento da instrução de parada do processo', $module);
        $occurrency['20']['isValid']     = false;
        $occurrency['23']['reasons']     = '00';
        $occurrency['23']['description'] = _M('Registro do título no cartório', $module);
        $occurrency['23']['isValid']     = false;
        $occurrency['24']['reasons']     = '48';
        $occurrency['24']['description'] = _M('Registo rejeitado por CEP irregular', $module);
        $occurrency['24']['isValid']     = false;
        $occurrency['27']['reasons']     = '00, 07, 08, 10, 15, 40, 42, 60, A1';
        $occurrency['27']['description'] = _M('Quitação rejeitada', $module);
        $occurrency['27']['isValid']     = false;
        $occurrency['28']['reasons']     = '03, 04, 08, A9, B1, B3, E1';
        $occurrency['28']['description'] = _M('Tarifa', $module);
        $occurrency['28']['isValid']     = true;
        $occurrency['30']['reasons']     = '01, 05, 08, 15, 28, 29, 33, 34, 38, 39, 40, 60';
        $occurrency['30']['description'] = _M('Modificação rejeitada', $module);
        $occurrency['30']['isValid']     = false;
        $occurrency['32']['reasons']     = '01, 02, 04, 05, 07, 08, 10, 15, 16, 17, 21, 22, 24, 28, 29, 31, 33, 34, 36, 38, 39, 40, 41, 45, 46, 47, 60, A1, A2, A3, A4, A5, A6';
        $occurrency['32']['description'] = _M('Instrução rejeitada', $module);
        $occurrency['32']['isValid']     = false;
        $occurrency['33']['reasons']     = '00';
        $occurrency['33']['description'] = _M('Confirmação de pedido para a modificação de outros dados', $module);
        $occurrency['33']['isValid']     = false;
        $occurrency['34']['reasons']     = '00';
        $occurrency['34']['description'] = _M('Retirada do cartório e manutenção em carteira', $module);
        $occurrency['34']['isValid']     = false;

        return $occurrency[$code];
    }

    /**
     * Get the header and separate data in a array
     * 
     * @param: $data (string): Header string data
     *
     * @return: (array): Array containing string data
     *
     */
    private function header($data)
    {
        $header[] = substr($data, 0,   1);          // 001 a 001 - Identificação do registro header
        $header[] = substr($data, 1,   1);          // 002 a 002 - Identificação do arquivo retorno
        $header[] = substr($data, 2,   7);          // 003 a 009 - Literal RETORNO
        $header[] = substr($data, 9,  2);           // 010 a 011 - Código do serviço de cobrança
        $header[] = substr($data, 11,  15);         // 012 a 026 - Literal cobrança
        $header[] = substr($data, 26,  5);          // 027 a 031 - Código do Cedente
        $header[] = substr($data, 31,  14);         // 032 a 045 - CIC/CGC do cedente
        $header[] = substr($data, 45,  31);         // 046 a 076 - Filler (em branco)
        $header[] = substr($data, 76,  3);          // 077 a 079 - Número do Bansicredi == 748
        $header[] = substr($data, 79,  15);         // 080 a 094 - Literal Bansicredi 
        $header[] = substr($data, 94,  8);          // 095 a 102 - Data de gravação do arquivo
        $header[] = substr($data, 102, 8);          // 103 a 110 - Filler (em branco)
        $header[] = substr($data, 110, 7);          // 111 a 117 - Numero do retorno
        $header[] = substr($data, 117, 272);        // 118 a 389 - Filler (em branco)
        $header[] = substr($data, 389, 5);          // 390 a 394 - Versão do sistema
        $header[] = substr($data, 394, 6);          // 395 a 400 - Número sequencial do registro
        return $header;
    }

    /**  
     * Get the header
     * 
     * @param: $data (array): Array of strings to extract information
     *
     * @return: (array): Bidimensional array containing the information separated in each field and line
     *
     */
    private function detailsWithoutRegister($data)
    {
        if ( is_array($data) )
        {
            $seq = 0;
            foreach ( $data as $d )
            {
                // Verifica tipo de cobrança
                if ( substr($d, 13,  1) == 'A' )
                {
                    $details[$seq][] = substr($d, 0,   1);              // 001 a 001 - Identificação do registro detalhe
                    $details[$seq][] = substr($d, 1,   12);             // 002 a 013 - Filler (em branco)
                    $details[$seq][] = substr($d, 13,  1);              // 014 a 014 - Tipo de cobrança
                    $details[$seq][] = substr($d, 14,  5);              // 015 a 019 - Código do sacado na Agência Cedente
                    $details[$seq][] = substr($d, 19,  5);              // 020 a 024 - Código do sacado junto ao cliente
                    $details[$seq][] = substr($d, 24,  23);             // 025 a 047 - Filler (em branco)
                    $details[$seq][] = substr($d, 47,  15);             // 048 a 062 - Nosso numero do bansicredi sem edição
                    $details[$seq][] = substr($d, 62,  46);             // 063 a 108 - Filler (em branco)
                    $details[$seq][] = substr($d, 108, 2);              // 109 a 110 - Ocorrência
                    $details[$seq][] = substr($d, 110, 6);              // 111 a 116 - Data da ocorrência (DDMMAA)
                    $details[$seq][] = substr($d, 116, 10);             // 117 a 126 - Seu número
                    $details[$seq][] = substr($d, 126, 20);             // 127 a 146 - Filler (em branco)
                    $details[$seq][] = substr($d, 146, 6);              // 147 a 152 - Data de vencimento
                    $details[$seq][] = substr($d, 152, 13);             // 153 a 165 - Valor do título
                    $details[$seq][] = substr($d, 165, 9);              // 166 a 174 - Filler
                    $details[$seq][] = substr($d, 174, 1);              // 175 a 175 - Espécie de documento
                    $details[$seq][] = substr($d, 175, 13);             // 176 a 188 - Despesas de cobrança
                    $details[$seq][] = substr($d, 188, 13);             // 189 a 201 - Despesas de custas de protesto
                    $details[$seq][] = substr($d, 201, 26);             // 202 a 227 - Filler (em branco)
                    $details[$seq][] = substr($d, 227, 13);             // 228 a 240 - Abatimento concedido
                    $details[$seq][] = substr($d, 240, 13);             // 241 a 253 - Desconto concedido
                    $details[$seq][] = substr($d, 253, 13);             // 254 a 266 - Valor efetivamente pago
                    $details[$seq][] = substr($d, 266, 13);             // 267 a 279 - Juros de mora
                    $details[$seq][] = substr($d, 279, 13);             // 280 a 292 - Multa
                    $details[$seq][] = substr($d, 292, 2);              // 293 a 294 - Filler (em branco)
                    $details[$seq][] = substr($d, 294, 1);              // 295 a 295 - Somente para ocorrência "19"
                    $details[$seq][] = substr($d, 295, 23);             // 296 a 318 - Filler (em branco)
                    $detaiis[$seq][] = substr($d, 318, 10);             // 319 a 328 - Motivos de ocorrência
                    $details[$seq][] = substr($d, 328, 8);              // 329 a 336 - Data prevista para lançamento na conta corrente
                    $details[$seq][] = substr($d, 336, 58);             // 337 a 394 - Filler (em branco)
                    $details[$seq][] = substr($d, 394, 6);              // 395 a 400 - Número seqüencial do registro
                }
                elseif ( substr($d, 13, 1) == 'C' )
                {
                    $details[$seq][] = substr($d, 0,   1);              // 001 a 001 - Identificação do registro detalhe
                    $details[$seq][] = substr($d, 1,   12);             // 002 a 013 - Filler (em branco)
                    $details[$seq][] = substr($d, 13,  1);              // 014 a 014 - Tipo de cobrança
                    $details[$seq][] = substr($d, 14,  5);              // 015 a 019 - Código do sacado na Agência Cedente
                    $details[$seq][] = substr($d, 19,  5);              // 020 a 024 - Código do sacado junto ao cliente
                    $details[$seq][] = substr($d, 24,  23);             // 025 a 047 - Filler (em branco)
                    $details[$seq][] = substr($d, 47,  9);              // 048 a 056 - Nosso numero do bansicredi sem edição
                    $details[$seq][] = substr($d, 56,  52);             // 057 a 108 - Filler (em branco)
                    $details[$seq][] = substr($d, 108, 2);              // 109 a 110 - Ocorrência
                    $details[$seq][] = substr($d, 110, 6);              // 111 a 116 - Data da ocorrência (DDMMAA)
                    $details[$seq][] = substr($d, 116, 10);             // 117 a 126 - Seu número
                    $details[$seq][] = substr($d, 126, 26);             // 127 a 152 - Filler (em branco)
                    $details[$seq][] = substr($d, 152, 13);             // 153 a 165 - Valor do titulo
                    $details[$seq][] = substr($d, 165, 75);             // 166 a 240 - Filler (em branco)
                    $details[$seq][] = substr($d, 240, 13);             // 241 a 253 - Desconto concedido
                    $details[$seq][] = substr($d, 253, 13);             // 254 a 266 - Valor efetivamente pago
                    $details[$seq][] = substr($d, 266, 13);             // 267 a 279 - Juros de mora
                    $details[$seq][] = substr($d, 279, 13);             // 280 a 292 - Multa
                    $details[$seq][] = substr($d, 292, 26);             // 293 a 318 - Filler (em branco)
                    $details[$seq][] = substr($d, 318, 2);              // 319 a 320 - Motivo da ocorrência
                    $details[$seq][] = substr($d, 320, 8);              // 321 a 328 - Filler (em branco)
                    $details[$seq][] = substr($d, 328, 8);              // 329 a 336 - Data de lançamento na Conta corrente (AAAAMMDD)
                    $details[$seq][] = substr($d, 336, 58);             // 337 a 394 - Filler (em branco)
                    $details[$seq][] = substr($d, 394, 6);              // 395 a 400 - Numero sequencial do registro
                }
                $seq++;
            }
        }
        return $details;
    }

    /**  
     * Get the trailer
     * 
     * @param: $data (string): String to process the trailer
     *
     * @return: (array): Bidimensional array containing the information separated in each field and line
     *
     */
    private function trailer($data)
    {
        $trailer[] = substr($data, 0,  1);              // 001 a 001 - Identificação do registro trailer
        $trailer[] = substr($data, 1,  1);              // 002 a 002 - Identificação do arquivo retorno
        $trailer[] = substr($data, 2,  3);              // 003 a 005 - Numero do BANSICREDI
        $trailer[] = substr($data, 5,  5);              // 006 a 010 - Código do cedente
        $trailer[] = substr($data, 10, 384);            // 011 a 394 - Filler (em branco)
        $trailer[] = substr($data, 94, 6);              // 395 a 400 - Número sequencial do registro

        return $trailer;
    }

    /** 
     * Get the main data and process this (separate header, detais and trailer)
     *
     * @param: $data (array): Array of string to extract information
     *
     * @return (object): Object containing separated data information
     *
     */
    private function breakString($data)
    {
        $data = explode(chr(hexdec("\X0D\X0A")), $data);
        if ( is_array($data) )
        {
            $dataBreak->header  = $data[0];
            $dataBreak->trailer = $data[count($data)-2];
            
            for ( $count = 1;  $count<count($data)-2; $count++ )
            {
                $dataBreak->details[] = $data[$count];
            }
        }
        else
        {
            return false;
        }
        return $dataBreak;
    }

    /**
     * get the file content
     *
     * @param: $fileName: string with filename
     *
     * @return (string): String containing the file content
     *
     */
    private function getFileContent($fileName)
    {
        return file_get_contents(SAGU::getParameter('BASIC', 'UPLOAD_PATH').$fileName);
    }

    /**
     * get the file information and process
     *
     * @param: $fileId: identification of file
     *
     * @return (object): Object containning file information
     *
     */
    private function getFileInformation($fileId) 
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $businessFile = new BusinessBasicBusFile();
        $dataFile = $businessFile->getFile($fileId);
        $dataFile_ = $this->threatFileInformation($dataFile->fileName);
        $dataFile->fileInformation = $dataFile_;
        return $dataFile;
    }

    /**
     * threat file information
     *
     * @param $dataFile (string): File name
     *
     * @return: File information
     *
     */
    private function threatFileInformation($dataFile)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $data[0] = substr($dataFile, 0, 5);
        $DAta[1] = substr($dataFile, 5, 1);
        $data[2] = substr($dataFile, 6, 2);
        $data[3] = substr($dataFile, 9, 3);

        // Verify if return extension is correct
        if ( strtoupper($data[3]) == 'CRT' )
        {
            return $data;
        }
        else
        {
            $this->errors[] = _M('O arquivo não contém a extensão correta. Por favor envie um arquivo com a extensão correta. Obrigado.', $module);
        }
        return false;
    }

    /**
     * Import the return file to database
     *
     * @param: $data: string to break and analyze
     *
     * @return (boolean): True if succeed, otherwise false
     */
    public function ReturnFEBRABANInvoice748($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $fileInformation = $this->getFileInformation($data->fileId);
        if ( $fileInformation == false )
        {
            return false;
        }
        $data = $this->getFileContent($data->fileId);

        if ( strlen($data)>0 )
        {
            $dataBreak = $this->breakString($data);
            $header    = $this->header($dataBreak->header);
            $trailer   = $this->trailer($dataBreak->trailer);
            $details   = $this->detailsWithoutRegister($dataBreak->details);
        }
        else
        {
            $this->errors[] = _M('O arquivo está vazio', $module);
        }

        if ( $this->processDetails($details, $fileInformation) )
        {

        }
    }

    /**
     * Process the file data and update local information
     *
     * @param: $data: Data to process (previously created by specific functions)
     *
     * @return (boolean): True if succeed, otherwise false
     *
     */
    function parseDetails($data)
    {
        $module = MIOLO::getCurrentModule();
        if ( is_array($data) )
        {
            $c = 0;
            foreach ( $data as $d )
            {
                // Verify if this is a Detail register (verificar se este é um tipo de registro detalhe)...
                if ( $d[0] == 1 )
                {
                    // Type (with or without register)
                    $info[$c][0] = trim($d[2]);      // Com ou sem registro
                    $info[$c][1] = trim($d[3]);      // Código do sacado da agência
                    $info[$c][2] = trim($d[4]);      // Código do sacado no cliente
                    $info[$c][3] = trim($d[6]);      // Nosso número (bansicredi) sem edição
                    $info[$c][4] = trim($d[8]);      // Ocorrência
                    $info[$c][5] = trim($d[9]);      // Data ocorrência
                    $info[$c][6] = trim($d[10]);     // Seu número
                    
                    if ( $d[2] == 'C' )
                    {
                        $info[$c][7]  = trim($d[12]);     // Valor do título
                        $info[$c][8]  = trim($d[14]);     // Desconto concedido
                        $info[$c][9]  = trim($d[15]);     // Valor pago
                        $info[$c][10] = trim($d[16]);     // Juros de mora
                        $info[$c][11] = trim($d[17]);     // Multa
                        $info[$c][12] = trim($d[19]);     // Motivo da ocorrência
                        $info[$c][13] = trim($d[21]);     // Data de lançamento na conta corrente
                        $info[$c][14] = trim($d[23]);     // Numero sequencial do registro local
                    }
                    elseif ( $d[2] == 'A' )
                    {
                        $info[$c][7]  = trim($d[12]);     // Data de vencimento
                        $info[$c][8]  = trim($d[13]);     // Valor do título
                        $info[$c][9]  = trim($d[15]);     // Espécie de documento
                        $info[$c][10] = trim($d[16]);     // Despesas de cobrança
                        $info[$c][11] = trim($d[17]);     // Despesas de protesto
                        $info[$c][12] = trim($d[19]);     // Abatimento concedido
                        $info[$c][13] = trim($d[20]);     // Desconto concedido
                        $info[$c][14] = trim($d[21]);     // Valor efetivamente pago
                        $info[$c][15] = trim($d[22]);     // Juros de mora
                        $info[$c][16] = trim($d[23]);     // Multa
                        $info[$c][17] = trim($d[25]);     // Ocorrência 19 - mais informações
                        $info[$c][18] = trim($d[27]);     // Motivos ocorrência
                        $info[$c][19] = trim($d[28]);     // Data prevista lançamento na conta corrente
                        $info[$c][20] = trim($d[29]);     // Numero sequencial do registro
                    }
                }
                $c++;
            }
        }
        else
        {
            $this->errors[] = _M('Erro no processamento do arquivo', $module);
        }
        return $info;
    }
    
    /**
     * Parse the parameters for invoice
     *
     * @param: $data array containing data to parse
     *
     * @return: Parsed information
     */
    function parseEntryData($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $businessInvoice = new BusinessFinanceBusInvoice();
        $dataInvoice     = $businessInvoice->getInvoiceIdBySagu1InvoiceId($data[0]);
        if ( strlen($dataInvoice)>0 )
        {
            $data[0] = $dataInvoice;
        }
        $info = ereg_replace('[^0-9]{1,}', '', $data[0]);
        if ( strlen($info) != strlen($data[0]) )
        {
            $this->invoice->error[$data[6]] = _M('ERRO: Linha @1, o título não existe.', $module, $data[6]);
            $arg = 0;
        }
        else
        {
            $arg = $businessInvoice->getCostCenterByInvoiceId($data[0]);
        }

        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $businessInvoice = new BusinessFinanceBusInvoice();
        $args[] = $data[0];
        $args[] = $data[1];
        $args[] = SAGU::toDefaultDate($data[2], 'yyyymmdd');
        $args[] = $data[3]>0 ?  $this->adjustValue($data[3]) : 0;
        $args[] = $arg;
        $args[] = $data[4];
        $args[] = 'FALSE';
        return $args;
    }

    /**
     * Get SQLs and process functions
     *
     * @param: (array) $data: Array containing processed invoice file information
     *
     * @return: true if succeed otherwise false
     *
     */
    function processDetails($data, $dataFile)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $data = $this->parseDetails($data);
        
        if ( is_array($data) )
        {
            $businessDefaultOperations = new BusinessFinanceBusDefaultOperations();
            $defaultOperations = $businessDefaultOperations->getDefaultOperations();

            $c = 0;
            $gd1c = 0;
            $gd2c = 0;
            $gd3c = 0;
            foreach ( $data as $d )
            {
                $this->process->occurrency[$c] = $this->returnOccurrency($d[4]);

                //
                //  Parse payments
                // 
                if ( $this->process->occurrency[$c]['isValid'] == true )
                {
                    // Verify if that is a tax
                    if ( $d[4] == '28' ) 
                    {
                        if ( $d[0] == 'A' )
                        {
                            if ( $this->adjustValue($d[14] != SAGU::formatNumber(0)) )
                            {
                                $args = array( $d[6],
                                               $defaultOperations->paymentOperation,
                                               $d[18],
                                               $d[14],
                                               ' Return file '.$dataFile->fileName.' on '.date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')).'.',
                                               'FALSE',
                                               $c );
 
                                $args = $this->parseEntryData($args);
                                $this->process->sqlTariff[$gd3c] = $args;
                            }

                            $this->process->gridData3[$gd3c][] = $d[6];
                            $this->process->gridData3[$gd3c][] = $this->adjustValue($d[8]);
                            $this->process->gridData3[$gd3c][] = $this->adjustValue($d[13]);
                            $this->process->gridData3[$gd3c][] = $this->adjustValue($d[14]);
                            $this->process->gridData3[$gd3c][] = $this->adjustValue($d[15]);
                            $this->process->gridData3[$gd3c][] = $this->adjustValue($d[16]);
                            $this->process->gridData3[$gd3c][] = $this->process->occurrency[$c]['description'];
                            $this->process->gridData3[$gd3c][] = $d[3];
                            $this->process->gridData3[$gd3c][] = SAGU::toDefaultDate($d[5], 'ddmmyy');
                            $gd3c++;
                        }

                        if ( $d[0] == 'C' )
                        {
                            if ( $this->adjustValue($d[15] != SAGU::formatNumber(0)) )
                            {
                                $args = array( $d[6],
                                               $defaultOperations->paymentOperation,
                                               $d[13],
                                               $d[15],
                                               'Return file '.$dataFile->fileName.' on '.date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')).'.',
                                               'FALSE',
                                               $c );

                                $args = $this->parseEntryData($args);
                                $this->process->sqlTariff[$gd3c] = $args;
                            }

                            $this->process->gridData3[$gd3c][] = $d[6];
                            $this->process->gridData3[$gd3c][] = $this->adjustValue($d[7]);
                            $this->process->gridData3[$gd3c][] = $this->adjustValue($d[8]);
                            $this->process->gridData3[$gd3c][] = $this->adjustValue($d[9]);
                            $this->process->gridData3[$gd3c][] = $this->adjustValue($d[10]);
                            $this->process->gridData3[$gd3c][] = $this->adjustValue($d[11]);
                            $this->process->gridData3[$gd3c][] = $this->process->occurrency[$c]['description'];
                            $this->process->gridData3[$gd3c][] = $d[3];
                            $this->process->gridData3[$gd3c][] = SAGU::toDefaultDate($d[5], 'ddmmyy');
                            $gd3c++;
                        }
                    }

                    // With or without register
                    elseif ( $d[0] == 'A' )
                    {
                        if ( $this->adjustValue($d[14] != SAGU::formatNumber(0)) )
                        {
                            $args = array( $d[6],
                                           $defaultOperations->paymentOperation,
                                           $d[18],
                                           $d[14],
                                           ' Return file '.$dataFile->fileName.' on '.date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')).'.',
                                           'FALSE',
                                           $c );

                            $args = $this->parseEntryData($args);
                            $this->process->sql[$c] = $args;
                            $this->process->invoice[$c] = $d[6];
                        }

                        // Despesas de cobrança
                        if ( (strlen($d[10])>0) & ($this->adjustValue($d[10]) != SAGU::formatNumber(0)) )
                        {
                            $args = array( $d[6],
                                           $defaultOperations->interestOperation,
                                           $d[5],
                                           $d[10],
                                           'Return file '.$dataFile->fileName.' on '.date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')).'.',
                                           'FALSE',
                                           $c );

                            $args = $this->parseEntryData($args);
                            $this->process->sqlXtra[$c][] = $args;
                            $this->process->invoiceXtra[$c][] = $d[6];
                        }

                        // Despesas de protesto
                        if ( (strlen($d[11])>0) & ($this->adjustValue($d[11]) != SAGU::formatNumber(0)) )
                        {
                            $args = array( $d[6],
                                           $defaultOperations->interestOperation,
                                           $d[5],
                                           $d[11],
                                           'Return file '.$dataFile->fileName.' on '.date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')).'.',
                                          'FALSE',
                                           $c );

                            $args = $this->parseEntryData($args);
                            $this->process->sqlXtra[$c][] = $args;
                            $this->process->invoiceXtra[$c][] = $d[6];
                        }

                        // Abatimento concedido
                        if ( (strlen($d[12])>0) & ($this->adjustValue($d[12]) != SAGU::formatNumber(0)) )
                        {
                            $args = array( $d[6],
                                           $defaultOperations->discountOperation,
                                           $d[5],
                                           $d[12],
                                           'Return file '.$dataFile->fileName.' on '.date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')).'.',
                                           FALSE,
                                           $c );

                            $args = $this->parseEntryData($args);
                            $this->process->sqlXtra[$c][] = $args;
                            $this->process->invoiceXtra[$c][] = $d[6];
                        }

                        // Desconto concedido
                        if ( (strlen($d[13])>0) & ($this->adjustValue($d[13]) != SAGU::formatNumber(0)) )
                        {
                            $args = array( $d[6],
                                           $defaultOperations->discountOperation,
                                           $d[5],
                                           $d[13],
                                           'Return file '.$dataFile->fileName.' on '.date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')).'.',
                                           FALSE,
                                           $c );

                            $args = $this->parseEntryData($args);
                            $this->process->sqlXtra[$c][] = $args;
                            $this->process->invoiceXtra[$c][] = $d[6];
                        }

                        // Juros de mora
                        if ( $this->adjustValue($d[15] != SAGU::formatNumber(0)) )
                        {
                            $args = array( $d[6],
                                           $defaultOperations->discountOperation,
                                           $d[5],
                                           $d[15],
                                           'Return file '.$dataFile->fileName,' on '.date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')).'.',
                                           FALSE,
                                           $c );
     
                            $args = $this->parseEntryData($args);
                            $this->process->sqlXtra[$c][] = $args;
                            $this->process->invoiceXtra[$c][] = $d[6];
                        }
                        // Get information to put on grid
                        $this->process->gridData1[$gd1c][] = $d[6];
                        $this->process->gridData1[$gd1c][] = $this->adjustValue($d[8]);
                        $this->process->gridData1[$gd1c][] = $this->adjustValue($d[13]);
                        $this->process->gridData1[$gd1c][] = $this->adjustValue($d[14]);
                        $this->process->gridData1[$gd1c][] = $this->adjustValue($d[15]);
                        $this->process->gridData1[$gd1c][] = $this->adjustValue($d[16]);
                        $this->process->gridData1[$gd1c][] = $this->process->occurrency[$c]['description'];
                        $this->process->gridData1[$gd1c][] = $d[3];
                        $this->process->gridData1[$gd1c][] = SAGU::toDefaultDate($d[5], 'ddmmyy');
                        $gd1c++;
                    }

                    // Without register
                    elseif ( $d[0] == 'C' )
                    {

                        // Default insert
                        $args = array( $d[6],
                                       $defaultOperations->paymentOperation,
                                       $d[13],
                                       $d[15],
                                       'Return file '.$dataFile->fileName.' on '.date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')).'.',
                                       'FALSE',
                                       $c );
                                  
                        $args = $this->parseEntryData($args);
                        $this->process->sql[$c] = $args;
                        $this->process->invoice[$c] = $d[6];

                        // Desconto concedido
                        if ( (strlen($d[8])>0) & ($this->adjustValue($d[8]) != SAGU::formatNumber(0)) )
                        {
                            $args = array( $d[6],
                                           $defaultOperations->discountOperation,
                                           $d[5],
                                           $d[8],
                                           'Return file '.$dataFile->fileName.' on '.date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')).'.',
                                           FALSE,
                                           $c );

                            $args = $this->parseEntryData($args);
                            $this->process->sqlXtra[$c][] = $args;
                            $this->process->invoiceXtra[$c][] = $d[6];
                        }

                        // Juros de mora
                        if ( (strlen($d[16])>0) & ($this->adjustValue($d[16] != SAGU::formatNumber(0))) )
                        {
                            $args = array( $d[6],
                                           $defaultOperations->discountOperation,
                                           $d[5],
                                           $d[16],
                                           'Return file '.$dataFile->fileName,' on '.date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')).'.',
                                           FALSE,
                                           $c );

                            $args = $this->parseEntryData($args);
                            $this->process->sqlXtra[$c][] = $args;
                            $this->process->invoiceXtra[$c][] = $d[6];
                        }

                        $this->process->gridData2[$gd2c][] = $d[6];
                        $this->process->gridData2[$gd2c][] = $this->adjustValue($d[7]);
                        $this->process->gridData2[$gd2c][] = $this->adjustValue($d[8]);
                        $this->process->gridData2[$gd2c][] = $this->adjustValue($d[9]);
                        $this->process->gridData2[$gd2c][] = $this->adjustValue($d[10]);
                        $this->process->gridData2[$gd2c][] = $this->adjustValue($d[11]);
                        $this->process->gridData2[$gd2c][] = $this->process->occurrency[$c]['description'];
                        $this->process->gridData2[$gd2c][] = $d[3];
                        $this->process->gridData2[$gd2c][] = SAGU::toDefaultDate($d[5], 'ddmmyy');
                        $gd2c++;
                    }
                }
                $c++;
            }
            $businessReturnFEBRABANInvoice748 = new BusinessFinanceBusReturnFEBRABANInvoice748();
            if ( $processInfo = $businessReturnFEBRABANInvoice748->processReturn($this->process) )
            {
                $this->processInfo = $processInfo;
                
                //
                // Put correct sagu2 invoice id on list
                //
                $businessInvoice = new BusinessFinanceBusInvoice();
                foreach ( $this->process->gridData1 as $key => $d1 )
                {
                    $dataInvoice     = $businessInvoice->getInvoiceIdBySagu1InvoiceId($d1[0]);
                    if ( strlen($dataInvoice)>0 )
                    {
                        $this->processInfo->gridData1[$key][0] = $dataInvoice;
                    }
                    $this->process->gridData1[$key][] = $this->processInfo->data[$key]['isProcessed'];
                }
                $this->processInfo->gridData1 = $this->process->gridData1;

                //
                foreach ( $this->process->gridData2 as $key => $d2 )
                {
                    $dataInvoice     = $businessInvoice->getInvoiceIdBySagu1InvoiceId($d2[0]);
                    if ( strlen($dataInvoice)>0 )
                    {
                        $this->process->gridData2[$key][0] = $dataInvoice;
                    }
                    $this->process->gridData2[$key][] = $this->processInfo->data[$key]['isProcessed'];
                }

                $this->processInfo->gridData2 = $this->process->gridData2;

                //
                foreach ( $this->process->gridData3 as $key => $d3 )
                { 
                    $dataInvoice     = $businessInvoice->getInvoiceIdBySagu1InvoiceId($d3[0]);
                    if ( strlen($dataInvoice)>0 )
                    {
                        $this->process->gridData3[$key][0] = $dataInvoice;
                    }
                    $this->process->gridData3[$key][] = $this->processInfo->data[$key]['isProcessed'];
                }
                $this->processInfo->gridData3 = $this->process->gridData3;
            }
        }
    }
}
?>
