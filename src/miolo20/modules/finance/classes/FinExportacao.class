<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Types cobranca bancaria
 *
 * @author Nataniel Ingor da Silva [nataniel@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Nataniel Ingor da Silva [nataniel@solis.com.br]
 *
 * @since
 * Class created on 14/08/2013
 */
$MIOLO = MIOLO::getInstance();
$MIOLO->uses( 'classes/FinExportacaoAtributos.class', 'finance' );


class FinExportacao
{
    /**
     *
     * @int id da opção de exportação
     */
    public $exportacaoId;    
    /**
     *
     * @var noome da opção de exportação
     */
    public $nome;
    /**
     *
     * @var noome da opção de exportação
     */
    public $atributos;
    /*
     * 
     * @array vetor que recebe os dados 
     */
    public $linhas;
    /*
     * 
     * @var nome do arquivo a ser gerado 
     */
    public $nomeArquivo;
    
    
    public function __construct($filtros=null)
    {
        $this->retornaNomeArquivo($filtros);
        $this->obterAtributos();
        $this->retornaArquivo($this->obterDados($filtros));
        return true;
    }
    
    public function obterAtributos()
    {
        return null;
    }
    
    public function obterDados($filtros=null)
    {
        return null;
    }
    
    public function retornaNomeArquivo($filtros=null)
    {
        
    }
    
    public function retornaArquivo($array)
    {
        if(count($array)>0 && (is_array($this->atributos)))//verifica se tem dados no array
        {
            $linhas = array(); 
            //array com dados das pessoas
            foreach($array as $posicao => $valor )
            {
                $linhas[$posicao] = array();
                
                //array com atributos dos campos
                foreach($this->atributos as $coluna => $info)
                {  
                    $linhas2 = $info->nome;
                    if($info->valorFixo != null) //verifica se existe um valor predeterminado para aquele campo do atributo
                    {
                        $linhas[$posicao][$coluna] = $info->valorFixo;
                    }
                    else //se não existe, é colocado o valor obtido dos dados da pessoa
                    {
                        $linhas[$posicao][$coluna] = $valor[$info->nome];
                    } 
                    
                    if($info->tamanho !== null)
                    {
                        //verficar se o tamanho dos dados são compatíveis com o tamanho atribuido aos campos 
                        if(strlen($linhas[$posicao][$coluna]) > $info->tamanho)
                        {
                            $linhas[$posicao][$coluna] = substr($linhas[$posicao][$coluna], '0',$info->tamanho);
                        }
                        $linhas[$posicao][$coluna] =  str_pad($linhas[$posicao][$coluna], $info->tamanho, $info->preenchimento, $info->alinhamento); 
                    }  
                }
            }                
            $linhas2 = array();
            foreach ($linhas as $linha) 
            {
                $linhas2[] = implode('', $linha);
            }
            $str = implode("\n", $linhas2);
            
            $MIOLO = MIOLO::getInstance();
            $busFile = $MIOLO->getBusiness( 'basic', 'BusFile' );
            $busFile = new BusinessBasicBusFile();
            $fileId = $busFile->insertFileFromBuffer($str, $this->nomeArquivo);
            $busFile->getFileAsDownload($fileId);
        }
        else
        {
            if(!is_array($this->atributos))
            {
                throw new Exception('Por favor verifique as configurações de importações!');                
            }
            if(count($array)<1)
            {
                throw new Exception('Não foi encontrado os dados a serem processados, por favor verifique os filtros de importação!');
            }
        }
   }
       
        
           
      
}

?>