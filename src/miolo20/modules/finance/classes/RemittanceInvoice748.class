<?php
 /**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This class generates the remittance invoice file for BANSICREDI, following the rules of FEBRABAN document
 *
 * @author: William Prigol Lopes [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 14/06/2006
 *
 **/
$MIOLO->getClass('finance', 'DefaultFormat');
$MIOLO->getClass('finance', 'ReceivableInvoiceFEBRABAN748');

/**
 * Class to generate the bank remittance
 */
class remittanceInvoice748
{
    private $sequenceCode;
    private $receivableInvoiceFEBRABAN;
    private $keepGoing = true;

   /**
    * Return the correctly file name
    *
    * @param: $transferorCode (string):  Transferor code bank (needed to generate the file)
    *
    * @return (string): string containing the file name for remittance
    *
    */
    private function returnFileName($transferorCode)
    {
        $monthCode = $this->returnMonthCode(date("m"));
        $dayNumber = date("d");
        return strToUpper($transferorCode.$monthCode.$dayNumber.'.CRM');
    }

   /**
    * Return the correct month code (Baseed on defaults of BANSICREDI documentation in 2003/September
    *
    * @param $month (string): String containing the month code to return
    *
    * @return (string): String containing the correct month code
    *
    */
    private function returnMonthCode($month)
    {
        switch ( $month )
        {
            case 01:
                return '1';
                break;
            case 02:
                return '2';
                break;
            case 03:
                return '3';
                break;
            case 04:
                return '4';
                break;
            case 05:
                return '5';
                break;
            case 06:
                return '6';
                break;
            case 07:
                return '7';
                break;
            case 08:
                return '8';
                break;
            case 09:
                return '9';
                break;
            case 10:
                return 'O';
                break;
            case 11:
                return 'N';
                break;
            case 12:
                return 'D';
                break;
            default:
                return false;
        }
    }

    /**
     * Generate the header remittance data
     *
     * @param $data (object): Data information for header information
     *
     * @return (string): String containing the header formatted
     *
     */
    private function header($data)
    {
        $dataCompany     = $this->business->getCompanyData(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));
        $dataLegalPerson = $this->business->getLegalPerson($dataCompany->personId);
        $dataBankAccount = $this->business->getBankAccountData($data->bankAccountId);

        $dataLegalPerson->cnpj = SAGU::returnOnlyNumbers($dataLegalPerson->cnpj);
        // Variable treatment
        $data->transferorCode       = str_pad($dataBankAccount->transferorCode, 5,  '0', STR_PAD_LEFT);
        $data->assignorData         = str_pad($dataLegalPerson->cnpj,         14, '0', STR_PAD_LEFT);
        $data->remittanceSequenceId = str_pad($data->sequenceFile,            7,  '0', STR_PAD_LEFT);
        $this->sequenceCode         = str_pad(1,                              6,  '0', STR_PAD_LEFT);
        $filler1 = DefaultFormat::formatField(' ', 'A', 31);
        $filler2 = DefaultFormat::formatField(' ', 'A', 8);
        $filler3 = DefaultFormat::formatField(' ', 'A', 273);

        // VARIABLE - POSITION  - DESCRIPTION
        // 001 a 001 - Identificação do registro Header
        $header[] = DefaultFormat::formatField('0', 'N', 1);
        // 002 a 002 - Identificação do arquivo remessa
        $header[] = DefaultFormat::formatField('1', 'N', 1);
        // 003 a 009 - Literal 'REMESSA'
        $header[] = DefaultFormat::formatField('REMESSA', 'A', 7);
        // 010 a 011 - Código do serviço de cobrança
        $header[] = DefaultFormat::formatField('01', 'N', 2);
        // 012 a 026 - Literal 'COBRANCA'
        $header[] = DefaultFormat::formatField('COBRANCA', 'A', 15);
        // 027 a 031 - Código do cedente
        $header[] = DefaultFormat::formatField($data->transferorCode, 'N', 5);
        // 032 a 045 - CIC/CGC do cedente
        $header[] = DefaultFormat::formatField($data->assignorData, 'A', 14);
         // 046 a 076 - Filler (em branco)
        $header[] = $filler1;
        // 077 a 079 - Numero do BANSICREDI (Definido pelo Banco Central do Brasil)
        $header[] = DefaultFormat::formatField(748, 'N', 3);
        // 080 a 094 - Literal 'BANSICREDI'
        $header[] = DefaultFormat::formatField('BANSICREDI', 'A', 15);
        // 095 a 102 - Data de gravação do arquivo (YYYYMMDD)
        $header[] = date("Ymd");
        // 103 a 110 - Filler (em branco)
        $header[] = $filler2;
        // 111 a 117 - Número da remessa
        $header[] = DefaultFormat::formatField($data->remittanceSequenceId, 'N', 7);
        // 118 a 390 - Filler (em branco)
        $header[] = $filler3;
        // 391 a 394 - Versão do sistema (o ponto deve ser colocado)
        $header[] = '1.00';
        // 395 a 400 - Numero sequencial do registro
        $header[] = DefaultFormat::formatField($this->sequenceCode, 'N', 6);

        $header = strToUpper(SAGU::stringToASCII(implode($header, '')));
        return $header;
    }

   /**
    * Generate the details remittance data
    *
    * @param $data (object): Data information for header information
    *
    * @return (string): String containing the header formatted
    *
    */
    private function detailsRegister($data)
    {
        $MIOLO     = MIOLO::getInstance();
        $module    = MIOLO::getCurrentModule();
        $details[] = DefaultFormat::formatField('1', 'N', 1);

        switch ( $data->collectionType )
        {
            // SEM REGISTRO
            case '2':
            {
                $filler1  = DefaultFormat::formatField(' ', 'A', 14);
                $filler2  = DefaultFormat::formatField(' ', 'A', 28);
                $filler3  = DefaultFormat::formatField(' ', 'A', 1 );
                $filler4  = DefaultFormat::formatField(' ', 'A', 13);
                $filler5  = DefaultFormat::formatField(' ', 'A', 10);
                $filler6  = DefaultFormat::formatField(' ', 'A', 12);
                $filler7  = DefaultFormat::formatField(' ', 'A', 9 );
                $filler9  = DefaultFormat::formatField(' ', 'A', 1 );
                $filler10 = DefaultFormat::formatField(' ', 'A', 4 );
                $filler11 = DefaultFormat::formatField(' ', 'A', 26);
                $filler12 = DefaultFormat::formatField(' ', 'A', 1 );
                $filler13 = DefaultFormat::formatField(' ', 'A', 1 );
                $filler14 = DefaultFormat::formatField(' ', 'A', 28);

                // 002 a 002 - Tipo de cobrança - "C" -> Sem registro
                $details[] = DefaultFormat::formatField('C', 'N', 1);
                // 003 a 016 - Filler (em branco)
                $details[] = $filler1;
                // 017 a 017 - Tipo de Moeda (A == Real)
                $details[] = DefaultFormat::formatField('A', 'A', 1);
                // 018 a 018 - Tipo de desconto (B == percentual)
                $details[] = DefaultFormat::formatField('B', 'A', 1);
                // 019 a 019 - Tipo de juros (B == percentual)
                $details[] = DefaultFormat::formatField('B', 'A', 1);
                // 020 a 047 - Filler (em branco)
                $details[] = $filler2;
                // 048 a 056 - Nosso numero
                if ( strlen($data->ourNumber) == 0 )
                {
                    $data->ourNumber = $this->receivableInvoiceFEBRABAN->generateBankInvoiceId($data, false);
                }
                $details[] = DefaultFormat::formatField($data->ourNumber, 'N', 9);
                unset($data->ourNumber);
                // 057 a 057 - Filler (em branco)
                $details[] = $filler3;
                // 058 a 058 - Tipo de impressão (B == impressão completa)
                $details[] = 'B';
                // 059 a 071 - Filler (em branco)
                $details[] = $filler4;
                // 072 a 072 - Postagem do titulo
                // (S == Postar Titulo)
                // (N == Não postar e remeter ao cedente)
                $details[] = DefaultFormat::formatField($data->postInvoice, 'A', 1);
                // 073 a 083 - Filler (em branco)
                $details[] = $filler5;
                // 084 a 094 - Valor de desconto
                $details[] = DefaultFormat::formatField('0', 'N', 10);
                // 095 a 098 - Multa por pagamento em atraso
                $details[] = DefaultFormat::formatField('0', 'N', 4);
                // 099 a 110 - Filler
                $details[] = $filler6;
                // 109 a 110 - Instrução
                // (01 == Cadastro de títulos)
                // (02 == Pedido de baixa)
                $details[] = DefaultFormat::formatField($data->instruction, 'N', 2);
                // 111 a 120 - Seu numero (nunca se repete)
                $details[] = DefaultFormat::formatField($data->yourNumber, 'N', 10);
                // 121 a 126 - Data de vencimento (DDMMAA)
                $details[] = DefaultFormat::formatField($data->maturityDate, 'N', 6);
                // 127 a 139 - Valor principal do título
                $details[] = DefaultFormat::formatField($data->mainInvoiceValue, 'N', 13);
                // 140 a 148 - Filler (em branco)
                $details[] = $filler7;
                // 149 a 149 - Espécie de documento (F == cobrança seriada)
                $details[] = DefaultFormat::formatField('F', 'A', 1);
                // 150 a 150 - Filler (em branco)
                $details[] = $filler9;
                // 151 a 156 - Data de emissão (DDMMAA)
                $details[] = DefaultFormat::formatField(date('dmy'), 'N', 6);
                // 157 a 160 - Filler (em branco)
                $details[] = $filler10;
                // 161 a 173 - Valor/% de juros por dia de atraso
                $details[] = DefaultFormat::formatField('0', 'N', 13);
                // 174 a 179 - Data limite para concessão de desconto (Não usado)
                $details[] = DefaultFormat::formatField('0', 'N', 6);
                // 180 a 192 - Valor/% do desconto (Não utilizado)
                $details[] = DefaultFormat::formatField('0', 'N', 13);
                // 193 a 218 - Filler (em branco)
                $details[] = $filler11;
                // 219 a 219 - Tipo de pessoa do sacado (1 == Fisica) (2 == Juridica)
                $details[] = $data->personType;
                // 220 a 220 - Filler (em branco)
                $details[] = $filler12;
                // 221 a 234 - CIC/CGC do sacado
                $details[] = DefaultFormat::formatField($data->personDocument, 'N', 14);
                // 235 a 270 - Nome do sacado (Dividido pelo Sagu)
                // 235 a 264 - Nome da pessoa 
                $details[] = DefaultFormat::formatField(SAGU::getShortenName($data->personName, 35), 'A', 34);
                // 265 a 270 - Código do aluno
                $details[] = DefaultFormat::formatField($data->personId, 'N', 6);
                // 271 a 310 - Endereço do sacado
                $details[] = DefaultFormat::formatField($data->personAddress, 'A', 40);
                // 311 a 315 - Código do sacado na agência do cedente
                $details[] = DefaultFormat::formatField($data->personAgencyCode, 'N', 5);
                // 316 a 322 - Código da praça do sacado
                $details[] = DefaultFormat::formatField(strlen($data->square)>0 ? $data->square : DEFAULT_SQUARE, 'N', 6);
                // 323 a 323 - Filler (em branco)
                $details[] = $filler13;
                // 324 a 331 - CEP do sacado
                $details[] = DefaultFormat::formatField($data->zipCode, 'N', 8);
                // 331 a 355 - Cidade do sacado
                $details[] = DefaultFormat::formatField($data->personCity, 'A', 25);
                // 355 a 356 - Estado do sacado
                $details[] = DefaultFormat::formatField($data->personState, 'A', 2);
                // 357 a 361 - Código do sacado junto ao cliente (Não usado)
                $details[] = DefaultFormat::formatField('0', 'N', 5);
                // 362 a 394 - Filler (em branco)
                $details[] = $filler14;
                // 394 a 400 - Numero sequencial do registro
                $details[] = DefaultFormat::formatField($this->sequenceCode, 'N', 6);

                $detailsMain[] = strToUpper(SAGU::stringToASCII(implode($details, '')));
                unset($details);
                break;
            }

            // COM REGISTRO
            case '3':
            {
                $filler1 = DefaultFormat::formatField(' ', 'A', 13);
                $filler2 = DefaultFormat::formatField(' ', 'A', 16);
                $filler3 = DefaultFormat::formatField(' ', 'A', 1 );
                $filler4 = DefaultFormat::formatField(' ', 'A', 12);
                $filler5 = DefaultFormat::formatField(' ', 'A', 9 );
                $filler6 = DefaultFormat::formatField(' ', 'A', 13);
                $filler7 = DefaultFormat::formatField(' ', 'A', 27);
                $filler8 = DefaultFormat::formatField(' ', 'A', 28);

                // 002 a 002 - Tipo de cobrança - "A" -> Com registro
                $details[] = DefaultFormat::formatField('A', 'A', 1 );
                // 003 a 003 - Tipo de carteira - 'A' - Simples
                $details[] = DefaultFormat::formatField('A', 'A', 1 );
                // 004 a 016 - Filler (em branco)
                $details[] = $filler1;
                // 017 a 017 - Tipo de Moeda (A == Real)
                $details[] = DefaultFormat::formatField('A', 'A', 1 );
                // 018 a 018 - Tipo de desconto (B == percentual)
                $details[] = DefaultFormat::formatField('B', 'A', 1 );
                // 019 a 019 - Tipo de juros (B == percentual)
                $details[] = DefaultFormat::formatField('B', 'A', 1 );
                // 020 a 022 - Código da primeira Mensagem para bloqueto
                $details[] = DefaultFormat::formatField('0', 'N', 3 );
                // 023 a 025 - Código da segunda Mensagem para bloqueto
                $details[] = DefaultFormat::formatField('0', 'N', 3 );
                // 026 a 028 - Código da terceira Mensagem para bloqueto
                $details[] = DefaultFormat::formatField('0', 'N', 3 );
                // 029 a 031 - Código da quarta Mensagem para bloqueto
                $details[] = DefaultFormat::formatField('0', 'N', 3 );
                // 032 a 047 - Filler (em branco)
                $details[] = $filler2;
                // 048 a 062 - Nosso numero
                if ( strlen($data->ourNumber) == 0 )
                {
                    $data->ourNumber = $this->receivableInvoiceFEBRABAN->generateBankInvoiceId($data, false);
                }

                $details[] = DefaultFormat::formatField($data->ourNumber, 'A', 15);
                unset($data->ourNumber);
                // 063 a 070 - Data da instrução - Formato aaaammdd
                $details[] = DefaultFormat::formatField(date('Ymd'), 'N', 8);
                // 071 a 071 - Filler (em branco)
                $details[] = $filler3;
                // 072 a 072 - Postagem do titulo
                // (S == Postar Titulo)
                // (N == Não postar e remeter ao cedente)
                $details[] = DefaultFormat::formatField($data->postInvoice, 'A', 1);
                // 073 a 073 - Protestar com valor atualizado
                $details[] = DefaultFormat::formatField('S', 'A', 1);
                // 074 a 074 - Pedido de impressão para o Banco
                $details[] = DefaultFormat::formatField('A', 'A', 1);
                // 075 a 082 - Número de parcelas do carnê (Não utilizado)
                $details[] = DefaultFormat::formatField(' ', 'A', 8);
                // 083 a 092 - Valor de desconto por dia de antecipação (Não utilizado)
                $details[] = DefaultFormat::formatField('0', 'N', 9);
                // 093 a 096 - Valor/% de juros 
                $details[] = DefaultFormat::formatField($data->lateFine, 'N', 5);
                // 097 a 108 - Filler (em branco)
                $details[] = $filler4;
                // 109 a 110 - Instrução
                // (01 == Cadastro de títulos)
                // (02 == Pedido de baixa)
                $details[] = DefaultFormat::formatField($data->instruction, 'N', 2);
                // 111 a 120 - Seu numero (nunca se repete)
                $details[] = DefaultFormat::formatField($data->yourNumber, 'N', 10);
                // 121 a 126 - Data de vencimento
                $details[] = DefaultFormat::formatField($data->maturityDate, 'N', 6);
                // 127 a 139 - Valor do título
                $details[] = DefaultFormat::formatField($data->mainInvoiceValue, 'N', 13);
                // 140 a 148 - Filler (em branco)
                $details[] = $filler5;
                // 149 a 149 - Espécie de documento
                $details[] = DefaultFormat::formatField('A', 'A', 1); 
                // 150 a 150 - Aceite do título
                $details[] = DefaultFormat::formatField(SAGU::getParameter('FINANCE', 'FLAG_DEFAULT_REMITTANCE_ACCEPTED_748'), 'A', 1);
                // 151 a 156 - Data de emissão (formato dmy)
                $details[] = DefaultFormat::formatField(date('dmy'), 'A', 6);
                // 157 a 158 - Tipo de protesto (06 = Protesto automático)
                $details[] = DefaultFormat::formatField('06', 'N', 2);
                // 159 a 160 - Dias para protesto
                $details[] = DefaultFormat::formatField($data->daysToProtest, 'N', 2);
                // 161 a 173 - Valor (%*100) por dia de atraso
                $details[] = DefaultFormat::formatField($data->fineValue, 'N', 13);
                // 174 a 179 - Data limite concessão desconto
                $details[] = DefaultFormat::formatField($data->maturityDate, 'N', 6);
                // 180 a 192 - Valor (%*100) do desconto
                $details[] = DefaultFormat::formatField($data->discountValue, 'N', 13);
                // 193 a 205 - Filler (em branco)
                $details[] = $filler6;
                // 206 a 218 - Valor (%*100) do abatimento - Não utilizado
                $details[] = DefaultFormat::formatField( 0, 'N', 13);
                // 219 a 219 - Tipo de pessoa
                $details[] = DefaultFormat::formatField($data->personType, 'N', 1);
                // 220 a 220 - Filler (zero)atField($data->personType, 'N', 1);
                $details[] = DefaultFormat::formatField('0', 'N', 1);
                // 221 a 234 - CPF/CGC do sacado
                $details[] = DefaultFormat::formatField($data->personDocument, 'N', 14);
                // 235 a 274 - Nome do sacado
                $details[] = DefaultFormat::formatField($data->personName, 'A', 40);
                // 275 a 314 - Endereço do sacado
                $details[] = DefaultFormat::formatField($data->personAddress, 'A', 40);
                // 315 a 319 - Código do sacado na agência (não utilizado)
                $details[] = DefaultFormat::formatField('0', 'N', 5);
                // 320 a  325 - Código da praça do sacado
                $details[] = DefaultFormat::formatField(strlen($data->square)>0 ? $data->square : DEFAULT_SQUARE, 'N', 6);
                // 326 a 326  - Filler (em branco)
                $details[] = DefaultFormat::formatField(' ', 'A', 1);
                // 327 a 334 - CEP do sacado
                $details[] = DefaultFormat::formatField($data->zipCode, 'N', 8);                
                // 335 a 361 - Filler (em branco)
                $details[] = $filler7;
                // 362 a 366 - Código do sacado junto ao cliente (não utilizado)
                $details[] = DefaultFormat::formatField('0', 'N', 5);
                // 367 a 393 - Filler (em branco)
                $details[] = $filler8;
                // 394 a 400 - Numero sequencial do registro
                $details[] = DefaultFormat::formatField($this->sequenceCode, 'N', 6);

                // Register on invoice the send date information

                $detailsMain[] = strToUpper(SAGU::stringToASCII(implode($details, '')));
                unset($details);
                break;
            }
        }

        // This system support detailed information about entries, adding one line per 4 entries on file
        // Following the rules... we present... the code below...
        $entryData = $this->business->returnEntryInformation($data->invoiceId);

        if ( (is_array($entryData[0])) && ($this->keepGoing) )
        {
            if ( SAGU::getParameter('FINANCE', 'EXTRA_MESSAGE_FOR_REMITTANCE_INVOICE748') )
            {
                $entryData[] = array(SAGU::getParameter('FINANCE', 'EXTRA_MESSAGE_FOR_REMITTANCE_INVOICE748'), '', '');
            }
            foreach ( $entryData as $keyE => $entry )
            {
                $keyE++;
                if ( ! is_array($details) )
                {
                    // 001 a 001 - Identificação do tipo de registro - 5 = Informativo
                    $details[] = DefaultFormat::formatField('5', 'N', 1);
                    // 002 a 002 - Tipo de informativo "E"
                    $details[] = DefaultFormat::formatField('E', 'A', 1);
                    // 003 a 007 - Código do cedente
                    $details[] = DefaultFormat::formatField($data->transferorCode, 'N', 5);
                    // 008 a 017 - Código do título
                    $details[] = DefaultFormat::formatField($data->invoiceId, 'N', 9);
                    // 018 a 018 - Filler (em branco)
                    $details[] = DefaultFormat::formatField(' ', 'A', 2);
                    // 019 a 019 - Tipo de cobrança (?)
                    $details[] = DefaultFormat::formatField('B', 'A', 1);
                    // 020 a 394 - Mensagens...
                }
                // Mensagens Tamanho 83
                // 000 a 002 - Identificação (número da mensagem)
                $details[] = DefaultFormat::formatField($keyE, 'N', 2);
                $entry[1]  = SAGU::formatNumber($entry[1]);
                // 003 a 082 - Mensagem com valor descritivo
                $message   = DefaultFormat::formatField($entry[0].(strlen($entry[2])>0 ? '/'.$entry[2] : ''), 'A', 80-strlen($entry[1]));
                $details[] = $message.$entry[1];
                if ( ($keyE % 4) == 0 )
                {
                    $this->sequenceCode++;
                    $det = $details;
                    unset($details);
                    $details[] = DefaultFormat::formatField(strToUpper(SAGU::stringToASCII(implode($det, ''))), 'A', 394);
                    // 395 a 400 - Número sequencial do registro
                    $details[]     = DefaultFormat::formatField($this->sequenceCode, 'N', 6);
                    $detailsMain[] = strToUpper(SAGU::stringToASCII(implode($details, '')));
                    unset($details);
                }
            }
            if ( ($keyE % 4) != 0 )
            {
                $this->sequenceCode++;
                $det = $details;
                unset($details);
                // Pega a string completa e preenche para juntar com o numero sequencial
                $details[]     = DefaultFormat::formatField(strToUpper(SAGU::stringToASCII(implode($det, ''))), 'A', 394);
                // 395 a 400 - Número sequencial do registro
                $details[]     = DefaultFormat::formatField($this->sequenceCode, 'N', 6);
                $detailsMain[] = strToUpper(SAGU::stringToASCII(implode($details, '')));
                unset($details);
            }
        }
        $this->keepGoing = $this->business->registerRemittanceInvoice($data->invoiceId);
        $detailsMain     = implode($detailsMain, "\n");
        return $detailsMain;
    }

   /**
    * Generate the global messages for system
    *
    * @param $data (object): Data information for global message information
    *
    * @return (string): String containing the message formatted
    *
    */
    private function messageRegister($data)
    {
        $data->bankInvoiceId = $this->business->returnBankInvoiceId($data->invoiceId);

        // Fillers
        $filler1   = Defaultformat::formatField(' ', 'A', 11);    
        // 001 a 001 - Identificação do registro informativo
        $message[] = DefaultFormat::formatField('2', 'N', '1');
        // 002 a 012 - Filler (em branco)
        $message[] = $filler1;
        // 013 a 021 - Identificação do título
        $message[] = DefaultFormat::formatField($data->bankInvoiceId, 'N', 9);
        $messages  = $this->business->listMessages($data);

        foreach ( $messages as $keyE => $mess )
        {
            $keyE++;
            $message[] = DefaultFormat::formatField($mess[0], 'A', 80);
            if ( ($keyE % 4) == 0 )
            {
                $this->sequenceCode++;
                $mes = $message;
                unset($message);
                $message[] = DefaultFormat::formatField(strToUpper(SAGU::stringToASCII(implode($mes, ''))), 'A', 394);
                // 395 a 400 - Número sequencial do registro
                $message[]     = DefaultFormat::formatField($this->sequenceCode, 'N', 6);
                $messageMain[] = strToUpper(SAGU::stringToASCII(implode($message, '')));
                unset($message);
            }
        }
        if ( ($keyE % 4) != 0 )
        {
            $this->sequenceCode++;
            $mes = $message;
            unset($message);
            $message[]     = DefaultFormat::formatField(strToUpper(SAGU::stringToASCII(implode($mes, ''))), 'A', 394);
            // 395 a 400 - Número sequencial do registro
            $message[]     = DefaultFormat::formatField($this->sequenceCode, 'N', 6);
            $messageMain[] = strToUpper(SAGU::stringToASCII(implode($message, '')));
            unset($message);
        }
        $messageMain = implode($messageMain, "\n");        
        return $messageMain;
    }

    /**
     * Generate the message remittance data
     *
     * @param $data (object): Data information for header information
     *
     * @return (string): String containing the header formatted
     *
     */
    private function trailer($data)
    {
        $data->transferorCode = str_pad($data->transferorCode, 5, '0', STR_PAD_LEFT);
        $this->sequenceCode   = str_pad($this->sequenceCode, 6, '0', STR_PAD_LEFT);

        // VARIABLE 
        // 001 a 001 - Identificação do registro trailer
        $trailer[] = DefaultFormat::formatField('9', 'N', 1);
        // 002 a 002 - Identificação do arquivo remessa
        $trailer[] = DefaultFormat::formatField('1', 'N', 1);
        // 003 a 005 - Numero do BANSICREDI (Definido pelo Banco Central do Brasil)
        $trailer[] = DefaultFormat::formatField('748', 'N', 3);
        // 006 a 010 - Código do cedente
        $trailer[] = DefaultFormat::formatField($data->transferorCode, 'N', 5);
        // 011 a 394 - Filler (em branco)
        $trailer[] = DefaultFormat::formatField(' ', 'A', 384);
        // 395 a 400 - Numero sequencial do registro
        $trailer[] = DefaultFormat::formatField($this->sequenceCode, 'N', 6);
        $trailer   = strToUpper(SAGU::stringToASCII(implode($trailer, '')));

        return $trailer;
    }

    /**
     * Generate the message remittance data
     *
     * @param $data (object): Data information for header information
     *
     * @return (string): String containing the header formatted
     *
     */
    public function remittanceInvoice748($data)
    {
        $this->receivableInvoiceFEBRABAN = new ReceivableInvoiceFEBRABAN748();

        set_time_limit(0);

        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        // Get bank remittance information
        $this->business     = new BusinessFinanceBusRemittanceInvoice748();
        $this->business->beginTransaction();
        $this->sequenceCode = 1;

        // Generate the header
        $fileData[] = $this->header($data);

        $dataReceivableInvoice = $this->business->listReceivableInvoiceToBankRemittance($data);
        // If have titles return the detail mode
        if ( is_array($dataReceivableInvoice[0]) )
        {
            // 006 a 010 - Código do cedente
            $businessBankAccount        = new BusinessFinanceBusBankAccount();
            $dataBankAccount            = $businessBankAccount->getBankAccount($data->bankAccountId);
            $dataDetail->transferorCode = $dataBankAccount->transferorCode;

            // Dias para protesto
            $businessPersonDocument = new BusinessBasicBusDocument();
            foreach ( $dataReceivableInvoice as $dri )
            {
                $this->sequenceCode++;
                $dataPerson = $this->business->getLegalPerson($dri[1]);
                if ( strlen($dataPerson->name)>0 )
                {
                    $dataPerson->personType = '2';
                    $dataPersonDocument = $businessPersonDocument->getDocument($dri[1], SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CGC'));
                    $dataDetail->documentTypeId = SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CGC');
                }
                else
                {
                    $dataPerson = $this->business->getPhysicalPerson($dri[1]);
                    $dataPerson->personType = '1';
                    $dataPersonDocument = $businessPersonDocument->getDocument($dri[1], SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF'));
                    $dataDetail->documentTypeId = SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF');
                }
                $dataCity = $this->business->getCity($dataPerson->cityId);
                // Dias para protesto
                $dataDetail->daysToProtest          = $dri[18];
                // Tipo de carteira
                $dataDetail->collectionType         = $dri[12];
                // Código da pessoa
                $dataDetail->personId               = $dri[1];
                // Postagem do titulo
                // (S == Postar Titulo)
                // (N == Não postar e remeter ao cedente)
                $dataDetail->postInvoice            = $data->isPostInvoice == '1' ? 'S' : 'N';
                // Número da parcela do carnê
                $dataDetail->invoiceParcel          = ' ';
                // Número total de parcelas do carnê
                $dataDetail->invoiceTotalParcel     = ' ';
                // Valor de desconto por dia de antecipação
                $dataDetail->antecipationDiscount   = '0000000000';
                // Multa por pagamento em atraso (%) Feito X 100 para colocar o valor sem quebra numérica
                $dataDetail->lateFine               = (int)SAGU::calcNumber($dri[14].'*100');
                // Seu numero (nunca se repete)
                $dataDetail->yourNumber             = $dri[0];
                // Data de vencimento (DDMMAA)
                $dataDetail->maturityDate           = SAGU::formatDate($dri[4], 'ddmmyy');
                // Valor principal do título
                $dataDetail->mainInvoiceValue       = trim($dri[5]);
                // Data de emissão (DDMMAA)
                $dataDetail->emissionDate           = SAGU::formatDate(date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')), 'ddmmyy');
                // Valor/% de juros por dia de atraso
                // Faz a porcentagem dividindo por 30 dias o juro mensal
                $dataDetail->fineValue              = SAGU::calcNumber('(('.$dri[14].'::float/30::float)*100)::int');
                // Data limite para concessão de desconto
                $dataDetail->discountLimitDate      = SAGU::formatDate($dri[4], 'ddmmyy');
                // Valor/% do desconto
                $dataDetail->discountValue          = SAGU::calcNumber( $dri[15].' * 100 ');
                // Tipo de pessoa do sacado (1 == Fisica) (2 == Juridica)
                $dataDetail->personType             = $dataPerson->personType;
                // CIC/CGC do sacado
                $dataDetail->personDocument         = $dataPersonDocument->content;
                // Nome do sacado
                $dataDetail->personName             = $dataPerson->name;
                // Endereço do sacado
                $dataDetail->personAddress          = $dataPerson->location.' - '.$dataPerson->complement;
                // Código do sacado na agência do cedente
                $dataDetail->personAgencyCode       = '00000';
                // Código da praça do sacado
                $dataDetail->square                 = $dri[9];
                // CEP do sacado
                $dataDetail->zipCode                = $dataPerson->zipCode;
                // Cidade do sacado
                $dataDetail->personCity             = $dataCity->name;
                // Estado do sacado
                $dataDetail->personState            = $dataCity->stateId;
                // Número do título
                $dataDetail->invoiceId              = $dri[0];
                // Data da instrução
                $dataDetail->instructionDate        = date("Ymd");
                // Tipo de instrução
                $dataDetail->instruction            = $data->instruction;
                // Juros mensais
                $dataDetail->monthlyInterestPercent = $dri[14];
                // Nosso número
                $dataDetail->ourNumber              = $dri[11];

                // Add formatted information
                $fileData[] = $this->detailsRegister($dataDetail);
                $this->keepGoing = $this->business->registerRemittanceToInvoice($data->invoiceId);

                // Código do título (para obter código do banco
                $dataMessage->invoiceId              = $dri[0];
                // Tipo de mensagem
                $dataMessage->messagesType           = $data->messagesType;
                // Valor da multa
                $dataMessage->fineValue              =  SAGU::calcNumber($dri[14].'*('. $dri[19] .'/100 )', true);
                // Tipo de carteira
                $dataMessage->collectionTypeId       = $dri[12];
                // Código do banco
                // (Este código é padrão para este arquivo, caso modificado, 
                //  necessita mudança em toda a estrutura de remessas deste banco)
                $dataMessage->bankId                 = '748';
                // Valor do desconto
               // $dataMessage->discountValue          = SAGU::calcNumber($dri[15].'*('.  $dri[5] . '/ 100)');
                $dataMessage->discountValue          = SAGU::calcNumber( $dri[15] . '* ( ' . $dri[19] .'/ 100) ', true);
                //$dataMessage->discountValue          = SAGU::calcNumber($dri[15].'::float*100::float');
                // Data limite para desconto
                $dataMessage->daysToFine             = $dri[16];
                // Multa por pagamento em atraso (%)
                $dataMessage->lateFine               = SAGU::calcNumber($dri[13] . '.0000/ 30 * ( '. $dri[19] .'/ 100)', true);

                $url = $MIOLO->getActionURL($module, 'main', null, array('event'=>'btnSearch_click', 'invoiceId'=>$dataDetail->invoiceId));
                $invoiceId = new MOpenWindow('invoice'.$dataDetail->invoiceId, $dataDetail->invoiceId, $url);

                $this->statisticsData->invoice[] = array( $invoiceId->generate(),
                                                          $dataDetail->personName,
                                                          SAGU::calcNumber($dataDetail->mainInvoiceValue.'/100', true),
                                                          $dri[17] );

                if ( in_array($dataMessage->collectionTypeId, explode(',', SAGU::getParameter('FINANCE', 'COLLECTIONS_CODES_TO_SEND_MESSAGES_REMITTANCE_INVOICE748'))) )
                {
                    $fileData[] = $this->messageRegister($dataMessage);
                }
            }

            $this->sequenceCode++;
            // 006 a 010 - Código do cedente
            $dataTrailer->transferorCode = $dataBankAccount->transferorCode;
            // 395 a 400 - Numero sequencial do registro
            $fileData[] = $this->trailer($dataTrailer);
            $fileDataC  = implode($fileData, "\n");

            //update the sequence file
            $ok = $businessBankAccount->updateBankAccountSequence($data->bankAccountId, $data->sequenceFile);

            $this->business->endTransaction($this->keepGoing);

            $businessFile = new BusinessFinanceBusFinFile();
            if ( $this->keepGoing )
            {
                // Detalhes do arquivo de remessa para gravação na finFile
                // Dados para Gravação e Output
                $dataFile->file          = $fileDataC;
                // Nome do arquivo conforme padrão cedido pelo banco
                $dataFile->fileName      = $this->returnFileName($dataBankAccount->transferorCode);
                // Conta bancária relacionada ao banco
                $dataFile->bankAccountId = $data->bankAccountId;
                // Tipo de arquivo
                $dataFile->fileType      = 'I';
                // Arquivo de saída (O = Output) == REMESSA
                $dataFile->inputOrOutput = 'O';
                // Foi processado -> Padrão Sim, quem processa este arquivo é o sistema.
                $dataFile->isProcessed   = DB_TRUE;
                // Código do arquivo gravado no sistema
                $dataFile        = $businessFile->insertFinanceFile($dataFile);
                // Salvar arquivos localmente
                saguFile::saveDataToLocal($dataFile);
                $this->statisticsData->fileId   = $dataFile->fileId;
                $this->statisticsData->fileData = $dataFile->file;
                $this->statisticsData->fileName = $dataFile->fileName;
            }
            else
            {
                $action = MIOLO::getCurrentAction();
                $MIOLO->error(_M('Erro ao gravar o arquivo no sistema.', $module), $MIOLO->getActionURL($module, $action));
            }
        }
        else
        {
            $action = MIOLO::getCurrentAction();
            return $MIOLO->error(_M('Nenhum título encontrado para gerar a remessa', $module), $MIOLO->getActionURL($module, $action));
        }
    }
}
?>
