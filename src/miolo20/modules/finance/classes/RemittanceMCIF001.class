<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *         Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 31/03/2006
 *
 **/


class RemittanceMCIF001
{

    function __construct()
    {
        $MIOLO    = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $MIOLO->getClass('finance', 'DefaultFormat');
    }

    /**
     * Get the header and separate data in a array
     * 
     * @param: $data (string): Header string data
     *
     * @return: (array): Array containing string data
     *
     */
    public function fileHeader($data=null)
    {

        $header[] = DefaultFormat::formatField('', 'N', 7);  // 6 Controle de sequencia
        $header[] = date(dmY);           // Data da remessa
        $header[] = 'MCIF460';                    //Registro
        $header[] = DefaultFormat::formatField('', 'A', 1);  //Branco
        $header[] = DefaultFormat::formatField(SAGU::getParameter('BASIC', 'CODE_MCI_001'),'N', 9); //Código MCI da empresa fornecido pelo banco SAGU::getParameter('BASIC', 'CODE_MCI_001') - 912686170
        $header[] = DefaultFormat::formatField(SAGU::getParameter('BASIC', 'PROCESS_NUMBER_FOR_MCI'), 'N', 5); //Número do processo fornecido pelo banco SAGU::getParameter('BASIC', 'PROCESS_NUMBER_FOR_MCI') - '49755'
        $header[] = DefaultFormat::formatField($data->sequence, 'N', 5); //sequencial

        $header[] = '03'; //versao do layout

        $header[] = DefaultFormat::formatField($data->branchNumber, 'N', 4, null, 'L'); //Agência

        $header[] = DefaultFormat::formatField($data->branchNumberDigit, 'N', 1); //DV agência

        $header[] = DefaultFormat::formatField($data->accountNumber, 'N', 11, null, 'L'); // C/C
        $header[] = DefaultFormat::formatField($data->accountNumberDigit, 'N', 1);// DV C/C
        $header[] = '1'; //Identificador de envio de kit ; 1 = agencia pagadora
        $header[] = DefaultFormat::formatField('', 'A', 88); //brancos

        return implode($header,'');
    }
    
    /**
     * Get the detail01 and separate data in a array
     * 
     * @param: $data (string): Header string data
     *
     * @return: (array): Array containing string data
     *
     */
    public function detail01($data=null)
    {
        $detail[] = DefaultFormat::formatField($data->sequence, 'N', 5);  //sequencial do cliente
        $detail[] = '01';   //Tipo de detalhe
        $detail[] = '1';    //Tipo de pessoa ; 1 = pessoa física
        $detail[] = '1';    //Tipo de cpf; 1 = cpf próprio
        $detail[] = DefaultFormat::formatField($data->cpf, 'N', 14);     //numero do cpf
        $detail[] = DefaultFormat::formatField(str_replace('/', '', $data->dateBirth), 'N', 8); //data de nascimento
        $detail[] = DefaultFormat::formatField($data->name, 'A', 60);    //nome
        $detail[] = DefaultFormat::formatField('', 'A', 25);    // nome personalizado (usado para pessoas juridicas)
        $detail[] = DefaultFormat::formatField('', 'A', 1);    // branco
        $detail[] = DefaultFormat::formatField($data->personId, 'A', 17);    //identificação para arquivo de retorno
        
        eval (' $parameter = DEFAULT_BANK_BRANCH_NUMBER_AND_DIGIT_' . $data->bankId . ';');

        $detail[] = DefaultFormat::formatField( $parameter , 'N', 5, null, 'L'); //agência mantenedora da conta do favorecido //dv da agência mantenedora da conta do favorecido
        $detail[] = '20'; //grupo setex, fornecido pelo banco
        $detail[] = '5'; //digito verifacador do setex
        $detail[] = DefaultFormat::formatField('', 'A', 8);    //branco
        
        return SAGU::stringToASCII(implode($detail,''));
    }

    /**
     * Get the detail02 and separate data in a array
     * 
     * @param: $data (string): Header string data
     *
     * @return: (array): Array containing string data
     *
     */
    public function detail02($data=null)
    {
        $detail[] = DefaultFormat::formatField($data->sequence, 'N', 5);  //sequencial do cliente
        $detail[] = '02';   //Tipo de detalhe
        $detail[] = DefaultFormat::formatField($data->sex, 'A', 1);     //Sexo
        $detail[] = DefaultFormat::formatField($data->country, 'N', 2); //Nacionalidade
        $detail[] = DefaultFormat::formatField($data->city, 'A', 25); //Naturalidade
        $detail[] = '20'; //Tipo de documento; 20 = RG
        $detail[] = DefaultFormat::formatField($data->rg, 'A', 20); //Número do documento
        $detail[] = DefaultFormat::formatField($data->rgOrgan, 'A', 15); //Órgão emissor
        $detail[] = DefaultFormat::formatField('', 'N', 8); //Data de emissão
        $detail[] = '01'; //estado civil ; 01 = solteiro
        $detail[] = '01'; //capacidade civil; 01 = capaz
        $detail[] = '000'; //formação
        $detail[] = '004'; //grau de instrução ; 004 = superior incompleto
        $detail[] = '010'; //Natureza da ocupação; 010 = bolsista ou estagiário
        $detail[] = '179'; //Ocupação ; 179 = estudante
        $detail[] = DefaultFormat::formatField('25000', 'N', 15); //Rendimento
        $detail[] = date(mY);
        $detail[] = DefaultFormat::formatField('', 'A', 33);    //branco
        return SAGU::stringToASCII(implode($detail,''));
    }

    /**
     * Get the detail03 and separate data in a array
     * 
     * @param: $data (string): Header string data
     *
     * @return: (array): Array containing string data
     *
     */
    public function detail03($data=null)
    {
        $detail[] = DefaultFormat::formatField($data->sequence, 'N', 5);  //sequencial do cliente
        $detail[] = '03';   //Tipo de detalhe
        $detail[] = DefaultFormat::formatField($data->motherName, 'A', 60); //Nome da mãe
        $detail[] = DefaultFormat::formatField($data->fatherName, 'A', 60); //Nome de pai
        $detail[] = DefaultFormat::formatField('', 'A', 23);    //branco
        return SAGU::stringToASCII(implode($detail,''));
    }
    
    /**
     * Get the detail05 and separate data in a array
     * 
     * @param: $data (string): Header string data
     *
     * @return: (array): Array containing string data
     *
     */
    public function detail05($data=null)
    {
        $detail[] = DefaultFormat::formatField($data->sequence, 'N', 5);  //sequencial do cliente
        $detail[] = '05';   //Tipo de detalhe
        $detail[] = '1';   //Contrato de trabalho
        $detail[] = '2';   //Tipo de empregador
        $detail[] = DefaultFormat::formatField($data->cnpj, 'N', 14); //CNPJ do empregador
        $detail[] = date(mY);
        $detail[] = DefaultFormat::formatField($data->companyName, 'A', 60); //Nome do empregador
        $detail[] = DefaultFormat::formatField($data->employeeType, 'A', 60); //Tipo de empregado
        $detail[] = DefaultFormat::formatField('6', 'A', 1);    // Nível do cargo - 6 = sem nível hierárquico.
        return SAGU::stringToASCII(implode($detail,''));
    }
    
    /**
     * Get the detail06 and separate data in a array
     * 
     * @param: $data (string): Header string data
     *
     * @return: (array): Array containing string data
     *
     */
    public function detail06($data=null)
    {
        $detail[] = DefaultFormat::formatField($data->sequence, 'N', 5);       //sequencial do cliente
        $detail[] = '06';                                                      //Tipo de detalhe
        $detail[] = DefaultFormat::formatField($data->location, 'A', 60);      //logradouro
        $detail[] = DefaultFormat::formatField($data->neighborhood, 'A', 30);  //bairro
        $detail[] = DefaultFormat::formatField($data->zipcode, 'N', 8);        //cep    098 - 105
        $detail[] = DefaultFormat::formatField('51', 'A', 4);                  //ddd
        $detail[] = DefaultFormat::formatField(str_replace(array('.', '-'), '', $data->phone), 'A', 9);  //telefone
        $detail[] = DefaultFormat::formatField('', 'N', 9);                    //Caixa postal   119-135
        $detail[] = DefaultFormat::formatField('0', 'N', 2);                    //Situação do imóvel
        $detail[] = DefaultFormat::formatField('0', 'N', 6);                    //Início da residência
        $detail[] = DefaultFormat::formatField('', 'A', 15);                   //Início da residência
        return SAGU::stringToASCII(implode($detail,''));
    }
    
    /**
     * Get the detail07 and separate data in a array
     * 
     * @param: $data (string): Header string data
     *
     * @return: (array): Array containing string data
     *
     */
    public function detail07($data=null)
    {
        $detail[] = DefaultFormat::formatField($data->sequence, 'N', 5);              //sequencial do cliente
        $detail[] = '07';                                                             //Tipo de detalhe
        $detail[] = DefaultFormat::formatField($data->companyLocation, 'A', 60);      //logradouro
        $detail[] = DefaultFormat::formatField($data->companyNeighborhood, 'A', 30);  //bairro
        $detail[] = DefaultFormat::formatField($data->companyZipcode, 'N', 8);        //cep
        $phone = explode(' ', $data->companyPhone );

        if(count($phone) == 2)
        {
            $ddd         = $phone[0];
            $phoneNumber = $phone[1];
        }
        else
        {
            $ddd         = '';
            $phoneNumber = $phone[0];
        }

        $detail[] = DefaultFormat::formatField($ddd, 'A', 4);        //ddd
        $detail[] = DefaultFormat::formatField(str_replace(array('.', '-'), '', $phoneNumber), 'A', 9);  //telefone
        $detail[] = DefaultFormat::formatField('', 'A', 20);         //ramal
        $detail[] = DefaultFormat::formatField('', 'N', 9);          //caixa postal   139-147
        $detail[] = DefaultFormat::formatField('', 'A', 3);         //Brancos            150
        return SAGU::stringToASCII(implode($detail,''));
    }
    
    /**
     * Get the trailer and separate data in a array
     * 
     * @param: $data (string): Header string data
     *
     * @return: (array): Array containing string data
     *
     */
    public function fileTrailer($data=null)
    {
        $trailer[] = '9999999';  //Identificacao de trailer
        $trailer[] = DefaultFormat::formatField($data->clients, 'N', 5); //Total de clientes
        $trailer[] = DefaultFormat::formatField($data->lines, 'N', 9); //Total de clientes
        $trailer[] = DefaultFormat::formatField('', 'A', 129); //Uso CNAB
                       
        return implode($trailer,'');
    }

}
?>
