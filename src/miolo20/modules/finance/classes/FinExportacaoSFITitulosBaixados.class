<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Types cobranca bancaria
 *
 * @author Nataniel Ingor da Silva [nataniel@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Nataniel Ingor da Silva [nataniel@solis.com.br]
 *
 * @since
 * Class created on 14/08/2013
 */
$MIOLO->uses( 'classes/FinExportacao.class', 'finance' );

class FinExportacaoSFITitulosBaixados extends FinExportacao
{
    const CAMPO_EMPRESA = 'empresa';
    const CAMPO_TITULO = 'titulo';
    const CAMPO_SEQUENCIA = 'sequencia';
    const CAMPO_CLIENTE = 'cliente';
    const CAMPO_TIPO_CLIENTE = 'tipoCliente';
    const CAMPO_HISTORICO = 'historico';
    const CAMPO_MOEDA = 'moeda';
    const CAMPO_EMISSAO = 'emissao';
    const CAMPO_VENCIMENTO = 'vencimento';
    const CAMPO_CONTA_RECEITA_1 = 'contaReceita1';
    const CAMPO_CENTRO_CUSTO_1 = 'centroCusto1';
    const CAMPO_CONTA_CONTABIL_1 = 'contaContabil1';
    const CAMPO_VALOR_1 = 'valor1';
    const CAMPO_CONTA_RECEITA_2 = 'contaReceita2';
    const CAMPO_CENTRO_CUSTO_2 = 'centroCusto2';
    const CAMPO_CONTA_CONTABIL_2 = 'contaContabil2';
    const CAMPO_VALOR_2 = 'valor2';
    const CAMPO_CONTA_RECEITA_3 = 'contaReceita3';
    const CAMPO_CENTRO_CUSTO_3 = 'centroCusto3';
    const CAMPO_CONTA_CONTABIL_3 = 'contaContabil3';
    const CAMPO_VALOR_3 = 'valor3';
    const CAMPO_CONTA_RECEITA_4 = 'contaReceita4';
    const CAMPO_CENTRO_CUSTO_4 = 'centroCusto4';
    const CAMPO_CONTA_CONTABIL_4 = 'contaContabil4';
    const CAMPO_VALOR_4 = 'valor4';
    const CAMPO_CONTA_RECEITA_5 = 'contaReceita5';
    const CAMPO_CENTRO_CUSTO_5 = 'centroCusto5';
    const CAMPO_CONTA_CONTABIL_5 = 'contaContabil5';
    const CAMPO_VALOR_5 = 'valor5';
    const CAMPO_CODIGO_VENDEDOR = 'codigoVendedor';
    const CAMPO_CONTA_CORRENTE = 'contaCorrente';
    const CAMPO_NATUREZA_OPERACAO = 'naturezaOperacao';
    const CAMPO_DATA_COBRANCA = 'dataCobranca';
    const CAMPO_TOTAL_PARCELA = 'totalParcela';
    const CAMPO_TIPO_TITULO = 'tipoTitulo';
    const CAMPO_DIAS_ATRASO = 'diasAtraso';
    const CAMPO_CAMPO_CONTA_RECEITA_ATIVO = 'contaReceitaAtivo';
    const CAMPO_CONTA_BANCO_COMPENSACAO = 'contaBancoCompensacao';
    const CAMPO_DATA_PAGAMENTO = 'dataPagamento';
    const CAMPO_VALOR_PAGO = 'valorPago';
    const CAMPO_DOCUMENTO = 'documento';
    const CAMPO_JURO = 'juro';
    const CAMPO_DESCONTO= 'desconto';    
    
    public function obterAtributos()
    {
      $this->atributos = array();  
      $this->atributos[0] = new FinExportacaoAtributos(null, '10', 'E', '1', ' '); // CAMPO_EMPRESA
      $this->atributos[1] = new FinExportacaoAtributos(self::CAMPO_TITULO, '13', 'E', null, '0');
      $this->atributos[2] = new FinExportacaoAtributos(null, '5', null, '00001'); // CAMPO_SEQUENCIA
      $this->atributos[3] = new FinExportacaoAtributos(self::CAMPO_CLIENTE, '5', 'E', null, '0'); 
      $this->atributos[4] = new FinExportacaoAtributos(null, '2', null, '07'); // CAMPO_TIPO_CLIENTE
      $this->atributos[5] = new FinExportacaoAtributos(null, '2', null, '31'); // CAMPO_HISTORICO
      $this->atributos[6] = new FinExportacaoAtributos(null, '5', 'D', 'R$ '); // CAMPO_MOEDA
      $this->atributos[7] = new FinExportacaoAtributos(self::CAMPO_EMISSAO, '8');
      $this->atributos[8] = new FinExportacaoAtributos(self::CAMPO_VENCIMENTO, '8');
      $this->atributos[9] = new FinExportacaoAtributos(self::CAMPO_CONTA_RECEITA_1, '5');
      $this->atributos[10] = new FinExportacaoAtributos(null, '5', null, '10702'); // CAMPO_CENTRO_CUSTO_1
      $this->atributos[11] = new FinExportacaoAtributos(self::CAMPO_CONTA_CONTABIL_1, '8');
      $this->atributos[12] = new FinExportacaoAtributos(self::CAMPO_VALOR_1, '17', 'E', null, '0' );
      $this->atributos[13] = new FinExportacaoAtributos(null, '5', null, '00000'); // CAMPO_CONTA_RECEITA_2
      $this->atributos[14] = new FinExportacaoAtributos(null, '5', null, '00000'); // CAMPO_CENTRO_CUSTO_2
      $this->atributos[15] = new FinExportacaoAtributos(null, '8', null, '00000000'); // CAMPO_CONTA_CONTABIL_2
      $this->atributos[16] = new FinExportacaoAtributos(null, '17', null, '00000000000000000'); // CAMPO_VALOR_2
      $this->atributos[17] = new FinExportacaoAtributos(null, '5', null, '00000'); // CAMPO_CONTA_RECEITA_3
      $this->atributos[18] = new FinExportacaoAtributos(null, '5', null, '00000'); // CAMPO_CENTRO_CUSTO_3
      $this->atributos[19] = new FinExportacaoAtributos(null, '8', null, '00000000'); // CAMPO_CONTA_CONTABIL_3
      $this->atributos[20] = new FinExportacaoAtributos(null, '17', null, '00000000000000000'); // CAMPO_VALOR_3
      $this->atributos[21] = new FinExportacaoAtributos(null, '5', null, '00000'); // CAMPO_CONTA_RECEITA_4
      $this->atributos[22] = new FinExportacaoAtributos(null, '5', null, '00000'); // CAMPO_CENTRO_CUSTO_4
      $this->atributos[23] = new FinExportacaoAtributos(null, '8', null, '00000000'); // CAMPO_CONTA_CONTABIL_4
      $this->atributos[24] = new FinExportacaoAtributos(null, '17', null, '00000000000000000'); // CAMPO_VALOR_4
      $this->atributos[25] = new FinExportacaoAtributos(null, '5', null, '00000'); // CAMPO_CONTA_RECEITA_5
      $this->atributos[26] = new FinExportacaoAtributos(null, '5', null, '00000'); // CAMPO_CENTRO_CUSTO_5
      $this->atributos[27] = new FinExportacaoAtributos(null, '8', null, '00000000'); // CAMPO_CONTA_CONTABIL_5
      $this->atributos[28] = new FinExportacaoAtributos(null, '17', null, '00000000000000000'); // CAMPO_VALOR_5
      $this->atributos[29] = new FinExportacaoAtributos(null, '5', null, '00000'); // CAMPO_CODIGO_VENDEDOR
      $this->atributos[30] = new FinExportacaoAtributos(self::CAMPO_CONTA_CORRENTE, '3', 'D', null, ' ');  
      $this->atributos[31] = new FinExportacaoAtributos(null, '1', null, '1'); // CAMPO_NATUREZA_OPERACAO
      $this->atributos[32] = new FinExportacaoAtributos(self::CAMPO_DATA_COBRANCA, '8');
      $this->atributos[33] = new FinExportacaoAtributos(self::CAMPO_TOTAL_PARCELA, '3');  
      $this->atributos[34] = new FinExportacaoAtributos(self::CAMPO_TIPO_TITULO, '1');
      $this->atributos[35] = new FinExportacaoAtributos(self::CAMPO_DIAS_ATRASO, '3');
      $this->atributos[36] = new FinExportacaoAtributos(self::CAMPO_CAMPO_CONTA_RECEITA_ATIVO, '8', 'D', null, ' ' );  
      $this->atributos[37] = new FinExportacaoAtributos(self::CAMPO_CONTA_BANCO_COMPENSACAO, '8', 'D', null, ' ');
      $this->atributos[38] = new FinExportacaoAtributos(self::CAMPO_DATA_PAGAMENTO, '8');
      $this->atributos[39] = new FinExportacaoAtributos(self::CAMPO_VALOR_PAGO, '17', 'E', null, '0');        
      $this->atributos[40] = new FinExportacaoAtributos(self::CAMPO_DOCUMENTO, '20', 'E', null, '0');        
      $this->atributos[41] = new FinExportacaoAtributos(self::CAMPO_JURO, '17', 'E', null, '0');
      $this->atributos[42] = new FinExportacaoAtributos(self::CAMPO_DESCONTO, '17', 'E', null, '0');
      
    }
     
    
    public function obterDados($filtros)
    {
        $sql ='SELECT A.invoiceid as titulo,    
                      A.personid as cliente,
                      TO_CHAR(A.emissiondate, \'YYYYMMDD\') AS emissao,
                      TO_CHAR(A.maturitydate, \'YYYYMMDD\') AS vencimento,
                      CASE WHEN A.incomesourceId = getParameter(\'FINANCE\', \'INCOME_SOURCE_ID\')::int THEN           
                      CASE WHEN EXTRACT(\'MONTH\' FROM C.entryDate) = EXTRACT(\'MONTH\' FROM A.maturitydate) 
			      AND EXTRACT(\'YEAR\' FROM C.entryDate) = EXTRACT(\'YEAR\' FROM A.maturitydate)
		           THEN 
		              \'1501\'
		      WHEN TO_DATE(EXTRACT(\'MONTH\' FROM C.entryDate)||\'/\'||EXTRACT(\'MONTH\' FROM C.entryDate),\'MM/YYYY\') > 
		           TO_DATE(EXTRACT(\'MONTH\' FROM A.maturitydate)||\'/\'||EXTRACT(\'MONTH\' FROM A.maturitydate),\'MM/YYYY\')		
		          THEN 
		              \'1502\'
		          ELSE 
		              \'1503\'		
                      END	
	                  ELSE 
	                       \'1511\'	
	              END as contaReceita1,	   
	              (CASE WHEN A.incomesourceId = getParameter(\'FINANCE\', \'INCOME_SOURCE_ID\')::int THEN \'31701\' ELSE \'31702\' END) AS contaContabil1,
	              (A.nominalvalue*100)::numeric(14,0) as valor1,
	              (CASE WHEN H.value IS NOT NULL THEN \'101\'
	              WHEN I.accountnumber = \'07498\' THEN \'1\'
	              WHEN I.accountnumber = \'5255\' THEN \'45\'
	              END) AS contaCorrente,
	              TO_CHAR(A.emissiondate, \'YYYYMMDD\') AS dataCobranca,
	              1 AS totalParcela, 
	              CASE WHEN A.incomesourceId = getParameter(\'FINANCE\', \'INCOME_SOURCE_ID\')::int THEN \'9\'
		      ELSE \'6\' END as tipoTitulo,
	              CASE WHEN G.value IS NOT NULL THEN C.entryDate-A.emissiondate END as diasAtraso, --Dias atraso
	              CASE WHEN A.incomesourceId = getParameter(\'FINANCE\', \'INCOME_SOURCE_ID\')::int THEN \'1130311\'
		      ELSE \'00000000\' END as contaReceitaAtivo,          
	              (CASE WHEN H.value IS NOT NULL THEN \'1110101\'
	              WHEN I.accountnumber = \'07498\' THEN \'1110201\'
	              WHEN I.accountnumber = \'5255\' THEN \'1110245\'
	              END) AS contaBancoCompensacao, 
	              TO_CHAR(C.entryDate, \'yyyymmdd\') AS dataPagamento,
	              (SUM(C.value*100) + (CASE WHEN SUM(J.value) IS NOT NULL THEN SUM(J.value*100) ELSE SUM(0) END) )::numeric(14,0) as valorPago,
	              A.invoiceid as documento, --Documento
	              (SUM(G.value*100))::numeric(14,0) as juros,
	              (SUM(E.value*100))::numeric(14,0) as desconto                      
                 FROM finreceivableInvoice A            
           INNER JOIN finEntry C ON A.invoiceid = C.invoiceId AND ( C.operationId IN (select unnest(string_to_array(getParameter(\'FINANCE\', \'PAYMENT_OPERATIONS\'), \',\')::int[])) OR C.operationId = ((select paymentoperation from findefaultoperations)) OR C.operationId = ((select bankclosingtaxoperation FROM findefaultoperations)) )
            LEFT JOIN finEntry E on A.invoiceid = E.invoiceid AND ( E.operationId = (select discountoperation from findefaultoperations) OR  E.operationId = (select otherdiscountsoperation from findefaultoperations) OR  E.operationId = getParameter(\'FINANCE\', \'DISCOUNT\')::INT )
            LEFT JOIN finEntry G ON G.invoiceid = A.invoiceid AND G.operationId = (SELECT interestoperation FROM findefaultoperations)
            LEFT JOIN finEntry J ON J.invoiceid = A.invoiceid AND J.operationId = (SELECT bankTaxOperation FROM findefaultoperations)
            LEFT JOIN finCounterMovement H ON H.invoiceid = A.invoiceid
            LEFT JOIN finBankAccount I ON I.bankAccountId = A.bankAccountId	
                WHERE A.balance = 0
                  AND A.iscanceled IS FALSE
                  AND EXTRACT(\'MONTH\' FROM C.entryDate) = ?
	          AND EXTRACT(\'YEAR\' FROM C.entryDate) = ?
                  
              group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17';
        
        $args = array( $filtros->month,
                       $filtros->year );
        
        $msql = new MSQL();
        $msql->setDb( SDatabase::getInstance() );
        $msql->createFrom($sql, $args);

        $return = SDatabase::queryAssociative($msql);
        return $return;
    }
    
    public function retornaNomeArquivo($filtros)
    {        
        $this->nomeArquivo = 'FB'.$filtros->month.$filtros->year.'.TXT';
    }
}



?>

