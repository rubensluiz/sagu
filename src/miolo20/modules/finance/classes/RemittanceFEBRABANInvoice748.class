<?php
 /**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This class generates the remittance invoice file for BANSICREDI, following the rules of FEBRABAN document
 *
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 14/06/2006
 *
 **/
 
/**
 * This file generates the remittance invoice file for BANSICREDI, following the rules of FEBRABAN document
 *
 * @author: William Prigol Lopes [william@solis.coop.br]
 * 
 * \b Maintainers: \n
 * Samuel Koch [samuel@solis.coop.br]
 *
 */
$MIOLO->getClass('finance', 'DefaultFormat');

/**
 * Class to generate the bank remittance
 */
class remittanceInvoice748
{

    /**
     * Return the correctly file name 
     *
     * @param: $transferorCode (string):  Transferor code bank (needed to generate the file
     *
     * @return (string): string containing the file name for remittance
     *
     */
    private function returnFileName($transferorCode)
    {
        $monthCode = $this->returnMonthCode(date("m"));
        $dayNumber = date("d");

        return strToUpper($transferorCode.$monthCode.$dayNumber.'.CRM');
    }

    /**
     * Return the correct month code (Baseed on defaults of BANSICREDI documentation in 2003/September
     * 
     * @param $month (string): String containing the month code to return
     *
     * @return (string): String containing the correct month code
     *
     */
    private function returnMonthCode($month)
    {
        switch ($month)
        {
            case 01:
                return 1;
                break;
            case 02:
                return 2;
                break;
            case 03:
                return 3;
                break;
            case 04:
                return 4;
                break;
            case 05:
                return 5;
                break;
            case 06:
                return 6;
                break;
            case 07:
                return 7;
                break;
            case 08:
                return 8;
                break;
            case 09:
                return 9;
                break;
            case 10: 
                return 'O';
                break;
            case 11:
                return 'N';
                break;
            case 12:
                return 'D';
                break;
            default:
                return false;
        }
    }
    
    /**
     * Generate the header remittance data
     * 
     * @param $data (object): Data information for header information
     *
     * @return (string): String containing the header formatted
     *
     */
    private function header($data)
    {
        // Variable treatment
        $data->transferorCode     = str_pad($data->transferorCode,                         5, '0', STR_PAD_LEFT);
        $data->assignorData       = str_pad(SAGU::returnOnlyNumbers($data->assignorData), 14, '0', STR_PAD_LEFT);
        $data->remittanceSequence = str_pad($data->remittanceSequence,                     7, '0', STR_PAD_LEFT);
        $data->sequenceCode       = str_pad($data->sequenceCode,                           6, '0', STR_PAD_LEFT); 
        $filler1 = str_pad(' ',  31, ' ');
        $filler2 = str_pad(' ',   8, ' ');
        $filler3 = str_pad(' ', 273, ' ');

        // VARIABLE                                    POSITION  - DESCRIPTION
        $header[] = '0';                            // 001 a 001 - Identificação do registro Header
        $header[] = '1';                            // 002 a 002 - Identificação do arquivo remessa
        $header[] = 'REMESSA';                      // 003 a 009 - Literal 'REMESSA'
        $header[] = '01';                           // 010 a 011 - Código do serviço de cobrança
        $header[] = 'COBRANCA       ';              // 012 a 026 - Literal 'COBRANCA'
        $header[] = $data->transferorCode;          // 027 a 031 - Código do cedente
        $header[] = $data->assignorData;            // 032 a 045 - CIC/CGC do cedente
        $header[] = $filler1;                       // 046 a 076 - Filler (em branco)
        $header[] = 748;                            // 077 a 079 - Numero do BANSICREDI
        $header[] = 'BANSICREDI     ';              // 080 a 094 - Literal 'BANSICREDI'
        $header[] = date("Ymd");                    // 095 a 102 - Data de gravação do arquivo (YYYYMMDD)
        $header[] = $filler2;                       // 103 a 110 - Filler (em branco)
        $header[] = $data->remittanceSequence;      // 111 a 117 - Número da remessa
        $header[] = $filler3;                       // 118 a 390 - Filler (em branco)
        $header[] = '2.00';                         // 391 a 394 - Versão do sistema (o ponto deve ser colocado)
        $header[] = $data->sequenceCode;            // 395 a 400 - Numero sequencial do registro
        $header   = strToUpper(SAGU::stringToASCII(implode($header, '')));
        return $header;
    }

    /**
     * Generate the details remittance data
     * 
     * @param $data (object): Data information for header information
     *
     * @return (string): String containing the header formatted
     *
     */
    private function detailsRegister($data)
    {
        // VARIABLE                                    POSITION  - DESCRIPTION
        $details[] = '1';                           // 001 a 001 - Identificação do registro Detalhe

        switch ( $data->collectionType )
        {
            // SEM REGISTRO
            case '1':
            {
                // 048 a 056 - Nosso numero
                $data->ourNumber            = DefaultFormat::formatField($data->ourNumber,            9,  'N');  
                // 072 a 072 - Postagem do titulo
                $data->postInvoice          = DefaultFormat::formatField($data->postInvoice,          1,  'N'); 
                // 075 a 076 - Número da parcela do carnê
                $data->invoiceParcel        = DefaultFormat::formatField($data->invoiceParcel,        2,  'N');
                // 077 a 078 - Número total de parcelas do carnê
                $data->invoiceTotalParcel   = DefaultFormat::formatField($data->invoiceTotalParcel,   2,  'N');  
                // 083 a 092 - Valor de desconto por dia de antecipação
                $data->antecipationDiscount = DefaultFormat::formatField($data->antecipationDiscount, 10, 'N');  
                // 093 a 096 - Multa por pagamento em atraso (%)
                $data->lateFine             = DefaultFormat::formatField($data->lateFine,             4,  'N');
                // 111 a 120 - Seu numero (nunca se repete)
                $data->yourNumber           = DefaultFormat::formatField($data->yourNumber,           10, 'N'); 
                // 121 a 126 - Data de vencimento (DDMMAA)
                $data->maturityDate         = DefaultFormat::formatField($data->maturityDate ,        6,  'N');  
                // 127 a 139 - Valor principal do título
                $data->mainInvoiceValue     = DefaultFormat::formatField($data->mainInvoiceValue,     13, 'N');
                // 151 a 156 - Data de emissão (DDMMAA)
                $data->emissionDate         = DefaultFormat::formatField($data->emissionDate,         6,  'N'); 
                // 161 a 173 - Valor/% de juros por dia de atraso (Não usado)
                $data->fineValue            = DefaultFormat::formatField($data->fineValue,            13, 'N'); 
                // 174 a 179 - Data limite para concessão de desconto (Não usado)
                $data->discountLimitDate    = DefaultFormat::formatField($data->discountLimitDate,    6,  'N'); 
                // 180 a 192 - Valor/% do desconto
                $data->discountValue        = DefaultFormat::formatField($data->discountValue,        13, 'N');  
                // 219 a 219 - Tipo de pessoa do sacado (1 == Fisica) (2 == Juridica)
                $data->personType           = DefaultFormat::formatField($data->personType,           1,  'N');
                // 221 a 234 - CIC/CGC do sacado
                $data->personDocumentCGC    = DefaultFormat::formatField($data->personDocumentCGC,    14, 'N');  
                // 235 a 274 - Nome do sacado
                $data->personName           = DefaultFormat::formatField($data->personName,           40, 'A'); 
                // 275 a 314 - Endereço do sacado
                $data->personAddress        = DefaultFormat::formatField($data->personAddress,        40, 'A'); 
                // 315 a 319 - Código do sacado na agência do cedente
                $data->personAgencyCode     = DefaultFormat::formatField($data->personAgencyCode,     5,  'N');  
                // 320 a 325 - Código da praça do sacado
                $data->personSquareCode     = DefaultFormat::formatField($data->personSquareCode,     6,  'N'); 
                // 327 a 334 - CEP do sacado
                $data->personDocumentCEP    = DefaultFormat::formatField($data->personDocumentCEP,    8,  'N');
                // 335 a 359 - Cidade do sacado
                $data->personCity           = DefaultFormat::formatField($data->personCity,           25, 'A'); 
                // 360 a 361 - Estado do sacado
                $data->personState          = DefaultFormat::formatField($data->personState,          2,  'A'); 
                // 362 a 366 - Código do sacado junto ao cliente
                $data->personIdCode         = DefaultFormat::formatField($data->personInCode,         5,  'N');
                // 394 a 400 - Numero sequencial do registro
                $data->sequenceCode         = DefaultFormat::formatField($data->sequenceCode,         5,  'N');

                $filler1  = str_pad(' ', 14, ' ');
                $filler2  = str_pad(' ', 28, ' ');
                $filler3  = ' ';
                $filler4  = str_pad(' ', 13, ' ');
                $filler5  = '  ';
                $filler6  = '    ';
                $filler7  = str_pad(' ', 12, ' ');
                $filler8  = str_pad(' ', 9, ' ');
                $filler9  = ' ';
                $filler10 = '    ';
                $filler11 = str_pad('0', 26, '0');
                $filler12 = ' ';
                $filler13 = ' ';
                $filler14 = str_pad(' ', 28, ' ');                
                $details[] = 'C';                           // 002 a 002 - Tipo de cobrança
                $details[] = $filler1;                      // 003 a 016 - Filler (em branco)
                $details[] = 'A';                           // 017 a 017 - Tipo de Moeda (A == Real)
                $details[] = 'B';                           // 018 a 018 - Tipo de desconto (B == percentual)
                $details[] = 'B';                           // 019 a 019 - Tipo de juros (B == percentual)
                $details[] = $filler2;                      // 020 a 047 - Filler (em branco)
                $details[] = $data->ourNumber;              // 048 a 056 - Nosso numero
                $details[] = $filler3;                      // 057 a 057 - Filler (em branco)
                $details[] = 'B';                           // 058 a 058 - Tipo de impressão (B == impressão completa)
                $details[] = $filler4;                      // 059 a 071 - Filler (em branco)
                $details[] = $data->postInvoice;            // 072 a 072 - Postagem do titulo
                                                            // (S == Postar Titulo)
                                                            // (N == Não postar e remeter ao cedente)
                $details[] = $filler5;                      // 073 a 074 - Filler (em branco)
                $details[] = $data->invoiceParcel;          // 075 a 076 - Número da parcela do carnê
                $details[] = $data->invoiceTotalParcel;     // 077 a 078 - Número total de parcelas do carnê
                $details[] = $filler6;                      // 079 a 082 - Filler (em branco)
                $details[] = $data->antecipationDiscount;   // 083 a 092 - Valor de desconto por dia de antecipação
                $details[] = $data->lateFine;               // 093 a 096 - Multa por pagamento em atraso (%)
                $details[] = $filler7;                      // 097 a 108 - Filler (em branco)
                $details[] = '01';                          // 109 a 110 - Instrução (01 == Cadastro de títulos)
                $details[] = $data->yourNumber;             // 111 a 120 - Seu numero (nunca se repete)
                $details[] = $data->maturityDate;           // 121 a 126 - Data de vencimento (DDMMAA)
                $details[] = $data->mainInvoiceValue;       // 127 a 139 - Valor principal do título
                $details[] = $filler8;                      // 140 a 148 - Filler (em branco)
                $details[] = 'F';                           // 149 a 149 - Espécie de documento (F == cobrança seriada)
                $details[] = $filler9;                      // 150 a 150 - Filler (em branco)
                $details[] = $data->emissionDate;           // 151 a 156 - Data de emissão (DDMMAA)
                $details[] = $filler10;                     // 157 a 160 - Filler (em branco)
                $details[] = $data->fineValue;              // 161 a 173 - Valor/% de juros por dia de atraso (Não usado)
                $details[] = $data->discountLimitDate;      // 174 a 179 - Data limite para concessão de desconto (Não usado)
                $details[] = $data->discountValue;          // 180 a 192 - Valor/% do desconto
                $details[] = $filler11;                     // 193 a 218 - Filler (em branco)
                $details[] = $data->personType;             // 219 a 219 - Tipo de pessoa do sacado (1 == Fisica) (2 == Juridica)
                $details[] = $filler12;                     // 220 a 220 - Filler (em branco)
                $details[] = $data->personDocumentCGC;      // 221 a 234 - CIC/CGC do sacado
                $details[] = $data->personName;             // 235 a 274 - Nome do sacado
                $details[] = $data->personAddress;          // 275 a 314 - Endereço do sacado
                $details[] = $data->personAgencyCode;       // 315 a 319 - Código do sacado na agência do cedente
                $details[] = $data->personSquareCode;       // 320 a 325 - Código da praça do sacado
                $details[] = $filler13;                     // 326 a 326 - Filler (em branco)
                $details[] = $data->personDocumentCEP;      // 327 a 334 - CEP do sacado
                $details[] = $data->personCity;             // 335 a 359 - Cidade do sacado
                $details[] = $data->personState;            // 360 a 361 - Estado do sacado
                $details[] = $data->personInCode;           // 362 a 366 - Código do sacado junto ao cliente
                $details[] = $filler14;                     // 367 a 394 - Filler (em branco)
                $details[] = $data->sequenceCode;           // 394 a 400 - Numero sequencial do registro
                $details   = strToUpper(SAGU::stringToASCII(implode($details, '')));
                break;
            }
            // COM REGISTRO
            case '2':
            {            
                // PREPARE VARIABLES TO DETAILS REGISTER
                // 048 a 062 - Nosso numero
                $data->ourNumber            = DefaultFormat::formatField($data->ourNumber,            15, 'N');
                // 063 a 070 - Data da instrução
                $data->instructionDate      = DefaultFormat::formatField($data->instructionDate,      8,  'N');
                // 071 a 071 - Ocorrência 31 - alteração
                '?';
                // 072 a 072 - Postagem do titulo
                $data->postInvoice          =  DefaultFormat::formatField($data->postInvoice,         1,  'A');
                // 073 a 073 - Protesto do título com valor atualizado
                '?';
                // 074 a 074 - Impressão do bloqueto
                '?';
                // 075 a 076 - Número da parcela do carnê
                '??';
                // 077 a 078 - Número total de parcelas do carnê
                '??';
                // 083 a 092 - Valor de desconto por dia de antecipação
                $data->antecipationDiscount       = DefaultFormat::formatField($data->antecipationDiscount,       10, 'N');
                // 093 a 096 - Multa por pagamento em atraso (%)
                $data->lateFine                   = DefaultFormat::formatField($data->lateFine,                   4,  'N');
                // 111 a 120 - Seu numero (nunca se repete)
                $data->yourNumber                 = DefaultFormat::formatField($data->yourNumber,                 10, 'A');
                // 121 a 126 - Data de vencimento (DDMMAA)
                $data->maturityDate               = DefaultFormat::formatField($data->maturityDate,               6,  'N');
                // 127 a 139 - Valor principal do título
                $data->mainInvoiceValue           = DefaultFormat::formatField($data->mainInvoiceValue,           13, 'N');
                // 150 a 150 - Filler (em branco)
                $data->invoiceAccept              = DefaultFormat::formatField($data->invoiceAccept,              1,  'N');
                // 151 a 156 - Data de emissão (DDMMAA)
                $data->emissionDate               = DefaultFormat::formatField($data->emissionDate,               6,  'N');
                // 157 a 158 - Instrução de Protesto automático
                $data->automaticProtest           = DefaultFormat::formatField($data->automaticProtest,           2,  'N');
                // 159 a 160 - Número de Dias p/ Protesto Automático
                $data->automaticProtestNumberDays = DefaultFormat::formatField($data->automaticProtestNumberDays, 2,  'N');
                // 161 a 173 - Valor/(%) de juros por dia de atraso (Não usado)
                $data->discountLimitDate          = DefaultFormat::formatField($data->discountLimitDate,          13, 'N');
                // 180 a 192 - Valor/(%) do desconto
                $data->discountValue              = DefaultFormat::formatField($data->discountValue,              13, 'N');
                // 206 a 218 - Valor do abatimento
                $data->allowanceValue             = DefaultFormat::formatField($data->allowanceValue,             13, 'N');
                // 219 a 219 - Tipo de pessoa
                $data->personType                 = DefaultFormat::formatField($data->personType,                 1,  'A');   
                // 221 a 234 - CIC/CGC do sacado
                $data->personDocumentCGC          = DefaultFormat::formatField($data->personDocumentCGC,          14, 'N');  
                // 235 a 274 - Nome do sacado
                $data->personName                 = DefaultFormat::formatField($data->personName,                 40, 'A'); 
                // 275 a 314 - Endereço do sacado
                $data->personAddress              = DefaultFormat::formatField($data->personAddress,              40, 'A');      
                // 315 a 319 - Código do sacado na agência do cedente
                $data->personAgencyCode           = DefaultFormat::formatField($data->personAgencyCode,           5,  'N');
                // 320 a 325 - Código da praça do sacado
                $data->personSquareCode           = DefaultFormat::formatField($data->personSquareCode,           6,  'N'); 
                // 327 a 334 - CEP do sacado
                $data->personDocumentCEP          = DefaultFormat::formatField($data->personDocumentCEP,          8,  'N');
                // 335 a 339 - Cidade do sacado 
                $data->personCode                 = DefaultFormat::formatField($data->personCode,                 5,  'N');
                // 340 a 353 - CIC/CGC do sacador/avalista
                $data->guarantorCGC               = DefaultFormat::formatField($data->guarantorCGC,               14, 'N');
                // 354 a 394 - Nome do sacador avalista
                $data->guarantorName              = DefaultFormat::formatField($data->guarantorName,              41, 'A'); 
                // 394 a 400 - Numero sequencial do registro
                $data->sequenceCode               = DefaultFormat::formatField($data->sequenceCode,               6,  'N');

                $filler1 = str_pad(' ', 14, ' ');
                $filler2 = str_pad(' ', 16, ' ');
                $filler3 = str_pad(' ', 4, ' ');
                $filler4 = str_pad(' ', 12, ' ');
                $filler5 = str_pad(' ', 9, ' ');
                $filler6 = str_pad(' ', 13, '0');
                $filler7 = str_pad('0', 1, '0');
                $filler8 = str_pad(' ', 1, ' ');

                $details[] = 'A';                               // 002 a 002 - Tipo de cobrança
                $details[] = 'A';                               // 003 a 003 - 'A' - Simples
                $details[] = $filler1;                          // 004 a 016 - Filler (em branco)
                $details[] = 'A';                               // 017 a 017 - Tipo de Moeda (A == Real)
                $details[] = 'B';                               // 018 a 018 - Tipo de desconto (B == percentual)
                $details[] = 'B';                               // 019 a 019 - Tipo de juros (B == percentual)
                $details[] = '???';                             // 020 a 023 - Código da primeira Mensagem para bloqueto
                $details[] = '???';                             // 024 a 027 - Código da segunda Mensagem para bloqueto
                $details[] = '???';                             // 028 a 031 - Código da terceira Mensagem para bloqueto
                $details[] = $filler2;                          // 032 a 047 - Filler (em branco)
                $details[] = $data->ourNumber;                  // 048 a 062 - Nosso numero
                $details[] = $data->instructionDate;            // 063 a 070 - Data da instrução
                $details[] = '?';                               // 071 a 071 - Ocorrência 31 - alteração
                $details[] = $data->postInvoice;                // 072 a 072 - Postagem do titulo
                                                                // (S == Postar Titulo)
                                                                // (N == Não postar e remeter ao cedente)
                $details[] = '?';                               // 073 a 073 - Protesto do título com valor atualizado
                $details[] = '?';                               // 074 a 074 - Impressão do bloqueto
                $details[] = '??';                              // 075 a 076 - Número da parcela do carnê
                $details[] = '??';                              // 077 a 078 - Número total de parcelas do carnê
                $details[] = $filler3;                          // 079 a 082 - Filler (em branco)
                $details[] = $data->antecipationDiscount;       // 083 a 092 - Valor de desconto por dia de antecipação
                $details[] = $data->lateFine;                   // 093 a 096 - Multa por pagamento em atraso (%)
                $details[] = $filler4;                          // 097 a 108 - Filler (em branco)
                $details[] = '01';                              // 109 a 110 - Instrução (01 == Cadastro de títulos)
                $details[] = $data->yourNumber;                 // 111 a 120 - Seu numero (nunca se repete)
                $details[] = $data->maturityDate;               // 121 a 126 - Data de vencimento (DDMMAA)
                $details[] = $data->mainInvoiceValue;           // 127 a 139 - Valor principal do título
                $details[] = $filler5;                          // 140 a 148 - Filler (em branco)
                $details[] = 'F';                               // 149 a 149 - Espécie de documento (F == cobrança seriada)
                $details[] = $data->invoiceAccept;              // 150 a 150 - Filler (em branco)
                $details[] = $data->emissionDate;               // 151 a 156 - Data de emissão (DDMMAA)
                $details[] = $data->automaticProtest;           // 157 a 158 - Instrução de Protesto automático
                $details[] = $data->automaticProtestNumberDays; // 159 a 160 - Número de Dias p/ Protesto Automático
                $details[] = $data->discountLimitDate;          // 161 a 173 - Valor/(%) de juros por dia de atraso (Não usado)
                $details[] = $data->discountValue;              // 180 a 192 - Valor/(%) do desconto
                $details[] = $filler6;                          // 193 a 205 - Filler (em branco)
                $details[] = $data->allowanceValue;             // 206 a 218 - Valor do abatimento
                $details[] = $data->personType;                 // 219 a 219 - Tipo de pessoa
                                                                // (1 == Fisica) (2 == Juridica)
                $details[] = $filler7;                          // 220 a 220 - Filler (em branco)
                $details[] = $data->personDocumentCGC;          // 221 a 234 - CIC/CGC do sacado
                $details[] = $data->personName;                 // 235 a 274 - Nome do sacado
                $details[] = $data->personAddress;              // 275 a 314 - Endereço do sacado
                $details[] = $data->personAgencyCode;           // 315 a 319 - Código do sacado na agência do cedente
                $details[] = $data->personSquareCode;           // 320 a 325 - Código da praça do sacado
                $details[] = $filler8;                          // 326 a 326 - Filler (em branco)
                $details[] = $data->personDocumentCEP;          // 327 a 334 - CEP do sacado
                $details[] = $data->personCode;                 // 335 a 339 - Cidade do sacado
                $details[] = $data->guarantorCGC;               // 340 a 353 - CIC/CGC do sacador/avalista
                $details[] = $data->guarantorName;              // 354 a 394 - Nome do sacador avalista
                $details[] = $data->sequenceCode;               // 394 a 400 - Numero sequencial do registro
                $details   = strToUpper(SAGU::stringToASCII(implode($details, '')));
                break;
            }
        }
        return $details;
    }

    /**
     * Generate the details remittance data
     * 
     * @param $data (object): Data information for header information
     *
     * @return (string): String containing the header formatted
     *
     */
    private function detailsPrePrint($data)
    {
        $filler1 = str_pad(' ', 45, ' ');
        $filler2 = str_pad(' ', 48, ' ');
        $filler3 = str_pad(' ', 283, ' ');
        
        // VARIABLE                                    POSITION  - DESCRIPTION
        $details[] = 1;                             // 001 a 001 - Identificação do registro detalhe
        $details[] = 'C';                           // 002 a 002 - Tipo de cobrança (C == BANSICREDI sem registro)
        $details[] = $filler1;                      // 003 a 047 - Filler (em branco)
        $details[] = $data->ourNumberBegin;         // 048 a 052 - Seq. inicial para composição do Nosso Número 
        $details[] = $data->numberInvoices;         // 053 a 057 - Quantidade de bloquetos solicitados 
        $details[] = 'A';                           // 058 a 058 - Tipo de impressão (A == Formulário pré-impresso)
        $details[] = $data->ourNumberYear;          // 059 a 060 - Ano para composição do Nosso Numero 
        $details[] = $filler2;                      // 061 a 108 - Filler (em branco)
        $details[] = '01';                          // 109 a 110 - Instrução (01 == Cadastro de pedido para bloquetos)
        $details[] = 2;                             // 111 a 111 - Controle da sequencia numérica do nosso numero
        $details[] = 'B';                           // 112 a 112 - Tipo de formulário solicitado (A == Form. contínuo) (B == Folha A4)
        $details[] = $filler3;                      // 113 a 394 - Filler (em branco)
        $details[] = $data->sequenceCode;           // 395 a 400 - Numero sequencial do registro

        $details   = strToUpper(SAGU::stringToASCII(implode($details, '')));
        return $details;
    }

    /**
     * Generate the message remittance data
     * 
     * @param $data (object): Data information for header information
     *
     * @return (string): String containing the header formatted
     *
     */
    private function message($data)
    {
        $filler1 = str_pad(' ', 11, ' ');
        $filler2 = str_pad(' ', 53, ' ');

        if ( $data->type == 2 )
        {
            // VARIABLE                                    POSITION  - DESCRIPTION
            $message[] = 2;                             // 001 a 001 - Identificação do registro detalhe
            $message[] = $filler1;                      // 002 a 012 - Filler (em branco)
            $message[] = $data->ourNumber;              // 013 a 021 - Nosso numero
            $message[] = $data->message1;               // 022 a 101 - Primeira instrução para imp. no bloqueto
            $message[] = $data->message2;               // 102 a 181 - Segunda instrução para imp. no bloqueto
            $message[] = $data->message3;               // 182 a 261 - Terceira instrução para imp. no bloqueto
            $message[] = $data->message4;               // 262 a 341 - Quarta instrução para imp. no bloqueto
            $message[] = $filler2;                      // 342 a 394 - Filler (em branco)
            $message[] = $data->sequenceCode;           // 395 a 400 - Numero sequencial do registro
            $message   = strToUpper(SAGU::stringToASCII(implode($message, '')));

            return $message;
        }
    }

    /**
     * Generate the message remittance data
     * 
     * @param $data (object): Data information for header information
     *
     * @return (string): String containing the header formatted
     *
     */
    private function trailer($data)
    {
        $filler1 = str_pad(' ', 384, ' ');
        $data->transferorCode = str_pad($data->transferorCode, 5, '0', STR_PAD_LEFT);
        $data->sequenceCode   = str_pad($data->sequenceCode, 6, '0', STR_PAD_LEFT);

        // VARIABLE                                    POSITION  - DESCRIPTION
        $trailer[] = '9';                           // 001 a 001 - Identificação do registro trailer
        $trailer[] = '1';                           // 002 a 002 - Identificação do arquivo remessa
        $trailer[] = '748';                         // 003 a 005 - Numero do BANSICREDI
        $trailer[] = $data->transferorCode;         // 006 a 010 - Código do cedente
        $trailer[] = $filler1;                      // 011 a 394 - Filler (em branco)
        $trailer[] = $data->sequenceCode;           // 395 a 400 - Numero sequencial do registro
        $trailer   = strToUpper(SAGU::stringToASCII(implode($trailer, '')));

        return $trailer;
    }

    /**
     * Generate the message remittance data
     * 
     * @param $data (object): Data information for header information
     *
     * @return (string): String containing the header formatted
     *
     */
    public function remittanceInvoice748($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        // Get bank remittance information
        $businessCompany = new BusinessBasicBusCompany();
        $dataCompany     = $businessCompany->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));

        $businessLegalPerson = new BusinessBasicBusLegalPerson();
        $dataLegalPerson     = $businessLegalPerson->getLegalPerson($dataCompany->personId);

        $businessBankAccount = new BusinessFinanceBusBankAccount();
        $dataBankAccount     = $businessBankAccount->getBankAccount($data->bankAccountId);

        $sequenceNumber = 1;

        $dataHeader->transferorCode       = $dataBankAccount->transferorCode;
        $dataHeader->assignorData         = $dataLegalPerson->cnpj;
        $dataHeader->remittanceSequenceId = $data->sequenceFile;
        $dataHeader->sequenceCode         = $sequenceNumber;

        // Generate the header
        $fileData[] = $this->header($dataHeader);

        $businessReceivableInvoice = new BusinessFinanceBusReceivableInvoice();
        $dataReceivableInvoice     = $businessReceivableInvoice->listReceivableInvoiceToBankRemittance($data);
        // If have titles return the detail mode
        if ( is_array($dataReceivableInvoice[0]) )
        {
            $businessPerson         = new BusinessBasicBusPerson();
            $businessLegalPerson    = new BusinessBasicBusLegalPerson();
            $businessPhysicalPerson = new BusinessBasicBusPhysicalPerson();
            $businessCity           = new BusinessBasicBusCity();
            $businessPersonDocument = new BusinessBasicBusDocument();

            foreach ( $dataReceivableInvoice as $dri )
            {
                $dataPerson = $businessLegalPerson->getLegalPerson($dri[1]);

                if ( strlen($dataPerson->name)>0 )
                {
                    $dataPerson->personType = '2';
                }
                else
                {
                    $dataPerson = $businessPhysicalPerson->getPhysicalPerson($dri[1]);
                    $dataPerson->personType = '1';
                    $dataPersonDocument1 = $businessPersonDocument->getDocument($dri[1], SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF'));
                    $dataPersonDocument2 = $businessPersonDocument->getDocument($dri[1], SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CGC'));
                }
                $dataCity = $businessCity->getCity($dataPerson->cityId);
                // 072 a 072 - Postagem do titulo (S == Postar Titulo) (N == Não postar e remeter ao cedente)
                $dataDetail->postInvoice          = $data->isPostInvoice;
                // 075 a 076 - Número da parcela do carnê
                $dataDetail->invoiceParcel        = '00';
                // 077 a 078 - Número total de parcelas do carnê
                $dataDetail->invoiceTotalParcel   = '00';
                // 083 a 092 - Valor de desconto por dia de antecipação
                $dataDetail->antecipationDiscount = '0000000000';
                // 093 a 096 - Multa por pagamento em atraso (%)
                $dataDetail->lateFine             = '0000';
                // 111 a 120 - Seu numero (nunca se repete)
                $dataDetail->yourNumber            = $dri[0];
                // 121 a 126 - Data de vencimento (DDMMAA)
                $dataDetail->maturityDate         = SAGU::formatDate($dri[4], 'ddmmyy');
                // 127 a 139 - Valor principal do título
                $dataDetail->mainInvoiceValue     = $dri[5];
                // 151 a 156 - Data de emissão (DDMMAA)
                $dataDetail->emissionDate         = SAGU::formatDate($dri[10], 'ddmmyy');
                // 161 a 173 - Valor/% de juros por dia de atraso (Não usado)
                $dataDetail->fineValue            = '0000000000000';
                // 174 a 179 - Data limite para concessão de desconto (Não usado)
                $dataDetail->discountLimitDate    = '000000';
                // 180 a 192 - Valor/% do desconto
                $dataDetail->discountValue        = '0000000000000';
                // 219 a 219 - Tipo de pessoa do sacado (1 == Fisica) (2 == Juridica)
                $dataDetail->personType           = $dataPerson->personType;
                // 221 a 234 - CIC/CGC do sacado
                $dataDetail->personDocumentCGC    = $dataPersonDocument1->content;
                // 235 a 274 - Nome do sacado
                $dataDetail->personName           = $dataPerson->name;
                // 275 a 314 - Endereço do sacado
                $dataDetail->personAddress        = $dataPerson->location.' - '.$dataPerson->complement;
                // 315 a 319 - Código do sacado na agência do cedente
                $dataDetail->personAgencyCode     = '00000';
                // 320 a 325 - Código da praça do sacado
                $dataDetail->personSquareCode     = $dri[9];
                // 327 a 334 - CEP do sacado
                $dataDetail->personDocumentCEP    = $dataPerson->zipCode;
                // 335 a 359 - Cidade do sacado
                $dataDetail->personCity           = $dataCity->name;
                // 360 a 361 - Estado do sacado
                $dataDetail->personState          = $dataCity->stateId;
                // 362 a 366 - Código do sacado junto ao cliente
                $dataDetail->personInCode         = $dri[11];
                // 394 a 400 - Numero sequencial do registro
                $dataDetail->sequenceCode         = $sequenceNumber;

                // >> SOMA NUMERO DE SEQUENCIA <<
                $sequenceNumber++;

                // Add formatted information
                $fileData[] = $this->detailsRegister($dataDetail);
            }

            // 006 a 010 - Código do cedente
            $dataTrailer->transferorCode = $dataBankAccount->transferorCode;
            // 395 a 400 - Numero sequencial do registro
            $dataTrailer->sequenceCode = $sequenceNumber;
            
            $fileData[] = $this->trailer($dataTrailer);
            $fileDataC  = implode($fileData, chr(hexdec("\X0D\X0A")));

            $ok = $businessBankAccount->updateBankAccountSequence($data->bankAccountId, ++$data->sequenceFile);

            sagu::returnAsFile($this->returnFileName($dataBankAccount->transferorCode), $fileDataC, 'text/sicredi-crm-file');
        }
        else
        {
            $action = MIOLO::getCurrentAction();
            return $MIOLO->error(_M('Não existe remessa bancária para processar', $module), $MIOLO->getActionURL($module, $action));
        }
    }
}
?>
