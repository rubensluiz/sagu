<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 *
 * @since
 * Class created on 20/03/2006
 *
 **/

class RemittanceCNAB001
{

    function __construct()
    {
        $MIOLO    = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $MIOLO->getClass('finance', 'DefaultFormat');
    }

    /**
     * Get the header and separate data in a array
     * 
     * @param: $data (string): Header string data
     *
     * @return: (array): Array containing string data
     *
     */
    public function fileHeader($data=null)
    {
        $header[] = DefaultFormat::formatField($data->bankId, 'N', 3);  //Banco
        $header[] = '0000';                 //Lote
        $header[] = '0';                    //Registro
        $header[] = DefaultFormat::formatField('', 'A', 9);            //Uso CNAB

        //buscar informações bancárias de finbankaccount
        $header[] = '2';                    //Tipo
        $header[] = DefaultFormat::formatField($data->cnpj, 'N', 14);//Documento
        $header[] = DefaultFormat::formatField($data->tranferorCode, 'A', 20); //Convênio
        $header[] = DefaultFormat::formatField($data->branchNumber, 'N', 5); //Agência
        $header[] = DefaultFormat::formatField($data->branchNumberDigit, 'N', 1); //DV agência
        $header[] = DefaultFormat::formatField($data->accountNumber, 'N', 12); /// C/C
        $header[] = DefaultFormat::formatField(strtoupper($data->accountNumberDigit), 'N', 1);// DV C/C
        $header[] = DefaultFormat::formatField('', 'A', 1);;                    // DV agência/C/C
        $header[] = DefaultFormat::formatField(SAGU::stringToASCII($data->companyName), 'N', 30);//Nome empresa
        $header[] = DefaultFormat::formatField($data->bankDescription, 'A', 30); //Nome do banco
        $header[] = DefaultFormat::formatField('', 'A', 10);

        //alterar sequencial
        $header[] = '1'; //remessa
        $header[] = date(dmY); //data DDMMYYYY
        $header[] = date(His); //hora HHMMSS
        $header[] = DefaultFormat::formatField($data->sequence, 'N', 6);//número sequencial
        $header[] = '030';     //número da versão do layout
        $header[] = DefaultFormat::formatField('0', 'N', 5); //densidade de gravação do arquivo
        $header[] = DefaultFormat::formatField('', 'A', 20); //uso da banco
        $header[] = DefaultFormat::formatField('', 'A', 20); //uso da empresa
        $header[] = DefaultFormat::formatField('', 'A', 11); //uso CNAB
        //$header[] = 'CSP';  //identificação de cobrança s/ papel // Em Branco
        $header[] = DefaultFormat::formatField('', 'A', 3); // Em branco
        //$header[] = DefaultFormat::formatField('', 'N', 3); //uso exclusivo das vans
        $header[] = DefaultFormat::formatField('0', 'N', 3);//uso exclusivo das vans
        //$header[] = '02';     //Tipo de serviço
        $header[] = DefaultFormat::formatField('', 'A', 2); // Em branco
        $header[] = DefaultFormat::formatField('', 'A', 10); //Código das ocorrências
       
        return implode($header,'');
    }
    
    /**
     * Get the lot header and separate data in a array
     * 
     * @param: $data (string): Header string data
     *
     * @return: (array): Array containing string data
     *
     */
    public function lotHeader($data=null)
    {
        $header[] = DefaultFormat::formatField($data->bankId, 'N', 3);  // 0 - 2 Banco
        $header[] = DefaultFormat::formatField($data->lotControl, 'N', 4);// 3 - 6 Número do lote (sequencia)
        $header[] = '1';                    // 7 - 7 Registro header em lote
        $header[] = 'C';                    // 8 - 8 Tipo da operação
        $header[] = '30';                   // 9 - 10 Tipo do serviço
        $header[] = DefaultFormat::formatField($data->accountType, 'N', 2); // 11 - 12 Forma de lançamento
        $header[] = '020';                  // 13 - 15 Número da versão do layout de lote
        $header[] = DefaultFormat::formatField('', 'A', 1); // 16 - 16 Uso CNAB
        $header[] = '2';                    // 17 - 17 Tipo
        $header[] = DefaultFormat::formatField($data->cnpj, 'N', 14);          // 18 - 31 Documento
        $header[] = DefaultFormat::formatField($data->transferorCode, 'A', 20 );  // 32 - 51 Convênio
        $header[] = DefaultFormat::formatField($data->branchNumber, 'N', 5);   // 52 - 56 Agência
        $header[] = DefaultFormat::formatField($data->branchNumberDigit, 'N', 1); // 57 - 57 DV agência
        $header[] = DefaultFormat::formatField($data->accountNumber, 'N', 12); // 58 - 69 C/C
        $header[] = DefaultFormat::formatField(strToUpper($data->accountNumberDigit), 'N', 1); // 70 - 70 DV C/C
        $header[] = DefaultFormat::formatField('', 'A', 1);;                   // 71 - 71  DV agência/C/C
        $header[] = DefaultFormat::formatField(SAGU::stringToASCII($data->companyName), 'N', 30);// 72 - 102 Nome empresa
        $header[] = DefaultFormat::formatField('', 'A', 40); // 102 - 141 Mensagem
        $header[] = DefaultFormat::formatField($data->location, 'A', 30); // 142 -171 Nome da rua, av, praça
        $header[] = DefaultFormat::formatField($data->number, 'N', 5); // 172 - 176 Número do local
        $header[] = DefaultFormat::formatField($data->complement, 'A', 15); // 177 - 191 Complemento
        $header[] = DefaultFormat::formatField($data->cityName, 'A', 20); // 192 - 211 Cidade
        $header[] = DefaultFormat::formatField($data->zipCode, 'N', 8); // 212 - 219 CEP - e complemento do Cep
        $header[] = DefaultFormat::formatField($data->stateId, 'A', 2); // 220 - 221 Sigla do estado
        $header[] = DefaultFormat::formatField('', 'A', 8); // 222 - 229 Uso CNAB
        $header[] = DefaultFormat::formatField('', 'A', 10); // 230 - 240 

        return implode($header,'');
    }

    /**
     * Get the detail and separate data in a array
     * 
     * @param: $data (string): Header string data
     *
     * @return: (array): Array containing string data
     *
     */
    public function detail($data=null)
    {
        $detail[] = DefaultFormat::formatField($data->bankId, 'N', 3);  //Banco
        $detail[] = DefaultFormat::formatField($data->lotControl, 'N', 4);//Número do lote (sequencia)  7 
        $detail[] = '3';                    //Registro detalhe em lote   8 
        $detail[] = DefaultFormat::formatField($data->detailControl, 'N', 5); //Número sequencial do arquivo de lote 13
        $detail[] = 'A';                    // Código do segmento do registro de detalhe 14
        $detail[] = '0';                    //Tipo de movimento  16
        $detail[] = '00';                   // Código da instrução para movimento 17
        $detail[] = DefaultFormat::formatField('0', 'N', 3); //Código da Câmara de compensação 20 - Alterado conforme validação com o banco.
        $detail[] = DefaultFormat::formatField($data->bankId, 'N', 3); //Código do banco do favorecido 
        $detail[] = DefaultFormat::formatField($data->branchNumber, 'N', 5); //Agência do favorecido
        $detail[] = DefaultFormat::formatField($data->branchNumberDigit, 'N', 1); //DV agência favorecido
        $detail[] = DefaultFormat::formatField($data->accountNumber, 'N', 12); //Conta corrente do favorecido
        $detail[] = DefaultFormat::formatField(strToUpper($data->accountNumberDigit), 'N', 1); // DV conta corrente do favorecido
        $detail[] = DefaultFormat::formatField('', 'A', 1); //DV agencia/Conta
        $detail[] = DefaultFormat::formatField(SAGU::stringToASCII($data->name), 'A', 30); //Nome do favorecido
        $detail[] = DefaultFormat::formatField($data->personId, 'A', 20, 'R'); //Número do documento atribuido à pessoa
        $detail[] = str_replace('/', '', $data->date); //data DDMMYYYY
        $detail[] = 'BRL'; //Tipo de moeda
        $detail[] = DefaultFormat::formatField('', 'N', 15);      //Quantidade da moeda
        $detail[] = DefaultFormat::formatField($data->salary, 'N', 15); //Valor a creditar 
        $detail[] = DefaultFormat::formatField('', 'A', 20); //Número do documento atribuido pelo banco
        $detail[] = DefaultFormat::formatField('', 'N', 8); //Data real da ativação do lancamento
        $detail[] = DefaultFormat::formatField('', 'N', 15); //Valor real da ativação do lancamento
        $detail[] = DefaultFormat::formatField('', 'A', 40); //Outras informações
        $detail[] = DefaultFormat::formatField('', 'A', 12); //Outras informações
        $detail[] = '0';    //aviso ao favorecido
        $detail[] = DefaultFormat::formatField('', 'N', 10); //Códigos das ocorrências para retorno

        return implode($detail,'');
    }

    /**
     * Get the lot trailer and separate data in a array
     * 
     * @param: $data (string): Header string data
     *
     * @return: (array): Array containing string data
     *
     */
    public function lotTrailer($data=null)
    {
        $trailer[] = DefaultFormat::formatField($data->bankId, 'N', 3);  //Banco
        $trailer[] = DefaultFormat::formatField($data->lotControl, 'N', 4);//Número do lote (sequencia)
        $trailer[] = '5';                    //Registro trailer em lote
        $trailer[] = DefaultFormat::formatField('', 'A', 9); //Uso CNAB
        $trailer[] = DefaultFormat::formatField($data->detailControl, 'N', 6); //Quantidade de registros de lote
        $trailer[] = DefaultFormat::formatField($data->totalSalary, 'N', 18);//Samotória dos valores
        $trailer[] = DefaultFormat::formatField('', 'N', 18); //Samotório da quantidade de moedas
        $trailer[] = DefaultFormat::formatField('', 'A', 171); //Uso CNAB
        $trailer[] = DefaultFormat::formatField('', 'N', 10); //Códigos das ocorrências para retorno

        return implode($trailer,'');
    }
    
    /**
     * Get the trailer and separate data in a array
     * 
     * @param: $data (string): Header string data
     *
     * @return: (array): Array containing string data
     *
     */
    public function fileTrailer($data=null)
    {
        $trailer[] = DefaultFormat::formatField($data->bankId, 'N', 3);  //Banco
        $trailer[] = '9999';                 //Lote de serviço
        $trailer[] = '9';                    //Registro trailer de arquivo
        $trailer[] = DefaultFormat::formatField('', 'A', 9); //Uso CNAB
        $trailer[] = DefaultFormat::formatField($data->lotControl, 'N', 6); //Quantidade de lotes do arquivo
        $trailer[] = DefaultFormat::formatField($data->totalRegisters, 'N', 6); //Quantidade de registros do arquivo
        $trailer[] = DefaultFormat::formatField('', 'N', 6); //Quantidade de contas
        $trailer[] = DefaultFormat::formatField('', 'A', 205); //Uso CNAB

        return implode($trailer,'');
    }
}
?>