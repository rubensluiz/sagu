<?php
 /**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This class generates the remittance invoice file for BANRISUL, following the rules of FEBRABAN document
 *
 * @author: William Prigol Lopes [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 14/06/2006
 *
 **/
$MIOLO->getClass('finance', 'DefaultFormat');
/**
 * Class to generate the bank remittance
 */
class remittanceInvoice041
{
    public $history;
    public $fileBody;
    public $fileData;

    /*
     * generate the header for the remittance invoice
     * 
     * @param $data (object): Data information for header information
     *
     * @return (string): String containing the header formatted
     *
     */
    private function header($data)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $business = new BusinessFinanceBusRemittanceInvoice041();

        $dataCompany     = $business->getCompanyData($data->companyId);
        $dataBankAccount = $business->getBankAccountData($data->bankAccountId);

        // 001 - 009 - Constante 01REMESSA
        $line = '01REMESSA';
        // 010 - 026 - Em branco
        $line .= DefaultFormat::formatField(' ', 'A', 17);
        // 027 - 038 - Código do Cedente
        $line .= DefaultFormat::formatField($dataBankAccount->transferorCode, 'N', 12);
        // 039 - 046 - Em branco
        $line .= DefaultFormat::formatField(' ', 'A', 8);
        // 047 - 076 - Nome da Empresa
        $line .= DefaultFormat::formatField($dataCompany->name, 'A', 30);
        // 077 - 087 - Constante 041BANRISUL
        $line .= '041BANRISUL';
        // 088 - 094 - Em branco
        $line .= DefaultFormat::formatField(' ', 'A', 7);
        // 095 - 100 - Data Gravação do arquivo
        $line .= date('dmy');
        // 101 - 109 - Em branco
        $line .= DefaultFormat::formatField(' ', 'A', 9);
        // 110 - 113 - Código de Serviço
        $line .= DefaultFormat::formatField(' ', 'A', 4);
        // 114 - 114 - Em branco
        $line .= DefaultFormat::formatField(' ', 'A', 1);
        // 115 - 115 - Tipo de processamento
        $line .= DefaultFormat::formatField(' ', 'A', 1);
        // 116 - 116 - Em branco 
        $line .= DefaultFormat::formatField(' ', 'A', 1);
        // 117 - 126 - Código do cliente no Banrimicro.
        $line .= DefaultFormat::formatField(' ', 'A', 10);
        // 127 - 394 - Em branco
        $line .= DefaultFormat::formatField(' ', 'A', 268);
        // 395 - 400 - Constante 000001
        $line .= DefaultFormat::formatField('1', 'N', 6);
        // Tira acentos, coloca em caixa alta e quebra linha
        $lineS .= strToUpper( SAGU::stringToASCII($line) ). "\n";

        return $lineS;
    }

    /**
     * Generate the details remittance data
     * 
     * @param $data (object): Data information for header information
     *
     * @return (string): String containing the header formatted
     *
     */
    private function details($data)
    {
        $MIOLO       = MIOLO::getInstance();
        $module      = MIOLO::getCurrentModule();
        $business    = new BusinessFinanceBusRemittanceInvoice041();
        $dataDetails = $business->listDetails($data);

        if ( ! is_array($dataDetails) )
        {
            return false;
        }

        $zeros  = str_pad('', 100 , '0');
        $spaces = str_pad('', 400 , ' ');

        // contador de linhas ... começa no 1 por causa do header.
        $counter       = 1;
        $Total_Remessa = 0;

        foreach ( $dataDetails as $key => $oneLine )
        {
            $counter++;

            $newLine->invoiceId       = $oneLine[0];
            $newLine->personId        = $oneLine[1];
            $newLine->personType      = $oneLine[2];
            $newLine->personName      = $oneLine[3];
            $newLine->incomeSourceId  = $oneLine[4];
            $newLine->transferorCode  = $oneLine[5]; 
            $newLine->maturityDate    = $oneLine[6];
            $newLine->balanceValue    = $oneLine[7];
            $newLine->cityId          = $oneLine[8];
            $newLine->square          = $oneLine[9];
            $newLine->emissionDate    = $oneLine[10];
            $newLine->bankInvoiceId   = $oneLine[11];
            $newLine->finePercent     = $oneLine[12];
            $newLine->daysToFine      = $oneLine[13];
            $newLine->monthlyInterestPercent = $oneLine[14];
            $newLine->discountPercent = $oneLine[15];
            $newLine->daysToDiscount  = $oneLine[16];
            $newLine->wallet          = $oneLine[17];

            // 001 - 001 - constante 1
            $line = '1';

            // 002 - 017 - Em branco
            $line .= DefaultFormat::formatField(' ', 'A', 16);

            // 018 - 029 - Código cedente
            $line .= DefaultFormat::formatField($newLine->transferorCode, 'A', 12);

            // 030 - 037 - Em branco 
            $line .= DefaultFormat::formatField(' ', 'A', 8);

            // 038 - 062 - Identificação cedente  ( invoiceId )
            $line .= DefaultFormat::formatField($newLine->invoiceId, 'A', 25);

            // history for grid invoiceId
            $urlHistory = $MIOLO->getActionURL($module, 'main', null, array('event'=>'btnSearch_click', 'invoiceId'=>$newLine->invoiceId));
            $this->history[$key][0] = new MOpenWindow('invoice'.$newLine->invoiceId, $newLine->invoiceId, $urlHistory);

            // 063 - 072 - Identificação do título para o Banco  - Obrigatório se  posições 148 a 149 = 08
            $line .= DefaultFormat::formatField($newLine->bankInvoiceId, 'N', 10);
            // 073 - 104 - Mensagem no boleto - Mensagem de instrução para pagamento, não serão reconhecidas como tal, utilize a funcao específica para isso.
            $line .= DefaultFormat::formatField($data->invoiceMessage, 'A', 32);
            // 105 - 107 - Em branco 
            $line .= DefaultFormat::formatField(' ', 'A', 3);
            // 108 - 108 - Carteira
            $line .= DefaultFormat::formatField($newLine->wallet, 'A', 1);            
            // 109 - 110 - Occorência operação
            $line .= DefaultFormat::formatField($data->instruction, 'N',  2);
            // 111 - 120 - Seu número, Código identificador do título dentro da instituição.
            $line .= DefaultFormat::formatField($newLine->invoiceId, 'A', 10);
            // 121 - 126 - Data de vencimento. 'ddmmyy'
            $line  .= SAGU::formatDate($newLine->maturityDate, 'ddmmyy');
            // 127 - 139 - Valor do Título.
            $value = ($newLine->balanceValue * 100);

            // Soma valores para Triller 
            $traillerValue = SAGU::calcNumber( $traillerValue . ' + ' . $newLine->balanceValue );

            $line .= DefaultFormat::formatField($value, 'N', 13);

            // soma de valores para histórico
            $this->history[$key][3] = $newLine->balanceValue;

            // 140 - 142 - Constante do Banco - 041 
            $line .= '041';
            // 143 - 147 - Em branco
            $line .= DefaultFormat::formatField(' ', 'A', 5);

            // 148 - 149 -Espécie -> 04-Cobrança direta- Emite e manda pra cedente | 06-Cobrança escritural-emite e manda ao sacado por correio | 08-CCB-O Banco não emite o boleto - 09- Títulos terceiros. 
            // verificar se carterira é R e S, para estas este campo fica em branco 
            if ( ($newLine->wallet == 'R') OR ($newLine->wallet == 'S') )
            {
                $line .= DefaultFormat::formatField(' ', 'A', 2);
            }
            else
            {
                $line .= '06';
            }

            // 150 - 150 - Código aceite - N - Não aceite | A - Aceite
            $line .= SAGU::getParameter('FINANCE', 'FLAG_DEFAULT_REMITTANCE_ACCEPTED_041');

            // 151 - 156 - // Data emissão do título
            $line .= date(dmy);
            // 157 - 158 - Código da primeira instrução.
            $line .= DefaultFormat::formatField($data->firstInstruction, 'N', 2);
            // 159 - 160 - Código da segunda instrução.
            $line .= DefaultFormat::formatField($data->secondInstruction, 'N', 2);
            // 161 - 161 - Mora | Valor Diário = 0  | Taxa mensal = 1
            $line .= '1';

            // 162 - 173 - Valor ou taxa mensal de juros com DUAS casas decimais
            $interest = ( $newLine->monthlyInterestPercent * 100);
            $line .= DefaultFormat::formatField($interest, 'N', 12);
            // 174 - 179 - Data para concessão do desconto
            $line .= SAGU::formatDate($newLine->maturityDate, 'ddmmyy');

            // 180 - 192 - Valor do desconto a ser concedido
            $discountValue = SAGU::calcNumber( $newLine->discountPercent . ' * ' . '(' . $newLine->balanceValue . ' /  100 '. ')', true);

            $discountValue = ($discountValue * 100);
            $line .= DefaultFormat::formatField($discountValue, 'N', 13);

            // 193 - 205 - Valor iof
            $line .= DefaultFormat::formatField('0', 'N', 13);
            // 206 - 218 - Valor abatimento a ser concedido
            $line .= DefaultFormat::formatField('0', 'N', 13);

            $businessPersonDocument = new BusinessBasicBusDocument();

            if ( $newLine->personType == 'f' ) // pessoa fisica
            {
                // 219 - 220 - Tipo de inscrição - CPF 
                $line .= '01';
                $document = $businessPersonDocument->getDocument($newLine->personId, SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF'));

                $businessPhysicalPerson = new BusinessBasicBusPhysicalPerson();
                $dataPerson = $businessPhysicalPerson->getPhysicalPerson($newLine->personId);
            }
            elseif ( $newLine->personType == 'j' ) // Pessoa Jurídica
            {
                // 219 - 220 - Tipo de inscrição - CGC
                $line .= '02';
                $document = $businessPersonDocument->getDocument($newLine->personId, SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CGC'));

                $businessLegalPerson = new BusinessBasicBusLegalPerson();
                $dataPerson          = $businessLegalPerson->getLegalPerson($newLine->personId);
            }
            else
            {
                // 219 - 220 - Tipo de inscrição - CPF 
                $line .= '99';
                $document = $businessPersonDocument->getDocument($newLine->personId, SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF'));

                $businessPhysicalPerson = new BusinessBasicBusPhysicalPerson();
                $dataPerson             = $businessPhysicalPerson->getPhysicalPerson($newLine->personId);
            }

            // 221 - 234 - Número da inscrição ( número do CPF ou CGC )
            $line .= DefaultFormat::formatField($document->content, 'N', 14);
            // 235 - 269 - Nome do sacado
            $line .= DefaultFormat::formatField($document->personName, 'A', 35);  // nome da pessoa

            // histórico de geração, código da pessoa
            $this->history[$key][1] = $document->personId;
            // histórico de geração, nome
            $this->history[$key][2] = $document->personName;

            // 220 - 274 - Em branco
            $line .= DefaultFormat::formatField(' ', A, 5);  // espaços

            $locationTarget = $business->getPhysicalTargetFromInvoice($newLine->invoiceId);

            if ( $locationTarget == false )
            {
                $personLocation = $dataPerson->location . ' ' . ( $dataPerson->number ? $dataPerson->number .' ' : '' ). $dataPerson->complement . '-' . $dataPerson->neighborhood;

                if ( strlen($personLocation) > 35 )
                {
                    $personLocation = SAGU::getShortenName($dataPerson->location, '23') . ' ' . ( $dataPerson->number ? $dataPerson->number . ' ' : '') . $dataPerson->complement . '-' . SAGU::getShortenName($dataPerson->neighborhood, '7');
                }

                $zipCode  = $dataPerson->zipCode;
                $cityName = $dataPerson->cityName;
                $stateId  = $dataPerson->stateId;
            }
            else
            {
                $personLocation = $locationTarget->location . ' ' . ( $locationTarget->number ? $locationTarget->number . ' ' : '' ). $locationTarget->complement . '-' . $locationTarget->neighborhood;

                if (strlen($personLocation) > 35 )
                {
                    $personLocation = SAGU::getShortenName($locationTarget->location, '23') . ' ' . ( $locationTarget->number ? $locationTarget->number . ' ' : '') . $locationTarget->complement . '-' . SAGU::getShortenName($locationTarget->neighborhood, '7');
                }

                $zipCode  = $locationTarget->zipCode;
                $cityName = $locationTarget->cityName;
                $stateId  = $locationTarget->stateId;
            }

            // 275 - 314 - Endereço sacado
            $line .= DefaultFormat::formatField($personLocation, 'A', 35);
            // 315 - 321 - Em brancos
            $line .= DefaultFormat::formatField(' ', 'A', 12);
            // 322 - 324 - Taxa para multa após o vencimento - UMA casa decimal
            $line .= DefaultFormat::formatField(($newLine->finePercent * 10), 'N', 3);
            // 325 - 326 - Número de dieas para multa após vencimento
            $line .= DefaultFormat::formatField($newLine->daysToFine, 'N', 2);
            // 327 - 334 - Cep 
            $line .= DefaultFormat::formatField($zipCode, 'N', 8);
            // 335 - 349 - nome da cidade
            $line .= DefaultFormat::formatField($cityName, 'A', 15);
            // 350 - 351 - UF da cidade
            $line .= DefaultFormat::formatField($stateId, 'A', 2);
            // 352 - 355 - Taxa ao DIA para pagamento antecipado - UMA casa decimal.
            $line .= DefaultFormat::formatField( 0 , 'N', 4);
            // 356 - 356 - Em Branco
            $line .= ' ';
            // 357 - 369 - Valor para cálculo do desconto.
            $line .= DefaultFormat::formatField( SAGU::calcNumber('('.$newLine->discountPercent .' / 100 ) * '. $newLine->balanceValue ) * 100, 'N', 13 );
            // 370 - 371 - Número de dias para protesto ou devolução automática.
            $line .= DefaultFormat::formatField($data->daysToProtest, 'N', 2);
            // 372 - 394 - Em branco
            $line .= DefaultFormat::formatField(' ', 'A', 23);
            // 395 - 400 - Número sequencial dos registros
            $line .= DefaultFormat::formatField( $counter, 'N', 6);
            // adiciona linha.
            $lineS .= strToUpper(SAGU::stringToASCII($line) ) ."\n";

            /**
            *   Início de geração de mensagem
            **/ 

            // 001 - 001 - Tipo de registro = 1 
            $lineMonths = '1';
            // 002 - 002 - Tipo CNPJ ( inscrição )
            $lineMonths .= '02';
            // 003 - 017 - Código do CNPJ da empresa - Dispensável
            $lineMonths .= DefaultFormat::formatField(' ', 'A', 14);
            // 018 - 029 - Identificação do Cedente "a combinar"
            $lineMonths .= DefaultFormat::formatField($newLine->transferorCode, 'A', 12);
            // 030 - 037 - Em branco
            $lineMonths .= DefaultFormat::formatField(' ', 'A', 8);
            // 038 - 062 - Identificação de título para cedente
            $lineMonths .= DefaultFormat::formatField($newLine->invoiceId, 'A', 25);
            // 063 - 072 - Nosso número - como os títulos são sem registros não há número.
            $lineMonths .= DefaultFormat::formatField(' ', 'A', 10);
            // 073 - 107 - Em branco 
            $lineMonths .= DefaultFormat::formatField(' ', 'A', 35);
            // 108 - 108 - Cobrança Simples  1
            $lineMonths .= '1';
            // 109 - 110 - Código da ocorrência 
            $lineMonths .= '98';

            $dataEntry = $business->getEntriesFromInvoice($newLine->invoiceId);

            // Flag define se dado foi computado na linha
            $isInside = false;
            // Flag que contém o número da linha corrente, utilizado para definer tamanho máximo de mensagens em uma linha 
            $messageNumber = 0;
            $entryNumber = count($dataEntry);
            foreach ( $dataEntry as $key2 => $newEntry )
            {
                if ( $data->instruction != 2 )
                {
                    if ( $isInside == false )
                    {
                        if ( ($key2 + 1) == 1 )
                        {
                            // 111 - 111 - Controle de canal
                            $lineMonths1 = $lineMonths . "1";
                            $isInside    = true;
                        }
                        else
                        {
                            // 202 - 202 - Controle de canal
                            $lineMonths1 = $lineMonths . " ";
                            $isInside    = true;
                        }
                    }
                    else
                    {
                        // 293 - 293 - Controle de canal
                        $lineMonths1 = $lineMonths1 . " ";
                    }

                    $lineMonths1 .= $newEntry[3];
                    $lineMonths1 .= DefaultFormat::formatField('', 'A', (90 - strlen( $newEntry[3] ) ) - strlen( $newEntry[4] ) ) . $newEntry[4];
                    $messageNumber++;

                    if ( ($messageNumber == 3) && ($key2 + 1 != $entryNumber) )
                    {
                        $counter++;
                        $lineMonths1 .= DefaultFormat::formatField(' ', 'A', 11);
                        $lineMonths1 .= DefaultFormat::formatField(' ', 'A', 394 - strlen($lineMonths1));
                        $lineMonths1 .= DefaultFormat::formatField($counter, 'N', 6);

                        // $lineMonths1 .= $cont;
                        $isInside = false;

                        // para gerar nova linha
                        $messageNumber = 0;

                        $lineS .= strToUpper( SAGU::stringToASCII($lineMonths1) ). "\n";
                    }

                    if ( ($key2 + 1) == $entryNumber )
                    {
                        $counter++;
                        $lineMonths1 .= DefaultFormat::formatField(' ', 'A', 11);
                        $lineMonths1 .= DefaultFormat::formatField(' ', 'A', 394 - strlen($lineMonths1));
                        $lineMonths1 .= DefaultFormat::formatField($counter, 'N', 6);

                        $isInside = false;

                        // para gerar nova linha
                        $messageNumber = 0;

                        $lineS .= strToUpper( SAGU::stringToASCII($lineMonths1) ). "\n";
                    }
                }
            }
        }
        $this->traillerValue = $traillerValue;
        $this->counter       = $counter;
        return $lineS;
    }

   /**
     * Generate the message remittance data
     * 
     * @param $data (object): Data information for header information
     *
     * @return (string): String containing the header formatted
     *
     */
    public function trailler()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        // 001 - 001 - Constante 9 - Obrigatório
        $line .= '9';
        // 001 - 027 - Em branco
        $line .= DefaultFormat::formatField(' ', 'A', 26);
        // 028 - 040 - Total Geral somatório dos valores.
        $value = $this->traillerValue * 100;
        $line .= DefaultFormat::formatField($value, 'N', 13);
        // 041 - 394 - Em branco 
        $line .= DefaultFormat::formatField('', 'A', 354);
        // 395 - 400 - Número da sequência do registro.
        $counter = $this->counter + 1;
        $line .= DefaultFormat::formatField($counter, 'N', 6);

        $lineS .= strToUpper( SAGU::stringToASCII($line) ). "\n";
        return $lineS;
    }

    /**
     * Generate the message remittance data
     * 
     * @param $data (object): Data information for header information
     *
     * @return (string): String containing the header formatted
     *
     */
    public function remittanceInvoice041($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $header   = $this->header($data);
        $details  = $this->details($data);
        $trailler = $this->trailler();

        $fileBody  = $header;
        $fileBody .= $details;
        $fileBody .= $trailler;

        // Grava arquivos na base
        $businessFile = new BusinessFinanceBusFinFile();
        $fileData->fileName = 'remessaBanrisul'.date(dmy). '.txt';
        $fileData->file     = $fileBody;
        $fileData->bankAccountId = $data->bankAccountId;
        $fileData->fileType = 'I';
        $fileData->inputOrOutput = 'O';
        $fileData->isProcessed = DB_TRUE;
        $fileData = $businessFile->insertFinanceFile($fileData);
        $this->fileData = $fileData;

        SAGUFile::saveDataToLocal($file);
    }
}
?>
