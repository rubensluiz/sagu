<?php
 /**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This class generate the file for export about automatic debit
 *
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 14/06/2006
 *
 **/
 
$MIOLO->getClass($module, 'DefaultFormat');

/**
 *
 * Class to generate the file for export about automatic debit
 *
 * This class generates the automatic debit for bank 041 - BANRISUL
 * This file follows the rules of source code baseed on SAGU 1 (of course... some bugs are fixed here).
 *
 */
class RemittanceAutomaticDebit041
{
    private $business;
    private $invoiceData;
    private $string;

    /** 
     * Header of file
     *
     * @param $data (object): Object containing default information to generate and search header information
     *
     * @return (string): A string with 150 of size
     *
     */
    private function header($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $companyData = $this->business->getCompanyData(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));
        $bankData    = $this->business->getBankAccountData($data->bankAccountId);
        
        //$sequence = $this->business->getFileSequence();
        $str[] = 'A';                                                               // Código do registro
        $str[] = '1';                                                               // Código da remessa
        $str[] = DefaultFormat::formatField($bankData->accordCode, 'N', 5);         // Numero do convenio
        $str[] = DefaultFormat::formatField(' ', 'A', 15);                          // Brancos
        $str[] = DefaultFormat::formatField($companyData->acronym, 'A', 20);        // Nome da Empresa cedente
        $str[] = '041';                                                             // Código do banco
        $str[] = DefaultFormat::formatField('BANRISUL', 'A', 20);                   // Nome do banco
        $str[] = date('Ymd');                                                       // Data atual (Ymd)
        $str[] = DefaultFormat::formatField($data->sequenceFile, 'N', 6);           // Número sequencial do arquivo
        $str[] = '04';                                                              // Número da versão do layout atual
        $str[] = 'DEBITO AUTOMATICO';                                               // Identificação escrita do tipo de serviço
        $str[] = DefaultFormat::formatField(' ', 'A', 52);                          // Brancos
        $string = implode($str);
        return $string;
    }
    
   /** 
    * Header of file
    *
    * @param $data (object): Object containing default information to generate and search header information
    *
    * @return (string): A string with 150 of size
    *
    */
    private function details($data)
    {

        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $detailsData = $this->business->listDetails($data);
        if (is_array($detailsData))
        {
            $this->invoiceInfo->registers=2;
            foreach ($detailsData as $dd)
            {
                
                $originalRow[3] = $dd[3];
                $dd[3] = SAGU::formatDate($dd[3], 'yyyymmdd');
                $originalRow[4] = $dd[4];
                $dd[4] = SAGU::returnOnlyNumbers($dd[4]);
                
                if ($dd[12] !== NULL)
                {
                    $this->invoiceData->invoiceIncentives[] = array($dd[6], $dd[7], $dd[5], $originalRow[3], $originalRow[4], $dd[12]);
                }
                else
                {
                    
                    $str[] = 'E';                                           // Identificação do registro de débito automático
                    $str[] = DefaultFormat::formatField($dd[0], 'A', 25);   // Identificação do cliente na empresa == contractId
                    $str[] = DefaultFormat::formatField($dd[1], 'N', 4);    // Código da agência
                    $str[] = DefaultFormat::formatField($dd[2], 'N', 10);   // Numero da conta corrente
                    $str[] = DefaultFormat::formatField(' ',    'A', '4');  // Brancos
                    $str[] = DefaultFormat::formatField($dd[3], 'N', 8);    // Data do débito
                    $str[] = DefaultFormat::formatField($dd[4], 'N', 15);   // Valor do débito (2 casas após vírgula)
                    $str[] = '03';                                          // Código da moeda (03 = Real)
                    $str[] = DefaultFormat::formatField($dd[5], 'A', 60);   // Uso da empresa (código do título)
                    $str[] = DefaultFormat::formatField(' ', 'A', '20');    // Brancos
                    $str[] = '0';                                           // Código do movimento (0 para débito automático)
                    $string[] = implode($str);
                    unset($str);
                    $this->invoiceData->invoiceRemittance[] = array($dd[6], $dd[7], $dd[5], $originalRow[3], $originalRow[4]);
                    $this->invoiceInfo->registers++;
                    $this->invoiceInfo->value[] = $originalRow[4];
                    if (isset($this->invoiceData->invoiceTotal[$originalRow[3]]))
                    {
                        $this->invoiceData->invoiceTotal[$originalRow[3]]++;
                    }
                    else
                    {
                        $this->invoiceData->invoiceTotal[$originalRow[3]] = 1;
                    }
                }
                
            }
            return $string;
        }
        else
        {
            $MIOLO->information(_M('O sistema não retornou valores', $module), $MIOLO->getActionURL($module, $action));
        }
    }

   /** 
    * Main function to generate remittance
    *
    * @param $data (object): Object containing the form values to handle the remittance
    *
    * @returns true if succeed, otherwise false
    *
    */
    private function footer($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $totalRegisters = $this->invoiceInfo->registers;
        if (is_array($this->invoiceInfo->value))
        {
            $totalValue = SAGU::returnOnlyNumbers(SAGU::calcNumber(implode('+', $this->invoiceInfo->value), true));
        }
        $str[] = 'Z';                                                   // Código de identificação do registro footer
        $str[] = DefaultFormat::formatField($totalRegisters, 'N', 6);   // Total de registros
        $str[] = DefaultFormat::formatField($totalValue, 'N', 17);      // Valor total das informações enviadas via remessa
        $str[] = DefaultFormat::formatField(' ', 'A', 126);             // Em branco
        
        $string = implode($str);
        return $string;
    }
   
   /** 
    * Main function to generate remittance
    *
    * @param $data (object): Object containing the form values to handle the remittance
    *
    * @returns true if succeed, otherwise false
    *
    */
    public function RemittanceAutomaticDebit041($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $this->business = new BusinessFinanceBusRemittanceAutomaticDebit041();

        $header[] = $this->header($data);
        $details  = $this->details($data);
        $footer[] = $this->footer($data);
        if (is_array($details))
        {
            $this->string = implode("\n", array_merge($header, $details, $footer));
        }
        else
        {
            $this->string = implode("\n", array_merge($header, $footer));
        }
        $dataConfig->value        = $data->sequenceFile;
        $dataConfig->moduleConfig = 'FINANCE';
        $dataConfig->parameter    = 'SEQ_BANK_REMITTANCE_AUTOMATIC_DEBIT_'.$data->bankId;

        $businessConfig = new BusinessBasicBusConfig();
        $businessConfig->updateConfigValue($dataConfig);
    }

   /**
    * Return the invoice data information
    *
    * @param: No parameters needed
    *
    * @return: Internal object called invoiceData
    *
    */
    public function returnInvoiceData()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $data = $this->invoiceData->invoiceTotal;
        unset($this->invoiceData->invoiceTotal);
        if (is_array($data))
        {
            foreach ($data as $key => $d)
            {
                $this->invoiceData->invoiceTotal[] = array($key, $d);
            }
        }
        if (is_array($this->invoiceData->invoiceRemittance))
        {
            foreach ($this->invoiceData->invoiceRemittance as $ir)
            {
                $total[] = $ir[4];
            }
            $this->invoiceData->invoiceRemittance[] = array('','','', '<b>'._M('Total', $module).'</b>', SAGU::calcNumber(implode($total, '+')));
            unset($total);
        }
        if (is_array($this->invoiceData->invoiceIncentives))
        {
            foreach ($this->invoiceData->invoiceIncentives as $ir)
            {
                $total[] = $ir[4];
            }
            $this->invoiceData->invoiceIncentives[] = array('','','', '<b>'._M('Total', $module).'</b>', SAGU::calcNumber(implode('+', $total)), '');
        unset($total);
        }

        return $this->invoiceData;
    }

   /**
    * Return the string containing the invoice remittance data
    *
    * @param: No parameters needed
    *
    * @return: Internal object called string that contains the specific string of return invoice
    */
    public function returnString()
    {
        if (strlen($this->string)>0)
        {
            return SAGU::stringToASCII($this->string);
        }
        else
        {
            return false;
        }
    }
}
?>
