<?php
 /**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This class return file bank opening account Banco do Brasil
 *
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 14/06/2006
 *
 **/
 
/**
 *Class to return file bank opening account Banco do Brasil (001)
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 */

class returnMCIF001
{

     /**
     * Import the return file to database
     *
     * @param: $data: string to break and analyze
     *
     * @return (boolean): True if succeed, otherwise false
     */
    public function returnMCIF001()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
    }


     /**
     * Get the "Segmento U" and separate data in a array
     *
     * @param: $data (string): Header string data
     *
     * @return: (array): Array containing string data
     *
     */
    public function detail($data)
    {

        $return->sequence          = trim(substr($data, 0, 5));             // 001 a 005 - Sequencial do cliente
        $return->cpf               = trim(substr($data, 5, 14));            // 006 a 019 - CPF
        $return->dateBirth         = trim(substr($data, 19, 8));            // 020 a 027 - Data de nascimento
        $return->name              = trim(substr($data, 27, 60));           // 028 a 087 - Nome
        $return->personId          = trim(substr($data, 87, 17));           // 088 a 104 - Texto que foi enviado na remessa (código)
        $return->branch            = trim(substr($data, 104, 4));           // 105 a 108 - Agência
        $return->branchDigit       = trim(substr($data, 108, 1));           // 109 a 109 - Dígito verificador da agência
        $return->setex             = trim(substr($data, 109, 2));           // 110 a 111 - Grupo setex
        $return->setexDigit        = trim(substr($data, 111, 1));           // 112 a 112 - Dígito verificador do grupo setex
        $return->account           = trim(substr($data, 112, 11));          // 113 a 123 - Conta corrente
        $return->accountDigit      = trim(substr($data, 123, 1));           // 124 a 124 - Dígito verificador da conta corrente
        $return->clientOccurrence  = trim(substr($data, 124, 3));           // 125 a 127 - Ocorrência do cadastramento do cliente
        $return->accountOccurrence = trim(substr($data, 127, 3));           // 128 a 130 - Ocorrência do cadastramento da conta corrente
        $return->limitOccurrence   = trim(substr($data, 130, 3));          // 131 a 133 - Ocorrência do cadastramento do limite de crédito
        $return->clientId          = trim(substr($data, 133, 9));           // 134 a 142 - Código do cliente no banco
        return $return;

    }
    
     /**
     * Get the "Segmento U" and separate data in a array
     *
     * @param: $data (string): Header string data
     *
     * @return: (array): Array containing string data
     *
     */
    public function header($data)
    {
        $return->sequenceHeader     = trim(substr($data, 0, 5));             // 001 a 005 - Sequencial do cliente | 00000
        $return->remittanceDate     = trim(substr($data, 6, 13));            // 006 a 013 - DATA DA REMESSA: ddmmaaaa
        $return->fileName           = trim(substr($data, 14, 20));           // 014 a 020 - Nome do arquivo
        $return->limbo              = trim(substr($data, 21, 21));           // 021 a 021 - Em branco
        $return->processNumber      = trim(substr($data, 22, 26));           // 028 a 087 - Número do processo: Conforme informado no MCIF460
        $return->sequenceRemittance = trim(substr($data, 27, 31));           // 027 a 031 - Sequencial de remessa: Conforme arquivo de remessa
        $return->layoutVersion      = trim(substr($data, 32, 33));           // 031 a 033 - Layout version
        $return->limbo              = trim(substr($data, 34, 150));          // 034 a 150 - Em branco.
        return $return;
    }


     /**
     * Get the "Segmento U" and separate data in a array
     *
     * @param: $data (string): Header string data
     *
     * @return: (array): Array containing string data
     *
     */
    public function trailer($data)
    {
        $return->sequenceTrailer    = trim(substr($data, 0, 5));             // 001 a 005 - Controle sequencial | 99999 para identificação trailer
        $return->numberOfRegisters  = trim(substr($data, 6, 14));            // 006 a 014 - Numero de registros
        $return->limbo              = trim(substr($data, 15, 150));          // 034 a 150 - Em branco.
        return $return;
    }


     /**
     * Get the bank information about an error in remittance
     *
     * @param: $data (string): Header string data
     *
     * @return: (array): Array containing string data
     *
     */
    public function clientError($id)
    {
        $client['000'] = 'INFORMAÇÃO ACEITA';
        $client['001'] = 'TIPO DE PESSOA INVÁLIDO';
        $client['002'] = 'TIPO DE CPF/CGC INVÁLIDO';
        $client['003'] = 'CPF/CGC INVÁLIDO';
        $client['004'] = 'DATA DE NASCIMENTO INVÁLIDO';
        $client['005'] = 'NOME DO CLIENTE INVÁLIDO';
        $client['006'] = 'AGÊNCIA/DV INVÁLIDO';
        $client['007'] = 'MAIS DE CINCO CLIENTES CADASTRADOS PARA O MESMO CPF';
        $client['008'] = 'CLIENTE BBCAMPUS MENOR DE 16 ANOS';
        $client['009'] = 'CLIENTE BBCAMPUS NÃO É PESSOA FÍSICA';
        $client['010'] = 'DADOS DA PESSOA FÍSICA DIVERGENTES';
        $client['011'] = 'DADOS DA PESSOA JURÍDICA DIVERGENTES';
        
        return $client[$id];
    }
    
     /**
     * Get the bank information about an error in remittance
     *
     * @param: $data (string): Header string data
     *
     * @return: (array): Array containing string data
     *
     */
    public function accountError($id)
    {
        $account['000'] = 'INFORMAÇÃO ACEITA';
        $account['001'] = 'INDICADOR DE CHEQUE ESPECIAL INVÁLIDO';
        $account['002'] = 'GRUPO SETEX/DV INVÁLIDO';
        $account['003'] = 'NÃO ATENDE AO CREDIT SCORING';
        $account['004'] = 'DADOS PESSOA FÍSICA DIVERGENTES';
        
        return $account[$id];
    }

    
     /**
     * Get the bank information about an error in remittance
     *
     * @param: $data (string): Header string data
     *
     * @return: (array): Array containing string data
     *
     */
    public function limitError($id)
    {
        $limit['000'] = 'INFORMAÇÃO ACEITA';
        $limit['001'] = 'CÓDIGO DO ESTADO CIVIL INVÁLIDO';
        $limit['002'] = 'CÓDIGO DA NATUREZA DA OCUPAÇÃO INVÁLIDO';
        $limit['003'] = 'CÓDIGO DA OCUPAÇÃO INVÁLIDO';
        $limit['004'] = 'VALOR DO RENDIMENTO INVÁLIDO';
        $limit['005'] = 'DATA DO RENDIMENTO INVÁLIDO';
        $limit['006'] = 'TIPO DE CONTRATO DE TRABALHO INVÁLIDO';
        $limit['007'] = 'DATA DE INÍCIO DE EMPREGO INVÁLIDO';
        $limit['008'] = 'NÃO ATENDE AO CREDIT SCORING';
        
        return $limit[$id];
    }

}

?>


