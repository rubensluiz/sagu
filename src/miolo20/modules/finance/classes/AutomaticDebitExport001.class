<?php
 /**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This class generate the file for export about automatic debit
 *
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 14/06/2006
 *
 **/
 
/**
 *
 * Class to generate the file for export about automatic debit
 *
 * This class generates the automatic debit for bank 001 - BANCO DO BRASIL
 * (Brazilian bank registered on Central Bank of Brazil)
 * This file follows the rules of document "Regulamentação do Padrão Default para o 
 * intercâmbio de informações através de arquivos 'ASCII'" created on year 2000.
 *
 */
class AutomaticDebitExport001
{
    /**
     * Return the correctly file name 
     *
     * @param: $transferorCode (string):  Transferor code bank (needed to generate the file
     *
     * @return (string): string containing the file name for remittance
     *
     */
    private function returnFileName($transferorCode)
    {
        //verificar
        $monthCode = $this->returnMonthCode(date("m"));
        $dayNumber = date("d");
        return strToUpper($transferorCode.$monthCode.$dayNumber.'.CRM');
    }

    /**
     * Get the header and separate data in a array
     * 
     * @param: $data (string): Header string data
     *
     * @return: (array): Array containing string data
     *
     */
// header de lote
    private function lotHeader($data)
    {
        $data->accordNumber = DefaultFormat::formatField($data->accordNumber,  'N', 20);
        $data->companyName  = DefaultFormat::formatField($data->companyName,   'A', 20);
        $data->bankCode     = DefaultFormat::formatField($data->bankCode,      'N', 3);
        $data->bankName     = DefaultFormat::formatField($data->bankName,      'A', 20);
        $data->sequenceCode = DefaultFormat::formatField($data->sequenceCode,  'N', 6);
        $automaticDebit     = DefaultFormat::formatField('DEBITO AUTOMATICO',  'A', 17);

        // Pega dados da moeda e empresa corrente
        $business       = new BusinessBasicBusCompany();
        $resultsComp    = $business->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));

        $filler1 = str_pad(' ', 52, ' ');       
        
        // controle
        $header[] = '001';                  // 001 a 003 - Código do banco na compensação 
        $header[] = '0000';                 // 004 a 007 - Lote de serviço ( header == 0000 ) 
        $header[] = '1';                    // 008 a 008 - Registro HEADER de lote
        // serviço
        $header[] = 'C';                    // 009 a 009 - Tipo da operação ('C'=CRÉDITO)
        $header[] = '05';                   // 010 a 011 - Tipo do Serviço ('05'= Débito)
        $header[] = '01';                   // 012 a 013 - Forma de lançamento ('01' = Crédito em conta corrente); 
        $header[] = '020';                  // 014 a 016 - N° da versão do Layout lote (020)
        $header[] = '0';                    // 017 a 017 - CNAB - Uso exclusivo Febraban/CNAB
        // empresa
          // - incrição
        $header[] = '2';                    // 018 a 018 - Tipo de inscrição da empresa (CGC ='2')
        $header[] = $resultsComp->cnpj;     // 019 a 032 - N° inscrição da empresa (cnpj = cgc )
        $header[] = $data->accordNumber . '0019' . '09' . '   '; // 033 a 052 - Código do convênio no Banco.

// ... 

        $header[] = $data->accordNumber;    // 003 a 022 - Número do convênio
        $header[] = $data->companyName;     // 023 a 042 - Nome da empresa
        $header[] = $data->bankCode;        // 043 a 045 - Código do banco
        $header[] = $data->bankName;        // 046 a 065 - Nome do banco
        $header[] = date("Ymd");            // 066 a 073 - Data da geração do arquivo (AAAAMMDD)
        $header[] = $data->sequenceCode;    // 074 a 079 - Numero de sequencia de arquivos gerados para remessa).
        $header[] = '04';                   // 080 a 081 - Versão de leiaute - 04 (Débito automático)
        $header[] = $automaticDebit;        // 082 a 098 - Identificação do serviço (DEBITO AUTOMATICO)
        $header[] = $filler1;               // 099 a 150 - Filler (em branco)
        
        $header = implode($header, '');
        return $header;
    }

    /**  
     * Get the details
     * 
     * @param: $data (array): Array of strings to extract information
     *
     * @return: (array): Bidimensional array containing the information separated in each field and line
     *
     */
    private function details($data)
    {
        $data->pupilContract = DefaultFormat::formatField($data->pupilContract, 'N', 25);
        $data->pupilAgency   = DefaultFormat::formatField($data->pupilAgency,   'N', 4);
        $data->pupilAccount  = DefaultFormat::formatField($data->pupilAccount,  'N', 6);

        //
        // The information for this funcion is wrote in portuguese because is applied for Brazil banks
        // 
        // Cadastramoento de registros
        // 
        switch ($data->registerType)
        {
            // E: Cadastramento de débito automático da Empresa para o Sicredi
            case 'E':
                    $filler1 = str_pad(' ', 1, ' ');
                    $filler2 = str_pad(' ', 7, ' ');
                    $filler3 = str_pad(' ', 20, ' ');
                    
                    $data->maturityDate  = DefaultFormat::formatField($data->maturityDate,  'N', 8);
                    $data->debitValue    = DefaultFormat::formatField($data->debitValue,    'N', 15);
                    $data->moneyCode     = DefaultFormat::formatField($data->moneyCode,     'N', 2);
                    $data->invoiceId     = DefaultFormat::formatField($data->invoiceId,     'A', 60);

                    $details[] = 'E';                   // 001 a 001 - "E" Identificação do sistema
                    $details[] = $data->pupilContract;  // 002 a 026 - Código do cliente na empresa (contrato do aluno)
                    $details[] = $data->pupilAgency;    // 027 a 030 - Agência para débito
                    $details[] = $data->pupilAccount;   // 031 a 036 - Conta corrente do associado
                    $details[] = $filler1;              // 037 a 037 - Filler (em branco)
                    $details[] = $filler2;              // 038 a 044 - Filler (em branco)
                    $details[] = $data->maturityDate;   // 045 a 052 - Data do vencimento da fatura
                    $details[] = $data->debitValue;     // 053 a 067 - Valor do débito
                    $details[] = $data->moneyCode;      // 068 a 069 - Código da moeda
                    $details[] = $data->invoiceId;      // 070 a 129 - Uso da empresa 
                    $details[] = $filler3;              // 129 a 149 - Filler (em branco)
                    $details[] = '0';                   // 149 a 150 - Débito normal
                    break;
        }

        $details = implode($details, '');
        return $details;
    }

    
    /**  
     * Get the trailer
     * 
     * @param: $data (string): String to process the trailer
     *
     * @return: (array): Bidimensional array containing the information separated in each field and line
     *
     */
    private function trailer($data)
    {
        $data->totalValue   = DefaultFormat::formatField($data->totalValue,   'N', 17);
        $data->sequenceCode = DefaultFormat::formatField($data->sequenceCode, 'N', 6);
        $filler = str_pad(' ', 126, ' ');
        
        $trailer[] = 'Z';                       // 001 a 001 - Código do registro (Z == trailer)
        $trailer[] = $data->sequenceCode;       // 002 a 007 - Quantidade total de registros do arquivo incluindo header e trailer
        $trailer[] = $data->totalValue;         // 008 a 024 - Valor total dos registros do arquivo
        $trailer[] = $filler;                   // 025 a 150 - Filler (em branco)

        $trailer = implode($trailer, '');
        return $trailer;
    }

    /**
     * Get the main data and process this (separate header, detais and trailer)
     *
     * @param: $data (array): Array of string to extract information
     *
     * @return (object): Object containing separated data information
     *
     */
    private function breakString($data)
    {
    
    }
    
    /**
     * Import the return file to database
     *
     * @param: $data: string to break and analyze
     *
     * @return (boolean): True if succeed, otherwise false
     */
    public function automaticDebitExport748($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $businessCompany     = new BusinessBasicBusCompany();
        $dataCompany         = $businessCompany->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));

        $businessLegalPerson = new BusinessBasicBusLegalPerson();
        $dataLegalPerson     = $businessLegalPerson->getLegalPerson($dataCompany->personId);

        $businessBank        = new BusinessFinanceBusBank();
        $dataBank            = $businessBank->getBank($data->bankId);

        $data->accordNumber = DefaultFormat::formatField($data->accordNumber,    'N', 20);
        $data->companyName  = DefaultFormat::formatField($data->companyName,     'A', 20);
        $data->bankCode     = DefaultFormat::formatField($data->bankCode,        'N', 3);
        $data->bankName     = DefaultFormat::formatField($dataBank->description, 'A', 20);
        $data->sequenceCode = DefaultFormat::formatField($data->sequenceCode,    'N', 6);
        $automaticDebit     = DefaultFormat::formatField('DEBITO AUTOMATICO',    'A', 17);

        $sequenceCode = 1;

        $dataHeader->accordNumber = $data->accordNumber;
        $dataHeader->companyName  = $dataLegalPerson->fakeName;
        $dataHeader->bankCode     = $dataBank->bankId;
        $dataHeader->bankName     = $data->bankName;
        $dataHeader->sequenceCode = $sequenceCode;

        $header[] = $this->header($dataHeader);

        $businessBankTarget = new BusinessFinanceBusBankTarget();
        $dataBankTarget     = $businessBankTarget->listOpenBankTarget($data->bankId);

        // Need get all titles on period speficied in form and generate the details of file.
        if ( is_array($dataBankTarget[0]) )
        {
            foreach ( $dataBankTarget as $dbt )
            {
                    $dataDetails->pupilContract = $dbt[0];
                    $dataDetails->pupilAgency   = $dbt[1];
                    $dataDetails->pupilAccount  = $dbt[2];
                    $dataDetails->maturityDate  = $dbt[3];
                    $dataDetails->debitValue    = $dbt[4];
                    $dataDetails->moneyCode     = $dbt[5];
                    $dataDetails->invoiceId     = $dbt[6];

                    $details[] = $this->details($data);
            }
        }
    }
}
?>
