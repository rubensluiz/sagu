<?php
 /**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This class generate the file for export about automatic debit
 *
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 14/06/2006
 *
 **/
 
$MIOLO->getClass($module, 'DefaultFormat');

/**
 *
 * Class to generate the file for export about automatic debit
 *
 * This class generates the automatic debit for bank 001 - BANCO DO BRASIL
 * (Brazilian bank registered on Central Bank of Brazil)
 * This file follows the rules of document "Regulamentação do Padrão Default para o 
 * intercâmbio de informações através de arquivos 'ASCII'" created on year 2000.
 *
 */
class RemittanceAutomaticDebit001
{
    private $business;
    private $invoiceData;
    private $string;
    
    
    /**
     * Get the header and separate data in a array
     * 
     * @param: $data (string): Header string data
     *
     * @return: (array): Array containing string data
     *
     */
    private function header($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $companyData = $this->business->getCompanyData(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));
        $bankData = $this->business->getBankAccountData($data->bankAccountId);

        //$fileSequence = $this->business->getFileSequence();
        
        $str[] = 'A';                                                               // Código do registro (A) -> Cabeçalho
        $str[] = '1';                                                               // Código da remessa 
        $str[] = DefaultFormat::formatField($bankData->accordCode, 'N', 5);         // Convênio
        $str[] = DefaultFormat::formatField(' ', 'A', 15);                          // Brancos
        $str[] = DefaultFormat::formatField($companyData->acronym, 'A', 20);        // Empresa
        $str[] = DefaultFormat::formatField($bankData->bankId, 'N', 3);             // Id do banco
        $str[] = DefaultFormat::formatField('BANCO DO BRASIL S.A.', 'A', 20);       // Nome do banco
//        $str[] = DefaultFormat::formatField($bankData->bankDescription, 'A', 20);   // Nome do banco
        $str[] = date('Ymd');                                                       // Data atual (Ymd) -> php format
        $str[] = DefaultFormat::formatField($data->sequenceFile, 'N', 6);           // Sequencia da remessa
        $str[] = '04';                                                              // Versão do layout do arquivo atual
        $str[] = 'DEBITO AUTOMATICO';                                               // Identificação do serviço
        $str[] = DefaultFormat::formatField(' ', 'A', 52);                          // Brancos
        $header = implode($str);
        return $header;
    }


   /**  
    * Get the details
    * 
    * @param: $data (array): Array of strings to extract information
    *
    * @return: (array): Bidimensional array containing the information separated in each field and line
    *
    */
    private function details($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $details = $this->business->listDetails($data);
        
        if (is_array($details[0]))
        {
            $this->invoiceInfo->registers = 2;
            foreach ($details as $dr)
            {
                if ($dr[8] !== NULL)
                {
                    $this->invoiceData->invoiceIncentives[] = array($originalRow[0], $dr[6], $dr[5], $originalRow[3], $originalRow[4], $dr[8]);
                }
                else
                {
                    $originalRow[0] = $dr[0];
                    $dr[0] = DefaultFormat::formatField($dr[0], 'N', 15);   // Colocando o tamanho padrão do código da pessoa como 15
                    $originalRow[3] = $dr[3];
                    $dr[3] = SAGU::formatDate($dr[3], 'yyyymmdd');
                    $originalRow[4] = $dr[4];
                    $dr[4] = SAGU::returnOnlyNumbers($dr[4]);
                    
                    $str[] = 'E';                                           // Código do tipo de registro (débito automático)
                    $str[] = DefaultFormat::formatField($dr[0], 'A', 25);   // Código do cliente na empresa (personId normalizado)
                    $str[] = DefaultFormat::formatField($dr[1], 'N', 4);    // Código da agência (sem DV)
                    $str[] = DefaultFormat::formatField($dr[2], 'N', 14);   // Código da conta corrente (sem DV)
                    $str[] = DefaultFormat::formatField($dr[3], 'N', 8);    // Data do débito
                    $str[] = DefaultFormat::formatField($dr[4], 'N', 15);   // Valor do débito
                    $str[] = '03';                                          // Código da Moeda
                    $str[] = DefaultFormat::formatField($dr[5], 'A', 60);   // Uso da empresa (código do título)
                    $str[] = DefaultFormat::formatField(' ', 'A', 20);      // Brancos
                    $str[] = '0';                                           // Código do movimento
                    $this->invoiceData->invoiceRemittance[] = array($originalRow[0], $dr[6], $dr[5], $originalRow[3], $originalRow[4]);
                    $this->invoiceInfo->registers++;
                    $this->invoiceInfo->value[] = $originalRow[4];
                    
                    if (isset($this->invoiceData->invoiceTotal[$originalRow[3]]))
                    {
                        $this->invoiceData->invoiceTotal[$originalRow[3]]++;
                    }
                    else
                    {
                        $this->invoiceData->invoiceTotal[$originalRow[3]] = 1;
                    }

                    $string[] = implode($str);
                    unset($str);
                }
            }
            return $string;
        }
        else
        {
            $MIOLO->information(_M('O sistema não retornou valores', $module), $MIOLO->getActionURL($module, $action));
        }
    }
    
    /**  
     * Get the trailer
     * 
     * @param: $data (string): String to process the trailer
     *
     * @return: (array): Bidimensional array containing the information separated in each field and line
     *
     */
    private function footer($data)
    {
        $totalRegisters = $this->invoiceInfo->registers;
        $totalValue     = SAGU::returnOnlyNumbers(SAGU::calcNumber(implode('+', $this->invoiceInfo->value), true));
        
        $trailer[] = 'Z';                                                   // Código do registro
        $trailer[] = DefaultFormat::formatField($totalRegisters, 'N', 6);   // Total de registros no arquivo
        $trailer[] = DefaultFormat::formatField($totalValue, 'N', 17);      // Valor total dos registros no arquivo
        $trailer[] = DefaultFormat::formatField(' ', 'A', 126);             // Brancos

        $trailer = implode($trailer, '');
        return $trailer;
    }

   
   /** 
    * Main function to generate remittance
    *
    * @param $data (object): Object containing the form values to handle the remittance
    *
    * @returns true if succeed, otherwise false
    *
    */
    public function RemittanceAutomaticDebit001($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $this->business = new BusinessFinanceBusRemittanceAutomaticDebit001();

        $header[] = $this->header($data);
        $details  = $this->details($data);
        $footer[] = $this->footer($data);
        
        if (is_array($details))
        {
            $this->string = implode("\n", array_merge($header, $details, $footer));
        }
        else
        {
            $this->string = implode("\n", array_merge($header, $footer));
        }

        $dataConfig->value        = $data->sequenceFile;
        $dataConfig->moduleConfig = 'FINANCE';
        $dataConfig->parameter    = 'SEQ_BANK_REMITTANCE_AUTOMATIC_DEBIT_'.$data->bankId;
        $businessConfig = new BusinessBasicBusConfig();
        $businessConfig->updateConfigValue($dataConfig);
    }

   /**
    * Get the main data and process this (separate header, detais and trailer)
    *
    * @param: No parameters needed
    *
    * @return (object): Object containing separated data information
    *
    */
    public function returnInvoiceData()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        
        if (is_array($this->invoiceData->invoiceTotal))
        {
            $data = $this->invoiceData->invoiceTotal;
            unset($this->invoiceData->invoiceTotal);
            foreach ($data as $key => $it)
            {
                $this->invoiceData->invoiceTotal[] = array($key, $it);
            }
        }

        if (is_array($this->invoiceData->invoiceRemittance))
        {
            foreach ($this->invoiceData->invoiceRemittance as $ir)
            {
                $total[] = $ir[4];
            }
            $this->invoiceData->invoiceRemittance[] = array('', '', '', '<b>'._M('Total', $module).'</b>', SAGU::calcNumber(implode($total, '+'), true));
            unset($total);
        }
        if (is_array($this->invoiceData->invoiceIncentives))
        {
            foreach ($this->invoiceData->invoiceIncentives as $ir)
            {
                $total[] = $ir[4];
            }
            $this->invoiceData->invoiceIncentives[] = array('', '', '', '<b>'._M('Total', $module).'</b>', SAGU::calcNumber(implode($total, '+'), true), '');
            unset($total);
        }

        return $this->invoiceData; 
    }

    /**
     * Return the string containing the remittance
     *
     * @param: No parameters needed
     *
     * @return (string): The string for remittance
     *
     */
    public function returnString()
    {
        return $this->string;
    }

}
?>
