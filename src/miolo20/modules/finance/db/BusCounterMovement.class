<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finCounterMovement table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samnuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * 
 * @since
 * Class created on 03/01/2006
 *
 **/

/**
 * Class to manipulate the finCounterMovement table
 **/
class BusinessFinanceBusCounterMovement extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listCounterMovement()
    {
    }

    /** 
     * Return a specific record from the database
     *
     * @param $voucherMessagesId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getCounterMovement($counterMovementId)
    {
        $sql = 'SELECT A.counterMovementId,
                        ROUND(A.value, \'' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . '\'),
                        TO_CHAR(A.movementDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                        A.operation,
                        A.speciesId,
                        A.observation,
                        A.invoiceId,
                        A.operationId,
                        A.costCenterId,
                        B.description,
                        A.voucher,
                        A.responsibleuser,
                        A.userName,
                        TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                        A.bankAccountId,
                        A.openCounterId,
                        A.movimentacaoEstornada
                  FROM finCounterMovement   A
            INNER JOIN accCostCenter B
                    ON (b.costCenterId = A.costCenterId)
                 WHERE A.counterMovementId = ?';

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $counterMovementId));
        
        $counterMovement = new FinCounterMovement();
        
        list ( $counterMovement->counterMovementId,
               $counterMovement->value,
               $counterMovement->movementDate,
               $counterMovement->operation,
               $counterMovement->speciesId,
               $counterMovement->observation,
               $counterMovement->invoiceId,
               $counterMovement->operationId,
               $counterMovement->costCenterId,
               $counterMovement->costCenterDescription,
               $counterMovement->voucher,
               $counterMovement->responsibleuser,
               $counterMovement->userName,
               $counterMovement->dateTime,
               $counterMovement->bankAccountId,
               $counterMovement->openCounterId,
               $counterMovement->movimentacaoEstornada ) = $result[0];
        
        return $counterMovement;
    }

    /** 
     * Return a specific record from the database
     *
     * @param $operationId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getCounterForOperator($operatorId)
    {
        $sql = 'SELECT A.counterId    
                  FROM finCounter A
            INNER JOIN basUnit C
                    ON ( A.unitId = C.unitId )
                 WHERE A.counterId 
                    IN ( SELECT O.counterId 
                           FROM finopenCounter O
                           WHERE O.openCounterId NOT IN ( SELECT E.openCounterId
                                                            FROM finopenCounter E
                                                      INNER JOIN fincloseCounter D
                                                              ON (E.openCounterId = D.openCounterId))
                                                             AND O.operatorId = ? )';
        
        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $operatorId));
        
        return $result[0][0];
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchCounterMovement($data)
    {
        $sql = 'SELECT A.counterMovementId,
                       TO_CHAR(A.movementDate,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.speciesId,
                       C.description,
                       ROUND(A.value, 2),
                       A.operation,
                       A.observation,
                       A.opencounterid,
                       A.invoiceId,
                       A.operationId,
                       D.description,
                       A.costCenterId,
                       B.description,
                       A.username,
                       A.bankAccountId
                  FROM finCounterMovement A
             LEFT JOIN accCostCenter B
                    ON (b.costCenterId = A.costCenterId)
             LEFT JOIN finOperation D
                    ON (D.operationId = A.operationId)
            INNER JOIN ONLY finSpecies C
                    ON (A.speciesId = C.speciesId) ';

        $where = '';
        unset($args);
        
        if ( strlen($data->openCounterId) > 0 )
        {
            $where .= '    AND   A.opencounterid = ?';
            $args[] = $data->openCounterId;
        }
        
        if ( strlen($data->counterMovementId) > 0 )
        {
            $where .= '    AND   A.counterMovementId = ?';
            $args[] = $data->counterMovementId;
        }
        
        if ( strlen($data->value) > 0 )
        {
            $where .= '    AND   A.value = ?';
            $args[] = $data->value;
        }
        if ( strlen($data->movementDate) > 0 )
        {
            $where .= '    AND   A.movementDate::date = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $args[] = $data->movementDate;
        }
        if ( strlen($data->operation) > 0 )
        {
            $where .= '    AND   A.operation = ?';
            $args[] = $data->operation;
        }
        if ( strlen($data->speciesId) > 0 )
        {
            $where .= '    AND   A.speciesId = ?';
            $args[] = $data->speciesId;
        }
        if ( strlen($data->invoiceId) > 0 )
        {
            $where .= '    AND   A.invoiceId = ?';
            $args[] = $data->invoiceId;
        }
        if ( strlen($data->operationId) > 0 )
        {
            $where .= '    AND   A.operationId = ?';
            $args[] = $data->operationId;
        }
        if ( strlen($data->costCenterId) > 0 )
        {
            $where .= '    AND   A.costCenterId = ?';
            $args[] = $data->costCenterId;
        }
        if ( strlen($data->bankAccountId) > 0 )
        {
            $where .= '    AND   A.bankAccountId = ?';
            $args[] = $data->bankAccountId;
        }
        if ( $data->lancamentoNaoEstornado )
        {
            $where .= ' AND CASE WHEN (SELECT COUNT(*) > 0 FROM finEntry WHERE A.countermovementId = countermovementId) 
                                 THEN 
                                     (SELECT COUNT(*) > 0 FROM finEntry WHERE A.countermovementId = countermovementId AND lancamentoEstornado IS FALSE)
                                 ELSE 
                                     TRUE
                            END ';
        }
        
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 8) . ' ORDER BY A.movementDate DESC ';
            $db = $this->getDatabase();
            
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertCounterMovement($data, $returnId = false)
    {        
        if ( !$data->openCounterId )
        {
            throw new Exception(_M('Não há um caixa aberto para este usuário.'));
        }     
        
        $movementDateColumn = "";
        $movementDate = "";
        
        if ( strlen($data->movementDate) > 0 )
        {
            $movementDateColumn = "movementDate, ";
            $movementDate = " timestamptodb('{$data->movementDate}'), ";
        }
        
        $sql = "INSERT INTO finCounterMovement
                            (openCounterId,
                             value,
                             {$movementDateColumn}
                             operation,
                             speciesId,
                             observation,
                             invoiceId,
                             operationId,
                             voucher,
                             costCenterId,
                             responsibleuser,
                             tituloid,
                             bankAccountId,
                             transferenciaDeCaixaId,
                             movimentacaoEstornada)
                     VALUES (?,?,{$movementDate}?,?,?,?,?,?,?,?,?,?,?,?)";

        $args = array(
            $data->openCounterId,
            $data->value,
            $data->operation,
            $data->speciesId,
            $data->observation,
            $data->invoiceId,
            $data->operationId,
            $data->voucher,
            $data->costCenterId,
            $data->responsibleuser,
            $data->tituloId,
            $data->bankAccountId,
            $data->transferenciaDeCaixaId,
            SAGU::NVL($data->movimentacaoEstornada, DB_FALSE)
        );

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));
        
        if ( $returnId )
        {
            $sql = "SELECT MAX(counterMovementId) FROM finCounterMovement";
            $return = SDatabase::query($sql);
            
            $result = $return[0][0];
        }

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateCounterMovement($data)
    {
        $sql = 'UPDATE finCounterMovement
                   SET openCounterId = ?,
                       value = ?,
                       movementDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       operation = ?,
                       speciesId = ?,
                       observation = ?,
                       invoiceId = ?,
                       operationId = ?,
                       costCenterId = ?,
                       voucher = ?,
                       responsibleuser = ?,
                       bankAccountId = ?,
                       movimentacaoEstornada = ?
                 WHERE counterMovementId  = ?';
        
        $args = array($data->openCounterId,
                      $data->value,
                      $data->movementDate,
                      $data->operation,
                      $data->speciesId,
                      $data->observation,
                      $data->invoiceId,
                      $data->operationId,
                      $data->costCenterId,
                      $data->voucher,
                      $data->responsibleuser,
                      $data->bankAccountId,
                      $data->movimentacaoEstornada,
                      $data->counterMovementId);
        
        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);
        for ( $i = 0; $i < count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }
    
    
    /**
     * Atualiza um usuario de um registro
     
     * @param int $counterMovementId
     * @param string $userName 
     */
    public function updateUserName($counterMovementId, $userName)
    {
        return SDatabase::execute("UPDATE finCounterMovement SET userName = ? WHERE counterMovementId = ?", array(
            $userName,
            $counterMovementId
        ));
    }
    
    /**
     * Delete a record
     *
     * @param $counterMovementId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteCounterMovement($counterMovementId)
    {
        $sql = 'DELETE FROM finCounterMovement
                      WHERE counterMovementId = ?';

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $counterMovementId));
        
        return $result;
    
    }

    /**
     * Calculate a value from operator
     *
     * @param $valueC (numeric): Value of credit
     * @param $valueD (numeric): Value of debit
     *
     * @return (result) Value
     *
     **/
    public function totalValue($valueC, $valueD)
    {
        $sql = ' SELECT SUM(' . $valueC . ' - ' . $valueD . ') ';
        
        $db = $this->getDatabase();
        $result = $db->query($sql);
        
        return $result[0][0];
    }

    /**
     * Calculate a value from operator
     *
     * @param $valueC (numeric): Value of credit
     * @param $valueD (numeric): Value of debit
     *
     * @return (result) Value
     *
     **/
    public function totalValueD($valueC, $valueD)
    {
        $sql = ' SELECT SUM(' . $valueC . ' - (-1 * ' . $valueD . ') ) ';
        
        $db = $this->getDatabase();
        $result = $db->query($sql);

        return $result[0][0];
    }

    /**
     * Calculate a value from operator
     *
     * @param $valueC (numeric): Value of credit
     * @param $valueD (numeric): Value of debit
     *
     * @return (result) Value
     *
     **/
    public function totalValueToGrid($data)
    {
        $sql = 'SELECT ROUND(SUM(CASE WHEN A.operation = \'C\'
                                      THEN A.value
                                      ELSE A.value * -1
                                 END), 2)
                  FROM finCounterMovement A
            INNER JOIN ONLY finSpecies C
                    ON (A.speciesId = C.speciesId) ';

        $where = '';
        unset($args);
        
        if ( strlen($data->openCounterId) > 0 )
        {
            $where .= '    AND   A.opencounterid = ?';
            $args[] = $data->openCounterId;
        }
        if ( strlen($data->counterMovementId) > 0 )
        {
            $where .= '    AND   A.counterMovementId = ?';
            $args[] = $data->counterMovementId;
        }
        if ( strlen($data->value) > 0 )
        {
            $where .= '    AND   A.value = ?';
            $args[] = $data->value;
        }
        if ( strlen($data->movementDate) > 0 )
        {
            $where .= '    AND   A.movementDate::date = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $args[] = $data->movementDate;
        }
        if ( strlen($data->operation) > 0 )
        {
            $where .= '    AND   A.operation = ?';
            $args[] = $data->operation;
        }
        if ( strlen($data->speciesId) > 0 )
        {
            $where .= '    AND   A.speciesId = ?';
            $args[] = $data->speciesId;
        }
                if ( strlen($data->operationId) > 0 )
        {
            $where .= '    AND   A.operationId = ?';
            $args[] = $data->operationId;
        }
        if ( strlen($data->costCenterId) > 0 )
        {
            $where .= '    AND   A.costCenterId = ?';
            $args[] = $data->costCenterId;
        }
        if ( strlen($data->bankAccountId) > 0 )
        {
            $where .= '    AND   A.bankAccountId = ?';
            $args[] = $data->bankAccountId;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 8) . ' ';
            $db = $this->getDatabase();
            
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result[0][0];
    }
    
    public function getLastInsertId()
    {
        return current(current(SDatabase::query("SELECT MAX(countermovementid) FROM fincountermovement")));
    }

    /**
     * Calcula o total de movimentações de determinada espécie
     *
     * @param $openCounterId (int): código da abertura de caixa
     * @param $speciesId (int): código da espécie
     *
     * @return (data)
     *
     **/
    public function totalSpeciesValue($openCounterId, $speciesId)
    {

        $sql = 'SELECT ROUND (
                 ( CASE WHEN(SELECT SUM(CASE WHEN A.operation = \'C\' THEN A.value ELSE A.value * -1 END)
                               FROM finCounterMovement A
                              WHERE A.openCounterId = ?
                                AND A.speciesId = ?) IS NOT NULL THEN(SELECT SUM(CASE WHEN A.operation = \'C\' THEN A.value ELSE A.value * -1 END)
                                                                            FROM finCounterMovement A
                                                                           WHERE A.openCounterId = ?
                                                                             AND A.speciesId = ?) ELSE 0 END), 2)';

        if ( strlen($openCounterId) > 0 )
        {
            $args[] = $openCounterId;
            $args[] = $speciesId;
            $args[] = $openCounterId;
            $args[] = $speciesId;
        }

        $db = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql, $args));

        $data = new StdClass();
        if ( is_array($result) )
        {
            if ( $result[0][0] > 0 )
            {
                $data->operation = 'C';
                $data->value = $result[0][0];
            }
            else
            {
                $data->operation = 'D';
                $data->value = abs($result[0][0]);
            }
        }
        return $data;
    }
}

?>
