<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * This file handles the connection and actions for finEnrollFee table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Joao Francisco Padilha Souza [joao@solis.com.br]
 * 
 * @since
 * Class created on 04/01/2006
 *
 **/

/**
 * Class to manipulate the finEnrollFee table
 **/
class BusinessFinanceBusEnrollFee extends sBusiness
{
    /**
     * Return a specific record from the database
     *
     * @param $args (array): Array of ( learningPeriodId, operationId, isFreshman ), in that order.
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getEnrollFee($args)
    {
        $sql = 'SELECT A.learningPeriodId,
                       A.operationId,
                       B.description,
                       A.isFreshMan,
                       A.valueIsPercent,
                       A.value,
                       A.parcelsNumber,
                       A.operacaoCancelamento,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\')
                  FROM finEnrollFee A
            INNER JOIN finOperation B
                    ON B.operationId = A.operationId
                 WHERE A.learningPeriodId = ?
                   AND A.operationId = ?
                   AND A.isFreshMan = ?';
        
        $result = $this->getDatabase()->query(SAGU::prepare($sql,$args));

        $enrollFee = new FinEnrollFee();

        list ( $enrollFee->learningPeriodId,
               $enrollFee->operationId,
               $enrollFee->operationDescription,
               $enrollFee->isFreshMan,
               $enrollFee->valueIsPercent,
               $enrollFee->value,
               $enrollFee->parcelsNumber,
               $enrollFee->operacaoCancelamento,
               $enrollFee->userName,
               $enrollFee->dateTime ) = $result[0];

        return $enrollFee; 
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchEnrollFee($data)
    {
        $sql = 'SELECT  A.learningPeriodId,
                        B.description,
                        A.operationId,
                        C.description,
                        A.isFreshMan,
                        A.valueIsPercent,
                        ROUND(A.value, '. SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') .'),
                        A.parcelsNumber,
                        A.operacaoCancelamento,
                        D.description
                  FROM  finEnrollFee A
            INNER JOIN  acdLearningPeriod B
                    ON  (A.learningPeriodId = B.learningPeriodId)
            INNER JOIN  finOperation C
                    ON  (A.operationId = C.operationId)
            INNER JOIN  finOperation D
                    ON  (A.operacaoCancelamento = D.operationId)';

        $where = '';
        $args = array();
        if ( strlen($data->learningPeriodId) > 0 )
        {
            $where .= '    AND   A.learningPeriodId = ?';
            $args[] = $data->learningPeriodId;
        }
        if ( strlen($data->periodId) > 0 )
        {
            $where .= '    AND   B.periodId = ?';
            $args[] = $data->periodId;
        }
        if ( strlen($data->courseId) > 0 )
        {
            $where .= '    AND   B.courseId = ?';
            $args[] = $data->courseId;
        }
        if ( strlen($data->operationId) > 0 )
        {
            $where .= '    AND   A.operationId = ?';
            $args[] = $data->operationId;
        }
        if ( strlen($data->isFreshMan) > 0 )
        {
            $where .= '    AND   A.isFreshMan = ?';
            $args[] = $data->isFreshMan;
        }
        if ( strlen($data->valueIsPercent) > 0 )
        {
            $where .= '    AND   A.valueIsPercent = ?';
            $args[] = $data->valueIsPercent;
        }
        if ( strlen($data->value) > 0 )
        {
            $where .= '    AND   A.value = ?';
            $args[] = $data->value;
        }
        if ( strlen($data->parcelsNumber) > 0 )
        {
            $where .= '    AND   A.parcelsNumber = ?';
            $args[] = $data->parcelsNumber;
        }
        if ( strlen($data->operacaoCancelamento) > 0 )
        {
            $where .= '    AND   A.operacaoCancelamento = ?';
            $args[] = $data->operacaoCancelamento;
        }
        if ( strlen($data->periodId) > 0 )
        {
            $where .= '    AND   B.periodId = ?';
            $args[] = $data->periodId;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where,8) .
                    ' ORDER BY C.description';

            $result = $this->getDatabase()->query(SAGU::prepare($sql,$args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertEnrollFee($data)
    {
        $sql = 'INSERT INTO finEnrollFee
                            (learningPeriodId,
                            operationId,
                            isFreshMan,
                            valueIsPercent,
                            value,
                            parcelsNumber,
                            operacaoCancelamento)
                     VALUES (?,?,?,?,?,?,?)';

        $args = array( $data->learningPeriodId,
                       $data->operationId,
                       $data->isFreshMan,
                       $data->valueIsPercent,
                       $data->value,
                       $data->parcelsNumber,
                       $data->operacaoCancelamento);

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateEnrollFee($data)
    {
        $sql = 'UPDATE finEnrollFee
                   SET valueIsPercent = ?,
                       value = ?,
                       parcelsNumber = ?,
                       operacaoCancelamento = ?
                 WHERE learningPeriodId  = ?
                   AND operationId = ?
                   AND isFreshMan = ?';

        $args = array( $data->valueIsPercent,
                       $data->value,
                       $data->parcelsNumber,
                       $data->operacaoCancelamento,
                       $data->learningPeriodId,
                       $data->operationId,
                       $data->isFreshMan );

        $sqls = SAGU::prepare($sql,$args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $enrollFeeId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteEnrollFee($data)
    {
        $sql = 'DELETE FROM finEnrollFee
                      WHERE learningPeriodId = ?
                        AND operationId = ?
                        AND isFreshMan = ?';

        $args = array( $data->learningPeriodId,
                       $data->operationId,
                       $data->isFreshMan );

        $result = $this->getDatabase()->execute(SAGU::prepare($sql,$args));
        return $result;
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function isExistEnrollFee($data)
    {
        $sql = 'SELECT learningPeriodId
                  FROM finEnrollFee
                 WHERE learningPeriodId = ?
                   AND operationId      = ?
                   AND isFreshMan       = ?'; 

        $args = array( $data->learningPeriodId,
                       $data->operationId,
                       $data->isFreshMan );

        $result = $this->getDatabase()->query(SAGU::prepare($sql,$args));

        return $result[0][0];
    }

    public function generateEnrollFeeByInvoiceId($invoiceId)
    {
        $MIOLO = MIOLO::getInstance();
        $module = 'finance';

        try
        {
            // obter título a processar
            $busReceivableInvoice = new BusinessFinanceBusReceivableInvoice();
            $invoice = $busReceivableInvoice->getInvoice($invoiceId);
            
            $busContract = new BusinessAcademicBusContract();

            // lançamentos do título
            $busEntry = new BusinessFinanceBusEntry();

            // obter as taxas aplicáveis ao título atual
            $enrollFees = $this->getApplicableEnrollFees($invoiceId);

            // obter as operações sobre as quais incidirão as taxas
            $busDefaultOperations = new BusinessFinanceBusDefaultOperations();
            $operationsToConsider = $busDefaultOperations->getEnrollOperations();

            // para cada taxa de matrícula
            for ( $i=0; $i<count($enrollFees); $i++ )
            {
                $fee = $enrollFees[$i];
                
                // para cada lançamento do título
                $entries = $busEntry->getInvoiceEntries($invoiceId);
                for ( $j=0; $j<count($entries); $j++ )
                {
                    $contractId = $entries[$j]->contractId;
                    
                    // Caso nao tenha contrato associado a esta entrada
                    if ( strlen($contractId) <= 0 )
                    {
                        continue;
                    }
                    
                    $busLearningPeriod = new BusinessAcademicBusLearningPeriod();
                    $periodoLetivo = $busLearningPeriod->getLearningPeriod($fee->learningPeriodId);
                    
                    
                    $isFreshman = $busContract->isFreshmanByPeriod($contractId, $periodoLetivo->periodId);

                    // se a operação do lançamento é de matrícula
                    // e parcela sendo processada deve receber taxa
                    // e ( aluno é calouro e taxa é para calouros
                    //     OU aluno é veterano e taxa é para veteranos )
                    if ( in_array($entries[$j]->operationId, $operationsToConsider)
                         && $invoice->parcelNumber <= $fee->parcelsNumber
                         && ( ($fee->isFreshMan == DB_TRUE && $isFreshman)
                               || $fee->isFreshMan == DB_FALSE && ! $isFreshman) )
                    {
                        // gerar novo lançamento ou atualizar existente
                        $entry = new FinEntry();
                        $entry->invoiceId = $invoiceId;
                        $entry->isAccounted = DB_FALSE;
                        $entry->creationType = 'A'; // gerado automaticamente pelo sistema
                        $entry->costCenterId = $invoice->costCenterId;
                        $entry->entryDate = SAGU::getDateNow();
                        $entry->operationId = $fee->operationId;
                        $entry->learningPeriodId = $fee->learningPeriodId;
                        $entry->contractId = $entries[$i]->contractId;
                        $entry->learningPeriodId = $fee->learningPeriodId;
                        $entry->value = 0;

                        // procurar por outro lançamento igual. se existir, não inserir novo, pois
                        // a taxa de matrícula do contrato já terá sido gerada
                        $filters = new stdClass();
                        $filters->invoiceId = $entry->invoiceId;
                        $filters->contractId = $entry->contractId;
                        $filters->operationId = $entry->operationId;
                        $filters->learningPeriodId = $entry->learningPeriodId;

                        if ( count($busEntry->searchEntry($filters)) <= 0 )
                        {
                            // se já existir um lançamento igual, agrupar valor (se assim configurado)
                            if ( SAGU::getParameter('FINANCE', 'AGGLUTINATE_INVOICE_ENTRIES') == 'YES' )
                            {
                                $filters = new stdClass();
                                $filters->invoiceId = $entry->invoiceId;
                                $filters->isAccounted = DB_FALSE;
                                $filters->creationType = $entry->creationType;
                                $filters->costCenterId = $entry->costCenterId;
                                $filters->operationId = $entry->operationId;
                                $filters->contractId = $entry->contractId;
                                $filters->learningPeriodId = $entry->learningPeriodId;

                                $search = $busEntry->searchEntry($filters);

                                if ( count($search) > 0 )
                                {
                                    $entry = $busEntry->getEntry($search[0][0]);
                                }
                            }

                            // se valor é percentual, obter a soma dos lançamentos do tipo mensalidade
                            // para o título atual e aplicar o percentual para definir o valor
                            if ( $fee->valueIsPercent == DB_TRUE )
                            {
                                // aplicar percentual sobre lançamento atual, que será sempre de matrícula ou renovação
                                $feeValue = SAGU::calcNumber($entries[$j]->value . ' * (' . $fee->value . ' / 100)');
                            }
                            // se é valor fixo, simplesmente gerar novo lançamento
                            else
                            {
                                $feeValue = $fee->value;
                            }

                            // se o lançamento já existir, o valor será valor atual + valor da taxa
                            // se não existir, o valor atual será zero + valor da taxa
                            $entry->value = SAGU::calcNumber($entry->value . ' + ' . $feeValue, true, 2);

                            // se não existe um lançamento compatível (ou não está configurado para aglutinar)
                            if ( is_null($entry->entryId) )
                            {
                                $entry->comments = _M('Parcela @1 de @2 da taxa @3.', $module, $invoice->parcelNumber, $fee->parcelsNumber, $fee->operationId . ' - ' . $fee->operationDescription);
                                if ( ! ( strlen($busEntry->insertEntry($entry)) > 0 ) )
                                {
                                    throw new Exception(_M('Erro inserindo taxa.', $module));
                                }
                            }
                            else
                            {
                                $entry->comments .= "\n" . _M('Aglutinada parcela @1 de @2 da taxa @3.', $module, $invoice->parcelNumber, $fee->parcelsNumber, $fee->operationId . ' - ' . $fee->operationDescription);
                                if ( ! $busEntry->updateEntry($entry) )
                                {
                                    throw new Exception(_M('Erro atualizando taxa de matrícula.', $module));
                                }
                            }
                        }
                    }
                }
            }
        }
        catch ( Exception $e )
        {
            // if we get here, a real error occurred, so we rethrow it
            throw new Exception($e->getMessage());
        }

        return true;
    }

    /**
     * Obtém as taxas de matrícula aplicáveis ao título informado, com base nos
     * períodos letivos dos lançamentos do título.
     *
     * @param (integer) $invoiceId Código do título.
     *
     * @return (array) Array de objetos do tipo FinEnrollFee ou array vazio, se nenhum período letivo encontrado.
     */

    public function getApplicableEnrollFees($invoiceId)
    {
        $MIOLO = MIOLO::getInstance();

        $busEntry = new BusinessFinanceBusEntry();
        $entries = $busEntry->getInvoiceEntries($invoiceId);

        $learningPeriods = array();
        for ( $i=0; $i<count($entries); $i++ )
        {
            if ( strlen($entries[$i]->learningPeriodId) > 0 )
            {
                // avoid adding duplicates, as there may exists lots of entries with
                // the same learningPeriodId
                $learningPeriods[$entries[$i]->learningPeriodId] = $entries[$i]->learningPeriodId;
            }
        }

        $retVal = array();
        if ( count($learningPeriods) > 0 )
        {
            $learningPeriods = array_keys($learningPeriods);

            $sql = 'SELECT learningPeriodId,
                           operationId,
                           isFreshMan
                      FROM FinEnrollFee
                     WHERE learningPeriodId IN (' . implode(',', $learningPeriods) . ')';

            $result = $this->getDatabase()->query($sql);
            for ( $i=0; $i<count($result); $i++ )
            {
                // pkey is learningPeriodId, operationId and isFreshMan
                $pkey = array($result[$i][0],
                              $result[$i][1],
                              $result[$i][2]);

                $retVal[] = $this->getEnrollFee($pkey);
            }
        }

        return $retVal;
    }
}

?>
