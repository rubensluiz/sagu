<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * This file handles the connection and actions for finDefaultOperations table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * 
 * @since
 * Class created on 06/12/2005
 *
 **/

/**
 * Class to manipulate the finDefaultOperations table
 **/
class BusinessFinanceBusDefaultOperations extends sBusiness
{
    /**
     * Return a specific record from the database
     *
     * @param $incomeForecastId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getDefaultOperations()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $fields = $this->getOperationFields();
        $cols = implode(', ', $fields);
        $sql =  "SELECT userName,
                        TO_CHAR(dateTime, GETPARAMETER('BASIC', 'MASK_DATE')),
                        {$cols}
                   FROM finDefaultOperations ";

        $return = $this->getDatabase()->query($sql);
        
        if ( is_array($return) )
        {
            $defaultOperations = new FinDefaultOperations();
            
            $i=0;
            $defaultOperations->userName = $return[0][$i++];
            $defaultOperations->dateTime = $return[0][$i++];

            foreach ( $fields as $f )
            {
                $defaultOperations->$f = $return[0][$i++];
            }
		           
            return $defaultOperations;
       }
       else
       {
            $MIOLO->Error(_M('Não foi possível obter a lista de operações padrão. Verifique o cadastro correspondente.', $module));
       }
    }
    
    
    /**
     * Return a specific record from the database
     *
     * @param $column (String)
     *
     * @return (Integer): Return value of column
     *
     **/
    public function getDefaultOperation($column)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $sql =  "SELECT {$column} FROM finDefaultOperations";

        $value = $this->getDatabase()->query($sql);
        
        return $value[0][0];
    }


    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertDefaultOperations($data)
    {
        $fields = $this->getOperationFields();
        $cols = implode(', ', $fields);
        
        $curingas = array();
        foreach ( $fields as $f )
        {
            $curingas[] = '?';
        }
        $_curingas = implode(', ', $curingas);
        
        $sql = "INSERT INTO finDefaultOperations ({$cols}) VALUES ({$_curingas})";
        
        $args = array();
        foreach ( $fields as $f )
        {
            $args[] = $data->$f;
        }
        
        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateDefaultOperations($data)
    {
        $fields = $this->getOperationFields();
        $update = array();
        foreach ( $fields as $f )
        {
            $update[] = "{$f} = ?";
        }
        $_update = implode(', ', $update);
        
        $sql = "UPDATE finDefaultOperations SET {$_update} WHERE 1 = 1";

        $args = array();
        foreach ( $fields as $f )
        {
            $args[] = $data->$f;
        }

        $sqls = SAGU::prepare($sql,$args);
        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }
        return $result;
    }

    /**
     * Retorna um array contendo os ids das operações que são relacionadas com matrícula.
     *
     * @return (array) Array contendo todas as operações que são relacionadas com matrícula
     */
    public function getEnrollOperations()
    {
        $defaultOps = $this->getDefaultOperations();

        // obter operações de renovação (veteranos) e matrícula (calouros)
        $retVal = array($defaultOps->renewalOperation, $defaultOps->enrollOperation);

        // retornar um array com os ids de operações
        return array_unique($retVal);
    }
    
    
    /**
     * Obtem campos da tabela finDefaultOperations, para utilizar na insercao, edicao, etc
     *
     * @return array
     */
    private function getOperationFields()
    {
        $vars = get_object_vars( new FinDefaultOperations() );
        
        unset($vars['userName']);
        unset($vars['dateTime']);
        unset($vars['ipAddress']);
        
        return array_keys($vars);
    }
}
?>
