<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * This class contains methods to get, search, list, insert,
 * update and delete register into acdCourseOccurrence table.
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * This class was created 2010/11/23
 *
 **/

class BusinessFinanceBusPolicyDiscount extends sBusiness
{
    private $columns;
    private $sql;
    
    /**
     * Class constructor
     **/
    //function BusinessFinanceBusPolicyDiscount()
    public function __construct() 
    {
        //Columns
        $this->columns = $this->getTableColumns();        
        //Sql
        $this->sql = $this->getSql();

        parent::__construct();
    }

    /**
     * Get table columns
     *
     * @return (array): table columns
     **/
    function getTableColumns()
    {
        $arrayColumns[] = 'discountId';
        $arrayColumns[] = 'policyId';
        $arrayColumns[] = 'daysToDiscount';
        $arrayColumns[] = 'beforeAfter';
        $arrayColumns[] = 'discountValue';
        $arrayColumns[] = 'isPercent';
        $arrayColumns[] = 'beginClassPeriod';
        $arrayColumns[] = 'endClassPeriod';
        $arrayColumns[] = 'parcelNumber';
        $arrayColumns[] = 'userName';
        $arrayColumns[] = 'dateTime';
        $arrayColumns[] = 'ipAddress';

        return $arrayColumns;
    }

    /**
     * Get sql
     *
     * @return (string): sql
     **/
    function getSql()
    {
        $sql = "SELECT A.discountid,
                       A.policyid,
                       A.daystodiscount,
                       A.beforeafter,
                       A.discountValue,
                       A.ispercent,
                       A.beginclassperiod,
                       A.endclassperiod,
                       A.parcelnumber,
                       A.userName,
                       TO_CHAR(A.dateTime,'" . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . "'),
                       A.ipAddress
                  FROM finpolicydiscount A";

        return $sql;
    }

    /**
     * Return a specific record from the database
     *
     * @param $discountId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getPolicyDiscount($discountId)
    {
        $sql = $this->sql;

        $sql.= 'WHERE A.discountId = ?';

        $db = $this->getDatabase();
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $discountId));

        return SAGU::resultToObject($result[0], $this->columns, new FinPolicyDiscount());
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchPolicyDiscount($data=null, $returnAsObject = false)
    {
        $sql = $this->sql;
        $where = '';
        unset($args);
        if ( strlen($data->discountId) > 0 )
        {
            $where .= ' AND discountId = ? ';
            $args[] = $data->discountId;
        }
        if ( strlen($data->policyId) > 0 )
        {
            $where .= ' AND policyId = ? ';
            $args[] = $data->policyId;
        }
        if ( strlen($data->daysToDiscount) > 0 )
        {
            $where .= ' AND daysToDiscount = ?';
            $args[] = $data->daysToDiscount;
        }
        if ( strlen($data->beforeAfter) > 0 )
        {
            $where .= ' AND beforeAfter = ? ';
            $args[] = $data->beforeAfter;
        }
        if ( strlen($data->discountValue) > 0 )
        {
            $where .= ' AND discountValue = ? ';
            $args[] = $data->discountValue;
        }
        if ( strlen($data->isPercent) > 0 )
        {
            $where .= ' AND isPercent = ? ';
            $args[] = $data->isPercent;
        }
        if ( strlen($data->beginClassPeriod) > 0 )
        {
            $where .= ' AND beginClassPeriod = ? ';
            $args[] = $data->beginClassPeriod;
        }
        if ( strlen($data->endClassPeriod) > 0 )
        {
            $where .= ' AND endClassPeriod = ? ';
            $args[] = $data->endClassPeriod;
        }
        if ( strlen($data->parcelNumber) > 0 )
        {
            $where .= ' AND parcelNumbere = ? ';
            $args[] = $data->parcelNumber;
        }

        if ( strlen($where) > 0 )
        {   
            $sql.= ' WHERE ' . substr($where, 4) . ' ORDER BY 1';
            
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            
            if ( is_array($result) )
            {
                $result = $returnAsObject ? SAGU::resultToObject($result, $this->columns) : $result;
            }
        }
        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertPolicyDiscount($data)
    {
        $db = $this->getDatabase();

        $sql = 'INSERT INTO finpolicydiscount
                           (policyid,
                            daystodiscount,
                            beforeafter,
                            discountValue,
                            ispercent,
                            beginclassperiod,
                            endclassperiod,
                            parcelnumber)
                    VALUES (?,?,?,?,?,?,?,?)';
        
        $args = array($data->policyId,
                      $data->daysToDiscount,
                      $data->beforeAfter,
                      $data->discountValue,
                      $data->isPercent,
                      $data->beginClassPeriod,
                      $data->endClassPeriod,
                      $data->parcelNumber);
        
        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updatePolicyDiscount($data)
    {
        $sql = 'UPDATE finpolicydiscount
                   SET policyid = ?,
                       daystodiscount = ?,
                       beforeafter = ?,
                       discountValue = ?,
                       ispercent= ?,
                       beginclassperiod = ?,
                       endclassperiod = ?,
                       parcelnumber = ?
                 WHERE discountid = ?';
                    
        $args = array($data->policyId,
                      $data->daysToDiscount,
                      $data->beforeAfter,
                      $data->discountValue,
                      $data->isPercent,
                      $data->beginClassPeriod,
                      $data->endClassPeriod,
                      $data->parcelNumber,
                      $data->discountId);
                      
        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $policyId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deletePolicyDiscount($discountId)
    {
        $sql = 'DELETE FROM finpolicydiscount
                      WHERE discountId = ?';

        $args = array($discountId);
        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));
        
        return $result;
    }    
}

?>
