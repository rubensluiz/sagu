<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finLoan table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 02/12/2005
 *
 **/

$MIOLO  = MIOLO::getInstance();
$MIOLO->uses('db/BusIncentiveType.class', 'finance');

/**
 * Class to manipulate the finLoan table
 **/
class BusinessFinanceBusLoan extends BusinessFinanceBusIncentiveType
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listLoan()
    {
        return 'Not implemented';
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $incentiveTypeId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getLoan($incentiveTypeId)
    {

        //get the finIncentiveType data
        $incentiveType = $this->getIncentiveType($incentiveTypeId);

        //get the finLoan data
        $sql = 'SELECT A.accountSchemeId,
                        A.loanerId,
                        A.rotative,
                        A.groupInvoicesValues,
                        A.collectionOperationId,
                        A.isExtinct,
                        A.geraTituloDeCobranca
                  FROM finLoan A
                 WHERE A.incentiveTypeId = ?';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $incentiveTypeId));

        if ( count($result) == 0 )
        {
            return null;
        }

        $loan = new finLoan();

        list ( $loan->accountSchemeId,
           $loan->loanerId,
           $loan->rotative,
           $loan->groupInvoicesValues,
           $loan->collectionOperationId,
           $loan->isExtinct,
           $loan->geraTituloDeCobranca) = $result[0];
                        
        //put into loan attributes, all incentiveType attributes
        $array = get_object_vars($incentiveType);
        foreach ( $array as $key => $row )
        {
            $loan->$key = $incentiveType->$key;
        }
                
        return $loan; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchLoan($filters)
    {
        $sql = 'SELECT A.incentiveTypeId,
                       A.description,
                       A.operationId,
                       B.description,
                       A.needAdjustAuthorization,
                       A.sendInvoices,
                       A.generateCredits,
                       A.accountSchemeId,
                       A.loanerId,
                       A.rotative,
                       A.groupInvoicesValues,
                       A.collectionOperationId,
                       A.isExtinct,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
             FROM ONLY finLoan A
            INNER JOIN finOperation B
                 USING ( operationId ) ';

        if ( strlen($filters->incentiveTypeId) > 0 )
        {
            $where .= ' AND A.incentiveTypeId = ?';
            $args[] = $filters->incentiveTypeId;
        }

        if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND A.description ILIKE ?';
            $args[] = $filters->description . '%';
        }

    if ( strlen($filters->operationId) > 0 )
        {
            $where .= ' AND A.operationId = ?';
            $args[] = $filters->operationId;
        }

        if ( strlen($filters->needAdjustAuthorization) > 0 )
        {
            $where .= ' AND A.needAdjustAuthorization = ?';
            $args[] = $filters->needAdjustAuthorization;
        }

        if ( strlen($filters->sendInvoices) > 0 )
        {
            $where .= ' AND A.sendInvoices = ?';
            $args[] = $filters->sendInvoices;
        }

        if ( strlen($filters->generateCredits) > 0 )
        {
            $where .= ' AND A.generateCredits = ?';
            $args[] = $filters->generateCredits;
        }

        if ( strlen($filters->accountSchemeId) > 0  && $filters->accountSchemeId != 0 )
        {
            $where .= ' AND A.accountSchemeId ILIKE ?';
            $args[] = $filters->accountSchemeId . '%';
        }
        
        if ( strlen($filters->loanerId) > 0 )
        {
            $where .= ' AND A.loanerId = ?';
            $args[] = $filters->loanerId;
        }
        
        if ( strlen($filters->rotative) > 0 )
        {
            $where .= ' AND A.rotative = ?';
            $args[] = $filters->rotative;
        }
        
        if ( strlen($filters->groupInvoicesValues) > 0 )
        {
            $where .= ' AND A.groupInvoicesValues = ?';
            $args[] = $filters->groupInvoicesValues;
        }
        
        if ( strlen($filters->collectionOperationId) > 0 )
        {
            $where .= ' AND A.collectionOperationId = ?';
            $args[] = $filters->collectionOperationId;
        }
        
        if ( strlen($filters->isExtinct) > 0 )
        {
            $where .= ' AND A.isExtinct = ?';
            $args[] = $filters->isExtinct;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY A.description';

            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertLoan($data)
    {
        $MIOLO  = MIOLO::getInstance();

        //$this->getDatabase()->begin();

        $data = $this->insertIncentiveType($data);

        $loan = new finLoan();
        $vars = get_object_vars($loan);

        foreach ( $vars as $var => $value )
        {
            if ( strlen($data->$var)>0 && strtolower($data->$var) != 'null' )
            {
                $string1 .= $var . ',';
                $string2 .= '?,';
                $args[]   = $data->$var;
            }
        }

        if ( strlen($string1)>0 )
        {
            $string1 = substr($string1,0,-1);
            $string2 = substr($string2,0,-1);
            $sql    = 'INSERT INTO finLoan 
                                   ( ' . $string1 . ')
                            VALUES ( ' . $string2 . ')';

            $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

            return $data;
        }

        //$this->getDatabase()->finish();
        return false;

    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateLoan($data)
    {
        $sql = 'UPDATE finLoan
                   SET accountSchemeId = ?,
                       loanerId = ?,
                       rotative = ?,
                       groupInvoicesValues = ?,
                       collectionOperationId = ?,
                       geraTituloDeCobranca = ?
                 WHERE incentiveTypeId   = ?';

        $args = array( 
                       $data->accountSchemeId,
                       $data->loanerId,
                       $data->rotative,
                       $data->groupInvoicesValues,
                       $data->collectionOperationId,      
                       $data->geraTituloDeCobranca,      
                       $data->incentiveTypeId
                     );

        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }

        $this->updateIncentiveType($data);

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $incentiveTypeId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteLoan($incentiveTypeId)
    {
        $result = $this->deleteIncentiveType($incentiveTypeId);
        return $result;
    }

}

?>
