<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for finBankAccount table
 *
 * @author Rudi Uhrig Neto [rudi@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 14/12/2005
 *
 **/

/**
 * Class to manipulate the BankAccount table
 **/
class BusinessFinanceBusBankAccount extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: $filters (object) :
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listBankAccount($filters = NULL)
    {
        $sql = ' SELECT A.bankAccountId,
                        A.accountNumber||\'-\'|| COALESCE(A.accountNumberDigit, \'\')
                                      ||\': \'|| COALESCE(A.description, \'\')
                   FROM finBankAccount A ';

        if ( strlen($filters->bankId)>0 )
        {
            $where .= ' AND   bankId IN (?) ';
            $args[] = $filters->bankId;
        }
        if ( strlen($where)>0 )
        {
            $sql.=' WHERE '.substr($where, 5, strlen($where));
            $sql = SAGU::prepare($sql, $args);
        }
        $sql .=' ORDER BY 2, 1 ';

        $return = $this->getDatabase()->query($sql);

        return $return;
    }


    /**
     * Return a specific record from the database
     *
     * @maintainer: Samuel Koch [samuel@solis.coop.br]
     *
     * @param $bankAccountId (integer): Primary key of the record to be retrieved
     *
     * @last modification: Samuel Koch [samuel@solis.coop.br]
     *                     Done the junction between the finBankAccout with finBankAccountInvoiceInfo
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getBankAccount($bankAccountId)
    {
        $sql = 'SELECT A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.bankId,
                       A.bankAccountId,
                       A.description,
                       A.branchNumber,
                       A.branchNumberDigit,
                       A.accountNumber,
                       A.accountNumberDigit,
                       A.shop,
                       A.url,
                       A.signature,
                       A.cip,
                       B.transferorCode,
                       B.transferorCodeDv,
                       B.bankRemittanceSequence,
                       B.wallet,
                       B.agreement,
                       B.accepted,
                       B.invoiceSpecieId,
                       A.ourNumber,
                       A.invoiceTypeId,
                       B.gatheringCode,
                       B.referenceNumber,
                       B.ugManagementCode,
                       A.invoicemessage1,
                       A.invoicemessage2,
                       B.walletModel,
                       A.taxbankvalue,
                       A.taxbankcreditoperation,
                       A.taxbankdebtoperation,
                       A.responsibletaxbank,
                       A.accountSchemeId,
                       A.geracaoDoNossoNumeroPeloBanco
                  FROM finBankAccount A
             LEFT JOIN finBankAccountInvoiceInfo B
                    ON (A.bankAccountId = B.bankAccountId)
                 WHERE A.bankAccountId = ?';

        $sqls   = SAGU::prepare($sql, $bankAccountId);
        $result = $this->getDatabase()->query($sqls);

        $bankAccount = new FinBankAccount();
        list ( $bankAccount->userName,
               $bankAccount->dateTime,
               $bankAccount->bankId,
               $bankAccount->bankAccountId,
               $bankAccount->description,
               $bankAccount->branchNumber,
               $bankAccount->branchNumberDigit,
               $bankAccount->accountNumber,
               $bankAccount->accountNumberDigit,
               $bankAccount->shop,
               $bankAccount->url,
               $bankAccount->signature,
               $bankAccount->cip,
               $bankAccount->transferorCode,
               $bankAccount->transferorCodeDv,
               $bankAccount->bankRemittanceSequence,
               $bankAccount->wallet,
               $bankAccount->agreement,
               $bankAccount->accepted,
               $bankAccount->invoiceSpecie,
               $bankAccount->ourNumber,
               $bankAccount->invoiceTypeId,
               $bankAccount->gatheringCode,
               $bankAccount->referenceNumber,
               $bankAccount->ugManagementCode,
               $bankAccount->invoiceMessage1,
               $bankAccount->invoiceMessage2,
               $bankAccount->walletModel,
               $bankAccount->taxbankvalue,
               $bankAccount->taxbankcreditoperation,
               $bankAccount->taxbankdebtoperation,
               $bankAccount->responsibletaxbank,
               $bankAccount->accountSchemeId,
               $bankAccount->geracaoDoNossoNumeroPeloBanco) = $result[0];

        return $bankAccount;
    }

    /**
     * Return bank data related to the specified invoice id and for the specified bank account.
     *
     * @param $invoiceId
     * @param $bankAccountId
     * 
     * @return (object): Return an object containing bank account information.
     */
    public function getInvoiceBankAccount($invoiceId, $bankAccountId)
    {
        $sql = 'SELECT A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.bankId,
                       A.bankAccountId,
                       A.description,
                       A.branchNumber,
                       A.branchNumberDigit,
                       A.accountNumber,
                       A.accountNumberDigit,
                       A.shop,
                       A.url,
                       A.signature,
                       A.cip,
                       B.transferorCode,
                       B.transferorCodeDv,
                       B.bankRemittanceSequence,
                       B.wallet,
                       B.agreement,
                       B.accepted,
                       B.invoiceSpecieId,
                       C.ourNumber AS invoiceCurrentOurNumber,
                       A.invoiceTypeId,
                       B.walletModel,
                       A.taxbankvalue,
                       A.taxbankcreditoperation,
                       A.taxbankdebtoperation,
                       A.responsibletaxbank
                  FROM finBankAccount A
             LEFT JOIN finBankAccountInvoiceInfo B
                    ON (A.bankAccountId = B.bankAccountId)
             LEFT JOIN finBankInvoiceInfo C
                    ON (A.bankAccountId = C.bankAccountId
                        AND C.invoiceId = ?)
                 WHERE A.bankAccountId = ?';
        
        $args = array (
            $invoiceId,
            $bankAccountId,
        );

        $sqls   = SAGU::prepare($sql, $args);
        $result = $this->getDatabase()->query($sqls);

        $bankAccount = new FinBankAccount();

        list ( $bankAccount->userName,
               $bankAccount->dateTime,
               $bankAccount->bankId,
               $bankAccount->bankAccountId,
               $bankAccount->description,
               $bankAccount->branchNumber,
               $bankAccount->branchNumberDigit,
               $bankAccount->accountNumber,
               $bankAccount->accountNumberDigit,
               $bankAccount->shop,
               $bankAccount->url,
               $bankAccount->signature,
               $bankAccount->cip,
               $bankAccount->transferorCode,
               $bankAccount->transferorCodeDv,
               $bankAccount->bankRemittanceSequence,
               $bankAccount->wallet,
               $bankAccount->agreement,
               $bankAccount->accepted,
               $bankAccount->invoiceSpecie,
               $bankAccount->ourNumber,
               $bankAccount->invoiceTypeId,
	       $bankAccount->walletModel,
               $bankAccount->taxbankvalue,
               $bankAccount->taxbankcreditoperation,
               $bankAccount->taxbankdebtoperation,
               $bankAccount->responsibletaxbank) = $result[0];
        
        return $bankAccount;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @maintainer: Samuel Koch [samuel@solis.coop.br]
     * @maintainer: William Prigol Lopes [william@solis.coop.br]
     *
     * @param $data (object): Search filters
     *
     * @last modification: Samuel Koch [smauel@solis.coop.br]
     *                     Done the junction between the finBankAccout with finBankAccountInvoiceInfo
     *
     * @return (array): An array containing the search results
     **/
    public function searchBankAccount($data)
    {
        $sql = 'SELECT A.bankAccountId,
                       A.description,
                       A.bankId,
                       CASE
                            WHEN A.branchNumber
                            is NULL THEN \' \'
                            ELSE A.branchNumber
                            END
                            ||\' - \'||
                       CASE
                            WHEN A.branchNumberDigit
                            is NULL  THEN \' \'
                            ELSE A.branchNumberDigit
                            END,
                        CASE
                            WHEN A.accountNumber
                            IS NULL THEN \' \'
                            ELSE A.accountNumber
                            END
                            ||\' - \'||
                       CASE
                            WHEN A.accountNumberDigit
                            IS NULL THEN \' \'
                            ELSE A.accountNumberDigit
                            END,
                        CASE
                            WHEN B.transferorCode
                            IS NULL THEN  \'0 \'
                            ELSE B.transferorCode
                            END
                            ||\' - \'||
                        CASE
                            WHEN B.transferorCodeDv
                            IS NULL THEN  \'0 \'
                            ELSE B.transferorCodeDv
                            END,
                        B.bankRemittanceSequence,
                        B.wallet,
                        B.agreement,
                        B.accepted
                  FROM  finBankAccount A
             LEFT JOIN  finBankAccountInvoiceInfo B
                    ON  (A.bankAccountId = B.bankAccountId)';

        $where = '';
        $args = array();

        if ( strlen($data->bankAccountId) > 0 )
        {
            $where .= '    AND   A.bankAccountId = ?';
            $args[] = $data->bankAccountId;
        }
        if ( strlen($data->description) > 0 )
        {
            $where .= '    AND   A.description ILIKE ?';
            $args[] = $data->description.'%';
        }
        if ( strlen($data->bankId) > 0 )
        {
            $where .= '    AND   A.bankId ILIKE ?';
            $args[] = $data->bankId.'%';
        }
        if ( strlen($data->branchNumber) > 0 )
        {
            $where .= '    AND   A.branchNumber ILIKE ?';
            $args[] = $data->branchNumber.'%';
        }
        if ( strlen($data->branchNumberDigit) > 0 )
        {
            $where .= '    AND   A.branchNumberDigit ILIKE ?';
            $args[] = $data->branchNumberDigit.'%';
        }
        if ( strlen($data->accountNumber) > 0 )
        {
            $where .= '    AND   A.accountNumber ILIKE ?';
            $args[] = $data->accountNumber.'%';
        }
        if ( strlen($data->accountNumberDigit) > 0 )
        {
            $where .= '    AND   A.accountNumberDigit ILIKE ?';
            $args[] = $data->accountNumberDigit.'%';
        }
        if( strlen($data->bankaccountid) > 0 )
        {
            $where .= '    AND   A.bankAccountId = ? ';
            $args[] = $data->bankaccountid;
        } 

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where,8) .
                    ' ORDER BY A.description';

            $sqls   = SAGU::prepare($sql,$args);
            $result = $this->getDatabase()->query($sqls);
        }

        return $result;
    }

    /**
     * Insert a new record in database finBankAccount
     *
     * @maintainer: Samuel Koch [samuel@solis.coop.br]
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertBankAccount($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $sql    = 'SELECT NEXTVAL(\'seq_bankaccountid\')';
        $retval = $this->getDatabase()->query($sql);

        if ( isset($retval) )
        {
            $bankAccountId = $retval[0][0];
            $sql = 'INSERT INTO finBankAccount
                                (bankAccountId,
                                 description,
                                 bankId,
                                 branchNumber,
                                 branchNumberDigit,
                                 accountNumber,
                                 accountNumberDigit,
                                 shop,
                                 url,
                                 signature,
                                 cip,
                                 ourNumber,
                                 invoiceTypeId,
                                 invoicemessage1,
                                 invoicemessage2,
                                 taxbankvalue,
                                 taxbankcreditoperation,
                                 taxbankdebtoperation,
                                 responsibletaxbank,
                                 accountSchemeId,
                                 geracaoDoNossoNumeroPeloBanco
                                 )
                         VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';

            $args = array( $bankAccountId,
                           $data->description,
                           $data->bankId,
                           $data->branchNumber,
                           $data->branchNumberDigit,
                           $data->accountNumber,
                           $data->accountNumberDigit,
                           $data->shop,
                           $data->url,
                           $data->signature,
                           $data->cip,
                           $data->ourNumber,
                           $data->invoiceTypeId,
                           $data->invoiceMessage1,
                           $data->invoiceMessage2,
                           $data->taxbankvalue,
                           $data->taxbankcreditoperation,
                           $data->taxbankdebtoperation,
                           $data->responsibletaxbank,
                           $data->accountSchemeId,
                           $data->geracaoDoNossoNumeroPeloBanco);

            $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

            if ( strlen($data->invoiceTypeId) > 0 )
            {
                $retult = $this->insertBankAccountInvoiceInfo($bankAccountId, $data);
            }
        }

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @maintainer: Samuel Koch [samuel@solis.coop.br]
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateBankAccount($data)
    {
        $sql = 'UPDATE finBankAccount
                   SET description            = ?,
                       bankId                 = ?,
                       branchNumber           = ?,
                       branchNumberDigit      = ?,
                       accountNumber          = ?,
                       accountNumberDigit     = ?,
                       shop                   = ?,
                       url                    = ?,
                       signature              = ?,
                       cip                    = ?,
                       ourNumber              = ?,
                       invoiceTypeId          = ?,
                       invoicemessage1        = ?,
                       invoicemessage2        = ?,
                       taxbankvalue           = ?,
                       taxbankcreditoperation = ?,
                       taxbankdebtoperation   = ?,
                       responsibletaxbank     = ?,
                       accountSchemeId        = ?,
                       geracaoDoNossoNumeroPeloBanco = ?
                 WHERE bankAccountId          = ?';

        $args = array( $data->description,
                       $data->bankId,
                       $data->branchNumber,
                       $data->branchNumberDigit,
                       $data->accountNumber,
                       $data->accountNumberDigit,
                       $data->shop,
                       $data->url,
                       $data->signature,
                       $data->cip,
                       $data->ourNumber,
                       $data->invoiceTypeId,
                       $data->invoiceMessage1,
                       $data->invoiceMessage2,
                       $data->taxbankvalue,
                       $data->taxbankcreditoperation,
                       $data->taxbankdebtoperation,
                       $data->responsibletaxbank,
                       $data->accountSchemeId,
                       $data->geracaoDoNossoNumeroPeloBanco,
                       $data->bankAccountId );

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        if ( $this->isExistBankAccountInvoiceInfo($data->bankAccountId) > 0 )
        {
            if ( strlen($data->invoiceTypeId) > 0 )
            {
                $this->updateBankAccountInvoiceInfo($data->bankAccountId, $data);
            }
            else
            {
                $this->deleteBankAccountInvoiceInfo($data->bankAccountId);
            }
        }
        else
        {
            if ( strlen($data->invoiceTypeId) > 0 )
            {
                $this->insertBankAccountInvoiceInfo($data->bankAccountId, $data);
            }
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $bankAccountId(int): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteBankAccount($bankAccountId)
    {
        $bankAccountId = is_array($bankAccountId) ? $bankAccountId[0] : $bankAccountId;

        if ( $this->isExistBankAccountInvoiceInfo($bankAccountId) > 0 )
        {
            $this->deleteBankAccountInvoiceInfo($bankAccountId);
        }

        $sql = 'DELETE FROM finBankAccount
                      WHERE bankAccountId = ?';

        $args   = array($bankAccountId);
        $result = $this->getDatabase()->execute(SAGU::prepare($sql,$args));

        return $result;
    }

    /**
     * return the bank id for specific bank account
     *
     * @param: $bankAccountId (int): primary key for finBankAccount table
     *
     * @return: (int): The respective bank if for this bank account
     *
     */
    public function getBankIdByBankAccountId($bankAccountId)
    {
        $sql = ' SELECT bankId
                   FROM finBankAccount
                  WHERE bankAccountId = ? ';

        $args   = array($bankAccountId);
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return $result[0][0];
    }

    /**
     * Updates the sequence bank to a specific bank.
     *
     * @maintainer: Samuel Koch [samuel@solis.coop.br]
     *
     * @param: $bankAccountId (int): primary key for finBankAccountInvoiceInfo table
     *         $sequenceFile (int): Value for sequence
     *
     * @return: (int): True if succeed, otherwise False
     *
     */
    public function updateBankAccountSequence($bankAccountId, $sequenceFile)
    {
        $sql = 'UPDATE finBankAccountInvoiceInfo
                   SET bankRemittanceSequence = ?
                 WHERE bankAccountId          = ?';

        $args = array( $sequenceFile,
                       $bankAccountId );

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }

   /**
     * List all records from the table finInvoiceSpecie
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listInvoiceSpecie()
    {
        $sql = ' SELECT invoiceSpecieId,
                        description
                   FROM finInvoiceSpecie ';

        $sql .=' ORDER BY description ';
        $return = $this->getDatabase()->query($sql);

        return $return;
    }

    /**
     * Insert a new record in database finBankAccountInvoiceInfo
     *
     * @maintainer: Samuel Koch [samuel@solis.coop.br]
     *
     * @param $bankAccountId (integer): Is id of the bank account
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertBankAccountInvoiceInfo($bankAccountId, $data)
    {
        $sql = 'INSERT INTO finBankAccountInvoiceInfo
                              (bankAccountId,
                               agreement,
                               wallet,
                               accepted,
                               transferorCode,
                               transferorCodeDv,
                               bankremittancesequence,
                               invoiceSpecieId,
                               gatheringCode,
                               referenceNumber,
                               ugManagementCode,
                               walletModel)
                       VALUES (?,?,?,?,?,?,?,?,?,?,?,?)';

        $args = array(
            $bankAccountId,
            $data->agreement = strlen($data->agreement) > 0 ? $data->agreement : 0,
            $data->wallet = strlen($data->wallet) > 0 ? $data->wallet : 0,
            $data->accepted = strlen($data->accepted) > 0 ? $data->accepted : 'N',
            $data->transferorCode = strlen($data->transferorCode) > 0 ? $data->transferorCode : 0,
            $data->transferorCodeDv = strlen($data->transferorCodeDv) > 0 ? $data->transferorCodeDv : 0,
            $data->bankRemittanceSequence = strlen($data->bankRemittanceSequence) > 0 ? $data->bankRemittanceSequence : 1,
            $data->invoiceSpecie = strlen($data->invoiceSpecie) > 0 ? $data->invoiceSpecie : 'ME',
            $data->gatheringCode,
            $data->referenceNumber,
            $data->ugManagementCode,
            $data->walletModel
        );

        $result = $this->getDatabase()->execute(SAGU::prepare($sql,$args));

        return $result;
    }

   /**
     * Update data from a specific record
     *
     * @maintainer: Samuel Koch [samuel@solis.coop.br]
     *
     * @param $bankAccountId (integer): Is id of the bank account
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateBankAccountInvoiceInfo($bankAccountId, $data)
    {
        $sql = 'UPDATE finBankAccountInvoiceInfo
                   SET agreement              = ?,
                       wallet                 = ?,
                       accepted               = ?,
                       transferorCode         = ?,
                       transferorCodeDv       = ?,
                       bankRemittanceSequence = ?,
                       invoiceSpecieId        = ?,
                       gatheringCode          = ?,
                       referenceNumber        = ?,
                       ugManagementCode       = ?,
                       walletModel            = ?
                 WHERE bankAccountId          = ?';

        $args = array(
            $data->agreement = strlen($data->agreement) > 0 ? $data->agreement : 0,
            $data->wallet = strlen($data->wallet) > 0 ? $data->wallet : 0,
            $data->accepted = strlen($data->accepted) > 0 ? $data->accepted : 'N',
            $data->transferorCode = strlen($data->transferorCode) > 0 ? $data->transferorCode : 0,
            $data->transferorCodeDv = strlen($data->transferorCodeDv) > 0 ? $data->transferorCodeDv : 0,
            $data->bankRemittanceSequence = strlen($data->bankRemittanceSequence) > 0 ? $data->bankRemittanceSequence : 1,
            $data->invoiceSpecie = strlen($data->invoiceSpecie) > 0 ? $data->invoiceSpecie : 'ME',
            $data->gatheringCode,
            $data->referenceNumber,
            $data->ugManagementCode,
            $data->walletModel,
            $bankAccountId
        );

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Return data associated with the specified "our number"
     *
     * @maintainer: Samuel Koch [samuel@solis.coop.br]
     *
     * @param $ourNumber (string): This field acts just like a primary key
     *
     * @return (object): Bank account id and invoice id associated with the specified "our number".
     *
     */
    public function getBankAccountInvoiceInfo($ournumber)
    {
        $sql = 'SELECT bankAccountId,
                       invoiceId,
                       ourNumber
                  FROM finBankInvoiceInfo
                 WHERE ourNumber = ? ';

        $args = array( $ournumber );

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        $bankAccountInfo = new stdClass();
        list ( $bankAccountInfo->bankAccountId,
               $bankAccountInfo->invoiceId,
               $bankAccountInfo->ourNumber ) = $result[0];

        return $bankAccountInfo;
    }

    /**
     * Delete a record
     *
     * @param $bankAccountId(int): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteBankAccountInvoiceInfo($bankAccountId)
    {
        $sql = 'DELETE FROM finBankAccountInvoiceInfo
                      WHERE bankAccountId = ?';

        $args = array($bankAccountId);
        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $bankAccountId(int): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteBankInvoiceInfoInvoice($invoiceId)
    {
        $sql = 'DELETE FROM finBankInvoiceInfo
                      WHERE invoiceId = ?';

        $args = array($invoiceId);
        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Function that checks whether there is information already registered for a specific id
     *
     * @param $bankAccountId (int) : Primary key for search in finBankAccountInvoice
     *
     * @return (int): 0 not exist and 1 is exist.
     *
     **/
    public function isExistBankAccountInvoiceInfo($bankAccountId)
    {
        $sql = ' SELECT count(*)
                   FROM finBankAccountInvoiceInfo
                  WHERE bankAccountId = ? ';

        $args = array($bankAccountId);
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return $result[0][0];
    }

     /*
      * Get all banks that have invoice data to communicate on system
      *
      * @param: No parameters needed
      *
      * @return: Returns an bi-dimensional array containing a list of banks with invoice generation info stored on database
      */
    public function getBankAccountWithInvoiceInfo()
    {
         $sql = ' SELECT bankAccountId,
                         finBank.description||\' - \'||finBankAccount.description
                    FROM finBank
              INNER JOIN finBankAccount
                   USING (bankId)
              INNER JOIN finBankAccountInvoiceInfo
                   USING (bankAccountId)';
         
         $result = $this->getDatabase()->query($sql);
         return $result;
    }

    /**
     * Gera o nosso número a partir da sequência
     */
    public function getNextOurNumber($bankAccountId)
    {
        $sql = 'SELECT getNextOurNumber(?);';
        $result = $this->getDatabase()->query(SAGU::prepare($sql, array($bankAccountId)));
        return $result[0][0];
    }
    
    /**
     * @param int $bankAccountId
     * @return boolean
     */
    public function verificaSeExiste($bankAccountId)
    {
        $sql = 'SELECT COUNT(*) > 0 FROM finBankAccount WHERE bankAccountId = ?';
        $result = $this->getDatabase()->query(SAGU::prepare($sql, array($bankAccountId)));
        return $result[0][0] == DB_TRUE;
    }
}
?>
