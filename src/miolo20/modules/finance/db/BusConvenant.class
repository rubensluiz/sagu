<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for finConvenant table
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 *
 * @since
 * Class created on 23/11/2011
 *
 **/

/**
 * Class to manipulate the finConvenant table
 **/
class BusinessFinanceBusConvenant extends sBusiness
{
    /**
     * Return a specific record from the database
     *
     * @param $cityId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getConvenant($convenantId)
    {
        $sql = 'SELECT convenantId,
                       description,
                       value,
                       isPercent,
                       daysToDiscount,
                       beforeAfter,
                       convenantOperation,
                       userName,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipAddress, 
                       percentRenovacao,
                       aditarIncentivo,
                       acumulativo,
                       condicional,
                       todasDisciplinas,
                       aplicaVeteranos,
                       aplicaCalouros,
                       concederPeriodo,
                       crMaximo,
                       crMinimo
                  FROM finConvenant
                 WHERE convenantId = ?';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $convenantId));

        $convenant  = new finConvenant();
        list (  $convenant->convenantId,
                $convenant->description,
                $convenant->value,
                $convenant->isPercent,
                $convenant->daysToDiscount,
                $convenant->beforeAfter,
                $convenant->convenantOperation,
                $convenant->userName,
                $convenant->dateTime,
                $convenant->ipAddress,
                $convenant->percentRenovacao,
                $convenant->aditarIncentivo,
                $convenant->acumulativo,
                $convenant->condicional,
                $convenant->todasDisciplinas,
                $convenant->aplicaVeteranos,
                $convenant->aplicaCalouros,
                $convenant->concederPeriodo,
                $convenant->crMaximo,
                $convenant->crMinimo) = $result[0];

        return $convenant;
    }
    
    public function listConvenants()
    {
        $sql = 'SELECT convenantId,
                       description
                  FROM finConvenant';
        
        $result = $this->getDatabase()->query(SAGU::Prepare($sql));
        
        return $result;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchConvenant($filters)
    {
        $sql = 'SELECT A.convenantId,
                       A.description,
                       A.value,
                       A.isPercent,
                       A.daysToDiscount,
                       A.beforeAfter,
                       A.convenantOperation,
                       B.description AS convenantOperationDescription,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM finConvenant A
             LEFT JOIN finOperation B
                    ON (A.convenantOperation = B.operationId)' ;

        if ( strlen($filters->convenantId) > 0 )
        {
            $where .= ' AND A.convenantId = ? ';
            $args[] = $filters->convenantId;
        }
        if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?) ';
            $args[] = $filters->description . '%';
        }
        if ( strlen($filters->value) > 0 )
        {
            $where .= ' AND A.value = ? ';
            $args[] = $filters->value;
        }
        if ( strlen($filters->isPercent) > 0 )
        {
            $where .= ' AND A.isPercent = ? ';
            $args[] = $filters->isPercent;
        }
        if ( strlen($filters->daysToDiscount) > 0 )
        {
            $where .= ' AND A.daysToDiscount = ? ';
            $args[] = $filters->daysToDiscount;
        }
        if ( strlen($filters->beforeAfter) > 0 )
        {
            $where .= ' AND A.beforeAfter = ? ';
            $args[] = $filters->beforeAfter;
        }
        if ( strlen($filters->convenantOperation) > 0 )
        {
            $where .= ' AND A.convenantOperation = ? ';
            $args[] = $filters->convenantOperation;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY A.convenantId';
            $result = $this->getDatabase()->query(SAGU::Prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertConvenant($data, $returnId = false)
    {        
        $result = SDatabase::query('SELECT nextval(\'finconvenant_convenantid_seq\')');
        $newId = $result[0][0];
        
        if ( !$this->existeOperacaoDeConvenio($data->convenantOperation) )
        {
            throw new Exception(_M('A operação de convênio ' . $data->convenantOperation . ' não existe.'));
        }
        
        $sql = 'INSERT INTO finConvenant
                            (convenantid,
                             description,
                             value,
                             isPercent,
                             daysToDiscount,
                             beforeAfter,
                             convenantOperation,
                             percentRenovacao, 
                             aditarIncentivo,
                             acumulativo,
                             condicional,
                             todasDisciplinas,
                             aplicaVeteranos,
                             aplicaCalouros,
                             concederPeriodo,
                             crMaximo,
                             crMinimo)
                     VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';

        $args = array(
            $newId,
            $data->description,
            $data->value,
            $data->isPercent,
            $data->daysToDiscount,
            $data->beforeAfter,
            $data->convenantOperation,
            $data->percentRenovacao,
            $data->aditarIncentivo,            
            $data->acumulativo,
            $data->condicional,
            $data->todasDisciplinas,
            $data->aplicaVeteranos,
            $data->aplicaCalouros,
            $data->concederPeriodo,
            $data->crMaximo,
            $data->crMinimo);

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));
        
        if($result && $returnId)
        {
            $result = $newId;
        }
        
        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateConvenant($data, $returnId = false)
    {
        $sql = 'UPDATE finConvenant
                   SET description= ?,
                       value= ?,
                       isPercent= ?,
                       daysToDiscount= ?,
                       beforeAfter= ?,
                       convenantOperation= ?,
                       percentRenovacao= ?,
                       aditarIncentivo= ?,
                       acumulativo= ?,
                       condicional= ?,
                       todasDisciplinas= ?,
                       aplicaVeteranos= ?,
                       aplicaCalouros= ?,
                       concederPeriodo= ?,
                       crMaximo= ?,
                       crMinimo= ?
                 WHERE convenantId = ?';

        $args = array( 
            $data->description,
            $data->value,
            $data->isPercent,
            $data->daysToDiscount,
            $data->beforeAfter,
            $data->convenantOperation,
            $data->percentRenovacao,
            $data->aditarIncentivo,
            $data->acumulativo,
            $data->condicional,
            $data->todasDisciplinas,
            $data->aplicaVeteranos,
            $data->aplicaCalouros,
            $data->concederPeriodo,
            $data->crMaximo,
            $data->crMinimo,
            $data->convenantId
            );

        $sqls = SAGU::prepare($sql, $args);
        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }
        
        if($result && $returnId)
        {
            $result = $data->convenantId;
        }
        
        return $result;
    }

    /**
     * Delete a record
     *
     * @param $cityId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteConvenant($convenantId)
    {
        
        $sql = 'DELETE FROM finocorrenciadoconvenio
                      WHERE convenantId = ?';

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $convenantId));
        
        if ( $result )
        {
            $sql = 'DELETE FROM finConvenant
                        WHERE convenantId = ?';

            $result = $this->getDatabase()->execute(SAGU::prepare($sql, $convenantId));
        }
        
        return $result;
    }
    
    public function existeOperacaoDeConvenio($convenantOperationId)
    {
        $sql = ' SELECT count(operationid) FROM finoperation WHERE operationid = ? ';
        
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $convenantOperationId));

        return $result[0][0] > 0;
    }
    
    
    /**
     * Obtem os convênios que serão aplicados para um determinado título
     * caso seja pago na data atual
     * @param type $invoiceId
     * @return type 
     */
    public function getInvoiceConvenants($invoiceId)
    {
        $sql = 'SELECT * 
                  FROM getinvoiceconvenants(?, now()::date) 
                    AS convenant(convenantid integer, 
                                 description text, 
                                       value numeric, 
                                   ispercent boolean, 
                          convenantoperation int, 
                                 acumulativo boolean, 
                            todasdisciplinas boolean, 
                                  contractid integer, 
                            learningperiodid integer, 
                                 operationid integer)';

        $args[] = $invoiceId;
        $result = $this->getDatabase()->query(SAGU::Prepare($sql, $args));
        

        return $result;
    }
}
?>
