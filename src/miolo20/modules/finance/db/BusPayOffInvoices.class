<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finBankAccount table
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 14/12/2005
 *
 **/

/**
 * Class to manipulate the BankAccount table
 **/
class BusinessFinanceBusPayOffInvoices extends sBusiness
{
    /**
     * List the payments out of date for a specific period
     *
     * @param: $data (object): Object containing the specific filter class
     *
     * @returns (array): Return an array with the needed information
     *
     **/
    public function listPaymentsOutOfDate($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $sql = ' SELECT A.personId,
                        (SELECT name
                      FROM ONLY basPerson
                          WHERE A.personId=basPerson.personId ),
                        A.invoiceId,
                        TO_CHAR(A.emissionDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                        TO_CHAR(A.maturityDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                        TO_CHAR(B.entryDate,    \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                        B.entryDate-A.maturityDate,
                        ROUND(A.value, ' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . '),
                        ROUND(SUM(B.value), ' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . ')
              FROM ONLY finReceivableInvoice A
             INNER JOIN finEntry B
                  USING (invoiceId)
             INNER JOIN finOperation C
                  USING (operationId)
                  WHERE A.maturityDate < B.entryDate
                    AND B.entryDate BETWEEN TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                                        AND TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
               GROUP BY 1, 2, 3, 4, 5, 6, 7, 8
               ORDER BY 2, 3 ';
    
        $args = array( $data->beginDate,
                       $data->endDate );
                
        $db = $this->getDatabase();
        $return = $db->query( SAGU::prepare($sql, $args) );
        
        $sql = ' SELECT A.operationId,
                        B.description,
                        A.comments
                   FROM finEntry A
             INNER JOIN finOperation B
                  USING (operationId)
                  WHERE A.invoiceId = ? ';
                  
        foreach ($return as $key => $ret)
        {
            if ($ret[0] != $invoiceId)
            {
                $r[] = $ret;
                $pos = count($r);
                $invoiceId = $ret[0];

                //
                $string = new MLink('person_'.$return[$key][0], $return[$key][0], $MIOLO->getActionURL($module, 'main', null, array('personId'=>$return[$key][0], 'event'=>'personConsultation_click')));
                $r[$pos][0] = $string->generate();
                 
                //
                $string = new MLink('invoice_'.$return[$key][2], $return[$key][2], $MIOLO->getActionURL($module, 'main:report:receivableInvoiceConsult', null, array('invoiceId'=>$return[$key][2])));
                $r[$pos][2] = $string->generate();
                
                $invoiceData = $db->query(SAGU::prepare($sql, $ret[2]));
                foreach ($invoiceData as $id)
                {
                    $comments = strlen($id[2])>0 ? ' ('.$id[2].')' : '';
                    $string_[] = new MText($id[0].$return[$key][0], $id[0].' - '.$id[1].' '.$comments);
                }
                $container = new MVContainer('MVContainer_'.count($r), $string_);
                unset($string_);
                $container->generateInner();
                $r[$pos][] = $container->generate();
            }
        }
        return $r;
    }

    /**
     * List the invoices by a specific period and specific payment register
     *
     * @param: $data (object): Object containing the filters
     *
     * @returns (array): Return an array with the needed information
     *
     **/
    public function listPaidOffInvoices($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $sql = ' SELECT A.personId,
                        (SELECT name
                      FROM ONLY basPerson
                          WHERE A.personId=basPerson.personId ),
                        A.invoiceId,
                        TO_CHAR(A.maturityDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
              FROM ONLY finReceivableInvoice A
             INNER JOIN finEntry B
                  USING (invoiceId)
                  WHERE A.maturityDate
               BETWEEN TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                   AND TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                   AND balance(A.invoiceId) = 0
                   AND operationId IN ('.implode(',', $data->operationId).')
               GROUP BY 1, 2, 3, 4
               ORDER BY 2, 3 ';
   
        $args = array( $data->beginPaymentDate,
                       $data->endPaymentDate);
                
        $db = $this->getDatabase();
        $return = $db->query( SAGU::prepare($sql, $args) );
        if (is_array($return))
        {
            foreach ($return as $key => $ret)
            {
                if ($ret[0] != $invoiceId)
                {
                    $r[] = $ret;
                    $pos = count($r)-1;

                    //
                    $string = new MLink('person_'.$return[$key][0], $return[$key][0], $MIOLO->getActionURL($module, 'main', null, array('personId'=>$return[$key][0], 'event'=>'personConsultation_click')));
                    $r[$pos][0] = $string->generate();
                     
                    //
                    $string = new MLink('invoice_'.$return[$key][2], $return[$key][2], $MIOLO->getActionURL($module, 'main:report:receivableInvoiceConsult', null, array('invoiceId'=>$return[$key][2])));
                    $r[$pos][2] = $string->generate();
                }
            }
        }
        return $r;
    }
}

?>
