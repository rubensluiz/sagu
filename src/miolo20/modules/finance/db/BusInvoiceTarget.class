<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finInvoiceTarget table
 *
 * @author Rudi Uhrig Neto [rudi@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 09/01/2006
 *
 **/

/**
 * Class to manipulate the finInvoiceTarget table
 **/
class BusinessFinanceBusInvoiceTarget extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listInvoiceTarget()
    {
        return 'Not implemented';
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $contractId (integer): Primary key of the record to be retrieved
     * @param $stateContractId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getInvoiceTarget($contractId)
    {
        $sql = 'SELECT contractId,
                       isActive,
                       userName,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipAddress
                  FROM finInvoiceTarget
                 WHERE contractId = ?';

        $db     = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql, $contractId));
        
        if( count( $result ) > 0 )
        {
            $invoiceTarget = new finInvoiceTarget();

            list ( $invoiceTarget->contractId,
                   $invoiceTarget->isActive,
                   $invoiceTarget->userName,
                   $invoiceTarget->dateTime,
                   $invoiceTarget->ipAddress ) = $result[0];
        }
        else
        {
            $invoiveTarget = false;
        }
    
        return $invoiceTarget;
    }
    

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchInvoiceTarget($filters)
    {

        $sql = 'SELECT A.contractId,
                       A.isActive,
                       B.personId,
                       C.name as personName,
                       B.courseId,
                       D.name as courseName,
                       B.courseVersion,
                       B.turnId,
                       E.description as turnDescription,
                       B.unitId,
                       F.description as unitDescription';
/*                       B.formationDate,
                       B.formationPeriodId,
                       B.conclusionDate,
                       B.emendsDate,
                       B.diplomaDate,
                       B.inscriptionSelectiveProcId,
                       B.maturityDay,
                       B.isListener,
                       B.isRequestAcademicDegree,
                       B.globalAverage,
                       B.contractNumber,
                       B.obs*/
        $sql .=' 
                  FROM finInvoiceTarget A
             LEFT JOIN acdContract  B
                    ON ( A.contractId = B.contractId)
        LEFT JOIN ONLY basPhysicalPerson C
                    ON ( B.personId = C.personId )
             LEFT JOIN acdCourse D
                    ON ( B.courseId = D.courseId )
             LEFT JOIN basTurn E
                    ON ( B.turnId = E.turnId )
             LEFT JOIN basUnit F
                    ON ( B.unitId = F.unitId )';

        if ( strlen($filters->contractId) > 0 )
        {
            $where .= ' AND A.contractId ILIKE ?';
            $args[] = $filters->contractId;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY A.contractId';

            $db = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql, $args));
            
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertInvoiceTarget($data)
    {
        
        $invoiceTarget = $this->getInvoiceTarget($data->contractId);
        
        if(!is_object($invoiceTarget))
        {
            $sql = 'INSERT INTO finInvoiceTarget
                                (contractId,
                                 isActive)
                         VALUES (?, ?)';

            //$db     = $this->getDatabase();

            $args = array($data->contractId,
                          $data->isActive);

            $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        }
        else
        {

            $result = $this->updateInvoiceTarget($data);
        }

        return $result;
    
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateInvoiceTarget($data)
    {


       $sql = 'UPDATE finInvoiceTarget
                   SET isActive     = ?
                 WHERE contractId   = ?';

       $args = array( $data->isActive,
                      $data->contractId);


       //$db   = $this->getDatabase();
       $sqls = SAGU::prepare($sql, $args);

       for ( $i=0; $i<count($sqls); $i++ )
       {
           $result = $this->getDatabase()->execute($sqls[$i]);
       }


       return $result;
    }

    /**
     * Delete a record
     *
     * @param $contractId (string): Primary key for deletion
     * @param $stateContractId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteInvoiceTarget($contractId)
    {
        $sql = 'DELETE FROM finInvoiceTarget
                      WHERE contractId  = ?';

        $db     = $this->getDatabase();
        $pk = array($contractId);

        $result = $db->execute(SAGU::prepare($sql, $pk));
        

        return $result;
    }

}

?>
