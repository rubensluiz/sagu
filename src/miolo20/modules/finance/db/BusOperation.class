<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finOperation table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * 
 * @since
 * Class created on 17/08/2005
 *
 **/

/**
 * Class to manipulate the finOperation table
 **/
class BusinessFinanceBusOperation extends sBusiness
{
    /**
     * Constant type receivable or payable
     **/
    const TYPE_RECEIVABLE = 'R';
    const TYPE_PAYABLE = 'P';
    
    /**
     * Constantes/variáveis da observação da operação.
     */
    const X_NUMERO_NOTA_FISCAL = 'X_NUMERO_NOTA_FISCAL';
    const X_NOME_ALUNO = 'X_NOME_ALUNO';

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listOperation($operation = null, $orderById = false, $group = null, $onlyIsCounterMovement= false)
    {
        $sql = 'SELECT A.operationId,
                       A.description
                  FROM finOperation A ';
        
        $where = '';
        
        if (strlen($operation) > 0)
        {
            if (in_array(strtoupper($operation), array('C', 'D')))
            {
                $where .= ' AND operationTypeId = ? ';
                $args[] = $operation;
            }    
        }
        
        if (strlen($group) > 0)
        {
            $where .= ' AND operationGroupId = ? ';
            $args[] = $group;
        }
        if( $onlyIsCounterMovement )
        {
            $where .= ' AND isCounterMovement = \'t\'';
        }
        if (strlen($where) > 0)
        {
            $sql .= ' WHERE ' . substr($where, 4);
        }
        
        if ($orderById == false)
        {
            $sql.= ' ORDER BY A.description';
        }
        else
        {
            $sql.= ' ORDER BY A.operationId';
        }

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));
    
        return $result;
    }

    /**
     * Return a specific record from the database
     *
     * @param $operationId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getOperation($operationId)
    {
        $sql = 'SELECT A.operationId,
                       A.description,
                       A.operationTypeId,
                       A.receivableOrPayable,
                       A.accountSchemeId,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.isExtinct,
                       A.isCounterMovement,
                       A.operationGroupId,
                       A.useInDiscounts,
                       A.useInInterests,
                       A.useInFines,
                       A.observacao
                  FROM finOperation A
                 WHERE A.operationId = ?';

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql,$operationId));

        $operation = new FinOperation();

        list ( $operation->operationId,
               $operation->description,
               $operation->operationTypeId,
               $operation->receivableOrPayable,
               $operation->accountSchemeId,
               $operation->userName,
               $operation->dateTime,
               $operation->isExtinct,
               $operation->isCounterMovement,
               $operation->operationGroupId,
               $operation->useInDiscounts,
               $operation->useInInterests,
               $operation->useInFines,
               $operation->observacao ) = $result[0];

        return $operation; 
    }

 
    /**
     * Get the description for specified operation
     *
     * @param $operationId (int): Primary key for operation
     *
     * @author: William Prigol Lopes [william@solis.coop.br]
     *
     * @return (string): The description operation
     **/
    public function getOperationDescription($operationId)
    {
        $sql = ' SELECT description
                   FROM finOperation
                  WHERE operationId = ? ';

        $db = $this->getDatabase();
        $args = array($operationId);
        
        $ret = $db->query(SAGU::prepare($sql, $args));
        
        return $ret[0][0];
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @last modification: William Prigol Lopes [william@solis.coop.br]
     *                     Make the search capable to get partial word search with % in varchar fields
     *
     * @return (array): An array containing the search results
     **/
    public function searchOperation($data)
    {
        $sql = 'SELECT A.operationId,
                       A.description,
                       A.operationTypeId,
                       A.isCounterMovement,
                       A.receivableOrPayable,
                       A.operationGroupId,
                       A.accountSchemeId,
                       A.isExtinct
                  FROM finOperation A';

        $where = '';
        unset($args);
        if ( strlen($data->operationId) > 0 )
        {
            $where .= '    AND   A.operationId = ?';
            $args[] = $data->operationId;
        }
        if ( strlen($data->operationGroupId) > 0 )
        {
            $where .= '    AND   A.operationGroupId = ?';
            $args[] = $data->operationGroupId;
        }
        if ( strlen($data->description) > 0 )
        {
            $where .= '    AND   A.description ILIKE ?';
            $args[] = $data->description.'%';
        }
        if ( strlen($data->operationTypeId) > 0 )
        {
            $where .= '    AND   A.operationTypeId ILIKE ?';
            $args[] = $data->operationTypeId.'%';
        }

        if ( strlen($data->isExtinct) > 0 )
        {
            $where .= '    AND   A.isExtinct = ?';
            $args[] = $data->isExtinct;
        }
        if ( strlen($data->isCounterMovement) > 0 )
        {
            $where .= '    AND   A.isCounterMovement = ?';
            $args[] = $data->isCounterMovement;
        }
    
        if ( strlen($data->receivableOrPayable) > 0 )
        {
            $where .= '    AND   A.receivableOrPayable = ?';
            $args[] = $data->receivableOrPayable;
        }
        if ( strlen($data->accountSchemeId) > 0 )
        {
            $where .= '    AND   A.accountSchemeId = ?';
            $args[] = $data->accountSchemeId;
        }
        
        if ( $where != '' )
        {
            $sql .= ' WHERE ' . substr($where,8) .
                    ' ORDER BY A.description';

            $db = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql,$args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertOperation($data)
    {
        $db = $this->getDatabase();

        $sql = 'SELECT NEXTVAL(\'seq_operationId\') FROM (select 1) a';
        $retval = $db->query($sql);

        unset($operationId);
        if ( isset($retval) )
        {
            $operationId = $retval[0][0];
            $sql = 'INSERT INTO finOperation
                                (operationId,
                                 description,
                                 operationTypeId,
                                 isExtinct,
                                 isCounterMovement,
                                 operationGroupId,
                                 receivableOrPayable,
                                 accountSchemeId,
                                 useInDiscounts,
                                 useInInterests,
                                 useInFines,
                                 observacao
                         VALUES (?,?,?,?,?,?,?,?,?,?,?,?)';

            $args = array($operationId,
                          $data->description,
                          $data->operationTypeId,
                          $data->isExtinct,
                          $data->isCounterMovement,
                          $data->operationGroupId,
                          $data->receivableOrPayable,
                          $data->accountSchemeId,                
                          $data->useInDiscounts,
                          $data->useInInterests,                          
                          $data->useInFines);
            
            if ( ! $db->execute(SAGU::prepare($sql,$args)) )
            {
                unset($operationId);
            }
        }

        return $operationId;
    }
    
    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateOperation($data)
    {
        $sql = 'UPDATE finOperation
                   SET description       = ?,
                       operationTypeId   = ?,
                       isExtinct         = ?,
                       isCounterMovement = ?,
                       operationGroupId  = ?,
                       receivableOrPayable = ?,
                       accountSchemeId = ?,
                       useInDiscounts = ?,
                       useInInterests = ?,
                       useInFines = ?,
                       observacao = ?
                 WHERE operationId       = ?';

        $args = array($data->description,
                      $data->operationTypeId,
                      $data->isExtinct,
                      $data->isCounterMovement,
                      $data->operationGroupId,
                      $data->receivableOrPayable,
                      $data->accountSchemeId,            
                      $data->useInDiscounts,
                      $data->useInInterests,
                      $data->useInFines,
                      $data->observacao,
                      $data->operationId);

        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql,$args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $operationId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteOperation($operationId)
    {
        $sql = 'DELETE FROM finOperation
                      WHERE operationId = ?';

        $args = is_array($operationId) ? $operationId : array($operationId);

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql,$args));

        return $result;
    }

    /**
     * List all operation types
     *
     * @param $type (default 0) (int): Default type for passing parameters
     *
     * @return (array): An array containing all operation types
     *
     **/
    public function listOperationTypeId($type = 0)
    {
        $module = MIOLO::GetCurrentModule(); 
        if ($type == 0)
        {
           $data = array('C'=>_M('Crédito', $module),
                         'D'=>_M('Débito', $module));
        }
        elseif ($type == 1)
        {
            $data = array(array(_M('Crédito', $module), 'C'),
                          array(_M('Débito', $module), 'D'));
        }
        return $data;
    }
    
    /**
     * List type income or expense
     *
     * @param $type (default 0) (int): Default type for passing parameters
     *
     * @return (array): An array containing all operation types
     *
     **/
    public function listTypeRecivableOrPayable($type = 0)
    {
        $module = MIOLO::GetCurrentModule(); 
        if ($type == 0)
        {
           $data = array(self::TYPE_RECEIVABLE => _M('Contas a receber', $module),
                         self::TYPE_PAYABLE => _M('Contas a pagar', $module));
        }
        elseif ($type == 1)
        {
            $data = array(array(_M('Contas a receber', $module), self::TYPE_RECEIVABLE),
                          array(_M('Contas a pagar', $module), self::TYPE_PAYABLE));
        }
        return $data;
    }
    
    /**
     * Retorna a observação da operação com as variáveis formatadas.
     * 
     * @param (int) $operationId
     * @param (int) $entryId
     * 
     * @return Observação formatada.
     */
    public function obterObservacaoDeOperacaoFormatada($operationId, $entryId)
    {
        $operacao = $this->getOperation($operationId);
        $observacao = $operacao->observacao;
        
        $sql = "SELECT * FROM obterObservacaoDeOperacaoFormatada(?, ?)";
        
        $return = SDatabase::query($sql, array($observacao, $entryId));
        
        return $return[0][0];
    }
    
    /**
     * Retorna as variáveis disponíveis para usar na observação da operação.
     */
    public function obterVariaveisObservacao()
    {
        $return = array(
            self::X_NUMERO_NOTA_FISCAL => 'X_NUMERO_NOTA_FISCAL',
            self::X_NOME_ALUNO => 'X_NOME_ALUNO'
        );
        
        return $return;
    }
}

?>
