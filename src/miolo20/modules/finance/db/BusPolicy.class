<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finPolicy table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * 
 * @since
 * Class created on 08/09/2005
 *
 **/

/**
 * Class to manipulate the finPolicy table
 **/
class BusinessFinanceBusPolicy extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @author: William Prigol Lopes [william@solis.coop.br]
         *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listPolicy($type = 0)
    {
        if ($type == 0 )
        {
            $sql = '   SELECT policyId,
                              description
                         FROM finPolicy
                     ORDER BY policyId ';
        }
        else
        {
            $sql = '   SELECT description,
                              policyId
                         FROM finPolicy
                     ORDER BY policyId ';
        }

        $return = $this->getDatabase()->query($sql);

        return $return;
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $policyId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getPolicy($policyId)
    {

        $sql = 'SELECT A.policyId,
                       A.description,
                       A.operationId,
                       B.description AS operationDescription,
                       A.collectionTypeId,
                       D.description AS collectionTypeDescription,
                       A.daysToProtest,
                       A.bankTaxValue,
                       A.applyInterest,
                       A.monthlyInterestPercent,
                       A.daysToInterest,
                       A.interestType,
                       A.applyFine,
                       A.finePercent,
                       A.daysToFine, 
                       A.isExtinct,
                       C.emissionTypeId,
                       C.description AS emissionDescription,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM finPolicy A
             LEFT JOIN finOperation B 
                    ON (B.operationId = A.operationId)
             LEFT JOIN finEmissionType C
                    ON (C.emissionTypeId = A.emissionTypeId)
             LEFT JOIN finCollectionType D
                    ON (D.collectionTypeId = A.collectionTypeId)
                 WHERE A.policyId = ?';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $policyId));
        $policy = new FinPolicy();

        list ( $policy->policyId,
               $policy->description,
               $policy->operationId,
               $policy->operationDescription,
               $policy->collectionTypeId,
               $policy->collectionTypeDescription,
               $policy->daysToProtest,
               $policy->bankTaxValue,
               $policy->applyInterest,
               $policy->monthlyInterestPercent,
               $policy->daysToInterest,
               $policy->interestType,
               $policy->applyFine,
               $policy->finePercent,
               $policy->daysToFine,
               $policy->isExtinct,
               $policy->emissionTypeId,
               $policy->emissionTypeDescription,
               $policy->userName,
               $policy->dateTime,
               $policy->ipAddress ) = $result[0];

        return $policy; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @last modification: William Prigol Lopes [william@solis.coop.br]
     *       Make the search capable to return partial words seek with % in varchar fields
     *
     * @return (array): An array containing the search results
     **/
    public function searchPolicy($filters)
    {
        $sql = 'SELECT A.policyId,
                       A.description,
                       A.operationId||\' - \'||B.description AS operationDescription,
                       A.collectionTypeId,
                       D.description AS collectionTypeDescription, ';
        
        if ( SAGU::getParameter('FINANCE', 'COLLECTION_TYPE_TO_APPLY_PROTEST') )
        {
            $sql .=   'CASE WHEN A.collectionTypeId = '.SAGU::getParameter('FINANCE', 'COLLECTION_TYPE_TO_APPLY_PROTEST').'
                            THEN A.daysToProtest::varchar
                            ELSE \'-\'
                       END AS daysToProtest,
                       CASE WHEN A.collectionTypeId = '.SAGU::getParameter('FINANCE', 'COLLECTION_TYPE_TO_APPLY_PROTEST').'
                            THEN ROUND(A.bankTaxValue, '. SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') .')::varchar
                            ELSE \'-\'
                       END AS bankTaxValue, ';
        }
        else
        {
            $sql .=    'A.daysToProtest,
                        ROUND(A.bankTaxValue, '.SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE').') AS bankTaxValue, ';
        }
        
        $sql .=      ' A.applyInterest,
                       CASE WHEN A.applyInterest = \''.DB_TRUE.'\'
                            THEN A.daysToInterest::varchar
                            ELSE \'-\'
                       END AS daysToInterest, 
                       CASE WHEN A.applyInterest = \''.DB_TRUE.'\'
                            THEN A.monthlyInterestPercent::varchar
                            ELSE \'-\'
                       END AS monthlyInterestPercent,
                       CASE WHEN A.applyInterest = \''.DB_TRUE.'\'
                            THEN A.interestType::varchar
                            ELSE \'-\'
                       END AS interestType, 
                       A.applyFine,
                       CASE WHEN A.applyFine = \''.DB_TRUE.'\'
                            THEN A.finePercent::varchar
                            ELSE \'-\'
                       END AS finePercent,
                       CASE WHEN A.applyFine = \''.DB_TRUE.'\'
                            THEN A.daysToFine::varchar
                            ELSE \'-\'
                       END AS daysToFine,
                       A.isExtinct,
                       C.description AS emissionType
                  FROM finPolicy A
             LEFT JOIN finOperation B 
                    ON (B.operationId = A.operationId)
             LEFT JOIN finEmissionType C
                    ON (A.emissionTypeId = C.emissionTypeId)
             LEFT JOIN finCollectionType D
                    ON (D.collectionTypeId = A.collectionTypeId)';

        if ( strlen($filters->policyId) > 0 )
        {
            $where .= ' AND A.policyId = ?';
            $args[] = $filters->policyId;
        }
        if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND A.description ILIKE ?';
            $args[] = $filters->description.'%';
        }
        if ( strlen($filters->operationId) > 0 )
        {
            $where .= ' AND A.operationId = ?';
            $args[] = $filters->operationId;
        }
        if ( strlen($filters->operationDescription) > 0 )
        {
            $where .= ' AND B.description ILIKE ?';
            $args[] = $filters->operationDescription.'%';
        }
        if ( strlen($filters->collectionTypeId) > 0 )
        {
            $where .= ' AND A.collectionTypeId = ?';
            $args[] = $filters->collectionTypeId;
        }
        if ( strlen($filters->collectionTypeDescription) > 0 )
        {
            $where .= ' AND D.description ILIKE ?';
            $args[] = $filters->collectionTypeDescription.'%';
        }
        if ( strlen($filters->monthlyInterestPercent) > 0 )
        {
            $where .= ' AND A.monthlyInterestPercent = ?';
            $args[] = $filters->monthlyInterestPercent;
        }
        if ( strlen($filters->finePercent) > 0 )
        {
            $where .= ' AND A.finePercent = ?';
            $args[] = $filters->finePercent;
        }
        if ( strlen($filters->daysToInterest) > 0 )
        {
            $where .= ' AND A.daysToInterest = ?';
            $args[] = $filters->daysToInterest;
        }
        if ( strlen($filters->daysToFine) > 0 )
        {
            $where .= ' AND A.daysToFine = ?';
            $args[] = $filters->daysToFine;
        }
        if ( strlen($filters->daysToProtest) > 0 )
        {
            $where .= ' AND A.daysToProtest = ?';
            $args[] = $filters->daysToProtest;
        }
        if ( strlen($filters->bankTaxValue) > 0 )
        {
            $where .= ' AND A.bankTaxValue = ?';
            $args[] = $filters->bankTaxValue;
        }
        if ( strlen($filters->isExtinct) > 0 )
        {
            $where .= ' AND A.isExtinct = ?';
            $args[] = $filters->isExtinct;
        }
        if ( strlen($filters->emissionTypeId) > 0 )
        {
            $where .= ' AND C.emissionTypeId = ?';
            $args[] = $filters->emissionTypeId;
        }
        
        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY A.description';
            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        }
        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertPolicy($data)
    {
        $id = $this->getDatabase()->GetNewId('seq_policyid', 'finPolicy');
        
        $sql = 'INSERT INTO finPolicy
                            (description,
                             operationId,
                             collectionTypeId,
                             daysToProtest,
                             bankTaxValue,
                             applyInterest,
                             monthlyInterestPercent,
                             interestType,
                             daysToInterest,
                             applyFine,
                             finePercent,
                             daysToFine,
                             isExtinct,
                             emissionTypeId)
                     VALUES (?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?) ';

        $args = array($data->description,
                      $data->operationId,
                      $data->collectionTypeId,
                      (strlen($data->daysToProtest)>0 ? $data->daysToProtest: 0),
                      (strlen($data->bankTaxValue)>0  ? $data->bankTaxValue : 0),
                      $data->applyInterest,
                      (strlen($data->monthlyInterestPercent)>0 ? $data->monthlyInterestPercent : 0),
                      (strlen($data->interestType)>0 ? $data->interestType : 0),
                      (strlen($data->daysToInterest)>0 ? $data->daysToInterest : 0),
                      $data->applyFine,
                      (strlen($data->finePercent)>0 ? $data->finePercent : 0),
                      (strlen($data->daysToFine)>0 ? $data->daysToFine : 0),
                      (strlen($data->isExtinct)>0 ? $data->isExtinct : DB_FALSE),
                      $data->emissionTypeId
                     );

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        if ( $result )
        {
            unset($sql);
            $sql = 'SELECT last_value FROM seq_policyid';
            $return = $this->getDatabase()->query(SAGU::prepare($sql, null));
            
            return $return[0][0];
        }
        
        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updatePolicy($data)
    {
        $sql = 'UPDATE finPolicy
                   SET description               = ?,
                       operationId               = ?,
                       collectionTypeId          = ?,
                       daysToProtest             = ?,
                       bankTaxValue              = ?,
                       applyInterest             = ?,
                       monthlyInterestPercent    = ?,
                       daysToInterest            = ?,
                       interestType              = ?,
                       applyFine                 = ?,
                       finePercent               = ?,
                       daysToFine                = ?,
                       isExtinct                 = ?,
                       emissionTypeId            = ?
                 WHERE policyId                  = ?';

        $args = array($data->description,
                      $data->operationId,
                      $data->collectionTypeId,
                      (strlen($data->daysToProtest)>0 ? $data->daysToProtest: 0),
                      (strlen($data->bankTaxValue)>0 ? $data->bankTaxValue : 0),
                      $data->applyInterest,
                      (strlen($data->monthlyInterestPercent)>0 ? $data->monthlyInterestPercent : 0),
                      (strlen($data->daysToInterest)>0 ? $data->daysToInterest : 0),
                      (strlen($data->interestType)>0 ? $data->interestType : 0),
                      $data->applyFine,
                      (strlen($data->finePercent)>0 ? $data->finePercent : 0),
                      (strlen($data->daysToFine)>0 ? $data->daysToFine : 0),
                      (strlen($data->isExtinct)>0 ? $data->isExtinct : DB_FALSE),
                      $data->emissionTypeId,
                      $data->policyId
                     );
                       
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }
        return $result;
    }

    /**
     * Delete a record
     *
     * @param $policyId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deletePolicy($policyId)
    {
        //Delete all policydiscount
        $pk = is_array($policyId) ? $policyId : array($policyId);
        
        $sql = 'DELETE FROM finpolicydiscount
                      WHERE policyId = ?';

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $pk));
        
        if( $result )
        {            
            $sql = 'DELETE FROM finPolicy
                          WHERE policyId = ?';

            $result = $this->getDatabase()->execute(SAGU::prepare($sql, $pk));
        }
        return $result;
    }
}

?>
