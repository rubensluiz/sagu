<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file manipulate the lookups for the finance module
 *
 * @author Alexandre Heitor Schmidt [alexsmith] [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith] [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [dah] [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [edmigli] [eduardo@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william] [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 12/09/2005
 *
 **/

$MIOLO = MIOLO::getInstance();
$MIOLO->getClass('basic', 'lookupFields');

/**
 * Class to manipulate the Lookups
 **/
class BusinessFinanceLookup
{
 
    /**
     * Auto complete for operation voucher message
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteOperationVoucher($context)
    {
        $sql = 'SELECT A.description,
                       A.operationTypeId,
                       B.title,
                       B.message
                  FROM finOperation A,
                       finVoucherMessages B
                 WHERE A.operationId = B.operationId
                   AND A.operationId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for operation mensage
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupOperationVoucher($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $operationId     = $lookup->getFilterValue('operationId');
        $description     = $lookup->getFilterValue('description');
        $operationTypeId = $lookup->getFilterValue('operationTypeId');
        $titleDocument   = $lookup->getFilterValue('titleDocument');
        $message         = $lookup->getFilterValue('message');

        $lookup->addFilterField( new MTextField('operationId', $operationId, _M('Código da operação', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('description', $description, _M('Operação', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        $opts = array ( 'D' => _M('Débito',$module),
                        'C' => _M('Crédito',$module) );
        $lookup->addFilterField( new MComboBox('operationTypeId', $operationTypeId, _M('Tipo de operação', $module), $opts) );

        $lookup->addFilterField( new MTextField('titleDocument', $titleDocument, _M('Documento do título', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );

        $lookup->addFilterField( new MTextField('message', $message, _M('Mensagem', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );

        $columns = array(
           new DataGridColumn('operationId',     _M('Código da operação', $module), 'right', true, null, true),
           new DataGridColumn('description',     _M('Operação', $module), 'left', true, null, true),
           new DataGridColumn('operationTypeId', _M('Tipo de operação', $module), 'left', true, null, true),
           new DataGridColumn('titleDocument',   _M('Documento do título', $module), 'left', true, null, true),
           new DataGridColumn('message',         _M('Mensagem', $module), 'left', true, null, true)
        );

        $sql = 'SELECT A.operationId,
                       A.description,
                       A.operationTypeId,
                       B.title as titleDocument,
                       B.message
                  FROM finOperation A,
                       finVoucherMessages B
                 WHERE A.operationId = B.operationId ';

        if ( strlen($operationId) > 0 )
        {
            $where .= ' AND A.operationId = ?';
            $args[] = $operationId;
        }

        if ( strlen($description) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $description . '%';
        }

        if ( strlen($operationTypeId) > 0 )
        {
            $where .= ' AND A.operationTypeId = ?';
            $args[] = $operationTypeId;
        }

        if ( strlen($titleDocument) > 0 )
        {
            $where .= ' AND UNACCENT(B.title) ILIKE UNACCENT(?)';
            $args[] = '%' . $titleDocument . '%';
        }

        if ( strlen($message) > 0 )
        {
            $where .= ' AND UNACCENT(B.message) ILIKE UNACCENT(?)';
            $args[] = '%' . $message . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= $where ;
        }

        $sql .= ' ORDER BY A.operationId';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Procura de mensagem para demonstrativos financeiros',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }


   /**
     * Auto complete for operation
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteOperation($context)
    {
        $sql = 'SELECT A.description,
                       A.operationTypeId
                  FROM finOperation A
                 WHERE A.isExtinct = \'' . DB_FALSE . '\'
                   AND A.operationId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for operation
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupOperation($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $operationId      = $lookup->getFilterValue('operationId');
        $description      = $lookup->getFilterValue('description');
        $operationTypeId  = $lookup->getFilterValue('operationTypeId');
        $operationGroupId = $lookup->getFilterValue('operationGroupId');

        $lookup->addFilterField( new MTextField('operationId',      $operationId,     _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('description',      $description,     _M('Operação', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        $opts = array ( 'D' => _M('Débito',$module),
                        'C' => _M('Crédito',$module) );
        $lookup->addFilterField( new MComboBox('operationTypeId',   $operationTypeId, _M('Tipo', $module), $opts) );
        $business = new BusinessFinanceBusOperationGroup();
        $lookup->addFilterField( new MSelection('operationGroupId', $operationGroupId, _M('Grupo de operações',$module), $business->listOperationGroup()) );

        $columns = array(
           new DataGridColumn('operationId',      _M('Código', $module), 'left', true, null, true),
           new DataGridColumn('description',      _M('Operação', $module), 'left', true, null, true),
           new DataGridColumn('operationTypeId',  _M('Tipo', $module), 'left', true, null, true),
           new DataGridColumn('operationGroupId', _M('Código do grupo de operações', $module), 'right', true, null, false),
           new DataGridColumn('operationGroup', _M('Grupo de operações', $module), 'left', true, null, true)
        );

        $sql = 'SELECT A.operationId,
                       A.description,
                       A.operationTypeId,
                       A.isExtinct,
                       A.operationGroupId,
                       B.Description as operationGroup
                  FROM finOperation A
             LEFT JOIN finOperationGroup B
                    ON ( A.operationGroupId = B.operationGroupId) ';

        if ( strlen($operationId) > 0 )
        {
            $where .= ' AND A.operationId = ?';
            $args[] = $operationId;
        }

        if ( strlen($description) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $description . '%';
        }

        if ( strlen($operationTypeId) > 0 )
        {
            $where .= ' AND A.operationTypeId = ?';
            $args[] = $operationTypeId;
        }

        if ( strlen($operationGroupId) > 0 )
        {
            $where .= ' AND A.operationGroupId = ?';
            $args[] = $operationGroupId;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE A.isExtinct = \''. DB_FALSE . '\'' . $where ;
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar operação',$module), 15, 0);
        $lookup->grid->setIsScrollable();
        
        global $page;
        $page->onLoad('document.' . $page->name . '.description.focus()');
    }


   /**
     * Auto complete for operation
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteOperationForIncomeForecast($context)
    {
        $MIOLO = MIOLO::getInstance();
        $sql = 'SELECT A.description,
                       A.operationTypeId
                  FROM finOperation A
                 WHERE A.isExtinct = \'' . DB_FALSE . '\'
                   AND A.operationId = ?
                   AND A.operationGroupId <> \''.SAGU::getParameter('FINANCE', 'PAYMENT_OPERATION_GROUP_ID').'\'';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for operation
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupOperationForIncomeForecast($lookup)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::_request('lmodule');
    
        $operationId      = $lookup->getFilterValue('operationId');
        $description      = $lookup->getFilterValue('description');
        $operationTypeId  = $lookup->getFilterValue('operationTypeId');
        $operationGroupId = $lookup->getFilterValue('operationGroupId');

        $lookup->addFilterField( new MTextField('operationId',      $operationId,     _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('description',      $description,     _M('Operação', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        $opts = array ( 'D' => _M('Débito',$module),
                        'C' => _M('Crédito',$module) );
        $lookup->addFilterField( new MComboBox('operationTypeId',   $operationTypeId, _M('Tipo', $module), $opts) );
        $business = new BusinessFinanceBusOperationGroup();
        $lookup->addFilterField( new MSelection('operationGroupId', $operationGroupId, _M('Grupo de operações',$module), $business->listOperationGroupForEntries()) );

        $columns = array(
           new DataGridColumn('operationId',      _M('Código', $module), 'left', true, null, true),
           new DataGridColumn('description',      _M('Operação', $module), 'left', true, null, true),
           new DataGridColumn('operationTypeId',  _M('Tipo', $module), 'left', true, null, true),
           new DataGridColumn('operationGroupId', _M('Código do grupo de operações', $module), 'right', true, null, false),
           new DataGridColumn('operationGroup',   _M('Grupo de operações', $module), 'left', true, null, true)
        );

        $sql = 'SELECT A.operationId,
                       A.description,
                       A.operationTypeId,
                       A.isExtinct,
                       A.operationGroupId,
                       B.Description as operationGroup
                  FROM finOperation A
             LEFT JOIN finOperationGroup B
                    ON ( A.operationGroupId = B.operationGroupId
                     AND A.operationGroupId <> \''.SAGU::getParameter('FINANCE', 'PAYMENT_OPERATION_GROUP_ID').'\') ';

        if ( strlen($operationId) > 0 )
        {
            $where .= ' AND A.operationId = ?';
            $args[] = $operationId;
        }

        if ( strlen($description) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $description . '%';
        }

        if ( strlen($operationTypeId) > 0 )
        {
            $where .= ' AND A.operationTypeId = ?';
            $args[] = $operationTypeId;
        }

        if ( strlen($operationGroupId) > 0 )
        {
            $where .= ' AND A.operationGroupId = ?';
            $args[] = $operationGroupId;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE A.isExtinct = \''. DB_FALSE . '\'' . $where ;
        }

        $sql .= ' ORDER BY A.operationId';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar operação',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for Police
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompletePolicy($context)
    {
        $sql = 'SELECT A.description,
                       A.operationId,
                       A.collectionTypeId,
                       A.monthlyInterestPercent,
                       A.finePercent,
                       A.daysToInterest,
                       A.daysToFine,
                       A.bankTaxValue
                  FROM finPolicy A    
                 WHERE A.PolicyId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    public function lookupPolicy($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $policyId               = $lookup->getFilterValue('policyId');
        $description            = $lookup->getFilterValue('description');
        $operationId            = $lookup->getFilterValue('operationId');
        $operation              = $lookup->getFilterValue('operation');
        
        $lookup->addFilterField( new MTextField('policyId',        $policyId,        _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('description',     $description,     _M('Política', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('operationId',     $operationId,     _M('Código da operação', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('operation',       $operation,       _M('Operação', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );

        global $page;
        $page->onLoad('document.' . $page->name . '.description.focus()');

        $columns = array(
           new DataGridColumn('policyId',               _M('Código', $module), 'right', true, null, true),
           new DataGridColumn('description',            _M('Política', $module), 'left', true, null, true),
           new DataGridColumn('operationId',            _M('Código da operação', $module), 'right', true, null, true),
           new DataGridColumn('operation',              _M('Operação', $module), 'left', true, null, true),
           new DataGridColumn('monthlyInterestPercent', _M('Percentual de juros ao mês', $module), 'right', true, null, true),
           new DataGridColumn('finePercent',            _M('Percentual de multa', $module), 'right', true, null, true),
           new DataGridColumn('daysToInterest',         _M('Dias para juros', $module), 'right',  true, null, true),
           new DataGridColumn('daysToFine',             _M('Dias para multa', $module), 'right', true, null, true),
           new DataGridColumn('bankTaxValue',           _M('Valor da taxa bancária', $module), 'right',  true, null, true)
        );

        $sql = 'SELECT A.policyId,
                       A.description,
                       A.operationId,
                       A.monthlyInterestPercent,
                       A.finePercent,
                       A.daysToInterest,
                       A.daysToFine,
                       A.bankTaxValue,
                       B.description as operation
                  FROM finPolicy A
             LEFT JOIN finOperation B
                 USING ( operationId )';

        if ( strlen($policyId) > 0 )
        {
            $where .= ' AND A.policyId = ?';
            $args[] = $policyId;
        }

        if ( strlen($description) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $description . '%';
        }

        if ( strlen($operationId) > 0 )
        {
            $where .= ' AND A.operationId = ?';
            $args[] = $operationId;
        }

        if ( strlen($operation) > 0 )
        {
            $where .= ' AND UNACCENT(B.description) ILIKE UNACCENT(?)';
            $args[] = $operation . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE A.isExtinct = \''. DB_FALSE . '\'' . $where ;
        }

        $sql .= ' ORDER BY A.description, B.description';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar política',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for income source
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteIncomeSource($context)
    {
        $sql = 'SELECT A.description,
                       A.isExtinct
                  FROM finIncomeSource A
                 WHERE A.incomeSourceId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for income source
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupIncomeSource($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $incomeSourceId = $lookup->getFilterValue('incomeSourceId');
        $description    = $lookup->getFilterValue('description');

        $lookup->addFilterField( new MTextField('incomeSourceId', $incomeSourceId, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField( new MTextField('description',    $description,    _M('Origem', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        global $page;
        $page->onLoad('document.' . $page->name . '.description.focus()');

        $columns = array(
           new DataGridColumn('incomeSourceId', _M('Código', $module), 'right', true, null, true),
           new DataGridColumn('description',    _M('Origem', $module), 'left', true, null, true)
        );

        $sql = 'SELECT A.incomeSourceId,
                       A.description,
                       A.isExtinct
                  FROM finIncomeSource A';

        if ( strlen($incomeSourceId) > 0 )
        {
            $where .= ' AND A.incomeSourceId = ?';
            $args[] = $incomeSourceId;
        }

        if ( strlen($description) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $description . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE A.isExtinct = \''. DB_FALSE . '\'' . $where ;
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar a origem',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for convenant
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteConvenant($context)
    {
        $sql = 'SELECT A.description
                  FROM finConvenant A
                 WHERE A.convenantId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for convenant
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupConvenant($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $convenantId = $lookup->getFilterValue('convenantId');
        $description = $lookup->getFilterValue('description');
        $value = $lookup->getFilterValue('value');
        $days = $lookup->getFilterValue('daysToDiscount');

        $lookup->addFilterField( new MTextField('convenantId', $convenantId, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField( new MTextField('description', $description, _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField( new MTextField('value',       $value, _M('Valor', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField( new MTextField('daysToDiscount', $days, _M('Dias', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));

        $columns = array(
           new DataGridColumn('convenantId', _M('Código', $module),     'right', true, null, true),
           new DataGridColumn('description', _M('Descrição', $module), 'left',  true, null, true),
           new DataGridColumn('value', _M('Valor', $module),     'right', true, null, true),
           new DataGridColumn('isPercent', _M('É percentual', $module), 'left',  true, null, true, SAGU::listTrueFalse(0)),
           new DataGridColumn('daysToDiscount', _M('Dias', $module),     'right', true, null, true),
           new DataGridColumn('beforeAfter', _M('Antes ou depois do vencimento', $module), 'left',  true, null, true, array('B' => _M('Antes', $module), 'A' => _M('Depois', $module) ))
        );

        $sql = 'SELECT A.convenantId,
                       A.description,
                       A.value,
                       A.isPercent,
                       A.daysToDiscount,
                       A.beforeAfter
                  FROM finConvenant A';

        if ( strlen($convenantId) > 0 )
        {
            $where .= ' AND A.convenantId = ?';
            $args[] = $convenantId;
        }

        if ( strlen($description) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $description . '%';
        }
        
        if ( strlen($value) > 0 )
        {
            $where .= ' AND A.value = ?';
            $args[] = $value;
        }

        if ( strlen($isPercent) > 0 )
        {
            $where .= ' AND A.isPercent = ?';
            $args[] = $isPercent;
        }
        if ( strlen($days) > 0 )
        {
            $where .= ' AND A.daysToDiscount = ?';
            $args[] = $days;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.convenantId';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Buscar convênio', $module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for bank
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteBank($context)
    {
        $sql = 'SELECT A.description
                  FROM finBank A
                 WHERE A.bankId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for bank
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupBank($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $bankId      = $lookup->getFilterValue('bankId');
        $description = $lookup->getFilterValue('description');

        $lookup->addFilterField( new MTextField('bankId',      $bankId,      _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField( new MTextField('description', $description, _M('Banco', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        $columns = array(
           new DataGridColumn('bankId',      _M('Código', $module),     'right', true, null, true),
           new DataGridColumn('description', _M('Banco', $module), 'left',  true, null, true)
        );

        $sql = 'SELECT A.bankId,
                       A.description
                  FROM finBank A';

        if ( strlen($bankId) > 0 )
        {
            $where .= ' AND UNACCENT(A.bankId) ILIKE UNACCENT(?)';
            $args[] = $bankId . '%';
        }

        if ( strlen($description) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $description . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.bankId';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar banco', $module), 15, 0);
        $lookup->grid->setIsScrollable();

    }
    
    /**
     * Auto complete for Invoice Message
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteInvoiceMessage($context)
    {
        $sql = 'SELECT A.description
                  FROM finInvoiceMessage A
                 WHERE A.invoiceMessageId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for Invoice Message
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupInvoiceMessage($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $invoiceMessageId = $lookup->getFilterValue('invoiceMessageId');
        $bankId = $lookup->getFilterValue('bankId');
        $description = $lookup->getFilterValue('description');
        $invoiceMessageTypeId = $lookup->getFilterValue('invoiceMessageTypeId');

        $lookup->addFilterField( new MTextField('invoiceMessageId',      $invoiceMessageId,      _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField( new MTextField('bankId',      $bankId,      _M('Código do banco', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField( new MTextField('description', $description, _M('Mensagem', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField( new MTextField('invoiceMessageTypeId', $invoiceMessageTypeId, _M('Código do tipo', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));

        $columns = array(
           new DataGridColumn('invoiceMessageId', _M('Código', $module), 'right', true, null, true),
           new DataGridColumn('description', _M('Mensagem', $module), 'left',  true, null, true),
           new DataGridColumn('invoiceMessageType', _M('Tipo', $module), 'left',  true, null, true),
           new DataGridColumn('descriptionBank', _M('Banco', $module), 'left',  true, null, true)
        );

        $sql = 'SELECT A.invoiceMessageId,
                       A.description,
                       B.description as invoiceMessageType,
                       C.description as descriptionBank
                  FROM fininvoicemessage A
                  INNER JOIN fininvoicemessagetype B
                          ON B.invoicemessagetypeid=A.invoicemessagetypeid
                  INNER JOIN finbank C
                          ON C.bankid=A.bankid';

        if ( strlen($invoiceMessageId) > 0 )
        {
            $where .= ' AND A.invoiceMessageId = ?';
            $args[] = $invoiceMessageId;
        }
        
        if ( strlen($bankId) > 0 )
        {
            $where .= ' AND UNACCENT(A.bankId) ILIKE UNACCENT(?)';
            $args[] = $bankId . '%';
        }

        if ( strlen($description) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $description . '%';
        }
        
        if ( strlen($invoiceMessageTypeId) > 0 )
        {
            $where .= ' AND A.invoicemessagetypeid = ?';
            $args[] = $invoiceMessageTypeId;
        }
        
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.bankId, A.description ';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar mensagem do boleto', $module), 15, 0);
        $lookup->grid->setIsScrollable();

    }


    /**
     * Auto complete for bank
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteBankAccount($context)
    {
        $sql = 'SELECT A.description
              FROM finBankAccount A
             WHERE A.bankAccountId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for bank
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupBankAccount($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $bankAccountId = $lookup->getFilterValue('bankAccountId');
        $description    = $lookup->getFilterValue('description');

        $lookup->addFilterField( new MTextField('bankAccountId', $bankAccountId, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField( new MTextField('description', $description, _M('Banco', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        $columns = array(
           new MDataGridColumn('bankAccountId', _M('Código', $module), 'right', true, null, true),
           new MDataGridColumn('description', _M('Banco', $module), 'left',  true, null, true)
        );

        $sql = 'SELECT A.bankAccountId,
                   A.description
              FROM finBankAccount A';

        if ( strlen($bankAccountId) > 0 )
        {
            $where .= ' AND A.bankAccountId = ?';
            $args[] = $bankAccountId;
        }

        if ( strlen($description) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $description . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar banco', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }


    /**
     * Auto complete for counter
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteCounter($context)
    {
        $sql = 'SELECT A.description,
                       A.unitId,
                       C.description
                  FROM finCounter A
            INNER JOIN basUnit C
                    ON ( A.unitId = C.unitId )
                 WHERE A.counterId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for counter
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupCounter($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $counterId = $lookup->getFilterValue('counterId');
        $description = $lookup->getFilterValue('description');
        $unitId = $lookup->getFilterValue('unitId');
        $isActive = DB_TRUE;
        $onlyAvailable = $lookup->getFilterValue('onlyAvailable');
        
        $lookup->addFilterField( new MTextField('counterId', $counterId, _M('Código do caixa', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('description', $description, _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        $lookup->addFilterField( fields::unit($unitId) );
        $lookup->addFilterField( new MHiddenField('isActive', $counterId, _M('Está ativo', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MHiddenField('onlyAvailable', $onlyAvailable, _M('Apenas disponível', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
        
        
        $columns = array(
           new DataGridColumn('counterId', _M('Código do caixa', $module), 'left', true, null, true),
           new DataGridColumn('description', _M('Descrição', $module), 'left', true, null, true),
           new DataGridColumn('unitId', _M('Código da unidade', $module), 'right', true, null, true),
           new DataGridColumn('unitDescription', _M('Unidade', $module), 'left', true, null, true)
        );

        $sql = 'SELECT A.counterId,
                       A.description,
                       A.unitId,
                       C.description as unitDescription,
                       A.isActive
                  FROM finCounter A
            INNER JOIN basUnit C
                    ON (A.unitId = C.unitId) ';
        
        if ( strlen($onlyAvailable)>0 )
        {
            $where =  ' AND A.counterId 
		     NOT IN (SELECT A.counterId            
		               FROM finCounter A
		              WHERE A.counterId 
		        IN ( SELECT O.counterId 
		               FROM finopenCounter O
		              WHERE O.openCounterId 
		     NOT IN (SELECT E.openCounterId
		               FROM finopenCounter E
		         INNER JOIN fincloseCounter D
		                 ON (E.openCounterId = D.openCounterId))))';
        }
        
        if ( strlen($counterId) > 0 )
        {
            $where .= ' AND A.counterId = ?';
            $args[] = $counterId;
        }

        if ( strlen($description) > 0 )
        {
        	$where .= ' AND A.description ILIKE ? ';
            $args[] = $description.'%';
        }

        if ( strlen($unitId) > 0 )
        {
            $where .= ' AND A.unitId = ?';
            $args[] = $unitId;
        }
        
        if ( strlen($isActive) > 0 )
        {
            $where .= ' AND A.isActive = ?';
            $args[] = $isActive;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where,  5);
        }

        $sql .= ' ORDER BY 2';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));        
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Procura por caixa',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for invoice
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteInvoice($context)
    {
        $sql = '   SELECT A.personId,
                          B.name,
                          A.accountSchemeId,
                          A.costCenterId
                FROM ONLY finInvoice A
               INNER JOIN basPerson B
                    USING ( personId )
                    WHERE iscanceled = FALSE 
                      AND invoiceId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for invoice
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupInvoice($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $invoiceId             = $lookup->getFilterValue('invoiceId');
        $personId              = $lookup->getFilterValue('personId');
        $personName            = $lookup->getFilterValue('personName');
        $accountSchemeId       = $lookup->getFilterValue('accountSchemeId');
        $accountSchemeDescription = $lookup->getFilterValue('accountSchemeDescription');
        $costCenterId          = $lookup->getFilterValue('costCenterId');
        $costCenterDescription = $lookup->getFilterValue('costCenterDescription');
        $maturityDate          = $lookup->getFilterValue('maturityDate');

        $lookup->addFilterField( new MTextField('invoiceId', $invoiceId, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('personId', $personId, _M('Código da pessoa', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('personName', $personName, _M('Pessoa', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('accountSchemeId', $accountSchemeId, _M('Código do plano de contas', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('accountSchemeDescription', $accountSchemeDescription, _M('Descrição do plano de contas', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('costCenterId', $costCenterId, _M('Código do centro de custo', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('costCenterDescription', $costCenterDescription, _M('Descrição do centro de custo', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('maturityDate', $maturityDate, _M('Data de vencimento', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_LOOKUP_SIZE')) );

        $columns = array(
           new DataGridColumn('invoiceId',       _M('Código', $module), 'left', true, null, true ),
           new DataGridColumn('maturityDate',    _M('Data de vencimento', $module), 'left', true, null, true ),
           new DataGridColumn('personId',        _M('Código da pessoa', $module), 'right', true, null, true ),
           new DataGridColumn('personName',      _M('Pessoa', $module), 'left', true, null, true ),
           new DataGridColumn('accountSchemeId', _M('Código do plano de contas', $module), 'right', true, null, true ),
           new DataGridColumn('accountSchemeDescription', _M('Descrição do plano de contas', $module), 'left', true, null, true ),
           new DataGridColumn('costCenterId',    _M('Código do centro de custo', $module), 'right', true, null, true ),
           new DataGridColumn('costCenterDescription', _M('Descrição do centro de custo', $module), 'left', true, null, true )
        );

        $sql = 'SELECT A.invoiceId,
                       A.personId,
                       B.name AS personName, 
                       A.accountSchemeId,
                       C.description AS accountSchemeDescription,
                       A.costCenterId,
                       D.description AS costCenterDescription,
                       TO_CHAR(A.maturityDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') as maturityDate
             FROM ONLY finInvoice A
       INNER JOIN ONLY basPerson B
                    ON ( A.personId = B.personId )
             LEFT JOIN finentry I
                    ON (A.invoiceid = I.invoiceid)
             LEFT JOIN acdLearningPeriod H
                    ON (I.learningPeriodId = H.learningPeriodId)
             LEFT JOIN accAccountScheme C
                    ON ( A.accountSchemeId = C.accountSchemeId )
             LEFT JOIN accCostCenter D
                    ON ( A.costCenterId = D.costCenterId )
                 WHERE A.invoiceId > 0 
                   AND A.iscanceled = FALSE ';

        if ( strlen($invoiceId) > 0 )
        {
            $where .= ' AND A.invoiceId = ?';
            $args[] = $invoiceId;
        }

        if ( strlen($maturityDate) > 0 )
        {
            $where .= ' AND A.maturityDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $args[] = $maturityDate;
        }

        if ( strlen($personId) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $args[] = $personId;
        }

        if ( strlen($personName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $personName . '%';
        }

        if ( strlen($accountSchemeId) > 0 )
        {
            $where .= ' AND A.accountSchemeId = ?';
            $args[] = $accountSchemeId;
        }

        if ( strlen($accountSchemeDescription) > 0 )
        {
            $where .= ' AND UNACCENT(C.description) ILIKE UNACCENT(?)';
            $args[] = $accountSchemeDescription . '%';
        }
        
        if ( strlen($costCenterId) > 0 )
        {
            $where .= ' AND A.costCenterId = ?';
            $args[] = $costCenterId;
        }

        if ( strlen($costCenterDescription) > 0 )
        {
            $where .= ' AND UNACCENT(D.description) ILIKE UNACCENT(?)';
            $args[] = $costCenterDescription . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= substr($where, 1);
        }

        $sql .= ' ORDER BY B.name, A.maturityDate DESC';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar título',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }
    
    
    /**
     * Auto complete for receivable invoice
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteReceivableInvoice($context)
    {
        $sql = '   SELECT  A.personId,
                           B.name AS personName, 
                           A.accountSchemeId,
                           C.description AS accountSchemeDescription,
                           A.costCenterId,
                           D.description AS costCenterDescription,
                           TO_CHAR(A.maturityDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') as maturityDate,
                           ROUND(A.value, '.SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE').')
                 FROM ONLY finReceivableInvoice A
       INNER JOIN ONLY basPerson B
                    ON ( A.personId = B.personId )
             LEFT JOIN finentry I
                    ON (A.invoiceid = I.invoiceid)
             LEFT JOIN acdLearningPeriod H
                    ON (I.learningPeriodId = H.learningPeriodId)
             LEFT JOIN accAccountScheme C
                    ON ( A.accountSchemeId = C.accountSchemeId )
             LEFT JOIN accCostCenter D
                    ON ( A.costCenterId = D.costCenterId )
                 WHERE A.iscanceled = FALSE 
                   AND A.invoiceId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }
    
    /**
     * Lookup for receivable invoice
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupReceivableInvoice($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $invoiceId             = $lookup->getFilterValue('invoiceId');
        $personId              = $lookup->getFilterValue('personId');
        $personName            = $lookup->getFilterValue('personName');
        $accountSchemeId       = $lookup->getFilterValue('accountSchemeId');
        $accountSchemeDescription = $lookup->getFilterValue('accountSchemeDescription');
        $costCenterId          = $lookup->getFilterValue('costCenterId');
        $costCenterDescription = $lookup->getFilterValue('costCenterDescription');
        $maturityDate          = $lookup->getFilterValue('maturityDate');

        $lookup->addFilterField( new MTextField('invoiceId', $invoiceId, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('personId', $personId, _M('Código da pessoa', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('personName', $personName, _M('Pessoa', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('accountSchemeId', $accountSchemeId, _M('Código do plano de contas', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('accountSchemeDescription', $accountSchemeDescription, _M('Descrição do plano de contas', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('costCenterId', $costCenterId, _M('Código do centro de custo', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('costCenterDescription', $costCenterDescription, _M('Descrição do centro de custo', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('maturityDate', $maturityDate, _M('Data de vencimento', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_LOOKUP_SIZE')) );

        $columns = array(
           new DataGridColumn('invoiceId',       _M('Código', $module), 'left', true, null, true ),           
           new DataGridColumn('personId',        _M('Código da pessoa', $module), 'right', true, null, true ),
           new DataGridColumn('personName',      _M('Pessoa', $module), 'left', true, null, true ),
           new DataGridColumn('accountSchemeId', _M('Código do plano de contas', $module), 'right', true, null, true ),
           new DataGridColumn('accountSchemeDescription', _M('Descrição do plano de contas', $module), 'left', true, null, true ),
           new DataGridColumn('costCenterId',    _M('Código do centro de custo', $module), 'right', true, null, true ),
           new DataGridColumn('costCenterDescription', _M('Descrição do centro de custo', $module), 'left', true, null, true ),
           new DataGridColumn('maturityDate',    _M('Data de vencimento', $module), 'left', true, null, true ),
           new DataGridColumn('value',    _M('Valor', $module), 'left', true, null, true )
        );

        $sql = 'SELECT A.invoiceId,                       
                       A.personId,
                       B.name AS personName, 
                       A.accountSchemeId,
                       C.description AS accountSchemeDescription,
                       A.costCenterId,
                       D.description AS costCenterDescription,
                       TO_CHAR(A.maturityDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') as maturityDate,
                       ROUND(A.value, '.SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE').')
             FROM ONLY finInvoice A
       INNER JOIN ONLY basPerson B
                    ON ( A.personId = B.personId )
             LEFT JOIN finentry I
                    ON (A.invoiceid = I.invoiceid)
             LEFT JOIN acdLearningPeriod H
                    ON (I.learningPeriodId = H.learningPeriodId)
             LEFT JOIN accAccountScheme C
                    ON ( A.accountSchemeId = C.accountSchemeId )
             LEFT JOIN accCostCenter D
                    ON ( A.costCenterId = D.costCenterId )
                 WHERE A.invoiceId > 0 
                   AND A.iscanceled = FALSE ';

        if ( strlen($invoiceId) > 0 )
        {
            $where .= ' AND A.invoiceId = ?';
            $args[] = $invoiceId;
        }

        if ( strlen($maturityDate) > 0 )
        {
            $where .= ' AND A.maturityDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $args[] = $maturityDate;
        }

        if ( strlen($personId) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $args[] = $personId;
        }

        if ( strlen($personName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $personName . '%';
        }

        if ( strlen($accountSchemeId) > 0 )
        {
            $where .= ' AND A.accountSchemeId = ?';
            $args[] = $accountSchemeId;
        }

        if ( strlen($accountSchemeDescription) > 0 )
        {
            $where .= ' AND UNACCENT(C.description) ILIKE UNACCENT(?)';
            $args[] = $accountSchemeDescription . '%';
        }
        
        if ( strlen($costCenterId) > 0 )
        {
            $where .= ' AND A.costCenterId = ?';
            $args[] = $costCenterId;
        }

        if ( strlen($costCenterDescription) > 0 )
        {
            $where .= ' AND UNACCENT(D.description) ILIKE UNACCENT(?)';
            $args[] = $costCenterDescription . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= substr($where, 1);
        }

        $sql .= ' ORDER BY B.name, A.maturityDate DESC';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar título a receber',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

   /**
     * Auto complete for incentive type
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteIncentiveType($context)
    {
        $sql = 'SELECT A.description
                  FROM ONLY finIncentiveType A
                 WHERE A.incentiveTypeId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for account scheme
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupIncentiveType($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $incentiveTypeId      = $lookup->getFilterValue('incentiveTypeId');
        $description          = $lookup->getFilterValue('description');
        $operationId          = $lookup->getFilterValue('operationId');
        $operationDescription = $lookup->getFilterValue('operationDescription');

        $lookup->addFilterField( new MTextField('incentiveTypeId', $incentiveTypeId, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField( new MTextField('description', $description, _M('Tipo de incentivo', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField( new MTextField('operationId', $operationId, _M('Código da operação', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField( new MTextField('operationDescription', $operationDescription, _M('Operação', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        $columns = array(
           new DataGridColumn('incentiveTypeId',      _M('Código', $module), 'right', true, null, true),
           new DataGridColumn('description',          _M('Tipo de incentivo', $module), 'left', true, null, true),
           new DataGridColumn('operationId',          _M('Código da operação', $module), 'right', true, null, true),
           new DataGridColumn('operationDescription', _M('Operação', $module), 'left', true, null, true),
           new DataGridColumn('needAdjustAuthorization', _M('Precisa de autorização para ajuste', $module), 'left', true, null, true, array(DB_TRUE => _M('Sim',$module), DB_FALSE => _M('Não',$module))),
           new DataGridColumn('sendInvoices',         _M('Enviar títulos', $module), 'left', true, null, true, array(DB_TRUE => _M('Sim',$module), DB_FALSE => _M('Não',$module))),
           new DataGridColumn('generateCredits',      _M('Gerar créditos', $module), 'left', true, null, true, array(DB_TRUE => _M('Sim',$module), DB_FALSE => _M('Não',$module))),
        );

        $sql = 'SELECT A.incentiveTypeId,
                       A.description,
                       B.operationId,
                       B.description AS operationDescription,
                       A.needAdjustAuthorization,
                       A.sendInvoices,
                       A.generateCredits
                  FROM ONLY finIncentiveType A
            INNER JOIN finOperation B
                    ON ( A.operationId = B.operationId ) ';

        if ( strlen($incentiveTypeId) > 0 )
        {
            $where .= ' AND A.incentiveTypeId = ?';
            $args[] = $incentiveTypeId;
        }

        if ( strlen($description) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $description . '%';
        }

        if ( strlen($operationId) > 0 )
        {
            $where .= ' AND B.operationId = ?';
            $args[] = $operationId;
        }

        if ( strlen($operationDescription) > 0 )
        {
            $where .= ' AND UNACCENT(B.description) ILIKE UNACCENT(?)';
            $args[] = $operationDescription . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Busca de tipos de incentivos',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

   /**
     * Auto complete for course, account scheme, cost center
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteCourseAccountSchemeCostCenter($context)
    {
        $sql = 'SELECT A.courseVersion,
                       B.name,
                       C.accountSchemeId,
                       D.description,
                       C.costCenterId,
                       E.description,
                       C.unitId
                FROM acdCourseVersion A
                INNER JOIN acdCourse B
                    USING (courseId)
                LEFT JOIN accCourseAccount C
                    ON (A.courseId = C.courseId
                        AND A.courseVersion = C.courseVersion
                        AND ((SELECT COUNT(*)
                          FROM accCourseAccount X
                          WHERE X.courseId = C.courseId) = 1 ) )
                LEFT JOIN accAccountScheme D
                    USING (accountSchemeId)
                LEFT JOIN accCostCenter E
                    USING (costCenterId)
                WHERE ((SELECT COUNT(*)
                          FROM acdCourseVersion Y
                          WHERE Y.courseId = A.courseId) = 1 )
                    AND A.courseId = ? ';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for course, account scheme, cost center
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupCourseAccountSchemeCostCenter($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $courseId                 = $lookup->getFilterValue('courseId');
        $courseVersion            = $lookup->getFilterValue('courseVersion');
        $courseName               = $lookup->getFilterValue('courseName');
        $accountSchemeId          = $lookup->getFilterValue('accountSchemeId');
        $costCenterId             = $lookup->getFilterValue('costCenterId');

        $lookup->addFilterField( new MTextField('courseId',         $courseId,         _M('Código do curso', $module),         SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField( new MTextField('courseVersion',    $courseVersion,    _M('Versão do curso', $module),    SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField( new MTextField('courseName',       $courseName,       _M('Curso', $module),            SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField( new MTextField('accountSchemeId',  $accountSchemeId,  _M('Código do plano de contas', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField( new MTextField('costCenterId',     $costCenterId,     _M('Código do centro de custo', $module),    SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));

        $columns = array(
           new DataGridColumn('courseId',                 _M('Código do curso', $module), 'right', true, null, true),
           new DataGridColumn('courseVersion',            _M('Versão do curso', $module), 'left', true, null, true),
           new DataGridColumn('courseName',               _M('Curso', $module), 'left', true, null, true),
           new DataGridColumn('unitDescription',          _M('Descrição da unidade', $module), 'left', true, null, true),
           new DataGridColumn('accountSchemeId',          _M('Código do plano de contas', $module), 'left', true, null, true),
           new DataGridColumn('accountSchemeDescription', _M('Plano de contas', $module), 'left', true, null, true),
           new DataGridColumn('costCenterId',             _M('Código do centro de custo', $module), 'left', true, null, true),
           new DataGridColumn('costCenterDescription',    _M('Centro de custo', $module), 'left', true, null, true),
        );

        $sql = 'SELECT A.courseId,
                       A.courseVersion,
                       B.name AS courseName,
                       C.accountSchemeId,
                       D.description AS accountSchemeDescription,
                       C.costCenterId,
                       E.description AS costCenterDescription,
                       F.unitId,
                       F.description AS unitDescription
                FROM acdCourseVersion A
                    INNER JOIN acdCourse B
                        USING (courseId)
                    LEFT JOIN accCourseAccount C 
                        USING (courseId, courseVersion) 
                    LEFT JOIN accAccountScheme D 
                        USING (accountSchemeId)
                    LEFT JOIN accCostCenter E
                        USING (costCenterId)
                    LEFT JOIN basUnit F
                        USING (unitId) ';

        if ( strlen($courseId) > 0 )
        {
            $where .= ' AND A.courseId = ?';
            $args[] = $courseId;
        }

        if ( strlen($courseVersion) > 0 )
        {
            $where .= ' AND A.courseVersion = ?';
            $args[] = $courseVersion;
        }

        if ( strlen($courseName) > 0 )
        {
            $where .= ' AND ( UNACCENT(B.name) ILIKE UNACCENT(?) OR UNACCENT(B.shortName) ILIKE UNACCENT(?))';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }

        if ( strlen($accountSchemeId) > 0 )
        {
            $where .= ' AND C.accountSchemeId = ?';
            $args[] = $accountSchemeId;
        }

        if ( strlen($costCenterId) > 0 )
        {
            $where .= ' AND C.costCenterId = ?';
            $args[] = $costCenterId;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY B.name';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Procura por curso',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }
    
    
    /**
     * Auto complete for spc reason
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteSpcReason($context)
    {        
        $sql = 'SELECT description
                  FROM finSPCReason
                 WHERE reasonId = ?';
        
        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for spc reason
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupSpcReason($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $reasonId = $lookup->getFilterValue('reasonId');
        $description = $lookup->getFilterValue('description');

        $lookup->addFilterField( new MTextField('reasonId', $reasonId, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField( new MTextField('description', $description, _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        global $page;
        $page->onLoad('document.' . $page->name . '.description.focus()');

        $columns = array(
           new DataGridColumn('reasonId', _M('Código', $module), 'right', true, null, true),
           new DataGridColumn('description', _M('Descrição', $module), 'left', true, null, true)
        );
       
        $sql = 'SELECT reasonId,
                       description
                  FROM finSPCReason ';
        
        if ( strlen($reasonId) > 0 )
        {
            $where .= ' AND reasonId = ? ';
            $args[] = $reasonId;
        }
        if ( strlen($description) > 0 )
        {
            $where .= ' AND UNACCENT(description) ILIKE UNACCENT(?) ';
            $args[] = $description . '%';
        }
        
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4);
        }
        
        $sql .= ' ORDER BY 2,1';            
        
        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisar razão SPC',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    
    /**
     * Auto complete for physical person who are not in the spc
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompletePhysicalPersonWhoAreNotInTheSpc($context)
    {
        $sql = 'SELECT A.name AS personName,
                       H.name || \' \' || A.location AS location,
                       A.complement,
                       A.neighborhood,
                       A.cityId,
                       B.name AS cityName,
                       B.stateId,
                       B.countryId,
                       C.name AS countryName,
                       D.externalCourseIdHs,
                       E.name,
                       D.institutionIdHs,
                       F.name,
                       D.cityIdHs,
                       G.name,
                       D.yearHs,
                       D.isInsured,
                       D.passive
             FROM ONLY basPhysicalPerson A
             LEFT JOIN basCity B
                    ON ( B.cityId = A.cityId )
             LEFT JOIN basCountry C
                    ON ( C.countryId = B.countryId )
             LEFT JOIN basPhysicalPersonStudent D
                    ON ( D.personId = A.personId )
             LEFT JOIN acdExternalCourse E
                    ON (E.externalCourseId = D.externalCourseIdHs)
             LEFT JOIN basLegalPerson F
                    ON (F.personId = D.institutionIdHs)
             LEFT JOIN basCity G
                    ON (G.cityId = D.cityIdHs)
             LEFT JOIN basLocationType H
                    ON (A.locationTypeId = H.locationTypeId)
                 WHERE A.personId = ? 
                   AND A.personId NOT IN(SELECT I.personId 
                                           FROM finSpc I
                                          WHERE (A.personId = I.personId
                                            AND I.removalDate IS NULL OR I.removalDate >= now()::DATE));';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for physical person
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupPhysicalPersonWhoAreNotInTheSpc($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->conf->loadConf($module);

        $personId = $lookup->getFilterValue('personId');
        $personName = $lookup->getFilterValue('personName');
        $personLastName = $lookup->getFilterValue('personLastName');
        $location = $lookup->getFilterValue('location');
        $complement = $lookup->getFilterValue('complement');
        $neighborhood = $lookup->getFilterValue('neighborhood');
        $cityId = $lookup->getFilterValue('cityId');
        $cityName = $lookup->getFilterValue('cityName');
        $stateId = $lookup->getFilterValue('stateId');
        $countryId = $lookup->getFilterValue('countryId');
        $countryName = $lookup->getFilterValue('countryName');

        $lookup->addFilterField( new MTextField('personId', $personId, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('personName', $personName, _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('personLastName', $personLastName, _M('Sobrenome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('location', $location, _M('Logradouro', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('cityName', $cityName, _M('Cidade', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        $lookup->addFilterField( fields::country($countryId) );

        global $page;
        $page->onLoad('document.' . $page->name . '.personName.focus()');

        $columns = array(
           new DataGridColumn('personId', _M('Código', $module), 'right', true, null, true),
           new DataGridColumn('personName', _M('Nome', $module), 'left',  true, null, true),
           new DataGridColumn('location', _M('Logradouro', $module), 'left',  true, null, true),
           new DataGridColumn('complement', _M('Complemento', $module), 'left',  true, null, false),
           new DataGridColumn('neighborhood', _M('Bairro', $module), 'left',  true, null, false),
           new DataGridColumn('cityId', _M('Código da cidade', $module), 'left',  true, null, true),
           new DataGridColumn('cityName', _M('Nome da cidade', $module), 'left',  true, null, true),
           new DataGridColumn('stateId', _M('Estado', $module), 'left',  true, null, true),
           new DataGridColumn('countryId', _M('País', $module), 'left',  true, null, false),
           new DataGridColumn('countryName', _M('País', $module), 'left',  true, null, true)
        );

        $sql = 'SELECT A.personId,
                       A.name AS personName,
                       H.name || \' \' || A.location AS location,
                       A.complement,
                       A.neighborhood,
                       A.cityId,
                       B.name AS cityName,
                       B.stateId,
                       B.countryId,
                       C.name AS countryName,
                       D.externalCourseIdHs,
                       E.name,
                       D.institutionIdHs,
                       F.name,
                       D.cityIdHs,
                       G.name,
                       D.yearHs,
                       D.isInsured,
                       D.passive
             FROM ONLY basPhysicalPerson A
             LEFT JOIN basCity B
                    ON ( B.cityId = A.cityId )
             LEFT JOIN basCountry C
                    ON ( C.countryId = B.countryId )
             LEFT JOIN basPhysicalPersonStudent D
                    ON ( D.personId = A.personId )
             LEFT JOIN acdExternalCourse E
                    ON (E.externalCourseId = D.externalCourseIdHs)
             LEFT JOIN basLegalPerson F
                    ON (F.personId = D.institutionIdHs)
             LEFT JOIN basCity G
                    ON (G.cityId = D.cityIdHs)
             LEFT JOIN basLocationType H
                    ON (A.locationTypeId = H.locationTypeId)
                 WHERE A.personId NOT IN(SELECT I.personId 
                                           FROM finSpc I
                                          WHERE (A.personId = I.personId
                                            AND I.removalDate IS NULL OR I.removalDate >= now()::DATE)
                 )';

        if ( strlen($personId) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $args[] = $personId;
        }

        if ( strlen($personName) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?)';
            $args[] = $personName . '%';
        }

        if ( strlen($personLastName) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?)';
            $args[] = '%' . $personLastName . '%';
        }

        if ( strlen($location) > 0 )
        {
            $where .= ' AND UNACCENT(A.location) ILIKE UNACCENT(?)';
            $args[] = $location . '%';
        }

        if ( strlen($complement) > 0 )
        {
            $where .= ' AND A.complement ILIKE ?';
            $args[] = $complement . '%';
        }

        if ( strlen($neighborhood) > 0 )
        {
            $where .= ' AND A.neighborhood ILIKE ?';
            $args[] = $neighborhood . '%';
        }

        if ( strlen($cityId) > 0 )
        {
            $where .= ' AND A.cityId = ?';
            $args[] = $cityId;
        }

        if ( strlen($cityName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $cityName . '%';
        }

        if ( strlen($stateId) > 0 )
        {
            $where .= ' AND B.stateId ILIKE ?';
            $args[] = $stateId;
        }

        if ( strlen($countryId) > 0 )
        {
            $where .= ' AND C.countryId = ?';
            $args[] = $countryId;
        }

        if ( strlen($countryName) > 0 )
        {
            $where .= ' AND UNACCENT(C.name) ILIKE UNACCENT(?)';
            $args[] = $countryName . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' AND ' . substr($where, 5) . '
                   ORDER BY A.name';
        }
        else
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisar pessoa física',$module), 15, 0);
        $lookup->grid->setIsScrollable();
        $lookup->grid->header[] = '<b><center><a href="' . $MIOLO->getActionURL('finance', 'physicalPersonLookup', '', $_GET) . '">' . _M('Inserir novo', 'basic') . '</a></center></b><br>';
    }
    
    /**
     * Auto complete for invoice
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteLancamento($context)
    {
        $sql = ' SELECT A.invoiceId,
                        B.personId,
                        C.name as personName,
                        ROUND(A.value, 2) as valueEntry,
                        TO_CHAR(A.entryDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') as entryDate,
                        A.operationId
                   FROM finEntry A
        INNER JOIN ONLY finInvoice B
                     ON (A.invoiceId = B.invoiceId)
        INNER JOIN ONLY basPerson C
                     ON (B.personId = C.personId)
                  WHERE B.iscanceled = FALSE
                    AND A.entryId = ? ';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for invoice
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupLancamento($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $invoiceId = $lookup->getFilterValue('invoiceId');
        $entryId = $lookup->getFilterValue('entryId');
        $personId = $lookup->getFilterValue('personId');
        $personName = $lookup->getFilterValue('personName');
        $entryDate = $lookup->getFilterValue('entryDate');

        $lookup->addFilterField( new MTextField('invoiceId', $invoiceId, _M('Código do título', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('entryId', $entryId, _M('Código do lançamento', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('personId', $personId, _M('Código da pessoa', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('personName', $personName, _M('Pessoa', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('entryDate', $entryDate, _M('Data de lançamento', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_LOOKUP_SIZE')) );

        $columns = array(
           new DataGridColumn('entryId', _M('Código do lançamento', $module), 'right', true, null, true ),
           new DataGridColumn('invoiceId', _M('Código do título', $module), 'right', true, null, true ),
           new DataGridColumn('personId', _M('Código da pessoa', $module), 'right', true, null, true ),
           new DataGridColumn('personName', _M('Pessoa', $module), 'left', true, null, true ),
           new DataGridColumn('valueEntry', _M('Valor', $module), 'right', true, null, true ),
           new DataGridColumn('entryDate', _M('Data de lançamento', $module), 'center', true, null, true ),
        );

        $sql = ' SELECT A.entryId,
                        A.invoiceId,
                        B.personId,
                        C.name as personName,
                        ROUND(A.value, 2) as valueEntry,
                        TO_CHAR(A.entryDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') as entryDate,
                        A.operationId
                   FROM finEntry A
        INNER JOIN ONLY finInvoice B
                     ON (A.invoiceId = B.invoiceId)
        INNER JOIN ONLY basPerson C
                     ON (B.personId = C.personId)
                  WHERE B.iscanceled = FALSE ';

        if ( strlen($entryId) > 0 )
        {
            $where .= ' AND A.entryId = ?';
            $args[] = $entryId;
        }
        
        if ( strlen($invoiceId) > 0 )
        {
            $where .= ' AND A.invoiceId = ?';
            $args[] = $invoiceId;
        }

        if ( strlen($entryDate) > 0 )
        {
            $where .= ' AND A.entryDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $args[] = $entryDate;
        }

        if ( strlen($personId) > 0 )
        {
            $where .= ' AND B.personId = ?';
            $args[] = $personId;
        }

        if ( strlen($personName) > 0 )
        {
            $where .= ' AND UNACCENT(C.name) ILIKE UNACCENT(?)';
            $args[] = $personName . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= substr($where, 1);
        }

        $sql .= ' ORDER BY A.entryId, A.entryDate DESC';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar título',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }
}
?>
