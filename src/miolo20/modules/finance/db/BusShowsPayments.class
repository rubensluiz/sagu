<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finShowsPayments table
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 08/09/2005
 *
 **/

/**
 * Class to manipulate the finShowsPayments table
 **/
class BusinessFinanceBusShowsPayments extends sBusiness
{
    /**
     * Return a specific record from the database
     *
     * @param $personId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getShowsPayments($personId)
    {
        $db     = $this->getDatabase();
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $sql = 'SELECT A.invoiceId,
                       TO_CHAR(A.maturityDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.courseId||\' - \'||A.courseVersion,
                       (SELECT AA.shortName 
                          FROM acdCourse AA
                         WHERE AA.courseId =A.courseId) AS shortName,
                       B.operationId||\' - \'||(SELECT AB.description 
                                                  FROM finOperation AB
                                                 WHERE AB.operationId = B.operationId ) AS description,
                       TO_CHAR(B.entryDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       ROUND(A.value, \''.SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE').'\' ),
                       ROUND(B.value, \''.SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE').'\' )
                  FROM finReceivableInvoice A
            INNER JOIN finEntry B
                    ON (B.invoiceId = A.invoiceId)
            INNER JOIN finOperation C
                    ON (B.operationId = C.operationId)
                 WHERE A.personId = ?
                   AND C.operationId IN (' . SAGU::getParameter('FINANCE', 'PAYMENT_OPERATIONS') . ')
              ORDER BY A.maturityDate DESC  ';
              
        // Obtém os dados conforme grupo de operações relativo a pagamento   
        $args = array($personId);
        $result = $db->query(SAGU::prepare($sql, $args));
        if (is_array($result[0]))
        {
            foreach ($result as $x => $res)
            {
                $str           = $res[3];
                $path          = $MIOLO->getActionURL($module, 'html:images:infoLittle.png');
                $string        = new MImage('imgCourseInfo'.$x, $str, $path);
                $result[$x][2].= $string->generate();

            }
        }
        return $result;
    }
}

?>
