<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for finInvoice table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * @maintainer William Prigol Lopes [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 13/12/2005
 *
 * */

/**
 * Class to manipulate the Invoice table
 * */
class BusinessFinanceBusInvoice extends sBusiness
{

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     * */
    public function listInvoice()
    {
        
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: $data (object): Object contanining all information about that
     *
     * @returns (array): Return an array with the entire table
     *
     * */
    public function listInvoicesWithModifiedValues($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $sql = ' SELECT A.invoiceId,
                        A.personId,
                        (SELECT name
                      FROM ONLY basPerson
                          WHERE basPerson.personId = A.personId ),
                        ROUND(A.value, ' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . ')
              FROM ONLY finInvoice A
             INNER JOIN finEntry B
                  USING (invoiceId)
                  where A.maturityDate = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                    AND B.entryDate
                BETWEEN TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                    AND TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                    AND B.creationType = \'M\'
                    AND A.iscanceled = FALSE
                    AND A.invoiceIdDependence IS NULL
               ORDER BY 3 ';

        $args = array( $data->maturityDate,
            $data->beginDate,
            $data->endDate );

        $return = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        return $return;
    }

    /**
     * @author: William Prigol Lopes [william@solis.coop.br]
     *
     * @param $returnBankCode (int): Return bank code (unique)
     *
     * @return (int): the respectively invoice id
     *
     */
    public function getInvoiceIdByBankInvoiceId($bankInvoiceId)
    {
        $sql = '   SELECT invoiceId
                FROM ONLY finReceivableInvoice
                    WHERE bankInvoiceId = ?';

        $args = array( $bankInvoiceId );
        $return = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        return $return[0][0];
    }

    /**
     * Return a specific record from the database
     *
     * @param $invoiceId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     * */
    public function getInvoice($invoiceId)
    {
        $sql = 'SELECT A.invoiceId,
                       A.personId,
                       A.accountSchemeId,
                       A.costCenterId,
                       A.parcelNumber,
                       TO_CHAR(A.emissionDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(A.maturityDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.value,
                       A.policyId,
                       A.bankInvoiceId,
                       A.automaticDebit,
                       A.comments,
                       A.incomeSourceId,
                       A.bankAccountId,
                       A.sagu1InvoiceId,
                       A.sectorId,
                       A.isCanceled,
                       A.isImported,
                       A.reasonCancellationId,
                       A.emissionTypeId,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.ipAddress,
                       TO_CHAR(A.referenceMaturityDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.invoiceIdDependence,
                       A.balance,
                       TO_CHAR(A.competencyDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       ROUND(A.nominalValue, 2)
             FROM ONLY finInvoice A
                 WHERE A.invoiceId = ?';
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $invoiceId));

        $invoice = new FinInvoice();
        list ( $invoice->invoiceId,
                $invoice->personId,
                $invoice->accountSchemeId,
                $invoice->costCenterId,
                $invoice->parcelNumber,
                $invoice->emissionDate,
                $invoice->maturityDate,
                $invoice->value,
                $invoice->policyId,
                $invoice->bankInvoiceId,
                $invoice->automaticDebit,
                $invoice->comments,
                $invoice->incomeSourceId,
                $invoice->bankAccountId,
                $invoice->sagu1InvoiceId,
                $invoice->sectorId,
                $invoice->isCanceled,
                $invoice->isImported,
                $invoice->reasonCancellationId,
                $invoice->emissionTypeId,
                $invoice->userName,
                $invoice->dateTime,
                $invoice->ipAddress,
                $invoice->referenceMaturityDate,
                $invoice->invoiceIdDependence,
                $invoice->balance,
                $invoice->competencyDate,
                $invoice->nominalValue ) = $result[0];


        return $invoice;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     * */
    public function searchInvoice($data)
    {
        $sql = 'SELECT A.invoiceId,
                       A.personId,
                       A.accountSchemeId,
                       A.costCenterId,
                       NULL,
                       NULL,
                       NULL,
                       A.parcelNumber,
                       TO_CHAR(A.emissionDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(A.maturityDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.value,
                       A.policyId,
                       A.bankInvoiceId,
                       A.automaticDebit,
                       A.comments,
                       A.incomeSourceId,
                       A.bankAccountId,
                       A.sagu1InvoiceId,
                       A.sectorId,
                       A.isCanceled,
                       A.isImported,
                       A.reasonCancellationId,
                       A.emissionTypeId,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.ipAddress,
                       NULL,
                       NULL,
                       TO_CHAR(A.maturityDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                  FROM finInvoice A';

        $where = '';
        $args = array();
        if ( strlen($data->invoiceId) > 0 )
        {
            $where .= '    AND   A.invoiceId = ?';
            $args[] = $data->invoiceId;
        }
        if ( strlen($data->personId) > 0 )
        {
            $where .= '    AND   A.personId = ?';
            $args[] = $data->personId;
        }
        if ( strlen($data->accountSchemeId) > 0 )
        {
            $where .= '    AND   A.accountSchemeId ILIKE ?';
            $args[] = $data->accountSchemeId;
        }
        if ( strlen($data->costCenterId) > 0 )
        {
            $where .= '    AND   A.costCenterId ILIKE ?';
            $args[] = $data->costCenterId;
        }
        if ( strlen($data->parcelNumber) > 0 )
        {
            $where .= '    AND   A.parcelNumber = ?';
            $args[] = $data->parcelNumber;
        }
        if ( strlen($data->emissionDate) > 0 )
        {
            $where .= '    AND   A.emissionDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $args[] = $data->emissionDate;
        }
        if ( strlen($data->maturityDate) > 0 )
        {
            $where .= '    AND   A.maturityDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $args[] = $data->maturityDate;
        }
        if ( strlen($data->value) > 0 )
        {
            $where .= '    AND   A.value = ?';
            $args[] = $data->value;
        }
        if ( strlen($data->emissionTypeId) > 0 )
        {
            $where .= '    AND   A.emissionTypeId = ?';
            $args[] = $data->emissionTypeId;
        }
        if ( strlen($data->policyId) > 0 )
        {
            $where .= '    AND   A.policyId = ?';
            $args[] = $data->policyId;
        }
        if ( strlen($data->bankInvoiceId) > 0 )
        {
            $where .= '    AND   A.bankInvoiceId ILIKE ?';
            $args[] = $data->bankInvoiceId;
        }
        if ( strlen($data->automaticDebit) > 0 )
        {
            $where .= '    AND   A.automaticDebit = ?';
            $args[] = $data->automaticDebit;
        }
        if ( strlen($data->comments) > 0 )
        {
            $where .= '    AND   A.comments ILIKE ?';
            $args[] = $data->comments;
        }
        if ( strlen($data->incomeSourceId) > 0 )
        {
            $where .= '    AND   A.incomeSourceId = ?';
            $args[] = $data->incomeSourceId;
        }
        if ( strlen($data->bankAccountId) > 0 )
        {
            $where .= '    AND   A.bankAccountId = ?';
            $args[] = $data->bankAccountId;
        }
        if ( strlen($data->reasonCancellationId) > 0 )
        {
            $where .= '    AND   A.reasonCancellationId = ?';
            $args[] = $data->reasonCancellationId;
        }
        if ( strlen($data->referenceMaturityDate) > 0 )
        {
            $where .= '    AND   A.referenceMaturityDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $args[] = $data->referenceMaturityDate;
        }
        if ( strlen($data->invoiceIdDependence) > 0 )
        {
            $where .= '    AND   A.invoiceIdDependence = ?';
            $args[] = $data->invoiceIdDependence;
        }

        $where .= '    AND   A.isCanceled = ?';
        $args[] = strlen($data->isCanceled) > 0 ? $data->isCanceled : DB_FALSE;
        $where .= '    AND   A.isImported = ?';
        $args[] = strlen($data->isImported) > 0 ? $data->isImported : DB_FALSE;

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 8) .
                    ' ORDER BY A.invoiceId,
                               A.emissionDate';

            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return If succed, return the invoice id. Otherwise return FALSE.
     *
     * */
    public function insertInvoice($data)
    {
        $sql = 'SELECT NEXTVAL(\'seq_invoiceId\')';
        $retVal = $this->getDatabase()->query($sql);
        $module = 'finance';

        if ( isset($retVal[0][0]) )
        {
            $invoiceId = $retVal[0][0];

            $field[] = 'invoiceId';
            $prepareValue[] = '?';
            $dataValue[] = $invoiceId;
            $field[] = 'personId';
            $prepareValue[] = '?';
            $dataValue[] = $data->personId;
            $field[] = 'accountSchemeId';
            $prepareValue[] = '?';
            $dataValue[] = $data->accountSchemeId;
            $field[] = 'costCenterId';
            $prepareValue[] = '?';
            $dataValue[] = $data->costCenterId;
            $field[] = 'parcelNumber';
            $prepareValue[] = '?';
            $dataValue[] = $data->parcelNumber;
            $field[] = 'emissionDate';
            if ( is_null($data->emissionDate) )
            {
                $prepareValue[] = 'now()';
            }
            else
            {
                $prepareValue[] = 'TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
                $dataValue[] = $data->emissionDate;
            }
            $field[] = 'maturityDate';
            $prepareValue[] = 'TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $dataValue[] = $data->maturityDate;
            $field[] = 'value';
            $prepareValue[] = '?';
            $dataValue[] = $data->value;
            $field[] = 'policyId';
            $prepareValue[] = '?';
            $dataValue[] = $data->policyId;
            $field[] = 'bankInvoiceId';
            $prepareValue[] = '?';
            $dataValue[] = $data->bankInvoiceId;
            $field[] = 'automaticDebit';
            $prepareValue[] = '?';
            $dataValue[] = $data->automaticDebit;
            $field[] = 'emissionTypeId';
            $prepareValue[] = '?';
            $dataValue[] = $data->emissionTypeId;
            $field[] = 'comments';
            $prepareValue[] = '?';
            $dataValue[] = $data->comments;
            $field[] = 'incomeSourceId';
            $prepareValue[] = '?';
            $dataValue[] = $data->incomeSourceId;
            $field[] = 'bankAccountId';
            $prepareValue[] = '?';
            $dataValue[] = $data->bankAccountId;
            $field[] = 'sagu1InvoiceId';
            $prepareValue[] = '?';
            $dataValue[] = $data->sagu1InvoiceId;
            $field[] = 'isCanceled';
            $prepareValue[] = '?';
            $dataValue[] = $data->isCanceled ? $data->isCanceled : DB_FALSE;
            $field[] = 'isImported';
            $prepareValue[] = '?';
            $dataValue[] = $data->isImported;
            $field[] = 'reasonCancellationId';
            $prepareValue[] = '?';
            $dataValue[] = $data->reasonCancellationId;
            $field[] = 'referenceMaturityDate';
            $prepareValue[] = 'TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $dataValue[] = $data->referenceMaturityDate;
            $field[] = 'invoiceIdDependence';
            $prepareValue[] = '?';
            $dataValue[] = $data->invoiceIdDependence;

            // Insere a data de competencia
            if ( strlen($data->competencyDate) > 0 )
            {
                $field[] = 'competencyDate';
                $prepareValue[] = 'TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
                $dataValue[] = $data->competencyDate;
            }

            if ( strlen($data->sectorId) > 0 )
            {
                $field[] = 'sectorId';
                $prepareValue[] = '?';
                $dataValue[] = $data->sectorId;
            }

            $sql = 'INSERT INTO finInvoice
                                (';
            for ( $i = 0; $i < count($field); $i++ )
            {
                $sql .= $field[$i] . ',';
            }
            $sql = substr($sql, 0, strlen($sql) - 1) . ')
                         VALUES (';
            for ( $i = 0; $i < count($prepareValue); $i++ )
            {
                $sql .= $prepareValue[$i] . ',';
            }
            $sql = substr($sql, 0, strlen($sql) - 1) . ')';

            if ( !$this->getDatabase()->execute(SAGU::prepare($sql, $dataValue)) )
            {
                $invoiceId = false;
            }
        }

        return $invoiceId;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     * */
    public function updateInvoice($data)
    {
        $sql = 'UPDATE finInvoice
                   SET personId        = ?,
                       accountSchemeId = ?,
                       costCenterId    = ?,
                       parcelNumber    = ?,
                       emissionDate    = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       maturityDate    = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       value           = ?,
                       policyId        = ?,
                       bankInvoiceId   = ?,
                       automaticDebit  = ?,
                       comments        = ?,
                       incomeSourceId  = ?,
                       bankAccountId   = ?,
                       iscanceled      = ?,
                       isImported      = ?,
                       reasonCancellationId = ?,
                       sagu1InvoiceId  = ?,
                       referenceMaturityDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       invoiceIdDependence = ?';

        if ( $data->sectorId > 0 )
        {
            $sql.=',
                       sectorId        = ? ';
        }
        $sql.='  WHERE invoiceId = ?';

        $args = array();
        $args[] = $data->personId;
        $args[] = $data->accountSchemeId;
        $args[] = $data->costCenterId;
        $args[] = $data->parcelNumber;
        $args[] = $data->emissionDate;
        $args[] = $data->maturityDate;
        $args[] = $data->value;
        $args[] = $data->policyId;
        $args[] = $data->bankInvoiceId;
        $args[] = $data->automaticDebit;
        $args[] = $data->comments;
        $args[] = $data->incomeSourceId;
        $args[] = $data->bankAccountId;
        $args[] = $data->isCanceled ? $data->isCanceled : DB_FALSE;
        $args[] = $data->isImported;
        $args[] = $data->reasonCancellationId;
        $args[] = $data->sagu1InvoiceId;
        $args[] = $data->referenceMaturityDate;
        $args[] = $data->invoiceIdDependence;

        if ( strlen($data->sectorId) > 0 )
        {
            $args[] = $data->sectorId;
        }
        $args[] = $data->invoiceId;

        $sqls = SAGU::prepare($sql, $args);
        for ( $i = 0; $i < count($sqls); $i++ )
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $invoiceId (integer): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     * */
    public function deleteInvoice($invoiceId)
    {
        $sql = ' UPDATE finInvoice SET iscanceled = TRUE WHERE invoiceId = ? ';
        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $invoiceId));

        return $result;
    }

    /**
     * Function to update the flag isImported from invoice
     *
     * @param $invoiceId (integer) - Value to identify invoice
     * @param $imported (boolean) - Value of flag isImported
     *
     * @return (boolean): True if succeed, otherwise false
     */
    public function updateInvoiceImported($invoiceId, $isImported)
    {
        $sql = 'UPDATE finInvoice
                   SET isImported = ?
                 WHERE invoiceId = ? ';

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, array( $isImported, $invoiceId )));

        return $result;
    }

    /**
     * @author: William Prigol Lopes [william@solis.coop.br]
     *
     * @param $invoiceId (int): Value to identify invoice
     *
     * @return (boolean): True if succeed, otherwise false
     *
     */
    public function updateInvoiceBalance($invoiceId)
    {
        $sql = ' UPDATE finInvoice
                    SET value = balance(invoiceId)
                  WHERE invoiceId = ? ';

        $args = array( $invoiceId );
        $sqls = SAGU::prepare($sql, $args);

        $return = true;
        for ( $i = 0; $i < count($sqls) && $return; $i++ )
        {
            $return = $this->getDatabase()->execute($sqls[$i]);
        }

        return $return;
    }

    /**
     * @author: William Prigol Lopes [william@solis.coop.br]
     *
     * @param $invoiceId (int): Primary key for invoice
     *
     * @return (float): Invoice balance
     *
     */
    public function getInvoiceBalance($invoiceId)
    {
        $sql = ' SELECT TRUNC(balance(?), ' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . ') ';

        $args = array( $invoiceId );
        $return = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return $return[0][0];
    }

    /**
     * @author: William Prigol Lopes [william@solis.coop.br]
     *
     * @param $invoiceId (int): Invoice id
     *
     * @return (float): Value with policies rules for the respectively invoice
     *
     */
    public function getInvoiceBalanceWithPolicies($invoiceId, $refDate = null)
    {
        if ( is_null($refDate) )
        {
            $refDate = date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'));
        }

        $sql = ' SELECT TRUNC(balanceWithPoliciesDated(?, TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')), ' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . ') ';

        $args = array( $invoiceId, $refDate );
        $return = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return $return[0][0];
    }

    /**
     * @return float
     */
    public function getInvoiceBalanceDatedWithoutFine($invoiceId, $refDate = null)
    {
        $value = $this->getInvoiceBalanceWithPolicies($invoiceId, $refDate);
        $fines = $this->getInvoiceFineValue($invoiceId, $refDate);

        return SAGU::calcNumber(" {$value} - {$fines} ");
    }

    /**
     * @return float
     */
    public function getInvoiceBalanceDatedWithoutInterest($invoiceId, $refDate = null)
    {
        $value = $this->getInvoiceBalanceWithPolicies($invoiceId, $refDate);
        $interest = $this->getInvoiceInterestValue($invoiceId, $refDate);

        return SAGU::calcNumber(" {$value} - {$interest} ");
    }

    /**
     * @return string
     */
    public function getInvoiceFineValue($invoiceId, $refDate = null)
    {
        $result = SDatabase::query("SELECT getInvoiceFineValue(?, ?)", array( $invoiceId, $refDate ));

        return SAGU::NVL($result[0][0], '0');
    }

    /**
     * @return string
     */
    public function getInvoiceInterestValue($invoiceId, $refDate = null)
    {
        $result = SDatabase::query("SELECT getInvoiceInterestValue(?, ?)", array( $invoiceId, $refDate ));

        return SAGU::NVL($result[0][0], '0');
    }

    /**
     * @author: William Prigol Lopes [william@solis.coop.br]
     *
     * @param $invoiceId (int): Return the invoice id
     *
     * @return (object): Object with id and name of person
     *
     */
    public function getPersonDataForInvoice($invoiceId)
    {
        $sql = ' SELECT personId,
                        getPersonName(personId)
                   FROM finReceivableInvoice
                  WHERE invoiceId = ? ';

        $args = array( $invoiceId );
        $ret = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        $return = new stdClass();
        $return->personId = $ret[0][0];
        $return->personName = $ret[0][1];
        return $return;
    }

    /**
     * Generate update finInvoice  SET value = balance
     *
     * @param  value ( balance ())
     *
     * @return true or false
     *
     * */
    public function updateInvoiceValue($value, $invoiceId)
    {
        $sql = 'UPDATE finInvoice SET value = ? WHERE invoiceId = ? ';
        $res = $this->getDatabase()->execute(SAGU::prepare($sql, array( $value, $invoiceId )));

        if ( $this->getDatabase()->getErrors() )
        {
            $return = false;
        }

        return $return;
    }

    /**
     * Verify the accounted entries for a specific invoice
     *
     * @param: $invoiceId (int): Primary key for invoice
     *
     * @return: True if has accounted entries for this invoice otherwise false
     *
     */
    public function verifyAccountedEntriesForInvoice($invoiceId)
    {
        $sql = ' SELECT entryId
                   FROM finEntry
                  WHERE invoiceId = ?
                    AND isAccounted = true ';

        $args = array( $invoiceId );

        $return = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        return ( is_array($return[0]) );
    }

    /**
     * Return the invoiceId relative for sagu1InvoiceId system (used by remittance and return on migrations and upgrades)
     *
     * @param $sagu1InvoiceId (varchar): sagu1 invoice id
     *
     * @return: Key for invoice or false
     *
     */
    public function getInvoiceIdBySagu1InvoiceId($sagu1InvoiceId)
    {
        $sql = '   SELECT invoiceId
                FROM ONLY finInvoice
                    WHERE sagu1InvoiceId = ?
                      AND iscanceled = FALSE
                      AND invoiceIdDependence IS NULL';

        $args = array( $sagu1InvoiceId );
        $return = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        if ( is_array($return[0]) )
        {
            return $return[0][0];
        }
        else
        {
            return false;
        }
    }

    /**
     * Get cost center by invoice id
     *
     * @param $invoiceId (int): Primary key for invoice
     *
     * @return: The cost center id for respectively invoice
     *
     */
    public function getCostCenterByInvoiceId($invoiceId)
    {
        $sql = ' SELECT costCenterId
                   FROM finInvoice
                  WHERE invoiceId = ?
                    AND iscanceled = FALSE
                    AND invoiceIdDependence IS NULL';

        $args = array( $invoiceId );

        $return = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        return $return[0][0];
    }

    /**
     * Get account scheme by invoice id
     *
     * @param $invoiceId (int): Primary key for invoice
     *
     * @return: The account scheme id for respectively invoice
     *
     */
    public function getAccountSchemeByInvoiceId($invoiceId)
    {
        $sql = ' SELECT accountSchemeId
                   FROM finInvoice
                  WHERE invoiceId = ?
                    AND iscanceled = FALSE
                    AND invoiceIdDependence IS NULL';

        $args = array( $invoiceId );

        $return = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        return $return[0][0];
    }

    /**
     * Verify if invoice exists
     *
     * @param $invoiceId (int): Primary key for invoice
     *
     * @return: true if invoice exists otherwise false
     *
     */
    public function verifyInvoice($invoiceId)
    {
        $sql = '    SELECT invoiceId
                 FROM ONLY finInvoice
                     WHERE invoiceId = ?';

        $args = array( $invoiceId );

        $return = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        return ( is_array($return[0]) );
    }

    /**
     * Insert a new entry record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return If succed, return the invoice id. Otherwise return FALSE.
     *
     * */
    public function insertEntry($data)
    {
        $sql = ' INSERT INTO finEntry
                            ( invoiceId,
                              operationId,
                              entryDate,
                              value,
                              costCenterId,
                              comments,
                              bankReturnCode,
                              isAccounted,
                              creationType
                            )
                      VALUES (?, ?, to_date(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'), ?, ?, ?, ?, ?, ?) ';

        if ( is_null($data->isAccounted) )
        {
            $data->isAccounted = true;
        }
        $args = array( $data->invoiceId,
            $data->operationId,
            $data->entryDate,
            $data->value,
            $data->costCenterId,
            $data->comments,
            $data->bankReturnCode,
            $data->isAccounted,
            $data->creationType );

        $return = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        if ( $this->getDatabase()->getErrors() )
        {
            $return = false;
        }
        return $return;
    }

    /**
     * Test if there is a accounted entry for a invoice
     *
     * @param $invoiceId (integer): An integer with invoiceId
     *
     * @return If succed, return the invoice TRUE. Otherwise return FALSE.
     *
     * */
    public function testIsAccounted($invoiceId)
    {

        $sql = 'SELECT isAccounted
                   FROM ONLY finInvoice A
             INNER JOIN finEntry B
                  USING (invoiceId)
                  WHERE invoiceId = ? AND
                        isAccounted IS TRUE';

        $data = $this->getDatabase()->query(SAGU::prepare($sql, $invoiceId));

        return ( $data[0][0] == DB_TRUE );
    }

    /**
     * Return a specific person financial situation
     *
     * @param $personId (integer): Person code for the search to be retrieved
     *
     * @return (object): Return an array with the financial situation
     *
     * */

    /**
     * Get a sum of the values of operations of the specified type for specified invoice. If $contractId
     * is specified, the values are tottalized filtering by contract.
     * 
     * @param (integer) $invoiceId The invoice id to be searched.
     * @param (array) $operationId The operations of invoice entries to be totalized.
     * @param (integer) $contractId If specified, filter totals by contract.
     * 
     * @return (float) The sum of the values or null, when no value found.
     */
    public function getTotalValuePerOperation($invoiceId, $operationIds, $contractId = null)
    {
        $sql = 'SELECT SUM(A.value * CASE WHEN B.operationTypeId = \'D\' THEN 1 ELSE -1 END)
                  FROM ONLY finEntry A
            INNER JOIN finOperation B
                    ON B.operationId = A.operationId
                 WHERE A.operationId IN (' . substr(str_repeat(',?', count($operationIds)), 1) . ')
                   AND A.invoiceId = ?';

        $args = $operationIds;
        $args[] = $invoiceId;

        if ( strlen($contractId) > 0 )
        {
            $sql .= ' AND contractId = ?';
            $args[] = $contractId;
        }

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return $result[0][0];
    }

    /**
     * Closes an invoice.
     *
     * @param (integer) $invoiceId The invoice id to be closed.
     * @param (float) $value The value to be used to close the invoice.
     *
     * @return (true) True if success, otherwise false.
     */
    public function closeInvoice($invoiceId, $value, $entryDate = NULL, $creationType = NULL, $operationId = NULL, $retornarEntryId = false, $counterMovementId = null, $bankMovementId = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = 'finance';

        try
        {
            if ( (float) $value > 0 )
            {
                $busOperation = new BusinessFinanceBusOperation();
                $busDefaultOperations = new BusinessFinanceBusDefaultOperations();
                $busEntry = new BusinessFinanceBusEntry();
                $busCounterMovement = new BusinessFinanceBusCounterMovement();
                $busSpecies = new BusinessFinanceBusSpecies();

                $invoiceData = $this->getInvoice($invoiceId);
                $defaultOperations = $busDefaultOperations->getDefaultOperations();

                //Verifica se existeuma data entreda. Se houver utiliza.
                $entryDate = strlen($entryDate) > 0 ? $entryDate : date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'));
                $creationType = strlen($creationType) > 0 ? $creationType : 'M';
                
                $comments = '';
                if ( $counterMovementId )
                {
                    $movimentacao = $busCounterMovement->getCounterMovement($counterMovementId);
                    if ( $movimentacao->speciesId )
                    {
                        $especie = $busSpecies->getSpecies($movimentacao->speciesId);
                        $comments = 'VIA: ' . $especie->description;
                    }
                }

                unset($entryData);
                $entryData = new StdClass();
                $entryData->invoiceId = $invoiceData->invoiceId;
                $entryData->costCenterId = $invoiceData->costCenterId;
                $entryData->comments = $comments;
                $entryData->bankReturnCode = '';
                $entryData->isAccounted = SAGU::getParameter('BASIC', 'DB_FALSE');
                $entryData->creationType = $creationType;
                $entryData->entryDate = $entryDate;
                $entryData->operationId = is_null($operationId) ? $defaultOperations->paymentOperation : $operationId;
                $entryData->value = number_format($value, SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), '');
                $entryData->bankMovementId = $bankMovementId;
                $entryData->counterMovementId = $counterMovementId;
                
                $entryId = $busEntry->insertEntry($entryData);

                // Busca por titulos dependentes deste invoiceId e remove a dependencia
                $filters = new stdClass();
                $filters->invoiceIdDependence = $invoiceId;
                $rows = $this->searchInvoice($filters);
                foreach ( (array) $rows as $row )
                {
                    $invoice = $this->getInvoice($row[0]);
                    $invoice->invoiceIdDependence = null;
                    $this->updateInvoice($invoice);
                }
            }

            // Para a pré-matrícula.
            $this->primeiraParcelaPreMatricula($invoiceData);
        }
        catch ( Exception $e )
        {
            throw $e;

            return false;
        }

        if ( $retornarEntryId )
        {
            $result = $entryId;
        }
        else
        {
            $result = true;
        }

        return $result;
    }

    /**
     * Passa o contrato para matriculado caso a primeira parcela foi paga 
     * e esteja como pré-matriculado.
     * 
     * @param stdClass $invoiceData - Dados do título.
     */
    public function primeiraParcelaPreMatricula($invoiceData)
    {
        $busDefaultOperation = new BusinessFinanceBusDefaultOperations();

        $operationIdMonthy = $busDefaultOperation->getDefaultOperation('monthlyfeeoperation');
        $operationIdEnroll = $busDefaultOperation->getDefaultOperation('enrollOperation');
        $operationIdRenewal = $busDefaultOperation->getDefaultOperation('renewalOperation');

        $invoiceFilters = new stdClass();
        $invoiceFilters->personId = $invoiceData->personId;
        $invoiceFilters->invoiceId = $invoiceData->invoiceId;
        $invoiceFilters->operationsId = "'{$operationIdMonthy}', '{$operationIdRenewal}', '{$operationIdEnroll}'";
        $invoiceFilters->parcelNumber = $invoiceData->parcelNumber;

        if ( sModules::getModule('pedagogico')->getHasInstalled() )
        {
            $operationId = PrcTituloInscricao::obtemOperacaoTaxaDeInscricao($invoiceData->invoiceId);

            (strlen($operationId) > 0) ? $invoiceFilters->operationsId .= ", '{$operationId}'" : null;
        }

        $busEntry = new BusinessFinanceBusEntry();
        $entries = $busEntry->searchEntry($invoiceFilters);

        $filtrs = new stdClass();
        $filtrs->contractId = $entries[0][12];
        $filtrs->learningPeriodId = $entries[0][13];

        // Se o título pertence as mensalidades.
        if ( count($entries) > 0 )
        {
            $ePrimeiraParcela = $invoiceFilters->parcelNumber == '1';

            //
            // Verificacoes financeiras do PEDAGOGICO
            //
            if ( $ePrimeiraParcela && sModules::getModule('pedagogico')->getHasInstalled() )
            {
                // Verifica por inscricoes pendentes pelo pgto da taxa
                $filters = new stdClass();
                $filters->personId = $invoiceData->personId;
                $filters->invoiceId = $invoiceData->invoiceId;
                $filters->situacao = AcpInscricao::SITUACAO_PENDENTE;
                $filters->formadeconfirmacaoinscricao = AcpRegrasMatriculaPerfilCurso::CONFIRMACAO_INSCRICAO_PGTO_TAXA;

                $rows = AcpInscricao::buscarInscricoes($filters);
                $inscricao = $rows[0];

                if ( $inscricao instanceof AcpInscricao )
                {
                    $inscricao->alterarParaInscrito();
                }

                // Verifica por matricula pendentes pelo pgto da primeira parcela
                $filters = new stdClass();
                $filters->personId = $invoiceData->personId;
                $filters->invoiceId = $invoiceData->invoiceId;
                $filters->situacao = AcpMatricula::SITUACAO_INSCRICAO;
                $filters->formadeconfirmacaomatricula = AcpRegrasMatriculaPerfilCurso::CONFIRMACAO_MATRICULA_PGTO_PRIMEIRA_PARCELA;

                foreach ( AcpMatricula::buscarMatriculas($filters) as $matricula )
                {
                    if ( $matricula instanceof AcpMatricula )
                    {
                        $matricula->confirmarMatricula();
                    }
                }
            }

            // Se possui contrato
            if ( strlen($filtrs->contractId) > 0 )
            {
                // Se for a primeira parcela
                if ( $ePrimeiraParcela )
                {
                    $matricula = new Matricula($filtrs->contractId, Matricula::MATRICULA_NORMAL);
                    $enrollConfig = $matricula->obterConfiguracoes(false);

                    // Se a pré-matrícula estiver ativa.
                    if ( $enrollConfig->enablePreEnroll == DB_TRUE )
                    {
                        // Verifica se o estado contratual atual do aluno é pré-matriculado.
                        $busStateContract = new BusinessAcademicBusStateContract();
                        $stateContractId = $busStateContract->getCurrentStateContractId($filtrs->contractId);
                        $estadoAtualPreMat = ( $stateContractId == SAGU::getParameter('ACADEMIC', 'STATE_CONTRACT_ID_PRE_ENROLL') );

                        // Verifica se o aluno possui disciplinas pré-matriculadas, no período em que pertence a mensalidade.
                        $filters = new stdClass();
                        $filters->learningPeriodId = $filtrs->learningPeriodId;
                        $filters->contractId = $filtrs->contractId;
                        $preDisciplinas = AcdEnroll::searchPreEnrollCurricularComponents($filters);
                        $possuiPreDisci = ( count($preDisciplinas) > 0 );

                        // Se o estado contratual atual do aluno é de pré-matrícula ou se possuír disciplinas com status de pré-matrícula.
                        if ( $estadoAtualPreMat || $possuiPreDisci )
                        {
                            $busMovementContract = new BusinessAcademicBusMovementContract();
                            $stateTime = $busMovementContract->getMaxStateTime($filtrs->contractId, $stateContractId);
                            $movementContract = $busMovementContract->getMovementContract($filtrs->contractId, $stateContractId, $stateTime);
                            $learningPeriodId = (strlen($movementContract->learningPeriodId) > 0) ? $movementContract->learningPeriodId : $filtrs->learningPeriodId;

                            if ( sPreMatricula::confirmacaoPortal($enrollConfig, $filtrs->contractId, $learningPeriodId) )
                            {
                                // Efetua o processo de transição de pré-matriculado para matriculado.
                                sPreMatricula::confirmacaoDePreMatricula($filtrs->contractId, $learningPeriodId);
                            }
                        }
                    }
                }
            }
        }
    }

    /**
     * Get all contracts related to the specified invoice id.
     * 
     * @param (integer) The id of the invoice to be queried for related contracts.
     * 
     * @return (array) Array of AcdContract objects or empty array if no contracts found.
     *  
     */
    public function getInvoiceContracts($invoiceId)
    {
        $MIOLO = MIOLO::getInstance();

        $busEntry = new BusinessFinanceBusEntry();
        $entries = $busEntry->getInvoiceEntries($invoiceId);

        $contractIds = array();
        for ( $i = 0; $i < count($entries); $i++ )
        {
            if ( strlen($entries[$i]->contractId) > 0 )
            {
                // avoid adding duplicates, as there may exists lots of entries with
                // the same contract
                $contractIds[$entries[$i]->contractId] = $entries[$i]->contractId;
            }
        }

        $contractIds = array_keys($contractIds);

        $busContract = new BusinessAcademicBusContract();
        $contracts = array();
        for ( $i = 0; $i < count($contractIds); $i++ )
        {
            $contracts[] = $busContract->getContract($contractIds[$i]);
        }

        return $contracts;
    }

    /**
     * Return TRUE when informed person has pending debts.
     *
     * @param (integer) $personId The person id to be queried.
     *
     * @return True when a debt exists. Otherwise false.
     */
    public function isDefaulter($personId)
    {
        $sql = 'SELECT isDefaulter(?::bigint)';

        $args = array( $personId );

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return ($result[0][0] == DB_TRUE);
    }

    /**
     * Retorna o valor das mensalidades a serem pagas pela pelo contrato.
     *
     * @param (integer) $contractId.
     *
     * @return Array.
     */
    public function obterMensalidades($contractId)
    {
        $sql = 'SELECT A.parcelnumber, 
                       balance(A.invoiceId)
                FROM finreceivableinvoice A 
                            INNER JOIN finentry B ON A.invoiceid = B.invoiceid AND B.operationid = 1 
                WHERE B.contractId = ?
                    ORDER BY A.parcelnumber';

        $args = array( $contractId );

        return SDatabase::query(SAGU::prepare($sql, $args));
    }

    /**
     * Pega os invoiceIds das parcelas geradas da taxa
     * de inscrição do processo seletivo.
     * 
     * @param type $invoiceId
     * @return type
     */
    public function getTaxInvoiceIds($invoiceId)
    {
        $sql = "SELECT invoiceId 
             FROM ONLY fininvoice 
                 WHERE value = ( SELECT value 
                              FROM ONLY fininvoice 
                                  WHERE invoiceid = ? )
                   AND personid = ( SELECT personid
                                 FROM ONLY fininvoice
                                     WHERE invoiceId = ? )
                   AND emissiondate = ( SELECT emissiondate
                                     FROM ONLY fininvoice
                                         WHERE invoiceId = ? )";

        $params = array(
            $invoiceId,
            $invoiceId,
            $invoiceId
        );

        return SDatabase::query(SAGU::prepare($sql, $params));
    }

    /**
     * Return TRUE when invoice is closed.
     *
     * @param (integer) $invoiceId The invoice id to be verified.
     *
     * @return True when invoice is closed. Otherwise false.
     */
    public function isClosed($invoiceId)
    {
        $MIOLO = MIOLO::getInstance();
        $busDefaultOperations = new BusinessFinanceBusDefaultOperations();
        $defaultOperations = $busDefaultOperations->getDefaultOperations();

        $sql = 'SELECT 1
                  FROM finInvoice A
                 WHERE A.invoiceId = ?
                   AND balance(A.invoiceid) = 0
                   AND EXISTS (SELECT 1
                                 FROM finEntry X
                                WHERE X.invoiceId = A.invoiceId
                                  AND (X.operationId = ? OR X.operationId = ?) ) ';

        $args = array( $invoiceId, $defaultOperations->paymentOperation, $defaultOperations->negotiationOperation );

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return (count($result) > 0);
    }

    /**
     * Remove a dependência do título
     * Atualiza o valor do campo invoiceIdDependence para NULL
     * @author Jonas Gualberto Diel [jonas_diel@solis.com.br]
     * @param type $invoiceId - Código do título
     */
    public function removeInvoiceIdDependence($invoiceId)
    {
        $sql = "UPDATE finInvoice SET invoiceIdDependence = NULL WHERE invoiceId = ?";

        $params = array( $invoiceId );

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $params));

        return true;
    }

    /**
     * Deleta os títulos da p?e-matrícula do aluno para reajuste.
     * 
     * @param int $contractId
     * @param int $learningPeriodId
     */
    public function deletaTitulosParaReajusteDePreMatricula($contractId, $learningPeriodId)
    {
        $result = false;
        $stateContract = BusinessAcademicBusStateContract::getCurrentStateContractId($contractId);

        if ( $stateContract == SAGU::getParameter('ACADEMIC', 'STATE_CONTRACT_ID_PRE_ENROLL') )
        {
            $titulos = $this->obterTitulosDaMatricula($contractId, $learningPeriodId);

            foreach ( $titulos as $key => $invoiceId )
            {
                $this->deleteInvoice($invoiceId);
            }
        }
    }

    /**
     * Obtém os títulos referentes a matrícula do aluno.
     * 
     * @param int $contractId
     * @param int $learningPeriodId
     * @return array
     */
    public function obterTitulosDaMatricula($contractId, $learningPeriodId)
    {
        $sql = "SELECT obterTitulosDaMatricula({$contractId}, {$learningPeriodId})";
        $result = SDatabase::query($sql);

        foreach ( $result as $titulo )
        {
            $titulos[] = $titulo[0];
        }

        return $titulos;
    }

    /**
     * Obtem o id do contrato de um Invoice, buscando pela finEntry.
     * Caso nao existir, retorna vazio.
     * 
     * @return int
     */
    public function getInvoiceContractId($invoiceId)
    {
        $sql = 'SELECT contractId
                  FROM finEntry
                 WHERE invoiceId = ?
                   AND contractId IS NOT NULL';

        $args = array( $invoiceId );

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return $result[0][0];
    }

    /**
     * Verifica se o título está bloqueado
     * 
     * @param type $invoiceId
     * @return type boolean
     */
    public function verificaTituloBloqueado($invoiceId, $semConfiguracoes = false)
    {
        if ( $semConfiguracoes )
        {
            $sql = " SELECT verificaTituloBloqueado({$invoiceId}) ";
        }
        else
        {
            $sql = " SELECT tituloBloqueado({$invoiceId}, true) ";
        }

        $result = SDatabase::query($sql);

        return $result[0][0];
    }

}

?>
