<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finSPCReason table
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * 
 * @since
 * Class created on 25/08/2010
 *
 **/

class BusinessFinanceBusSpcReason extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listSpcReason()
    {
        $sql = 'SELECT reasonId,
                       description   
                  FROM finSPCReason   
              ORDER BY description';
        
        $db = $this->getDatabase();
        $return = $db->query($sql);
        
        return $return;
    }

    /**
     * Return a specific record from the database
     *
     * @param $reasonId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getSpcReason($reasonId)
    {
        $sql = 'SELECT reasonId,
                       description,
                       userName,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipAddress
                  FROM finSPCReason
                 WHERE reasonId = ?';
        
        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $reasonId));
        
        $reasonId = new FinSpcReason();
        
        list ( $reasonId->reasonId, 
               $reasonId->description, 
               $reasonId->userName, 
               $reasonId->dateTime, 
               $reasonId->ipAddress ) = $result[0];
        
        return $reasonId;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchSpcReason($filters)
    {
        $sql = 'SELECT reasonId,
                       description
                  FROM finSPCReason ';
        
        if ( strlen($filters->reasonId) > 0 )
        {
            $where .= ' AND reasonId = ? ';
            $args[] = $filters->reasonId;
        }
        if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND UNACCENT(description) ILIKE UNACCENT(?) ';
            $args[] = $filters->description . '%';
        }
        
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4);
            $sql .= ' ORDER BY 2,1';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }
        
        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertSpcReason($data)
    {
        $sql = 'INSERT INTO finSPCReason
                            (description)
                     VALUES (?)';
        
        $args = array($data->description);
        
        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        
        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateSpcReason($data)
    {
        $sql = 'UPDATE finSPCReason
                   SET description = ?
                 WHERE reasonId = ?';
        
        $args = array($data->description, $data->reasonId);
        
        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        
        return $result;
    }

    /**
     * Delete a record
     *
     * @param $reasonId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteSpcReason($reasonId)
    {
        $sql = 'DELETE FROM finSPCReason
                      WHERE reasonId = ?';
        
        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $reasonId));
        
        return $result;
    }
}

?>

