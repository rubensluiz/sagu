<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finStudentFinancing table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 17/08/2005
 *
 **/

/**
 * Class to manipulate the finStudentFinancing table
 **/
class BusinessFinanceBusStudentFinancing extends sBusiness
{
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     *
     * @return (array): An array containing the search results
     **/
    public function searchStudentFinancing($data)
    {	    	
        $sql = 'SELECT A.studentFinancingId,
                       B.personId,
                       getPersonName(B.personId),
                       A.contractId,
                       A.comments,
                       round(A.initialValue, 2),
                       round(A.currentValue, 2)
                  FROM finStudentFinancing A
                  INNER JOIN acdContract B
                        USING(contractId)
                    INNER JOIN ONLY basPhysicalPersonStudent C
                        USING(personId)';

        $where = '';
        unset($args);

        if ( strlen($data->studentFinancingId) > 0 )
        {
            $where .= '    AND   A.studentFinancingId = ?';
            $args[] = $data->studentFinancingId;
        }
        if ( strlen($data->personId) > 0 )
        {
            $where .= '    AND   B.personId = ?';
            $args[] = $data->personId;
        }
        if ( strlen($data->personName) > 0 )
        {
            $where .= '    AND   C.name ILIKE ?';
            $args[] = $data->personName . '%';
        }
        if ( strlen($data->contractId) > 0 )
        {
            $where .= '    AND   A.contractId = ?';
            $args[] = $data->contractId;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where,8);
            $sql .= ' ORDER BY 2';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql,$args));
        }

        return $result;
    }

    /**
     * Get student financing balance
     *
     * @param $filters (object): Search filters
     *
     *
     * @return (array): An array containing the search results
     **/
    public function getStudentFinancingBalance($data)
    {
        $sql = 'SELECT round(sum(A.initialValue), 2),
                       round(sum(A.currentValue), 2)
                  FROM finStudentFinancing A
                  INNER JOIN acdContract B
                        USING(contractId)
                    INNER JOIN ONLY basPhysicalPersonStudent C
                        USING(personId)';
        $where = '';
        unset($args);

        if ( strlen($data->studentFinancingId) > 0 )
        {
            $where .= '    AND   A.studentFinancingId = ?';
            $args[] = $data->studentFinancingId;
        }
        if ( strlen($data->personId) > 0 )
        {
            $where .= '    AND   B.personId = ?';
            $args[] = $data->personId;
        }
        if ( strlen($data->personName) > 0 )
        {
            $where .= '    AND   C.name ILIKE ?';
            $args[] = $data->personName . '%';
        }
        if ( strlen($data->contractId) > 0 )
        {
            $where .= '    AND   A.contractId = ?';
            $args[] = $data->contractId;
        }

        
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where,8);
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql,$args));
        }

        return $result;
    }

    /**
     * Return a specific record from the database
     *
     * @param $studentFinancingId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getStudentFinancing($studentFinancingId)
    {
        $sql = 'SELECT A.studentFinancingId,
                       A.contractId,
                       round(A.initialValue, ' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . '),
                       round(A.currentValue, ' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . '),
                       A.comments,
                       B.personId,
                       (SELECT name FROM ONLY basPhysicalPerson WHERE personId = B.personId),
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\')
                  FROM finStudentFinancing A
                  INNER JOIN acdContract B
                      USING(contractId)
                 WHERE A.studentFinancingId = ?';

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql,$studentFinancingId));
        

        $studentFinancing = new FinStudentFinancing();

        list ( $studentFinancing->studentFinancingId,
               $studentFinancing->contractId,
               $studentFinancing->initialValue,
               $studentFinancing->currentValue,
               $studentFinancing->comments,
               $studentFinancing->personId,
               $studentFinancing->personName,
               $studentFinancing->userName,
               $studentFinancing->dateTime) = $result[0];

        return $studentFinancing; 
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertStudentFinancing($data)
    {
        $db = $this->getDatabase();

        $sql = 'SELECT NEXTVAL(\'seq_studentFinancingId\') FROM (select 1) a';
        $retval = $db->query($sql);

        unset($studentFinancingId);
        if ( isset($retval) )
        {
            $studentFinancingId = $retval[0][0];
            $sql = 'INSERT INTO finStudentFinancing
                                (studentFinancingId,
                                 contractId,
                                 initialValue,
                                 currentValue,
                                 comments)
                         VALUES (?,?,?,?,?)';

            $args = array($studentFinancingId,
                          $data->contractId,
                          $data->initialValue,
                          $data->currentValue,
                          $data->comments);
            if ( ! $db->execute(SAGU::prepare($sql,$args)) )
            {
                unset($studentFinancingId);
            }
        }

        return $studentFinancingId;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateStudentFinancing($data)
    {
        $sql = 'UPDATE finStudentFinancing
                   SET initialValue  = ?,
                       currentValue  = ?,
                       comments      = ?
                 WHERE studentFinancingId       = ?';

        $args = array($data->initialValue,
                      $data->currentValue,
                      $data->comments,
                      $data->studentFinancingId);

        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql,$args);
        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }
        return $result;
    }

    /**
     * Delete a record
     *
     * @param $studentFinancingId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteStudentFinancing($studentFinancingId)
    {
        $sql = 'DELETE FROM finStudentFinancing
                      WHERE studentFinancingId = ?';

        $args = (is_array($studentFinancingId) ? $studentFinancingId : array($studentFinancingId));

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql,$args));

        return $result;
    }

}

?>
