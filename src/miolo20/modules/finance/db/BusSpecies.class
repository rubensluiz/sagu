<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finSpecies table
 *
 * @author Rudi Uhrig Neto [rudi@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 20/12/2005
 *
 **/

/**
 * Class to manipulate the finSpecies table
 **/
class BusinessFinanceBusSpecies extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listSpecies($onlyEnabled = true)
    {
        $db  = $this->getDatabase();
        $sql = ' SELECT speciesId,
                        description
                   FROM finSpecies ';

        if ( $onlyEnabled )
        {
            $sql .= ' WHERE isEnabled IS TRUE ';
        }

        $sql .= ' ORDER BY description ';
        $ret = $db->query($sql);
        
        return $ret;
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $speciesId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getSpecies($speciesId)
    {
        $sql = 'SELECT speciesId,
                       description,
                       isEnabled,
                       speciesTypeId,
                       bandeira,
                       modalidade,
                       numParcelas,
                       userName,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipAddress
                  FROM finSpecies
                 WHERE speciesId = ?';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $speciesId));
        

        $species = new finSpecies();
        list ( $species->speciesId,
               $species->description,
               $species->isEnabled,
               $species->speciesTypeId,
               $species->bandeira,
               $species->modalidade,
               $species->numParcelas,
               $species->userName,
               $species->dateTime,
               $species->ipAddress ) = $result[0];

        return $species;
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchSpecies($filters)
    {
        $sql= 'SELECT speciesId,
                      description
                 FROM finSpecies ';

        if ( strlen($filters->speciesId) > 0 )
        {
            $where .= ' AND speciesId = ? ';
            $args[] = $filters->speciesId;
        }
        if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND description ILIKE ? ';
            $args[] = $filters->description . '%';
        }
        if ( strlen($filters->speciesTypeId) > 0 )
        {
            $where .= ' AND speciestypeid = ? ';
            $args[] = $filters->speciesTypeId;
        }
        if ( strlen($filters->isEnabled) > 0 )
        {
            $where .= ' AND isenabled = ? ';
            $args[] = $filters->isEnabled;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY description';
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertSpecies($data)
    {
        $sql = 'INSERT INTO finSpecies
                            (description, speciestypeid, bandeira, modalidade, numparcelas)
                     VALUES (?, ?, ?, ?, ?)';

        $args[] = $data->description;
        $args[] = $data->speciesTypeId;
        $args[] = $data->bandeira;
        $args[] = $data->modalidade;
        $args[] = $data->numParcelas;
        
        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function updateSpecies($data)
    {
        $sql = 'UPDATE finSpecies
                   SET description    = ?,
                       isEnabled        = ?,
                       speciesTypeId = ?,
                       bandeira = ?,
                       modalidade = ?,
                       numParcelas = ?
                 WHERE speciesId      = ?';

        $args = array( $data->description,
                       $data->isEnabled,
                       $data->speciesTypeId,
                       $data->bandeira,
                       $data->modalidade,
                       $data->numParcelas,
                       $data->speciesId );

        $db   = $this->getDatabase();        
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $speciesId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function deleteSpecies($speciesId)
    {
        $sql = 'DELETE FROM finSpecies
                      WHERE speciesId = ?';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $speciesId));
        

        return $result;
    }
    
    public function getSpeciesType($speciesId)
    {
        $sql = ' SELECT speciestypeid FROM finspecies WHERE speciesId = ?';

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $speciesId));
        
        return $result[0][0];
    }
    
    /**
     * Verifica se já existe uma espécie cadastrada com o tipo banco,
     * somente pode existir uma espécie no sistema com este tipo.
     * 
     * @return boolean
     */
    public function verificaSeExisteEspecieDeTipoBanco()
    {
        $sql = "SELECT COUNT(*) > 0 
                  FROM finspecies 
                 WHERE speciestypeid = getParameter('FINANCE', 'BANK_MOVEMENT_SPECIESTYPE_ID')::int";
        
        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $speciesId));
        
        return ($result[0][0] == DB_TRUE) ? true : false;
    }

}

?>
