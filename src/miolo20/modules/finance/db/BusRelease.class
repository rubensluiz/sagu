<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for finRelease table
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 *
 * @since
 * Class created on 23/11/2010
 *
 **/

/**
 * Class to manipulate the finRelease table
 **/
class BusinessFinanceBusRelease extends sBusiness
{
    /**
     * Return a specific record from the database
     *
     * @param $cityId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getRelease($releaseId)
    {
        $sql = 'SELECT A.releaseId,
                       A.invoiceId,
                       A.releaseInterest,
                       A.applyConvenant,
                       A.discountValue,
                       A.isPercent,
                       A.operationId,
                       TO_CHAR(A.beginDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(A.endDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       B.personId,
                       C.name,
                       A.userName,
                       A.dateTime,
                       A.ipAddress
                  FROM finRelease A
       INNER JOIN ONLY finInvoice B
                    ON (A.invoiceId = B.invoiceId)
       INNER JOIN ONLY basPerson C
                    ON (B.personId = C.personId)
                 WHERE releaseId = ?';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $releaseId));

        $release  = new FinRelease();
        list (  $release->releaseId,
                $release->invoiceId,
                $release->releaseInterest,
                $release->applyConvenant,
                $release->discountValue,
                $release->isPercent,
                $release->operationId,
                $release->beginDate,
                $release->endDate,
                $release->personId,
                $release->personName,
                $release->userName,
                $release->dateTime,
                $release->ipAddress ) = $result[0];

        return $release;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchRelease($filters)
    {
        $sql = 'SELECT A.releaseId,
                       A.invoiceId,
                       B.personId,
                       C.name,
                       A.releaseInterest,
                       A.applyConvenant,
                       A.discountValue,
                       A.isPercent,
                       A.operationId,
                       TO_CHAR(A.beginDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(A.endDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                  FROM finRelease A
       INNER JOIN ONLY finInvoice B
                    ON (A.invoiceId = B.invoiceId)
       INNER JOIN ONLY basPerson C
                    ON (B.personId = C.personId)';

        if ( strlen($filters->releaseId)>0 )
        {
            $where .= " AND releaseId = ? ";
            $args[] = $filters->releaseId;
        }
        if ( strlen($filters->invoiceId)>0 )
        {
            $where .= " AND invoiceId = ? ";
            $args[] = $filters->invoiceId;
        }
        if ( strlen($filters->releaseInterest)>0 )
        {
            $where .= " AND releaseInterest = ? ";
            $args[] = $filters->releaseInterest;
        }
        if ( strlen($filters->applyConvenant)>0 )
        {
            $where .= " AND applyConvenant = ? ";
            $args[] = $filters->applyConvenant;
        }
        if ( strlen($filters->discountValue)>0 )
        {
            $where .= " AND discountValue = ? ";
            $args[] = $filters->discountValue;
        }
        if ( strlen($filters->isPercent)>0 )
        {
            $where .= " AND isPercent = ? ";
            $args[] = $filters->isPercent;
        }
        if ( strlen($filters->operationId)>0 )
        {
            $where .= " AND operationId = ? ";
            $args[] = $filters->operationId;
        }
        if ( strlen($filters->beginDate)>0 )
        {
            $where .= " AND beginDate = to_date(?, '".SAGU::getParameter('basic', 'MASK_DATE')."') ";
            $args[] = $filters->beginDate;
        }
        if ( strlen($filters->endDate)>0 )
        {
            $where .= " AND endDate = to_date(?, '".SAGU::getParameter('basic', 'MASK_DATE')."') ";
            $args[] = $filters->endDate;
        }
        if ( strlen($filters->personId)>0 )
        {
            $where .= " AND B.personId = ? ";
            $args[] = $filters->personId;
        }
        if ( strlen($filters->personName) > 0 )
        {
            $where .= ' AND UNACCENT(C.name) ILIKE UNACCENT(?) ';
            $args[] = $filters->personName . '%';
        }

        if ( strlen($filters->referenceDate) > 0)
        {
            $where .= " AND TO_DATE(?,'" . SAGU::getParameter('BASIC', 'MASK_DATE') . "') BETWEEN beginDate AND endDate ";
            $args[] = $filters->referenceDate;
        }

        unset($ret);
        if ( strlen($where) > 0 )
        {
            $sql .= " WHERE " . substr($where, 4) . " ORDER BY A.endDate DESC, C.name";
            $ret = $this->getDatabase()->query(SAGU::Prepare($sql, $args));
        }
        
        return $ret;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertRelease($data)
    {
        $sql = "INSERT INTO finRelease (
                       invoiceId,
                       releaseInterest,
                       applyConvenant,
                       discountValue,
                       isPercent,
                       operationId,
                       beginDate,
                       endDate)
                     VALUES (?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             to_date(?, '".SAGU::getParameter('basic', 'MASK_DATE')."'),
                             to_date(?, '".SAGU::getParameter('basic', 'MASK_DATE')."'))";

        $args = array(
            $data->invoiceId,
            $data->releaseInterest,
            $data->applyConvenant,
            $data->discountValue,
            $data->isPercent,
            $data->operationId,
            $data->beginDate,
            $data->endDate );

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateRelease($data)
    {
        $sql = "UPDATE finRelease
                   SET releaseInterest = ?,
                       applyConvenant = ?,
                       discountValue = ?,
                       isPercent = ?,
                       operationId = ?,
                       beginDate = to_date(?, '".SAGU::getParameter('basic', 'MASK_DATE')."'),
                       endDate = to_date(?, '".SAGU::getParameter('basic', 'MASK_DATE')."')
                 WHERE releaseId = ?";

        $args = array(
            $data->releaseInterest,
            $data->applyConvenant,
            $data->discountValue,
            $data->isPercent,
            $data->operationId,
            $data->beginDate,
            $data->endDate,
            $data->releaseId );

        $sqls = SAGU::prepare($sql, $args);
        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $cityId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteRelease($releaseId)
    {
        $sql = 'DELETE FROM finRelease
                      WHERE releaseId = ?';

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $releaseId));

        return $result;
    }

    /**
     * Delete all releases related to the specified invoice id.
     *
     * @param $invoiceId (integer): The id of the invoice whose releases will be deleted.
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteReleasesByInvoice($invoiceId)
    {
        $sql = 'DELETE FROM finRelease
                      WHERE invoiceId = ?';

        return $this->getDatabase()->execute(SAGU::prepare($sql, $invoiceId));
    }

    /**
     *
     * Método que obtém os títulos da pessoa conforme utilizado na grid
     *
     * @param integer $personId - Código da pessoa
     */
    public function getPersonInvoices($personId)
    {
        $sql = 'SELECT invoiceId,
                       parcelNumber,
                       TO_CHAR(maturityDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       ROUND(value, \'' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . '\')
                  FROM finReceivableInvoice
                       WHERE personId = ?
                       AND isCanceled = FALSE
                       AND balance(invoiceId)>0
                       ORDER BY invoiceId';

        $args[] = $personId;
        
        $return = $this->getDatabase()->query(SAGU::Prepare($sql, $args));
        
        return $return;
    }

    /**
     * Função para filtras os títulos a receber de determinada pessoa conforme colunas da grid
     * do cadastro de Liberação de juros e multas
     *
     * @author Jonas G. Diel [jonas_diel@solis.coop.br]
     *
     * @param (Integer) $personId - Código da pessoa
     *
     */
    public function searchReceivableInvoiceForRelease($personId)
    {
         $sql = 'SELECT A.invoiceId,
                       A.parcelNumber,
                       TO_CHAR(A.maturityDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       ROUND((balanceWithPoliciesDated(A.invoiceId, now()::date))::numeric, ' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . ')
                  FROM finReceivableInvoice A
                  WHERE A.personId = ?
                    AND A.isCanceled = FALSE
                    AND balance(A.invoiceId)>0 ';

         if ( strlen($personId) > 0 )
         {
             $args[] = $personId;
             $result = $this->getDatabase()->query( SAGU::prepare( $sql, $args ) );
         }
         return $result;
    }
}
?>
