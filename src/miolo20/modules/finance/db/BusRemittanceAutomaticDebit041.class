<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finSpecies table
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 20/12/2005
 *
 **/

/**
 * Class to manipulate the finSpecies table
 **/
class BusinessFinanceBusRemittanceAutomaticDebit041 extends sBusiness
{
   /**
    * Get the company information needed for invoices
    *
    * @param: $companyId (int): Object containing the company identification
    *
    * @return: Return an object with information.
    *
    */
    function getCompanyData($companyId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $sql = ' SELECT acronym
                   FROM basCompanyConf
                  WHERE companyId = ? ';
                  
        $args = array($companyId);
        $ret = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        
        $return->acronym = $ret[0][0];
        return $return;
    }

   /** 
    * Bank account information
    * 
    * @param $bankAccountId (int): Primary key for bank account information
    *
    * @return: Return the bank account information
    *
    */
    public function getBankAccountData($bankAccountId)
    {
        $sql = '    SELECT C.transferorCode,
                           B.description,
                           B.bankId,
                           B.accordCode
                      FROM finBankAccount A
                INNER JOIN finBank B
                        ON (A.bankId = B.bankId)
                     WHERE A.bankAccountId = ? ';
        
        $args = array($bankAccountId);
        
        $ret = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        $return->transferorCode  = $ret[0][0];
        $return->bankDescription = $ret[0][1];
        $return->bankId          = $ret[0][2];
        $return->accordCode      = $ret[0][3];
        return $return;
    }
 
   /** 
    * Invoice remittance sequence number
    * 
    * @param No parameters needed
    *
    * @return: The number
    *
    */
    public function getFileSequence()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $sql = ' SELECT value
                   FROM basConfig
                  WHERE parameter = ? ';
        
        $parameter = 'SEQ_BANK_REMITTANCE_AUTOMATIC_DEBIT_041';
        $args = array($parameter);
        $ret = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        if (is_array($ret[0]))
        {
            $sql = ' UPDATE basConfig SET VALUE = ? WHERE parameter = ? ';
            $args = array(++$ret[0][0], $parameter);
            $this->getDatabase()->execute(SAGU::prepare($sql, $args));
        }
        else
        {
            $MIOLO->information(_M('O parâmetro para a remessa bancária para este banco na basConfig não existe', $module), SAGU::getStackBackURL());
        }
        return $ret[0][0];
    }

  /** 
    * details for automatic debit
    *
    * @param $data (object): Object containing information about data
    *
    * @return: Return a array containing the specific information
    *
    */
    function listDetails($data)
    {
        $sql = ' SELECT B.contractid,
                        A.branchNumber,
                        A.accountNumber||COALESCE(A.accountNumberDigit, \'\') as accountNumber, ';
                                          
        if (strlen($data->debitDate)>0)
        {
            $sql.= SAGU::prepare(' ? as maturityDate, ', array($data->debitDate));
        }
        else
        {
            $sql.= '        TO_CHAR(C.maturityDate, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\') as maturityDate, ';
        }
               
        if ( $data->receiveDiscount == 't')
        {
            $sql.= ' ROUND( ( balance(C.invoiceId)* ( (1.00 - ( SELECT discountPercent
                                                                  FROM finPolicy
                                                                 WHERE finPolicy.policyId = C.policyId )/100 
                                                      )
                                                    )::numeric(10,4)
                            ), '.SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE').'
                          ) as balance, ';
        }
        else
        {
            $sql.= '        ROUND(balance(C.invoiceId), '.SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE').') as balance, ';
        }

        $sql.='         C.invoiceId,
                        B.personId,
                        D.name as personName,
                        ( SELECT content
                            FROM basDocument
                           WHERE basDocument.personId = B.personId
                             AND documentTypeId = '.SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF').') as documentCPF,
                        E.name as cityName,
                        F.name as stateName,
                        ( SELECT discountPercent
                            FROM finPolicy
                           WHERE finPolicy.policyId = C.policyId ) as discountPercent,
                        CASE WHEN D.isInsured = true
                        
            --      COMMENT: When is insured, then verify if have a active incentive for that person 
            --               and that incentive block the sending invoice
            
                             THEN COALESCE ((    SELECT AA.incentiveId||\' - \'||AB.description
                                                   FROM finIncentive AA
                                             INNER JOIN finIncentiveType AB
                                                  USING (incentiveTypeId)
                                                  WHERE sendInvoices = false
                                                    AND AA.contractId = A.contractId
                                                    AND C.maturityDate
                                                BETWEEN AA.startDate
                                                    AND ( CASE WHEN AA.cancellationDate IS NULL
                                                               THEN AA.endDate
                                                               ELSE AA.cancellationDate END ) LIMIT 1), NULL)
                             ELSE NULL
                        END as hasBenefit

                   FROM ( SELECT contractId,
                                 bankId,
                                 branchnumber,
                                 branchNumberDigit,
                                 accountnumber,
                                 accountnumberdigit
                            FROM finBankTarget
                           WHERE bankId = \'041\' ) AS A
             INNER JOIN (   SELECT contractId,
                                   personId,
                                   courseId,
                                   courseVersion,
                                   unitId
                         FROM ONLY acdContract ) AS B
                  USING (contractId)
             INNER JOIN (   SELECT invoiceId,
                                   personId,
                                   courseId,
                                   courseVersion,
                                   unitId,
                                   maturityDate,
                                   policyId
                         FROM ONLY finReceivableInvoice
                             WHERE automaticDebit = true 
                               AND maturityDate BETWEEN TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')
                               AND TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')
                        ) AS C
                     ON (    B.personId = C.personId
                         AND B.courseId = C.courseId
                         AND B.courseVersion = C.courseVersion
                         AND B.unitId = C.unitId )
             INNER JOIN (   SELECT personId,
                                   name,
                                   cityId,
                                   dateDeath,
                                   isInsured
                         FROM ONLY basPhysicalPersonStudent ) AS D
                     ON (C.personId = D.personId)
             INNER JOIN (   SELECT cityId,
                                   name,
                                   stateId
                         FROM ONLY basCity ) AS E
                  USING (cityId)
             INNER JOIN (   SELECT stateId,
                                   name
                         FROM ONLY basState ) AS F
                  USING (stateId)
                  WHERE D.dateDeath IS NULL
                    AND balance(C.invoiceId)>0 ';

        $args = array( $data->initialMaturityDate,
                       $data->finalMaturityDate );

        if (strlen($data->defaulterMaturityDate)>0)
        {
            $sql.= ' AND C.maturityDate <= TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\') ';
            $args[] = $data->defaulterMaturityDate;
        }
        $sql.=' ORDER BY D.name ';
        
        $ret = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        return $ret;
    }
}
?>
