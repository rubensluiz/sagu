<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finInvoice table
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br] 
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 13/12/2005
 *
 **/

/**
 * Class to manipulate the Invoice table
 **/
class BusinessFinanceBusPayrollDiscountTarget extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listInvoice()
    {
    }



    /**
     * Return a specific record from the database
     *
     * @param $invoiceId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getPayrollDiscountTarget($contractId)
    {
        $sql = 'SELECT A.contractId,
                       A.ispayrolldiscount,
                       A.employeeid,
                       A.userName,
                       A.dateTime,
                       A.ipAddress
                  FROM finPayrollDiscountTarget A
                 WHERE A.contractId = ?';

                       //A.TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),

        $args = array($contractId);
        //$db     = $this->getDatabase();

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
       

        $payrollDiscountTarget = new FinPayrollDiscountTarget();

        list ( 
               $payrollDiscountTarget->contractId,
               $payrollDiscountTarget->isPayrollDiscount,
               $payrollDiscountTarget->employeeId,
               $payrollDiscountTarget->userName,
               $payrollDiscountTarget->dateTime,
               $payrollDiscountTarget->ipAddress ) = $result[0];

         return $payrollDiscountTarget;
    }


    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchPayrollDiscountTarget($data)
    {
    // Not Implemented
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return If succed, return the invoice id. Otherwise return FALSE.
     *
     **/
    public function insertPayrollDiscountTarget($data)
    {

           $sql = 'INSERT INTO finPayrollDiscountTarget
                                (contractId,
                                 employeeId, 
                                 isPayrollDiscount )
                        VALUES ( ?, ?, ?)';

           $args = array( $data->contractId,
                          $data->employeeId,
                          $data->isPayrollDiscount);

           //$db     = $this->getDatabase();

           if( ! $this->getDatabase()->execute(SAGU::prepare($sql, $args)) )
           {
                $contractId = false;
           }
           else
           {
                $contractId = $data->contractId;
           }
        return $contractId;
    }


    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updatePayrollDiscountTarget($data)
    {
        $sql = 'UPDATE finPayrollDiscountTarget
                   SET employeeId        = ?,
                       isPayrollDiscount = ?
                 WHERE contractId = ?';
        unset($args);
        $args[] = $data->employeeId;
        $args[] = $data->isPayrollDiscount;
        $args[] = $data->contractId;

        $sqls = SAGU::prepare($sql, $args);
        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $invoiceId (integer): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deletePayrollDiscountTarget($invoiceId)
    {
        $sql = 'DELETE FROM ONLY finPayrollDiscountTarget
                      WHERE contractId = ?';

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $invoiceId));

        return $result;
    }
    
    public function obterTitulosDosContratosComDescontoEmFolha($filters = null)
    {
        $sql = " SELECT RI.invoiceId,
                        TO_CHAR(RI.maturityDate, getParameter('BASIC', 'MASK_DATE')) AS maturityDate,
                        ROUND(RI.value, getParameter('BASIC', 'REAL_ROUND_VALUE')::INT) AS value,
                        ( SELECT description
                            FROM finOperation
                           WHERE operationId = E.operationId ) AS operation,
                        C.contractId,
                        C.personId || ' - ' || getPersonName(C.personId) AS name,
                        PE.personId || ' - ' || getPersonName(PE.personId) AS responsable
                   FROM finReceivableInvoice RI
             INNER JOIN finEntry E
                     ON E.invoiceId = RI.invoiceId
             INNER JOIN acdContract C
                     ON C.personId = RI.personId
             INNER JOIN finPayrollDiscountTarget PDT
                     ON PDT.contractId = C.contractId
             INNER JOIN basPhysicalPersonEmployee PE
                     ON PDT.employeeId = PE.personId
                  WHERE ( PDT.isActive = TRUE AND PDT.isPayrollDiscount = TRUE )
                    AND ( E.operationId IN ( ( SELECT monthlyfeeoperation FROM finDefaultOperations ),
                                             ( SELECT enrollOperation FROM finDefaultOperations ),
                                             ( SELECT renewalOperation FROM finDefaultOperations ) ) )
                    AND ( ROUND(balance(RI.invoiceId)::numeric, 2) ) > 0.00
                    AND RI.isCanceled = FALSE";
        
        $params = array();
        
        if ( strlen($filters->maturityDateBegin) > 0 && strlen($filters->maturityDateEnd) > 0 )
        {
            $sql .= " AND RI.maturityDate BETWEEN ? AND ?";
            $params[] = $filters->maturityDateBegin;
            $params[] = $filters->maturityDateEnd;
        }
        if ( strlen($filters->contractId) > 0 )
        {
            $sql .= " AND C.contractId = ?";
            $params[] = $filters->contractId;
        }
        
        $sql .= " ORDER BY getPersonName(C.personId)";
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $params));
        
        return $result;
    }

}
?>
