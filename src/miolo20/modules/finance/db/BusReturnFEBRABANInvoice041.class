<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finSpecies table
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 20/12/2005
 *
 **/

/**
 * Class to manipulate the finSpecies table
 **/
class BusinessFinanceBusReturnFEBRABANInvoice041 extends sBusiness
{
    /**
     * System to get the next value for entry id
     *
     * @param: No parameters needed, needed the getDatabase instantiated
     *
     * @return (int): Nextval for sequence seq_entryid
     *
     */
    private function getNextValEntryId()
    {
        $sqlId = ' SELECT nextVal(\'seq_entryId\')';
        if ($this->getDatabase() != null)
        {
            $nextval = $this->getDatabase()->query($sqlId);
            return $nextval[0][0];
        }
        else
        {
            return false;
        }
    }
   


    /**
    * Process 
    *
    * @param $sqlData (array):
    *
    * @return (boolean): True if succeed
    *
    * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
    *
    */
    public function processReturnVersion1($processData)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        unset($data);
        $this->getDatabase()->execute('BEGIN TRANSACTION');
        if(strlen($processData->insertEntry[0]->data->invoiceId) > 0 )
        {

            foreach($processData->updateReceivableInvoice as $key => $dataInvoice)
            {
                $data = clone($dataInvoice->data);
                $sql = ' UPDATE finInvoice
                            SET personId        = ?,
                                accountSchemeId = ?,
                                costCenterId    = ?,
                                courseId        = ?,
                                courseVersion   = ?,
                                unitId          = ?,
                                parcelNumber    = ?,
                                emissionDate    = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                                maturityDate    = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                                value           = ?,
                                policyId        = ?,
                                bankInvoiceId   = ?,
                                automaticDebit  = ?,
                                comments        = ?,
                                incomeSourceId  = ?,
                                bankAccountId   = ?,
                                sagu1InvoiceId  = ?
                          WHERE invoiceId = ?';
        
                unset($args);
                $args[] = $data->personId;
                $args[] = $data->accountSchemeId;
                $args[] = $data->costCenterId;
                $args[] = $data->courseId;
                $args[] = $data->courseVersion;
                $args[] = $data->unitId;
                $args[] = $data->parcelNumber;
                $args[] = $data->emissionDate;
                $args[] = $data->maturityDate;
                $args[] = $data->value;
                $args[] = $data->policyId;
                $args[] = $data->bankInvoiceId;
                $args[] = $data->automaticDebit;
                $args[] = $data->comments;
                $args[] = $data->incomeSourceId;
                $args[] = $data->bankAccountId;
                $args[] = $data->sagu1InvoiceId;
                $args[] = $data->invoiceId;
        
                $sqls = SAGU::prepare($sql, $args);
                for ( $i=0; $i<count($sqls); $i++ )
                {
                    $result = $this->getDatabase()->execute($sqls[$i]);
                }
    
                $sql = ' UPDATE finReceivableInvoice
                            SET personId        = ?,
                                accountSchemeId = ?,
                                costCenterId    = ?,
                                courseId        = ?,
                                courseVersion   = ?,
                                unitId          = ?,
                                parcelNumber    = ?,
                                emissionDate    = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                                maturityDate    = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                                value           = ?,
                                policyId        = ?,
                                bankInvoiceId   = ?,
                                automaticDebit  = ?,
                                comments        = ?,
                                incomeSourceId  = ?,
                                bankAccountId   = ?,
                                sagu1InvoiceId  = ?,
                                sendDate        = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                                returnDate      = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                                returnFileId    = ?
                          WHERE invoiceId = ?';

                unset($args);
                $args[] = $data->personId;
                $args[] = $data->accountSchemeId;
                $args[] = $data->costCenterId;
                $args[] = $data->courseId;
                $args[] = $data->courseVersion;
                $args[] = $data->unitId;
                $args[] = $data->parcelNumber;
                $args[] = $data->emissionDate;
                $args[] = $data->maturityDate;
                $args[] = $data->value;
                $args[] = $data->policyId;
                $args[] = $data->bankInvoiceId;
                $args[] = $data->automaticDebit;
                $args[] = $data->comments;
                $args[] = $data->incomeSourceId;
                $args[] = $data->bankAccountId;
                $args[] = $data->sagu;
                $args[] = $data->sendDate;
                $args[] = $data->returnDate;
                $args[] = $data->returnFileId;
                $args[] = $data->invoiceId;
                
                $sqls = SAGU::prepare($sql, $args);
                for ( $i=0; $i<count($sqls); $i++ )
                {
                    $retVal = $this->getDatabase()->execute($sqls[$i]);
                }
            }
            
            unset($data);
            if(is_array($processData->insertEntry))
            {
                foreach($processData->insertEntry as $key => $dataEntry)
                {
                    $data = clone($dataEntry->data);

                    $sql = ' INSERT INTO finEntry
                                        ( invoiceId,
                                        operationId,
                                        entryDate,
                                        value,
                                        costCenterId,
                                        comments,
                                        bankReturnCode,
                                        isAccounted,
                                        creationType
                                        )
                                VALUES (?, ?, to_date(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'), ?, ?, ?, ?, ?, ?) ';

                    $db = $this->getDatabase();

                    if (is_null($data->isAccounted))
                    {
                        $data->isAccounted = true;
                    }
                    $args = array( $data->invoiceId,
                                $data->operationId,
                                $data->entryDate,
                                $data->value,
                                $data->costCenterId,
                                $data->comments, 
                                $data->bankReturnCode,
                                $data->isAccounted,
                                $data->creationType 
                                );

                    $return = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

                    if ($this->getDatabase()->getErrors())
                    {
                        $return = false;
                    }
                }
            }

            unset($data);
            if(is_array($processData->updateOccurrence))
            {
                foreach($processData->updateOccurrence as $key => $dataUpdate)
                {
                    $data = clone($dataUpdate->data);

                    $sql = 'UPDATE finInvoice
                            SET personId        = ?,
                                accountSchemeId = ?,
                                costCenterId    = ?,
                                courseId        = ?,
                                courseVersion   = ?,
                                unitId          = ?,
                                parcelNumber    = ?,
                                emissionDate    = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                                maturityDate    = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                                value           = ?,
                                policyId        = ?,
                                bankInvoiceId   = ?,
                                automaticDebit  = ?,
                                comments        = ?,
                                incomeSourceId  = ?,
                                bankAccountId   = ?,
                                sagu1InvoiceId  = ?
                            WHERE invoiceId = ?';

                    unset($args);
                    $args[] = $data->personId;
                    $args[] = $data->accountSchemeId;
                    $args[] = $data->costCenterId;
                    $args[] = $data->courseId;
                    $args[] = $data->courseVersion;
                    $args[] = $data->unitId;
                    $args[] = $data->parcelNumber;
                    $args[] = $data->emissionDate;
                    $args[] = $data->maturityDate;
                    $args[] = $data->value;
                    $args[] = $data->policyId;
                    $args[] = $data->bankInvoiceId;
                    $args[] = $data->automaticDebit;
                    $args[] = $data->comments;
                    $args[] = $data->incomeSourceId;
                    $args[] = $data->bankAccountId;
                    $args[] = $data->sagu1InvoiceId;
                    $args[] = $data->invoiceId;
           
                    $sqls = SAGU::prepare($sql, $args);
                    for ( $i=0; $i<count($sqls); $i++ )
                    {
                        $result = $this->getDatabase()->execute($sqls[$i]);
                    }
        
                    $sql = 'UPDATE finReceivableInvoice
                            SET personId        = ?,
                                accountSchemeId = ?,
                                costCenterId    = ?,
                                courseId        = ?,
                                courseVersion   = ?,
                                unitId          = ?,
                                parcelNumber    = ?,
                                emissionDate    = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                                maturityDate    = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                                value           = ?,
                                policyId        = ?,
                                bankInvoiceId   = ?,
                                automaticDebit  = ?,
                                comments        = ?,
                                incomeSourceId  = ?,
                                bankAccountId   = ?,
                                sagu1InvoiceId  = ?,
                                sendDate        = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                                returnDate      = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                                returnFileId    = ?
                        WHERE invoiceId = ?';
        
                    unset($args);
                    $args[] = $data->personId;
                    $args[] = $data->accountSchemeId;
                    $args[] = $data->costCenterId;
                    $args[] = $data->courseId;
                    $args[] = $data->courseVersion;
                    $args[] = $data->unitId;
                    $args[] = $data->parcelNumber;
                    $args[] = $data->emissionDate;
                    $args[] = $data->maturityDate;
                    $args[] = $data->value;
                    $args[] = $data->policyId;
                    $args[] = $data->bankInvoiceId;
                    $args[] = $data->automaticDebit;
                    $args[] = $data->comments;
                    $args[] = $data->incomeSourceId;
                    $args[] = $data->bankAccountId;
                    $args[] = $data->sagu;
                    $args[] = $data->sendDate;
                    $args[] = $data->returnDate;
                    $args[] = $data->returnFileId;
                    $args[] = $data->invoiceId;
                    
                   
                    $sqls = SAGU::prepare($sql, $args);
                    for ( $i=0; $i<count($sqls); $i++ )
                    {
                        $retVal = $this->getDatabase()->execute($sqls[$i]);
                    }
                }
            }

            unset($data);
           
            if(is_object($processData->updateReceivableInvoiceClose->data))
            {
                $data = clone($processData->updateReceivableInvoiceClose->data);
                // recebe o invoiceId para fechamento do título.
                // $data->invoiceId = $invoiceId;

                $sql = 'UPDATE finInvoice
                        SET personId        = ?,
                            accountSchemeId = ?,
                            costCenterId    = ?,
                            courseId        = ?,
                            courseVersion   = ?,
                            unitId          = ?,
                            parcelNumber    = ?,
                            emissionDate    = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                            maturityDate    = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                            value           = ?,
                            policyId        = ?,
                            bankInvoiceId   = ?,
                            automaticDebit  = ?,
                            comments        = ?,
                            incomeSourceId  = ?,
                            bankAccountId   = ?,
                            sagu1InvoiceId  = ?
                      WHERE invoiceId = ?';
        
                unset($args);
                $args[] = $data->personId;
                $args[] = $data->accountSchemeId;
                $args[] = $data->costCenterId;
                $args[] = $data->courseId;
                $args[] = $data->courseVersion;
                $args[] = $data->unitId;
                $args[] = $data->parcelNumber;
                $args[] = $data->emissionDate;
                $args[] = $data->maturityDate;
                $args[] = $data->value;
                $args[] = $data->policyId;
                $args[] = $data->bankInvoiceId;
                $args[] = $data->automaticDebit;
                $args[] = $data->comments;
                $args[] = $data->incomeSourceId;
                $args[] = $data->bankAccountId;
                $args[] = $data->sagu1InvoiceId;
                $args[] = $data->invoiceId;
        
                $sqls = SAGU::prepare($sql, $args);
                for ( $i=0; $i<count($sqls); $i++ )
                {
                    $result = $this->getDatabase()->execute($sqls[$i]);
                }
    
                $sql = 'UPDATE finReceivableInvoice
                        SET personId        = ?,
                            accountSchemeId = ?,
                            costCenterId    = ?,
                            courseId        = ?,
                            courseVersion   = ?,
                            unitId          = ?,
                            parcelNumber    = ?,
                            emissionDate    = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                            maturityDate    = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                            value           = ?,
                            policyId        = ?,
                            bankInvoiceId   = ?,
                            automaticDebit  = ?,
                            comments        = ?,
                            incomeSourceId  = ?,
                            bankAccountId   = ?,
                            sagu1InvoiceId  = ?,
                            sendDate        = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                            returnDate      = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                            returnFileId    = ?
                    WHERE invoiceId = ?';
    
                unset($args);
                $args[] = $data->personId;
                $args[] = $data->accountSchemeId;
                $args[] = $data->costCenterId;
                $args[] = $data->courseId;
                $args[] = $data->courseVersion;
                $args[] = $data->unitId;
                $args[] = $data->parcelNumber;
                $args[] = $data->emissionDate;
                $args[] = $data->maturityDate;
                $args[] = $data->value;
                $args[] = $data->policyId;
                $args[] = $data->bankInvoiceId;
                $args[] = $data->automaticDebit;
                $args[] = $data->comments;
                $args[] = $data->incomeSourceId;
                $args[] = $data->bankAccountId;
                $args[] = $data->sagu;
                $args[] = $data->sendDate;
                $args[] = $data->returnDate;
                $args[] = $data->returnFileId;
                $args[] = $data->invoiceId;
                
                $sqls = SAGU::prepare($sql, $args);

                for ( $i=0; $i<count($sqls); $i++ )
                {
                    $retVal = $this->getDatabase()->execute($sqls[$i]);
                }
            }
            
            if(is_object($processData->insertEntryClose->data))
            {
                $data = clone($processData->insertEntryClose->data);
                $sql = ' INSERT INTO finEntry
                                    ( invoiceId,
                                    operationId,
                                    entryDate,
                                    value,
                                    costCenterId,
                                    comments,
                                    bankReturnCode,
                                    isAccounted,
                                    creationType )
                            VALUES (?, ?, to_date(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'), ?, ?, ?, ?, ?, ?) ';
                            
                $db = $this->getDatabase();
               
                if (is_null($data->isAccounted))
                {
                    $data->isAccounted = true;    
                }
                $args = array( $data->invoiceId,
                               $data->operationId,
                               $data->entryDate,
                               $data->value,
                               $data->costCenterId,
                               $data->comments, 
                               $data->bankReturnCode,
                               $data->isAccounted,
                               $data->creationType );

                $return = $this->getDatabase()->execute(SAGU::prepare($sql, $args));
                
                if ($this->getDatabase()->getErrors())
                {
                    $return = false;
                }
            }


            if($retVal AND $return)
            {
                $this->closeTransaction(true);
                return true;
            }
            else
            {
                return false;
            }
        }
    }



 
   /**
    * Process 
    *
    * @param $sqlData (array): 
    *
    * @return (boolean): True if succeed
    *
    */
    public function processReturn($sqlData)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        if (is_array($sqlData->sql))
        {
            // This needed for sagu1 conversion
            $businessInvoice = new BusinessFinanceBusInvoice();

            // --
            $this->getDatabase()->execute('BEGIN TRANSACTION');
            
            for ($x = 0; $x<count($sqlData->sql); $x++)
            {
                $return->data[$x]['importInfo'] = $sqlData->occurrency[$x]['description'];
                $info = ereg_replace('[^0-9]{1,}', '', $sqlData->sql[$x][0]);
                if (strlen($info) == strlen($sqlData->sql[$x][0]))
                {
                    if ($businessInvoice->verifyInvoice($sqlData->sql[$x][0]))
                    {
                        $entryId = $this->getNextValEntryId();
                        $sql = ' INSERT INTO finEntry (entryId,
                                                       invoiceId,
                                                       operationId,
                                                       entryDate,
                                                       value,
                                                       costCenterId,
                                                       comments,
                                                       isAccounted)
                                               VALUES (?, ?, ?, to_date(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE') .'\'), ?, ?, ?, ?) ';
                        $keepGoing = $this->getDatabase()->execute(SAGU::prepare($sql, array_merge(array($entryId), $sqlData->sql[$x])));
                
                        if ($keepGoing === false)
                        {
                            $this->closeTransaction(false);
                            $return->data[$x]['information'] = _M('Erro na importação, transação cancelada', $module);
                            break 4;
                        }
                        else
                        {
                            $return->data[$x]['information'] = _M('Importado com sucesso', $module);
                            $return->data[$x]['isProcessed'] = DB_TRUE;
                            $return->data[$x]['entryId']     = $entryId;
                        }
                    }
                    else
                    {
                        $return->data[$x]['information'] = _M('Título não existe', $module);
                    }
                }
                else
                {
                    $return->data[$x]['information'] = _M('Código do título inválido', $module);
                }
                $return->data[$x]['invoiceId'] = $sqlData->invoice[$x];
            }
        }
        if (is_array($sqlData->slqXtra))
        {
            for ($x = 0; $x<count($sqlData->sqlXtra); $x++)
            {
                $return->data[$x]['importInfo'] = $sqlData->occurrency[$x]['description'];
                $info = ereg_replace('[^0-9]{1,}', '', $sqlData->sqlXtra[$x][0]);
                if (strlen($info) == strlen($sqlData->sqlXtra[$x][0]))
                {
                    if ($businessInvoice->verifyInvoice($sqlData->sqlXtra[$x][0]))
                    {
                        $entryId = $this->getNextValEntryId();
                        $sql = ' INSERT INTO finEntry (entryId,
                                                       invoiceId,
                                                       operationId,
                                                       entryDate,
                                                       value,
                                                       costCenterId,
                                                       comments,
                                                       isAccounted)
                                               VALUES (?, ?, ?, to_date(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE') .'\'), ?, ?, ?, ?) ';

                        $keepGoing = $this->getDatabase()->execute(SAGU::prepare($sql, array_merge(array($entryId), $sqlData->sqlXtra[$x])));
                
                        if ($keepGoing === false)
                        {
                            $this->closeTransaction(false);
                            $return->data[$x]['information'] = _M('Erro na informação extra da importação, transação cancelada', $module);
                            break 4;
                        }
                        else
                        {
                            $return->dataXtra[$x]['information'] = _M('Importado com sucesso', $module);
                            $return->dataXtra[$x]['isProcessed'] = DB_TRUE;
                            $return->dataXtra[$x]['entryId']     = $entryId;
                        }
                    }
                    else
                    {
                        $return->dataXtra[$x]['information'] = _M('Título não existe', $module);
                    }
                }
                else
                {
                    $return->dataXtra[$x]['information'] = _M('Código do título inválido', $module);
                }
                $return->dataXtra[$x]['invoiceId'] = $sqlData->invoiceXtra[$x];
            }
        }
        if (is_array($sqlData->slqTariff))
        {
            
            for ($x = 0; $x<count($sqlData->sqlTariff); $x++)
            {
                $info = ereg_replace('[^0-9]{1,}', '', $sqlData->sqlTariff[$x][0]);
                if (strlen($info) == strlen($sqlData->sqlTariff[$x][0]))
                {
                    if ($businessInvoice->verifyInvoice($sqlData->sqlTariff[$x][0]))
                    {
                        $entryId = $this->getNextValEntryId();
                        $sql = ' INSERT INTO finEntry (entryId,
                                                       invoiceId,
                                                       operationId,
                                                       entryDate,
                                                       value,
                                                       costCenterId,
                                                       comments,
                                                       isAccounted)
                                               VALUES (?, ?, ?, to_date(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE') .'\'), ?, ?, ?, ?) ';

                        $keepGoing = $this->getDatabase()->execute(SAGU::prepare($sql, array_merge(array($entryId), $sqlData->sqlTariff[$x])));
                
                        if ($keepGoing === false)
                        {
                            $this->closeTransaction(false);
                            $return->dataTariff[$x]['information'] = _M('Erro na informação extra da importação, transação cancelada', $module);
                            break 4;
                        }
                        else
                        {
                            $return->dataTariff[$x]['information'] = _M('Importado com sucesso', $module);
                            $return->dataTariff[$x]['isProcessed'] = DB_TRUE;
                            $return->dataTariff[$x]['entryId']     = $entryId;
                        }
                    }
                    else
                    {
                        $return->dataTariff[$x]['information'] = _M('Título não existe', $module);
                    }
                }
                else
                {
                    $return->dataTariff[$x]['information'] = _M('Código do título inválido', $module);
                }
                $return->dataTariff[$x]['invoiceId'] = $sqlData->invoiceTariff[$x];
            }
        }
        $return->status = $keepGoing !== false ? true : false;
        return $return;
    }

    /**
     * Function to close the transaction, depending the status make a commit or rollback
     *
     * @param $status (boolean): The status of "normally" keepGoing variable indicating to get a commit or rollback
     *
     */
    private function closeTransaction($status)
    {
        if ($status == true)
        {
     //       echo "COMMIT";
            $this->getDatabase()->execute('COMMIT');
            return true;
        }
        else
        {
      //      echo "ROLLBACK";
            $this->getDatabase()->execute('ROLLBACK');
            return false;
        }
    }
}
?>
