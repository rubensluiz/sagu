<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finSPC table
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * 
 * @since
 * Class created on 26/08/2010
 *
 **/

class BusinessFinanceBusSpc extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listSpc()
    {
        $sql = 'SELECT personId,
                       entryDate,
                       removalDate 
                  FROM finSPC   
              ORDER BY 2,1';
        
        $db = $this->getDatabase();
        $return = $db->query($sql);
        
        return $return;
    }

    /**
     * Return a specific record from the database
     *
     * @param $Id (array): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getSpc($id)
    {
        $sql = 'SELECT S.personId,
                       TO_CHAR(S.entryDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(S.removalDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       P.name,
                       S.userName,
                       TO_CHAR(S.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\') AS dateTime,
                       S.ipAddress
                  FROM finSPC S
            INNER JOIN basPerson P
                    ON (S.personId = P.personId)
                 WHERE S.personId = ?
                   AND entryDate = TO_DATE(?, \'dd/mm/yyyy\') ';
        
        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $id));
        
        $spc = new FinSpc();
        
        list ( $spc->personId, $spc->entryDate, $spc->removalDate, $spc->personName, $spc->userName, $spc->dateTime, $spc->ipAddress ) = $result[0];
        
        return $spc;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchSpc($filters)
    {
        $sql = 'SELECT DISTINCT S.personId,
                               P.name,
                               TO_CHAR(S.entryDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                               TO_CHAR(S.removalDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                          FROM finSPC S
                    INNER JOIN basPerson P
                            ON (S.personId = P.personId)';
        
        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND S.personId = ? ';
            $args[] = $filters->personId;
        }
        
        if ( strlen($filters->entryDateId) > 0 )
        {
            $where .= ' AND S.entryDate = TO_DATE(?, \'dd/mm/yyyy\') ';
            $args[] = $filters->entryDateId;
        }
        
        if ( strlen($filters->entryDate) > 0 )
        {
            $where .= ' AND S.entryDate >= TO_DATE(?, \'dd/mm/yyyy\') ';
            $args[] = $filters->entryDate;
        }
        
        if ( strlen($filters->removalDate) > 0 )
        {
            $where .= ' AND S.removalDate <= TO_DATE(?, \'dd/mm/yyyy\') ';
            $args[] = $filters->removalDate;
        }
        
        if ( strlen($filters->personName) > 0 )
        {
            $where .= ' AND UNACCENT(P.name) ILIKE UNACCENT(?) ';
            $args[] = $filters->personName . '%';
        }
        
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4);
            $sql .= ' ORDER BY P.name';
            
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }
        
        return $result;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchSpcReport($filters)
    {
        $sql = 'SELECT DISTINCT S.personId,
                                P.name,
                                TO_CHAR(S.entryDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                                TO_CHAR(S.removalDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                           FROM finSPC S
                     INNER JOIN basPerson P
                             ON (S.personId = P.personId)
                     INNER JOIN finSpcMovement M
                             ON (M.personId = S.personId
                            AND M.entryDate = S.entryDate)';
        
        if ( strlen($filters->courseId) > 0 )
        {
            $sql .= 'INNER JOIN acdContract C
                             ON (C.personId = P.personId)';
            
            $where .= ' AND C.courseId = ? ';
            $args[] = $filters->courseId;
        }
        
        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND S.personId = ? ';
            $args[] = $filters->personId;
        }
        
        if ( strlen($filters->isInTheSpc) > 0 )
        {
            if ( $filters->isInTheSpc == 't' )
            {
                $where .= ' AND S.removalDate is null OR S.removalDate >= now()::DATE ';
            }
            else
            {
                $where .= ' AND S.removalDate is not null AND S.removalDate < now()::DATE ';
            }
        }
        
        if ( strlen($filters->entryDateBegin) > 0 )
        {
            if ( $filters->entryDateEnd )
            {
                $where .= ' AND S.entryDate BETWEEN TO_DATE(?, \'dd/mm/yyyy\') AND TO_DATE(?, \'dd/mm/yyyy\') ';
                $args[] = $filters->entryDateBegin;
                $args[] = $filters->entryDateEnd;
            }
            else
            {
                $where .= ' AND S.entryDate >= TO_DATE(?, \'dd/mm/yyyy\') ';
                $args[] = $filters->entryDateBegin;
            }
        }
        
        if ( strlen($filters->removalDateBegin) > 0 )
        {
            if ( $filters->removalDateEnd )
            {
                $where .= ' AND removalDate BETWEEN TO_DATE(?, \'dd/mm/yyyy\') AND TO_DATE(?, \'dd/mm/yyyy\') ';
                $args[] = $filters->removalDateBegin;
                $args[] = $filters->removalDateEnd;
            }
            else
            {
                $where .= ' AND removalDate <= TO_DATE(?, \'dd/mm/yyyy\') ';
                $args[] = $filters->removalDateBegin;
            }
        }
        
        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND S.personId = ? ';
            $args[] = $filters->personId;
        }
        
        if ( strlen($filters->personName) > 0 )
        {
            $where .= ' AND UNACCENT(P.name) ILIKE UNACCENT(?) ';
            $args[] = $filters->personName . '%';
        }
        
        if ( strlen($filters->reasonId) > 0 )
        {
            $where .= ' AND M.reasonId = ? ';
            $args[] = $filters->reasonId;
        }
        
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4);
            $sql .= ' ORDER BY S.personId';
            
            $db = $this->getDatabase();
            
            $result = $db->query(SAGU::prepare($sql, $args));
        }
        
        return $result;
    }

    /**
     * Search people in spc
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function peopleInTheSpc($filters)
    {
        $sql = 'SELECT DISTINCT S.personId,
                               P.name,
                               TO_CHAR(S.entryDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                               TO_CHAR(S.removalDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                          FROM finSPC S
                    INNER JOIN basPerson P
                            ON (S.personId = P.personId)
                         WHERE S.removalDate is null OR S.removalDate >= now()::DATE';
        
        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND S.personId = ? ';
            $args[] = $filters->personId;
        }
        
        if ( strlen($where) > 0 )
        {
            $sql .= ' AND ' . substr($where, 4);
            $sql .= ' ORDER BY P.name';
            
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }
        
        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertSpc($data)
    {
        $sql = 'INSERT INTO finSPC (personId, entryDate, removalDate)
                     VALUES (?,TO_DATE(?, \'dd/mm/yyyy\'),TO_DATE(?, \'dd/mm/yyyy\'))';
        
        $args = array($data->personId, $data->entryDate, $data->removalDate);
        
        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        
        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateSpc($data)
    {
        $sql = 'UPDATE finSPC
                   SET removalDate = TO_DATE(?, \'dd/mm/yyyy\')
                 WHERE personId = ?
                   AND entryDate = TO_DATE(?, \'dd/mm/yyyy\')';
        
        $args = array($data->removalDate, $data->personId, $data->entryDate);
        
        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        
        return $result;
    }

    /**
     * Delete a record
     *
     * @param $id (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteSpc($id)
    {
        
        $sql = 'DELETE FROM finSPCMovement
                      WHERE personId = ?
                        AND entryDate = TO_DATE(?, \'dd/mm/yyyy\')';
        
        $db = $this->getDatabase();
        $ok = $db->execute(SAGU::prepare($sql, $id));
        
        if ( $ok )
        {
            $sql = 'DELETE FROM finSPC
                          WHERE personId = ?
                            AND entryDate = TO_DATE(?, \'dd/mm/yyyy\')';
            
            $db = $this->getDatabase();
            $result = $db->execute(SAGU::prepare($sql, $id));
            
            return $result;
        }
    }
}

?>
