<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finIncentiveType table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 02/12/2005
 *
 **/

/**
 * Class to manipulate the finIncentiveType table
 **/
class BusinessFinanceBusIncentiveType extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listIncentiveType()
    {
        $sql = 'SELECT incentivetypeid,
                       description 
             FROM ONLY finincentivetype 
                       ORDER BY 1';
        
        $result = $this->getDatabase()->query(SAGU::prepare($sql));
        
        return $result;
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $incentiveTypeId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getIncentiveType($incentiveTypeId)
    {
        $sql = 'SELECT A.incentiveTypeId,
                       A.description,
                       A.operationId,
                       B.description,
                       A.needAdjustAuthorization,
                       A.sendInvoices,
                       A.generateCredits,
                       A.isExtinct,
                       A.paymentOperation,
                       A.rePaymentOperation,
                       A.applyDiscounts,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress,
                       A.percentRenovacao,
                       A.aditarIncentivo
             FROM ONLY finIncentiveType A
            INNER JOIN finOperation B
                 USING ( operationId )
                 WHERE A.incentiveTypeId = ?';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $incentiveTypeId));
        

        $incentiveType = new finIncentiveType();

        list ( $incentiveType->incentiveTypeId,
               $incentiveType->description,
               $incentiveType->operationId,
               $incentiveType->operationDescription,
               $incentiveType->needAdjustAuthorization,
               $incentiveType->sendInvoices,
               $incentiveType->generateCredits,
               $incentiveType->isExtinct,
               $incentiveType->paymentOperation,
               $incentiveType->rePaymentOperation,
               $incentiveType->applyDiscounts,
               $incentiveType->userName,
               $incentiveType->dateTime,
               $incentiveType->ipAddress,
               $incentiveType->percentRenovacao,
               $incentiveType->aditarIncentivo ) = $result[0];

        return $incentiveType; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchIncentiveType($filters)
    {
        $sql = 'SELECT A.incentiveTypeId,
                       A.description,
                       A.operationId,
                       B.description,
                       A.needAdjustAuthorization,
                       A.sendInvoices,
                       A.generateCredits,
                       A.isExtinct,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
             FROM ONLY finIncentiveType A
            INNER JOIN finOperation B
                 USING ( operationId ) ';

        if ( strlen($filters->incentiveTypeId) > 0 )
        {
            $where .= ' AND A.incentiveTypeId = ?';
            $args[] = $filters->incentiveTypeId;
        }

        if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND A.description ILIKE ?';
            $args[] = $filters->description . '%';
        }

        if ( strlen($filters->needAdjustAuthorization) > 0 )
        {
            $where .= ' AND A.needAdjustAuthorization = ?';
            $args[] = $filters->needAdjustAuthorization;
        }

        if ( strlen($filters->sendInvoices) > 0 )
        {
            $where .= ' AND A.sendInvoices = ?';
            $args[] = $filters->sendInvoices;
        }

        if ( strlen($filters->generateCredits) > 0 )
        {
            $where .= ' AND A.generateCredits = ?';
            $args[] = $filters->generateCredits;
        }

        if ( strlen($filters->isExtinct) > 0 )
        {
            $where .= ' AND A.isExtinct = ?';
            $args[] = $filters->isExtinct;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY A.description';

            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertIncentiveType($data)
    {   
        $sql = 'SELECT NEXTVAL(\'seq_incentivetypeid\')';
        $ret = $this->getDatabase()->query(SAGU::prepare($sql,null));
        $data->incentiveTypeId = $ret[0][0];

        $sql = 'INSERT INTO finIncentiveType
                            (incentiveTypeId,
                             description,
                             operationId,
                             needAdjustAuthorization,
                             sendInvoices,
                             generateCredits,
                             isExtinct,
                             paymentOperation,
                             repaymentOperation,
                             applyDiscounts,
                             percentRenovacao,
                             aditarIncentivo)
                     VALUES (?,?,?,?,?,?,?,?,?,?,?,?)';

        $args = array( 
                       $data->incentiveTypeId,
                       $data->description,
                       $data->operationId,
                       $data->needAdjustAuthorization,
                       $data->sendInvoices,
                       $data->generateCredits,
                       $data->isExtinct,
                       $data->paymentOperation,
                       $data->rePaymentOperation,
                       $data->applyDiscounts,
                       $data->percentRenovacao,
                       $data->aditarIncentivo
                     );

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        if ( $result && strlen($data->incentiveTypeId)>0 )
        {
            return $data;
        }
        return false;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateIncentiveType($data)
    {
        $sql = 'UPDATE finIncentiveType
                   SET description              = ?,
                       operationId              = ?,
                       needAdjustAuthorization  = ?,
                       sendInvoices             = ?,
                       generateCredits          = ?,
                       isExtinct                = ?,
                       paymentOperation         = ?,
                       rePaymentOperation       = ?,
                       applyDiscounts           = ?,
                       percentRenovacao         = ?,
                       aditarIncentivo          = ?
                 WHERE incentiveTypeId          = ?';

        $args = array( 
                       $data->description,
                       $data->operationId,
                       $data->needAdjustAuthorization,
                       $data->sendInvoices,
                       $data->generateCredits,
                       $data->isExtinct,
                       $data->paymentOperation,
                       $data->rePaymentOperation,
                       $data->applyDiscounts,
                       $data->percentRenovacao,
                       $data->aditarIncentivo,
                       $data->incentiveTypeId
                       
                     );

        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $incentiveTypeId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteIncentiveType($incentiveTypeId)
    {
        $sql = 'DELETE FROM finIncentiveType
                      WHERE incentiveTypeId = ?';

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $incentiveTypeId));

        return $result;
    }

}

?>
