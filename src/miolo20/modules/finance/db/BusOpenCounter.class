<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finOpenCounter table
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * 
 * @since
 * Class created on 26/08/2010
 *
 **/

class BusinessFinanceBusOpenCounter extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listOpenCounter()
    {
        $sql = 'SELECT opencounterid,
                       counterId,
                       operatorid,
                       value,
                       operation,
                       date,
                       observation
                  FROM finOpenCounter   
              ORDER BY (1,2)';
        
        $db = $this->getDatabase();
        $return = $db->query($sql);
        
        return $return;
    }

    /**
     * Return a specific record from the database
     *
     * @param $Id (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getOpenCounter($id)
    {
        $sql = 'SELECT O.opencounterid,
                       O.counterId,
                       C.description,
                       U.description,
                       O.operatorid,
                       P.name,
                       O.value,
                       O.operation,
                       TO_CHAR(O.date,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       O.observation,
                       O.maxBalance,
                       O.userName,
                       TO_CHAR(O.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       O.ipAddress
                  FROM finOpenCounter O
            INNER JOIN finCounter C
                    ON (C.counterId = O.counterId)
            INNER JOIN basUnit U
                    ON (U.unitId = C.unitId)
            INNER JOIN basPhysicalPersonEmployee P
                    ON (P.personId = O.operatorId)             
                 WHERE openCounterId = ?';
        
        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, array($id)));
        
        $openCounter = new FinOpenCounter();
        
        list (  $openCounter->openCounterId, 
                $openCounter->counterId, 
                $openCounter->counterDescription, 
                $openCounter->unitDescription, 
                $openCounter->operatorId, 
                $openCounter->operatorName, 
                $openCounter->value, 
                $openCounter->operation, 
                $openCounter->date, 
                $openCounter->observation,
                $openCounter->maxBalance,
                $openCounter->responsibleUserName,
                $openCounter->dateTime, 
                $openCounter->ipAddress ) = $result[0];

        return $openCounter;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchOpenCounter($filters)
    {
        $sql = 'SELECT O.opencounterid,
                      O.counterId,
                      C.description,
                      O.operatorid,
                      P.name,
                      O.value,
                      O.operation,
                      TO_CHAR(O.date,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),                     
                      O.observation
                 FROM finOpenCounter O
           INNER JOIN finCounter C
                   ON (O.counterId = C.counterId)
      INNER JOIN ONLY basphysicalpersonemployee P
                   ON (O.operatorid = P.personId)';
        
        if ( strlen($filters->responsibleUserName) > 0 && (strlen($filters->listAllS) <= 0 || $filters->listAllS == SAGU::getParameter('BASIC', 'DB_FALSE')) )
        {
            $where .= ' AND O.userName = lower(?) ';
            $args[] = $filters->responsibleUserName;
        }
        
        if ( strlen($filters->open) > 0 )
        {
            $where .= ' AND O.opencounterid NOT IN (SELECT D.opencounterid FROM finclosecounter D ) ';
        }
        
        if ( strlen($filters->notConfirmed) > 0 )
        {
            $where .= ' AND O.opencounterid NOT IN (SELECT D.opencounterid FROM finclosecounter D WHERE D.isconfirmed = \'t\' ) ';
        }
        
        if ( strlen($filters->openCounterId) > 0 )
        {
            $where .= ' AND O.opencounterid = ? ';
            $args[] = $filters->openCounterId;
        }
        
        if ( strlen($filters->counterId) > 0 )
        {
            $where .= ' AND O.counterid = ? ';
            $args[] = $filters->counterId;
        }
        
        if ( strlen($filters->operatorId) > 0 )
        {
            $where .= ' AND O.operatorid = ? ';
            $args[] = $filters->operatorId;
        }
        
        if ( strlen($filters->operatorName) > 0 )
        {
            $where .= ' AND UNACCENT(P.name) ILIKE UNACCENT(?) ';
            $args[] = $filters->operatorName . '%';
        }
        
        if ( strlen($filters->value) > 0 )
        {
            $where .= ' AND O.value = ? ';
            $args[] = $filters->value;
        }
        
        if ( strlen($filters->operation) > 0 )
        {
            $where .= ' AND O.operation = ? ';
            $args[] = $filters->operation;
        }
        
        if ( strlen($filters->date) > 0 )
        {
            $where .= ' AND O.date::date =  TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $args[] = $filters->date;
        }
        
        if ( strlen($filters->observation) > 0 )
        {
            $where .= ' AND UNACCENT(O.observation) ILIKE UNACCENT(?) ';
            $args[] = $filters->observation . '%';
        }
        
        if ( $filters->counterStatusS == 'C' )
        {
            $where .= ' AND EXISTS (SELECT X.openCounterId FROM finCloseCounter X WHERE X.openCounterId = O.openCounterId) ';
        }
        elseif ( $filters->counterStatusS == 'O' )
        {
            $where .= ' AND NOT EXISTS (SELECT X.openCounterId FROM finCloseCounter X WHERE X.openCounterId = O.openCounterId) ';
        }
        
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4);
            $sql .= ' ORDER BY O.opencounterid';
            
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }
        
        return $result;
    }

    /**
     * valid a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function validFormOpenCounter($data)
    {
        $MIOLO = MIOLO::getInstance();
        $db = $this->getDatabase();
        
        $sql = 'SELECT * FROM finOpenCounter A
                 WHERE A.openCounterId 
                NOT IN (SELECT B.openCounterId FROM finCloseCounter B
            INNER JOIN finOpenCounter C
                    ON (B.openCounterId = C.openCounterId ))                     
                   AND (A.operatorId = ? OR A.counterId = ?)';
        
        $args = array($data->operatorId, $data->counterId);
        
        $result = $db->query(SAGU::prepare($sql, $args));
        
        $return = true;
        if ( count($result) > 0 )
        {
            $return = false;
        }
        
        return $return;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertOpenCounter($data)
    {
        $sql = 'INSERT INTO finOpenCounter 
                            (counterId,
                             operatorid,
                             value,
                             operation,
                             date,
                             observation,
                             maxBalance)
                     VALUES (?,?,?,?,now(),?,?)';
        
        $args = array($data->counterId, $data->operatorId, $data->value, $data->operation, $data->observation, $data->maxBalance);
        
        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        
        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateOpenCounter($data)
    {
        $sql = 'UPDATE finOpenCounter
                   SET counterid = ?,
                       operatorid = ?,
                       value = ?,
                       operation = ?,
                       observation = ?,
                       maxBalance = ?
                 WHERE openCounterId = ?';
        
        $args = array($data->counterId, $data->operatorId, $data->value, $data->operation, $data->observation, $data->maxBalance, $data->openCounterId);
        
        $db = $this->getDatabase();
        
        $result = $db->execute(SAGU::prepare($sql, $args));
        
        return $result;
    }

    /**
     * Delete a record
     *
     * @param $id (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteOpenCounter($id)
    {
        $sql = 'DELETE FROM finOpenCounter
                      WHERE openCounterId = ?';
        
        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $id));
        
        return $result;
    }
    
    /**
     * @return FinOpenCounter
     */
    public function getCurrentOpenCounter($operatorId = null)
    {
        $filters = new stdClass();
        $filters->operatorId = $operatorId;
        $filters->open = DB_TRUE;

        $rows = $this->searchOpenCounter($filters);
        
        if ( strlen($rows[0][0]) > 0 )
        {
            return $this->getOpenCounter($rows[0][0]);
        }
        
        return null;
    }
    
    /**
     * @return FinOpenCounter
     */
    public function getCurrentOpenCounterLogged()
    {
        $operatorId = SAGU::getUsuarioLogado()->personId;
        return $this->getCurrentOpenCounter($operatorId);
    }
}

?>

