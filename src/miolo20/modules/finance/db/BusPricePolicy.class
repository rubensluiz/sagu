<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * This class contains methods to get, search, list, insert,
 * update and delete register into acdCourseOccurrence table.
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Equipe Sagu [sagu2@solis.coop.br]
 *
 * @since
 * This class was created 2011/01/12
 */
class BusinessFinanceBusPricePolicy extends sBusiness
{
    private $columns;
    private $sql;

    /**
     * Class constructor
     */
    public function __construct()
    {
        //Columns
        $this->columns = $this->getTableColumns();
        //Sql
        $this->sql = $this->getSql();

        parent::__construct();
    }

    /**
     * Get table columns
     * @return (array): table columns
     */
    function getTableColumns()
    {
        $arrayColumns[] = 'pricePolicyId';
        $arrayColumns[] = 'startDate';
        $arrayColumns[] = 'courseId';
        $arrayColumns[] = 'courseVersion';
        $arrayColumns[] = 'turnId';
        $arrayColumns[] = 'unitId';
        $arrayColumns[] = 'policyId';
        $arrayColumns[] = 'policyDescription';
        $arrayColumns[] = 'parcelNumber';
        $arrayColumns[] = 'semester';
        $arrayColumns[] = 'userName';
        $arrayColumns[] = 'dateTime';
        $arrayColumns[] = 'ipAddress';

        return $arrayColumns;
    }

    /**
     * Get sql
     * @return (string): sql
     */
    function getSql()
    {
        $sql = "SELECT A.pricePolicyId,
                       TO_CHAR(A.startdate,'" . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . "'),
                       A.courseId,
                       A.courseVersion,
                       A.turnId,
                       A.unitId,
                       A.policyId,
                       (SELECT B.description FROM finpolicy B WHERE B.policyId = A.policyId) AS policyDescription,
                       A.parcelNumber,
                       A.semester,
                       A.userName,
                       TO_CHAR(A.dateTime,'" . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . "'),
                       A.ipAddress
                  FROM finPricePolicy A ";

        return $sql;
    }

    /**
     * Return a specific record from the database
     * @param $pricePolicyId (integer): Primary key of the record to be retrieved
     * @return (object): Return an object of the type handled by the class
     */
    public function getPricePolicy($pricePolicyId)
    {
        $sql = $this->sql;
        $sql.= 'WHERE A.pricePolicyId = ?';

        $db = $this->getDatabase();
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $pricePolicyId));

        return SAGU::resultToObject($result[0], $this->columns, new FinPricePolicy());
    }

    /**
     * Do a search on the database table handled by the class
     * @param $filters (object): Search filters
     * @return (array): An array containing the search results
     */
    public function searchPricePolicy($data=null, $returnAsObject = false)
    {
        $sql = $this->sql;
        $where = '';
        unset($args);
        if ( strlen($data->pricePolicyId) > 0 )
        {
            $where .= ' AND A.pricePolicyId = ? ';
            $args[] = $data->pricePolicyId;
        }
        if ( strlen($data->policyId) > 0 )
        {
            $where .= ' AND A.policyId = ? ';
            $args[] = $data->policyId;
        }
        if ( strlen($data->courseId) > 0 )
        {
            $where .= ' AND A.courseId = ?';
            $args[] = $data->courseId;
        }
        if ( strlen($data->courseVersion) > 0 )
        {
            $where .= ' AND A.courseVersion = ? ';
            $args[] = $data->courseVersion;
        }
        if ( strlen($data->turnId) > 0 )
        {
            $where .= ' AND A.turnId = ? ';
            $args[] = $data->turnId;
        }
        if ( strlen($data->unitId) > 0 )
        {
            $where .= ' AND A.unitId = ? ';
            $args[] = $data->unitId;
        }
        if ( strlen($data->startDate) > 0 )
        {
            $where .= ' AND A.startDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $args[] = $data->startDate;
        }
        if ( strlen($data->semester) > 0 )
        {
            $where .= ' AND A.semester = ? ';
            $args[] = $data->semester;
        }
        if ( strlen($data->parcelNumber) > 0 )
        {
            $where .= ' AND A.parcelNumber = ? ';
            $args[] = $data->parcelNumber;
        }

        if ( strlen($where) > 0 )
        {
            $sql.= ' WHERE ' . substr($where, 4) . ' ORDER BY 1';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));

            if ( is_array($result) )
            {
                $result = $returnAsObject ? SAGU::resultToObject($result, $this->columns) : $result;
            }
        }
        return $result;
    }

    /**
     * Insert a new record
     * @param $data (object): An object of the type handled by the class
     * @return True if succed, otherwise False
     */
    public function insertPricePolicy($data)
    {
        $db = $this->getDatabase();

        $sql = 'INSERT INTO finPricePolicy(startDate,
                                           courseId,
                                           courseVersion,
                                           turnId,
                                           unitId,
                                           policyId,
                                           parcelNumber,
                                           semester)
                     VALUES (TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'), ?, ?, ?, ?, ?, ?, ?)';

        $params = array(
            $data->startDate,
            $data->courseId,
            $data->courseVersion,
            $data->turnId,
            $data->unitId,
            $data->policyId,
            $data->parcelNumber,
            $data->semester
        );

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $params));

        return $result;
    }

    /**
     * Update data from a specific record
     * @param $data (object): Data which will replace the old record data
     * @return (boolean): True if succeed, otherwise False
     */
    public function updatePricePolicy($data)
    {
        $sql = 'UPDATE finPricePolicy
                   SET startDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       courseId = ?,
                       courseVersion = ?,
                       turnId = ?,
                       unitId = ?,
                       policyId = ?,
                       parcelNumber = ?,
                       semester=?
                 WHERE pricePolicyId = ?';

        $params = array(
            $data->startDate,
            $data->courseId,
            $data->courseVersion,
            $data->turnId,
            $data->unitId,
            $data->policyId,
            $data->parcelNumber,
            $data->semester,
            $data->pricePolicyId
        );

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $params));

        return $result;
    }

    /**
     * Delete a record
     * @param $pricePolicyId (string): Primary key for deletion
     * @return (boolean): True if succeed, otherwise False
     */
    public function deletePricePolicy($pricePolicyId)
    {
        $sql = 'DELETE FROM finPricePolicy
                      WHERE pricePolicyId = ?';

        $args = array($pricePolicyId);
        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Do a search on the database table searching for a policy matching the filters
     * @param $data (object): Search filters
     * @return (array): An array containing the search results
     */
    public function getSpecificPricePolicy($data=null)
    {
        $sql = $this->sql;
        $where = '';
        unset($args);

        $where .= ' AND A.courseId = ?';
        $args[] = $data->courseId;

        $where .= ' AND A.courseVersion = ? ';
        $args[] = $data->courseVersion;

        $where .= ' AND A.turnId = ? ';
        $args[] = $data->turnId;

        $where .= ' AND A.unitId = ? ';
        $args[] = $data->unitId;

        $where .= ' AND A.startDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
        $args[] = $data->startDate;

        if ( strlen($data->semester) > 0 )
        {
            $where .= ' AND A.semester = ? ';
            $args[] = $data->semester;
        }
        else
        {
            $where .= ' AND A.semester IS NULL ';
        }
        if ( strlen($data->parcelNumber) > 0 )
        {
            $where .= ' AND A.parcelNumber = ? ';
            $args[] = $data->parcelNumber;
        }
        else
        {
            $where .= ' AND A.parcelNumber IS NULL ';
        }

        if ( strlen($where) > 0 )
        {
            $sql.= ' WHERE ' . substr($where, 4) . ' LIMIT 1';

            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }
}
?>
