<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finBank table
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 22/12/2005
 *
 **/

$MIOLO  = MIOLO::getInstance();
$MIOLO->uses('db/BusInvoiceTarget.class', 'finance');

/**
 * Class to manipulate the Bank table
 **/
class BusinessFinanceBusBankTarget extends BusinessFinanceBusInvoiceTarget
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listBankTarget()
    {
    }


    /**
     * Return a specific record from the database
     *
     * @param $paymentPlaceId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getBankTarget($contractId)
    {
        $sql = 'SELECT A.contractId,
                       A.bankId,
                       A.branchNumber,
                       A.branchNumberDigit,
                       A.accountNumber,
                       A.accountNumberDigit,
                       A.isActive,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipAddress
                  FROM finBankTarget A
                 WHERE A.contractId = ?';

        $db     = $this->getDatabase();

        $pk = array($contractId);
        $result = $db->query(SAGU::prepare($sql, $pk));

        $bankTarget = new finBankTarget();

        list ( $bankTarget->contractId,
               $bankTarget->bankId,
               $bankTarget->branchNumber,
               $bankTarget->branchNumberDigit,
               $bankTarget->accountNumber,
               $bankTarget->accountNumberDigit,
               $bankTarget->isActive,
               $bankTarget->userName,
               $bankTarget->dateTime,
               $bankTarget->ipAddress ) = $result[0];

        return $bankTarget;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchBankTarget($filters)
    {
        $sql = 'SELECT A.contractId,
                       A.bankId,
                       G.description,
                       CASE
                            WHEN A.branchNumber
                            is NULL THEN \' \'
                            ELSE A.branchNumber
                            END
                            ||\' - \'||
                       CASE
                            WHEN A.branchNumberDigit
                            is NULL  THEN \' \'
                            ELSE A.branchNumberDigit
                            END,
                        CASE
                            WHEN A.accountNumber
                            IS NULL THEN \' \'
                            ELSE A.accountNumber
                            END
                            ||\' - \'||
                       CASE
                            WHEN A.accountNumberDigit
                            IS NULL THEN \' \'
                            ELSE A.accountNumberDigit
                            END,
                       B.personId,
                       C.name as personName,
                       B.courseId,
                       D.name as courseName,
                       B.courseVersion,
                       B.turnId,
                       E.description as turnDescription,
                       B.unitId,
                       F.description as unitDescription,
                       A.isActive
                  FROM finBankTarget A
             LEFT JOIN acdContract  B
                    ON ( A.contractId = B.contractId)
        LEFT JOIN ONLY basPhysicalPerson C
                    ON ( B.personId = C.personId )
             LEFT JOIN acdCourse D
                    ON ( B.courseId = D.courseId )
             LEFT JOIN basTurn E
                    ON ( B.turnId = E.turnId )
             LEFT JOIN basUnit F
                    ON ( B.unitId = F.unitId )
             LEFT JOIN finBank G
                    ON ( A.bankId = G.bankId)';

        if ( strlen($filters->contractId) > 0 )
        {
            $where .= ' AND A.contractId = ?';
            $args[] = $filters->contractId;
        }
        if ( strlen($filters->bankId) > 0 )
        {
            $where .= ' AND A.bankId ILIKE ?';
            $args[] = $filters->bankId.'%';
        }
        if ( strlen($filters->bankName) > 0 )
        {
            $where .= ' AND G.description ILIKE ?';
            $args[] = $filters->bankName.'%';
        }

        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND B.personId = ? ';
            $args[] = $filters->personId;
        }

        if ( strlen($filters->personName)>0)
        {
            $where .= ' AND C.name ILIKE ? ';
            $args[] = $filters->personName. '%';
        }
        if ( strlen($filters->branchNumber) > 0 )
        {
            $where .= ' AND   A.branchNumber ILIKE ?';
            $args[] = $filters->branchNumber.'%';
        }
        if ( strlen($filters->branchNumberDigit) > 0 )
        {
            $where .= ' AND   A.branchNumberDigit ILIKE ?';
            $args[] = $filters->branchNumberDigit.'%';
        }
        if ( strlen($filters->accountNumber) > 0 )
        {
            $where .= ' AND   A.accountNumber ILIKE ?';
            $args[] = $filters->accountNumber.'%';
        }
        if ( strlen($filters->accountNumberDigit) > 0 )
        {
            $where .= ' AND   A.accountNumberDigit ILIKE ?';
            $args[] = $filters->accountNumberDigit.'%';
        }
        if ( strlen($filters->isActive) > 0 )
        {
            $where .= ' AND   A.isActive = ?';
            $args[] = $filters->isActive;
        }


        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY A.bankId, 
                            A.contractId ' ;

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertBankTarget($data)
    {

        $invoiceId = $this->insertInvoiceTarget($data); 

 
        $sql = 'INSERT INTO finBankTarget
                            (contractId,
                             bankId,
                             branchNumber,
                             branchNumberDigit,
                             accountNumber,
                             accountNumberDigit,
                             isActive)
                     VALUES (?,?,?,?,?,?,?)';

        $db     = $this->getDatabase();

        $args = array($data->contractId,
                      $data->bankId,
                      $data->branchNumber,
                      $data->branchNumberDigit,
                      $data->accountNumber,
                      $data->accountNumberDigit,  
                      $data->isActive);

        $result = $db->execute(SAGU::prepare($sql, $args));
        

        return $result;

    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateBankTarget($data)
    {
        $sql = 'UPDATE finBankTarget
                   SET bankId        = ?,
                       branchNumber  = ?,
                       branchNumberDigit   = ?,
                       accountNumber = ?,
                       accountNumberDigit = ?,
                       isActive = ?
                 WHERE contractId    = ?';

        $args = array( $data->bankId,
                       $data->branchNumber,
                       $data->branchNumberDigit,
                       $data->accountNumber,
                       $data->accountNumberDigit,
                       $data->isActive,
                       $data->contractId);


        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $bankId(string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteBankTarget($pk)
    {
        $sql = 'DELETE FROM finBankTarget
                      WHERE contractId  = ?';

        $db     = $this->getDatabase();
        
        $result = $db->execute(SAGU::prepare($sql, $pk));
        

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $bankId(string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function listOpenBankTarget($data)
    {
        $sql = '     SELECT B.personId,
                            A.branchNumber,
                            A.branchNumberDigit,
                            A.accountNumber,
                            A.accountNumberDigit,
                            A.maturityDate,
                            A.balance(id),
                            
                       FROM finBankTarget A
                 INNER JOIN acdContract B
                      USING (contractId)
                 INNER JOIN finReceivableInvoice C
                      USING (personId)
                      WHERE A.bankId = ?
                        AND C.maturityDate
                    BETWEEN TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                        AND TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') ';

        $db = $this->getDatabase();

        $args = array( $data->bankId,
                       $data->initialMaturityDate,
                       $data->finalMaturityDate
                     );

        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }

    public function hasBankTarget($contractId)
    {
        $sql = ' SELECT isActive 
                   FROM finBankTarget
                  WHERE contractId = ? ';

        $db   = $this->getDatabase();
        $args = array($contractId);

        $ret  = $db->query(SAGU::prepare($sql, $args));
        return $ret[0][0] ? $ret[0][0] : DB_FALSE;
    }

}
?>
