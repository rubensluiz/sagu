<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finInvoice table
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @since
 * Class created on 13/12/2005
 *
 **/

/**
 * Class to manipulate the Invoice table
 **/
class BusinessFinanceBusPrintInvoice extends sBusiness
{
    private $hasSet = false;

     /**
     * get Number e generate a next number
     *
     * @param: $data: string to break and analyze
     *
     * @return (integer) $numberBankInvoiceId - a value 
     *
     * @author  Eduardo Beal Miglioransa [eduardo@solis.coop.br]
     */

    public function getNumberBankInvoiceId($data=null)
    {

        $MIOLO  = MIOLO::getInstance();
        $module = 'finance'; //Esta finance por extenso devido a chamadas do módulo processo seletivo

        if ( $this->hasSet == true )
        {
            $sql = ' SELECT value 
                       FROM basConfig
                      WHERE moduleConfig=\'BASIC\'
                        AND parameter = \'BANK_INVOICE_ID_748\'';
            $res = $this->getDatabase()->query($sql);             
            $numberBankInvoiceId = $res[0][0];
            $numberBankInvoiceId++;
        }
        else
        {    
            $numberBankInvoiceId = SAGU::getParameter('BASIC', 'BANK_INVOICE_ID_748');
            $numberBankInvoiceId = $numberBankInvoiceId++;
        }
        $numberBankInvoiceId = substr($numberBankInvoiceId, -5);
        $numberBankInvoiceId = str_pad($numberBankInvoiceId, 5, "0", STR_PAD_LEFT);
        
        $sql = 'UPDATE basConfig SET value = ?
                WHERE moduleconfig = \'BASIC\'
                AND parameter = \'BANK_INVOICE_ID_748\' ';

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $numberBankInvoiceId));
        $this->hasSet = true;

        return $numberBankInvoiceId;
     }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listInvoice()
    {
    }

    /**
     * Return a specific record from the database
     *
     * @param $invoiceId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getPrintInvoice($invoiceId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = 'finance'; //Esta finance por extenso devido a chamadas do módulo processo seletivo

        $sql = ' SELECT A.bankInvoiceId,
                        B.name,
                        B.personid,
                        D.name || \' \' || B.location || \' \' || CASE WHEN LENGTH(COALESCE(B.number, \'\'))>0 THEN COALESCE(B.number, \'\') ELSE \'\' END,
                        B.complement,
                        C.name,
                        B.zipCode,
                        C.stateId,
                        round(balance(A.invoiceId), 2),
                        to_char(A.maturityDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') .'\'),
                        to_char(A.emissionDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') .'\'),
                        E.daysToFine,
                        E.finePercent,
                        E.daysToInterest,
                        E.monthlyInterestPercent,
                        E.discountPercent,
                        A.bankAccountId
              FROM ONLY finInvoice A
        INNER JOIN ONLY basPerson B 
                     ON ( A.personId = B.personId )
        INNER JOIN ONLY basCity C
                     ON ( B.cityId = C.cityId )
             INNER JOIN basLocationType D
                     ON ( B.locationTypeId = D.locationTypeId )  
             INNER JOIN finPolicy E
                     ON ( A.policyId = E.policyId )
                  WHERE B.personId      = A.personId 
                    AND C.cityId        = B.cityId 
                    AND E.policyId      = A.policyId
                    AND A.iscanceled    = FALSE
                    AND A.invoiceIdDependence IS NULL
                    AND invoiceId       = ?';
                    

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $invoiceId));

        list ( $data->bankInvoiceId,
               $data->name,
               $data->personId,
               $data->location,
               $data->complement,
               $data->city,
               $data->cep,
               $data->state,
               $data->invoiceValue,
               $data->maturityDate,
               $data->emissionDate,
               $data->daysToFine,
               $data->finePercent,
               $data->daysToInterest,
               $data->monthlyInterestPercent,
               $data->discountPercent,
               $data->bankAccountId ) = $result[0];

        $business = new BusinessFinanceBusBankAccount();
        $bankAccount = $business->getBankAccount($data->bankAccountId);

        $data->description = $bankAccount->description;
        $data->bankId = $bankAccount->bankId;
        $data->branchNumber = $bankAccount->branchNumber;
        $data->branchNumberDigit = $bankAccount->branchNumberDigit;
        $data->accountNumber = $bankAccount->accountNumber;
        $data->accountNumberDigit = $bankAccount->accountNumberDigit;
        $data->transferorCode = $bankAccount->transferorCode;

        return $data;
    }

    /**
     * Return a Factor maturity date of maturity date
     *
     * @param $maturityDate (data): 
     *
     * @return (integer): Return a number factor
     *
     **/
    public function factorMaturityDate($maturityDate)
    {
        $sql = 'SELECT to_date(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')- to_date(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
    
        $beginDate = '07/10/1997';
        $result = $this->getDatabase()->query(SAGU::prepare($sql, array($maturityDate, $beginDate ) ) );
       
 
        return $result[0][0]; 
    
    }

    /**
     * Return a Messages to invoice
     *
     * @param $bankId (integer): Primary Key of Bank
     * @param $invoiceId (integer): Primary Key of invoice
     *
     * @return (object): Result consult messages
     *
     **/
    public function getMessageInvoice($bankId, $invoiceId, $specialCollectionType = null)
    {
        if (strlen($specialCollectionType)>0)
        {
            $sql = 'SELECT A.messageText
                      FROM finMessage A
                     WHERE bankId = ?
                       AND collectionTypeId = ? ';
            $result = $this->getDatabase()->query(SAGU::prepare($sql, array($bankId, $specialCollectionType)));
        }
        else
        {
            $sql = 'SELECT A.messageText 
                      FROM finMessage A, 
                           finCollectionType B,
                           finPolicy C,
                           ONLY finreceivableInvoice D 
                     WHERE A.collectionTypeId = B.collectionTypeId
                       AND B.collectionTypeId = C.collectionTypeId 
                       AND C.policyId = D.policyId 
                       AND A.bankId = ? 
                       AND D.invoiceId = ? 
                  ORDER BY messageorder ';
            $result = $this->getDatabase()->query(SAGU::prepare($sql, array($bankId, $invoiceId) ) );
        }
        return $result;
        
    }


    /**
     * Calc for finance modules 
     *
     * @param $filters (object): Calc 
     *
     * @return (value): 
     **/

    public function calcPercent($value, $percent)
    {
        // Calculo com arrendondamento. 
        $sqlCalc       = ' SELECT  round ( ( '. $value .' * '. $percent .' ) / 100 , 2) ';
        $resultCalc    = $this->getDatabase()->Query( $sqlCalc );
        $discountValue = $resultCalc[0][0];
        return $discountValue;
    }   

     /**
     * Calc for finance modules
     *
     * @param $filters (object): Calc
     *
     * @return (value):
     **/

    public function calcMora($value, $percent)
    {
        // Calculo com arrendondamento.
        $sqlCalc       = ' SELECT  round ( ( '. $value .' / 30 * '. $percent .' ) / 100 , 2) ';
        $resultCalc    = $this->getDatabase()->Query( $sqlCalc );
        $discountValue = $resultCalc[0][0];
        return $discountValue;
    }
    
     /**
     * Execute COMMIT or ROLLBACK 
     *
     * @param $keepGoing : true or false
     *
     * @return (true or false)
     **/

    public function executeCommitSql($keepGoing)
    {
        if ($keepGoing == true)
        {
            $this->getDatabase()->execute('COMMIT');
        }
        else
        {
            $this->getDatabase()->execute('ROLLBACK');
        }
        return $keepGoing;
    }

    public function executeBeginSql($keepGoing)
    {
        $this->getDatabase()->execute('BEGIN TRANSACTION');
        return $keepGoing;
    }   
}
?>
