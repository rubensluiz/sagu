<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finPayableInvoice table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * 
 * @since
 * Class created on 14/12/2005
 *
 **/

$MIOLO  = MIOLO::getInstance();
$MIOLO->uses('db/BusInvoice.class', 'finance');

/**
 * Class to manipulate the finPayableInvoice table
 **/
class BusinessFinanceBusPayableInvoice extends BusinessFinanceBusInvoice
{
    /**
     * Class constructor to instantiate a new database connection. This makes possible to use transactions
     **/
    function BusinessFinanceBusPayableInvoice()
    {
        parent::__construct();
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listPayableInvoice()
    {
    }

    /**
     * Return a specific record from the database
     *
     * @param $invoiceId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getPayableInvoice($invoiceId)
    {
        $payableInvoice = $this->getInvoice($invoiceId);
        $maskDate = SAGU::getParameter('BASIC', 'MASK_DATE');

        $sql = "SELECT TO_CHAR(A.receiveDate,'{$maskDate}') AS receiveDate,
                   A.description,
                   A.documentNumber,
                   A.statusId
              FROM finPayableInvoice A
             WHERE A.invoiceId = ?";
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $invoiceId));

        list ( $payableInvoice->receiveDate,
                  $payableInvoice->description,
                  $payableInvoice->documentNumber,
                  $payableInvoice->statusId) = $result[0];

        return $payableInvoice; 
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchPayableInvoice($data)
    {
        $maskDate = SAGU::getParameter('BASIC', 'MASK_DATE');
        $maskRound = SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE');

        if ( strlen($data->invoiceId) > 0 )
        {
            $args['A.invoiceId = ?'] = $data->invoiceId;
        }
        if ( strlen($data->personId) > 0 )
        {
            $args['A.personId = ?'] = $data->personId;
        }
        if ( strlen($data->costCenterId) > 0 )
        {
            $args['A.costCenterId = ?'] = $data->costCenterId;
        }
        if ( strlen($data->parcelNumber) > 0 )
        {
            $args['A.parcelNumber = ?'] = $data->parcelNumber;
        }
        if ( strlen($data->emissionDate) > 0 )
        {
            $args["A.emissionDate = TO_DATE(?, '{$maskDate}')"] = $data->emissionDate;
        }
        if ( strlen($data->maturityDate) > 0 )
        {
            $args["A.maturityDate = TO_DATE(?,'{$maskDate}')"] = $data->maturityDate;
        }
        if ( strlen($data->value) > 0 )
        {
            $args['A.value = ?'] = $data->value;
        }
        if ( strlen($data->comments) > 0 )
        {
            $args['A.comments ILIKE ?'] = $data->comments;
        }
        if ( strlen($data->receiveDate) > 0 )
        {
            $args["A.receiveDate = TO_DATE(?,'{$maskDate}')"] = $data->receiveDate;
        }
        if (  strlen($data->description) > 0 )
        {
            $args['A.description ILIKE ?'] = $data->description;
        }
        if (  strlen($data->statusId) > 0 )
        {
            $args['A.statusId LIKE ?'] = $data->statusId;
        }

        if ( count($args) > 0 )
        {
            $sql =     "SELECT A.invoiceId,
                        A.personId,
                        B.name,
                        A.description,
                        A.parcelNumber,
                        TO_CHAR(A.receiveDate,'{$maskDate}'),
                        TO_CHAR(A.emissionDate,'{$maskDate}'),
                        TO_CHAR(A.maturityDate,'{$maskDate}'),
                        ROUND(A.value, '{$maskRound}'),
                        A.costCenterId,
                        A.statusId,
                        C.description
                   FROM finPayableInvoice A
             INNER JOIN ONLY basperson B
                     ON (B.personId = A.personId)
             INNER JOIN finPayableInvoiceStatus C
                     ON (C.status = A.statusId)
                  WHERE " . implode(' AND ', array_keys($args)) .
                      "ORDER BY A.maturityDate";

            $result = $this->getDatabase()->query(SAGU::prepare($sql, array_values($args)));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return The new generated invoice id if succed, otherwise FALSE
     *
     **/
    public function insertPayableInvoice($data)
    {
        
        $invoiceId = $this->insertInvoice($data);

        if ( $invoiceId !== false )
        {
            $field[] = 'invoiceId';
            $prepareValue[] = '?';
            $dataValue[] = $invoiceId;

            $field[] = 'personId';
            $prepareValue[] = '?';
            $dataValue[] = $data->personId;

            $field[] = 'referenceMaturityDate';
            $prepareValue[] = 'TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';;
            $dataValue[] = $data->referenceMaturityDate;

            $field[] = 'accountSchemeId';
            $prepareValue[] = '?';
            $dataValue[] = $data->accountSchemeId;

            $field[] = 'costCenterId';
            $prepareValue[] = '?';
            $dataValue[] = $data->costCenterId;

            $field[] = 'parcelNumber';
            $prepareValue[] = '?';
            $dataValue[] = $data->parcelNumber;

            $field[] = 'emissionDate';
            if ( is_null($data->emissionDate) )
            {
                $prepareValue[] = 'now()';
            }
            else
            {
                $prepareValue[] = 'TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
                $dataValue[] = $data->emissionDate;
            }

            $field[] = 'maturityDate';
            $prepareValue[] = 'TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $dataValue[] = $data->maturityDate;

            $field[] = 'value';
            $prepareValue[] = '?';
            $dataValue[] = $data->value;

            $field[] = 'policyId';
            $prepareValue[] = '?';
            $dataValue[] = $data->policyId;

            $field[] = 'bankInvoiceId';
            $prepareValue[] = '?';
            $dataValue[] = $data->bankInvoiceId;

            $field[] = 'automaticDebit';
            $prepareValue[] = '?';
            $dataValue[] = $data->automaticDebit;

            $field[] = 'comments';
            $prepareValue[] = '?';
            $dataValue[] = $data->comments;

            $field[] = 'incomeSourceId';
            $prepareValue[] = '?';
            $dataValue[] = $data->incomeSourceId;

            $field[] = 'bankAccountId';
            $prepareValue[] = '?';
            $dataValue[] = $data->bankAccountId;

            $field[] = 'sagu1InvoiceId';
            $prepareValue[] = '?';
            $dataValue[] = $data->sagu1InvoiceId;

            $field[] = 'receiveDate';
            $prepareValue[] = 'TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $dataValue[] = $data->receiveDate;

            $field[] = 'description';
            $prepareValue[] = '?';
            $dataValue[] = $data->description;

            $field[] = 'documentNumber';
            $prepareValue[] = '?';
            $dataValue[] = $data->documentNumber;

            $field[] = 'statusId';
            $prepareValue[] = '?';
            $dataValue[] = $data->statusId;

            $columns = implode(',', $field);
            $values = implode(',', $prepareValue);
            $sql = "INSERT INTO finPayableInvoice ({$columns}) VALUES ({$values})";
            if ( ! $this->getDatabase()->execute(SAGU::prepare($sql, $dataValue)) )
            {
                $invoiceId = false;
            }
        }

        return $invoiceId;

    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updatePayableInvoice($data)
    {
        $maskDate = SAGU::getParameter('BASIC', 'MASK_DATE');

        $this->updateInvoice($data);

        $sql = "UPDATE finPayableInvoice
                   SET personId        = ?,
                       accountSchemeId = ?,
                       costCenterId    = ?,
                       parcelNumber    = ?,
                       emissionDate    = TO_DATE(?,'{$maskDate}'),
                       maturityDate    = TO_DATE(?,'{$maskDate}'),
                       value           = ?,
                       policyId        = ?,
                       bankInvoiceId   = ?,
                       automaticDebit  = ?,
                       comments        = ?,
                       incomeSourceId  = ?,
                       bankAccountId   = ?,
                       sagu1InvoiceId  = ?,
                       receiveDate     = TO_DATE(?,'{$maskDate}'),
                       description     = ?,
                       documentNumber  = ?,
                       statusId        = ?
                 WHERE invoiceId = ?";

        $args[] = $data->personId;
        $args[] = $data->accountSchemeId;
        $args[] = $data->costCenterId;
        $args[] = $data->parcelNumber;
        $args[] = $data->emissionDate;
        $args[] = $data->maturityDate;
        $args[] = $data->value;
        $args[] = $data->policyId;
        $args[] = $data->bankInvoiceId;
        $args[] = $data->automaticDebit;
        $args[] = $data->comments;
        $args[] = $data->incomeSourceId;
        $args[] = $data->bankAccountId;
        $args[] = $data->sagu1InvoiceId;
        $args[] = $data->receiveDate;
        $args[] = $data->description;
        $args[] = $data->documentNumber;
        $args[] = $data->statusId;
        $args[] = $data->invoiceId;

        $sqls = SAGU::prepare($sql, $args);
        for ( $i=0; $i<count($sqls); $i++ )
        {
            $retVal = $this->getDatabase()->execute($sqls[$i]);
        }

        return $retVal;
    }

    /**
     * Delete a record
     *
     * @param $invoiceId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deletePayableInvoice($invoiceId)
    {
        $this->deleteInvoice($invoiceId);

        $sql = 'DELETE FROM finPayableInvoice
                      WHERE invoiceId = ?';

        $retVal = $this->getDatabase()->execute(SAGU::prepare($sql, $invoiceId));

        return $retVal;
    }

}

?>
