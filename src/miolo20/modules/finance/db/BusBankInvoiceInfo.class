<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for finbankInvoiceInfo table
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 *
 * @since
 * Class created on 29/08/2005
 *
 **/

/**
 * Class to manipulate the finBusBankInvoiceInfo table
 **/
class BusinessFinanceBusBankInvoiceInfo extends sBusiness
{
    /**
     * Return a specific record from the database
     *
     * @param $bankAccountId (integer): Primary key of the record to be retrieved
     * @param $invoiceId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getBankInvoiceInfo($bankAccountId, $invoiceId)
    {

        $sql = 'SELECT invoiceId,
                       bankAccountId,
                       ournumber,
                       barCodeNumber,
                       digitableNumber,
                       userName,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipAddress
                  FROM finBankInvoiceInfo
                 WHERE bankAccountId = ?
                   AND invoiceId = ?';

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, array($bankAccountId, $invoiceId)));


        $bankInvoiceInfo = new FinBankInvoiceInfo();
        list ( $bankInvoiceInfo->invoiceId,
               $bankInvoiceInfo->bankAccountId,
               $bankInvoiceInfo->ourNumber,
               $bankInvoiceInfo->barCodeNumber,
               $bankInvoiceInfo->digitableNumber,
               $bankInvoiceInfo->userName,
               $bankInvoiceInfo->dateTime,
               $bankInvoiceInfo->ipAddress ) = $result[0];

        return $bankInvoiceInfo;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertBankInvoiceInfo($data)
    {
        $sql = 'INSERT INTO finBankInvoiceInfo
                            (invoiceId,
                             bankAccountId,
                             ourNumber,
                             barCodeNumber,
                             digitableNumber)
                     VALUES (?,?,?,?,?)';

        $args = array( $data->invoiceId,
                       $data->bankAccountId,
                       $data->ourNumber,
                       $data->barCodeNumber,
                       $data->digitableNumber );

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateBankInvoiceInfo($data)
    {
        $sql = 'UPDATE finBankInvoiceInfo
                   SET ourNumber = ?,
                       barCodeNumber = ?,
                       digitableNumber = ?
                 WHERE invoiceId = ?
                   AND bankAccountId = ?';

        $args = array( $data->ourNumber,
                       $data->barCodeNumber,
                       $data->digitableNumber,
                       $data->invoiceId,
                       $data->bankAccountId);

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $BankInvoiceInfoId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteBankInvoiceInfo($bankAccountId, $invoiceId)
    {
        $sql = 'DELETE FROM finBankInvoiceInfo
                      WHERE bankAccountId = ?
                        AND invoiceId = ?';

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, array($bankAccountId, $invoiceId)));

        return $result;
    }
    
    /**
     * Busca registros
     * 
     * @param array $filters
     * @return array
     */
    public function searchBankInvoiceInfo($filters = null, $returnAsObject = false)
    {
        $sql = 'SELECT  A.invoiceid,
                        A.bankaccountid,
                        A.ournumber,
                        A.barcodenumber,
                        A.digitablenumber
                   FROM finbankinvoiceinfo A
             INNER JOIN finbankaccount B
                     ON (A.bankaccountid = B.bankaccountid)
        INNER JOIN ONLY finreceivableinvoice RI
                     ON RI.invoiceId = A.invoiceId';
        
        $where = '';

        if ( strlen($filters->invoiceId)>0 )
        {
            $where .= ' AND A.invoiceId = ? ';
            $args[] = $filters->invoiceId;
        }
        
        if ( strlen($filters->ourNumber)>0 )
        {
            $where .= ' AND LTRIM(A.ournumber, \'0\') = LTRIM(?, \'0\') ';
            $args[] = $filters->ourNumber;
        }

        if ( strlen($filters->accountNumber)>0 )
        {
            $where .= ' AND LTRIM(B.accountNumber, \'0\') = LTRIM(?, \'0\') ';
            $args[] = $filters->accountNumber;
        }

        if ( strlen($filters->bankId)>0 )
        {
            $where .= ' AND B.bankId = ? ';
            $args[] = $filters->bankId;
        }

        if ( strlen($filters->branchNumber)>0 )
        {
            $where .= ' AND (B.branchNumber = ? OR B.branchnumber = SUBSTRING(?, 2, 4)) ';
            
            $args[] = $filters->branchNumber;
            $args[] = $filters->branchNumber;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE 1=1 '. $where .'   ORDER BY A.ournumber ';

            $db   = $this->getDatabase();
            $data = $db->query(SAGU::prepare($sql, $args));
            
            $return = array();
            
            if ( $returnAsObject )
            {
                foreach ( $data as $result )
                {
                    $args = new stdClass();
                    
                    list ( $args->invoiceid,
                           $args->bankaccountid,
                           $args->ournumber,
                           $args->barcodenumber,
                           $args->digitablenumber ) = $result;
                    
                    $return[] = $args;
                }
            }
            else
            {
                $return = $data;
            }

            return $return;
        }
        
        return null;
    }
    
    
    /**
     * Retorna se existe nosso numero passado
     *
     * @param int $ourNumber
     * @param int $bankId
     * @return boolean
     */
    public static function hasOurNumber($ourNumber, $bankId)
    {
        $filters = new stdClass();
        $filters->ourNumber = $ourNumber;
        $filters->bankId = $bankId;

        $bus = new BusinessFinanceBusBankInvoiceInfo();
        $rows = $bus->searchBankInvoiceInfo($filters);

        return count($rows) > 0;
    }
}
?>
