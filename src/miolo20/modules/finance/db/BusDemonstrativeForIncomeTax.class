<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for demonstrativeForIncomeTax
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 02/01/2006
 *
 **/

/**
 * Class to manipulate the fingenericVoucherPayment table
 **/
class BusinessFinanceBusDemonstrativeForIncomeTax extends sBusiness
{
   /**
    * Generete a new learning period
    * 
    * @param $data (object): acdPeriod object
    *
    * @return (boolean): True if succed otherwise fails
    *
    */
    public function getDemonstrativeForIncomeTax($data)
    {
 
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        

        // Busca dados de pessoas que estejam enquadrados dentro da operação e período determinado com movimentos e títulos

      $i = 0;
      $sql = ' SELECT A.personId,
                      (SELECT name 
                         FROM ONLY basPerson 
                        WHERE personId = A.personId) AS personName,
                      EXTRACT(month FROM B.entryDate) AS month,
                      TO_CHAR(B.entryDate, \''. SAGU::getParameter('BASIC', 'MASK_DATE') .'\' ),
                      ROUND(SUM (B.value), 2)
                 FROM finReceivableInvoice A,
                      finEntry B
                WHERE A.invoiceId = B.invoiceId
                  AND A.personId = ?
                  AND B.entryDate >= TO_DATE(?, \''. SAGU::getParameter('BASIC', 'MASK_DATE') .'\')
                  AND B.entryDate <= TO_DATE(?, \''. SAGU::getParameter('BASIC', 'MASK_DATE') .'\') 
                  AND B.operationId IN ( ';
        $args[] = $data->personId;
        $args[] = $data->beginDate;
        $args[] = $data->endDate;
        WHILE(strlen($data->operationId[$i]) > 0 )
        { 
            $options .= ' ?,';
            $args[] = $data->operationId[$i];
            $i++;
        }   
        $sql .=  substr($options, 0,strlen($options)-1) . ' ) 
             GROUP BY A.personId, B.entryDate
             ORDER BY A.personId, month, B.entryDate ';


        
  
        $db     = $this->getDatabase();

        $result = $db->Query( SAGU::prepare( $sql, $args ));


        return $result;

    }
}

?>
