<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finPhysical table
 *
 * @author Rudi Uhrig Neto [rudi@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @since
 * Class created on 12/01/2006
 *
 **/

/**
 * Class to manipulate the Physical table
 **/
class BusinessFinanceBusPhysicalTarget extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listPhysicalTarget()
    {
    }


    /**
     * Return a specific record from the database
     *
     * @param $paymentPlaceId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getPhysicalTarget($contractId)
    {
        $sql = 'SELECT A.contractId,
                       B.personId,
                       D.name,
                       B.courseId,
                       B.courseVersion,
                       C.name,
                       A.cityId,
                       A.zipCode,
                       A.location,
                       A.number,
                       A.complement,
                       A.neighborhood,
                       A.name,
                       A.documentNumber,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM finPhysicalTarget A
            INNER JOIN acdContract B
                 USING (contractId)
            INNER JOIN acdCourse C
                 USING (courseId)
            INNER JOIN basPerson D
                 USING (personId)
                 WHERE A.contractId = ?';

        $db     = $this->getDatabase();

        $pk = array($contractId );

        $result = $db->query(SAGU::prepare($sql, $pk));
        

        $bankTarget = new finPhysicalTarget();

        list ( $bankTarget->contractId,
               $bankTarget->personId,
               $bankTarget->personName,
               $bankTarget->courseId,
               $bankTarget->courseVersion,
               $bankTarget->courseName,
               $bankTarget->cityId,
               $bankTarget->zipCode,
               $bankTarget->location,
               $bankTarget->number,
               $bankTarget->complement,
               $bankTarget->neighborhood,
               $bankTarget->name,
               $bankTarget->documentNumber,
               $bankTarget->userName,
               $bankTarget->dateTime,
               $bankTarget->ipAddress ) = $result[0];

        return $bankTarget;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchPhysicalTarget($filters)
    {

        $sql = 'SELECT A.contractId,
                       A.cityId,
                       G.name,
                       A.zipCode,
                       A.location,
                       A.complement,
                       A.number,
                       A.neighborhood,
                       A.name,
                       A.documentNumber,
                       B.personId,
                       C.name as personName,
                       B.courseId,
                       D.name as courseName,
                       B.courseVersion,
                       B.turnId,
                       E.description as turnDescription,
                       B.unitId,
                       F.description as unitDescription
                  FROM finPhysicalTarget A
             LEFT JOIN acdContract  B
                    ON ( A.contractId = B.contractId)
        LEFT JOIN ONLY basPhysicalPerson C
                    ON ( B.personId = C.personId )
             LEFT JOIN acdCourse D
                    ON ( B.courseId = D.courseId )
             LEFT JOIN basTurn E
                    ON ( B.turnId = E.turnId )
             LEFT JOIN basUnit F
                    ON ( B.unitId = F.unitId )
             LEFT JOIN basCity G
                    ON ( A.cityId = G.cityId)';


        if ( strlen($filters->contractId) > 0 )
        {
            $where .= ' AND A.contractId = ?';
            $args[] = $filters->contractId;
        }
        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND B.personId = ?';
            $args[] = $filters->personId;
        }
        if ( strlen($filters->courseId) > 0 )
        {
            $where .= ' AND D.courseId = ?';
            $args[] = $filters->courseId;
        }
        if ( strlen($filters->cityId) > 0 )
        {
            $where .= ' AND A.cityId = ?';
            $args[] = $filters->cityId;
        }
        if ( strlen($filters->cityName) > 0 )
        {
            $where .= ' AND G.name ILIKE ?';
            $args[] = $filters->cityName . '%';
        }
        if ( strlen($filters->zipCode) > 0 )
        {
            $where .= ' AND A.zipCode ILIKE ?';
            $args[] = $filters->zipCode;
        }
        if ( strlen($filters->location) > 0 )
        {
            $where .= ' AND A.location ILIKE ?';
            $args[] = $filters->location . '%';
        }
        if ( strlen($filters->number) > 0 )
        {
            $where .= ' AND A.number ILIKE ?';
            $args[] = $filters->number . '%';
        }
        if ( strlen($filters->neighborhood) > 0 )
        {
            $where .= ' AND A.neighborhood ILIKE ?';
            $args[] = $filters->neighborhood . '%';
        }
        if ( strlen($filters->name) > 0 )
        {
            $where .= ' AND A.name ILIKE ?';
            $args[] = $filters->name . '%';
        }

        unset($result);

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY A.contractId';

            $db = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql, $args));
            
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertPhysicalTarget($data)
    {
        $sql = 'INSERT INTO finPhysicalTarget
                            (contractId,
                             cityId,
                             zipCode,
                             location,
                             number,
                             complement,
                             neighborhood,
                             name,
                             documentNumber)
                     VALUES (?,?,?,?,?,?,?,?,?)';

        $db     = $this->getDatabase();

        $args = array($data->contractId,
                      $data->cityId,
                      $data->zipCode,
                      $data->location,
                      $data->number,
                      $data->complement,
                      $data->neighborhood,
                      $data->name,
                      $data->documentNumber);

        $result = $db->execute(SAGU::prepare($sql, $args));
        

        return $result;

    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updatePhysicalTarget($data)
    {
        $sql = 'UPDATE finPhysicalTarget
                   SET cityId         = ?,
                       zipCode        = ?,
                       location       = ?,
                       number         = ?,
                       complement     = ?,
                       neighborhood   = ?,
                       name           = ?,
                       documentNumber = ?
                 WHERE contractId     = ?';

        $args = array( $data->cityId,
                       $data->zipCode,
                       $data->location,
                       $data->number,
                       $data->complement,
                       $data->neighborhood,
                       $data->name,
                       $data->documentNumber,
                       $data->contractId);


        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $bankId(string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deletePhysicalTarget($pk)
    {
        $sql = 'DELETE FROM finPhysicalTarget
                      WHERE contractId  = ?';

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $pk));
        

        return $result;
    }

}
?>
