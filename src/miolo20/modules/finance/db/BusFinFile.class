<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finBank table
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Cristian Edson Göhl [cristian@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * Samuel Koch [smauel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 22/12/2005
 *
 **/

$MIOLO  = MIOLO::getInstance();
$MIOLO->uses('db/BusFile.class', 'basic');


/**
 * Class to manipulate the Bank table
 **/
class BusinessFinanceBusFinFile extends BusinessBasicBusFile
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listFinanceFile()
    {
        $sql = 'SELECT A.fileId,
                       A.uploadFileName,
                       A.bankAccountId,
                       A.fileType,
                       A.inputOrOutput,
                       A.isProcessed,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\')
                  FROM finFile A
                 WHERE A.isProcessed = \'' . DB_FALSE . '\'
                   AND A.fileType = \''. 'T' . '\'
                   AND A.uploadFileName ilike \''. '%.csv' .'\'
                 ORDER BY 1, 2 ';

        $db = $this->getDatabase();

        $result = $db->query($sql);

        return $result;
    }

  /**
     * Return a specific record from the database
     *
     * @param $paymentPlaceId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getFinanceFileByName($fileName)
    {
        $sql = 'SELECT A.fileId,
                       A.uploadFileName,
                       A.bankAccountId,
                       A.fileType,
                       A.inputOrOutput,
                       A.isProcessed,
                       A.bankReturnId,
                       A.referenceDate,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\')
                  FROM finFile A
                 WHERE A.uploadFileName = ?
                 LIMIT 1     ';

        $db     = $this->getDatabase();
        $sqls   = SAGU::prepare($sql,$fileName, false);
        $result = $db->query($sqls);

        $file = new FinFile();

        list ( $file->fileId,
               $file->fileName,
               $file->bankAccountId,
               $file->fileType,
               $file->inputOrOutput,
               $file->isProcessed,
               $file->bankReturnId,
               $file->referenceDate,
               $file->userName,
               $file->dateTime ) = $result[0];

        return $file;
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $paymentPlaceId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     * 
     **/
    public function searchFile($data)
    {        
        $sql = 'SELECT A.fileId,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.userName,
                       A.ipaddress,
                       A.uploadFileName,
                       A.bankAccountId,
                       A.fileType,
                       A.inputOrOutput,
                       A.isProcessed                                            
                  FROM finFile A';
        $where = '';
        unset($args);
        if ( strlen($data->fileId) > 0 )
        {
            $where .= '    AND   A.fileId = ?';
            $args[] = $data->invoiceId;
        }
        if ( strlen($data->fileName) > 0 )
        {
            $where .= '    AND   A.uploadFileName ILIKE ?';
            $args[] = $data->fileName;
        }
        if ( strlen($data->bankAccountId) > 0 )
        {
            $where .= '    AND   A.bankAccountId ILIKE ?';
            $args[] = $data->bankAccountId;
        }
        if ( strlen($data->fileType) > 0 )
        {
            $where .= '    AND   A.fileType ILIKE ?';
            $args[] = $data->fileType;
        }
        if ( strlen($data->inputOrOutput) > 0 )
        {
            $where .= '    AND   A.inputOrOutput ILIKE ?';
            $args[] = $data->inputOrOutput;
        }
        if ( strlen($data->isProcessed) > 0 )
        {
            $where .= '    AND   A.isProcessed = ?';
            $args[] = $data->isProcessed;
        }
        if ( strlen($data->bankReturnId) > 0 )
        {
            $where .= '    AND   A.bankReturnId = ?';
            $args[] = $data->bankReturnId;
        }
        if ( strlen($data->beginDate) > 0 )
        {
            $where .= '    AND   A.dateTime >= TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $args[] = $data->beginDate;
        }
        if ( strlen($data->endDate) > 0 )
        {
            $where .= '    AND   A.dateTime <= TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $args[] = $data->endDate;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= " WHERE A.inputoroutput = 'O' AND A.filetype = 'I' " . $where .
                    ' ORDER BY A.dateTime DESC';
            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql,$args));
        }

        return $result;
    }

  /**
     * Return a specific record from the database
     *
     * @param $paymentPlaceId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function searchFinanceFile($data)
    {
        
        $sql = 'SELECT A.fileId,
                       A.uploadFileName,
                       A.bankAccountId,
                       A.fileType,
                       A.inputOrOutput,
                       A.isProcessed,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\')
                  FROM finFile A';
        $where = '';
        unset($args);
        if ( strlen($data->fileId) > 0 )
        {
            $where .= '    AND   A.fileId = ?';
            $args[] = $data->invoiceId;
        }
        if ( strlen($data->fileName) > 0 )
        {
            $where .= '    AND   A.uploadFileName ILIKE ?';
            $args[] = $data->fileName;
        }
        if ( strlen($data->bankAccountId) > 0 )
        {
            $where .= '    AND   A.bankAccountId ILIKE ?';
            $args[] = $data->bankAccountId;
        }
        if ( strlen($data->fileType) > 0 )
        {
            $where .= '    AND   A.fileType ILIKE ?';
            $args[] = $data->fileType;
        }
        if ( strlen($data->inputOrOutput) > 0 )
        {
            $where .= '    AND   A.inputOrOutput ILIKE ?';
            $args[] = $data->inputOrOutput;
        }
        if ( strlen($data->isProcessed) > 0 )
        {
            $where .= '    AND   A.isProcessed = ?';
            $args[] = $data->isProcessed;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 8) .
                    ' ORDER BY A.fileId, A.dateTime';
            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql,$args));
        }

        return $result;
    }

    /**
     * Return a specific record from the database
     *
     * @param $paymentPlaceId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getFinanceFile($fileId)
    {
        
        $sql = 'SELECT A.fileId,
                       A.uploadFileName,
                       A.bankAccountId,
                       A.fileType,
                       A.inputOrOutput,
                       A.isProcessed,
                       A.bankReturnId,
                       A.referenceDate,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\')
                  FROM finFile A
                 WHERE A.fileId = ? ';

        $db     = $this->getDatabase();
        $sqls   = SAGU::prepare($sql,$fileId);
        $result = $db->query($sqls);

        $file = new FinFile();

        list ( $file->fileId,
               $file->fileName,
               $file->bankAccountId,
               $file->fileType,
               $file->inputOrOutput,
               $file->isProcessed,
               $file->bankReturnId,
               $file->referenceDate,
               $file->userName,
               $file->dateTime ) = $result[0];

        return $file;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @last modification: William Prigol Lopes [william@solis.coop.br]
     *                     Make the search capable to get partial words with % in varchar fields
     *
     * @return (array): An array containing the search results
     **/
    public function searchBank($data)
    {

        return false;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertFinanceFile($data)
    {
        $fileId = $this->insertFile($data, $data->localPath);
        $file = $this->getFile($fileId);
        $db = $this->getDatabase();

        if( strlen( $fileId ) > 0 )
        {
            $db = $this->getDatabase();
    
            $sql = 'INSERT INTO finFile
                                (fileId,
                                 uploadFileName,
                                 bankAccountId,
                                 fileType,
                                 inputOrOutput,
                                 isProcessed,
                                 bankReturnId,
                                 referenceDate,
                                 contentType,
                                 filePath)
                          VALUES (?,?,?,?,?,?,?,?,?,?)';
    
            $args = array($fileId,
                          $data->uploadFileName,
                          $data->bankAccountId,
                          $data->fileType,
                          $data->inputOrOutput,
                          $data->isProcessed,
                          $data->bankReturnId,
                          $data->referenceDate,
                          $data->contentType,
                          $file->filePath);
        }

        $return = $db->execute(SAGU::prepare($sql, $args, false));

        if ( $return )
        {
            $return = $fileId;
        }
        return $return;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateFinanceFile($data, $uploadFile = false)
    {
        $sql = 'UPDATE finFile
                   SET uploadFileName = ?,
                       bankAccountId = ?,
                       fileType      = ?,
                       inputOrOutput = ?,
                       isProcessed   = ?,
                       bankReturnId  = ?,
                       referenceDate = ?
                 WHERE fileId        = ?';

        $args = array(
            $data->fileName,
            $data->bankAccountId,
            $data->fileType,
            $data->inputOrOutput,
            $data->isProcessed,
            $data->bankReturnId,
            $data->referenceDate,
            $data->fileId
        );

        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql,$args, false);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $ok = $db->execute($sqls[$i]);                
        }
        
        if ( $ok && $uploadFile )
        {
            $ok = $this->updateFile($data, $data->localPath);
        }

        return $ok;
    }

    /**
     * Delete a record
     *
     * @param $bankId(string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteFinanceFile($fileId)
    {
        $sql = 'DELETE FROM finFile
                      WHERE fileId = ?';

        $args = array($fileId);

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql,$args));

        return $result;
    }
}

?>
