<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * This file handles the connection and actions for finPrice table
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 16/11/2005
 */

/**
 * Class to manipulate the Price table
 */
class BusinessFinanceBusPrice extends sBusiness
{
    /**
     * Return a specific record from the database
     * @return (object): Return an object of the type handled by the class
     */
    public function getPrice($courseId, $courseVersion, $turnId, $unitId, $startDate)
    {
        $maskDate = SAGU::getParameter('BASIC', 'MASK_DATE');
        $sql = "SELECT TO_CHAR(A.startDate, '{$maskDate}'),
                       TO_CHAR(A.endDate, '{$maskDate}'),
                       A.value,
                       A.bankAccountId,
                       A.valueIsFixed,
                       A.userName,
                       A.referenceNumberHours,
                       A.firstParcelAtSight,
                       A.firstParcelAtSightFreshman,
                       A.courseId,
                       A.courseVersion,
                       A.turnId,
                       A.unitId,
                       TO_CHAR(A.dateTime, '{$maskDate}'),
                       A.ipAddress,
                       A.fixedValue,
                       A.applyChangesOnFirstParcel,
                       A.parcelsNumber,
                       A.maturityDay,
                       A.valorcreditoferias,
                       A.parceltype
                  FROM finPrice A
            INNER JOIN acdCourse C
                 USING (courseId)
                 WHERE A.courseId = ?
                   AND A.courseVersion = ?
                   AND A.turnId = ?
                   AND A.unitId = ?
                   AND A.startDate = TO_DATE(?, '{$maskDate}') ";

        $params = array();
        $params[] = $courseId;
        $params[] = $courseVersion;
        $params[] = $turnId;
        $params[] = $unitId;
        $params[] = $startDate;

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $params));

        $price = new FinPrice();
        list ( $price->startDate,
               $price->endDate,
               $price->value,
               $price->bankAccountId,
               $price->valueIsFixed,
               $price->userName,
               $price->referenceNumberHours,
               $price->firstParcelAtSight,
               $price->firstParcelAtSightFreshman,
               $price->courseId,
               $price->courseVersion,
               $price->turnId,
               $price->unitId,
               $price->dateTime,
               $price->ipAddress,
               $price->fixedValue,
               $price->applyChangesOnFirstParcel,
               $price->parcelsNumber,
               $price->maturityDay,
               $price->valorcreditoferias,
               $price->parceltype) = $result[0];

        return $price;
    }

    /**
     * Return a specific record from the database
     * @return (object): Return an object of the type handled by the class
     */
    public function getLastPrice($courseId, $courseVersion, $turnId, $unitId)
    {
        $sql = "SELECT A.value
                  FROM finPrice A
                 WHERE A.courseId = ?
                   AND A.courseVersion = ?
                   AND A.turnId = ?
                   AND A.unitId = ?
                   AND date(now()) BETWEEN A.startDate AND A.endDate
              ORDER BY A.startDate DESC";

        $params[] = $courseId;
        $params[] = $courseVersion;
        $params[] = $turnId;
        $params[] = $unitId;

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $params));
        return $result[0][0];
    }
    
    /*
     * Retorna o último preço de férias
     * @return (double)
     */
    public function getLastPriceFerias($courseId, $courseVersion, $turnId, $unitId)
    {
        $sql = "SELECT A.valorcreditoferias
                  FROM finPrice A
                 WHERE A.courseId = ?
                   AND A.courseVersion = ?
                   AND A.turnId = ?
                   AND A.unitId = ?
                   AND date(now()) BETWEEN A.startDate AND A.endDate
              ORDER BY A.startDate DESC";

        $params[] = $courseId;
        $params[] = $courseVersion;
        $params[] = $turnId;
        $params[] = $unitId;

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $params));
        return $result[0][0];
    }
    

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     * @return (array): An array containing the search results
     */
    public function searchPrice($data)
    {
        $maskDate = SAGU::getParameter('BASIC', 'MASK_DATE');
        $sql = "SELECT A.courseId,
                   A.courseVersion,
                   A.turnId,
                   T.description,
                   A.unitId,
                   U.description,
                   TO_CHAR ( A.startDate, '{$maskDate}' ),
                   TO_CHAR ( A.endDate, '{$maskDate}' ),
                   ROUND(A.value, '". SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . "'),
                   A.bankAccountId,
                   X.description,
                   A.valueIsFixed,
                   A.fixedValue,
                   A.applyChangesOnFirstParcel,
                   A.parcelsNumber,
                   A.maturityDay,
                   A.valorcreditoferias
              FROM finPrice A
        INNER JOIN acdCourseOccurrence CO
                ON CO.courseId = A.courseId
               AND CO.courseVersion = A.courseVersion
               AND CO.turnId = A.turnId
               AND CO.unitId = A.unitId
        INNER JOIN acdCourse C
                ON C.courseId = CO.courseId
        INNER JOIN basTurn T
                ON T.turnId = A.turnId
        INNER JOIN basUnit U
                ON U.unitId = A.unitId
         LEFT JOIN finBankAccount X
                ON X.bankAccountId = A.bankAccountId";

        $where = '';
        $params = array();
        if ( strlen($data->startDate) > 0 )
        {
            $where .= "    AND   A.startDate = TO_DATE(?,'{$maskDate}')";
            $params[] = $data->startDate;
        }
        if ( strlen($data->endDate) > 0 )
        {
            $where .= "    AND   A.endDate = TO_DATE(?,'{$maskDate}')";
            $params[] = $data->endDate;
        }
        if ( strlen($data->value) > 0 )
        {
            $where .= '    AND   A.value = ?';
            $params[] = $data->value;
        }
        if ( strlen($data->bankAccountId) > 0 )
        {
            $where .= '    AND   A.bankAccountId = ?';
            $params[] = $data->bankAccountId;
        }
        if ( strlen($data->valueIsFixed) > 0 )
        {
            $where .= '    AND   A.valueIsFixed = ?';
            $params[] = $data->valueIsFixed;
        }
        if ( strlen($data->courseName) > 0 )
        {
            $where .= '    AND   C.name ILIKE ?';
            $params[] = $data->courseName . '%';
        }
        if ( strlen($data->courseId) > 0 )
        {
            $where .= '    AND   A.courseId = ?';
            $params[] = $data->courseId ;
        }
        if ( strlen($data->courseVersion) > 0 )
        {
            $where .= '    AND   A.courseVersion = ?';
            $params[] = $data->courseVersion ;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 7) . ' ORDER BY A.courseId ';

            $result = $this->getDatabase()->query(SAGU::prepare($sql,$params));
        }

        return $result;

    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     * @return True if succed, otherwise False
     */
    public function insertPrice($data)
    {
        $maskDate = SAGU::getParameter('BASIC', 'MASK_DATE');
        $sql = "INSERT INTO finPrice (
                            startDate,
                            endDate,
                            value,
                            bankAccountId,
                            valueIsFixed,
                            referenceNumberHours,
                            firstParcelAtSight,
                            firstParcelAtSightFreshman,
                            courseId,
                            courseVersion,
                            turnId,
                            unitId,
                            fixedValue,
                            applyChangesOnFirstParcel,
                            parcelsNumber,
                            maturityDay,
                            valorcreditoferias,
                            parceltype)
                     VALUES (
                            TO_DATE(?,'{$maskDate}'),
                            TO_DATE(?,'{$maskDate}'),
                            ?,
                            ?,
                            ?,
                            ?,
                            ?,
                            COALESCE(?, false),
                            ?,
                            ?,
                            ?,
                            ?,
                            ?,
                            ?,
                            ?,
                            ?,
                            ?,
                            ?)";

        $params = array();
        $params[] = $data->startDate;
        $params[] = $data->endDate;
        $params[] = $data->value;
        $params[] = $data->bankAccountId;
        $params[] = $data->valueIsFixed;
        $params[] = $data->referenceNumberHours;
        $params[] = $data->firstParcelAtSight;
        $params[] = $data->firstParcelAtSightFreshman;
        $params[] = $data->courseId;
        $params[] = $data->courseVersion;
        $params[] = $data->turnId;
        $params[] = $data->unitId;
        $params[] = $data->fixedValue ? $data->fixedValue : 0;
        $params[] = $data->applyChangesOnFirstParcel ? $data->applyChangesOnFirstParcel : DB_TRUE;
        $params[] = $data->parcelsNumber ? $data->parcelsNumber : 0;
        $params[] = $data->maturityDay ? $data->maturityDay : 0;
        $params[] = $data->valorcreditoferias;
        $params[] = $data->parceltype;

        return $this->getDatabase()->execute(SAGU::prepare($sql, $params));
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     * @return (boolean): True if succeed, otherwise False
     */
    public function updatePrice($data)
    {
        $maskDate = SAGU::getParameter('BASIC', 'MASK_DATE');
        $sql = "UPDATE finPrice
                   SET startDate = TO_DATE(?,'{$maskDate}'),
                       endDate = TO_DATE(?,'{$maskDate}'),
                       value = ?,
                       bankAccountId = ?,
                       valueIsFixed = ?,
                       referenceNumberHours = ?,
                       firstParcelAtSight = ?,
                       firstParcelAtSightFreshman = ?,
                       fixedValue = ?,
                       applyChangesOnFirstParcel = ?,
                       parcelsNumber = ?,
                       maturityDay = ?,
                       valorcreditoferias = ?,
                       parceltype = ?
                 WHERE courseId = ?
                   AND courseVersion = ?
                   AND turnId = ?
                   AND unitId = ?
                   AND startDate = TO_DATE(?, '{$maskDate}') ";

        $params = array();
        $params[] = $data->startDate;
        $params[] = $data->endDate;
        $params[] = $data->value;
        $params[] = $data->bankAccountId;
        $params[] = $data->valueIsFixed;
        $params[] = $data->referenceNumberHours;
        $params[] = $data->firstParcelAtSight;
        $params[] = $data->firstParcelAtSightFreshman;
        $params[] = $data->fixedValue ? $data->fixedValue : 0;
        $params[] = $data->applyChangesOnFirstParcel ? $data->applyChangesOnFirstParcel : DB_TRUE;
        $params[] = $data->parcelsNumber ? $data->parcelsNumber : 0;
        $params[] = $data->maturityDay ? $data->maturityDay : 0;        
        $params[] = $data->valorcreditoferias;
        $params[] = $data->parceltype;
        $params[] = $data->courseId;
        $params[] = $data->courseVersion;
        $params[] = $data->turnId;
        $params[] = $data->unitId;
        $params[] = $data->oldStartDate;

        $sqls = SAGU::prepare($sql,$params);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @return (boolean): True if succeed, otherwise False
     */
    public function deletePrice($pkId)
    {
        $result = $this->beginTransaction();
        $maskDate = SAGU::getParameter('BASIC', 'MASK_DATE');

        $sql = "DELETE FROM finPricePolicy
                  WHERE courseId = ?
                    AND courseVersion = ?
                    AND turnId = ?
                    AND unitId = ?
                    AND startDate = TO_DATE(?, '{$maskDate}') ";

        $result = $this->getDatabase()->execute(SAGU::prepare($sql,$pkId));

        $sql = "DELETE FROM finPrice
                  WHERE courseId = ?
                    AND courseVersion = ?
                    AND turnId = ?
                    AND unitId = ?
                    AND startDate = TO_DATE(?, '{$maskDate}') ";

        $result = $this->getDatabase()->execute(SAGU::prepare($sql,$pkId));
        $result = $this->commit();

        return $result;
    }

    /**
     * Returns a FinPrice object representing the price for the specified learningperiod. The function
     * consider that there will be only one active price for a learning period at the given date.
     *
     * @param $date The date at which the price is active. This parameter can be null, indicating that
     * current date (now()) will be used.
     */
    public function getCurrentPrice($courseId, $courseVersion, $turnId, $unitId, $date = null)
    {
        $maskDate = SAGU::getParameter('BASIC', 'MASK_DATE');
        $sql = "SELECT TO_CHAR(A.startDate, '{$maskDate}')
                  FROM finPrice A
                 WHERE A.courseId = ?
                   AND A.courseVersion = ?
                   AND A.turnId = ?
                   AND A.unitId = ? ";

        $params = array();
        $params[] = $courseId;
        $params[] = $courseVersion;
        $params[] = $turnId;
        $params[] = $unitId;

    	if ( strlen($date) > 0 )
    	{
            $sql .= " AND TO_DATE(?, '{$maskDate}') BETWEEN A.startDate AND A.endDate";
            $params[] = $date;
    	}
    	else
    	{
            $sql .= ' AND now()::date BETWEEN A.startDate AND A.endDate';
    	}

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $params));

        return $this->getPrice($courseId, $courseVersion, $turnId, $unitId, $result[0][0]);
    }
       
}
?>
