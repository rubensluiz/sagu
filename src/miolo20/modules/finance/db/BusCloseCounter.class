<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finCloseCounter table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * Cristian Edson Göhl [cristian@solis.coop.br]
 * 
 * @since
 * Class created on 02/01/2006
 *
 **/

/**
 * Class to manipulate the finCloseCounter table
 **/
class BusinessFinanceBusCloseCounter extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listCloseCounter()
    {
    }

    /**
     * Return a specific record from the database
     *
     * @param $voucherMessagesId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getCloseCounter($closeCounterId)
    {
        $sql = 'SELECT A.closeCounterId,
                       A.openCounterId,
                       A.value,
                       TO_CHAR(A.registerDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.operation,
                       A.observation,
                       A.isConfirmed,
                       A.determinedValue,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\')
                  FROM finCloseCounter   A
                 WHERE A.closeCounterId = ?';

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $closeCounterId));
        $closeCounter = new FinCloseCounter();

        list ( $closeCounter->closeCounterId,
               $closeCounter->openCounterId,
               $closeCounter->value,
               $closeCounter->registerDate,
               $closeCounter->operation,
               $closeCounter->observation,
               $closeCounter->isConfirmed,
               $closeCounter->determinedValue,
               $closeCounter->userName,
               $closeCounter->dateTime ) = $result[0];

        return $closeCounter;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchCloseCounter($filters, $order = 'ASC')
    {
        $sql = 'SELECT C.closeCounterid,
                       O.counterId,
                       U.description,
                       O.operatorid,
                       P.name,
                       C.value,
                       C.operation,
                       TO_CHAR(C.registerDate,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),                     
                       C.observation,
                       C.isConfirmed,
                       C.determinedValue,
                       C.saldoFechamento
                  FROM finCloseCounter C      
            INNER JOIN finOpenCounter O
                    ON (C.openCounterId = O.openCounterId)
            INNER JOIN finCounter U
                    ON (O.counterId = U.counterId)
       INNER JOIN ONLY basphysicalpersonemployee P
                    ON (O.operatorid = P.personId)';
        
        if ( strlen($filters->responsibleUserName) > 0 && (strlen($filters->listAllS) <= 0 || $filters->listAllS == SAGU::getParameter('BASIC', 'DB_FALSE')) )
        {
            $where .= ' AND C.userName = lower(?) ';
            $args[] = $filters->responsibleUserName;
        }
        
        if ( strlen($filters->closeCounterId) > 0 )
        {
            $where .= ' AND C.closecounterid = ? ';
            $args[] = $filters->closeCounterId;
        }
        
        if ( strlen($filters->openCounterId) > 0 )
        {
            $where .= ' AND C.opencounterid = ? ';
            $args[] = $filters->openCounterId;
        }
        
        if ( strlen($filters->counterId) > 0 )
        {
            $where .= ' AND O.counterid = ? ';
            $args[] = $filters->counterId;
        }
        
        if ( strlen($filters->operatorId) > 0 )
        {
            $where .= ' AND O.operatorid = ? ';
            $args[] = $filters->operatorId;
        }
        
        if ( strlen($filters->operatorName) > 0 )
        {
            $where .= ' AND UNACCENT(P.name) ILIKE UNACCENT(?) ';
            $args[] = $filters->operatorName . '%';
        }
        
        if ( strlen($filters->value) > 0 )
        {
            $where .= ' AND C.value = ? ';
            $args[] = $filters->value;
        }
        
        if ( strlen($filters->operation) > 0 )
        {
            $where .= ' AND C.operation = ? ';
            $args[] = $filters->operation;
        }
        
        if ( strlen($filters->registerDate) > 0 )
        {
            $where .= ' AND C.registerDate::date =  TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $args[] = $filters->registerDate;
        }
        
        if ( strlen($filters->observation) > 0 )
        {
            $where .= ' AND UNACCENT(C.observation) ILIKE UNACCENT(?) ';
            $args[] = $filters->observation . '%';
        }
        
        if ( strlen($filters->isConfirmed) > 0 )
        {
            $where .= ' AND C.isConfirmed = ? ';
            $args[] = $filters->isConfirmed;
        }
        
        if ( strlen($filters->determinedValue) > 0 )
        {
            $where .= ' AND C.determinedValue = ? ';
            $args[] = $filters->determinedValue;
        }
        
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4);
            $sql .= ' ORDER BY C.registerDate ' . $order;
            
            $db = $this->getDatabase();
            
            $result = $db->query(SAGU::prepare($sql, $args));
        }
        
        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertCloseCounter($data)
    {
        $db = $this->getDatabase();

        $sql = 'INSERT INTO finCloseCounter
                            (openCounterId,
                             value,
                             registerDate,
                             operation,
                             observation,
                             isConfirmed,
                             determinedValue,
                             counterId,
                             saldoFechamento)
                     VALUES (?,?,now(),?,?,?,?,?,COALESCE(?, 0.00))';
        
        $args = array($data->openCounterId, $data->value, $data->operation, $data->observation, $data->isConfirmed, $data->determinedValue, $data->counterId, $data->saldoFechamento);
        
        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateCloseCounter($data)
    {
        $sql = 'UPDATE finCloseCounter
                   SET openCounterId = ?,
                       value= ?,
                       registerDate = now(),
                       operation= ?,
                       observation = ?,
                       isConfirmed = ?,
                       determinedValue = ?
                 WHERE closeCounterId  = ?';
        
        $args = array($data->openCounterId, $data->value, $data->operation, $data->observation, $data->isConfirmed, $data->determinedValue, $data->closeCounterId);
        
        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);
        for ( $i = 0; $i < count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }
        
        return $result;
    }

    /**
     * Delete a record
     *
     * @param $closeCounterId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteCloseCounter($closeCounterId)
    {
        $sql = 'DELETE FROM finCloseCounter
                 WHERE closeCounterId = ?';
        
        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $closeCounterId));
        
        return $result;
    
    }

    /**
     * Calculate a value from operator
     *
     * @param $valueC (numeric): Value of credit
     * @param $valueD (numeric): Value of debit
     *
     * @return (result) Value
     *
     **/
    public function totalValue($valueC, $valueD)
    {
        $sql = ' SELECT SUM(' . $valueC . ' - ' . $valueD . ') ';
        
        $db = $this->getDatabase();
        $result = $db->query($sql);
        
        return $result[0][0];
    }

    /**
     * Calculate a value from closeCounter
     *
     * @param $openCounterId (int): Id of openCounter
     *
     * @return (data) 
     *
     **/
    public function totalValueCloseCounter($openCounterId)
    {
        
        $sql = 'SELECT ROUND (SUM((SELECT CASE WHEN r.operation = \'C\' THEN r.value ELSE r.value * -1 END
                        FROM finopenCounter r
                       WHERE r.openCounterId = ?) + 
                 ( CASE WHEN(SELECT SUM(CASE WHEN A.operation = \'C\' THEN A.value ELSE A.value * -1 END)
                               FROM finCounterMovement A 
                              WHERE A.openCounterId = ?) IS NOT NULL THEN(SELECT SUM(CASE WHEN A.operation = \'C\' THEN A.value ELSE A.value * -1 END)
                                                                            FROM finCounterMovement A 
                                                                           WHERE A.openCounterId = ?)ELSE 0 END)), 2)';
        
        if ( strlen($openCounterId) > 0 )
        {
            $args[] = $openCounterId;
            $args[] = $openCounterId;
            $args[] = $openCounterId;
        }
        
        $db = $this->getDatabase();
        
        $result = $db->query(SAGU::prepare($sql, $args));
        
        $data = new StdClass();
        if ( is_array($result) )
        {
            if ( $result[0][0] > 0 )
            {
                $data->operation = 'C';
                $data->value = $result[0][0];
            }
            else
            {
                $data->operation = 'D';
                $data->value = abs($result[0][0]);
            }
        }
        return $data;
    }

    /**
     * Calculate a value from operator
     *
     * @param $valueC (numeric): Value of credit
     * @param $valueD (numeric): Value of debit
     *
     * @return (result) Value
     *
     **/
    public function totalValueD($valueC, $valueD)
    {
        $sql = ' SELECT SUM(' . $valueC . ' - (-1 * ' . $valueD . ') ) ';
        
        $db = $this->getDatabase();
        $result = $db->query($sql);

        return $result[0][0];
    }
    
    
    /**
     * Calcula o valor em dinheiro no caixa
     *
     * @param $openCounterId 0.00
     *
     * @return (result) Valor
     *
     **/
    public function totalValorEmEspecie($openCounterId)
    {
        $sql = ' SELECT ROUND((A.value + COALESCE(B.RECEBIDO, 0)),2)
                   FROM finOpenCounter A
              LEFT JOIN ( SELECT A1.openCounterId,
                                 SUM(CASE WHEN A1.operation = \'C\' THEN A1.value ELSE A1.value * -1 END) AS RECEBIDO
                            FROM finCounterMovement A1 
                           WHERE A1.openCounterId = ?
                             AND A1.speciesid = \'' . SAGU::getParameter('FINANCE', 'MONEY_SPECIES_ID') . '\'
                        GROUP BY A1.openCounterId ) B
                     ON ( A.openCounterId = B.openCounterId )
                  WHERE A.openCounterId = ? ';
        
        $args[] = $openCounterId;
        $args[] = $openCounterId;
        
        $db = $this->getDatabase();
        
        $result = $db->query(SAGU::prepare($sql, $args));
        
        return $result[0][0];
    }

}

?>
