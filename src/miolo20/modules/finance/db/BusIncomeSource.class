<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finIncomeSource table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 06/12/2005
 *
 **/

/**
 * Class to manipulate the finIncomeSource table
 **/
class BusinessFinanceBusIncomeSource extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listIncomeSource()
    {
        $db = $this->getDatabase();

        $sql = '   SELECT incomeSourceId,
                          description,
                          isAgreement
                     FROM finIncomeSource
                    WHERE isExtinct = false
                 ORDER BY incomeSourceId ';
                 
        $return = $db->query($sql);

        return $return;
    }

    /**
     * List all records in incomeSourceIds selected from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listIncomeSourceIn($incomeSourceIds)
    {
        $db = $this->getDatabase();

        $sql = '   SELECT incomeSourceId,
                          description,
                          isAgreement
                     FROM finIncomeSource
                    WHERE  ';
        $incomeSourceId = explode(',' , $incomeSourceIds);
        for( $number = 0 ; $number < count($incomeSourceId); $number++)
        {
            if($number == 0 )
            {
                $where .= '  incomeSourceId IN ( ? ';
                $args[] = $incomeSourceId[0];
            }
            else
            {
                $where .= ' , ?';
                $args[] = $incomeSourceId[$number];
            }
        }
        $where   .= ' )';
        
        $sql .= $where . ' ORDER BY incomeSourceId ';
        $return = $db->query(SAGU::prepare($sql, $args));

        return $return;
    }

    /**
     * Return a specific record from the database
     *
     * @param $incomeForecastId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getIncomeSource($incomeSourceId)
    {
        $sql = 'SELECT incomeSourceId,
                       description,
                       isExtinct,
                       isAgreement,
                       userName,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipAddress
                  FROM finIncomeSource
                 WHERE incomeSourceId = ?';

        $db     = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql, $incomeSourceId));

        $incomeSource = new finIncomeSource();
        list ( $incomeSource->incomeSourceId,
               $incomeSource->description,
               $incomeSource->isExtinct,
               $incomeSource->isAgreement,
               $incomeSource->userName,
               $incomeSource->dateTime,
               $incomeSource->ipAddress ) = $result[0];

        return $incomeSource;

    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchIncomeSource($filters)
    {
        $sql= 'SELECT incomeSourceId,
                      description,
                      isExtinct
                 FROM finIncomeSource ';

        if ( strlen($filters->incomeSourceId) > 0 )
        {
            $where .= ' AND incomeSourceId = ? ';
            $args[] = $filters->incomeSourceId;
        }
        if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND description ILIKE ? ';
            $args[] = $filters->description . '%';
        }
        if ( strlen($filters->isAgreement) > 0 )
        {
            $where .= ' AND isAgreement = ? ';
            $args[] = $filters->isAgreement;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY incomeSourceId';
            $db = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql, $args));
            
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertIncomeSource($data)
    {
        $sql = 'INSERT INTO finIncomeSource
                            (description,
                             isExtinct,
                             isAgreement)
                     VALUES (?,?,?)';

        $args = array( 
                       $data->description,
                       $data->isExtinct,
                       $data->isAgreement
                     );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        

        return $result;

    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateIncomeSource($data)
    {
        $sql = 'UPDATE finIncomeSource
                   SET description    = ?,
                       isExtinct      = ?,
                       isAgreement    = ?
                 WHERE incomeSourceId = ?';

        $args = array( $data->description,
                       $data->isExtinct,
                       $data->isAgreement,
                       $data->incomeSourceId );
        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }
        return $result;

    }

    /**
     * Delete a record
     *
     * @param $paymentPlaceId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteIncomeSource($incomeSourceId)
    {
        $sql = 'DELETE FROM finIncomeSource
                      WHERE incomeSourceId = ?';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $incomeSourceId));
        

        return $result;
    }
}
?>
