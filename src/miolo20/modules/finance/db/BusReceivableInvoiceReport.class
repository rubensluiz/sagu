<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finInvoice table
 *
 * @author William Prigol Lopes [william@solis.coop.br] 
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 13/12/2005
 *
 **/

/**
 * Class to manipulate the Invoice table
 **/
class BusinessFinanceBusReceivableInvoiceReport extends sBusiness
{
     /**
     * List the default invoice listing on reports section
     * 
     * @param $data (object): Filters for search
     *
     * @return (array): Array containing the result of filter
     **/
    public function listReceivableInvoiceReport($data)
    {
        
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $sql = ' SELECT A.invoiceId,
                        A.invoiceId,
                        A.personId,
                        B.name,
                        ROUND(A.value, 2),
                        ROUND(balance(A.invoiceId), 2),
                        B.residentialPhone,
                        B.workPhone,
                        B.cellPhone,
                        B.messagePhone
              FROM ONLY finReceivableInvoice A
        INNER JOIN ONLY basPhysicalPerson B
                  USING (personId) ';
        
        $where = '';
        if (strlen($data->beginMaturityDate)>0)
        {
            $where.= ' AND   A.maturityDate >= TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\') ';
            $args[] = $data->beginMaturityDate;
        }

        if (strlen($data->endMaturityDate)>0)
        {
            $where.= ' AND   A.maturityDate <= TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\') ';
            $args[] = $data->endMaturityDate;
        }

        if (strlen($data->emissionDate)>0)
        {
            $where.= ' AND   A.emissionDate = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\') ';
            $args[] = $data->emissionDate;
        }
        
        if (strlen($where)>0)
        {
            if ($data->onlyOpenInvoices == 't')
            {
                $where.= ' AND balance(A.invoiceId) <> '.SAGU::formatNumber(0);
            }
            $sql.=' WHERE '.substr($where, 5).' ORDER BY 3 ';
            $db = $this->getDatabase();
           
           $return = $db->query(SAGU::prepare($sql, $args));
        }
        
        if (is_array($return))
        {
            foreach ($return as $key => $ret)
            {
                $string = new MLink('invoice_'.$return[$key][0], $return[$key][0], $MIOLO->getActionURL($module, 'main:report:receivableInvoiceConsult', null, array('invoiceId'=>$return[$key][0])));
                $return[$key][0] = $string->generate();

                $string = new MLink('person_'.$return[$key][2], $return[$key][2], $MIOLO->getActionURL($module, 'main', null, array('personId'=>$return[$key][2], 'event'=>'personConsultation_click')));
                $return[$key][2] = $string->generate();
                unset($return[$key][6]);
                unset($return[$key][7]);
                unset($return[$key][8]);
                unset($return[$key][9]);
                
                // Residential phone
                if (strlen($ret[6])>0)
                {
                    $str[] = '<b>'._M('Fone resid.', $module).':</b> '.$ret[6];
                }
                
                // Work phone
                if (strlen($ret[7])>0)
                {
                    $str[] = '<b>'._M('Trabalho', $module).':</b> '.$ret[7];
                }
                
                // Cell phone
                if (strlen($ret[8])>0)
                {
                    $str[] = '<b>'._M('Célula', $module).':</b> '.$ret[8];
                }
                
                // Message phone
                if (strlen($ret[9])>0)
                {
                    $str[] = '<b>'._M('Mensagem', $module).':</b> '.$ret[9];
                }
                if (is_array($str))
                {
                    $return[$key][6] = implode('<br>', $str);
                    unset($str);
                }
                else
                {
                    $return[$key][6] = _M('Telefones não registrados', $module);
                }
            }
        }
        return $return;
    } 
}
?>
