<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finSPCMovement table
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * 
 * @since
 * Class created on 26/08/2010
 *
 **/

class BusinessFinanceBusSpcMovement extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listSpcMovement()
    {   
        $sql = 'SELECT movementId,
                       date,
                       reasonId,
                       personId,
                       entryDate,
                       observation   
                  FROM finSPCMovement   
              ORDER BY movementId';

        $db = $this->getDatabase();
        $return = $db->query($sql);
        
        return $return;
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $movementId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getSpcMovement($movementId)
    {
        $sql = 'SELECT movementId,
                       date,
                       reasonId,
                       personId,
                       entryDate,
                       observation,
                       invoiceid,
                       userName,
                       dateTime,
                       ipAddress
                  FROM finSPCMovement
                 WHERE movementId = ?';

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $movementId));
        
        $spcMovement = new FinSpcMovement();

        list ( $spcMovement->movementId,
               $spcMovement->date,
               $spcMovement->reasonId,
               $spcMovement->personId,
               $spcMovement->entryDate,
               $spcMovement->observation,
               $spcMovement->invoiceId,
               $spcMovement->userName,
               $spcMovement->dateTime,
               $spcMovement->ipAddress ) = $result[0];

        return $spcMovement; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchSpcMovement($filters)
    {
        $sql= 'SELECT movementId,
                      TO_CHAR(date,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                      M.reasonId,
                      R.description,
                      personId,
                      entryDate,
                      observation,
                      invoiceId
                 FROM finSPCMovement M
           INNER JOIN finSPCReason R
                   ON (M.reasonId = R.reasonId)';

        if ( strlen($filters->movementId) > 0 )
        {
            $where .= ' AND movementId = ? ';
            $args[] = $filters->movementId;
        }

        if ( strlen($filters->date) > 0 )
        {
            $where .= ' AND date = TO_DATE(?, \'dd/mm/yyyy\') ';
            $args[] = $filters->date;
        }

        if ( strlen($filters->reasonId) > 0 )
        {
            $where .= ' AND reasonId = ? ';
            $args[] = $filters->reasonId;
        }

        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND personId = ? ';
            $args[] = $filters->personId;
        }

        if ( strlen($filters->entryDate) > 0 )
        {
            $where .= ' AND entryDate = TO_DATE(?, \'dd/mm/yyyy\') ';
            $args[] = $filters->entryDate;
        }
        
        if ( strlen($filters->reasonDescription) > 0 )
        {
            $where .= ' AND UNACCENT(R.description) ILIKE UNACCENT(?) ';
            $args[] = $filters->reasonDescription . '%';
        }
        
        if ( strlen($filters->observation) > 0 )
        {
            $where .= ' AND UNACCENT(observation) ILIKE UNACCENT(?) ';
            $args[] = $filters->observation . '%';
        }

        if ( strlen($filters->invoiceId) > 0 )
        {
            $where .= ' AND invoiceId = ? ';
            $args[] = $filters->invoiceId;
        }
        
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4);
            $sql .= ' ORDER BY personId';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));            
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertSpcMovement($data)
    {
        $sql = 'INSERT INTO finSPCMovement (date, reasonId, personId, entryDate, observation, invoiceId)
                     VALUES (TO_DATE(?, \'dd/mm/yyyy\'),?,?,TO_DATE(?, \'dd/mm/yyyy\'),?,?)';

        $args = array( $data->date,
                       $data->reasonId,
                       $data->personId,
                       $data->entryDate,
                       $data->observation,
                       $data->invoiceId,
                );

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        
        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateSpcMovement($data)
    {
        $sql = 'UPDATE finSPCMovement
                   SET date = TO_DATE(?, \'dd/mm/yyyy\'),
                       reasonId = ?,
                       personId = ?, 
                       entryDate = ?,
                       observation = ?,
                       invoiceId = ?
                 WHERE movementId = ?';

        $args = array( $data->date,
                       $data->reasonId,
                       $data->personId,
                       $data->entryDate,
                       $data->observation,
                       $data->invoiceId,
                       $data->movementId
                     );

        $db = $this->getDatabase();
        $sql = SAGU::prepare($sql, $args);

        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $movementId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteSpcMovement($movementId)
    {
        $sql = 'DELETE FROM finSPCMovement
                      WHERE movementId = ?';

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $movementId));
        
        return $result;
    }
}
?>
