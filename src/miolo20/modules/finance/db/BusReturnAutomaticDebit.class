<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 27/12/2006
 *
 **/

/**
 * Class to manipulate the finSpecies table
 **/
class BusinessFinanceBusReturnAutomaticDebit extends sBusiness
{  
   /**
    * Function to get needed information for continue the process
    *
    * @param $commit (boolean): True if commit or false to roolback
    *
    * @return: null
    */
    function getDiscountOperation()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $sql = ' SELECT discountOperation 
                   FROM finDefaultOperations ';

        $ret = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        return $ret[0][0];
    }

   /**
    * Process th register for a specific invoice on system
    *
    * @param: $data(object): Object containing information about data
    *
    * @return: Return true if succeed, otherwise false
    *
    */
    public function processReturnDebit($processData)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        unset($data);
        if(strlen($processData->updateReceivableInvoiceClose->data->invoiceId) > 0 )
        {

//             foreach($processData->updateReceivableInvoice as $key => $dataInvoice)
//             {
//                 $data = clone($dataInvoice->data);
//                 $sql = ' UPDATE finInvoice
//                             SET personId        = ?,
//                                 accountSchemeId = ?,
//                                 costCenterId    = ?,
//                                 courseId        = ?,
//                                 courseVersion   = ?,
//                                 unitId          = ?,
//                                 parcelNumber    = ?,
//                                 emissionDate    = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
//                                 maturityDate    = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
//                                 value           = ?,
//                                 policyId        = ?,
//                                 bankInvoiceId   = ?,
//                                 automaticDebit  = ?,
//                                 comments        = ?,
//                                 incomeSourceId  = ?,
//                                 bankAccountId   = ?,
//                                 sagu1InvoiceId  = ?
//                           WHERE invoiceId = ?';
//         
//                 unset($args);
//                 $args[] = $data->personId;
//                 $args[] = $data->accountSchemeId;
//                 $args[] = $data->costCenterId;
//                 $args[] = $data->courseId;
//                 $args[] = $data->courseVersion;
//                 $args[] = $data->unitId;
//                 $args[] = $data->parcelNumber;
//                 $args[] = $data->emissionDate;
//                 $args[] = $data->maturityDate;
//                 $args[] = $data->value;
//                 $args[] = $data->policyId;
//                 $args[] = $data->bankInvoiceId;
//                 $args[] = $data->automaticDebit;
//                 $args[] = $data->comments;
//                 $args[] = $data->incomeSourceId;
//                 $args[] = $data->bankAccountId;
//                 $args[] = $data->sagu1InvoiceId;
//                 $args[] = $data->invoiceId;
//         
//                 $sqls = SAGU::prepare($sql, $args);
//                 for ( $i=0; $i<count($sqls); $i++ )
//                 {
//                     $result = $this->getDatabase()->execute($sqls[$i]);
//                 }
//     
//                 $sql = ' UPDATE finReceivableInvoice
//                             SET personId        = ?,
//                                 accountSchemeId = ?,
//                                 costCenterId    = ?,
//                                 courseId        = ?,
//                                 courseVersion   = ?,
//                                 unitId          = ?,
//                                 parcelNumber    = ?,
//                                 emissionDate    = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
//                                 maturityDate    = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
//                                 value           = ?,
//                                 policyId        = ?,
//                                 bankInvoiceId   = ?,
//                                 automaticDebit  = ?,
//                                 comments        = ?,
//                                 incomeSourceId  = ?,
//                                 bankAccountId   = ?,
//                                 sagu1InvoiceId  = ?,
//                                 sendDate        = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
//                                 returnDate      = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
//                                 returnFileId    = ?
//                           WHERE invoiceId = ?';
// 
//                 unset($args);
//                 $args[] = $data->personId;
//                 $args[] = $data->accountSchemeId;
//                 $args[] = $data->costCenterId;
//                 $args[] = $data->courseId;
//                 $args[] = $data->courseVersion;
//                 $args[] = $data->unitId;
//                 $args[] = $data->parcelNumber;
//                 $args[] = $data->emissionDate;
//                 $args[] = $data->maturityDate;
//                 $args[] = $data->value;
//                 $args[] = $data->policyId;
//                 $args[] = $data->bankInvoiceId;
//                 $args[] = $data->automaticDebit;
//                 $args[] = $data->comments;
//                 $args[] = $data->incomeSourceId;
//                 $args[] = $data->bankAccountId;
//                 $args[] = $data->sagu;
//                 $args[] = $data->sendDate;
//                 $args[] = $data->returnDate;
//                 $args[] = $data->returnFileId;
//                 $args[] = $data->invoiceId;
//                 
//                 $sqls = SAGU::prepare($sql, $args);
//                 for ( $i=0; $i<count($sqls); $i++ )
//                 {
//                     $retVal = $this->getDatabase()->execute($sqls[$i]);
//                 }
//             }
            
            unset($data);
            if(is_array($processData->insertEntry))
            {
                foreach($processData->insertEntry as $key => $dataEntry)
                {
                    $data = clone($dataEntry->data);

                    $sql = ' INSERT INTO finEntry
                                        ( invoiceId,
                                        operationId,
                                        entryDate,
                                        value,
                                        costCenterId,
                                        comments,
                                        bankReturnCode,
                                        isAccounted,
                                        creationType
                                        )
                                VALUES (?, ?, to_date(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'), ?, ?, ?, ?, ?, ?) ';

                    $db = $this->getDatabase();

                    if (is_null($data->isAccounted))
                    {
                        $data->isAccounted = true;
                    }
                    $args = array( $data->invoiceId,
                                $data->operationId,
                                $data->entryDate,
                                $data->value,
                                $data->costCenterId,
                                $data->comments, 
                                $data->bankReturnCode,
                                $data->isAccounted,
                                $data->creationType 
                                );

                    $return = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

                    if ($this->getDatabase()->getErrors())
                    {
                        $return = false;
                    }
                }
            }

            unset($data);
           
            if(is_object($processData->updateReceivableInvoiceClose->data))
            {
                $data = clone($processData->updateReceivableInvoiceClose->data);
                // recebe o invoiceId para fechamento do título.
                // $data->invoiceId = $invoiceId;

                $sql = 'UPDATE finInvoice
                        SET personId        = ?,
                            accountSchemeId = ?,
                            costCenterId    = ?,
                            courseId        = ?,
                            courseVersion   = ?,
                            unitId          = ?,
                            parcelNumber    = ?,
                            emissionDate    = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                            maturityDate    = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                            value           = ?,
                            policyId        = ?,
                            bankInvoiceId   = ?,
                            automaticDebit  = ?,
                            comments        = ?,
                            incomeSourceId  = ?,
                            bankAccountId   = ?,
                            sagu1InvoiceId  = ?
                      WHERE invoiceId = ?';
        
                unset($args);
                $args[] = $data->personId;
                $args[] = $data->accountSchemeId;
                $args[] = $data->costCenterId;
                $args[] = $data->courseId;
                $args[] = $data->courseVersion;
                $args[] = $data->unitId;
                $args[] = $data->parcelNumber;
                $args[] = $data->emissionDate;
                $args[] = $data->maturityDate;
                $args[] = $data->value;
                $args[] = $data->policyId;
                $args[] = $data->bankInvoiceId;
                $args[] = $data->automaticDebit;
                $args[] = $data->comments;
                $args[] = $data->incomeSourceId;
                $args[] = $data->bankAccountId;
                $args[] = $data->sagu1InvoiceId;
                $args[] = $data->invoiceId;
        
                $sqls = SAGU::prepare($sql, $args);
                for ( $i=0; $i<count($sqls); $i++ )
                {
                    $result = $this->getDatabase()->execute($sqls[$i]);
                }
    
                $sql = 'UPDATE finReceivableInvoice
                        SET personId        = ?,
                            accountSchemeId = ?,
                            costCenterId    = ?,
                            courseId        = ?,
                            courseVersion   = ?,
                            unitId          = ?,
                            parcelNumber    = ?,
                            emissionDate    = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                            maturityDate    = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                            value           = ?,
                            policyId        = ?,
                            bankInvoiceId   = ?,
                            automaticDebit  = ?,
                            comments        = ?,
                            incomeSourceId  = ?,
                            bankAccountId   = ?,
                            sagu1InvoiceId  = ?,
                            sendDate        = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                            returnDate      = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                            returnFileId    = ?
                    WHERE invoiceId = ?';
    
                unset($args);
                $args[] = $data->personId;
                $args[] = $data->accountSchemeId;
                $args[] = $data->costCenterId;
                $args[] = $data->courseId;
                $args[] = $data->courseVersion;
                $args[] = $data->unitId;
                $args[] = $data->parcelNumber;
                $args[] = $data->emissionDate;
                $args[] = $data->maturityDate;
                $args[] = $data->value;
                $args[] = $data->policyId;
                $args[] = $data->bankInvoiceId;
                $args[] = $data->automaticDebit;
                $args[] = $data->comments;
                $args[] = $data->incomeSourceId;
                $args[] = $data->bankAccountId;
                $args[] = $data->sagu;
                $args[] = $data->sendDate;
                $args[] = $data->returnDate;
                $args[] = $data->returnFileId;
                $args[] = $data->invoiceId;
                
                $sqls = SAGU::prepare($sql, $args);
                for ( $i=0; $i<count($sqls); $i++ )
                {
                    $retVal = $this->getDatabase()->execute($sqls[$i]);
                }
            }
            
            if(is_object($processData->insertEntryClose->data))
            {
                $data = clone($processData->insertEntryClose->data);
                $sql = ' INSERT INTO finEntry
                                    ( invoiceId,
                                    operationId,
                                    entryDate,
                                    value,
                                    costCenterId,
                                    comments,
                                    bankReturnCode,
                                    isAccounted,
                                    creationType )
                            VALUES (?, ?, to_date(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'), ?, ?, ?, ?, ?, ?) ';
                            
                $db = $this->getDatabase();
               
                if (is_null($data->isAccounted))
                {
                    $data->isAccounted = true;
                }
                $args = array( $data->invoiceId,
                               $data->operationId,
                               $data->entryDate,
                               $data->value,
                               $data->costCenterId,
                               $data->comments, 
                               $data->bankReturnCode,
                               $data->isAccounted,
                               $data->creationType );

                $return = $this->getDatabase()->execute(SAGU::prepare($sql, $args));
                
                if ($this->getDatabase()->getErrors())
                {
                    $return = false;
                }
            }

            if($retVal AND $return)
            {

                $this->closeTransaction(true);
                return true;
            }
            else
            {
                return false;
            }
        }

    }

    /**
     * Function to close the transaction, depending the status make a commit or rollback
     *
     * @param $status (boolean): The status of "normally" keepGoing variable indicating to get a commit or rollback
     *
     */
    private function closeTransaction($status)
    {
        if ($status == true)
        {
     //       echo "COMMIT";
            $this->getDatabase()->execute('COMMIT');
            return true;
        }
        else
        {
      //      echo "ROLLBACK";
            $this->getDatabase()->execute('ROLLBACK');
            return false;
        }
    }

}
?>
