<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for finConvenantPerson table
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 *
 * @since
 * Class created on 23/11/2010
 *
 **/

/**
 * Class to manipulate the finConvenantPerson table
 **/
class BusinessFinanceBusConvenantPerson extends sBusiness
{
    /**
     * Return a specific record from the database
     *
     * @param $cityId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getConvenantPerson($convenantPersonId)
    {
        $sql = 'SELECT convenantPersonId,
                       convenantId,
                       personId,
                       TO_CHAR(beginDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(endDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       contractid,
                       inscricaoid,
                       userName,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipAddress
                  FROM finConvenantPerson
                 WHERE convenantPersonId = ?';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $convenantPersonId));

        $convenantPerson  = new FinConvenantPerson();
        list (  $convenantPerson->convenantPersonId,
                $convenantPerson->convenantId,
                $convenantPerson->personId,
                $convenantPerson->beginDate,
                $convenantPerson->endDate,
                $convenantPerson->contractId,
                $convenantPerson->inscricaoId,
                $convenantPerson->userName,
                $convenantPerson->dateTime,
                $convenantPerson->ipAddress ) = $result[0];

        return $convenantPerson;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchConvenantPerson($filters)
    {
        $sql = 'SELECT A.convenantPersonId,
                       A.convenantId,
                       B.description,
                       A.personId,
                       C.name,
                       TO_CHAR(A.beginDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(A.endDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                  FROM finConvenantPerson A
            INNER JOIN finConvenant B
                    ON (A.convenantId = B.convenantId)
       INNER JOIN ONLY basPerson C
                    ON (A.personId = C.personId)';

        if ( strlen($filters->convenantPersonId)>0 )
        {
            $where .= " AND A.convenantPersonId = ? ";
            $args[] = $filters->convenantPersonId;
        }
        if ( strlen($filters->convenantId)>0 )
        {
            $where .= " AND A.convenantId = ? ";
            $args[] = $filters->convenantId;
        }
        if ( strlen($filters->personId)>0 )
        {
            $where .= " AND A.personId = ? ";
            $args[] = $filters->personId;
        }
        if ( strlen($filters->contractId)>0 )
        {
            $where .= " AND A.contractId = ? ";
            $args[] = $filters->contractId;
        }
        if ( strlen($filters->personName)>0 )
        {
            $where .= " AND UNACCENT(C.name) ILIKE UNACCENT(?) ";
            $args[] = $filters->personName . '%';
        }
        if ( strlen($filters->beginDate)>0 )
        {
            $where .= " AND A.beginDate = to_date(?, '".SAGU::getParameter('basic', 'MASK_DATE')."') ";
            $args[] = $filters->beginDate;
        }
        if ( strlen($filters->endDate)>0 )
        {
            $where .= " AND A.endDate = to_date(?, '".SAGU::getParameter('basic', 'MASK_DATE')."') ";
            $args[] = $filters->endDate;
        }

        if ( strlen($filters->referenceDate) > 0)
        {
            $where .= " AND TO_DATE(?,'" . SAGU::getParameter('BASIC', 'MASK_DATE') . "') BETWEEN beginDate AND endDate ";
            $args[] = $filters->referenceDate;
        }

        unset($ret);
        if ( strlen($where) > 0 )
        {
            $sql .= " WHERE " . substr($where, 4) . " ORDER BY A.convenantPersonId";
            $ret = $this->getDatabase()->query(SAGU::Prepare($sql, $args));
        }
        
        return $ret;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertConvenantPerson($data)
    {
        $sql = "INSERT INTO finConvenantPerson (
                       convenantId,
                       personId,
                       beginDate,
                       endDate,
                       contractId,
                       inscricaoId)
                     VALUES (?,
                             ?,
                             to_date(?, '".SAGU::getParameter('basic', 'MASK_DATE')."'),
                             to_date(?, '".SAGU::getParameter('basic', 'MASK_DATE')."'),
                             ?,
                             ?)";

        $args = array(
            $data->convenantId,
            $data->personId,
            $data->beginDate,
            $data->endDate,
            $data->contractId,
            $data->inscricaoId);

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateConvenantPerson($data)
    {
        $sql = "UPDATE finConvenantPerson
                   SET convenantId = ?,
                       personId = ?,
                       beginDate = to_date(?, '".SAGU::getParameter('basic', 'MASK_DATE')."'),
                       endDate = to_date(?, '".SAGU::getParameter('basic', 'MASK_DATE')."'),
                       contractId = ?,
                       inscricaoId = ?
                 WHERE convenantPersonId = ?";

        $args = array(
        $data->convenantId,
        $data->personId,
        $data->beginDate,
        $data->endDate,
        $data->contractId,
        $data->inscricaoId,
        $data->convenantPersonId );

        $sqls = SAGU::prepare($sql, $args);
        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $cityId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteConvenantPerson($convenantPersonId)
    {
        $sql = 'DELETE FROM finConvenantPerson
                      WHERE convenantPersonId = ?';

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $convenantPersonId));

        return $result;
    }

    /**
     * Get the person's convenants data
     *
     * @param $filters (object): Object with query filters
     *
     * @return (array): Array with the data
     *
     **/
    public function searchPersonConvenantData($filters)
    {
        $sql = 'SELECT B.convenantId,
                       B.description,
                       B.value || CASE WHEN B.isPercent IS TRUE THEN \'%\'
                       ELSE \'\' END as value,
                       TO_CHAR(A.beginDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(A.endDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       B.percentRenovacao
                  FROM finConvenantPerson A
            INNER JOIN finConvenant B
                    ON (B.convenantId = A.convenantId) ';

        if ( strlen($filters->convenantId)>0 )
        {
            $where .= " AND A.convenantId = ? ";
            $args[] = $filters->convenantId;
        }
        if ( strlen($filters->personId)>0 )
        {
            $where .= " AND A.personId = ? ";
            $args[] = $filters->personId;
        }
        if ( strlen($filters->beginDate)>0 )
        {
            $where .= " AND A.beginDate = to_date(?, '".SAGU::getParameter('basic', 'MASK_DATE')."') ";
            $args[] = $filters->beginDate;
        }
        if ( strlen($filters->endDate)>0 )
        {
            $where .= " AND A.endDate = to_date(?, '".SAGU::getParameter('basic', 'MASK_DATE')."') ";
            $args[] = $filters->endDate;
        }

        if ( strlen($filters->referenceDate) > 0)
        {
            $where .= " AND TO_DATE(?,'" . SAGU::getParameter('BASIC', 'MASK_DATE') . "') BETWEEN beginDate AND endDate ";
            $args[] = $filters->referenceDate;
        }

        unset($ret);
        if ( strlen($where) > 0 )
        {
            $sql .= " WHERE " . substr($where, 4) . " ORDER BY A.convenantId";
            $ret = $this->getDatabase()->query(SAGU::Prepare($sql, $args));
        }

        return $ret;
    }
    /*
     * Função que retorna se aluno está inadimplente.
     * 
     */
    public function verificaStatusAluno($personId)
    {
        $sql = "SELECT isDefaulter({$personId})";
        
        $ret = $this->getDatabase()->query($sql);
        
        return $ret;
    }
}
?>
