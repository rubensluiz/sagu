<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for finInvoiceMessage table
 *
 * @author Samuel Koch [samuel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Samuel Koch [samuel@solis.coop.br]
 *
 * @since
 * Class created on 10/02/2009
 *
 **/

/**
 * Class to manipulate the Message table
 **/
class BusinessFinanceBusInvoiceMessage extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
     public function listInvoiceMessageType()
     {
        $sql = 'SELECT invoiceMessageTypeId,
                       description
                  FROM finInvoiceMessageType
              ORDER BY description ';

        $db = $this->getDatabase();
        $result = $db->query($sql);

        return $result;
    }

     /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
     public function listMessageCode($bankId)
     {
        $sql = 'SELECT A.invoicemessageid,
                       A.description
                  FROM finInvoiceMessage A
            INNER JOIN finBank B
                    ON A.bankId = B.bankId
                 WHERE B.bankId = ?
              ORDER BY messageOrder ';

        $args = array($bankId);
        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));
        return $result;
    }

    /**
     * Return a specific record from the database
     *
     * @param $args[0] int invoiceMessageTypeId
     * @param $args[1] int bankId
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getInvoiceMessage($invoiceMessageId)
    {
        $sql = 'SELECT A.invoiceMessageId,
                       A.bankId,
                       A.invoiceMessageBankValue,
                       B.description,
                       A.invoiceMessageTypeId,
                       C.description,
                       A.messageOrder,
                       A.description,
                       A.operationId,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\')
                  FROM finInvoiceMessage A,
                       finBank B,
                       finInvoiceMessageType C
                 WHERE A.invoiceMessageId = ?';

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql,array($invoiceMessageId)));

        list ( $message->invoiceMessageId,                
               $message->bankId,
               $message->invoiceMessageBankValue,
               $message->bankDescription,
               $message->invoiceMessageTypeId,
               $message->invoiceMessageTypeDescription,
               $message->messageOrder,
               $message->messageText,
               $message->operationId,
               $message->userName,
               $message->dateTime ) = $result[0];

        return $message;
    }
    
    /**
     * Retorna array de stdClass com os registros
     *
     * @param stdClass $data
     * @return array
     */
    public function searchInvoiceMessageAsObject($data)
    {
        return SAGU::resultToObject($this->searchInvoiceMessage($data), array(
            'invoiceMessageId',
            'bankId',
            'bankDescription',
            'invoiceMessageTypeId',
            'invoiceMessageType',
            'messageOrder',
            'description',
            'operationId',
        ));
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @last modification: William Prigol Lopes [william@solis.coop.br]
     *                     Make the search capable to get partial words with % in varchar fields
     *
     * @return (array): An array containing the search results
     **/
    public function searchInvoiceMessage($data)
    {
        $sql = 'SELECT A.invoiceMessageId,
                       A.bankId,
                       B.description,
                       A.invoiceMessageTypeId,
                       C.description,
                       A.messageOrder,
                       A.description,
                       A.operationId
                  FROM finInvoiceMessage A
            INNER JOIN finBank B
                    ON (A.bankId = B.bankId)
            INNER JOIN finInvoiceMessageType C
                    ON (A.invoiceMessageTypeId = C.invoiceMessageTypeId)';

        $where = '';
        unset($args);
        if ( strlen($data->invoiceMessageId) > 0 )
        {
            $where .= '    AND   A.invoiceMessageId = ?';
            $args[] = $data->invoiceMessageId;
        }
        if ( strlen($data->bankId) > 0 )
        {
            $where .= '    AND   A.bankId = ?';
            $args[] = $data->bankId;
        }
        if ( strlen($data->invoiceMessageTypeId) > 0 )
        {
            $where .= '    AND   A.invoiceMessageTypeId = ?';
            $args[] = $data->invoiceMessageTypeId;
        }
        if ( strlen($data->messageOrder) > 0 )
        {
            $where .= '    AND   A.messageOrder = ?';
            $args[] = $data->messageOrder;
        }
        if ( strlen($data->description) > 0 )
        {
            $where .= '    AND   A.description ILIKE ?';
            $args[] = $data->description . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where,8) .
                    ' ORDER BY A.messageOrder, A.invoiceMessageTypeId';
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql,$args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertInvoiceMessage($data)
    {
        $sql = 'INSERT INTO finInvoiceMessage (
                            bankId,
                            invoiceMessageTypeId,
                            messageOrder,
                            invoicemessagebankvalue,
                            description,
                            operationId)
                     VALUES (?,?,?,?,?,?)';

        $args = array(
                $data->bankId,
                $data->invoiceMessageTypeId,
                $data->messageOrder,
                $data->invoiceMessageBankValue,
                $data->description,
                $data->operationId,
        );

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateInvoiceMessage($data)
    {
        $sql = 'UPDATE finInvoiceMessage
                   SET messageOrder         = ?,                       
                       description          = ?,
                       bankId               = ?,
                       invoiceMessageTypeId = ?,
                       invoicemessagebankvalue = ?,
                       operationId          = ?
                 WHERE invoiceMessageId = ?';

        $args = array (
                $data->messageOrder,
                $data->description,
                $data->bankId,
                $data->invoiceMessageTypeId,
                $data->invoiceMessageBankValue,
                $data->operationId,
                $data->invoiceMessageId
        );

        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql,$args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $bankId (string): Primary key for deletion
     * @param $collectionTypeId (string): Primary key for deletion
     * @param $messageOrder (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteInvoiceMessage($invoiceMessageId)
    {
        $sql = 'DELETE FROM finInvoiceMessage
                      WHERE invoiceMessageId = ?';

        $args = array ( $invoiceMessageId );

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql,$args));

        return $result;
    }

}

?>
