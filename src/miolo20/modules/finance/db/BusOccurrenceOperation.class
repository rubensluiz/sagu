<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finOccurrenceOperation table
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 13/12/2005
 *
 **/

/**
 * Class to manipulate the OccurrenceOperation table
 **/
class BusinessFinanceBusOccurrenceOperation extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listOccurrenceOperation()
    {
    }


    
    /**
     * List all manual records from the table handled by the class by a specific period
     *
     * @param: $data (object): Initial and final date 
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listManualEntries($data)
    {
        $sql = ' SELECT B.personId,
                        (SELECT name 
                      FROM ONLY basPerson
                          WHERE basPerson.personId = B.personId ),
                        A.invoiceId,
                        A.operationId,
                        C.description as operationDescription,
                        ROUND(A.value, '.SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE').'),
                        TO_CHAR(A.occurrenceOperationDate, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                        TO_CHAR(A.dateTime, \''.SAGU::getParameter('BASIC', 'MASK_DATE').' '.SAGU::getParameter('BASIC', 'MASK_TIME').'\'),
                        A.userName
                   FROM finOccurrenceOperation A
             INNER JOIN finInvoice B
                  USING (invoiceId)
             INNER JOIN finOperation C
                  USING (operationId)
                  WHERE
                  ( A.occurrenceOperationDate BETWEEN TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')
                                    AND TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')
                  OR
                    A.dateTime BETWEEN TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')
                                   AND TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')
                  )
                    AND creationType = \'M\'
                    AND B.iscanceled = FALSE
                    AND B.invoiceIdDependence IS NULL
               GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, occurrenceOperationDate
               ORDER BY occurrenceOperationDate, 
                        2 ';

        $args = array($data->beginRegisterDate,
                      $data->endRegisterDate,
                      $data->beginRegisterDate,
                      $data->endRegisterDate
                      );
        
        $db = $this->getDatabase();
        $return = $db->query(SAGU::prepare($sql, $args));

        return $return;
    }

    

    /**
     * Return a specific record from the database
     *
     * @param $occurrenceOperationId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getOccurrenceOperation($occurrenceId, $bankAccountId, $levelSequenceId)
    {
        $sql = 'SELECT A.occurrenceOperationId,
                       A.occurrenceId,
                       A.bankAccountId,
                       A.operationId,
                       A.levelSequenceId
                  FROM finOccurrenceOperation A
                 WHERE A.occurrenceId    = ?
                   AND A.bankAccountId          = ?
                   AND A.levelSequenceId = ? ';

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql,array($occurrenceId, $bankAccountId, $levelSequenceId)));

        $occurrenceOperation = new FinOccurrenceOperation();

        list ($occurrenceOperation->occurrenceOperationId,
              $occurrenceOperation->occurrenceId,
              $occurrenceOperation->bankAccountId,
              $occurrenceOperation->operationId,
              $occurrenceOperation->levelSequenceId) = $result[0];

        return $occurrenceOperation;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchOccurrenceOperation($data)
    {        
        $sql = 'SELECT A.occurrenceOperationId,
                        A.invoiceId,
                        A.operationId,
                        B.description,
                        TO_CHAR(A.occurrenceOperationDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                        ROUND(A.value, \'' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . '\'),
                        A.costCenterId,
                        C.description,
                        A.bankReturnCode,
                        isAccounted
                 FROM finOccurrenceOperation A
                 INNER JOIN finOperation B
                     ON (A.operationId = B.operationId)
                 INNER JOIN accCostCenter C
                     ON (A.costCenterId = C.costCenterId)
                 INNER JOIN ( SELECT invoiceId,
                                     personId 
                                FROM ONLY finReceivableInvoice) AS D
                     ON (A.invoiceId = D.invoiceId)
                 INNER JOIN (SELECT personId,
                                    name 
                               FROM ONLY basPerson ) AS E
                     ON (D.personId = E.personId) ';

        $where = '';
        unset($args);
        if ( strlen($data->occurrenceOperationId) > 0 )
        {
            $where .= '    AND   A.occurrenceOperationId = ?';
            $args[] = $data->occurrenceOperationId;
        }
        if ( strlen($data->personId) > 0 )
        {
            $where .= '    AND   E.personId = ?';
            $args[] = $data->personId;
        }
        if ( strlen($data->personName) > 0 )
        {
            $where .= '    AND   E.name ilike ? ';
            $args[] = $data->personName.'%';
        }
        if ( strlen($data->invoiceId) > 0 )
        {
            $where .= '    AND   A.invoiceId = ?';
            $args[] = $data->invoiceId;
        }
        if ( strlen($data->operationId) > 0 )
        {
            $where .= '    AND   A.operationId = ?';
            $args[] = $data->operationId;
        }
        if ( strlen($data->occurrenceOperationDate) > 0 )
        {
            $where .= '    AND   A.occurrenceOperationDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $args[] = $data->occurrenceOperationDate;
        }
        if ( strlen($data->value) > 0 )
        {
            $where .= '    AND   A.value ILIKE ?';
            $args[] = $data->value;
        }
        if ( strlen($data->costCenterId) > 0 )
        {
            $where .= '    AND   A.costCenterId = ?';
            $args[] = $data->costCenterId;
        }
        if ( strlen($data->bankReturnCode) > 0 )
        {
            $where .= '    AND   A.bankReturnCode ILIKE ?';
            $args[] = $data->bankReturnCode;
        }
        if ( strlen($data->isAccounted) > 0 )
        {
            $where .= '    AND   A.isAccounted = ?';
            $args[] = $data->isAccounted;
        }
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where,8) .
                    ' ORDER BY B.description';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql,$args));
        }

        return $result;

    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return If succed, return the invoice id. Otherwise return FALSE.
     *
     **/
    public function insertOccurrenceOperation($data)
    {
        $sql = ' INSERT INTO finOccurrenceOperation
                            ( invoiceId,
                              operationId,
                              occurrenceOperationDate,
                              value,
                              costCenterId,
                              comments,
                              bankReturnCode,
                              isAccounted,
                              creationType
                            )
                      VALUES (?, ?, to_date(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'), ?, ?, ?, ?, ?, ?) ';
                      
        $db = $this->getDatabase();
        
        if (is_null($data->isAccounted))
        {
            $data->isAccounted = true;    
        }
        $args = array( $data->invoiceId,
                       $data->operationId,
                       $data->occurrenceOperationDate,
                       $data->value,
                       $data->costCenterId,
                       $data->comments, 
                       $data->bankReturnCode,
                       $data->isAccounted,
                       $data->creationType 
                     );

         $return = $db->execute(SAGU::prepare($sql, $args));
     
         if ($this->getDatabase()->getErrors())
         {
            $return = false;
         }
         return $return;
           
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateOccurrenceOperation($data)
    {
        $sql = 'UPDATE finOccurrenceOperation
                   SET invoiceId = ?,
                       operationId = ?,
                       occurrenceOperationDate = to_date(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       value = ?,
                       costCenterId = ?,
                       comments = ?,
                       bankReturnCode = ?,
                       isAccounted = ?
                 WHERE occurrenceOperationId  = ?';

        $args = array($data->invoiceId,
                        $data->operationId,
                        $data->occurrenceOperationDate,
                        $data->value,
                        $data->costCenterId,
                        $data->comments,
                        $data->bankReturnCode,
                        $data->isAccounted,
                        $data->occurrenceOperationId);

        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql,$args);
        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;

    }

    /**
     * Delete a record
     *
     * @param $invoiceId (integer): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteOccurrenceOperation($occurrenceOperationId)
    {
            $sql = 'DELETE FROM finOccurrenceOperation
                      WHERE occurrenceOperationId = ?';

        $args = array($occurrenceOperationId);

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql,$args));

        return $result;

    }


    /**
     * List all entries for a invoice
     *
     * @param $invoiceId (int): Primary key for invoice (foreign key for occurrenceOperation)
     */
     public function listOccurrenceOperationData($invoiceId)
     {
            $sql = '     SELECT A.invoiceId,
                                A.occurrenceOperationId, 
                                A.operationId,
                                B.operationTypeId || \': \' || B.description,
                                TO_CHAR(A.occurrenceOperationDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                                creationType,
                                ROUND(A.value, 2),
                                isAccounted
                           FROM finOccurrenceOperation A
                     INNER JOIN finOperation B
                          USING (operationId)
                          WHERE A.invoiceId = ?
                       ORDER BY A.occurrenceOperationDate ';
            
            $args = array($invoiceId);
            $db   = $this->getDatabase();

            $return = $db->query(SAGU::prepare($sql, $args));
            return $return;
     }


    /**
     * List all payments
     *
     * @param: $personId (int): Id for person to list the payments
     *
     * @return (array): Array containing the payments
     *
     */
    public function listPayments($personId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $sql = '     SELECT B.invoiceId,
                            TO_CHAR(B.maturityDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                            B.courseId,
                            A.operationId||\' - \'||(SELECT description
                                                       FROM finOperation
                                                      WHERE finOperation.operationId=A.operationId),
                            TO_CHAR(A.occurrenceOperationDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                            round(A.value, ' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . '),
                            (SELECT bankTaxValue
                               FROM finPolicy
                              WHERE finPolicy.policyId = B.policyId)
                       FROM (SELECT invoiceId,
                                    operationId,
                                    occurrenceOperationDate,
                                    value
                               FROM finOccurrenceOperation 
                              WHERE operationId (SELECT operationId
                                                                   FROM finOperation
                                                                 WHERE operationTypeId = ?)
                            ) AS A
                 INNER JOIN (SELECT invoiceId,
                                    maturityDate,
                                    courseId,
                                    policyId
                          FROM ONLY finReceivableInvoice
                              WHERE personId = ? ) AS B
                      USING (invoiceId)
                   ORDER BY occurrenceOperationDate DESC';

        $db = $this->getDatabase();
        
        if (sagu::checkParameter('PAYMENT_OPERATION_GROUP_ID'))
        {
            $args = array(SAGU::getParameter('FINANCE', 'PAYMENT_OPERATION_GROUP_ID'), $personId);
            $return = $db->query(SAGU::prepare($sql, $args));
            return $return;
        }
        else
        {
            $MIOLO->error(_M('O parâmetro que indica o grupo de operações de pagamento não está configurado, por favor, verifique as configurações do financeiro.', $module));
            return false;
        }
    }
    
    /**
     * Get a sum for all payments
     *
     * @param: $personId (int): Id for person to list the payments
     *
     * @return (array): Array containing the payments
     *
     */
    public function getTotalPayments($personId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $sql = '     SELECT round(sum(A.value), ' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . ')
                       FROM (SELECT invoiceId,
                                    value
                               FROM finOccurrenceOperation 
                              WHERE operationId IN (SELECT operationId 
                                                                        FROM finOperation
                                                                      WHERE operationTypeId = ?)
                            ) AS A
                 INNER JOIN (SELECT invoiceId
                          FROM ONLY finReceivableInvoice
                              WHERE personId = ? ) AS B
                      USING (invoiceId) ';
        $db = $this->getDatabase();
        
        if (sagu::checkParameter('PAYMENT_OPERATION_GROUP_ID'))
        {
            $args = array(SAGU::getParameter('FINANCE', 'PAYMENT_OPERATION_GROUP_ID'), $personId);

            $return = $db->query(SAGU::prepare($sql, $args));
            if (is_array($return[0]))
            {
                return $return[0][0];
            }
            else
            {
                return SAGU::formatNumber('0');
            }
        }
        else
        {
            $MIOLO->error(_M('O parâmetro que indica o grupo de operações de pagamento não está configurado, por favor, verifique as configurações do financeiro.', $module));
            return false;
        }
    }
}
?>
