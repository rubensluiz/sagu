<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finBank table
 *
 * @author Rudi Uhrig Neto [rudi@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @since
 * Class created on 22/12/2005
 *
 **/

/**
 * Class to manipulate the Bank table
 **/
class BusinessFinanceBusBank extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param $onlySupported boolean Retornar apenas bancos com suporte à importacao
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listBank($onlySupported = false)
    {
        $sql = ' SELECT A.bankId,
                        A.description
                   FROM finBank A
               ORDER BY 2, 1 ';

        $db = $this->getDatabase();
        
        $return = $db->query($sql);

        // Filtra apenas bancos suportados
        if ( $onlySupported )
        {
            foreach ( (array) $return as $key => $val )
            {
                list($bankId) = $val;
                if ( !ReturnInvoice::returnExists($bankId) )
                {
                    unset($return[$key]);
                }
            }
        }
        
        return $return;
    }


    /**
     * Return a specific record from the database
     *
     * @param $paymentPlaceId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getBank($bankId)
    {
        $sql = 'SELECT A.bankId,
                       A.description,
                       A.bankIdVd,
                       A.tamanhoCampoAgencia,
                       A.tamanhoDvAgencia,
                       A.mascaraAgencia,
                       A.tamanhoCampoConta,
                       A.tamanhoDvConta,
                       A.mascaraConta,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\')
                  FROM finBank A
                 WHERE A.bankId = ? ';

        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql,$bankId);

        $result = $db->query($sqls);
        

        $bank = new FinBank();

        list ( $bank->bankId,
               $bank->description,
               $bank->bankIdVd,
               $bank->tamanhoCampoAgencia,
               $bank->tamanhoDvAgencia,
               $bank->mascaraAgencia,
               $bank->tamanhoCampoConta,
               $bank->tamanhoDvConta,
               $bank->mascaraConta,
               $bank->userName,
               $bank->dateTime ) = $result[0];

        return $bank;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @last modification: William Prigol Lopes [william@solis.coop.br]
     *                     Make the search capable to get partial words with % in varchar fields
     *
     * @return (array): An array containing the search results
     **/
    public function searchBank($data)
    {
        $sql = 'SELECT A.bankId,
                       A.bankIdVd,
                       A.description,
                       A.tamanhoCampoAgencia,
                       A.tamanhoDvAgencia,
                       A.mascaraAgencia,
                       A.tamanhoCampoConta,
                       A.tamanhoDvConta,
                       A.mascaraConta
                  FROM finBank A';

        $where = '';
        unset($args);
        if ( strlen($data->bankId) > 0 )
        {
            $where .= '    AND   A.bankId ILIKE ?';
            $args[] = $data->bankId.'%';
        }
        if ( strlen($data->description) > 0 )
        {
            $where .= '    AND   A.description ILIKE ?';
            $args[] = $data->description.'%';
        }
        if ( strlen($data->bankIdVd) > 0 )
        {
            $where .= '    AND   A.bankIdVd ILIKE ?';
            $args[] = $data->bankIdVd.'%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where,8) .
                    ' ORDER BY A.bankId';

            $db     = $this->getDatabase();
            $sqls   = SAGU::prepare($sql,$args);
            $result = $db->query($sqls);
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertBank($data)
    {
        $db = $this->getDatabase();

        $sql = 'INSERT INTO finBank
                            (bankId,
                             description,
                             bankIdVd,
                             tamanhoCampoAgencia,
                             tamanhoDvAgencia,
                             mascaraAgencia,
                             tamanhoCampoConta,
                             tamanhoDvConta,
                             mascaraConta)
                        VALUES (?,?,?,?,?,?,?,?,?)';

        $args = array($data->bankId,
                      $data->description,
                      $data->bankIdVd,
                      $data->tamanhoCampoAgencia,
                      $data->tamanhoDvAgencia,
                      $data->mascaraAgencia,
                      $data->tamanhoCampoConta,
                      $data->tamanhoDvConta,
                      $data->mascaraConta);
                
        $return = $db->execute(SAGU::prepare($sql, $args));
        return $return;

    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateBank($data)
    {
        $sql = 'UPDATE finBank
                   SET description = ?,
                       bankIdVd = ?,
                       tamanhoCampoAgencia = ?,
                       tamanhoDvAgencia = ?,
                       mascaraAgencia = ?,
                       tamanhoCampoConta = ?,
                       tamanhoDvConta = ?,
                       mascaraConta = ?
                 WHERE bankId  = ?';

        $args = array($data->description,
                      $data->bankIdVd,
                      $data->tamanhoCampoAgencia,
                      $data->tamanhoDvAgencia,
                      $data->mascaraAgencia,
                      $data->tamanhoCampoConta,
                      $data->tamanhoDvConta,
                      $data->mascaraConta,
                      $data->bankId);

        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql,$args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }
        //$this->checkError($db);
        

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $bankId(string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteBank($bankId)
    {    	
        $sql = 'DELETE FROM finBank
                      WHERE bankId = ?';

        $args = is_array($bankId) ? $bankId : array($bankId);

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql,$args));        

        return $result;
    }


}
?>
