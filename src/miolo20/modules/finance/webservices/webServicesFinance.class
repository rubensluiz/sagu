<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class responsible for storing the functions of login.
 *
 * @author Samuel Koch [samuel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 *
 * @since
 * Class created on 29/07/2009
 *
 **/

/**
 * Form to manipulate a login
 **/

class webServicesFinance
{
    private $MIOLO;

    public function __construct()
    {
        global $MIOLO;

        chdir('../');

        $_SERVER['REQUEST_URI'] = 'module=finance';

        require_once 'classes/support.inc';
        require_once 'classes/miolo.class';

        $this->MIOLO = MIOLO::getInstance();

        $this->MIOLO->conf = new MConfigLoader();
        $this->MIOLO->conf->LoadConf();

        $this->MIOLO->Init();
        $this->MIOLO->Uses('classes/sagu.class', 'basic');
    }

    /**
     * Funcao webservices que retorna a situacao financeira de um aluno
     *
     * @param int $personId Filtro de codigo de pessoa
     *
     * @return array Retorna um vetor com os titulos de um aluno
     **/
    public function wsGetFinancialSituation($personId)
    {
        $busReceivableInvoice = new BusinessFinanceBusReceivableInvoice();

        $filters = new stdClass();
        $filters->personId = $personId;
        $filters->onlyOpen = DB_TRUE;
        $wsFinancialSituation = $busReceivableInvoice->listInvoicesForPerson($filters);

        if ( (count($wsFinancialSituation) > 0) )
        {
            foreach ( $wsFinancialSituation as $value )
            {
                $finacialSituation->invoiceId = $value[0];
                $finacialSituation->emissionDate = $value[5];
                $finacialSituation->maturityDate = $value[6];
                $finacialSituation->value = $value[8];
                $finacialSituation->updateTime = $value[9];
                $finacialSituation->balance = $value[10];

                $finacialSituations[] = $finacialSituation;
            }
        }
        return $finacialSituations;
    }

    /**
     * Funcao que verifica os debitos de um contrato
     *
     * @param int $contratId Filtro de contrato
     *
     * @return bool Retorna verdadeiro se o aluno possui debitos
     **/
    public function wsCheckDefaulter($contractId)
    {
        $busContract = new BusinessAcademicBusContract();
        $busEnrollConfig = new BusinessAcademicBusEnrollConfig();
        $busGeneralQueries = new BusinessFinanceBusGeneralQueries();

        $wsContract = $busContract->getContract($contractId);
        $enrollConfig = $busEnrollConfig->getCourseEnrollConfig($wsContract->courseId, $wsContract->courseVersion, $wsContract->turnId, $wsContract->unitId);

        if ( ($enrollConfig->blockDebt == DB_TRUE) && (SAGU::getParameter('BASIC', 'MODULE_FINANCE_INSTALLED') == 'YES') )
        {
            $wsGeneralQueries = $busGeneralQueries->getDefaulterDebt($contractId);

            if ( $wsGeneralQueries > 0 )
            {
                $debts = true;
            }
            else
            {
                $debts = false;
            }
        }
        else
        {
            $debts = false;
        }

        return $debts;
    }

    /**
     * Funcao que retorna um vetor com as previsoes de lancamento
     *
     * @param int $incomeforecastId optional Filtro de codigo de previsão de lancamento
     * @param int $personid optional Filtro de codigo de pessoa
     * @param string $recordDate optional Filtro de data de criacao do registro
     * @param float $value optional Filtro de valor da previsao de lancamento
     *
     * @return string JSON bidimensional array of string
     */
    public function wsSearchIncomeForecast($incomeForecastId = null, $personId = null, $recorDate = null, $value = null)
    {
    	$module = 'finance';
    	$busIncomeForecast = new BusinessFinanceBusIncomeForecast();

        if ( (strlen($incomeForecastId) > 0) || (strlen($personId) > 0) || (strlen($recorDate) > 0) || (strlen($value) > 0) )
        {
            $filter = new stdClass();
            $filter->incomeForecastId = $incomeForecastId;
            $filter->personId = $personId;
            $filter->recordDate = $recordDate;
            $filter->value = $value;

            $wsIncomeForecast = $busIncomeForecast->searchIncomeForecast($filter);

            return json_encode($wsIncomeForecast);
        }
        else
        {
            return null;
        }
    }

    /**
     * Funcao que retorna um vetor contendo as informações dos titulos criados no sagu
     *
     * @param int $invoiceId optional Filtro de codigo do título
     * @param int $personId optional Filtro de codigo da pessoa
     * @param string $emissionDate optional Filtro de data de emissao
     * @param string $maturityDate optional Filtro de data de vencimento
     * @param float $value optional Filtro de valor to titulo
     * @param bool $isCanceled optional Filtro de titulo cancelado titulo esta cancelado
     * @param bool $isImported optional Filtro de titulo que ja foi processado em outro sistema
     *
     * @return string JSON format array of array
     */
    public function wsSearchInvoices($invoiceId = null, $personId = null, $emissionDate = null, $maturityDate = null, $value = null, $isCanceled = null, $isImported = null)
    {
        $module = 'finance';

        $busInvoice = new BusinessFinanceBusInvoice();
        $busIncomeForecast = new BusinessFinanceBusIncomeForecast();
        $busDefaultOperation = new BusinessFinanceBusDefaultOperations();

        if ( (strlen($invoiceId) > 0) || (strlen($personId) > 0) || (strlen($emissionDate) > 0) || (strlen($maturityDate) > 0) || (strlen($value) > 0) || (strlen($isCanceled) > 0) || (strlen($isImported) > 0) )
        {
            $filter = new stdClass();
            $filter->invoiceId = $invoiceId;
            $filter->personId = $personId;
            $filter->emissionDate = $emissionDate;
            $filter->maturityDate = $maturityDate;
            $filter->value = $value;
            $filter->isCanceled = $isCanceled;
            $filter->isImported = $isImported;
        }

        $wsInvoice = $busInvoice->searchInvoice($filter);

        return json_encode($wsInvoice);
    }

    /**
     * Funcao webservices que recebe confirmacoes de pagamento do DOXA
     *
     * @param int $idTituloSagu Valor que corresponde ao codigo do titulo do Sagu
     * @param float $valorTotal Valor que corresponde ao valor total do titulo
     * @param float $valorPago Valor que corresponde ao valor pago
     * @param float $valor
     *
     * @return bool Retorna verdadeiro se inseriu o pagamento.
     */
    public function receiptsForPayment($idTituloSagu, $valorTotal, $valorPago, $valor)
    {
        $module = 'finance';
        $busInvoice = new BusinessFinanceBusInvoice();
        $busEntry = new BusinessFinanceBusEntry();
        $busDefaultOperation = new BusinessFinanceBusDefaultOperations();
        $operations = $busDefaultOperation->getDefaultOperations();

        $std = new stdClass();
        $std->invoiceId = trim($idTituloSagu);
        $std->total = trim($valorTotal);
        $std->amountPaid = trim($valorPago);
        $std->value = trim($valor);

        $invoice = $busInvoice->getInvoice($std->invoiceId);
        $value = $invoice->value;

        $invoiceValue = $busInvoice->getInvoiceBalance($std->invoiceId);
        
        if ( $invoiceValue > 0 )
        {
            if ( $std->amountPaid > $value )
            {
                $difValue = number_format(($std->amountPaid - $value), 2, '.', '');

                //inserir um novo lancamento do tipo juro/multa
                $data2 = new stdClass();
                $data2->invoiceId = $std->invoiceId;
                $data2->operationId = $operations->interestOperation; //operacao de juro/multa
                $data2->entryDate = date("d/m/yy");
                $data2->value = $difValue;
                $data2->costCenterId = $invoice->costCenterId;
                $data2->comments = "Valor com acréscimo do DOXA";

                $okEntry = $busEntry->insertEntry($data2);
            }
            elseif ( $std->amountPaid < $value )
            {
               //inserir um novo lancamento de desconto
                $difValue = number_format(($value - $std->amountPaid), 2, '.', '');

                $data2 = new stdClass();
                $data2->invoiceId = $std->invoiceId;
                $data2->operationId = $operations->discountOperation; //operacao de desconto
                $data2->entryDate = date("d/m/yy");
                $data2->value = $difValue;
                $data2->costCenterId = $invoice->costCenterId;
                $data2->comments = "Valor com desconto do DOXA";

                $okEntry = $busEntry->insertEntry($data2);
            }

            $data = new stdClass();
            $data->invoiceId = $std->invoiceId;
            $data->operationId = $operations->paymentOperation; //operacao de pagamento
            $data->entryDate = date("d/m/yy");
            $data->value = $std->amountPaid;
            $data->costCenterId = $invoice->costCenterId;
            $data->comments = "Valo pago do DOXA";

            $okEntry = $busEntry->insertEntry($data);
        }
        else
        {
            return 'Título já pago';
        }

        return $okEntry;
    }

    /**
     * Funcao para geracao de boletos
     *
     * @param int $invoiceId Filtro de codigo de titulo
     *
     * @return
     */
    public function wsGetInvoicePDF($invoiceId)
    {
        $MIOLO = MIOLO::getInstance();

        $MIOLO->uses('classes/IntegrationSAGUSAB.class', 'finance');
        $integrationSAGUSAB = new IntegrationSAGUSAB($invoiceId);
        $integrationSAGUSAB->generateInvoice();

        $data = new stdClass();
        $data->error = array();
        if ( $integrationSAGUSAB->hasErrors )
        {
        	for ( $i=0; $i<count($integrationSAGUSAB->errors); $i++ )
        	{
        	   $data->error[] = $integrationSAGUSAB->errors[$i];
        	}
        }
        else
        {
            if ( $integrationSAGUSAB->online )
            {
            	$data->online = true;
            	$data->link = $integrationSAGUSAB->link;
            }
            else
            {
            	$data->online = false;
            	$data->base64data = base64_encode(file_get_contents($integrationSAGUSAB->fileName));
            }
        }

        return $data;
    }

    /**
     * Funcao que que registra se um titulo ja foi importado pelo sistema
     *
     * @param int $invoiceId Filtro de codigo de titulo
     * @param bool $isImported Valor TRUE ou FALSE que representa se o titulo ja foi importado
     *
     * @return bool Retorna verdade se alteracao realizada com sucesso
     */
    public function setInvoiceImported($invoiceId, $isImported)
    {
        $busInvoice = new BusinessFinanceBusInvoice();

        $okImported = $busInvoice->updateInvoiceImported($invoiceId, $isImported);

        return $okImported;
    }
}
?>
