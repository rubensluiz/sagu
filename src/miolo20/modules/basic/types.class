<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 02/08/2005
 *
 **/

/**
 * Basic database classes
 */

class BasPerson extends BasLog
{
    public $personId;
    public $personDv;
    public $personMask;
    public $personName;
    public $name;
    public $shortName;
    public $zipCode;
    public $cityId;
    public $location;
    public $locationTypeId;
    public $locationType;
    public $number;
    public $complement;
    public $neighborhood;
    public $email;
    public $emailAlternative;
    public $url;
    public $mioloUserName;
    public $password;
    public $dateIn;
    public $isAllowPersonalData = DB_TRUE;
    public $stateId; //not in DB
    public $uploadFile; //not in DB
    public $timeStamp; //not in DB
    public $sentEmail = DB_FALSE;
    
    /**
     * miolo_user.userid
     *
     * @var int
     */
    public $mioloIdUser;
    
    public $mioloLogin;
    public $mioloPassword;
    public $photoId;
}

class BasLegalPerson extends BasPerson
{
    public $fakeName;
    public $cnpj;
    public $stateRegistration;
    public $cityRegistration;
    public $legalPersonTypeId;
    public $phone;
    public $fax;
    public $isPublic;
    public $aliquota;
    public $codigoServicoPrestado;
}

class BasPhysicalPerson extends BasPerson
{
    public $sex;
    public $maritalStatusId;
    public $residentialPhone;
    public $workPhone;
    public $cellPhone;
    public $messagePhone;
    public $messageContact;
    public $dateBirth;
    public $cityIdBirth;
    public $countryIdBirth;
    public $responsableLegalId;
    public $carPlate;
    public $specialNecessityId;
    public $specialNecessityDescription;
    public $cityIdWork;
    public $zipCodeWork;
    public $locationWork;
    public $locationTypeIdWork;
    public $complementWork;
    public $neighborhoodWork;
    public $ethnicOriginId;
    public $dateDeath;
    public $personTitleId;
    public $workEmployerName;
    public $workFunction;
    public $workStartDate;
    public $workEndDate;
    public $workAtHome = DB_FALSE;
    public $personCpf;
    public $personRg;
    public $rgOrgan;
    public $motherName;
    public $fatherName;
    public $mioloUserPasswd;
    public $pis;
}

class BasPhysicalPersonStudent extends BasPhysicalPerson
{
    public $externalCourseIdHs;
    public $institutionIdHs;
    public $cityIdHs;
    public $yearHs;
    public $isInsured = DB_FALSE;
    public $passive;
    public $payrollDiscountEmployeeId;
    public $stateIdHs;
}

class BasPhysicalPersonEmployee extends BasPhysicalPerson
{
}

class BasEmployee extends BasLog
{
    public $employeeId;
    public $personId;
    public $externalId;
    public $sectorId;
    public $salary;
    public $valueHour = DB_FALSE;
    public $weeklyhours;
    public $beginDate;
    public $endDate;
    public $employeeTypeId;
    public $employeeTypedescription;
    public $bankId;
    public $bankDescription;
    public $branchNumber;
    public $branchNumberDigit;
    public $accountNumber;
    public $accountNumberDigit;
    public $isActiveAccount = DB_FALSE;
    public $accountType;
    public $clearingHouse;
    public $especialidade;
    public $classe;
    public $nivel;
    public $unitId;
}

class BasEmployeeType extends BasLog
{
    public $employeeTypeId;
    public $description;
}

class BasPhysicalPersonProfessor extends BasPhysicalPerson
{
    const ESCOLARIDADE_SEM_FORMACAO = 1;
    const ESCOLARIDADE_COM_FORMACAO = 2;
    
    const POS_GRAD_NENHUMA = 1;
    const POS_GRAD_ESPECIALIZACAO = 2;
    const POS_GRAD_MESTRADO = 3;
    const POS_GRAD_DOUTORADO = 4;
    
    const SITUACAO_EM_EXERCICIO = 1;
    const SITUACAO_AFASTADO_PARA_QUALIFICACAO = 2;
    const SITUACAO_AFASTADO_PARA_EXERCICIO = 3;
    const SITUACAO_AFASTADO_POR_OUTROS_MOTIVOS = 4;
    
    const REGIME_TRABALHO_TEMPO_INTEGRAL_COM_DE = 1;
    const REGIME_TRABALHO_TEMPO_INTEGRAL_SEM_DE = 2;
    const REGIME_TRABALHO_TEMPO_PARCIAL = 3;
    const REGIME_TRABALHO_HORISTA = 4;
    
    const VINCULO_EM_FOLHA = 1;
    const VINCULO_BOLSISTA = 2;

    public $schedule;
    public $tasks;
    public $escolaridade;
    public $posGraduacao;
    public $situacao;
    public $regimeTrabalho;
    public $substituto;
    public $visitante;
    public $tipoVinculo;

    public static function listarEscolaridade()
    {
        return array(
            self::ESCOLARIDADE_COM_FORMACAO => _M('Com formação de nível superior'),
            self::ESCOLARIDADE_SEM_FORMACAO => _M('Sem formação de nível superior'),
        );
    }
    
    public static function listarPosGraduacao()
    {
        return array(
            self::POS_GRAD_NENHUMA => _M('Não possui pós graduação'),
            self::POS_GRAD_ESPECIALIZACAO => _M('Especialização'),
            self::POS_GRAD_MESTRADO => _M('Mestrado'),
            self::POS_GRAD_DOUTORADO => _M('Doutorado'),
        );
    }
    
    public static function listarSituacao()
    {
        return array(
            self::SITUACAO_EM_EXERCICIO => _M('Em exercício'),
            self::SITUACAO_AFASTADO_PARA_QUALIFICACAO => _M('Afastado para qualificação'),
            self::SITUACAO_AFASTADO_PARA_EXERCICIO => _M('Afastado para exercício em outros órgãos/entidades'),
            self::SITUACAO_AFASTADO_POR_OUTROS_MOTIVOS => _M('Afastado por outros motivos'),
        );
    }
    
    public static function listarRegimeTrabalho()
    {
        return array(
            self::REGIME_TRABALHO_TEMPO_INTEGRAL_COM_DE => _M('Tempo integral com DE'),
            self::REGIME_TRABALHO_TEMPO_INTEGRAL_SEM_DE => _M('Tempo Integral sem DE'),
            self::REGIME_TRABALHO_TEMPO_PARCIAL => _M('Tempo Parcial'),
            self::REGIME_TRABALHO_HORISTA => _M('Horista'),
        );
    }
    
    public static function listarTipoVinculo()
    {
        return array(
            self::VINCULO_EM_FOLHA => _M('Em folha'),
            self::VINCULO_BOLSISTA => _M('Bolsista'),
        );
    }
    
    /*
     * Envia aviso sobre o prazo para registro de frequências
     * Chamado automaticamente pelo BasSystemTask
     */
    public static function notifyFrequenceRegistration(BasSystemTask $bst)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $ok = true;

        $sql = "SELECT MAX(A.personId) AS personId,
                       A.name,
                       F.curricularComponentId,
                       F.name
             FROM ONLY basPhysicalPersonProfessor A
            INNER JOIN acdScheduleProfessor B
                    ON (A.personId = B.professorId)
            INNER JOIN acdSchedule C
                    ON (B.scheduleId = C.scheduleId)
            INNER JOIN acdGroup D
                    ON (C.groupId = D.groupId)
            INNER JOIN acdcurriculum E
                    ON (D.curriculumId = E.curriculumId)
            INNER JOIN acdCurricularComponent F
                    ON (E.curricularComponentId,
                        E.curricularComponentVersion) = (F.curricularComponentId,
                                                         F.curricularComponentVersion)
            INNER JOIN acdLearningPeriod LP
                    ON LP.learningPeriodId = D.learningPeriodId
            INNER JOIN (SELECT S.scheduleId,
                               array_except(S.occurrenceDates, MAX(FE.frequencyDates)) AS occurrenceDates,
                               UNNEST(array_except(S.occurrenceDates, MAX(FE.frequencyDates))) AS frequencia_nao_registrada,
                               MAX(FE.enrollId) AS enrollId
                          FROM acdSchedule S
                    INNER JOIN acdGroup G
                            ON G.groupId = S.groupId
                    INNER JOIN acdEnroll E
                            ON E.groupId = G.groupId
                    INNER JOIN acdLearningPeriod LP
                            ON LP.learningPeriodId = G.learningPeriodId
                    INNER JOIN (SELECT enrollId,
                                       scheduleId,
                                       array_agg(frequencyDate) AS frequencyDates
                                  FROM acdFrequenceEnroll
                              GROUP BY enrollId,
                                       scheduleId) FE
                            ON FE.enrollId = E.enrollId
                           AND FE.scheduleId = S.scheduleId
                           AND NOT FE.frequencyDates @> S.occurrenceDates
                         WHERE G.isclosed IS FALSE
                           AND NOW()::DATE BETWEEN LP.beginDate AND LP.endDate
                      GROUP BY S.scheduleId
                      ORDER BY frequencia_nao_registrada) G
                    ON (G.scheduleId = C.scheduleId)
             LEFT JOIN acdCourseOccurrence CO
                    ON (CO.courseId,
                        CO.courseVersion,
                        CO.turnId,
                        CO.unitId) = (E.courseId,
                                      E.courseVersion,
                                      E.turnId,
                                      E.unitId)
                   AND CO.daysToFrequenceNotification IS NOT NULL
                 WHERE (NOW()::DATE - COALESCE(CO.daysToFrequenceNotification, 0)) >= ANY(G.occurrenceDates)
                   AND D.isClosed IS FALSE
                   AND NOW()::DATE BETWEEN LP.beginDate AND LP.endDate
               GROUP BY A.name, F.curricularComponentId, F.name
               ORDER BY A.name, F.name";

        $result = SDatabase::query($sql);

        $busPerson = new BusinessBasicBusPerson();

        for($i=0; $i<count($result); $i++)
        {
            //Obtem o email da pessoa
            $person = $busPerson->getPerson($result[$i][0]);
            $recipient = array();
            $recipient[$person->name] = $person->email;
            $body = "As frequências das seguintes disciplinas ainda não foram registradas:\n\n";

            $body .= sprintf("Disciplina <b>%s</b> - %s\n",
                                $result[$i][3],
                                $result[$i][2]);

            $ok = $bst->addNotification(array(
                'title' => _M('Aviso de registro de frequências', $module),
                'description' => $body,
                'mail' => array(
                    'recipient' => $recipient,
                ),
            ));
         }
        
        return $ok;
    }
}

class BasCity extends BasLog
{
    public $cityId;
    public $name;
    public $zipCode;
    public $stateId;
    public $countryId;
    public $ibgeId;
    public $fronteirico;
}

class BasCountry extends BasLog
{
    public $countryId;
    public $name;
    public $nationality;
    public $currency;
    public $pluralCurrency;
    public $decimalDescription;
    public $pluralDecimalDescription;
    public $currencySymbol;
    public $fronteirico;
}

class BasLocation extends BasLog
{
    public $locationId;
    public $name;
    public $cityId;
    public $zipCode;
    public $neighborhoodId;
    public $countryId;
    public $countryName;
    public $stateId;
    public $stateName;
}

class BasLocationType extends BasLog
{
    public $locationTypeId;
    public $name;
}

class BasNeighborhood extends BasLog
{
    public $neighborhoodId;
    public $name;
}

class BasLegalPersonType extends BasLog
{
    public $legalPersonTypeId;
    public $description;
}

class BasState extends BasLog
{
    public $stateId;
    public $name;
    public $countryId;
    public $ibgeId;
}

class BasMaritalStatus extends BasLog
{
    public $maritalStatusId;
    public $description;
}

class BasMailServer extends BasLog
{
    public $host;
    public $port;
    public $smtpUser;
    public $smtpPassword;
    public $enableAuth;
    public $secureAuth;
}

class BasConfig extends BasLog
{
    public $moduleConfig;
    public $parameter;
    public $value;
    public $label;
    public $description;
    public $type;
    public $isValueChangeable;
    
    public $filterOnlyUnit;
}

class BasUnit extends BasLog
{
    public $unitId;
    public $description;
    public $accountingCode;
    public $cityId;
    public $location;
    public $locationId;
    public $personId;
}

class BasTurn extends BasLog
{
    public $turnId;
    public $description;
    public $beginHour;
    public $endHour;
    public $shortDescription;
    public $charId;
}

class BasSpecialNecessity extends BasLog
{
    public $specialNecessityId;
    public $description;
    public $easyAccess = DB_FALSE;
    public $accompanimentNeeds;
    public $isPermanent = DB_FALSE;
    public $howMuchWeeks;
    public $beginDate;
}

class BasSector extends BasLog
{
    public $sectorId;
    public $description;
    public $email;
    public $isCoordinatorsSector = DB_FALSE;
}

class BasSectorBoss extends BasLog
{
    public $bossId;
    public $sectorId;
    public $level;
    public $email;
    public $expirationLevel;
    public $isSendEmail = DB_TRUE;
}

class BasCompanyConf extends BasLog
{
    public $companyId;
    public $personId;
    public $name;
    public $acronym;
    public $companyTypeDescription;
    public $legalResponsableId;
}

class BasWeekDay extends BasLog
{
    public $weekDayId;
    public $description;
    public $shortDescription;
}

class BasProfessionalActivity extends BasLog
{
    public $professionalActivityId;
    public $description;
}

class BasProfessionalActivityPeople extends BasLog
{
    public $professionalActivityPeopleId;
    public $professionalActivityId;
    public $personId;
    public $legalPersonId;
    public $beginDate;
    public $endDate;
    public $professionalActivityLinkTypeId;
    public $professionalActivityAgentId;
}

class BasProfessionalActivityAgent extends BasLog
{
    public $professionalActivityAgentId;
    public $description;
}

class BasProfessionalActivityLinkType extends BasLog
{
    public $professionalActivityLinkTypeId;
    public $description;
    public $notifyCompany = DB_FALSE;
}

class BasDocumentType extends BasLog
{
    const NACIONALIDADE_BRASILEIROS = 'B';
    const NACIONALIDADE_ESTRANGEIROS = 'E';
    const NACIONALIDADE_ESTRANGEIROS_FRONTEIRICOS = 'F';
    const NACIONALIDADE_TODOS = 'T';

    public $documentTypeId;
    public $name;
    public $mask;
    public $sex;
    public $personType;
    public $minAge;
    public $maxAge;
    public $needDeliver = DB_TRUE;    
    public $shortDescription;
    public $isBlockEnroll = DB_TRUE;
    public $fillHint;
    public $exigePreenchimento = DB_TRUE;
    public $validaConteudo = DB_TRUE;
    public $registroModuloResidency = DB_FALSE;
    public $registroModuloPedagogico = DB_FALSE;
    public $registroModuloResmedica = DB_FALSE;
    public $informarpendencianoportal = DB_FALSE;
    public $limiteDeDiasParaBloquear;
    public $nacionalidade;
    
}

class BasDocument extends BasLog
{
    public $personId;
    public $documentTypeId;
    public $content;
    public $isDelivered = DB_FALSE;
    public $obs;
    public $cityId;
    public $organ;
    public $dateExpedition;
    public $isExcused = DB_FALSE;
}

class BasLink
{
    public $linkId;
    public $description;
    public $level;
    public $isVisibleToPerson;
    public $isOperator;
}

class BasLog
{
    public $userName;
    public $dateTime;
    public $ipAddress;
}

class BasAgataQuery
{
    public $agataQueryId;
    public $agataQueryPath;
    public $module;
    public $name;
    public $description;
}

class BasEthnicOrigin
{
    public $ethnicOriginId;
    public $description;
}

class BasCitySquare
{
    public $cityId;
    public $square;
}

class BasCvsLog
{
    public $cvsLogId;
    public $tableName;
    public $fieldName;
    public $oldValue;
    public $tablePkey;
    public $tablePkeyValue;
}

class BasPersonLink
{
    public $personId;
    public $linkId;
    public $dateValidate;
}

class BasAccess
{
    public $login;
    public $moduleAccess;
    public $label;
    public $image;
    public $handler;
    public $isBookmark = DB_FALSE;
}

class BasStamp extends BasLog
{
    public $stampId;
    public $personId;
    public $personName;
    public $functionDescription;
    public $register;
}

class BasEmail extends BasLog
{
    public $emailId;
    public $description;
    public $from;
    public $bcc;
    public $subject;
    public $body;
}

class BasPersonTitle extends BasLog
{
    public $personTitleId;
    public $description;
}

class BasReport extends BasLog
{
    public $reportId;
    public $name;
    public $description;
    public $modules;
    public $enabled = DB_FALSE;
    public $sql;
    public $fileId;
    public $parameterorder;
}

class BasReportParameter extends BasLog
{
    public $reportParameterId;
    public $reportId;
    public $label;
    public $parameterNumber;
    public $fieldType;
    public $fixedOptions = DB_TRUE;
    public $options;
    public $defaultValue;
    public $size;
    public $fieldColumns;
    public $fieldRows;
    public $fieldValidator;
    public $hint;
    public $help;
    public $nomecampopersonalizado;
}

class BasKinship extends BasLog
{
    public $kinshipId;
    public $description;
    public $required;
}

class BasPhysicalPersonKinship extends BasLog
{
    public $personId;
    public $kinshipId;
    public $relativePersonId;
    public $obs;
}

class BasResetPassword extends BasLog
{
    public $resetPasswordId;
    public $confirmHash;
    public $requestDate;
    public $idUser;
    public $resetDate;
    public $expirationDate;
}
?>
