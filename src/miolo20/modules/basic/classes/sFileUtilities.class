<?php

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Description of sFileUtilities
 *
 * @author augusto
 */
class sFileUtilities 
{
    /**
     * @var String 
     */
    public $fileName;
    
    /**
     * @var String
     */
    public $fileDir;
    
    /**
     * @var array
     */
    public $nameOfFiles = array();
    
    /**
     * @var String
     */
    public $searchFiles = null;
    
    /**
     * Método construtor.
     */
    public function __construct($fileName, $fileDir) 
    {
        $this->fileName = $fileName;
        $this->fileDir  = $fileDir;
    }
    
    /**
     * Utilitário para zipar arquivos em lote.
     */
    public function zipFiles()
    {
        $MIOLO = MIOLO::getInstance();
               
        try
        {
            if ( strlen($this->fileDir) > 0 && strlen($this->fileName) > 0 )
            {
                $zip = new ZipArchive();
                             
                if ( $zip->open($this->fileDir . $this->fileName, ZIPARCHIVE::CREATE) !== TRUE ) 
                {
                    throw new Exception(_M("Erro ao criar arquivo .zip."));
                }
                
                foreach ( new DirectoryIterator($this->fileDir) as $fileInfo ) 
                {
                    $valid = substr($fileInfo->getFilename(), 0, 1);
                    
                    if ( $valid != '.' )
                    {
                        $zipKey = false;
                        $file   = $this->fileDir . $fileInfo->getFilename();
                        
                        //Verifica quais arquivos deve compactar
                        if ( count($this->nameOfFiles) > 0 )
                        {
                            $zipKey = (in_array($file, $this->nameOfFiles));
                        }

                        if ( !is_null($this->searchFiles) )
                        {
                            $found = split($this->searchFiles, $file);
                            $zipKey = ((count($found) > 1));
                        }

                        if ( $zipKey )
                        {          
                            $this->nameOfFiles[] = $file;
                                                   
                            // Retirado o diretório, dentro do zip
                            $nameFile = str_replace($this->fileDir, "", $file);
                            $zip->addFile(realpath($file), $nameFile);
                        }
                    }
                }
                
                $zip->close();
            }
            else
            {
                throw new Exception(_M("Diretório e nome do arquivo não informados."));
            }
        }
        catch ( Exception $e )
        {
            $MIOLO->error($e);
        }
    }
    
    /**
     * Exclui todos os arquivos.
     */
    public function unlinkFiles()
    {
        if ( count($this->nameOfFiles) > 0 )
        {
            foreach ( $this->nameOfFiles as $key )
            {
                unlink($key);
            }
        }
    }
    
    /**
     * Efetua download do arquivo para "client size".
     */
    public function downloadFile()
    {
        $file = $this->fileDir . $this->fileName;
        
        if ( file_exists($file) ) 
        {
            header('Content-Description: File Transfer'); 
            header('Content-Disposition: attachment; filename="' . $this->fileName . '"');
            header('Content-Type: application/octet-stream');
            header('Content-Transfer-Encoding: binary');
            header('Content-Length: ' . filesize($file));
            header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
            header('Pragma: public');
            header('Expires: 0'); 
            ob_clean();
            
            readfile($file);

            unlink($this->fileDir . $this->fileName);
            
            exit;
        }
    } 
}

?>
