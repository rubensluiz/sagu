<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Classe com validadores diversos em PHP
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 19/09/2011
 */

class SValidator
{
    /**
     *
     * @var SType
     */
    private $sourceType;
    
    /**
     *
     * @var string
     */
    private $currentField;
    
    /**
     * @var array
     */
    private $args;
    
    /**
     *
     * @return SType
     */
    public function getSourceType() {
        return $this->sourceType;
    }

    public function setSourceType($sourceType) {
        $this->sourceType = $sourceType;
    }

    public function getCurrentField() {
        return $this->currentField;
    }

    public function setCurrentField($currentField) {
        $this->currentField = $currentField;
    }
    
    public function getArgs() {
        return $this->args;
    }

    public function setArgs($args) {
        $this->args = $args;
    }

    public function minLength($value)
    {
        $min = $this->getArgs();
    }
    
    public function maxLength($value)
    {
        $max = $this->getArgs();
    }
    
    public function inList($value)
    {
        $list = $this->getArgs();
    }
    
    /**
     * Retorna se email é válido
     *
     *
     * @param string $email
     * @return boolean
     * @see http://www.addedbytes.com/lab/email-address-validation/
     */
    public static function email($email)
    {
        // First, we check that there's one @ symbol, and that the lengths are right
        if ( ! ereg("^[^@]{1,64}@[^@]{1,255}$", $email) )
        {
            // Email invalid because wrong number of characters in one section, or wrong number of @ symbols.
            return false;
        }
        // Split it into sections to make life easier
        $email_array = explode("@", $email);
        $local_array = explode(".", $email_array[0]);
        for ( $i = 0; $i < sizeof($local_array); $i++ )
        {
            if (!ereg("^(([A-Za-z0-9!#$%&'*+/=?^_`{|}~-][A-Za-z0-9!#$%&'*+/=?^_`{|}~\.-]{0,63})|(\"[^(\\|\")]{0,62}\"))$", $local_array[$i]))
            {
                return false;
            }
        }
        if ( !ereg("^\[?[0-9\.]+\]?$", $email_array[1]) )
        { // Check if domain is IP. If not, it should be valid domain name
            $domain_array = explode(".", $email_array[1]);
            if ( sizeof($domain_array) < 2 )
            {
                return false; // Not enough parts to domain
            }
            for ( $i = 0; $i < sizeof($domain_array); $i++ )
            {
                if (!ereg("^(([A-Za-z0-9][A-Za-z0-9-]{0,61}[A-Za-z0-9])|([A-Za-z0-9]+))$", $domain_array[$i]))
                {
                    return false;
                }
            }
        }

        return true;
    }
}
?>