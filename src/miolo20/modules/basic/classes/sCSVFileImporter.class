<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 11/06/2012
 *
 **/
$MIOLO = MIOLO::getInstance();
$MIOLO->uses('classes/bCSVFileImporter.class.php', 'base');

class sCSVFileImporter extends bCSVFileImporter
{
    /**
     * Unidade que esta sendo importada
     *
     * @var int
     */
    private $unitId;
    
    /**
     *
     * @var string
     */
    private $observation;
    
    /**
     * @var int
     */
    private $csvImportationId;
    
    /**
     * @var string
     */
    private $importationType;
    
    /**
     *
     * @var int
     */
    private $fileId;
    
    /**
     * @return boolean
     */
    private $hasErrors = false;
    
    /**
     *
     * @var boolean
     */
    private $logErrors = true;
    
    /**
     * Exibe andamento da importacao no terminal
     * 
     * @var boolean
     */
    private $showProgress = false;
    
    /**
     * @var string
     */
    private $initTime;
    
    /**
     * @var string
     */
    private $lastShowStatus;
    
    public $busList = array();
    public $cacheSearch = array();
    public $enrollStatusDetailed = array();
    public $detailedEnrollStatusList = array();
    public $ignoreLines = array();
    public $indexSearchCache = array();
    
    /**
     * Datahora de inicio de execucao do script
     * 
     * @var string
     */
    public $startedTime;
    
    /**
     * @var BusinessAcademicBusContract
     */
    public $busContract;
    
    /**
     * @var BusinessAcademicBusClassPupil
     */
    public $busClassPupil;
    
    /**
     * @var BusinessAcademicBusClass
     */
    public $busClass;
    
    /**
     * @var BusinessBasicBusDocument
     */
    public $busDocument;
    
    /**
     * @var BusinessBasicBusEmployee
     */
    public $busEmployee;
    
    /**
     * @var BusinessAcademicBusEnroll
     */
    public $busEnroll;

    /**
     * @var BusinessAcademicBusEnrollStatus
     */
    public $busEnrollStatus;
    
    /**
     * @var BusinessBasicBusPhysicalPerson
     */
    public $busPhysicalPerson;
    
    /**
     * @var BusinessBasicBusPhysicalPersonProfessor
     */
    public $busPhysicalPersonProfessor;

    /**
     * @var BusinessBasicBusPhysicalPersonStudent
     */
    public $busPhysicalPersonStudent;
    
    /**
     * @var BusinessBasicBusPhysicalPersonEmployee
     */
    public $busPhysicalPersonEmployee;
    
    /**
     * @var BusinessAcademicBusMovementContract
     */
    public $busMovementContract;
    
    /**
     * @var BusinessAcademicBusCourseOccurrence
     */
    public $busCourseOccurrence;
    
    /**
     * @var BusinessAcademicBusCurricularComponent
     */
    public $busCurricularComponent;

    /**
     * @var BusinessAcademicBusCurriculum
     */
    public $busCurriculum;

    /**
     * @var BusinessAcademicBusCurriculumLink
     */
    public $busCurriculumLink;
    
    /**
     * @var BusinessAcademicBusLearningPeriod
     */
    public $busLearningPeriod;
    
    /**
     *
     * @var AcdContract
     */
    public $typeContract;
    
    /**
     *
     * @var AcdEnroll
     */
    public $typeEnroll;

    /**
     *
     * @var AcdReconhecimentoDeCurso
     */
    public $typeReconhecimentoDeCurso;

    /**
     *
     * @var BusinessAcademicBusFormationLevel
     */
    public $busFormationLevel;

    /**
     *
     * @var BusinessAcademicBusCenter
     */
    public $busCenter;

    /**
     *
     * @var BusinessAcademicBusKnowledgeArea
     */
    public $busKnowledgeArea;

    /**
     *
     * @var BusinessAcademicBusEducationArea
     */
    public $busEducationArea;

    /**
     *
     * @var BusinessAcademicBusCourse
     */
    public $busCourse;

    /**
     *
     * @var BusinessAcademicBusCourseVersion
     */
    public $busCourseVersion;

    /**
     *
     * @var BusinessAcademicBusCourseVersionType
     */
    public $busCourseVersionType;

    /**
     *
     * @var BusinessAcademicBusCurricularComponentGroup
     */
    public $busCurricularComponentGroup;

    /**
     *
     * @var BusinessAcademicBusCurriculumType
     */
    public $busCurriculumType;

    /**
     *
     * @var BusinessAcademicBusCurricularComponentType
     */
    public $busCurricularComponentType;

    /**
     *
     * @var BusinessFinanceBusReceivableInvoice
     */
    public $busReceivableInvoice;

    /**
     *
     * @var BusinessFinanceBusEntry
     */
    public $busEntry;

    /**
     *
     * @var BusinessFinanceBusBankInvoiceInfo
     */
    public $busBankInvoiceInfo;

    /**
     *
     * @var BusinessFinanceBusDefaultOperations
     */
    public $busDefaultOperations;

    /**
     *
     * @var BusinessFinanceBusIncentive
     */
    public $busIncentive;

    /**
     *
     * @var BusinessFinanceBusConvenant
     */
    public $busConvenant;

    /**
     *
     * @var BusinessFinanceBusConvenantPerson
     */
    public $busConvenantPerson;

    /**
     *
     * @var BusinessFinanceBusBankAccount
     */
    public $busBankAccount;

    /**
     *
     * @var BusinessFinanceBusBank
     */
    public $busBank;
    
    /**
     *
     * @var BusinessBasicBusUnit
     */
    public $busUnit;
    
    /**
     * 
     * @var BusinessBasicBusCountry
     */
    public $busCountry;

    /*
     * 
     * @var BusinessAcademicMensagemDeAvaliacaoDosAlunos
     */
    public $busMensagemDeAvaliacaoDosAlunos;
    
    /*
     * 
     * @var BusinessAcademicTestEndCourseType
     */
    public $busTestEndCourseContractType;
    
    /*
     * 
     * @var BusinessBasicBasTurn
     */
    public $busTurn;
    
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        
        $this->busContract = new BusinessAcademicBusContract();
        $this->busClass = new BusinessAcademicBusClass();
        $this->busClassPupil = new BusinessAcademicBusClassPupil();
        $this->busDocument = new BusinessBasicBusDocument();
        $this->busEmployee = new BusinessBasicBusEmployee();
        $this->busEnroll = new BusinessAcademicBusEnroll();
        $this->busEnrollStatus = new BusinessAcademicBusEnrollStatus();
        $this->busPhysicalPerson = new BusinessBasicBusPhysicalPerson();
        $this->busPhysicalPersonProfessor = new BusinessBasicBusPhysicalPersonProfessor();
        $this->busPhysicalPersonStudent = new BusinessBasicBusPhysicalPersonStudent();
        $this->busPhysicalPersonEmployee = new BusinessBasicBusPhysicalPersonEmployee();
        $this->busMovementContract = new BusinessAcademicBusMovementContract();
        $this->busCourseOccurrence = new BusinessAcademicBusCourseOccurrence(true);
        $this->busCurricularComponent = new BusinessAcademicBusCurricularComponent();
        $this->busCurriculum = new BusinessAcademicBusCurriculum();
        $this->busCurriculumLink = new BusinessAcademicBusCurriculumLink();
        $this->busLearningPeriod = new BusinessAcademicBusLearningPeriod();
        $this->busFormationLevel = new BusinessAcademicBusFormationLevel();
        $this->busCenter = new BusinessAcademicBusCenter();
        $this->busKnowledgeArea = new BusinessAcademicBusKnowledgeArea();
        $this->busEducationArea = new BusinessAcademicBusEducationArea();
        $this->busCourse = new BusinessAcademicBusCourse();
        $this->busCourseVersion = new BusinessAcademicBusCourseVersion();
        $this->busCourseVersionType = new BusinessAcademicBusCourseVersionType();
        $this->typeContract = new AcdContract();
        $this->typeEnroll = new AcdEnroll();   
        $this->typeReconhecimentoDeCurso = new AcdReconhecimentoDeCurso();
        $this->busCurricularComponentGroup = new BusinessAcademicBusCurricularComponentGroup();
        $this->busCurriculumType = new BusinessAcademicBusCurriculumType();
        $this->busCurricularComponentType = new BusinessAcademicBusCurricularComponentType();
        $this->busCountry = new BusinessBasicBusCountry();
        $this->busMensagemDeAvaliacaoDosAlunos = new BusinessAcademicBusMensagemDeAvaliacaoDosAlunos();
        $this->busTestEndCourseContractType = new BusinessAcademicBusTestEndCourseType();
        $this->busTurn = new BusinessBasicBusTurn();        
        
        //Financeiro
        $this->busReceivableInvoice = new BusinessFinanceBusReceivableInvoice();
        $this->busBankInvoiceInfo = new BusinessFinanceBusBankInvoiceInfo();
        $this->busEntry = new BusinessFinanceBusEntry();
        $this->busIncentive = new BusinessFinanceBusIncentive();
        $this->busConvenant = new BusinessFinanceBusConvenant();
        $this->busConvenantPerson = new BusinessFinanceBusConvenantPerson();
        $this->busBankAccount = new BusinessFinanceBusBankAccount();
        $this->busBank = new BusinessFinanceBusBank();
        $this->busDefaultOperations = new BusinessFinanceBusDefaultOperations();
        
        $this->busUnit = new BusinessBasicBusUnit();

        // Processa apenas linhas que deram erro
        $this->ignoreLines = @file_get_contents('/tmp/erros_importacao.txt');
        if ( strlen($this->ignoreLines) > 0 )
        {
            $this->ignoreLines = explode("\n", $this->ignoreLines);
        }
        
        parent::__construct();
    }
    
    public function getUnitId()
    {
        return $this->unitId;
    }

    public function setUnitId($unitId)
    {
        $this->unitId = $unitId;
    }
    
    public function getObservation()
    {
        return $this->observation;
    }

    public function setObservation($observation)
    {
        $this->observation = $observation;
    }

    public function getCsvImportationId()
    {
        return $this->csvImportationId;
    }

    public function setCsvImportationId($csvImportationId)
    {
        $this->csvImportationId = $csvImportationId;
    }

    public function getImportationType()
    {
        return $this->importationType;
    }

    public function setImportationType($importationType)
    {
        $this->importationType = $importationType;
    }
    
    public function getFileId()
    {
        return $this->fileId;
    }

    public function setFileId($fileId)
    {
        $this->fileId = $fileId;
    }
    
    /**
     *
     * @return boolean
     */
    public function getHasErrors()
    {
        return $this->hasErrors;
    }

    public function setHasErrors($hasErrors)
    {
        $this->hasErrors = $hasErrors;
    }
    
    public function getLogErrors()
    {
        return $this->logErrors;
    }

    public function setLogErrors($logErrors)
    {
        $this->logErrors = $logErrors;
    }
    
    public function getShowProgress()
    {
        return $this->showProgress;
    }

    public function setShowProgress($showProgress)
    {
        $this->showProgress = $showProgress;
    }
    
    /**
     * @return string
     */
    public function getLayout()
    {
        return get_class($this);
    }
    
    /**
     * Retorna o titulo que vai para o combo da tela Importacao CSV.
     * Caso nao tenha este metodo ou retorne nulo, nao inclui na listagem.
     *
     * @return string 
     */
    public function getTitle()
    {
        return '';
    }

    public function executarBeforeImport()
    {
        // Define datahora inicio de execucao do script
        $this->setStartedTime( SAGU::getDateNow(SAGU::getParameter('BASIC', 'MASK_TIMESTAMP_PHP')) );
    }
    
    /**
     * @return string 
     */
    public function getStatusFileName()
    {
        $MIOLO = MIOLO::getInstance();
        $file = $MIOLO->GetModulePath('basic', 'upload/status_importacao');
        
        return $file;
    }
    
    /**
     * @return string
     */
    public function readStatusFile()
    {
        return file_get_contents($this->getStatusFileName());
    }
    
    public function writeToStatusFile($content)
    {
        file_put_contents($this->getStatusFileName(), $content);
    }
    
    public function deleteStatusFile()
    {
        @unlink($this->getStatusFileName());
    }
    
    /**
     * @return boolean
     */
    public function statusFileExists()
    {
        return file_exists($this->getStatusFileName());
    }
    
    public function import()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $this->setInitTime(time());
        
        // Escreve inicialmente no arquivo de status para indicar uma importacao ativa
        $this->writeToStatusFile( _M('Iniciando importacao...') );
        
        // Salva log na tabela de importacao
        $log = new BasCSVImportation();
        $log->type = SAGU::NVL($this->getImportationType(), BasCSVImportation::TYPE_CMD);
        $log->layout = $this->getLayout();
        $log->observation = $this->getObservation();
        $log->unitid = $this->getUnitId();
        $log->fileid = $this->getFileId();
        $log->save();
        
        $this->setCsvImportationId( $log->getPkeyValue() );

        // Procede rotina
        $ok = parent::import();
        
        // Apaga arquivo de status
        $this->deleteStatusFile();
        
        return $ok;
    }
    
    public function importLine($data)
    {
        try
        {
            $module = MIOLO::getCurrentModule();
             
            // Estado atual da importacao
            if ( ( ( time() - $this->getLastShowStatus() ) >= 10 ) || !$this->getLastShowStatus() )
            {
                $this->setLastShowStatus(time());
                
                $status = $this->getCurrentStatus($data);
                
                if ( $this->getShowProgress() )
                {
                    echo $status . "\n";
                }
                
                $this->writeToStatusFile($status);
            }
            
            return $this->importLine2($data);
//            return in_array($data->linha, $this->ignoreLines) ? $this->importLine2($data) : true;
        }
        catch (Exception $exception)
        {
            //echo "({$data->linha}) {$exception->getMessage()}\n\n";
            
            // Compatibilidade
            if ( !( $exception instanceof sCSVException ) )
            {
                $old = $exception;
                
                $exception = new sCSVException($old->getMessage(), $old->getCode());
            }
            
            if ( $this->logErrors )
            {
                $this->gravaLogErro($data, $exception);
            }
        }
    }
    
    /**
     * @return string
     */
    public function getCurrentStatus($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $runTime = round((time() - $this->getInitTime()) / 60, 0);
        
        return _M("Processando @1/@2 (executando há @3 min.)", $module, $data->linha, $this->getTotalLines(), $runTime);
    }
    
    /**
     * Registra um erro na tabela de logs de importacao.
     */
    public function gravaLogErro($csvData, sCSVException $erro)
    {
        $this->setHasErrors(true);
        
        $coluna = $erro->getColuna();
        $information = null;
        
        if ( strlen($coluna) > 0 )
        {
            $information = $csvData->$coluna;
        }
        
        // Obtem label de coluna
        $label = null;
        $colunaInstancia = $this->getColumnById($coluna);
        
        if ( $colunaInstancia instanceof bCSVColumn )
        {
            $label = $colunaInstancia->getColPosition() . ' - ' . $colunaInstancia->getLabel();
        }
        
        $log = new BasCSVLog();
        $log->csvimportationid = $this->getCsvImportationId();
        $log->line = $csvData->linha;
        $log->importdate = $this->getStartedTime();
        $log->type = SAGU::NVL($erro->getTipo(), -1);
        $log->error = $erro->getMessage();
        $log->colname = SAGU::NVL($label, '-');
        $log->information = SAGU::NVL($information, '-');
        $log->save();
    }
    
    public function importLine2($data)
    {
        
    }
    
    public function importLineEnd($data)
    {
        
    }

    public function importLineStart($data)
    {
        return $data;
    }
    
    public function getStartedTime()
    {
        return $this->startedTime;
    }

    public function setStartedTime($startedTime)
    {
        $this->startedTime = $startedTime;
    }
    
    public function getInitTime()
    {
        return $this->initTime;
    }

    public function setInitTime($initTime)
    {
        $this->initTime = $initTime;
    }

    public function getLastShowStatus()
    {
        return $this->lastShowStatus;
    }

    public function setLastShowStatus($lastShowStatus)
    {
        $this->lastShowStatus = $lastShowStatus;
    }

            
    /**
     * @return \bCSVColumn 
     */
    public function getColumnById($name)
    {
        foreach ( $this->getColumns() as $col )
        {
            $col instanceof bCSVColumn;
            
            if ( $name == $col->getName() )
            {
                return $col;
            }
        }
        
        return null;
    }
    
    /**
     * Obtem listagem de tipos de importacoes
     * 
     * @return array
     */
    public static function listarPlanilhas()
    {
        $path = SModules::getModule('basic')->getSystemPath();
        $path .= '/classes/csv';
        
        $list = array();
        
        foreach ( SAGU::findFiles($path) as $file )
        {
            include_once $file;
            
            $file = basename($file);
            list($name, $ext) = explode('.', $file);
            $obj = new $name();
            
            $title = $obj->getTitle();
            if ( strlen($title) > 0 )
            {
                $list[$name] = $title;
            }
        }

        return $list;
    }
    
    /**
     * Tenta buscar um dado a partir de valores passados nos filtros.
     * 
     *
     * @param string $module Modulo do business
     * @param string $business Business (Ex.: BusCity)
     * @param array $values Valores utilizados tanto para filtro como para insercao de registro
     * @param boolean $insertIfNotExists Inserir quando nao encontrar um registro
     * 
     * @return int
     */
    private function getGenericBusinessCode($module, $business, $values, $insertIfNotExists = true, $returnArray = false)
    {
        $MIOLO = MIOLO::getInstance();        
        $moduleBus = $module.$business;
        $busObj = $this->busList[$moduleBus] = ( $this->busList[$moduleBus] ? $this->busList[$moduleBus] : MIOLO::getInstance()->getBusiness($module, $business) );
        $name = str_replace('Bus', '', $business);
        $searchFunction = 'search' . $name;
        $insertFunction = 'insert' . $name;

        $filters = new stdClass();
        $hasNullValue = false;
        foreach ( $values as $key => $val )
        {
//            $val = $this->toASCII($val);
//            $val = $val->__toString();

            $hasNullValue = !$hasNullValue && strlen($val) <= 0;

            $filters->$key = $val;
        }
        
        $id = null;

        if ( !$hasNullValue )
        {
            // Faz busca search() no business e armazena um cache na memoria
            $arrHash = md5(serialize($values));
            $ret = $this->cacheSearch[$business][$arrHash];
            if ( !$ret )
            {
                if ( $business == 'BusDegree' )
                {
                    $ret = call_user_method_array($searchFunction, $busObj, array($filters, true));
                }
                else if ( $business == 'BusLearningPeriod' )
                {
                    $ret = call_user_method_array($searchFunction, $busObj, array($filters, false, true));
                }
                else if ( $business == 'BusClass' )
                {
                    $ret = call_user_method_array($searchFunction, $busObj, array($filters, false));
                }
                else
                {
                    $ret = call_user_method($searchFunction, $busObj, $filters);
                }
                
                $this->cacheSearch[$business][$arrHash] = $ret;
            }            
            $id = ( $returnArray ? $ret : $ret[0][0] );
            
            // Insere caso nao encontra o registro
            // Ajustado validação $id != '0' pois existe registro com id 0
            if ( (!$id && $id != '0') && $insertIfNotExists )
            {
                $result = call_user_method($insertFunction, $busObj, (object) $filters);
                if ( $result->personId )
                {
                    $id = $result->personId;
                }
                else
                {
                    $id = is_array($result) ? $result[0][0] : $result;
                }
            }
        }
        
        return $id;
    }
    
    /**
     * Obtem busca simples pela descricao, indexada na memoria.
     * PS: Funcao ainda nao utilizada e testada.
     * 
     * Ex. uso:
     * getIndexSearch('identifier', 'name', 'basPhysicalPerson', null, 'ARNALDO JOSE SILVA')
     */
    private function getIndexSearch($pkey, $descColumn, $table, array $joins, $condition)
    {
        if ( !$this->indexSearchCache[$table] )
        {
            $result = SDatabase::query("SELECT {$descColumn}, lower({$pkey}) FROM {$table} ORDER BY {$descColumn}");
            $this->indexSearchCache[$table] = SAGU::convertListToAssociative($result);
        }
        
        $indexed = (array) $this->indexSearchCache[$table];
        $condition = strtolower($condition);
        
        return isset( $indexed[$condition] ) ? $indexed[$condition] : null;
    }
    
    /**
     * Busca uma cidade inicialmente pelo CEP, se nao encontrar, utiliza seu NOME, ESTADO e PAIS
     * Caso nao encontra em nenhuma das situacoes, insere uma nova.
     *
     * @param string $cep 959000-000
     * @param string $cidade Lajeado
     * @param string $estado RS
     * @param string $pais Brasil
     * 
     * @return int Codigo da cidade (cityId)
     */
    public function obterCidade($cep, $cidade, $estado, $pais)
    {
        $cityId = null;
        
        if ( strlen($cep) > 0 )
        {
            $cityId = $this->getGenericBusinessCode('basic', 'BusCity', array('zipCode' => $cep), false);
        }
        
        if ( !$cityId && ( strlen($estado) == 2 ) && SAGU::allIsFilled($cidade, $pais) )
        {
            $countryId = $this->getGenericBusinessCode('basic', 'BusCountry', array('name' => $pais));
            $values = array('name' => $cidade, 'stateId' => $estado, 'countryId' => $countryId);
            $cityId = $this->getGenericBusinessCode('basic', 'BusCity', $values);
        }
        
        return $cityId;
    }
    

    /**
     * Obtem cidade pela sua descricao, estado, pais
     *
     * @param string $cidade
     * @param string $estado
     * @param string $pais
     * 
     * @return int
     */
    public function obterCidadeSimples($cidade, $estado, $pais)
    {
        $countryId = $this->getGenericBusinessCode('basic', 'BusCountry', array('name' => $pais));
        $values = array('name' => $cidade, 'stateId' => $estado, 'countryId' => $countryId);
        $cityId = $this->getGenericBusinessCode('basic', 'BusCity', $values);

        return $cityId;
    }
    
    
    /**
     * Obtem codigo do setor
     *
     * @param string $descricao
     * @param string $email
     * 
     * @return int
     */
    public function obterSetor($descricao, $email)
    {
        $sectorId = null;
        
        if ( SAGU::allIsFilled($descricao, $email) )
        {
            $sectorId = $this->getGenericBusinessCode('basic', 'BusSector', array('description' => $descricao, 'email' => $email));
        }
        
        return $sectorId;
    }

    /**
     * @return int
     */
    public function obterContaBancaria($conta, $agencia, $banco)
    {
        $bankAccountId = null;

        if ( SAGU::allIsFilled($conta, $agencia, $banco) )
        {            
            //Buscar se o banco existe, caso nao insere
            $bankId = $this->getGenericBusinessCode('finance', 'BusBank', array('bankId' => $banco), false);

            if( !$bankId )
            {
                //Insere o banco
                $bankId = $this->getGenericBusinessCode('finance', 'BusBank', array('bankId' => $banco, 'description' => 'Banco: '.$banco), true);
            }
            $bankAccountId = $this->getGenericBusinessCode('finance', 'BusBankAccount', array('accountNumber' => $conta, 'branchNumber' => $agencia, 'bankId' => $banco, 'responsibletaxbank' => 'C'), false);

            if( !$bankAccountId )
            {                
                $bankAccountId = $this->getGenericBusinessCode('finance', 'BusBankAccount', array('description' => 'Banco: '.$bankId.' Conta: '.$conta.'-'.$agencia,'accountNumber' => $conta, 'branchNumber' => $agencia, 'bankId' => $bankId, 'applyDiscounts' => 't', 'responsibletaxbank' => 'C'), true);
            }
        }
        if ( strlen($bankAccountId)<=0 )
        {
            throw new Exception( _M('A conta @1 agencia @2 banco @3 não existe', $module, $conta, $agencia, $banco) );
        }

        return $bankAccountId;
    }
    
    public function obterCodSituacaoCheque($description)
    {
        return $this->getGenericBusinessCode('finance', 'BusIncomeSource', array('description' => $description, 'isExtinct' => DB_FALSE));
    }
    
    public function obterCodPolitica($description)
    {
        if ( substr($description, -1) == '.' )
        {
            $description = substr($description, 0, -1);
        }
        
        return $this->getGenericBusinessCode('finance', 'BusPolicy', array('description' => $description), false);
    }
    
    public function obterTitulo($personId, $parcelNumber, $emissionDate, $maturityDate, $value, $bankAccountId, $incomeSourceId, $policyId, $accountSchemeId, $costCenterId, $referenceMaturityDate, $comments, $contractId = null, $learningPeriodId = null)
    {
        $invoiceId = $this->getGenericBusinessCode('finance', 'BusReceivableInvoice', array('personId' => $personId, 'parcelNumber' => $parcelNumber, 'emissionDate' => $emissionDate, 'maturityDate' => $maturityDate, 'bankAccountId' => $bankAccountId, 'incomeSourceId' => $incomeSourceId, 'referenceMaturityDate' => $referenceMaturityDate ), false);

        if( !$invoiceId )
        {
            $invoiceId = $this->getGenericBusinessCode('finance', 'BusReceivableInvoice', array('personId' => $personId, 'parcelNumber' => $parcelNumber, 'emissionDate' => $emissionDate, 'maturityDate' => $maturityDate, 'value' => $value, 'bankAccountId' => $bankAccountId, 'incomeSourceId' => $incomeSourceId, 'policyId' => $policyId, 'accountSchemeId' => $accountSchemeId, 'costCenterId' => $costCenterId, 'referenceMaturityDate' => $referenceMaturityDate ), true);
            
            //Insere lançamento de mansalidade
            $entry = new stdClass();
            $entry->invoiceId = $invoiceId;
            $entry->operationId = $this->busDefaultOperations->getDefaultOperation('monthlyFeeOperation'); // MENSALIDADES
            $entry->entryDate = $emissionDate;
            $entry->value = $value;
            $entry->costCenterId = $costCenterId;
            $entry->comments = SAGU::NVL($comments.' - Importacao financeira', _M('Importacao financeira'));
            $entry->contractId = $contractId;
            $entry->learningPeriodId = $learningPeriodId;
            $ok = $this->busEntry->insertEntry($entry);
        }
        else
        {
            //update do invoice
            $invoice = new stdClass();
            $invoice->invoiceId = $invoiceId;
            $invoice->personId = $personId;
            $invoice->parcelNumber = $parcelNumber;
            $invoice->emissionDate =$emissionDate;
            $invoice->maturityDate = $maturityDate;
            $invoice->value = $value;
            $invoice->bankAccountId = $bankAccountId;
            $invoice->incomeSourceId = $incomeSourceId;
            $invoice->policyId = $policyId;
            $invoice->accountSchemeId = $accountSchemeId;
            $invoice->costCenterId = $costCenterId;
            $invoice->referenceMaturityDate = $referenceMaturityDate;

            $this->busReceivableInvoice->updateInvoice($invoice);
                
            $this->busEntry->deleteEntryInvoice($invoiceId);
            //$entryId = $this->getGenericBusinessCode('finance', 'BusEntry', array('invoiceId' => $invoiceId, 'operationId' => $this->busDefaultOperations->getDefaultOperation('monthlyFeeOperation'), 'entryDate' => $emissionDate, 'maturityDate' => $maturityDate, 'costCenterId' => $costCenterId, 'incomeSourceId' => $incomeSourceId, 'policyId' => $policyId, 'accountSchemeId' => $accountSchemeId, 'costCenterId' => $costCenterId, 'referenceMaturityDate' => $referenceMaturityDate ), true);
            
            //Insere lançamento de mansalidade
            $entry = new stdClass();
            $entry->invoiceId = $invoiceId;
            $entry->operationId = $this->busDefaultOperations->getDefaultOperation('monthlyFeeOperation'); // MENSALIDADES
            $entry->entryDate = $emissionDate;
            $entry->value = $value;
            $entry->costCenterId = $costCenterId;
            $entry->comments = SAGU::NVL($comments.' - Importacao financeira', _M('Importacao financeira'));
            $entry->contractId = $contractId;
            $entry->learningPeriodId = $learningPeriodId;
            $ok = $this->busEntry->insertEntry($entry);            
        }
        
        return $invoiceId;
    }

    /**
     * @return int
     */
    public function obterTipoIncentivo($descricao)
    {
        $incentiveTypeId = null;
        $operationId = 1;

        if ( SAGU::allIsFilled($descricao) )
        {
            $incentiveTypeId = $this->getGenericBusinessCode('finance', 'BusIncentiveType', array('description' => $descricao, 'operationId' => $operationId, 'needAdjustAuthorization' => DB_FALSE, 'sendInvoices' => DB_TRUE, 'isExtinct' => DB_FALSE, 'applyDiscounts' => DB_TRUE));
        }

        return $incentiveTypeId;
    }

    /**
     * @return int
     */
    public function obterCodOperacaoIncentivo($descricao)
    {
        $operationId = null;

        if ( SAGU::allIsFilled($descricao) )
        {
            $operationId = $this->getGenericBusinessCode('finance', 'BusOperation', array('description' => $descricao, 'operationTypeId' => 'C', 'isExtinct' => DB_FALSE, 'isCounterMovement' => DB_FALSE, 'operationGroupId' => 'I', 'receivableOrPayable' => 'R', 'useInDiscounts' => DB_TRUE, 'useInInterests' => DB_TRUE, 'useInFines' => DB_TRUE));
        }

        return $operationId;
    }

    /**
     * @return int
     */
    public function obterCodOperacaoConvenio($descricao)
    {
        $operationId = null;

        if ( SAGU::allIsFilled($descricao) )
        {
            $operationId = $this->getGenericBusinessCode('finance', 'BusOperation', array('description' => $descricao, 'operationTypeId' => 'C', 'isExtinct' => DB_FALSE, 'isCounterMovement' => DB_FALSE, 'operationGroupId' => 'I', 'receivableOrPayable' => 'R', 'useInDiscounts' => DB_TRUE, 'useInInterests' => DB_TRUE, 'useInFines' => DB_TRUE));
        }

        return $operationId;
    }

    /**
     * @return int
     */
    public function obterCodConvenio($descricao, $operationId, $value)
    {
        $convenantId = null;
//        $operationId = $this->getGenericBusinessCode('finance', 'BusOperation', array('description' => $descricao, 'operationTypeId' => 'C', 'isExtinct' => DB_FALSE, 'isCounterMovement' => DB_FALSE, 'operationGroupId' => 'I', 'receivableOrPayable' => 'R', 'useInDiscounts' => DB_TRUE, 'useInInterests' => DB_TRUE, 'useInFines' => DB_TRUE));

        if ( SAGU::allIsFilled($descricao) )
        {
            $convenantId = $this->getGenericBusinessCode('finance', 'BusConvenant', array('description' => $descricao, 'convenantOperation' => $operationId, 'value'=>$value,'beforeAfter'=>'A','isPercent' => DB_TRUE));
        }

        return $convenantId;
    }
    
    /**
     * Insere uma pessoa responsavel, utilizando dados minimos, e retorna seu codigo
     *
     * @param string $nome
     * @param string $cpf
     * @param string $sexo
     * @param string $dtnasc
     * 
     * @return int
     */
    public function inserirResponsavel($nome, $cpf, $sexo, $dtnasc)
    {
        $personId = null;

        if ( SAGU::allIsFilled($nome, $cpf, $sexo, $dtnasc) )
        {
            $respData = new stdClass();
            $respData->sex = $sexo;
            $respData->name = $nome;
            $respData->personCPF = $cpf;
            $respData->dateBirth = $dtnasc;

            $personId = $this->busPhysicalPerson->insertPhysicalPerson($respData);
        }

        return $personId;
    }
    
    /**
     * Obtem codigo de curso externo
     *
     * @param string $nome
     * @param string $abrev
     * 
     * @return int
     */
    public function obterCursoExterno($nome, $abrev)
    {
        $externalCourseId = null;

        if ( SAGU::allIsFilled($nome, $abrev) )
        {
            $externalCourseId = $this->getGenericBusinessCode('academic', 'BusExternalCourse', array('name' => $nome, 'shortName' => $abrev));
        }

        return $externalCourseId;
    }
    
    /**
     * Obtem codigo de instituicao
     *
     * @param string $nome
     * 
     * @return int
     */
    public function obterInstituicao($nome, $codCidade = null, $cepinstituicao = NULL)
    {
        $institutionIdHs = NULL;
        $instType = SAGU::getParameter('BASIC', 'LEGAL_PERSON_TYPE_INSTITUTIONS');
        
        $busLegalPerson = new BusinessBasicBusLegalPerson();
        $filter = new stdClass();
        $filter->name = trim($nome);
        $filter->legalPersonTypeId = $instType;
        
        $legalPerson = $busLegalPerson->searchLegalPerson($filter);
        if ( strlen($legalPerson[0][0]) > 0 )
        {
            $institutionIdHs = $legalPerson[0][0];
        }
        else
        {
            $data = new stdClass();
            $data->name = trim($nome);
            $data->legalPersonTypeId = $instType;
            $data->cityId = $codCidade;
            $data->zipCode = $cepinstituicao;
            if ( $busLegalPerson->insertLegalPerson($data) )
            {
                $legalPerson = $busLegalPerson->searchLegalPerson($filter);
                if ( strlen($legalPerson[0][0]) > 0 )
                {
                    $institutionIdHs = $legalPerson[0][0];
                }
            }
        }
        
        return $institutionIdHs;
    }
    
    /**
     * Obtem cod. da unidade
     *
     * @param string $descricao
     * 
     * @return int 
     */
    public function obterUnidade($descricao, $codCidade = null)
    {
        if ( is_numeric($descricao) )
        {
            $cod = $this->obterUnidadePeloCodigo($descricao);
        }
        else
        {
            $module = SAGU::getFileModule(__FILE__);
            $cod = $this->getGenericBusinessCode('basic', 'BusUnit', array('description' => $descricao), false);

            if ( strlen($cod) <= 0 )
            {
                throw new Exception( _M('A unidade @1 não está cadastrada no sistema.', $module, $descricao) );
            }
        }
        
        return $cod;
    }

    public function obterTurno($descricao, $abreviatura = null, $identificador = null)
    {
        if (is_numeric($descricao))
        {
            $cod = $this->obterTurnoPeloCodigo($descricao);
            return $cod;
        }
        else    
        {
            if(  strlen($abreviatura)<=0 || strlen($identificador)<=0)
            {
                $module = SAGU::getFileModule(__FILE__);

                $cod = $this->getGenericBusinessCode('basic', 'BusTurn', array('description' => $descricao), false);

                if ( strlen($cod) <= 0 )
                {
                    throw new Exception( _M('O turno @1 não está cadastrado no sistema.', $module, $descricao) );
                }
            }
            else
            {
                $cod = $this->getGenericBusinessCode('basic', 'BusTurn', array('description' => $descricao, 'shortDescription'=>SAGU::NVL($abreviatura, $descricao), 'charId'=> $identificador),true);
            }
            return $cod;
        }
    }
    
    public function obterTurma($classId, $initialLearningPeriodId, $vacant)
    {
        $args = array('classId' => $classId, 'name' => $classId, 'initialLearningPeriodId' => $initialLearningPeriodId, 'vacant' => $vacant);
        return $this->getGenericBusinessCode('academic', 'BusClass', $args);
    }
    
    public function verificarTurmaExiste($nome)
    {
        $module = SAGU::getFileModule();
        $found = $this->getGenericBusinessCode('academic', 'BusClass', array('classId' => $nome), false);
        
        if ( $found != $nome )
        {
            throw new Exception( _M('A turma "@1" não está cadastrada no sistema.', $module, $nome) );
        }
    }
    
    public function verificarDisciplina($curricularComponentId, $curricularComponentVersion)
    {
        $found = $this->getGenericBusinessCode('academic', 'BusCurricularComponent', array('curricularComponentId' => $curricularComponentId, 'curricularComponentVersion'=>$curricularComponentVersion), false);
        
        if ( !$found )
        {
            throw new Exception( _M('A disciplina de código "@1" não está cadastrada no sistema.', $module, $curricularComponentId) );
        }
    }
    
    public function obterCursoPeloCodigo($courseId)
    {
        $module = SAGU::getFileModule(__FILE__);
        $cod = $this->getGenericBusinessCode('academic', 'BusCourse', array('courseId' => $courseId), false);
        
        return $cod;
    }
    
    public function obterMatrizCurricularDeDisciplina($curricularComponentId, $curricularComponentVersion, $courseId, $courseVersion, $unitId, $turnId, $courseName = null, $returnArray = null)
    {
        $module = MIOLO::getCurrentModule();
        $filters = array('curricularComponentId' => $curricularComponentId, 'curricularComponentVersion'=>$curricularComponentVersion, 'courseId'=> $courseId, 'courseVersion'=>$courseVersion, 'unitId'=>$unitId, 'turnId'=>$turnId, 'csv' => TRUE);
        
        if ( strlen($courseName) > 0 )
        {
            $filters['courseName'] = $courseName;
        }
        
        $courseDisplay = SAGU::NVL($courseName, $courseId);
        
        $msg =  _M('A disciplina ' . $curricularComponentId . ' versão ' . $curricularComponentVersion . ' não está cadastrada na matriz curricular do curso do contrato. Curso: ' . $courseDisplay . '  Versão: ' . $courseVersion . '  Turno: ' . $turnId . '  Unidade: ' . $unitId , $module);               
        
        $cod = $this->getGenericBusinessCode('academic', 'BusCurriculum', $filters, false, $returnArray);
                
        if( is_array($cod) )
        {
            foreach ($cod as $c=>$l)
            {
                if (  strlen($l[0]) <= 0 )
                {
                    throw new Exception($msg);   
                }                
            }
        }
        elseif (  strlen($cod) <= 0 )
        {
            throw new Exception($msg);
        }
        
        return $cod;
    }
    
    public function obterEstadoCivil($descricao)
    {
        $module = SAGU::getFileModule(__FILE__);
        $cod = $this->getGenericBusinessCode('basic', 'BusMaritalStatus', array('description' => $descricao), false);
        
        if ( strlen($cod) <= 0 )
        {
            throw new Exception( _M('O estado civil @1 não está cadastrado.', $module, $descricao) );
        }
        
        return $cod;
    }

    public function obterTipoDeLogradouro($descricao)
    {
        return $this->getGenericBusinessCode('basic', 'BusLocationType', array('name' => $descricao));
    }
    
    public function obterGrauDeFormacao($descricao, $abreviatura)
    {
        return $this->getGenericBusinessCode('academic', 'BusFormationLevel', array('description' => $descricao,'shortDescription'=> $abreviatura));
    }
    
    public function obterCentro($nomeDoCentro, $abreviaturaCentro)
    {
        if ( strlen($nomeDoCentro)>0 )
        {
            return $this->getGenericBusinessCode('academic', 'BusCenter', array('name' => $nomeDoCentro, 'shortName'=> $abreviaturaCentro));
        }
    }

    public function obterAreaDeConhecimento($descricao)
    {
        return $this->getGenericBusinessCode('academic', 'BusKnowledgeArea', array('name' => $descricao));    
    }
    
    public function obterAreaDoCurso($descricao)
    {
        return $this->getGenericBusinessCode('academic', 'BusEducationArea', array('description' => $descricao));            
    }
    
    public function obterTipoDeDocumento($descricao)
    {
        return $this->getGenericBusinessCode('basic', 'BusDocumentType', array('name' => $descricao, 'personType' => 'P'));
    }

    public function obterOrigemEtnica($descricao)
    {
        $busEthnicOrigin = new BusinessBasicBusEthnicOrigin();
        
        return $busEthnicOrigin->obterOrigemEtnicaPelaDescricao($descricao);
        //return $this->getGenericBusinessCode('basic', 'BusEthnicOrigin', array('description' => $descricao));
    }

    public function obterNecessidadeEspecial($descricao)
    {
        return $this->getGenericBusinessCode('basic', 'BusSpecialNecessity', array('description' => $descricao));
    }
    
    public function obterTipoFuncionario($descricao)
    {
        return $this->getGenericBusinessCode('basic', 'BusEmployeeType', array('description' => $descricao));
    }
    
    public function obterPessoaPeloIdentificador($identifier, $checkExists = false)
    {
        $module = SAGU::getFileModule(__FILE__);
        $cod = $this->getGenericBusinessCode('basic', 'BusPhysicalPerson', array('identifier' => $identifier), false);
        
        if ( ( strlen($cod) <= 0 ) && $checkExists )
        {
            throw new Exception( _M('Nao existe pessoa para o identificador @1.', $module, $identifier) );
        }
        
        return $cod;
    }
    
    public function verificarSeEmailExiste($email, $identificador)
    {
        $sql = "SELECT name
             FROM ONLY basPhysicalPerson
                 WHERE identifier != ?
                   AND email = ?";
        
        $args[] = $identificador;
        $args[] = $email;
        
        $result = SDatabase::query($sql, $args);
        
        return $result[0][0];
    }
    
    public function obterAlunoPeloIdentificador($identifier, $checkExists = false)
    {
        $module = SAGU::getFileModule(__FILE__);
        $cod = $this->getGenericBusinessCode('basic', 'BusPhysicalPersonStudent', array('identifier' => $identifier), false);
        
        if ( ( strlen($cod) <= 0 ) && $checkExists )
        {
            throw new Exception( _M('Nao existe aluno para o identificador @1.', $module, $identifier) );
        }
        
        return $cod;
    }
    
    public function obterFuncionarioPeloCodPessoa($personId)
    {
        return $this->getGenericBusinessCode('basic', 'BusEmployee', array('personId' => $personId), false);
    }
    
    public function obterContratoDaPessoa($personId, $courseId, $courseVersion, $turnId, $unitId)
    {
        $cod = $this->getGenericBusinessCode('academic', 'BusContract', array('personId' => $personId, 'courseId' => $courseId, 'courseVersion'=> $courseVersion, 'turnId'=>$turnId, 'unitId'=> $unitId), false);
        
        if ( strlen($cod) <= 0 )
        {
            throw new Exception( _M('Não existe um contrato para pessoa de código @1.', $module, $personId) );
        }
        
        return $cod;
    }
    
    public function obterEstadoContratual($description)
    {
        $module = SAGU::getFileModule(__FILE__);
        $cod = $this->getGenericBusinessCode('academic', 'BusStateContract', array('description' => $description), false);
        
        if ( strlen($cod) <= 0 )
        {
            throw new Exception( _M('O estado contratual "@1" nao esta cadastrado no sistema.', $module, $description) );
        }
        
        return $cod;
    }
    
    /**
     * Se passado por parâmetro status detalhado busca status pelo status detalhado
     * @return int
     */
    public function obterEstadoDeMatricula($shortDescription, $detailStatus = null)
    {
        if ( strlen($detailStatus)>0 )
        {
            $enrollStatusDetailed = array();
            $enrollStatusDetailed = AcdDetailedEnrollStatus::listRecordsIndexed();
            $module = SAGU::getFileModule(__FILE__);
            $return = $enrollStatusDetailed[$detailStatus];

            if ( strlen($return) <= 0 )
            {
                throw new Exception( _M('O estado detalhado para "@1" nao esta cadastrado no sistema.', $module, $detailStatus) );
            }
        }
        else
        {
            $return = $this->getGenericBusinessCode('academic', 'BusEnrollStatus', array('description' => $shortDescription));
        }
        return $return;
    }

    /**
     * @return int
     */
    public function obterEstadoDetalhadoDeMatricula($shortDescription)
    {
        if ( !$this->detailedEnrollStatusList )
        {
            $this->detailedEnrollStatusList = AcdDetailedEnrollStatus::listDetailedEnrollStatus();
        }
        
        $module = SAGU::getFileModule(__FILE__);
        $cod = $this->detailedEnrollStatusList[$shortDescription];
        
        if ( strlen($cod) <= 0 )
        {
            throw new Exception( _M('O estado detalhado para "@1" nao esta cadastrado no sistema.', $module, $shortDescription) );
        }
        
        return $cod;
    }
    
    public function obterPeriodo($codigo)
    {
        $periodId = $this->getGenericBusinessCode('academic', 'BusPeriod', array('periodId' => $codigo), false);
        
        if ( strlen($periodId) <= 0 )
        {
            $periodId = $this->getGenericBusinessCode('academic', 'BusPeriod', array('periodId' => $codigo, 'description' => $codigo));
        }
        
        return $periodId;
    }
    
    /**
     * @return boolean
     */
    public function existeOcorrenciaDeCurso($courseId, $courseVersion, $turnId, $unitId)
    {
        $filters = new stdClass();
        $filters->courseId = $courseId;
        $filters->courseVersion = $courseVersion;
        $filters->turnId = $turnId;
        $filters->unitId = $unitId;
        
        return count($this->busCourseOccurrence->searchCourseOccurrence($filters)) > 0;
    }
    
    public function verificarOcorrenciaDeCurso($data, $courseId, $courseVersion, $turnId, $unitId)
    {
        $module = SAGU::getFileModule();

        if ( !$this->existeOcorrenciaDeCurso($courseId, $courseVersion, $turnId, $unitId) )
        {
            throw new Exception( _M("Não existe a ocorrência de curso cadastrada: <br/><br/>
                    CURSO: {$courseId} - {$data->curso} <br/>
                    VERSAO: {$courseVersion} <br/>
                    TURNO: {$turnId} - {$data->turno} <br/>
                    UNIDADE: {$unitId} - {$data->campus}", $module) );
        }
    }
    
    /**
     * Retorna degreeId da nota final do periodo letivo
     * 
     * @return int degreeId
     */
    public function obterDegreeNotaFinal($learningPeriodId)
    {
        $module = SAGU::getFileModule(__FILE__);
        $values = array('learningPeriodId' => $learningPeriodId, 'parentDegreeIdIsNull' => DB_TRUE);
        $cod = $this->getGenericBusinessCode('academic', 'BusDegree', $values, false);
        
        if ( strlen($cod) <= 0 )
        {
            $values = array('learningPeriodId' => $learningPeriodId, 'description' => _M('NOTA FINAL', $module), 'degreeNumber' => 1);
            $cod = $this->getGenericBusinessCode('academic', 'BusDegree', $values);
        }
        
        return $cod;
    }
    
    /**
     * Caso nao existir degreeEnroll para matricula e degreeId passados, insere nota com $note passado
     */
    public function inserirNotaMatricula($degreeId, $enrollId, $note)
    {
        $values = array('degreeId' => $degreeId, 'enrollId' => $enrollId);
        $cod = $this->getGenericBusinessCode('academic', 'BusDegreeEnroll', $values, false);
        $values = array('degreeId' => $degreeId, 'enrollId' => $enrollId, 'note' => $note, 'recordDate' => SAGU::getDateNow());
        
        if ( strlen($cod) > 0 )
        {
            $data = (object) $values;
            $data->degreeEnrollId = $cod;
            
            $busDegreeEnroll = new BusinessAcademicBusDegreeEnroll();
            $cod = $busDegreeEnroll->updateDegreeEnroll($data);
        }
        else
        {
            $cod = $this->getGenericBusinessCode('academic', 'BusDegreeEnroll', $values);
        }
    }
    
    /**
     * Caso nao existir degreeEnroll para matricula e degreeId passados, insere conceito com $note passado
     */
    public function inserirConceitoMatricula($degreeId, $enrollId, $note)
    {
        $values = array('degreeId' => $degreeId, 'enrollId' => $enrollId);
        $cod = $this->getGenericBusinessCode('academic', 'BusDegreeEnroll', $values, false);
        $values = array('degreeId' => $degreeId, 'enrollId' => $enrollId, 'concept' => $note, 'recordDate' => SAGU::getDateNow());
        
        if ( strlen($cod) > 0 )
        {
            $data = (object) $values;
            $data->degreeEnrollId = $cod;
            
            $busDegreeEnroll = new BusinessAcademicBusDegreeEnroll();
            $cod = $busDegreeEnroll->updateDegreeEnroll($data);
        }
        else
        {
            $cod = $this->getGenericBusinessCode('academic', 'BusDegreeEnroll', $values);
        }
    }
    
    public function obterPeriodoLetivo($periodo, $curso, $versao, $turno, $unidade, $beginDate = null, $endDate = null, $cursoDescricao = null)
    {
        $periodo = $this->obterPeriodo($periodo);
        $values = array('periodId' => $periodo, 'courseId' => $curso, 'courseVersion' => $versao, 'turnId' => $turno, 'unitId' => $unidade);
        $learningPeriodId = $this->getGenericBusinessCode('academic', 'BusLearningPeriod', $values, false);

        // Caso nao encontrar, insere um novo
        if ( strlen($learningPeriodId) <= 0 )
        {
            $values += array(
                'description' => "$cursoDescricao - {$curso} {$periodo}",
                'formationLevelId' => 1,
                'beginDate' => SAGU::NVL($beginDate,SAGU::getDateNow()),
                'endDate' => SAGU::NVL($endDate, SAGU::addIntervalInDate(SAGU::getDateNow(), 'm', 1)),
                'finalAverage' => 0,
                'minimumFrequency' => 0,
                'minimumCredits' => 0,
                'minimumCreditsFreshman' => 0,
                'minimumCreditsTurn' => 0,
//                'isClosed' => DB_TRUE,
            );

              $learningPeriodId = $this->busLearningPeriod->insertLearningPeriod( (object) $values, false );
//            $learningPeriodId = $this->getGenericBusinessCode('academic', 'BusLearningPeriod', $values);
        }
        
        return $learningPeriodId;
    }
    
    /*
     * Obtém o período de datas para o período letivo através do código do período
     */
    public function obterDatasPeriodoLetivo($periodId)
    {
        $maskDate = SAGU::getParameter('BASIC', 'MASK_DATE');
        $sql = "SELECT TO_CHAR(TO_DATE( ( CASE WHEN SPLIT_PART(periodid, '/', 2) = 1::varchar THEN '01/01'::varchar ELSE '01/07'::varchar END )::varchar || SPLIT_PART(periodid, '/', 1), 'dd/mmyyyy' ),'{$maskDate}'), 
                       TO_CHAR(TO_DATE( ( CASE WHEN SPLIT_PART(periodid, '/', 2) = 1::varchar THEN '30/06'::varchar ELSE '31/12'::varchar END )::varchar || SPLIT_PART(periodid, '/', 1), 'dd/mmyyyy' ),'{$maskDate}') 
                  FROM acdperiod";
        
        
        if ( strlen($periodId) > 0 )
        {
            $sql .= " WHERE periodid = '" . $periodId . "'";
        }
        
        $result = (array) SDatabase::query($sql);
        
        $data = null;
        if ( count($result)>0 )
        {
            $data = new stdClass();
            $data->beginDate = $result[0][0]; 
            $data->endDate = $result[0][1]; 
        }
        return $data; 
    }
    
    
    
    public function obterDisciplinaOferecida($learningPeriodId, $curriculumId, $classId, $isClosed = DB_TRUE)
    {
        $this->verificarTurmaExiste($classId);
        
        if ( $isClosed == 'a' )
        {
            $values = array('learningPeriodId' => $learningPeriodId, 'curriculumId' => $curriculumId, 'classId' => $classId);
        }
        else
        {
            $values = array('learningPeriodId' => $learningPeriodId, 'curriculumId' => $curriculumId, 'classId' => $classId, 'isClosed'=>$isClosed);
        }
        $groupId = $this->getGenericBusinessCode('academic', 'BusGroup', $values, false);

        // Caso nao encontrar, insere um novo
        if ( strlen($groupId) <= 0 )
        { 
            $vacant = $this->getVacant($classId);

            $values += array(
                'regimenId' => 1,
                'evaluationTypeId' => 4,
                'financeCredits' => 10,
                'useConcept' => DB_FALSE,
                'vacant' => $vacant,
            );
            $groupId = $this->getGenericBusinessCode('academic', 'BusGroup', $values);
        }
        
        return $groupId;
    }
    
    public function obterCursoPelaDescricao($descricao, $courseVersion, $unitId, $turnId)
    {
        $module = SAGU::getFileModule(__FILE__);
        $cod = $this->getGenericBusinessCode('academic', 'BusCourseOccurrence', array('courseName' => $descricao, 'courseVersion' => $courseVersion, 'unitId' => $unitId, 'turnId' => $turnId), false);

        if ( strlen($cod) <= 0 )
        {
            throw new Exception( _M('Não existe o curso "@1" cadastrado no sistema.', $module, $descricao) );
        }
        
        return $cod;
    }
    
    public function obterCursoPeloCodigoEDerivados($courseId, $courseVersion, $unitId, $turnId)
    {
        $module = SAGU::getFileModule(__FILE__);
        $cod = $this->getGenericBusinessCode('academic', 'BusCourseOccurrence', array('courseId' => $courseId, 'courseVersion' => $courseVersion, 'unitId' => $unitId, 'turnId' => $turnId), false);
        
        if ( strlen($cod) <= 0 )
        {
            throw new Exception( _M('Não existe o curso "@1" cadastrado no sistema.', $module, $courseId) );
        }
        
        return $cod;
    }
    
    public function obterCursoVersao($courseId, $courseVersion)
    {
        return $this->getGenericBusinessCode('academic', 'BusCourseVersion', array('courseId' => $courseId, 'courseVersion' => $courseVersion), false);
    }

    public function obterModalidadeVersaoCurso($descricao)
    {
        return $this->getGenericBusinessCode('academic', 'BusCourseVersionType', array('description' => $descricao),true);
    }

    public function inserirVersaoDeCurso($data)
    {
        return $this->getGenericBusinessCode('academic', 'BusCourseVersion', array( 'courseId' => $data->courseId, 'courseVersion' => $data->courseVersion, 'beginDate' => $data->beginDate,'endDate' => $data->endDate,'periodTotal' => $data->periodTotal,'periodDescription' => $data->periodDescription,'credits' => $data->credits,'hourTotal' => $data->hourTotal,'hourRequired' => $data->hourRequired,'courseVersionTypeId' => $data->courseVersionTypeId), true);
    }

    public function obterGrupoDisciplina($grupoDisciplina, $grupoDisciplinaAbreviatura)
    {
        return $this->getGenericBusinessCode('academic', 'BusCurricularComponentGroup', array( 'name' => $grupoDisciplina, 'shortName' => $grupoDisciplinaAbreviatura), true);
    }

    public function obterTipoDeCurriculo($tipoDeCurriculo, $tipoDeCurriculoAbreviatura)
    {
        return $this->getGenericBusinessCode('academic', 'BusCurriculumType', array( 'description' => $tipoDeCurriculo, 'shortDescription' => $tipoDeCurriculoAbreviatura), true);
    }
    
    public function obterTipoDeDisciplina($tipoDisciplina)
    {
        return $this->getGenericBusinessCode('academic', 'BusCurricularComponentType', array( 'description' => $tipoDisciplina), true);
    }

    public function inserirDisciplina($data)
    {
        $curricularComponent = $this->busCurricularComponent->getCurricularComponent($data->curricularComponentId, $data->curricularComponentVersion);

        if( strlen($curricularComponent->curricularComponentId)>0 )
        {
            $return = $this->busCurricularComponent->updateCurricularComponent($data);
        }
        else
        {
            $return = $this->busCurricularComponent->insertCurricularComponent($data);
        }
        return $return;
    }

    public function inserirDisciplinaMatriz($data)
    {
        $filters = new stdClass();
        $filters->courseId = $data->courseId;
        $filters->courseVersion = $data->courseVersion;
        $filters->turnId = $data->turnId;
        $filters->unitId = $data->unitId;
        $filters->curricularComponentId = $data->curricularComponentId;
        $filters->curricularComponentVersion = $data->curricularComponentVersion;
        $curriculum = $this->busCurriculum->searchCurriculumComponent($filters);
        
        if ( is_array($curriculum) )
        {
            $return = $this->busCurriculum->updateCurriculum($data);
        }
        else
        {
            $return = $this->busCurriculum->insertCurriculum($data);
        }

        return $return;
    }
    
    public function getVacant($classId)
    {
        return 9999;
    }
    
    /**
     * Obtém um país pelo seu nome
     * 
     * @param type $descricao
     */
    public function obterPaisNatal($descricao)
    {
        $module = MIOLO::getCurrentModule();
        
        try 
        {
            $filters = new stdClass();
            $filters->name = $descricao;

            $pais = $this->busCountry->searchCountry($filters);
                        
            if ( !strlen($pais[0][0]) > 0 )
            {
                throw new Exception(_M("É necessário cadastrar o país {$descricao} para prosseguir com a importação.", $module)); 
            }
        }
        catch ( Exception $e )
        {
            throw new Exception($e->getMessage());
        }
        
        return $pais[0][0];
    }
    
    /**
     * Função para obter o código pessoa através de um identificador.
     * Primeiro verifica no identifier, depois no personid, depois cpf e por fim no nome.
     */
    public function obterPersonId($identificador)
    {
        $personId = NULL;
        
        if ( is_numeric($identificador) )
        {
            $personId = $this->obterPessoaPeloIdentificador($identificador, false);
        }
        
        if ( strlen($personId) == 0 )
        {
            $busPerson = new BusinessBasicBusPerson();
            $person = NULL;
            
            if ( is_numeric($identificador) )
            {
                $person = $busPerson->getPerson($identificador);
            }
            
            if ( strlen($person->personId) > 0 )
            {
                $personId = $person->personId;
            }
            else
            {
                $personFilter = new stdClass();
                $personFilter->cpf = sagu::convertInCPFFormat($identificador);
                $person = $busPerson->searchPerson($personFilter);
                if ( strlen($person[0][0]) > 0 )
                {
                    $personId = $person[0][0];
                }
                else
                {
                    $personFilter = new stdClass();
                    $personFilter->name = $identificador;
                    $person = $busPerson->searchPerson($personFilter);
                    $personId = $person[0][0];
                }
            }
        }
        
        return $personId;
    }
    
    /*
     * Obter tipo de avaliacao do MEC pelo identificador ou descricao 
     */
    public function obterTipoDeAvaliacaoDoMEC($tipoAvaliacao)
    {
        $module = SAGU::getFileModule(__FILE__);
        $filters = new stdClass();
    
        if (is_numeric($tipoAvaliacao))
        {
            $filters->testEndCourseTypeId = $tipoAvaliacao;
            $result = $this->busTestEndCourseContractType->searchTestEndCourseType($filters);
        }
        else
        {
            $filters->description = $tipoAvaliacao;
            $result = $this->busTestEndCourseContractType->searchTestEndCourseType($filters);
        }
        
        if (strlen ($result[0][0]) == 0)
        {
            throw new Exception(_M("Não existe nenhum tipo de avaliação do MEC '{$tipoAvaliacao}' cadastrada no sistema", $module));
        }
        else
        {
            return $result;
        }
    }
    
    /*
     * Obter mensagem de avaliacao dos alunos por descricao ou id.
     */
    public function obterMensagemDeAvaliacaoDosAlunos($mensagem)
    {
        $module = SAGU::getFileModule(__FILE__);
        $filters = new stdClass();
    
        if (is_numeric($mensagem))
        {
            $filters->mensagemDeAvaliacaoDosAlunosId = $mensagem;
            $result = $this->busMensagemDeAvaliacaoDosAlunos->searchMensagemDeAvaliacaoDosAlunos($filters);
        }
        else
        {
            $filters->mensagem = $mensagem;
            $result = $this->busMensagemDeAvaliacaoDosAlunos->searchMensagemDeAvaliacaoDosAlunos($filters);
        }
        
        if (strlen ($result[0][0]) == 0)
        {
            throw new Exception(_M("Não existe nenhuma mensagem de avaliação dos alunos '{$mensagem}' cadastrada no sistema", $module));
        }
        else
        {
            return $result;
        }
    }
    
    /*
     * Verifica se existe unidade.
     */
    public function obterUnidadePeloCodigo($unitId)
    {
        $module = SAGU::getFileModule(__FILE__);
        
        $filters = new stdClass();
        $filters->unitId = $unitId;
        $unidade = $this->busUnit->searchUnit($filters);
        
        if (strlen ($unidade[0][0]) == 0)
        {
            throw new Exception(_M("Não existe nenhuma unidade com identificador '{$unitId}' cadastrada no sistema.", $module));
        }
        else
        {
            return $unitId;
        }
    }
    
    /*
     * Verifica se turno existe.
     */
    public function obterTurnoPeloCodigo($turnId)
    {
        $module = SAGU::getFileModule(__FILE__);
        
        $filters = new stdClass();
        $filters->turnId = $turnId;
        $turn = $this->busTurn->searchTurn($filters);
        
        if (strlen ($turn[0][0]) == 0)
        {
            throw new Exception(_M("Não existe nenhum turno com identificador '{$turnId}' cadastrado no sistema.", $module));
        }
        else
        {
            return $turn[0][0];
        }
    }
}
?>
