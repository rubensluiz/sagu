<?php

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Description of sTextGenerate
 *
 * @author augusto
 */
class sTextGenerate 
{
    /**
     * Recebe todas as colunas que ser?o geradas a cada linha
     * no aqruivo texto (txt).
     * 
     * @var type 
     */
    private $collumns = array();
    
    /**
     * Método contrutor da classe sTextGenerate.
     */
    public function __construct($columns = null)
    {        
        if ( !is_null($this->collumns) && is_array($this->collumns) )
        {
            $this->collumns = $columns;
        }
    }
    
    /**
     * Cria as colunas que ser?o geradas a cada linha do documento txt,
     * recebenco o nome da coluna, quantos caracteres deverá possuir e
     * se será necessário completar os caracteres com espaçamento ou n?o.
     * 
     * @param String $name
     * @param integer $charsCount
     * @param boolean $required
     */
    public function addCollumn($name, $charsCount = null, $required = true, $concatElement = null)
    {
        $this->collumns[$name] = array(
            "charsCount" => $charsCount,
            "required" => $required,
            "concatElement" => $concatElement
        );
    }
    
    /**
     * Verifica os dados informados e gera o documento txt.
     * 
     * @param array $data
     */
    public function textGenerate($data)
    {
        $MIOLO = MIOLO::getInstance();
        
        try
        {
            foreach ( $data as $args ) // Linhas
            {
                $rows .= $this->createRow($args);
                $rows .= "\n";
            }
            
            $nomeArquivo = "tmp_" . rand() . ".txt";

            file_put_contents("/tmp/{$nomeArquivo}", $rows);
            $this->efetuarDownload($nomeArquivo);
        }
        catch ( Exception $e )
        {
            $MIOLO->error(_M("Erro ao gerar o arquivo: " . $e->getMessage()));
        }
    }    
    
    /**
     * Cria as colunas da linha conforme parâmetros.
     * 
     * @param array $args
     * @return String $row
     * @throws Exception
     */
    private function createRow($args)
    {
        $row = "";
        foreach ( $args as $key => $value ) // Colunas
        {
            if ( !is_array($value) ) // Verifica se é uma array ou n?o
            {
                if ( ( strlen($value) <= $this->collumns[$key]["charsCount"] ) || ( is_null($this->collumns[$key]["charsCount"]) ) ) // Verifica se a quantidade de caracteres do valor é a correta.
                {
                    if ( $this->collumns[$key]["required"] ) // Verifica se é rerquerido o complemento de caracteres ou n?o.
                    {
                        if ( is_null($this->collumns[$key]["concatElement"]) ) // Verífica se existe um caracter para concatenar.
                        {
                            $row .= str_pad($value, $this->collumns[$key]["charsCount"], " ", STR_PAD_RIGHT); // Completa o número de caracteres do valor.
                        }
                        else // Usa o caracter recebido por parâmetro para concatenar os valores.
                        {
                            $row .= str_pad($value, strlen($value) + 1, $this->collumns[$key]["concatElement"], STR_PAD_RIGHT);
                        }
                    }
                    else
                    {
                        $row .= $value;
                    }
                }
                else
                {
                    throw new Exception(_M("'{$value}' excede o máximo de caratceres permitodo para o campo '{$key}'."));
                }
            }
            else
            {
                $row .= $this->createRow($value);
            }
        }
        
        return $row;
    }
    
    /**
     * Faz o download do arquivo.
     * 
     * @param String $nomeArquivo
     */
    private function efetuarDownload($nomeArquivo)
    {
        if ( file_exists("/tmp/" . $nomeArquivo) ) 
        {
            $novoNome = 'exportacao_de_dados.txt';
            header('Content-Description: File Transfer');
            header('Content-Disposition: attachment; filename="' . $novoNome . '"');
            header('Content-Type: application/octet-stream');
            header('Content-Transfer-Encoding: binary');
            header('Content-Length: ' . filesize("/tmp/" . $nomeArquivo));
            header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
            header('Pragma: public');
            header('Expires: 0');
            readfile("/tmp/" . $nomeArquivo);
            
            unlink("/tmp/" . $nomeArquivo);
        }
    }    
}

?>
