<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Componente de escolha
 *
 * @author Jader Osvino Fiegenbaum [jader@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jader Osvino Fiegenbaum [jader@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 15/10/2013
 *
 **/
 
class sEscolha extends MTextField
{
    private $jaGerou = false;
    
    /**
     * @var SType
     */
    private $typeObject;
    
    private $buscaCodigo;

    private $valorDescricao;
    
    /**
     * @var sEscolha
     */
    private $fieldCodigo;
    
    /**
     * @var MTextField
     */
    private $fieldDesc;
    
    /**
     * @var boolean
     */
    private $autocompletar = true;
    
    /**
     * @var int
     */
    private $acMinimoCaracteres = 3;
    
    public function __construct($name = '', $value = '', $label = '', SType $type)
    {
        $MIOLO = MIOLO::getInstance();
        
        $this->setType($type);
        
        parent::__construct($name, $value, $label, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null);
    }
    
    /**
     *
     * @return SType
     */
    public function getType() {
        return $this->typeObject;
    }

    public function setType($type) {
        $this->typeObject = $type;
    }

        
    public function getJaGerou() {
        return $this->jaGerou;
    }

    public function setJaGerou($jaGerou) {
        $this->jaGerou = $jaGerou;
    }
    
    public function getAutocompletar() {
        return $this->autocompletar;
    }

    public function setAutocompletar($autocompletar) {
        $this->autocompletar = $autocompletar;
    }

    public function getAcMinimoCaracteres() {
        return $this->acMinimoCaracteres;
    }

    public function setAcMinimoCaracteres($acMinimoCaracteres) {
        $this->acMinimoCaracteres = $acMinimoCaracteres;
    }

    public function getIdLinha($i)
    {
        $idResposta = $this->getIdResposta();
        
        return "{$idResposta}_line_{$i}";
    }
        
    public function getIdResposta()
    {
        return $this->name . 'Resposta';
    }
    
    public function getIdDesc()
    {
        return $this->name . 'Description';
    }
    
    /**
     *
     * @return MDiv 
     */
    public function getDivResposta()
    {
        $div = new MDiv($this->getIdResposta(), null);
        $div->addBoxStyle('width', '450px');
        $div->addBoxStyle('position', 'absolute');
        $div->addBoxStyle('margin-top', '25px');
        $div->addBoxStyle('overflow', 'auto');
        $div->addBoxStyle('max-height', '150px');
        
        return $div;
    }
    
    public function getAjaxAction($event, $args = array())
    {
        $args += array(
            'escType' => $this->getType()->getClassName(),
            'escFieldId' => $this->name,
            'escFieldIdDesc' => $this->getIdDesc(),
            'escIdResposta' => $this->getIdResposta()
        );
        
        return SForm::getAjaxAction($event, $this->getIdResposta(), false, $args, true, false);
    }
    
    public function obterValorDescricao()
    {
        $codigo = $this->value;
        $temCodigo = strlen($codigo) > 0;
        $naoTemDesc = strlen($this->valorDescricao) == 0;
        $idDiferente = $temCodigo && $this->buscaCodigo != $codigo;
        
        if ( $temCodigo && ( $naoTemDesc || $idDiferente ) )
        {
            $dados = $this->getType()->findForChoiceComponent(null, $codigo);

            if ( $dados )
            {
                $this->buscaCodigo = current(array_keys($dados));
                $this->valorDescricao = current($dados);
            }
        }
        
        return $this->valorDescricao;
    }
    
    /**
     * @return sEscolha 
     */
    public function getFieldCodigo()
    {
        if ( !$this->fieldCodigo )
        {
            $this->fieldCodigo = $this;
            $this->fieldCodigo->setJaGerou(true);
            $this->fieldCodigo->label = '';
            $this->fieldCodigo->addAttribute('onchange',  $this->getAjaxAction('escolhaRespostaCodigo') );
        }
        
        return $this->fieldCodigo;
    }
    
    /**
     * @return MTextField
     */
    public function getFieldDesc()
    {
        if ( !$this->fieldDesc )
        {
            $this->fieldDesc = new MTextField($this->getIdDesc(), null, '', 50);
            $this->fieldDesc->addAttribute('autocomplete', 'off');
//            $this->fieldDesc->addAttribute('onchange', $this->getAjaxAction('escolhaRespostaTabela'));
    //        $this->fieldDesc->addAttribute('onblur',  'return dojo.byId(\''.$this->name.'\').value.length > 0 ? dojo.byId(\''.$this->name.'\').onchange() : null; ');
        }
        
        if ( !$this->readonly )
        {
            $this->fieldDesc->setAttribute('onclick', 'this.select(); dojo.byId(\'' . $this->getIdResposta() . '\').style.display = \'none\'');
        }
        
        if ( strlen($this->fieldDesc->getValue()) == 0 )
        {
            $this->fieldDesc->setValue( $this->obterValorDescricao() );
        }
        
        if ( $this->autocompletar )
        {
            $this->fieldDesc->addAttribute('onkeyup', 'return autocompletarTabela_'. $this->name .'(this, event);');
//            $this->fieldDesc->setAttribute('onkeydown', 'return true;');
            $this->fieldDesc->addAttribute('onkeydown', 'return verificaTecla_'.$this->name.'(this, event);');
        }
        else
        {
            $this->fieldDesc->setAttribute('onkeyup', '');
            $this->fieldDesc->setAttribute('onkeydown', '');
        }
        
        return $this->fieldDesc;
    }
    
    public function setReadOnly($status)
    {
        $this->getFieldDesc()->setReadOnly($status);
        
        parent::setReadOnly($status);
    }
    
    /**
     * @return MImageLink 
     */
    public function getFieldLink()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $imagem = $MIOLO->getUI()->getImage('basic', 'search-20x20.png');
        $link = new MImageLink("mostrarOpcoes{$this->name}", NULL, $this->getAjaxAction('escolhaRespostaTabela', array('escListAll' => true)), $imagem);
        $link->image->addStyle('vertical-align', 'middle');
        
        return $link;
    }
    
    public function generate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        if ( $this->jaGerou )
        {
            return parent::generate();
        }

        $fieldCodigo = $this->getFieldCodigo();
        $fieldDesc = $this->getFieldDesc();
        $link = $this->readonly ? null : $this->getFieldLink();
        $div = $this->getDivResposta();
        
        $hctDesc = new MHContainer('hctDesc', array($fieldDesc, $div));
        $hctDesc->setSpaceWidth(null);
        $hctDesc->setDisposition('horizontal');
        
        $hct = new MHContainer('hctEscolha_' . rand(), array($fieldCodigo, $hctDesc, $link));
        
        $this->adicionaJsCode();
        
        return $hct->generate();
    }
    
    public function adicionaJsCode()
    {
        $MIOLO = MIOLO::getInstance();
        
        $idResposta = $this->getIdResposta();
        $ajaxAction = $this->getAjaxAction('escolhaRespostaTabela');
        
        $funcAutocompletar = 'autocompletarTabela_' . $this->name;
        $funcBuscarAtualSelecionado = 'buscarAtualSelecionado_'.$this->name;
        $funcGetIdLine = 'getIdLine_'.$this->name;
        $funcSelecionarItem = 'selecionarItem_'.$this->name;
        $funcVerificaTecla = 'verificaTecla_'.$this->name;
        
        $js = "function {$funcVerificaTecla}(field, event)
            {
                keyCode = ( window.event ) ? event.keyCode : event.which;
             
                keyTab = 9;
                keyEnter = 13;
                
                if ( keyCode == keyTab )
                {
                    dojo.byId('{$idResposta}').style.display = 'none';
                }
                
                return keyCode != keyEnter;
            }

            function {$funcAutocompletar}(field, event)
            {
                var respeitaLimite = field.value.length >= {$this->acMinimoCaracteres};
                    
                // Definicao das teclas padrao.
                keyEsc = 27;
                keyUp = 38;
                keyDown = 40;
                keyEnter = 13;
                keyTab = 9;
                keyRight = 39;
                keyLeft  = 37;
                keyPercent = 16;
                keySpace = 32;
                keyCtrl = 17;

                // Obtem a tecla pressionada.
                keyCode = ( window.event ) ? event.keyCode : event.which;
                
                var disableKeys = new Array(keyEsc, keyUp, keyDown, keyEnter, keyTab, keyRight, keyLeft, keySpace, keyCtrl);
                var teclaEspecial = disableKeys.indexOf(keyCode) != -1;

                if ( event.ctrlKey )
                {
                    return true;
                }

                if ( !teclaEspecial )
                {
                    dojo.byId('{$this->name}').value = '';
                }

                if ( respeitaLimite && !estaProcessandoAjax() && !teclaEspecial )
                {
                    {$ajaxAction}
                }

                if ( keyCode == keyUp )
                {
                    {$funcSelecionarItem}(-1);
                }
                else if ( keyCode == keyDown )
                {
                    {$funcSelecionarItem}(1);
                }
                else if ( keyCode == keyEsc )
                {
                    dojo.byId('{$idResposta}').style.display = 'none';
                }
                else if ( keyCode == keyEnter )
                {
                    var selecionado = dojo.byId( $funcGetIdLine( $funcBuscarAtualSelecionado() ) );
                    
                    if ( selecionado )
                    {
                        selecionado.onclick();
                    }
                }
                
                return true;
            }
            
            function {$funcBuscarAtualSelecionado}()
            {
                for ( i = 0; i < 20; i ++ )
                {
                    var element = dojo.byId( {$funcGetIdLine}(i) );
                        
                    if ( element )
                    {
                        if ( element.selecionado )
                        {
                            return i;
                        }
                    }
                }
                
                return -1;
            }
            
            function {$funcGetIdLine}(i)
            {
                return '{$idResposta}' + '_line_' + i;
            }
            
            function {$funcSelecionarItem}(increment)
            {
                var atualSelecionado = {$funcBuscarAtualSelecionado}();
                
                var elAtual = dojo.byId( {$funcGetIdLine}(atualSelecionado) );
                var elProximo = dojo.byId( {$funcGetIdLine}(atualSelecionado + increment) );

                if ( elProximo )
                {
                    if ( elAtual )
                    {
                        elAtual.selecionado = null;
                        elAtual.style.fontWeight = null;
                    }
                    
                    elProximo.selecionado = 1;
                    elProximo.style.fontWeight = 'bold';
                    elProximo.onclick();
                    
                    dojo.byId('{$idResposta}').style.display = 'block';
                }
            }
        ";
                    
        $ajaxCallBack = MIOLO::_REQUEST('cpaint_function') == 'ajaxCallBack';
        if( $ajaxCallBack )
        {
            $MIOLO->page->AddAJAXJsCode($js);
        }
        else
        {
            $MIOLO->page->AddJsCode($js);
        }
    }
    
    public static function ajaxAutoCompletarCodigo($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        $typeName = $args->escType;
        $codigoId = $args->escFieldId;
        $descricaoId = $args->escFieldIdDesc;
        $codigoValor = $args->{$codigoId};
        
        if ( strlen($codigoValor) > 0 && is_numeric($codigoValor) && strlen($codigoValor) < 11 )
        {
            $obj = SType::instantiateType($typeName);
            $obj->setAjaxArgs($args);
            
            $dados = $obj->findForChoiceComponent( null, $codigoValor );

            if ( $dados )
            {
                $descValue = current($dados);

                $MIOLO->page->addAJAXJsCode(' dojo.byId(\'' . $descricaoId . '\').value=\'' . $descValue . '\'; ');
            }
            else
            {
                $MIOLO->page->addAJAXJsCode(' dojo.byId(\'' . $codigoId . '\').value=\'\'; ');
                $MIOLO->page->addAJAXJsCode(' dojo.byId(\'' . $descricaoId . '\').value=\'\'; ');
            }
        }
        else
        {
            $MIOLO->page->addAJAXJsCode(' dojo.byId(\'' . $descricaoId . '\').value=\'\'; ');
            $MIOLO->page->addAJAXJsCode(' dojo.byId(\'' . $codigoId . '\').value=\'\'; ');
        }
        
        return array( );
    }
    
    public static function ajaxBuscaTabela($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
//        $args->escType;
//        $args->escFieldId;
        $typeName = $args->escType;
        $codigoId = $args->escFieldId;
        $descricaoId = $args->escFieldIdDesc;
        $idResposta = $args->escIdResposta;
        $descFieldValue = null;
        
        if ( strlen($descricaoId) > 0 && !$args->escListAll )
        {
            $descFieldValue = $args->{$descricaoId};
        }
        
        $obj = SType::instantiateType($typeName);
        $obj->setAjaxArgs($args);
        
        $rows = $obj->findForChoiceComponent( $descFieldValue );
        $table = self::criarTabela($rows, $codigoId, $descricaoId, $idResposta);
        
//        $table->addBoxStyle('border', '1px solid black');
//        $table->addAttribute('id',$idTable);
//        $table->addAttribute('onmouseout', 'dojo.byId(\'divConteudo_' . $codigoId . '\').style.display=\'none\';');
//        $table->addAttribute('onmouseover', 'dojo.byId(\'divConteudo_' . $codigoId . '\').style.display=\'block\';');
        
        $div = new MDiv('div' . rand(), $table);
        //$div->addBoxStyle('position', 'fixed');
        
        $fields[] = $div;
        
        $MIOLO->page->addAJAXJsCode(' dojo.byId(\'' . $idResposta . '\').style.display=\'block\'; ');
        $MIOLO->page->addAJAXJsCode(' dojo.byId(\'' . $descricaoId . '\').focus(); ');
        
        return $fields;
    }
    
    /**
     * @return MTableRaw 
     */
    public static function criarTabela($rows = array(), $codigoId, $descricaoId, $idResposta)
    {
        $resultado = array();

        foreach ( $rows as $codigo => $descricao)
        {
            $resultado[] = $descricao;
        }
        
        $table = new MTableRaw(null, $resultado);        
        $i = 0;
        
        foreach ( $rows as $codigo => $descricao)
        {
            // Tratamento dos valores.
            $codigo = str_replace("'", "\'", $codigo);
            $descricao = str_replace("'", "\'", $descricao);

            $onClick = 'dojo.byId(\''.$codigoId.'\').value = \''.$codigo.'\';
                        dojo.byId(\''.$descricaoId.'\').value = \''.$descricao.'\';
                        dojo.byId(\'' . $idResposta . '\').style.display=\'none\';';
            
            // dojo.destroy(\''. $idTable . '\');
//            $onMouseOver = 'sEscolha.deselecionarItem(this);';

            $idLinha = $idResposta . '_line_' . $i;
            
            $table->setCellAttribute($i, 0, 'onClick', $onClick);
            $table->setCellAttribute($i, 0, 'id', $idLinha);
            $table->setCellAttribute($i, 0, 'style', 'margin:2px; border:1px solid lightgray;');

            // Esconde 2Âº coluna.
            $table->setCellAttribute($i, 1, 'style', 'display:none');

            $table->setRowAttribute($i, 'onClick', $onClick);
            
            $i ++;
        }

        //$table->addAttribute('onMouseOver', $onMouseOver);

        // Define os dados da tabela.
//        $table->setData($resultado);

        $table->setAlternate( true );
        $table->addAttribute('style', 'width:100%; position:relative;');
        
        return $table;
    }
}

?>

