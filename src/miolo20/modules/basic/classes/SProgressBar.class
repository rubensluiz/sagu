<?php
/**
 * <--- Copyleft 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Componente de barra de progresso
 * 
 * @author Luís Augusto Weber Mercado [luis_augusto@solis.com.br]
 *
 * @version $Id$
 *
 * @since
 * Class created on 24/09/2014
 * 
 **/
class SProgressBar extends MDiv
{
    /**
     * Instância da classe
     * 
     * @var Object
     */
    private static $instance;
        
    /**
     * Texto default a ser mostrado
     * 
     * @var String
     */
    private $defaultText = "Carregando...";
    
    /**
     * Pega o instância da barra de progresso
     * 
     * @param String $mode "script" para scripts like syncdb
     * @return Object Instância da classe
     */
    public static function getCurrent()
    {
        $instance = self::$instance;
        
        if( is_null($instance) )
        {
            self::$instance = new self();
            
        }
        
        return self::$instance;
        
    }
    
    /**
     * Construtor da classe
     * 
     * @param String $mode "script" para scripts like syncdb
     */
    public function __construct() {
        parent::__construct("SProgressBar", $this->generateFields());
                
    }
    
    /**
     * Gera o componente
     * 
     * @return String Html que para renderizar o componente
     */
    public function generate()
    {
        $this->addBoxStyle("z-index", "20");
        $this->addBoxStyle("padding", "10px");
        $this->addBoxStyle("position", "fixed");
        $this->addBoxStyle("background-color", "#f4f4f4");
        $this->addBoxStyle("box-shadow", "0 0 7px #a3a3a3");
        $this->addBoxStyle("width", "500px");
        $this->addBoxStyle("height", "200px");
        $this->addBoxStyle("top", "50px");
        $this->addBoxStyle("left", "50%");
        $this->addBoxStyle("margin-left", "-260px");
        $this->addBoxStyle("font-family", "arial");
        $this->addBoxStyle("font-size", "11px");
        
        return parent::generate();
        
    }
    
    /**
     * Faz o setup inicial
     * 
     * @return {MHiddenField} Campo escondido para carregamento do cabeçalho do MIOLO
     */
    public function setup()
    {
        return new MHiddenField("__GENERATEHEADERFIRST", "yes");
        
    }
    
    /**
     * Mostra a barra de progresso
     * 
     */
    public function show()
    {
        echo $this->generate();
        
        $js = "
            var div = document.getElementById('SProgressBar');
            div.style.display = 'block';

        ";

        $text = "\n<script type=\"text/javascript\">" . $js . "</script>";

        $this->flushOutput($text);        
                
                
    }

    /**
     * Muda o progresso para o valor informado
     * 
     * @param String Texto a ser mostrado na barra de progresso
     * @param Integer Progresso de 0 à 100
     */
    public function updateProgress($text, $progress)
    {
        $compl = "";
        
        // Apenas altera se $text não for vazio.
        if( $text != "" )
        {
            $compl = "text.innerHTML = '{$text}';";

        }

        $js = "
                var progressbar = document.getElementById('mprogressbar-progressbar');
                var text = document.getElementById('mprogressbar-text');

                progressbar.style.width = '{$progress}' + '%';
                {$compl}

            ";

        $text = "\n<script language=\"javascript\">" . $js . "</script>";

        $this->flushOutput($text);

        if($progress == 100)
        {
            $this->finish();

        }
                
    }
    
    /**
     * Remove a barra de progresso
     * 
     */
    public function finish()
    {
        $js = "
            setTimeout(function()
            {
                var div = document.getElementById('SProgressBar');

                div.style.display = 'none';
               
            }, 2000);

        ";
        
        $text = "\n<script language=\"javascript\">" . $js . "</script>";
        $this->flushOutput($text);
                
    }
    
    /**
     * Manda o output para o navegador
     * 
     */
    public function flushOutput($text)
    {
        echo $text;
        // Manda o buffer (echo) direto para o browser.
        ob_flush();
        flush();
                
    }

    /**
     * Gera os campos que são usados no componente
     * 
     * @return Array Campos usados no componente
     */
    public function generateFields()
    {
        $progressBar = new MDiv("mprogressbar-progressbar");
        
        $progressBar->addStyle("width", "0%");
        $progressBar->addStyle("height", "100%");
        $progressBar->addBoxStyle("position", "absolute");
        $progressBar->addBoxStyle("background-color", "#1F72BF");
        
        $fields = array();
        
        $fields[] = $divTextContainer = new MDiv("mprogressbar-textDiv", "<p id=\"mprogressbar-text\" style=\"font-weight: bolder; margin-top: 50px;\">{$this->defaultText}</p>");
        $fields[] = $divPBContainer = new MDiv("mprogressbar-progressbarContainer", array($progressBar));
        
        $divTextContainer->addBoxStyle("text-align", "center");
        
        $divPBContainer->addBoxStyle("border", "2px solid #c3c3c3");
        $divPBContainer->addBoxStyle("width", "95%");
        $divPBContainer->addBoxStyle("height", "45px");
        $divPBContainer->addBoxStyle("position", "relative");
        $divPBContainer->addBoxStyle("margin", "50px auto");
        
        return $fields;
        
    }
    
}

?>