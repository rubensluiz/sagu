<?php

/**
 * <--- Copyright 2005-2012 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Classe que representa uma coluna de uma tabela.
 *
 * @author Daniel Hartmann [daniel@solis.coop.br]
 *
 * \b Maintainers: \n
 * Daniel Hartmann [daniel@solis.coop.br]
 *
 * @since
 * Class created on 14/02/2012
 *
 */

class SInfoColuna
{
    /**
     * @var string 
     */
    public $esquema = 'public';

    /**
     * @var string 
     */
    public $tabela;

    /**
     * @var string 
     */
    public $nome;

    /**
     * @var string 
     */
    public $tipo;

    /**
     * @var string 
     */
    public $titulo;

    /**
     * @var string 
     */
    public $obrigatorio;

    /**
     * @var string 
     */
    public $valorPadrao;

    /**
     * @var string 
     */
    public $tamanho;

    /**
     * @var character Informa se é chave estrangeira (f) ou chave primária (p).
     */
    public $restricao;

    /**
     * @var string 
     */
    public $fkEsquema;

    /**
     * @var string 
     */
    public $fkTabela;

    /**
     * @var string 
     */
    public $fkColuna;

    /**
     * @var string 
     */
    public $valoresPossiveis;

    /**
     * @var string 
     */
    public $editavel;

    /**
     * @var string 
     */
    public $visivel;

    /**
     * @var string 
     */
    public $filtravel;

    /**
     * @var string 
     */
    public $exibirNaGrid;

    /**
     * @var string 
     */
    public $parametros;

    /**
     * @var boolean 
     */
    public $chave;

    /**
     * @var string Nome do atributo da classe (type ou business) pelo qual a coluna é representada.
     */
    public $atributo;

    /**
     * @var string Nome do campo no formulário.
     */
    public $campo;

    /**
     * Constantes para os tipos de coluna.
     */
    const TIPO_TEXTO = 'character varying';
    const TIPO_TEXTO_LONGO = 'text';
    const TIPO_INTEIRO = 'integer';
    const TIPO_DECIMAL = 'real';
    const TIPO_LISTA = 'list';
    const TIPO_DATA = 'date';
    const TIPO_BOOLEAN = 'boolean';
    const TIPO_LOOKUP = 'lookup';

    /**
     * @return array Lista os tipo de campos suportados.
     */
    public static function listarTipos()
    {
        return array(
            self::TIPO_TEXTO => _M('Text'),
            self::TIPO_TEXTO_LONGO => _M('Long text'),
            self::TIPO_INTEIRO => _M('Integer'),
            self::TIPO_DECIMAL => _M('Decimal'),
            self::TIPO_LISTA => _M('List'),
            self::TIPO_DATA => _M('Date'),
            self::TIPO_BOOLEAN => _M('Boolean'),
            self::TIPO_LOOKUP => _M('Pesquisa'),
        );
    }

    /**
     * Obtém dados da coluna. Descrição, tipo e valor padrão.
     *
     * @param string $coluna Nome da coluna.
     * @param string $tabela Nome da tabela.
     * @param string $esquema Nome do esquema.
     * @param character $tipoDaRelacao Tipo de relação. Usar constantes SInfoTabela::TIPO_*.
     */
    public static function buscarDadosDaColuna($coluna, $tabela, $esquema='', $tipoDaRelacao=SInfoTabela::TIPO_TABELA)
    {
        $sql = "SELECT CASE WHEN d.description <> '' THEN d.description ELSE a.attname END,
                       format_type(t.oid, null) as typname,
                       pg_get_expr(def.adbin,def.adrelid)
                  FROM pg_class c
            INNER JOIN pg_namespace AS n ON ( n.oid = c.relnamespace )
            INNER JOIN pg_attribute AS a ON ( a.attrelid = c.oid )
            INNER JOIN pg_type AS t ON ( a.atttypid = t.oid )
             LEFT JOIN pg_attrdef AS def ON ( def.adrelid = c.oid AND a.attnum = def.adnum )
             LEFT JOIN pg_description AS d ON ( d.objoid = c.oid AND d.objsubid = a.attnum )
                 WHERE c.relkind = ?
                   AND n.nspname NOT LIKE 'pg\\_%'
                   AND n.nspname != 'information_schema'
                   AND a.attnum > 0
                   AND NOT a.attisdropped
                   AND a.attname = ?
                   AND c.relname = ?";

        $params = array( $tipoDaRelacao, $coluna, $tabela );

        if ( $esquema )
        {
            $sql .= " AND n.nspname ILIKE ?";
            $params[] = $esquema;
        }

        $resultado = SDatabase::query(SAGU::prepare($sql, $params, FALSE));

        $infoColuna = new SInfoColuna();
        list(
            $infoColuna->label,
            $infoColuna->tipo,
            $infoColuna->valorPadrao
        ) = current($resultado);

        return $infoColuna;
    }
}

?>