<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 14/03/2004
 *
 **/

class SAGUFile
{

    /*
     * Array containing all errors occurred
     */
    public $errors;

    /**
     * Adds a new error message to the list of occurred errors
     *
     * @param $msg (string): The error message to add
     *
     * @return (null): null
     *
     */
    public function addError($msg)
    {
        $this->errors[] = $msg;
    }

    /**
     * Return the error information (if some error exists)
     *
     * @param: No parameters needed
     *
     * @return: If exists some error, return this.
     */
    public function returnErrors()
    {
        return $this->errors;
    }

    /**
     * Save uploaded file to local file
     *
     * @param $tmpName (string): Temporary file name and path
     * @param $table (string): Table name to save on specific folder
     *
     * @return (varchar): path to file
     *
     */
    public function saveFileToLocal($tmpName, $seq)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        // Upload path data
        $path = $MIOLO->GetModulePath('basic', SAGU::getParameter('BASIC', 'UPLOAD_PATH'));
        if ( file_exists($path) )
        {
            // Get the path to hold file
            if ( is_writable($path) )
            {
                $path .= $seq;
                if ( !copy($tmpName, $path) )
                {
                    $this->addError(_M('Falha ao copiar arquivo', 'basic'));
                    return false;
                }
                return true;
            }
            else
            {
                $this->addError(_M('O diretório não possui permissão de escrita', 'basic'));
                return false;
            }
        }
        else
        {
            $this->addError(_M('O diretório de upload especificado na tabela de Configurações não existe', 'basic'));
        }
    }

    /**
     * Save uploaded file to local file
     *
     * @param $data (object): Informations of data to file
     *
     * @return (varchar): path to file
     *
     */
    public function saveDataToLocal($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        // Upload path data
        $path = $MIOLO->GetModulePath('basic', SAGU::getParameter('BASIC', 'UPLOAD_PATH'));

        if ( strlen($data->fileId) > 0 )
        {
            // junta nome do arquivo com o caminho
            $pathName = $path . $data->fileId;
            // abre o arquivo
            $fp = fopen($pathName, "w");
            // grava o arquivo
            if ( fwrite($fp, $data->file) )
            {
                return true;
            }
        }
        else
        {
            return false;
        }
    }

    /**
     * Return file
     *
     * @param $file (string): File name
     *
     * @return (varchar): file
     *
     */
    public function getFileBody($file, $absolute = false, $returnArray = false)
    {
        $MIOLO = MIOLO::getInstance();
        // pega caminho onde o endereço está gravado.


        if ( $absolute )
        {
            $filePath = $file;
        }
        else
        {
            $filePath = SAGUFile::getFilePath($file);
        }

        if ( strlen($filePath) > 0 )
        {
            if ( $returnArray == true )
            {
                return file($filePath);
            }
            else
            {
                // abre arquivo.
                if ( $fp = fopen("$filePath", "r") );
                {
                    // tranforma o corpo do arquivo em string
                    $fileBody = fread(
                        $fp, filesize($filePath));
                    fclose($fp);
                    // retorna corpo da mensagem
                    return $fileBody;
                }
            }
        }
        else
        {
            return false;
        }
    }

    /**
     * Return file path
     *
     * @param $file (string): File name
     *
     * @return (varchar): path to file
     *
     */
    public function getFilePath($file)
    {
        $MIOLO = MIOLO::getInstance();
        $path = $MIOLO->GetModulePath('basic', SAGU::getParameter('BASIC', 'UPLOAD_PATH'));

        if ( strlen($path) > 0 )
        {
            // junta o nome do arquivo com o caminho do arquivo
            $filePath = $path . $file;
            if ( strlen($filePath) > 0 )
            {
                return $filePath;
            }
            else
            {
                $this->addError(_M('Arquivo não encontrado', 'basic'));
            }
        }
        else
        {
            $this->addError(_M('O diretório especificado na tabela de Configurações não existe', 'basic'));
        }
    }

    /**
     * Return file path
     *
     * @deprecated Esta funcao nao e mais necessaria, utilize $busFile->getFilePath(personId) para evitar mais consultas no banco de dados.
     *
     * @param $file (string): File name
     *
     * @return (varchar): path to file
     *
     */
    public function getPhotoPath($personId)
    {
        $MIOLO = MIOLO::getInstance();
        $busPerson = new BusinessBasicBusPerson();
        $person = $busPerson->getPerson($personId);
        $path = null;
        
        if ( strlen($person->photoId) > 0 )
        {
            $busFile = new BusinessBasicBusFile();
            $path = $busFile->getFilePath($person->photoId);
        }

        return $path;
    }

    /**
     * Verify that the $clasName class exists in $module module
     *
     * @param: $module: Module to verify if exists the class
     *         $className: Name of the class
     *
     * @return: True if the class exists. Otherwise, false.
     *
     */
    public function classExists($module, $className)
    {
        $MIOLO = MIOLO::getInstance();
        $path = $MIOLO->getModulePath($module, 'classes/' . $className . '.class');

        return (file_exists($path));
    }
}
?>
