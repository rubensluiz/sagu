<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * This class implements functions to work with calendars.
 * 
 * @author Samuel Koch [samuel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Samuel Koch [samuel@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 29/09/2008
 *
 *
 **/
class SCalendar extends MFormControl
{

    /** 
     * This atribute identifies the calendar.
     */
    public $id = '';

    /** 
     * This atribute is array the date.
     */
    public $date = array();

    /** 
     * This atribute represent the year the calendar.
     */
    public $year = '';

    /** 
     * This atribute represent the month the calendar.
     */
    public $month = '';

    /** 
     * Variable boolean to see whether or not the navigation bar.
     */
    public $navBarVisibility = TRUE;

    /** 
     * Variable boolean to see whether or not the weeks.
     */
    public $weeksVisibility = TRUE;

    /** 
     * Variable integer that defined border.
     */
    public $gridBorder = 0;

    /** 
     * Variable char that is stored the name of the DIV.
     */
    private $htmlElement = '';

    /** 
     * Variable instance class that manipulates date.
     */
    private $krono;

    /** 
     * Variable boolean that determines whether the calendar has yes or no interactivity.
     */
    public $enabled = TRUE;
    
    /** 
     * Variable that determines the dates that are disabled.
     */
    public $disableDatesArray = array();

    
    /**
     * Hint para datas desativadas, cada posicao deste array deve coincidir com a posição das datas do $disableDatesArray
     */
    public $disableDatesHint = array();

    
    private $currentHint;
    
    public $disableDateColorGrey = array();

    /**
     * Cores das datas
     *
     * @var array
     */
    private $dateColor = array();

    /**
     * Initialize some properties.
     * 
     * @param $id (integer) id for the calendar
     * @param $name (string) a optional name for the calendar
     * @param $month (string) month for the calendar
     * @param $year (string) year for the calendar
     * @param $disableDates (array) dates that are disabled
     */
    public function __construct($id, $month, $year, $date = NULL, $disableDatesArray = null)
    {
        parent::__construct( $id );
        
        $module = MIOLO::getCurrentModule();
        $MIOLO = MIOLO::getInstance();
        
        $this->krono = new MKrono( );
        $this->id = $id;
        $this->setMonth( $month );
        $this->setYear( $year );
        $this->disableDatesArray = $disableDatesArray;
        
        if ( $date != '' )
        {
            $this->setData( $date );
        }
        
        $this->htmlElement = 'div' . $id;
    }

    /**
     * Function responsible for set the month.
     *  
     * @param $month (string): month the calendar
     *
     * @return No return paramenter
     */
    public function setMonth($month)
    {
        $this->month = $month;
    }

    /**
     * Function responsible for get the month.
     * 
     * @param No receive paramenter.
     * 
     * @return $this->month (string): Return the month.
     */
    public function getMonth()
    {
        return $this->month;
    }

    /**
     * Function responsible for set the year.
     * 
     * @param $year (string): year the calendar.
     * 
     * @return No return paramenter.
     */
    public function setYear($year)
    {
        $this->year = $year;
    }

    /**
     * Function responsible for get the year.
     * 
     * @param No receive paramenter.
     * 
     * @return $this->year (string): Return the year.
     */
    public function getYear()
    {
        return $this->year;
    }

    /**
     * Function responsible for get interactive calendar
     * 
     * @param $enable (booblean): Variable logic.
     * 
     * @return No return paramenter.
     */
    public function enable($enabled)
    {
        return $this->enabled = $enabled;
    }

    /**
     * Function responsible for set the visibility navigator bar.
     * 
     * @param $visibility (boolean): Variable boolena to see whether or not the navigation bar.
     * 
     * @return No return paramenter.
     */
    public function setNavigatorBarVisible($visibility)
    {
        $this->navBarVisibility = $visibility;
    }

    /**
     * Function responsible for get the visibility navigator bar.
     *  
     * @param No receive paramenter.
     * 
     * @return $this->navBarVisibility (boolean): Return true or false.
     */
    public function getNavigatorBarVisible()
    {
        return $this->navBarVisibility;
    }

    /**
     * Function responsible for set the weeks visibility.
     * 
     * @param $visibility (boolean): Variable boolena to see whether or not the weeks.
     * 
     * @return No return paramenter.
     */
    public function setWeeksVisible($visibility)
    {
        $this->weeksVisibility = $visibility;
    }

    /**
     * Function responsible for get the visibility weeks.
     * 
     * @param No receive paramenter.
     * 
     * @return $this->weeksVisibility (boolean): Return true or false.
     */
    public function getWeeksVisible()
    {
        return $this->weeksVisibility;
    }

    /**
     * Function responsible for set the size of border.
     * 
     * @param $border (integer): Variable integer that defined size border.
     * 
     * @return No return paramenter.
     */
    public function setGridBorder($border)
    {
        $this->gridBorder = $border;
    }


    /**
     * Define os hints de cada data desativada ($disableDatesArray)
     */
    public function setDisableDatesHint($disableDatesHint)
    {
        $this->disableDatesHint = $disableDatesHint;
    }

    
    public function getDisableDatesHint()
    {
        return $this->disableDatesHint;
    }


    /**
     * Function responsible for get the size of border.
     * 
     * @param No receive paramenter.
     * 
     * @return $this->border (integer): Return the value of size of border.
     */
    public function getGridBorder()
    {
        return $this->gridBorder;
    }

    /**
     * Function responsible for set info calendar.
     * 
     * @param $date (array(date)): Variable date that contains array date.
     * 
     * @return No return paramenter.
     */
    public function setData($date)
    {
        $this->date = $date;
    }

    /**
     * Function responsible for get info calendar.
     * 
     * @param No receive paramenter.
     * 
     * @return $this->date (array(date)): Return the array date.
     */
    public function getData()
    {
        return $this->date;
    }

    /**
     * Function responsible for defined week days default.
     * 
     * @param No receive paramenter.
     * 
     * @return $retWeek (array): Return array with the day of the week shortened.
     */
    public function definedWeek()
    {
        //Set as false to return the day of the week shortened.
        $this->krono->abbr = true;
        
        for ( $counter = 0; $counter <= 6; $counter ++ )
        {
            $retWeek[] = $this->krono->nToDay($counter);
        }
        
        return $retWeek;
    }

    /**
     * Function responsible for get the week.
     * 
     * @param No receive paramenter.
     * 
     * @return $this->week (array): Return the week order.
     */
    public function getWeek()
    {
        $weekVisible = $this->getWeeksVisible();
        $week = $this->definedWeek();
        
        for ( $counter = 1; $counter <= count( $week ); $counter ++ )
        {
            if ( $weekOrder == $week[$counter] )
            {
                $position = $counter;
                break;
            }
            $position = 0;
        }
        
        if ( ($position != 0) )
        {
            if ( $weekVisible )
            {
                $order[] = '';
            }
        }
        
        for ( $counter = $position; $counter <= 6; $counter ++ )
        {
            $order[] = $week[$counter];
        }
        
        for ( $counter = 0; $counter < $position; $counter ++ )
        {
            $order[] = $week[$counter];
        }
        
        return $order;
    }

    /**
     * Function that get week position.
     *
     * @param $date (date): Receve the date of day.
     * 
     * @return $counter (integer): Returns the position week.
     **/
    public function getPositionWeek($date)
    {
        $orderWeek = $this->getWeek();
        $date = $this->krono->kDate( '%w', $date );
        
        for ( $counter = 1; $counter < count( $orderWeek ); $counter ++ )
        {
            if ( $date == $counter )
            {
                return $counter;
            }
        }   
    }

    /**
     * Function responsible for returns the month in words.
     *
     * @param $month (integer): Reveive month in numerical form.
     * 
     * @return $retMonth (varchar): Returns the month concatenated with the year.
     **/
    public function getMonthsName($month)
    {
        //set to false to return the name of the month in extensive.
        $this->krono->abbr = false;
        
        $year = $this->getYear();
        $ret = $this->krono->nToMonth( $month );
        
        return $ret . ' ' . $year;
    }

    /**
     * Function that mount a table with the day of the month.
     * 
     * @param $month (integer): month the calendar
     * @param $year (integer): year the calendar
     * 
     * @return $dayOfMonth (array): returns an array with the days of the month.
     */
    public function getDayOfMonth($month, $year)
    {
        $day = $this->krono->kMkTime( array(  1,
                                              $month, 
                                              $year ));
                                              
        //AQUI ESTÁ PEGANDO O CONTADOR DE SEMANAS ERRADO PARA JANEIRO.
        $week = $this->krono->kDate( '%W', $day ) + 0;
        for( $x=52; $x<=56; $x++ )
        {
            if( $week == $x )
            {
                $week = 01;
            }
        }
        $weekDay = $this->krono->kDate( '%w', $day );
        $daysInMonth = $this->krono->kDate( '%t', $day );
        $isVisible = $this->getWeeksVisible();
        
        if ( $isVisible )
        {
            $dayOfMonth[0][] = $week;
            $lengthWeek = 7;
        }
        else
        {
            $lengthWeek = 6;
        }
        
        if ( $weekDay == $lengthWeek )
        {
            for ( $i = 0; $i < $lengthWeek; $i ++ )
            {
                $dayOfMonth[0][] = '';
            }
        }
        else
        {
            $position = $this->getPositionWeek( $day );
            for ( $i = 1; $i <= $position; $i ++ )
            {
                $dayOfMonth[0][] = '';
            }
        }
        
        $count = 0;
        for ( $i = 2; $i <= $daysInMonth + 1; $i ++ )
        {
            $line = $this->krono->kDate( '%d', $day ) + 0;
            $dayOfMonth[$count][] = $line;
            
            if ( $this->krono->kDate( '%w', $day ) == 6 )
            {
                if ( $line != $daysInMonth )
                {
                    $count ++;
                    if ( $isVisible )
                    {
                        $dayOfMonth[$count][] = ++ $week;
                    }
                }
            }
            
            $day = $this->krono->kMkTime( array( $i, 
                                                 $month, 
                                                 $year ));

            if ( $this->krono->kDate( '%d', $day ) == "01" )
            {
                break;
            }
        }
        
        $day = $this->krono->kMkTime( array( 
                $daysInMonth, 
                $month, 
                $year 
        ) );
        $weekDay = $this->krono->kDate( '%w', $day );
        $position = $this->getPositionWeek( $day );
        
        if ( $weekDay != 6 )
        {
            for ( $i = $position; $i < 6; $i ++ )
            {
                $dayOfMonth[$count][] = '';
            }
        }
        
        return $dayOfMonth;
    }
    
    /**
     * Get the days corresponding to the day of the week
     * 
     * @param $week (integer): week the calendar
     * @param $month (integer): month the calendar
     * @param $year (integer): year the calendar
     * 
     * @return $dayOfMonth (array): returns an array with the days of the month.
     */
    public function getDayOfWeek($week, $month, $year)
    {
        //Days of the month
        $month = $this->getDayOfMonth( $month, $year );
        //Traverses the weeks where key is the position this week in the array
        foreach ( $this->getWeek() as $key=>$descWeek )
        {
            //Check if last week is the same parameter for
            if ( $descWeek == $week )
            {
                //position of the array of the week
                $positionOfArray = $key;
            }
        }
        
        //obtains the weeks
        foreach ( $month as $wheek )
        {       
            //get day of the week
            foreach ( $wheek as $p=>$dayWheek )           
            {
                if ( is_numeric($wheek[$positionOfArray] ) && ($p != 0) )
                {
                    if ( $wheek[$positionOfArray] == $dayWheek )
                    {
                          $dayVector[] = $wheek[$positionOfArray];
                    }               
                }
            }
        }
        
        return $dayVector;
    }
    

    /**
     * Checks if the date is disable
     * 
     * @param $day (integer): day the calendar
     * @param $month (integer): month the calendar
     * @param $year (integer): year the calendar
     * 
     * @return $result (boolean): return true is disable.
     */
    public function checksIfTheDateIsDisable($day, $month, $year)
    {
        //Result false
        $result = false;
        //String to time
        $mk1 = mktime(0, 0, 0, $month, $day, $year);
        //Date to string 'dd/mm/yyyy'
        $date = date('d/m/Y',$mk1);
        //Date to string 'd/m/yyyy'
        $date1 = date('j/n/Y',$mk1);
                
        //If $disableDatesArray is array
        if ( is_array($this->disableDatesArray) )
        {
            //Checks if the date is in array
            if ( in_array($date, $this->disableDatesArray) || in_array($date1, $this->disableDatesArray) )
            {
                $dia = array_search($date, $this->disableDatesArray);
                
                if ( !$dia )
                {
                    $dia = array_search($date1, $this->disableDatesArray);    
                }
                
                $this->currentHint = $this->disableDatesHint[ $dia ];
                $result = true;
            }
            else
            {
                $this->currentHint = null;
            }
        }
        
        return $result;
    }
    

    /**
     *     Function that checks whether the date should be selected.
     * 
     * @param $day (integer): day of the calendar.
     * @param $month (integer): month of the calendar.
     * @param $year (integer): year of the calendar.
     * 
     * @return $dayOfMonth (array): Returns true if date is select and false is date not select .
     */
    public function isSelect($day, $month, $year)
    {
        $date = $this->getData();
        
        if ( in_array( $day . '/' . $month . '/' . $year, $date ) )
        {
            return true;
        }
        
        return false;
    }

    public function setDateColor($date, $color)
    {
        $this->dateColor[$date] = $color;
    }
    
    /**
     *     Function that generate link for select date.
     * 
     * @param $day (integer): day of the calendar.
     * @param $month (integer): month of the calendar.
     * @param $year (integer): year of the calendar.
     * 
     * @return $dayOfMonth (array): Returns true link in html.
     */
    public function generateLink($day, $month, $year)
    {       

        $dayD   = (strlen($day) == 1 ? '0' : '') . $day;
        $monthD = (strlen($month) == 1 ? '0' : '') . $month;
        
        $date  = $dayD . '/' . $monthD . '/' . $year;
        $param = $day . ';' . $date;
        
        //Checks if the date is disable
        if ( $this->checksIfTheDateIsDisable($day, $month, $year) == false )
        {
            $linkSetDate = ('javascript:setDate' . $this->id . '(\'' . $param .'\');');
            $link = new MLink( "linkSetDate" . $day, $day, $linkSetDate );      
            
            // altera cor do texto do dia
            if ( $this->dateColor[$date] )
            {
                $link->addBoxStyle('background-color', $this->dateColor[$date]);
                $link->addBoxStyle('padding-left', '7px');
                $link->addBoxStyle('padding-right', '7px');
            }
            
            $generateLink = new MDiv($param, $link);            
        }
        else
        {
            $mk1 = mktime(0, 0, 0, $month, $day, $year);
            $date1 = date('j/n/Y',$mk1);
            
            $color = 'red';
            if ( in_array($date, $this->disableDateColorGrey) || in_array($date1, $this->disableDateColorGrey) )
            {
                $color = 'lightgray';  
                $this->dateColor[$date] = $color;
            }
            
            $span = new MTextLabel('spn', '<b>' . $day . '<b>');
            
            // altera cor do texto do dia
            if ( $this->dateColor[$date] )
            {
                $span->addBoxStyle('background-color', $this->dateColor[$date]);
                $span->addBoxStyle('padding-left', '7px');
                $span->addBoxStyle('padding-right', '7px');
            }
            
            $text = new MText( $param, $span->generate(), $color);
            
            if ( strlen($this->currentHint) > 0 )
            {
                $text->setJsHint( $this->currentHint );
            }
            
            $generateLink = new MDiv($param, $text);
        }

        return $generateLink->generate();   
    }
    
    /**
     *  Function that generates link to select the respective days on weekdays.
     * 
     * @param $wheek (integer): wheek of the calendar.
     * @param $month (integer): month of the calendar.
     * @param $year (integer): year of the calendar.
     * 
     * @return $daysOfMonth (array): Returns true link in html.
     */    
    public function generateLinkWeek($week, $month, $year)
    {
        $days = $this->getDayOfWeek($week, $month, $year);
        
        $param = null;
        if ( count($days) > 0 )
        {
            foreach ( $days as $day )
            {
                //Checks if the date is disable
                if ( $this->checksIfTheDateIsDisable($day, $month, $year) == false )
                {
                    if ( ( strlen($day) > 1 ) && ( strlen($month) > 1 ) )
                    {
                        $array[] = $day . ';' . $day . '/' . $month . '/' . $year ;
                    }
                    else if ( ( strlen($day) > 1 ) && ( strlen($month) == 1 ) )
                    {
                        $array[] = $day . ';' . $day . '/0' . $month . '/' . $year ;
                    }
                    else if ( ( ( strlen($day) == 1 ) && ( strlen($month) > 1 ) ) )
                    {
                        $array[] = $day . ';0' . $day . '/' . $month . '/' . $year ;
                    }
                    else
                    {
                        $array[] = $day . ';0' . $day . '/0' . $month . '/' . $year ;
                    }
                }
                
            }
            if ( is_array($array) )
            {
                $param = implode('<>',$array);
            }
        }
        $linkSetDate = ('javascript:setDate' . $this->id . '(\'' . $param .'\');');
        $link = new MLink( "linkSetWeek" . $week, $week, $linkSetDate );       
        $generateLink = new MDiv($week, $link);
       
        return $generateLink->generate();
    }
    
    public function generateInner()
    {
        $module = MIOLO::getCurrentModule();
        $MIOLO = MIOLO::getInstance();
        
        //get info for mount calendar.
        $month = $this->getMonth();
        $week = $this->getWeek();
        $year = $this->getYear();
        $border = $this->getGridBorder();
        $date = $this->getData();
        $isVisible = $this->getWeeksVisible();
        $dayOfMonth = $this->getDayOfMonth( $month, $year );
        
        $t = new MSimpleTable( 'simpleTable', 'border=' . $border );
        $t->setAttributes( 'cellspacing=0 cellpadding=3' );
        $k = 0;
        
        $ncols = count( $week );
        if ( $this->getNavigatorBarVisible() )
        {
            $t->setCell( $k ++, 0, '<<  <  ' . $this->getMonthsName( $month ) . '  >  >>', " class=\"s-calendar-title\" colspan=$ncols " );
        }
        else
        {
            $t->setCell( $k ++, 0, $this->getMonthsName( $month ), " class=\"s-calendar-title\" colspan=$ncols " );
        }
        if ( is_array( $week ) )
        {
            $n = count( $week );
            for ( $i = 0; $i < $n; $i ++ )
            {
                $linkDate = $this->generateLinkWeek($week[$i], $month, $year);
                $t->setCell( $k, $i, $linkDate," class=\"s-calendar-column-title\" " );
            }
            $k ++;
        }
        if ( is_array( $dayOfMonth ) )
        {            
            $nrows = count( $dayOfMonth );
            
            for ( $i = 0; $i < $nrows; $i ++ )
            {
                $rowClass = "s-calendar-row" . ($this->zebra ? '-' . ($i % 2) : '');
                $t->SetRowClass( $k, $rowClass );
                if ( is_array( $dayOfMonth[$i] ) )
                {
                    $ncols = count( $dayOfMonth[$i] );
                    for ( $j = 0; $j < $ncols; $j ++ )
                    {
                        $attr = $this->attributes['cell'][$i][$j];
                        if ( $attr == '' )
                        {
                            $attr = "width=0 align=\"center\" valign=\"center\"";
                        }

                        $_day = $dayOfMonth[$i][$j];
                        if ( $_day != '' )
                        {
                            if ( ($isVisible) && ($j == 0) )
                            {
                                $t->setCell( $k, $j, $_day, $attr );
                            }
                            elseif ( ! $isVisible )
                            {
                                if ( $this->enabled )
                                {
                                    $linkDate = $this->generateLink( $_day, $month, $year );
                                    $t->setCell( $k, $j, $linkDate, $attr );
                                }
                                else
                                {
                                    $t->setCell( $k, $j, $_day, $attr );
                                }
                                
                                if ( $this->isSelect( $_day, $month, $year ) && !$this->checksIfTheDateIsDisable($_day, $month, $year) )
                                {
                                    $t->setCellClass( $k, $j, 's-calendar-cell' );
                                }
                            }
                            else
                            {
                                if ( $this->enabled )
                                {
                                    $linkDate = $this->generateLink( $_day, $month, $year );
                                    $t->setCell( $k, $j, $linkDate, $attr );
                                }
                                else
                                {
                                    $t->setCell( $k, $j, $_day, $attr );
                                }
                                
                                if ( $this->isSelect( $_day, $month, $year )  && !$this->checksIfTheDateIsDisable($_day, $month, $year) )
                                {
                                    $t->setCellClass( $k, $j, 's-calendar-cell' );
                                }
                            }
                        }
                        else
                        {
                            $t->setCell( $k, $j, $_day, $attr );
                        }
                    }
                }
                else
                {
                    $attr = $this->attributes['cell'][$i][0];
                    if ( $attr == '' )
                    {
                        $attr = "width=0 align=\"center\" valign=\"center\"";
                    }
                    $t->setCell( $k, 0, $dayOfMonth[$i], $attr );
                    if ( $this->isSelect( $dayOfMonth[$i], $month, $year ) )
                    {
                        $t->setCellClass( $k, 0, 's-calendar-cell' );
                    }
                }
                $k ++;
            }
        }
        
        $day = $this->krono->kMkTime( array( 
                1, 
                $month, 
                $year 
        ) );
        $daysInMonth = $this->krono->kDate( '%t', $day );
        
        for ( $counter = 0; $counter <= $daysInMonth; $counter ++ )
        {
            for ( $i = 0; $i <= count( $date ); $i ++ )
            {
                if ( $counter . '/' . $month . '/' . $year == $date[$i] )
                {
                    $dateArray[$counter . '/' . $month . '/' . $year] = $date[$i];
                    break;
                }
                else
                {
                    $dateArray[$counter . '/' . $month . '/' . $year] = '0';
                }
            }
        }
        
        $l = new MMultiSelection( $this->id, $dateArray, '', $dateArray, false, '', 15 );
        $d = new MDiv( $this->htmlElement, $l );
        $d->addBoxStyle( 'display', 'none' );

        //JavaScript to control click on calendar elements
        $code = "<script type=\"text/javascript\" language=\"JavaScript\">
        function setDate" . $this->id . "(parameters)
        {
           var array = new Array();
           array = parameters.split('<>');
            for ( index = 0; index < array.length ; index++ ) 
            {
                var x = array[index].split(';');
                position = x[0];
                date = x[1];
                cell = document.getElementById(array[index]).parentNode;    
                object  = document.getElementById('" . $this->id . "');

                if ( object.options[position].text == '0' )
                { 
                    object.options[position].text = date;
                    object.options[position].selected = true;
                    cell.className = 's-calendar-cell';
                }
                else
                {
                    object.options[position].text = '0';
                    object.options[position].selected = false;
                    cell.className = '';
                }                
            }
        }
        </script>";
        
        $this->inner = $t->generate() . $d->generate() . $code;
    }
}
?>
