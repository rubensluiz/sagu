<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Classe que gerencia associacoes entre types
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Equipe Solis [sagu2@solis.coop.br]
 *
 * @since
 * Class created on 22/11/2012
 */
class sTypeAssociation
{
    const TYPE_ONE = 'one';
    const TYPE_MANY = 'many';
    
    const JOIN_TYPE_INNER = 'inner';
    const JOIN_TYPE_LEFT = 'left';
    
    /**
     * Armazena o cache da consulta find*() associada
     *
     * @var mixed
     */
    private $_find;
    
    /**
     *
     * @var string
     */
    private $_name;
    
    /**
     * @var SType
     */
    private $_typeObject;
    
    /**
     *
     * @var SType
     */
    private $_sourceType;

    /**
     * Modo de associacao (one ou many)
     * 
     * @var string
     */
    private $mode;
    
    /**
     * Nome do objeto type a associar, ex.: BasUnitConfig
     *
     * @var string
     */
    private $typeClass;

    /**
     * Nome da coluna que deve ser utilizada para fazer a ligacao na associacao
     *
     * @var string
     */
    private $joinColumn;
    
    /**
     * Coluna que liga com a tabela de origem (esquerda)
     * 
     * @var string
     */
    private $joinColumnLeft;
    
    /**
     * Coluna que liga com a tabela direita
     * 
     * @var string
     */
    private $joinColumnRight;
    
    /**
     * Tipo de JOIN que deve fazer na consulta
     * 
     * @var string
     */
    private $joinType = 'left';
    
    /**
     * Define que deve utilizar ONLY no JOIN das consultas (casos especificos do SAGU - ex.: basPhysicalPerson)
     *
     * @var boolean
     */
    private $joinOnly;
    
    /**
     * Se type associado é dependente.
     * Quando uma associacao é definida como dependente, os registros filhos do type associados são excluidos automaticamente
     *  ao remover um registro do type origem.
     *
     * @var boolean
     */
    private $dependent;
    
    /**
     * Ordenacao
     *
     * @var string
     */
    private $orderBy;
    
    /**
     * Limite de registros
     *
     * @var int
     */
    private $limit;
    
    /**
     * Condicoes SQL extras (alem do filtro por $joinColumn chave primaria)
     *
     * @var string
     */
    private $condition;
    
    /**
     * Salvar itens desta associacao ao chamar o metodo save() do type pai.
     *
     * @var boolean 
     */
    private $saveRelateds = false;
    
    public function _getName() {
        return $this->_name;
    }

    public function _setName($value) {
        $this->_name = $value;
    }
    
    /**
     *
     * @return SType
     */
    public function getTypeObject() {
        if ( ! $this->_typeObject )
        {
            $this->_typeObject = SType::instantiateType($this->getTypeClass());
            
            if ( $this->isModeOne() )
            {
                $this->_typeObject->setTableAlias($this->_getName());
            }
        }
        
        return $this->_typeObject;
    }

    public function setTypeObject(SType $type) {
        $this->_typeObject = $type;
    }
    
    /**
     *
     * @return SType
     */
    public function getSourceType() {
        return $this->_sourceType;
    }

    public function setSourceType(SType $_sourceType) {
        $this->_sourceType = $_sourceType;
    }

        
    public function getMode() {
        return $this->mode;
    }

    public function setMode($mode) {
        $this->mode = $mode;
    }

    public function getTypeClass() {
        return $this->typeClass;
    }

    public function setTypeClass($typeClass) {
        $this->typeClass = $typeClass;
    }

    
    public function getJoinColumn() {
        return $this->joinColumn;
    }

    public function setJoinColumn($joinColumn) {
        $this->joinColumn = $joinColumn;
    }
    
    public function getJoinColumnLeft() {
        return $this->joinColumnLeft;
    }

    public function setJoinColumnLeft($joinColumnLeft) {
        $this->joinColumnLeft = $joinColumnLeft;
    }

    public function getJoinColumnRight() {
        return $this->joinColumnRight;
    }

    public function setJoinColumnRight($joinColumnRight) {
        $this->joinColumnRight = $joinColumnRight;
    }
    
    public function getJoinLeft()
    {
        $sourceType = $this->getSourceType();
        $joinCol = SAGU::NVL($this->getJoinColumnLeft(), $this->getJoinColumn());
        
        return $sourceType->getColumnWithAlias($joinCol);
    }
    
    public function getJoinRight()
    {
        $type = $this->getTypeObject();
        
        if ( strlen($this->getJoinColumnRight()) > 0 )
        {
            $joinRight = $this->getJoinColumnRight();
        }
        else
        {
            $joinRight = $type->getPrimaryKey();
        }
        
        return $type->getColumnWithAlias($joinRight);
    }
    
    public function getJoinType() {
        return $this->joinType;
    }

    public function setJoinType($joinType) {
        $this->joinType = $joinType;
    }

    public function getJoinOnly() {
        return $this->joinOnly;
    }

    public function setJoinOnly($joinOnly) {
        $this->joinOnly = $joinOnly;
    }

    public function getDependent() {
        return $this->dependent;
    }

    public function setDependent($dependent) {
        $this->dependent = $dependent;
    }

    public function getOrderBy() {
        return $this->orderBy;
    }

    public function setOrderBy($orderBy) {
        $this->orderBy = $orderBy;
    }

    public function getLimit() {
        return $this->limit;
    }

    public function setLimit($limit) {
        $this->limit = $limit;
    }

    public function getCondition() {
        return $this->condition;
    }

    public function setCondition($condition) {
        $this->condition = $condition;
    }

    /**
     *
     * @return boolean
     */
    public function isModeOne()
    {
        return $this->getMode() == self::TYPE_ONE;
    }
    
    /**
     *
     * @return boolean
     */
    public function isModeMany()
    {
        return $this->getMode() == self::TYPE_MANY;
    }
    
    /**
     *
     * @return boolean
     */
    public function isInnerJoin()
    {
        return $this->getJoinType() == sTypeAssociation::JOIN_TYPE_INNER;
    }
    
    /**
     *
     * @return boolean
     */
    public function isLeftJoin()
    {
        return $this->getJoinType() == sTypeAssociation::JOIN_TYPE_LEFT;
    }
    
    /**
     * @return string 
     */
    public function getConditionSql()
    {
        $joinCol = SAGU::NVL($this->getJoinColumnLeft(), $this->getJoinColumn());
        $conditions = $this->getSourceType()->getColumnWithAlias($joinCol) . ' = ' . $this->getTypeObject()->getPkeyWithAlias();

        if ( $this->getCondition() )
        {
            $conditions .= ' AND ' . $this->getCondition();
        }
        
        return $conditions;
    }
    
    /**
     * Obtem o SQL de ligacao com type associado
     *
     * @return MSQL
     */
    public function _getSql()
    {
        return $this->getSourceType()->msql()
                ->setWhere( $this->getConditionSql() )
                ->setLimit( $this->getLimit() )
                ->setOrderBy( $this->getOrderBy() )
        ;
    }
    
    public function addJoinSql(MSQL $sql)
    {
        // Adiciona colunas relacionadas no SELECT
        $sourceType = $this->getSourceType();
        $type = $this->getTypeObject();
        
//            $sql->setColumnsOverride( array_merge($sql->getColumns(), $assocType->getTableColumnsForSelect()) );

        $tableAndAlias = $type->getTableAndAlias();

        if ( $this->getJoinOnly() )
        {
            $tableAndAlias = ' ONLY ' . $tableAndAlias;
        }
        
        $conditions = $this->getJoinLeft() . ' = ' . $this->getJoinRight();
        
        if ( $this->getCondition() )
        {
            $conditions .= ' AND ' . $this->getCondition();
        }

        if ( $this->isInnerJoin() )
        {
            $sql->addInnerJoin($tableAndAlias, $conditions);
        }
        else if ( $this->isLeftJoin() )
        {
            $sql->addLeftJoin($tableAndAlias, $conditions);
        }
        
        // Recursivo
        foreach ( $type->getAssociations() as $association )
        {
            $association instanceof sTypeAssociation;
            
            if ( $association->isModeOne() )
            {
                $association->addJoinSql($sql);
            }
        }
    }
    
    public function saveRelateds()
    {
        if ( !$this->getSaveRelateds() )
        {
            return;
        }
        
        // Processa dados relacionados
        if ( $this->isModeOne() )
        {
            $row = $this->getAsOne();

            if ( $row )
            {
                $joinColumn = SAGU::NVL($this->getJoinColumnRight(), $this->getJoinColumn());
                $value = $this->getSourceType()->getAttribute($joinColumn);

                if ( strlen($value) > 0 )
                {
                    $row->setAttribute($joinColumn, $value);
                    $row->save();
                }
            }
        }
        else if ( $this->isModeMany() )
        {
            foreach ( $this->getAsMany() as $row )
            {
                $value = $this->getSourceType()->getPkeyValue();

                if ( strlen($value) > 0 )
                {
                    $row instanceof SType;
                    $row->setAttribute($joinColumn, $value);
                    $row->save();
                }
            }
        }
    }
    
    public function deleteRelateds()
    {
        if ( $this->getDependent() )
        {
            if ( $this->isModeOne() )
            {
                $row = $this->getAsOne();

                if ( $row )
                {
                    $row->delete();
                }
            }
            else if ( $this->isModeMany() )
            {
                foreach ( $this->getAsMany() as $row )
                {
                    $row instanceof SType;
                    $row->delete();
                }
            }
        }
    }
    
    public function duplicateRelateds()
    {
        if ( $this->isModeOne() )
        {
            $row = $this->getAsOne();
            $duplicated = null;

            if ( $row )
            {
                $duplicated = $row->duplicate();
            }
            
            $this->getSourceType()->setAttribute($this->_getName(), $duplicated);
        }
        else if ( $this->isModeMany() )
        {
            $duplicateds = array();
            
            foreach ( $this->getAsMany() as $row )
            {
                $row instanceof SType;
                $duplicateds[] = $row->duplicate();
            }
            
            $this->getSourceType()->setAttribute($this->_getName(), $duplicateds);
        }
    }
    
    /**
     * @return SType
     */
    public function getAsOne()
    {
        $row = $this->getSourceType()->getAttribute( $this->_getName() );
        
        return $row instanceof SType ? $row : null;
    }
    
    /**
     * @return array
     */
    public function getAsMany()
    {
        return (array) $this->getSourceType()->getAttribute( $this->_getName() );
    }
    
    public function getSaveRelateds() {
        return $this->saveRelateds;
    }

    public function setSaveRelateds($saveRelateds) {
        $this->saveRelateds = $saveRelateds;
    }
}
?>