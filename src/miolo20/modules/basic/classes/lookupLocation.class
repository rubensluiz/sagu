<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * This class implements functions to work with lookup.
 * 
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 10/12/2010
 *
 *
 **/
class SLocationField extends MContainer
{
    public $size;
    public $hint;
    public $validator;
    public $filter;
    public $autocomplete;
    public $readonly;
    public $captionrequired;
    public $fieldId;
    public $locationName;
    public $countryId;
    public $countryName;
    public $stateId;
    public $stateName;
    public $cityId;
    public $cityName;
    public $neighborhoodId;
    public $neighborhoodName;
    public $addValidators;
    public $formInstance;
    public $labelLookupLocation;

    /**
     * Constructor of SlocationField
     *
     * @param <string> $name
     * @param <integer> $value
     * @param <string> $label
     * @param <integer> $size
     * @param <string> $hint
     * @param <type> $validator
     * @param <array> $filter
     * @param <boolean> $autocomplete
     * @param <boolean> $captionrequired
     * @param <array> $fieldId Associative array with id name of fields (see defaults on construct)
     * @param <boolean> $addValidators add valitators in fields this lookup
     * @param  MForm  Instance of form
     */
	public function __construct($name='',$value='',$label='',$size=10, $hint='', $validator=null, $filter='', $autocomplete=true, $captionrequired =false, $fieldRelatedId = null, $formInstance = null, $addValidators = false)
    {
        //Parent construct
        parent::__construct($name, $value, $label);

        $id = $this->name;
        $this->size = $size;
        $this->hint = $hint;
        $this->validator = $validator;
        $this->filter = $filter;
        $this->autocomplete = $autocomplete;
        $this->readonly = $readonly;
        $this->captionrequired = $captionrequired;
        $this->labelLookupLocation = $label;

        //Set id of the fields
        $this->countryId = $fieldRelatedId['countryId'] ? $fieldRelatedId['countryId'] : $id . '_countryId';
        $this->stateId = $fieldRelatedId['stateId'] ? $fieldRelatedId['stateId'] : $id . '_stateId';
        $this->cityId = $fieldRelatedId['cityId'] ? $fieldRelatedId['cityId'] : $id . '_cityId';
        $this->neighborhoodId = $fieldRelatedId['neighborhoodId'] ? $fieldRelatedId['neighborhoodId'] : $id . '_neighborhoodId';

        //Add valitartors
        $this->addValidators = $addValidators;

        //Instance of the form
        $this->formInstance = $formInstance;

        $this->getFields();
    }

    /**
     * Get the validators of the fields
     * @return <array>  return this validators
     */
    public function getValidators()
    {
        $validators[] = new MRequiredValidator($this->countryId, _M('País', $module));
        $validators[] = new MRequiredValidator($this->stateId, _M('Estado', $module));
        $validators[] = new MRequiredValidator($this->cityId, _M('Cidade', $module));
        $validators[] = new MRequiredValidator($this->neighborhoodId, _M('Bairro', $module));
        
        return $validators;
    }

    /**
     * Add validators in fields
     */
    private function addValidators()
    {
        $module = MIOLO::getCurrentModule();

        if ($this->addValidators)
        {
            $validators = $this->getValidators();
            foreach ($validators as $v)
            {
                $this->formInstance->AddValidator($v);
            }
        }
    }

   /**
    * Generate the component
    */
   public function GenerateInner()
   {
        $vctGroup = new MDiv($id.'_groupLocationFields', $this->getFields());
        $this->inner = $vctGroup;
    }

    public function getFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $id = $this->name;
        $locationName  = 'locationName';
        $countryId = $this->countryId;
        $countryName = 'countryName';
        $stateId = $this->stateId;
        $stateName = 'stateName';
        $cityId = $this->cityId;
        $cityName = 'cityName';
        $neighborhoodId = $this->neighborhoodId;
        $neighborhoodName = 'neighborhoodName';

        //Location
        $locationLabel = new MText($this->name . '_label', $this->labelLookupLocation.':');
        if ( $this->captionrequired )
        {
            $locationLabel->setClass('m-caption m-caption-required');
        }
        $locationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        if ( $this->readonly )
        {
            //Force set data in fields
            $business = new BusinessBasicBusLocation();

            if ( strlen($this->value)>0 )
            {
                $dataLocation = $business->getLocation($this->value);
            }
            $location = new MTextField($this->name, $this->value, '', $this->size, $this->hint, null, true);
        }
        else
        {
            $location = new MLookupTextField($this->name, $this->value, '', $this->size, $this->hint, null, array($locationName, $countryId, $countryName, $stateId, $stateName, $cityId, $cityName, $neighborhoodId, $neighborhoodName), 'basic', 'Location', null, $this->filter, $this->autocomplete);
        }

        $locationDescription = new MTextField($locationName, $dataLocation->name ? $dataLocation->name:null, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $locationDescription->setReadOnly(true);
        $hctLocation = new MHContainer($this->name.'_hct', array($locationLabel, $location, $locationDescription));

        //Countryid
        $countryLabel = new MText($countryId.'_label', _M('País', $module).':');
        $countryLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $country = new MTextField($countryId, $dataLocation->countryId ? $dataLocation->countryId : null, null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'),null,null, true);
        $countryDescription = new MTextField($countryName, $dataLocation->countryName ? $dataLocation->countryName : null,null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), null, null, true);
        $hctCountry = new MHContainer($countryId.'_hct', array($countryLabel,$country, $countryDescription));

        //StateId
        $stateLabel = new MText($stateId.'_label', _M('Estado', $module).':');
        $stateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $state = new MTextField($stateId, $dataLocation->stateId ? $dataLocation->stateId : null, null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'),null,null, true);
        $stateDescription = new MTextField($stateName, $dataLocation->stateName ? $dataLocation->stateName : null,null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), null, null, true);
        $hctState = new MHContainer($stateId.'_hct', array($stateLabel,$state, $stateDescription));

        //CityId
        $cityLabel = new MText($cityId.'_label', _M('Cidade', $module).':');
        $cityLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $city = new MTextField($cityId, $dataLocation->cityId ? $dataLocation->cityId : null, null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'),null,null, true);
        $cityDescription = new MTextField($cityName, $dataLocation->cityName ? $dataLocation->cityName : null,null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), null, null, true);
        $hctCity = new MHContainer($cityId.'_hct', array($cityLabel,$city, $cityDescription));

        //NeighborhoodId
        $neighborhoodLabel = new MText($neighborhoodId.'_label', _M('Bairro', $module).':');
        $neighborhoodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $neighborhood = new MTextField($neighborhoodId, $dataLocation->neighborhoodId ? $dataLocation->neighborhoodId : null, null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'),null,null, true);
        $neighborhoodDescription = new MTextField($neighborhoodName, $dataLocation->neighborhoodName ? $dataLocation->neighborhoodName : null,null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), null, null, true);
        $hctNeighborhood = new MHContainer($neighborhoodId.'_hct', array($neighborhoodLabel,$neighborhood, $neighborhoodDescription));

        //add Validators in fields
        if ( $this->addValidators )
        {
            $this->addValidators();
        }

        $fields = array($hctLocation, $hctCountry,$hctState,$hctCity, $hctNeighborhood);

        $this->setControls($fields);

        return $fields;
    }
}