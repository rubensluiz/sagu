<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Forms interligados.
 *
 * @author Moises Heberle [moises@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.com.br]
 *
 * @since
 * Class created on 08/07/2013
 */
class sLinkedForm extends SManagementForm
{
    const TIPO_UM_PARA_UM = 'one';
    const TIPO_UM_PARA_MUITOS = 'many';
    
    /**
     *
     * @var string
     */
    private $linkedForm;
    
    protected $defs = array();
    
    private $exibirPassos = true;
    
    private $liberarNavegacao = false;
    
    private $bloquearNavegacao = false;
    
    /**
     * Permite ordenacao da grid
     *
     * @var boolean
     */
    protected $permitirOrdenacao = true;
    
    /**
     *
     * @var SGrid
     */
    private $currentGrid;
    
    public function __construct($object, $pkey, $business = null, $title = null, $linkedForm = null)
    {
        $this->setLinkedForm($linkedForm);
        
        parent::__construct($object, $pkey, $business, $title);
        
//        if ( $this->obterFormAnteriorDoAtual() )
//        {
//            $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
//            $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
//        }
        
        $this->toolbar->setButtonUrl(MToolBar::BUTTON_NEW, $this->obterURLInserirInicial());
        $this->toolbar->setButtonUrl(MToolBar::BUTTON_SEARCH, $this->obterURLBuscaInicial());
        
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        
        $this->corrigeNavegacaoMenu();
    }
    
    public function getLinkedForm()
    {
        return $this->linkedForm;
    }

    public function setLinkedForm($linkedForm)
    {
        $this->linkedForm = $linkedForm;
    }

    public function defineFields($fields, $validators, $data = null)
    {
        if ( $this->getExibirPassos() )
        {
            $fields = array_merge(array($this->obterOpcoesNavegacao()), $fields);
        }
        
        if ( !$this->isDeleteFunction() )
        {
            if ( $this->obterTipoFormAtual() == self::TIPO_UM_PARA_UM )
            {
                if ( $this->obterFormSeguinteDoAtual() )
                {
                    $image = 'images/button_next.png';
                    $btn = new MButton('btnSaveAndGo', $this->obterLabelSalvarEContinuar(), null, $image);
                    
                    $fields[] = new MSeparator();
                    $fields[] = new MDiv(null, array($btn), null, 'align="center"');
                }
                else
                {
                    $image = 'images/button_finalize.png';
                    $btn = new MButton('btnSaveAndFinish', _M('Salvar', $module), null, $image);
                    
                    $fields[] = new MSeparator();
                    $fields[] = new MDiv(null, array($btn), null, 'align="center"');
                }
            }
            else if ( $this->obterTipoFormAtual() == self::TIPO_UM_PARA_MUITOS )
            {
                $form = $this->obterFormAtual();
                
                $fields[] = new MSeparator();
                $fields[] = $this->obterBotoesContextuais();
                $fields[] = $this->currentGrid = $this->obterGridUmParaMuitos($form->getGridModule(), $form->getGridName());
                
                if ( $this->obterFormSeguinteDoAtual() )
                {
                    $action = $this->obterURLForm( $this->obterFormSeguinteDoAtual() );
                    $image = 'images/button_next.png';
                    $btn = new MButton('btnSaveAndGo', _M('Continuar', $module), $action, $image);

                    $fields[] = new MSeparator();
                    $fields[] = new MDiv(null, array($btn), null, 'align="center"');
                }
                else
                {
                    $image = 'images/button_finalize.png';
                    $btn = new MButton('btnSaveAndFinish', $this->getCloseLabel(), $this->obterURLBuscaInicial(), $image);
                    
                    $fields[] = new MSeparator();
                    $fields[] = new MDiv(null, array($btn), null, 'align="center"');
                }
            }
        }
        
        parent::defineFields($fields, $validators, $data);
    }
    
    public function getCloseLabel()
    {
        return _M('Fechar', $module);
    }
    
    public function obterLabelAtualizar()
    {
        return _M('Atualizar registro', $module);
    }
    
    public function obterLabelAdicionar()
    {
        return _M('Adicionar registro', $module);
    }
        
    /**
     * @return MDiv
     */
    public function obterBotoesContextuais()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        if ( $this->isUpdateFunction() )
        {
            $label = $this->obterLabelAtualizar();
        }
        else
        {
            $label = $this->obterLabelAdicionar();
        }
        
        $fields[] = new MButton('btnSalvarRegistroContextual', $label);
        
        
        if ( $this->isUpdateFunction() )
        {
            $fields[] = $btn = new MButton('btnCancelarAtualizacaoRegistro', _M('Cancelar', $module));
        }
        
        $div = new MDiv('divBotoesContextuais', $fields);
        $div->addBoxStyle('text-align', 'center');
        
        return $div;
    }
    
    public function btnCancelarAtualizacaoRegistro_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $MIOLO->page->Redirect( SForm::getReturnTo() );
    }
    
    public function btnSalvarRegistroContextual_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        $ok = $this->saveTypeData($sender);
        
        if ( $ok )
        {
            $url = $this->isInsertFunction() ? MIOLO::getCurrentURL() : SAGU::NVL(SForm::getReturnTo(), MIOLO::getCurrentURL());
            $MIOLO->page->Redirect( $url );
        }
    }
    
    public function saveTypeData($sender)
    {
        $ok = null;
        
        try
        {
            $ok = parent::saveTypeData($sender);
            
            $this->salvaCamposCustomizaveis($ok);
        }
        catch (Exception $e)
        {
            $this->AddError($e->getMessage());
        }
        
        return $ok;
    }
    
    /**
     * FIXME: Funcao temporaria para teste de nova implementacao
     */
    public function obterOpcoesNavegacao()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $contador = 0;

        foreach ( $this->obterForms() as $key => $form )
        {
            $form instanceof sLinkedFormDef;
            
            if ( $form->getDesabilitar() )
            {
                continue;
            }
            
            $contador ++;
            
            $label = $form->getLabel();
            $isCurrent = MIOLO::getCurrentAction() == $form->getAction();

            // Cria link ou label texto puro com a opcao
            if ( ( (strlen($this->obterValorDaChave()) > 0 && !$isCurrent ) || $this->getLiberarNavegacao() ) && !$this->bloquearNavegacao )
            {
                $href = $this->obterURLForm($form);
//                $link = new MLink('lnk'.rand(), $label, $href);
            }
            else
            {
//                $link = new MTextLabel('lbl' . rand(), $label);
                $href = null;
            }
            
//            $link->addBoxStyle('padding', '8px');
//            
//            // Destaca o link atual
//            if ( $isCurrent )
//            {
//                $link->addBoxStyle('background-color', '#E0E0E0');
//            }

            if ( $isCurrent )
            {
                $type = MStep::TYPE_CURRENT;
            }
            else if ( $href && !$form->getIsDisabled() )
            {
                $type = MStep::TYPE_PREVIOUS;
            }
            else
            {
                $type = MStep::TYPE_NEXT;
            }
            
            $step = new MStep($contador, $label, $type);
            
            if ( $href  && !$form->getIsDisabled() )
            {
                $onclick = "GotoURL('".$href."');";
                $step->goTo = $onclick;
            }
            
            
            $links[] = $step;
            
//            $links[] = $link;
            
//            $list[] = $opt = new MOption('opt'.rand(), $link);
        }
        
        $navigation = new MHContainer('hctNav', $links);
        $navigation->setShowLabel(false);
        $navigation->setSpaceWidth(null);
        $navigation->setDisposition('horizontal');
//        $ord = new MOrderedList('ordl', $list);
        
        return new MBaseGroup('bgr', null, array($navigation));
    }
    
    public function obterChave()
    {
        return $this->getLinkedDefs()->getChave();
    }
    
    public function obterValorDaChave()
    {
        return MIOLO::_REQUEST($this->obterChave());
    }
    
    /**
     * @return boolean
     */
    public function possuiValorDaChave()
    {
        return strlen($this->obterValorDaChave()) > 0;
    }
    
    /**
     *
     * @return array
     */
    public function obterForms()
    {
        return (array) $this->getLinkedDefs()->getForms();
    }
    
    /**
     *
     * @return sLinkedFormDef
     */
    public function obterFormInicial()
    {
        return current($this->obterForms());
    }
    
    /**
     *
     * @return int
     */
    public function obterTipoFormAtual()
    {
        $form = $this->obterFormAtual();
        
        return $form->getTipo();
    }
    
    /**
     * @return sLinkedFormDef
     */
    public function obterFormAtual()
    {
        $form = array();
        $forms = $this->obterForms();
        
        foreach ( $forms as $key => $_form )
        {
            $_form instanceof sLinkedFormDef;
         
            if ( $_form->getAction() == MIOLO::getCurrentAction() )
            {
                $form = $_form;
                break;
            }
        }
        
        return $form;
    }
    
    /**
     * @return sLinkedFormDef
     */
    public function obterFormSeguinte($handlerAction)
    {
        $form = null;
        $forms = $this->obterForms();
        $keyForm = 0;
        
        foreach ( $forms as $key => $_form )
        {
            $_form instanceof sLinkedFormDef;
            
            if ( $keyForm > 0 )
            {
                if ( !$_form->getDesabilitar() )
                {
                    $form = $forms[$keyForm];
                    break;
                }
                else
                {
                    $keyForm ++;
                }
            }
            
            if ( $_form->getAction() == $handlerAction )
            {
                $keyForm = $key + 1;
//                $form = $forms[$key+1];
            }
        }
        
        return $form;
    }
    
    /**
     * @return array
     */
    public function obterFormSeguinteDoAtual()
    {
        return self::obterFormSeguinte( MIOLO::getCurrentAction() );
    }
    
    /**
     * @return array
     */
    public function obterFormAnterior($handlerAction)
    {
        $form = null;
        $forms = $this->obterForms();
        $keyForm = 0;
        
        foreach ( $forms as $key => $_form )
        {
            $_form instanceof sLinkedFormDef;
            
            if ( $_form->getDesabilitar() )
            {
                continue;
            }
            
            if ( $_form->getAction() == $handlerAction )
            {
                $keyForm = $key- 1;
            }
        }
        
        return $form;
    }
    
    /**
     * @return array
     */
    public function obterFormAnteriorDoAtual()
    {
        return self::obterFormAnterior( MIOLO::getCurrentAction() );
    }

    /**
     * @return sLinkedDef
     */
    public function getLinkedDefs()
    {
        $opts = $this->getLinkedForms();
        
        return $opts[ $this->getLinkedForm() ];
    }

    /**
     * @return \SGrid 
     */
    public function obterGridUmParaMuitos($gridModule, $gridName, $filters = array())
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $function = MIOLO::_REQUEST('function');

        if ( strlen($gridModule) == 0 || strlen($gridName) == 0 )
        {
            throw new Exception('Deve ser definido gridModule e gridName no form.');
        }
        
        if ( !$filters )
        {
            $filters = $this->obterFiltrosContextuais();
        }
        
        // Seguranca
        if ( count(array_filter($filters)) == 0 )
        {
//            throw new Exception(_M('Existem filtros faltando.', $module));
        }
        
        $typeObject = $this->getObject();
        if( $function == SForm::FUNCTION_UPDATE )
        {
            $typeObject->setfiltrarPelaPk(true);
        }

        $grid = $MIOLO->getUI()->getGrid($gridModule, $gridName);
        $grid instanceof SGrid;
        $grid->setPageLength(999999999);
        $grid->setGridDataType($typeObject, $filters);
        $grid->disablePagination();
        $grid->setIsContextualGrid();
//        $grid->disableExports();
        
        if ( $this->permitirOrdenacao )
        {
            $grid->colSortingCleanURL = true;
        }
        else
        {
            $grid->disableColumnSorting();
        }
        
        // Adiciona parametro da chave na URL de ordenacao
        $grid->href .= '&' . $this->obterChave() . '=' . $this->obterValorDaChave();
        
        
        return $grid;
    }
    
    /**
     *
     * @return array
     */
    public function obterFiltrosContextuais()
    {
        $filters = array();
        $filters[ $this->obterChave() ] = $this->obterValorDaChave();

        return $filters;
    }
    
    /**
     *
     * @return array
     */
    public function obterFiltrosContextuaisBusca()
    {
        $filters = array();
        
        foreach ( $this->obterFiltrosContextuais() as $key => $val )
        {
            $filters[ $key . 'S' ] = $val;
        }
        
        return $filters;
    }
    
    public function btnSaveAndGo_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        $ok = $this->saveTypeData($sender);

        if ( $ok )
        {
            // Atribui chave no MIOLO::_REQUEST
            if ( $this->isInsertFunction() )
            {
                $_REQUEST[ $this->obterChave() ] = $this->getTypeObjectPopulated()->getPkeyValue();
            }

            // Cria url para proximo "passo"
            $form = $this->obterFormSeguinteDoAtual();
            $url = $this->obterURLForm($form);

            $MIOLO->page->Redirect( $url );
        }
    }
    
    public function btnSaveAndFinish_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        $ok = $this->saveTypeData($sender);
        
        if ( $ok )
        {
            //$this->afterSave();
        }
    }
    
    public function afterSave()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        $MIOLO->page->Redirect( $this->obterURLBuscaInicial() );
        
        parent::afterSave();
    }
    
    /**
     * @return string
     */
    public function obterURLForm(sLinkedFormDef $form = null, $paramArgs = array())
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        $args = $this->obterFiltrosContextuais();
        $args['function'] = $form->getTipo() == self::TIPO_UM_PARA_MUITOS ? SForm::FUNCTION_INSERT : SForm::FUNCTION_UPDATE;
        
        $args = array_merge($args, $paramArgs);        
        $args = array_merge($args, $form->getArgs());
        
        $url = $MIOLO->GetActionURL($form->getModule(), $form->getAction(), null, $args);
        
        return $url;
    }
    
    /**
     *
     * @return string
     */
    public function obterURLInserirInicial()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $form = $this->obterFormInicial();

        $args['function'] = SForm::FUNCTION_INSERT;
        
        return $MIOLO->GetActionURL($form->getModule(), $form->getAction(), null, $args);
    }
    
    /**
     *
     * @return string
     */
    public function obterURLBuscaInicial()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        $form = $this->obterFormInicial();
        
//        $args = $this->obterFiltrosContextuaisBusca();
        $args = array();
        $args['function'] = SForm::FUNCTION_SEARCH;
        
        $this->definirFiltroTemporario();
        
        return $MIOLO->GetActionURL($form->getModule(), $form->getAction(), null, $args);
    }
    
    /**
     * @return string
     */
    public function getContextualURL($module, $action, $args = array())
    {
        $MIOLO = MIOLO::getInstance();
        
        // Na volta, deve vir como edicao de registro.
        $retArgs = $args;
        $retArgs['function'] = SForm::FUNCTION_UPDATE;
        $returnTo = $MIOLO->GetActionURL(MIOLO::getCurrentModule(), MIOLO::getCurrentAction(), null, $retArgs);
        $args[SForm::getReturnToKey()] = SForm::createReturnTo($returnTo);
        
        if ( !$args['function'] )
        {
            $args['function'] = SForm::FUNCTION_INSERT;
        }
        
        return $MIOLO->GetActionURL($module, $action, null, $args);
    }
    
    /**
     * @return MDiv
     */
    public function obterVoltarContextual()
    {
        $url = SForm::getReturnTo();
        
        // Quando estiver em modo edicao do registro contextual, deve voltar dois niveis na URL
        // caso contrario nao voltaria para tela pai, mas sim para o modo INSERIR desta atual
        if ( $this->isUpdateFunction() )
        {
            preg_match('/return_to=(.*)/', SForm::getReturnToNormalized(), $matches);
            $url = $matches[1];
        }
        
        $fields[] = new MLink('lnkVoltar', _M('<< Voltar', $module), $url);
        
        return new MDiv('divVoltarContextual', $fields);
    }
    
    /**
     * Obtem grid de detalhe do registro que esta sendo editado
     * 
     * @return \MBaseGroup 
     */
    public function getDetailGridBaseGroup($gridModule, $gridName, $bgrLabel, SType $typeObject, $filters = array())
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $grid = $MIOLO->getUI()->getGrid($gridModule, $gridName);
        $grid instanceof SGrid;
        $grid->setGridDataType($typeObject, $filters);
        $grid->disablePagination();
        $grid->disableExports();
        $grid->disableColumnSorting();
        $grid->clearActions();

        $div = new MDiv('divDetails', array($grid));
        $div->addBoxStyle('width', '100%');
        $controls[] = $div;

        $bgr = new MBaseGroup('bgrDesc', $bgrLabel, $controls);
        
        return $bgr;
    }
    
    /**
     * @return array 
     */
    public function getLinkedForms()
    {
        return array(
            'lnkCobrancaBancaria' => $this->newDef()
                ->setChave('cobrancabancariaid')
                ->addForm( $this->newFormDef()->setLabel('Cobrança bancária')->setModule('finance')->setAction('main:config:cobrancabancaria')->setTipo(self::TIPO_UM_PARA_UM) )
                ->addForm( $this->newFormDef()->setLabel('Campos da remessa')->setModule('finance')->setAction('main:config:camporemessa')->setTipo(self::TIPO_UM_PARA_MUITOS)->setGridModule('finance')->setGridName('GrdCampoRemessaSearch') )
                ,
        );
    }
    
    /**
     * @return sLinkedDef
     */
    public function newDef()
    {
        return new sLinkedDef();
    }
    
    /**
     * @return sLinkedFormDef
     */
    public function newFormDef()
    {
        return new sLinkedFormDef();
    }
    
    /**
     * A navegacao do menu deve apontar sempre para o primeiro passo.
     */
    public function corrigeNavegacaoMenu()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        $forms = $this->getLinkedDefs()->getForms();
        $form = $forms[0];
        
        if ( $form instanceof sLinkedFormDef )
        {
            SMainMenu::setOverrideMenuNav($form->getAction());
        }
    }
    
    public function getExibirPassos() {
        return $this->exibirPassos;
    }

    public function setExibirPassos($exibirPassos) {
        $this->exibirPassos = $exibirPassos;
    }
    
    public function getLiberarNavegacao() {
        return $this->liberarNavegacao;
    }

    public function setLiberarNavegacao($liberarNavegacao) {
        $this->liberarNavegacao = $liberarNavegacao;
    }
    
    public function getBloquearNavegacao() {
        return $this->bloquearNavegacao;
    }

    public function setBloquearNavegacao($bloquearNavegacao) {
        $this->bloquearNavegacao = $bloquearNavegacao;
    }
    
    public function obterLabelSalvarEContinuar()
    {
        return _M('Salvar e continuar');
    }
    
    /**
     * Isto foi feito para o SForm poder obter os registros selecionados da acao em massa de forma adequada.
     * @see SForm::obterRegistrosSelecionados()
     * 
     * @return SGrid
     */
    public function getGrid()
    {
        return $this->currentGrid;
    }
}
?>