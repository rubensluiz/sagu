<?php

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Description of sCamposDeDadosGeograficos
 *
 * @author augusto
 */
class sDivCamposDeDadosGeograficos extends MDiv
{ 
    /**
     * Constantes dos ids que serão movimentados.
     */
    const CHANGED_CITY_ID    = 'cityId';
    const CHANGED_STATE_ID   = 'stateId';
    const CHANGED_COUNTRY_ID = 'countryId';
    
    /**
     * Método construtor da classe.
     * 
     * @param String $divName
     * @param stdClass $args{countryId, stateId, cityId}
     * @param boolean $somenteLeitura
     */
    public function __construct($divName = NULL, $args = null, $somenteLeitura = false)
    {
        if ( strlen($args->cityId) > 0 )
        {
            $args->changed = self::CHANGED_CITY_ID;
        }
        
        $args->divName = $divName;
        
        parent::__construct($divName, self::obterCamposDeDadosGeograficos($args, $somenteLeitura));
    }
    
    /**
     * Retorna os campos de dados geográficos.
     * Esta função é chamada por ajax para atualização dos dados.
     * 
     * @param type $args
     * @param type $somenteLeitura
     * @return \MHContainer
     */
    public static function obterCamposDeDadosGeograficos($args, $somenteLeitura = false)
    {
        $args   = self::verificaOQueMudou($args);
        $fields = array();
        
        $fields[] = self::obterCampoDePais($args, $somenteLeitura);
        $fields[] = self::obterCampoDeEstado($args, $somenteLeitura);
        $fields[] = self::obterCampoDeCidade($args, $somenteLeitura);

        return $fields;
    }
    
    /**
     * Cria as validações dos campos de dados geográficos na array]
     * de validações.
     * 
     * @param array $valids
     * @return array
     */
    public function obterValidacoesDosCamposDeDadosGeograficos($valids)
    {
        $valids[] = new MRequiredValidator(self::CHANGED_COUNTRY_ID, _M('País'));
        $valids[] = new MRequiredValidator(self::CHANGED_STATE_ID, _M('Estado'));
        $valids[] = new MRequiredValidator(self::CHANGED_CITY_ID, _M('Cidade'));
        $valids[] = new MRequiredValidator('cityName', _M('Cidade'));
        
        return $valids;
    }
    
    /**
     * Verifica o que mudou, país, estado, cidade ou nenhum.
     * 
     * @param stdClass $args
     * @return stdClass
     */
    public static function verificaOQueMudou($args)
    { 
        switch ( $args->changed )
        {
            case self::CHANGED_CITY_ID:
                $args = self::acaoAoMudarCidade($args);
                break;
            
            case self::CHANGED_STATE_ID:
                $args = self::acaoAoMudarEstado($args);
                break;
            
            case self::CHANGED_COUNTRY_ID:
                $args = self::acaoAoMudarPais($args);
                break;
            
            default:
                $args = self::acaoPadraoAoMudar($args);
                break;
        }
        
        return $args;
    }
    
    /**
     * Ação que deve ser executada ao ser mudada a cidade.
     * 
     * @param stdClass $args
     * @return stdClass
     */
    public static function acaoAoMudarCidade($args)
    {
        $busCity = new BusinessBasicBusCity();
        
        if ( strlen($args->cityId) > 0 )
        {
            $city = $busCity->getCity($args->cityId);

            $args->stateId = $city->stateId;
            $args->countryId = $city->countryId;
        }
            
        return $args;
    }
    
    /**
     * Ação que deve ser executada ao ser mudado o estado.
     * 
     * @param stdClass $args
     * @return stdClass
     */
    public static function acaoAoMudarEstado($args)
    {
        $args->cityId = '';
            
        return $args;
    }
    
    /**
     * Ação que deve ser executada ao ser mudado o país.
     * 
     * @param stdClass $args
     * @return stdClass
     */
    public static function acaoAoMudarPais($args)
    {
        $args->cityId = '';
        $args->stateId = '';
            
        return $args;
    }
    
    /**
     * Ação que deve ser executada padrão.
     * 
     * @param stdClass $args
     * @return stdClass
     */
    public static function acaoPadraoAoMudar($args)
    {
        $args->cityId = '';
        $args->stateId = '';
        $args->countryId = SAGU::getParameter('BASIC', 'DEFAULT_COUNTRY_ID');
            
        return $args;
    }
    
    /**
     * Retorna combobox contendo os países.
     * 
     * @param stdClass $args
     * @param boolean $somenteLeitura
     * @return \MHContainer
     */
    public static function obterCampoDePais($args, $somenteLeitura)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        $lblCountryId = new MLabel(_M('País', $module) . ': ');
        if ( !$somenteLeitura )
        {
            $lblCountryId->setClass('m-caption m-caption-required');
        }
        $lblCountryId->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $txtCountryId = new MSelection(self::CHANGED_COUNTRY_ID, SAGU::NVL(MIOLO::_REQUEST('countryId'), $args->countryId), null, self::carregarPaises());
        $txtCountryId->setReadOnly($somenteLeitura);
        $txtCountryId->addAttribute('onchange', self::getAjaxAction($args->divName, self::CHANGED_COUNTRY_ID));
        
        return new MHContainer('hctCountry', array($lblCountryId, $txtCountryId));
    }
    
    /**
     * Retorna combobox contendo os estados do país.
     * 
     * @param stdClass $args
     * @param boolean $somenteLeitura
     * @return \MHContainer
     */
    public static function obterCampoDeEstado($args, $somenteLeitura)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        $lblStateId = new MLabel(_M('Estado', $module) . ': ');
        if ( !$somenteLeitura )
        {
            $lblStateId->setClass('m-caption m-caption-required');
        }
        $states = self::carregarEstados($args);
        $lblStateId->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        
        if ( ( $args->actionAdd == DB_TRUE ) && ( $args->changed == self::CHANGED_STATE_ID ) )
        {
            $txtStateId = new MTextField(self::CHANGED_STATE_ID, null, null, SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE'));
            $txtStateId->setJsHint(_M('Informe UF do estado', $module));
            $txtStateId->addAttribute('onkeyup', "
                if ( this.value.length > 2 )
                {
                    this.value = this.value.substr(0,2);
                    alert('O código do estado deve possuir apenas 2 caracteres.');
                }
            ");
            $txtStateId->addAttribute('onblur', "
                if ( this.value.length > 2 )
                {
                    this.value = this.value.substr(0,2);
                }
            ");
            $txtStateName = new MTextField('stateName', null, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $txtStateName->setJsHint(_M('Informe o nome do estado', $module));
            $txtStateName->addAttribute('onkeyup', "
                if ( this.value.length > 50 )
                {
                    this.value = this.value.substr(0,50);
                    alert('O nome do estado deve possuir no máximo 50 caracteres.');
                }
            ");
            $txtStateName->addAttribute('onblur', "
                if ( this.value.length > 50 )
                {
                    this.value = this.value.substr(0,50);
                }
            ");
            $txtStateLink = self::obterLinkParaSalvarDadoGeografico($args->divName, self::CHANGED_STATE_ID);
            $hint = new MLabel(_M('Informe UF e nome do estado respectivamente. Após, clique na confirmação.'), '#287eb0');
            $hint->setClass('m-hint');
            $hctArray = array($lblStateId, $txtStateId, $txtStateName, $txtStateLink, $hint);
        }
        else
        {
            $txtStateId = new MSelection(self::CHANGED_STATE_ID, SAGU::NVL(MIOLO::_REQUEST('stateId'), $args->stateId), null, $states);
            $txtStateId->setReadOnly($somenteLeitura);
            $txtStateId->addAttribute('onchange', self::getAjaxAction($args->divName, self::CHANGED_STATE_ID));
            if ( !($args->countryId == SAGU::getParameter('BASIC', 'DEFAULT_COUNTRY_ID')) )
            {
                $txtStateName = self::obterLinkParaAdicionarDadoGeografico($args->divName, self::CHANGED_STATE_ID);
            }
            $hctArray = array($lblStateId, $txtStateId, $txtStateName);
        }
        
        return new MHContainer('hctState', $hctArray);
    }
    
    /**
     * Retorna combobox contendo as cidades do estado.
     * 
     * @param stdClass $args
     * @param boolean $somenteLeitura
     * @return \MHContainer
     */
    public static function obterCampoDeCidade($args, $somenteLeitura)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        $lblCityId = new MLabel(_M('Cidade', $module) . ': ');
        if ( !$somenteLeitura )
        {
            $lblCityId->setClass('m-caption m-caption-required');
        }        
        $lblCityId->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        
        if ( ( $args->actionAdd == DB_TRUE ) || ( $args->changed == self::CHANGED_STATE_ID && $args->save ) )
        {
            $txtCityName = new MTextField('cityName', $args->cityName, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $txtCityName->setJsHint(_M('Informe o nome da cidade', $module));
            $txtStateLink = self::obterLinkParaSalvarDadoGeografico($args->divName, self::CHANGED_CITY_ID);
            $hint = new MLabel(_M('Informe o nome da cidade. Após, clique na confirmação.'), '#287eb0');
            $hint->setClass('m-hint');
            $hctArray = array($lblCityId, $txtCityName, $txtStateLink, $hint);
        }
        else
        {
            $lblCityId->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $txtCityId = new MSelection(self::CHANGED_CITY_ID, SAGU::NVL(MIOLO::_REQUEST('cityId'), $args->cityId), null, self::carregarCidades($args));
            $txtCityId->setReadOnly($somenteLeitura);
            if ( !($args->countryId == SAGU::getParameter('BASIC', 'DEFAULT_COUNTRY_ID')) )
            {
                $txtCityLink = self::obterLinkParaAdicionarDadoGeografico($args->divName, self::CHANGED_CITY_ID);
            }
            $hctArray = array($lblCityId, $txtCityId, $txtCityLink);
        }
        
        return new MHContainer('hctCity', $hctArray);
    }
    
    /**
     * Carrega os países.
     * 
     * @return array
     */
    public static function carregarPaises()
    {
        $busCountry = new BusinessBasicBusCountry();
        
        $filters = new stdClass();
        $filters->name = '%';
        $countries = $busCountry->searchCountry($filters);
        
        return $countries;
    }
    
    /**
     * Carrega os estados do país.
     * 
     * @param stdClass $args
     * @return array
     */
    public static function carregarEstados($args)
    {
        $busState = new BusinessBasicBusState();
        
        $filters = new stdClass();
        $filters->countryId = $args->countryId;
        $states = $busState->searchState($filters);
        
        return $states;
    }
    
    /**
     * Carrega as cidades do estado.
     * 
     * @param stdClass $args
     * @param array $states
     * @return array
     */
    public static function carregarCidades($args)
    {
        $busCity = new BusinessBasicBusCity();
        $cities  = null;
        
        $args->stateId = SAGU::NVL( MIOLO::_REQUEST('stateId'), $args->stateId );
        $args->countryId = SAGU::NVL( MIOLO::_REQUEST('countryId'), $args->countryId );
        
        if ( strlen($args->stateId) > 0 || count(self::carregarEstados($args)) == 0 )
        {
            $filters = new stdClass();
            $filters->countryId = $args->countryId;
            
            if ( strlen($args->stateId) > 0 )
            {
                $filters->stateId = $args->stateId;
            }
            
            $cities = $busCity->searchCity($filters);
        }
        
        return $cities;
    }
    
    /**
     * Retorna o link para adiconar um dado geográfio, estado ou cidade.
     * 
     * @param String $divName
     * @param String $changed
     * @return \MImage
     */
    public static function obterLinkParaAdicionarDadoGeografico($divName, $changed)
    {
        $MIOLO = MIOLO::getInstance();
        
        $imagem = $MIOLO->getUI()->getImageTheme($MIOLO->theme->id, 'button_add.png');
        $addLink = new MImage('addLink_' . $changed, _M('Adicionar'), $imagem);
        $addLink->addAttribute('onClick', self::getAjaxAction($divName, $changed, DB_TRUE));
        $addLink->addAttribute('style', 'margin-top:3px; cursor:pointer');
        
        return $addLink;
    }
    
    /**
     * Retorna o link para salvar um dado geográfio, estado ou cidade.
     * 
     * @param String $divName
     * @param String $changed
     * @return \MImage
     */
    public static function obterLinkParaSalvarDadoGeografico($divName, $changed)
    {
        $MIOLO = MIOLO::getInstance();
        
        $imagem = $MIOLO->getUI()->getImageTheme($MIOLO->theme->id, 'botao_aplicar.png');
        $addLink = new MImage('addLink_' . $changed, _M('Salvar'), $imagem);
        $addLink->addAttribute('onClick', self::getAjaxAction($divName, $changed, false, 'sDivCamposDeDadosGeograficos::salvarDadoGeografico'));
        $addLink->addAttribute('style', 'margin-top:3px; cursor:pointer');
        
        return $addLink;
    }
    
    /**
     * Verifica qual dado geográfico deve ser salvo e o executa.
     * 
     * @param stdClass $args
     */
    public static function salvarDadoGeografico($args)
    {
        $args = ($args->changed == self::CHANGED_CITY_ID) ? self::salvarCidade($args) : self::salvarEstado($args);
        
        if ( $args->save ==  FALSE )
        {
            echo("<script>alert('{$args->msg}');</script>");
        }
        
        return self::obterCamposDeDadosGeograficos($args);
    }
    
    /**
     * Salva o dado geográfico de cidade.
     * 
     * @param stdClass $args
     * @return stdClass
     */
    public static function salvarCidade($args)
    {
        $MIOLO = MIOLO::getInstance();
        
        $args->save = FALSE;
        
        $defaultCountryId = SAGU::getParameter('BASIC', 'DEFAULT_COUNTRY_ID');
        if ( $args->countryId == $defaultCountryId )
        {
            $args->msg = _M('Não é possível adicionar cidades a este país.');
        }
        else
        {
            $valid = strlen($args->stateId) > 0 && strlen($args->stateId) <= 2 &&
                     strlen($args->countryId) > 0 && strlen($args->countryId <= 3) &&
                     strlen($args->cityName) > 0;

            if ( $valid )
            {
                try
                {
                    SDatabase::beginTransaction();

                    if ( strlen($args->stateId) > 0 )
                    {
                        $data = new stdClass();
                        $data->countryId = $args->countryId;
                        $data->stateId   = $args->stateId;
                        $data->name      = $args->cityName;

                        $busCity = new BusinessBasicBusCity();
                        $args->cityId = $busCity->insertCity($data);
                    }

                    $args->save = TRUE;

                    SDatabase::commit();
                } 
                catch (Exception $ex) 
                {
                    SDatabase::rollback();
                    $args->msg = 'Ops! Alguma coisa ocorreu errada com o registro!\n(' . $ex->getMessage() . ')\n- Verifique se foi informado o país.\n- Verifique se foi informado o estado.';
                }
            }
            else
            {
                $args->msg = _M('Preencha corretamente os campos de país, estado e cidade.');
            }
        }
        
        return $args;
    }
    
    /**
     * Salva o dado geográfico de estado.
     * 
     * @param stdClass $args
     * @return stdClass
     */
    public static function salvarEstado($args)
    {
        $MIOLO = MIOLO::getInstance();
        
        $args->save = FALSE;
        
        $defaultCountryId = SAGU::getParameter('BASIC', 'DEFAULT_COUNTRY_ID');
        if ( $args->countryId == $defaultCountryId )
        {
            $args->msg = _M('Não é possível adicionar estados a este país.');
        }
        else
        {
            $valid = strlen($args->stateId) > 0 && strlen($args->stateId) <= 2 &&
                     strlen($args->stateName) > 0 && strlen($args->stateName <= 50) &&
                     strlen($args->countryId) > 0 && strlen($args->countryId <= 3);

            if ( $valid )
            {
                try
                {
                    SDatabase::beginTransaction();

                    $data = new stdClass();
                    $data->stateId   = $args->stateId;
                    $data->name      = $args->stateName;
                    $data->countryId = $args->countryId;

                    $busState = new BusinessBasicBusState();
                    $busState->insertState($data);

                    $args->stateId = $data->stateId;
                    $args->save = TRUE;

                    SDatabase::commit();
                } 
                catch (Exception $ex) 
                {
                    SDatabase::rollback();
                    $args->msg = "Ops! Alguma coisa ocorreu errada com o registro! {$ex->getMessage()}";
                }
            }
            else
            {
                $args->msg = _M('Preencha corretamente os campos de país e estado.');
            }
        }

        return $args;
    }
    
    /**
     * Chamada ajax para carregar os campos.
     * 
     * @param String $divName
     * @param int $changed
     * @return String
     */
    public static function getAjaxAction($divName, $changed, $actionAdd = DB_FALSE, $function = null)
    {
        $args = array(
            'changed' => $changed, 
            'divName' => $divName, 
            'actionAdd' => $actionAdd
        );
        
        $function = (strlen($function)) ? $function : 'sDivCamposDeDadosGeograficos::obterCamposDeDadosGeograficos';
                
        return SForm::getAjaxAction($function, $divName, false, $args);
    }
}

?>
