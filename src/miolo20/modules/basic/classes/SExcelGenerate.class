<?php
/**
 * <--- Copyright 2005-2014 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Classe que contém os métodos na exportação de dados da grid para XLS
 * Lembrando que essa classe trabalha diretamente com a biblioteca PHPExcel (1.8)
 * @see PHPExcel (1.8) [https://phpexcel.codeplex.com/]
 *
 * @author Luís Augusto Weber Mercado [luis_augusto@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * @author Luís Augusto Weber Mercado [luis_augusto@solis.com.br]
 *
 * @since
 * Class created on 03/11/2014
 */
$MIOLO = MIOLO::getInstance();
$MIOLO->Uses("classes/PHPExcel/PHPExcel.php", "basic");

class SExcelGenerate extends PHPExcel
{
    
    /**
     * Cor do cabeçalho
     * 
     * @final String de 8 digitos (RRGGBBAA)
     */
    const FONTE = "Arial";
    
    /**
     * Cor do cabeçalho
     * 
     * @final String de 8 digitos (RRGGBBAA)
     */
    const COR_CABECALHO = "1F72BFCC";
    
    /**
     * Cor da fonte do cabeçalho
     * 
     * @final String de 8 digitos (RRGGBBAA)
     */
    const COR_FONTE_CABECALHO = "F4F4F4FF";
    
    /**
     * Cor das linhas alternadas
     * 
     * @final String de 8 digitos (RRGGBBAA)
     */
    const COR_LINHAS_ALTERNADAS = "DFEFFFFF";
    
    /**
     * Título da worksheet
     * 
     * @var String 
     */
    private $titulo;
    
    /**
     * Conteúdo da worksheet
     * 
     * @var Array 
     */
    private $conteudo;
        
    /**
     * Construtor da classe
     * 
     * @param Array $titulo Título a ser exibido
     * @param Array $conteudo Conteúdo a ser adicionado ao arquivo
     */
    public function __construct($titulo, $conteudo)
    {
        parent::__construct();
        
        $this->titulo = $titulo;
        $this->conteudo = $conteudo;
        
    }
    
    /**
     * Gera a sheet
     * 
     * <b>Esse método é MUITO mais lento que o gera()</b>
     * 
     * Envia o arquivo gerado direto para o browser
     * 
     * @param Boolean $download TRUE para fazer o download direto, FALSE para 
     * apenas gerar o arquivo
     * @param Boolean $diferencaEntreLinhas Se é necessária a diferenciação entre as linhas
     * @param Boolean $colunasEmBold Se o nome das colunas deve ser em bold
     * 
     * @return String Caminho do arquivo gerado ou NULL em caso de download direto
     */
    public function geraFormatado( $download = true, $diferencaEntreLinhas = true, $colunasEmBold = true )
    {
        $this->setActiveSheetIndex(0);
        
        // Pega a sheet selecionada
        $sheet = $this->getActiveSheet();
        
        // Número total de colunas
        $numeroColunas = count($this->conteudo[0]);
        
        // Contém o comprimento da maior string relativa ao conteúdo de uma coluna
        $maiorLengthPorColuna = array();
                
        // Agrupa a primeira linha
        $sheet->mergeCellsByColumnAndRow(0, 1, $numeroColunas - 1, 1);
        
        // Adiciona o título
        $sheet->setCellValueExplicit("A1", utf8_encode($this->titulo), PHPExcel_Cell_DataType::TYPE_STRING);
        
        // Formatada a linha de título
        $estiloTitulo = $sheet->getStyle("A1");
        $estiloTitulo->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
        $estiloTitulo->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
        $estiloTitulo->getFont()->setName(SExcelGenerate::FONTE);
        $estiloTitulo->getFont()->setBold(true);
        $estiloTitulo->getFont()->setSize(12);
        $sheet->getRowDimension(1)->setRowHeight(30);
                
        // Navega pelas informações
        // Nagega pelas linhas
        foreach( $this->conteudo as $y => $row )
        {
            set_time_limit(30); // Evitar o timeout do script
            
            // Navega pelas colunas
            foreach( $row as $x => $valor )
            {
                $valor = trim($valor); // Normalizando, para evitar tamanhos desnecessários
                
                $cell = $sheet->getCellByColumnAndRow($x, $y + 2);
                
                // Seta o valor
                $cell->setValue(utf8_encode($valor));
                
                // Seta o formato do campo como "string"
                $cell->setDataType(PHPExcel_Cell_DataType::TYPE_STRING);
                
                $estilo = $sheet->getStyleByColumnAndRow($x, $y + 2);
                
                // Seta a borda para melhor visualização
                $estilo->getBorders()->getBottom()->setBorderStyle(PHPExcel_Style_Border::BORDER_HAIR); // Abaixo
                $estilo->getBorders()->getLeft()->setBorderStyle(PHPExcel_Style_Border::BORDER_HAIR); // Esquerda
                                
                // Se está sendo tratada as colunas
                if( $y === 0 )
                {
                    // Cor do cabeçalho
                    $estilo->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
                    $estilo->getFill()->getStartColor()->setRGB(SExcelGenerate::COR_CABECALHO);

                    // Alinhamento
                    $estilo->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

                    // Cor da fonte
                    $estilo->getFont()->getColor()->setARGB(SExcelGenerate::COR_FONTE_CABECALHO);

                    // Deixar no mesmo padrão do SAGU
                    $estilo->getFont()->setName(SExcelGenerate::FONTE);
                    
                }
                else if( $diferencaEntreLinhas ) // Se é necessária a diferenciação entre as linhas
                {
                    if( $y % 2 === 0 )
                    {
                        $estilo->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
                        $estilo->getFill()->getStartColor()->setRGB(SExcelGenerate::COR_LINHAS_ALTERNADAS);

                    }

                }
                
                $maior =  is_null($maiorLengthPorColuna[$x]) ? 0 : $maiorLengthPorColuna[$x];
                
                // Armazena por coluna o maior comprimento do conteúdo
                if( strlen(utf8_encode($valor)) > $maior )
                {
                    $maiorLengthPorColuna[$x] = strlen($valor);
                    
                }
                
            }
            
        }
        
        // Seta o tamanho das colunas relativas ao maior valor que estas contém
        // Seta se é necessário deixar os nomes das colunas em 'bold'
        for( $i = 0; $i < $numeroColunas; $i++ )
        {
            // Pega a coluna no formato hexadecimal
            $index = PHPExcel_Cell::stringFromColumnIndex($i);
            
            $sheet->getColumnDimension($index)->setWidth($maiorLengthPorColuna[$i]);
            
            // Para formatar a linha que contém as colunas, no caso, a segunda
            $sheet->getStyle($index . "2")->getFont()->setBold($colunasEmBold);
            
        }
        
        // Seta a altura default das linhas
        $sheet->getDefaultRowDimension()->setRowHeight(20);
                        
        $tempo = gettimeofday();
        $nome = "planilha" . $tempo["sec"] . ".xls";
        $this->getProperties()->setCreator("Solis");
        $this->getProperties()->setLastModifiedBy("Solis");
        $this->getProperties()->setTitle("{$this->titulo} - Dados");
        $this->getProperties()->setSubject("{$this->titulo} - Dados");
        $this->getProperties()->setDescription("Dados da tabela do formulário de {$this->titulo}");
        
        $caminho = SAGU::getTmpFile($nome);
        
        if( $download )
        {
            $this->setArquivoParaDownload($nome);
            
            return null;
            
        }
        
        // Salva o arquivo na pasta temporária
        $writer = new PHPExcel_Writer_Excel5($this);
        $writer->save($caminho);
        
        return $caminho;
        
    }
    
    /**
     * Gera a sheet
     * 
     * @param Boolean $download TRUE para fazer o download direto, FALSE para 
     * apenas gerar o arquivo
     * 
     * @return String Caminho do arquivo gerado ou NULL em caso de download direto
     */
    public function gera( $download = true )
    {
        $this->setActiveSheetIndex(0);
        
        // Pega a sheet selecionada
        $sheet = $this->getActiveSheet();

        $dados = $this->corrigeCodificacaoArray($this->conteudo);
        
        $sheet->fromArray($dados, NULL, "A1");
        
        $tempo = gettimeofday();
        $nome = "planilha" . $tempo["sec"] . ".xlsx";
        $this->getProperties()->setCreator("Solis");
        $this->getProperties()->setLastModifiedBy("Solis");
        $this->getProperties()->setTitle("{$this->titulo} - Dados");
        $this->getProperties()->setSubject("{$this->titulo} - Dados");
        $this->getProperties()->setDescription("Dados da tabela do formulário de {$this->titulo}");
        
        $caminho = SAGU::getTmpFile($nome);
        
        if( $download )
        {
            $this->setArquivoParaDownload($nome);
            
            return null;
            
        }
        
        // Salva o arquivo na pasta temporária
        $writer = new PHPExcel_Writer_Excel5($this);
        $writer->save($caminho);
                
        return $caminho;
        
    }
    
    /**
     * Seta para download a planilha
     * 
     * @param $nome Nome do arquivo
     */
    public function setArquivoParaDownload($nome)
    {
        header("Content-Type: application/vnd.ms-excel");
        header("Content-Disposition: attachment; filename=\"{$nome}\"");
        header("Cache-Control: max-age=0");
        
        ob_clean();
        
        // Salva o arquivo na pasta temporária
        $writer = new PHPExcel_Writer_Excel5($this);
        $writer->save("php://output");
        
    }
    
    /**
     * Codifica todas as strings do array para UTF-8
     * 
     * @param Array $array de Strings
     * @return Array
     */
    private function corrigeCodificacaoArray($array)
    {
        for( $i = 0; $i < count($array); $i++ )
        {
            if( is_array($array[$i]) )
            {
                $array[$i] = $this->corrigeCodificacaoArray($array[$i]);
             
                continue;
                
            }
            
            $array[$i] = utf8_encode($array[$i]);
            
        }
        
        return $array;
        
    }
    
}
