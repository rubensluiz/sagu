<?php
 /**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * createTableRaw (before it was MAjaxTableRaw)
 * This class implements the repetitive field using tableraw, session and ajax.
 *
 * @author Samuel Koch [samuel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Samuel Koch [samuel@solis.coop.br]
 *
 * @since
 * Class created on 27/08/2008
 *
 *
 **/
class SGroupTableRaw extends MBaseGroup
{
    public $zebra                = '';
    public $bgName               = '';
    public $tbName               = '';
    public $fields               = array();
    public $columns              = array();
    public $buttons              = '';
    public $idTable              = '';
    public $actions              = '';
    public $colsTitle            = '';
    public $htmlElement          = '';
    public $tablePosition        = ''; 
    public $groupArrayTableRaw   = '';
    public $groupColumnsTableRaw = '';

    public function __construct($idTable, $bgName = TRUE, $tbName = TRUE, $fields = NULL, $columns = NULL, $buttons = TRUE, $actions = TRUE, $tablePosition = 'UP')
    {
        parent::__construct($idTable, $bgName, $tbName, $fields, $columns, $buttons, $actions, $tablePosition);

        $module = MIOLO::getCurrentModule();
        $MIOLO  = MIOLO::getInstance();

        $thia->htmlElement = 'div'.$idTable;

        if ( strlen($bgName) > 0 )
        {
            $this->setBgName($bgName);
        }
        if ( strlen($tbName) > 0 )
        {
            $this->setTbName($tbName);
        }
        if ( $fields )
        {
            $this->setFields($fields);
        }
        if ( (! is_array($buttons)) && ($buttons != FALSE) )
        {
            $buttonsAdd   = new MButton('addData'.$idTable, _M('Adicionar', $module), 'addTable'.$idTable.'(\'addToTable\')') ;
        }
        if ( (! is_array($actions)) && ($actions != FALSE) )
        {
            //addData Default action column
            $this->addColumn(_M('Ações',$module), 'left' , true, '10%', true);
            //addData default actions
            $actions = array ( array ('addTableResult', 'addTableResult', 'editFromTable'  , 'button_edit.png', 'system'),
                               array ('addTableResult', 'addTableResult', 'removeFromTable', 'button_drop.png', 'system') );
        }
        if ( strlen($tablePosition) > 0 )
        {
            $this->setTbPosition($tablePosition);
        }
        $this->setIdTable($idTable);
        $this->setColumns($columns);
        $this->setActions($actions);
        
    }

    /**
     * Set id table.
     * 
     * @param $idTable (integer): Is id of table.
     * 
     * @return No returns parameters.
     **/
    public function setIdTable($idTable)
    {
        $this->idTable = $idTable;
    }

    /**
     * Get id of the table.
     * 
     * @param Do not reveive parameters.
     * 
     * @return $this->idTable (integer): Returns the id of table.
     **/
    public function getidTable()
    {
        return $this->idTable;
    }

    /**
     * Set name of the baseGroup.
     * 
     * @param $bgName (string): Is name of baseGroup.
     * 
     * @return No returns parameters.
     **/
    public function setBgName($bgName)
    {
        $this->bgName = $bgName;
    }

    /**
     * Get name of the baseGroup.
     * 
     * @param Do not reveive parameters.
     * 
     * @return $this->bgName (string): Returns the name of baseGroup.
     **/
    public function getBgName()
    {
        return $this->bgName;
    }

    /**
     * Set name of the table name.
     * 
     * @param $tbName (string): Is name of table.
     * 
     * @return No returns parameters.
     **/
    public function setTbName($tbName)
    {
        $this->tbName = $tbName;
    }

    /**
     * Get name of the table name.
     * 
     * @param Do not reveive parameters.
     * 
     * @return $this->tbName (string): Returns the name of table.
     **/
    public function getTbName()
    {
        return $this->tbName;
    }

    /**
     * Set table position.
     * 
     * @param $tablePosition (string):     Variable that contains the position where it must be shown in table.
     * 
     * @return No returns parameters.
     **/
    public function setTbPosition($tablePosition)
    {
        $this->tablePosition = $tablePosition;
    }

    /**
     * Get table position. Function that returns the position in which the key is to be displayed.
     * 
     * @param Do not reveive parameters.
     * 
     * @return $this->tbPosition (string): Returns the name of table.
     **/
    public function getTbPosition()
    {
        return $this->tablePosition;
    }

    /**
     * Define the fields of this object.
     * 
     * @param $fields (object): These are the fields that are part of the component.
     *
     * @return No returns parameters.
     **/
    public function setFields($fields)
    {
        $this->fields = $fields;
    }

    /**
     * Get fields.
     *
     * @param Do not reveive parameters.
     * 
     * @return $this->groupColumnsTableRaw (array()): Returns the fields that are part of the form.
     **/
    public function getFields()
    {
        return $this->fields;
    }

    /**
     * Set the collumns array.
     *
     * @param $columns (object): The array with MGridColumn objects.
     * 
     * @return No returns parameters.
     **/
    public function setColumns($columns)
    {
        if ( $columns && is_array($columns) )
        {
            //crias os títulos e as colunas na seção
            foreach ( $columns as $line => $info )
            {
                if ( strlen($info->title) > 0 )
                {
                    if ( $info->visible == true )
                    {
                        $this->colsTitle[] = $info->title;
    
                        $infCols->align   = $info->align;
                        $infCols->title   = $info->title;
                        $infCols->width   = $info->width;
                        $infCols->visible = $info->visible;
                        $infCols->options = $info->options;
    
                        $this->groupColumnsTableRaw[] = $infCols;
                    }
    
                    $this->columns[] = $infCols;
                }
            }
        }
    }

    /**
     * Get title of table.
     *
     * @param Do not reveive parameters.
     * 
     * @return $this->colsTitle (string): Returns the title of the columns.
     **/
    public function getTitlesTableRaw()
    {
        return $this->colsTitle;
    }

    /**
     * Get fields.
     *
     * @param Do not reveive parameters.
     * 
     * @return $this->groupColumnsTableRaw (array()): Returns the fields that are part of the form.
     **/
    public function getColumnsTableRaw()
    {
        return $this->groupColumnsTableRaw;
    }

    /**
    * addData a column to this table.
    *
    *
    * @param title   = inplemented
    * @param align   = inplemented
    * @param nowrap  = no
    * @param width   = inplemented
    * @param visible = inplemented
    * @param options = inplemented
    * @param order   = no
    * @param filter  = no
    *
    */
    private function addColumn($title, $align='left',$nowrap='notImplemented', $width = NULL, $visible = TRUE, $options = NULL )
    {
        $this->columns[] = new MGridColumn($title, $align, $nowrap, $width, $visible, $options);
        if ( $visible == true )
        {
            $this->colsTitle[] = $title;
        }
        return;
    }
    
    /**
     * setActions an Ajax Action to Table
     * 
     * @param $arrayActions (array): Array which contains actions for handling the table.
     * 
     * @return No returns parameters.
     **/
    public function setActions($arrayActions)
    {
        if ( strlen($arrayActions) > 0 )
        {
            foreach ( $arrayActions as $line => $info )
            {
                unset($action);
                $action->event          = $info[0].$this->idTable;
                $action->jsFunction     = $info[1].$this->idTable;
                $action->phpFunction    = $info[2];
                $action->img            = $info[3];
                $action->imgModule      = $info[4];

                $this->actions[$line] = $action;
            }
        }
        
    }

    /**
     * Get actions.
     * 
     * @param Do not receive parameters
     * 
     * @return $this->actions (array): Returns an array with all shares of the table.
     **/
    public function getActions()
    {
        return $this->actions;
    }

   /**
    * addData some item to table (You can pass an array or one item). It is a recursive function.
    * 
    * @param $arrayItem (array)
    * 
    * @return No returns parameters.
    **/
    public function addData($arrayItem)
    {
        if ( is_array($arrayItem) )
        {
            $this->groupArrayTableRaw = $arrayItem;
        }
    }

   /**
    * Returns the information to be included in the table.
    * 
    * @param Do not receive parameters.
    * 
    * @return $this->groupArrayTableRaw (array): Is a array containing information that will appear on the screen.
    **/
    public function getData()
    {
        return $this->groupArrayTableRaw;
    }

    public function SetAlternate($zebra=false)
    {
        $this->zebra = $zebra;
    }

    /**
    * generate 1 action link
    */
    public function generateActionString()
    {
        $MIOLO   = MIOLO::getInstance();
        $url     = str_replace('&amp;', '&',$this->manager->getCurrentURL() );
        $actions = $this->getActions();
        
        if ( is_array($actions) )
        {
            foreach ($actions as $line => $info)
            {
                unset($link);
                unset($linkImg);

                $link    = ("javascript:cpaint_call('".$url."&event=$info->event', 'POST', '$info->phpFunction', '$tempString', $info->jsFunction, 'TEXT');");
                $linkImg = new MImageLink("link$i", null, $link, $MIOLO->getUI()->getImageTheme($info->imgModule,$info->img) );
                $result .= $linkImg->generate();
            }
        }
        return $result;
    }

    public function generate()
    {
        $tbName     = $this->getTbName();
        $bgName     = $this->getBgName();
        $fields     = $this->getFields();
        $idTable    = $this->getidTable();
        $tbPosition = $this->getTbPosition();
        $colTitle   = $this->getTitlesTableRaw();
        $array      = $this->getData();

        $t = new SimpleTable('');
        $t->SetClass("m-tableraw");
        $t->SetAttributes('cellspacing=1 cellpadding=3'); 
        $k = 0;

        if ( $tbName )
        {
            $ncols = count($colTitle);
            $t->SetCell($k++, 0, $tbName, " class=\"m-tableraw-title\" colspan=$ncols ");
        }
        if ( is_array($colTitle) )
        {
            $n = count($colTitle);
            for ( $i=0; $i < $n; $i++ )
            {
                $t->SetCell($k, $i, $colTitle[$i]," class=\"m-tableraw-column-title\" ");
            }
            $k++;
        }
        if (is_array($array))
        {
            $nrows = count($array);
            for($i=0; $i<$nrows; $i++)
            {
                $rowClass = "m-tableraw-row" . ($this->zebra ? '-'.($i%2) : '');
                $t->SetRowClass($k, $rowClass);
                if (is_array($array[$i]))
                {
                   $ncols = count($array[$i]);
                   for($j=0; $j<$ncols; $j++)
                   { 
                       $attr = $this->attributes['cell'][$i][$j];
                       if ($attr == '') $attr = "width=0 align=\"left\" valign=\"top\"";
                       $t->SetCell($k,$j,$array[$i][$j],$attr);
    
                   }
                }
                else 
                {
                   $attr = $this->attributes['cell'][$i][0];
                   if ($attr == '') $attr = "width=0 align=\"left\" valign=\"top\"";
                   $t->SetCell($k,0,$array[$i], $attr);
                }
                $k++;
            }
        }
        if ( $tbPosition == 'UP')
        { 
            $temp = $t->generate();
            $div = new MDiv($this->htmlElement, $temp);
            $div->addBoxStyle('width', '100%');
            $arrayItemField  = new MHiddenField('arrayItemTemp');
            $this->addControl( $arrayItemField  );
            $this->addControl($div);
                
            if ( isset($fields) )
            {
                foreach ( $fields as $obj )
                {
                    $this->addControl($obj);
                }
            }
        }
        else 
        {
            if ( isset($fields) )
            {
                foreach ( $fields as $obj )
                {
                    $this->addControl($obj);
                }
            }
            $temp = $t->generate();
            $div = new MDiv($this->htmlElement, $temp);
            $div->addBoxStyle('width', '100%');
            $arrayItemField  = new MHiddenField('arrayItemTemp');
            $this->addControl( $arrayItemField  );
            $this->addControl($div);   
        }

        return parent::generate();
    }
}    

?>
