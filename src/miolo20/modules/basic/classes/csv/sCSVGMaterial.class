<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Gerencia importacao de movimentacoes contratuais para o SAGU
 *
 * @author Lucas Rodrigo Gerhardt [lucas_gerhardt@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Lucas Rodrigo Gerhardt [lucas_gerhardt@solis.com.br]
 *
 * @since
 * Class created on 21/10/2013
 *
 **/

class sCSVGMaterial extends sCSVFileImporter
{
    public function getTitle()
    {
        $module = SAGU::getFileModule(__FILE__);
        return _M('Materiais Gnuteca', $module);
    }
    
    public function __construct()
    {
        $typeDefs = array('name', 'label', 'isRequired', 'type' );
        $defs = array('1' =>
                    array(
                    //Acervo
                        array( 'recordId', _M('Identificador do Registro'), true, bCSVColumn::TYPE_RECORDID ),
                        array( 'controlNumber', _M('Número de controle'), true, bCSVColumn::TYPE_INT),
                        array( 'isbnIssn', _M('ISBN ou ISSN'), true, bCSVColumn::TYPE_ISBNISSN ),
                        array( 'codIsbnIssn', _M('Código do ISBN ou ISSN'), false ),
                        array( 'title', _M('Título'), true ),
                        array( 'language', _M('Idioma'), false, bCSVColumn::TYPE_LANGUAGE ),
                        array( 'author', _M('Autor'), false ),
                        array( 'classification', _M('Classificação'), false ),
                        array( 'cutter', _M('Cutter'), false ),
                        array( 'edition', _M('Edição'), false ),
                        array( 'placePublication', _M('Lugar de publicação'), false ),
                        array( 'editorName', _M('Nome do editor'), false ),
                        array( 'publicationDate', _M('Data de publicação'), false ),
                        array( 'subject', _M('Assunto'), false ),
                        array( 'summary', _M('Resumo'), false ),
                        array( 'physicalType', _M('Tipo Físico'), false, bCSVColumn::TYPE_PHYSICALTYPE ),
                        array( 'titleSerie', _M('Título Série'), false ),
                        array( 'email', _M('Endereço eletrônico'), false ),
                        array( 'materialType', _M('Tipo de Material'), true ),
                        array( 'numberOfExemplary', _M('Quantidade de exemplares'), false, bCSVColumn::TYPE_INT ),
                        array( 'libraryUnit', _M('Unidade da biblioteca'), false, bCSVColumn::TYPE_INT ),
                        array( 'volumeNumberYear', _M('Volume, Número e Ano'), false ),
                        array( 'analyticalInput', _M('Entrada analítica / Número de controle'), false ),
                        array( 'spreadsheetType', _M('Tipo de planilha'), false )),
                    //Exemplares
                    '2' =>
                    array(
                        array( 'recordId', _M('Identificador do Registro'), true, bCSVColumn::TYPE_RECORDID ),
                        array( 'controlNumber', _M('Número de controle'), true, bCSVColumn::TYPE_INT ),
                        array( 'libraryUnit', _M('Unidade de Biblioteca'), true, bCSVColumn::TYPE_INT ),
                        array( 'itemNumber', _M('Número de Tombo'), true ),
                        array( 'physicalType', _M('Tipo Físico'), true, bCSVColumn::TYPE_PHYSICALTYPE),
                        array( 'materialType', _M('Tipo de Material'), true, ),
                        array( 'buy', _M('Tipo de Aquisição'), true, bCSVColumn::TYPE_BUY ),
                        array( 'gender', _M('Gênero'), true ),
                        array( 'exemplaryStatus', _M('Estado do Exemplar'), true, bCSVColumn::TYPE_EXEMPLARYSTATUS ),
                        array( 'tomo', _M('Tomo'), false ),
                        array( 'volume', _M('Volume'), false ),
                        array( 'inputDate', _M('Data de Entrada'), false ),
                        array( 'lowDate', _M('Data de Baixa'), false ),
                        array( 'observation', _M('Observação'), false )),
                    //Autores Adicionais
                    '3' =>
                    array(
                        array( 'recordId', _M('Identificador do Registro'), true, bCSVColumn::TYPE_RECORDID ),
                        array( 'controlNumber', _M('Número de controle'), true, bCSVColumn::TYPE_INT ),
                        array( 'additionalAuthors', _M('Nomes dos Autores Adicionais'), true )),
                    //Idiomas Adicionais
                    '4' => 
                    array(
                        array( 'recordId', _M('Identificador do Registro'), true, bCSVColumn::TYPE_RECORDID ),
                        array( 'controlNumber', _M('Número de controle'), true, bCSVColumn::TYPE_INT ),
                        array( 'additionalLanguage', _M('Nomes dos Idiomas Adicionais'), true )),
                    //Imprentas Adicionais
                    '5' =>
                    array(
                        array( 'recordId', _M('Identificador do Registro'), true, false, bCSVColumn::TYPE_RECORDID ),
                        array( 'controlNumber', _M('Número de controle'), true, false, bCSVColumn::TYPE_INT ),
                        array( 'placePublication', _M('Lugar de publicação'), false ),
                        array( 'editorName', _M('Nome do Editor'), false ),
                        array( 'publicationDate', _M('Data de publicação'), false )),
                    //Assuntos Adicionais
                    '6' =>
                    array(
                        array( 'recordId', _M('Identificador do Registro'), true, bCSVColumn::TYPE_RECORDID ),
                        array( 'controlNumber', _M('Número de controle'), true, bCSVColumn::TYPE_INT ),
                        array( 'additionalSubject', _M('Nomes dos Assuntos Adicionais'), true )),
                    //campos adicionais
                    '7' =>
                    array(
                        array( 'recordId', _M('Identificador do Registro'), true, bCSVColumn::TYPE_RECORDID ),
                        array( 'controlNumber', _M('Número de controle'), true, bCSVColumn::TYPE_INT ),
                        array( 'field', _M('Campo'), true),
                        array( 'subfield', _M('Subcampo'), true),
                        array( 'content', _M('Conteúdo'), true)
                        )
            );
                    
        $this->position = array_keys($defs);
        
        foreach ($defs as $position => $f)
        {
            $this->setColumnsArray( $position, $typeDefs, $f);
        }
        
        parent::__construct();
        
    }    
   
    public function importLine2($data)
    {
        //Insere os materiais do gnuteca nas devidas tabelas
        $dataGMaterial = new stdClass();

        //Cria uma tabela temporária para depois inserir os dados na gtcmaterial
        bBaseDeDados::executar("DROP TABLE IF EXISTS gtcmaterialimportcsv;");
        bBaseDeDados::executar("CREATE TABLE gtcmaterialimportcsv(controlnumber integer, fieldid varchar(3), subfieldid varchar(1), line integer, indicator1 varchar(1), indicator2 varchar(1), 
                                                                        content text, searchcontent text, prefixid integer, suffixid integer, separatorid integer, searchcontentforsearchmodule text);");
        //Faz INSERT na tabela temporária
        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                    SELECT controlnumber::int, '020', 'a', codisbnissn, 0
                                        FROM tmpcsvimportergmaterial1 
                                        WHERE isbnissn='ISBN'");
        
        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                    SELECT controlnumber::int, '022', 'a', codisbnissn, 0
                                        FROM tmpcsvimportergmaterial1 
                                        WHERE isbnissn='ISSN'");
        
        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                    SELECT controlnumber::int, '245', 'a', title, 0
                                        FROM tmpcsvimportergmaterial1");
        
        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                    SELECT controlnumber::int, '041', 'a', language, 0
                                        FROM tmpcsvimportergmaterial1");
        
        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                    SELECT controlnumber::int, '041', 'a', additionallanguage, 1
                                        FROM tmpcsvimportergmaterial4");
       
        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                    SELECT controlnumber::int, '100', 'a', author, 0
                                        FROM tmpcsvimportergmaterial1");
       
        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                    SELECT controlnumber::int, '090', 'a', classification, 0
                                        FROM tmpcsvimportergmaterial1");
       
        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                    SELECT controlnumber::int, '090', 'b', cutter, 0
                                        FROM tmpcsvimportergmaterial1");
        
        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                    SELECT controlnumber::int, '250', 'a', edition, 0
                                        FROM tmpcsvimportergmaterial1");
       
        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                    SELECT controlnumber::int, '260', 'a', placepublication, 0
                                        FROM tmpcsvimportergmaterial1");
       
        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                    SELECT controlnumber::int, '260', 'b', editorname, 0
                                        FROM tmpcsvimportergmaterial1");
        
        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                    SELECT controlnumber::int, '260', 'c', publicationdate, 0
                                        FROM tmpcsvimportergmaterial1");
       
       
        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                    SELECT controlnumber::int, '260', 'a', placepublication, 0
                                        FROM tmpcsvimportergmaterial5");
       
        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                    SELECT controlnumber::int, '260', 'b', editorname, 0
                                        FROM tmpcsvimportergmaterial5");
        
        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                    SELECT controlnumber::int, '260', 'c', publicationdate, 0
                                        FROM tmpcsvimportergmaterial5");
       
        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                    SELECT controlnumber::int, '650', 'a', subject, 0
                                        FROM tmpcsvimportergmaterial1");
        
        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                    SELECT controlnumber::int, '650', 'a', additionalsubject, 0
                                        FROM tmpcsvimportergmaterial6");
       
        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                    SELECT controlnumber::int, '520', 'a', summary, 0
                                        FROM tmpcsvimportergmaterial1");
       
        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                    SELECT controlnumber::int, '901', 'c', physicaltype, 0
                                        FROM tmpcsvimportergmaterial1");
       
        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                    SELECT controlnumber::int, '440', 'a', titleserie, 0
                                        FROM tmpcsvimportergmaterial1");
       
        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                    SELECT controlnumber::int, '270', 'm', email, 0
                                        FROM tmpcsvimportergmaterial1");
       
        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                    SELECT controlnumber::int, '901', 'a', materialtype, 0
                                        FROM tmpcsvimportergmaterial1");
        
        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                    SELECT controlnumber::int, '949', 'b', libraryunit, 0
                                        FROM tmpcsvimportergmaterial2");
        
        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                    SELECT controlnumber::int, '362', 'a', volumenumberyear, 0
                                        FROM tmpcsvimportergmaterial1");
        
        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                    SELECT controlnumber::int, '773', 'w', analyticalinput, 0
                                        FROM tmpcsvimportergmaterial1");
        
        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                    SELECT controlnumber::int, '949', '1', materialtype, 0
                                        FROM tmpcsvimportergmaterial2");
        
        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                    SELECT controlnumber::int, '949', '3', physicaltype, 0
                                        FROM tmpcsvimportergmaterial2");
        
        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                    SELECT controlnumber::int, '949', 'a', itemnumber, 0
                                        FROM tmpcsvimportergmaterial2");
        
        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                    SELECT controlnumber::int, '949', 'c', buy, 0
                                        FROM tmpcsvimportergmaterial2");
        
        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                    SELECT controlnumber::int, '949', 'd', gender, 0
                                        FROM tmpcsvimportergmaterial2");
        
        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                    SELECT controlnumber::int, '949', 'g', exemplarystatus, 0
                                        FROM tmpcsvimportergmaterial2");
        
        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                    SELECT controlnumber::int, '949', 't', tomo, 0
                                        FROM tmpcsvimportergmaterial2");
        
        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                    SELECT controlnumber::int, '949', 'v', volume, 0
                                        FROM tmpcsvimportergmaterial2");
        
        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                    SELECT controlnumber::int, '949', 'y', inputdate, 0
                                        FROM tmpcsvimportergmaterial2");
        
        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                        SELECT controlnumber::int, '949', 'z', lowdate, 0
                                            FROM tmpcsvimportergmaterial2");

        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                        SELECT controlnumber::int, '949', 'w', observation, 0
                                            FROM tmpcsvimportergmaterial2");

        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                        SELECT controlnumber::int, '700', 'a', additionalauthors, 0
                                            FROM tmpcsvimportergmaterial3"); 
        
        bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                    SELECT controlnumber::int, field, subfield, content, 0
                                        FROM tmpcsvimportergmaterial7");
               
        //Função para a sequência de número de exemplares, usado na criação de exemplares pelo campo de "Número de exemplares"
        bBaseDeDados::executar("CREATE OR REPLACE FUNCTION itemnumber_seq () 
                                 RETURNS bigint AS $$
                                 DECLARE
                                    codigo bigint;
                                    v_query varchar;
                                    v_ultimo_codigo int;
                                 BEGIN
                                   codigo := nextval('seq_rptItemNumber');
                                   RETURN codigo; 
                                 EXCEPTION
                                    WHEN OTHERS THEN
                                        -- cai no erro se a sequencia ainda nao existir
                                        v_ultimo_codigo = max(content) from gtcmaterialimportcsv WHERE fieldid = '949' AND subfieldid = 'a';
                                        v_query := 'CREATE SEQUENCE seq_rptItemNumber START ' || v_ultimo_codigo ;
                                        EXECUTE v_query;
                                        codigo := nextval('seq_rptItemNumber');
                                        RETURN codigo;
                                END;
                                $$ language 'plpgsql';");
        
        //Cria exemplares quando o usuário informar o campo de quantidade de exemplares
        $numberOfExemplar = bBaseDeDados::consultar("SELECT controlnumber, numberofexemplary FROM tmpcsvimportergmaterial1 WHERE numberofexemplary <> '' AND numberofexemplary <> '0';");

        foreach ($numberOfExemplar as $g => $s)
        {
            $numberOfExemplary = (int) $s[1];
            
            for($x = 0 ; $x < $numberOfExemplary ; $x++)
            {                
                bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv (controlnumber, fieldid, subfieldid, content, line)
                                        SELECT '{$s[0]}', '949' , '1' , materialType,'{$x}' FROM tmpcsvimportergmaterial1 where controlnumber::int = {$s[0]}");
                bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv (controlnumber, fieldid, subfieldid, content, line)
                                        SELECT '{$s[0]}', '949' , '3' ,'1','{$x}'");
               
                bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv (controlnumber, fieldid, subfieldid, content, line)
                                        SELECT '{$s[0]}', '949' , 'a' ,(SELECT lpad(itemnumber_seq()::varchar,8,'0')),'{$x}'");
                                        
                bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                        SELECT '{$s[0]}', '949' , 'b' ,
                                               (CASE WHEN libraryUnit IS NOT NULL
                                                      THEN libraryUnit
                                                     ELSE '1' END),'{$x}' FROM tmpcsvimportergmaterial1 where controlnumber::int = {$s[0]}");
                                            
                bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                        SELECT '{$s[0]}', '949' , 'c' ,'C','{$x}';");
                                            
                bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                        SELECT '{$s[0]}', '949' , 'd' ,'1','{$x}';");
                                            
                bBaseDeDados::executar("INSERT INTO gtcmaterialimportcsv ( controlnumber, fieldid, subfieldid, content, line) 
                                        SELECT '{$s[0]}', '949' , 'g' ,'1','{$x}';");

            }
        }
        
        //Faz DELETE onde não tem conteúdo
        bBaseDeDados::executar("DELETE FROM gtcmaterialimportcsv WHERE trim(content)='' or content is null;");

        //Função que gera as linhas corretas para a gtcmaterial
        bBaseDeDados::executar("DROP TABLE IF EXISTS sequencia_generica;");
        bBaseDeDados::executar("create table sequencia_generica (numero_de_controle text);");

        bBaseDeDados::executar("CREATE OR REPLACE FUNCTION fnc_generica(p_campo char(3), p_subcampo char(1)) RETURNS integer AS $$
                                    DECLARE
                                        linha RECORD;
                                        lin int;
                                    BEGIN
                                        FOR linha IN (select controlnumber, content, ctid from gtcmaterialimportcsv where controlnumber in 
                                                        (select controlnumber from (select controlnumber, count(*) from gtcmaterialimportcsv 
                                                                                    where fieldid = p_campo and subfieldid = p_subcampo group by 1 having count(*) > 1)
                                                                            as foo) and fieldid = p_campo and subfieldid = p_subcampo ORDER BY ctid)
                                        LOOP
                                            lin := count(*) from sequencia_generica where numero_de_controle = linha.controlnumber::text;
                                            UPDATE gtcmaterialimportcsv SET line = lin WHERE ctid = linha.ctid;
                                            INSERT INTO sequencia_generica VALUES (linha.controlnumber::text);
                                        END LOOP;
                                            DELETE FROM sequencia_generica;
                                        RETURN 1;
                                    END;
                                    $$ LANGUAGE plpgsql;");

        bBaseDeDados::executar("select fnc_generica(fieldid, subfieldid) from gtctag where fieldid || '.' || subfieldid in 
                                    (select distinct(fieldid ||'.'|| subfieldid) from gtcmaterialimportcsv) and (fieldid in ('949', '700', '520', '041', '260', '650', '090') 
                                     OR fieldid in (SELECT DISTINCT fieldid  FROM (SELECT controlnumber, fieldid, subfieldid, count(*) FROM gtcmaterialimportcsv WHERE fieldid not in ('949') GROUP BY 1,2,3 having count(*) > 1) as foo));");


        try
        {
            bBaseDeDados::executar("BEGIN");
            
            //Deleta a trigger e os índices para inserção nas tabelas
            bBaseDeDados::executar("DROP TRIGGER IF EXISTS gtctgrupdatematerialsontrigger ON gtcmaterial;");

            bBaseDeDados::executar("DROP index IF EXISTS index_gtcmaterial_suffixid;");
            bBaseDeDados::executar("DROP index IF EXISTS index_gtcmaterial_subfieldid;");
            bBaseDeDados::executar("DROP index IF EXISTS index_gtcmaterial_separatorid;");
            bBaseDeDados::executar("DROP index IF EXISTS index_gtcmaterial_searchcontent;");
            bBaseDeDados::executar("DROP index IF EXISTS index_gtcmaterial_indice4;");
            bBaseDeDados::executar("DROP index IF EXISTS index_gtcmaterial_fieldsubfield;");
            bBaseDeDados::executar("DROP index IF EXISTS index_gtcmaterial_fieldid_subfieldid;");
            bBaseDeDados::executar("DROP index IF EXISTS index_gtcmaterial_fieldid;");
            bBaseDeDados::executar("DROP index IF EXISTS index_gtcmaterial_controlnumbersearch;");
            bBaseDeDados::executar("DROP index IF EXISTS index_gtcmaterial_content;");
            bBaseDeDados::executar("DROP index IF EXISTS index_gtcmaterial_3;");

            bBaseDeDados::executar("DROP index IF EXISTS index_gtcmaterialcontrol_category;");
            bBaseDeDados::executar("DROP index IF EXISTS index_gtcmaterialcontrol_category_level;");
            bBaseDeDados::executar("DROP index IF EXISTS index_gtcmaterialcontrol_controlnumber;");
            bBaseDeDados::executar("DROP index IF EXISTS index_gtcmaterialcontrol_entrancedate;");
            bBaseDeDados::executar("DROP index IF EXISTS index_gtcmaterialcontrol_father;");
            bBaseDeDados::executar("DROP index IF EXISTS index_gtcmaterialcontrol_fathercatlev;");
            bBaseDeDados::executar("DROP index IF EXISTS index_gtcmaterialcontrol_gender;");
            bBaseDeDados::executar("DROP index IF EXISTS index_gtcmaterialcontrol_level;");
            bBaseDeDados::executar("DROP index IF EXISTS index_gtcmaterialcontrol_materialgenderid;");
            bBaseDeDados::executar("DROP index IF EXISTS index_gtcmaterialcontrol_materialphysicaltypeid;");
            bBaseDeDados::executar("DROP index IF EXISTS index_gtcmaterialcontrol_materialtypeid;");
            bBaseDeDados::executar("DROP index IF EXISTS index_gtcmaterialcontrol_physical;");
            bBaseDeDados::executar("DROP index IF EXISTS index_gtcmaterialcontrol_type;");

            //Faz a inserção do conteúdo da tabela gtcmaterialimportcsv na tabela de material
            bBaseDeDados::executar("INSERT INTO gtcmaterial (controlnumber, fieldid, subfieldid, line, indicator1, indicator2, content,
                                                            searchcontent, prefixid, suffixid, separatorid, searchcontentforsearchmodule)
                                        SELECT * from gtcmaterialimportcsv");

            //Faz a inserção na tabela de controle de material
            bBaseDeDados::executar("INSERT INTO gtcmaterialcontrol ( controlnumber, controlnumberfather, entrancedate, lastchangedate, category, level, materialgenderid, materialtypeid, materialphysicaltypeid )
                                    SELECT distinct controlnumber,
                                        (CASE WHEN (SELECT content::int FROM gtcmaterialimportcsv D where D.controlnumber = A.controlnumber and D.fieldid = '773' and D.subfieldid = 'w') IS NOT NULL
                                               THEN (SELECT content::int FROM gtcmaterialimportcsv D where D.controlnumber = A.controlnumber and D.fieldid = '773' and D.subfieldid = 'w')
                                        END) as controlnumberfather,
                                        now()::date, now()::date, 
                                        (CASE WHEN (SELECT spreadsheettype FROM tmpcsvimportergmaterial1 C WHERE C.controlnumber::int = A.controlnumber) IS NOT NULL
                                               THEN (SELECT split_part(spreadsheettype , '-' , 1) FROM tmpcsvimportergmaterial1 C WHERE C.controlnumber::int = A.controlnumber)
                                              ELSE 'BK'
                                         END) as category,
                                        (CASE WHEN (SELECT spreadsheettype FROM tmpcsvimportergmaterial1 C WHERE C.controlnumber::int = A.controlnumber) IS NOT NULL
                                               THEN (SELECT split_part(spreadsheettype , '-' , 2) FROM tmpcsvimportergmaterial1 C WHERE C.controlnumber::int = A.controlnumber)
                                              ELSE '4'
                                         END) as level,
                                         null::integer as materialgenderid, 
                                        (SELECT content::integer FROM gtcmaterial B 
                                            WHERE B.fieldid = '901' and B.subfieldid = 'a' AND B.controlnumber = A.controlnumber LIMIT 1) as materialtypeid,
                                        (SELECT content::integer FROM gtcmaterial B 
                                            WHERE B.fieldid = '901' and B.subfieldid = 'c' AND B.controlnumber = A.controlnumber LIMIT 1) as materialphysicaltypeid 
                                       FROM gtcmaterial A WHERE controlnumber in (SELECT distinct(controlnumber) FROM gtcmaterialimportcsv);");

            //Gera o Leader 000.a
            bBaseDeDados::executar("INSERT INTO gtcmaterial (controlnumber, fieldid, subfieldid, content, line )
                                    SELECT distinct controlnumber, '000' as fieldid, 'a' as subfieldid, 
                                           (CASE WHEN  (SELECT trim(upper(unaccent(spreadsheettype))) FROM tmpcsvimportergmaterial1 C WHERE C.controlnumber::int = A.controlnumber) = 'BA-4'
                                                  THEN '00000naa##22000004#r4500'
                                                 WHEN  (SELECT trim(upper(unaccent(spreadsheettype))) FROM tmpcsvimportergmaterial1 C WHERE C.controlnumber::int = A.controlnumber) = 'SE-#'
                                                  THEN '00000nas##2200000###4500'
                                                 WHEN  (SELECT trim(upper(unaccent(spreadsheettype))) FROM tmpcsvimportergmaterial1 C WHERE C.controlnumber::int = A.controlnumber) = 'SE-4'
                                                  THEN '00000nas##22000004##4500'
                                                 WHEN (SELECT trim(upper(unaccent(spreadsheettype))) FROM tmpcsvimportergmaterial1 C WHERE C.controlnumber::int = A.controlnumber) = 'SA-4'
                                                  THEN '00000nab##22000004##4500'
                                                 WHEN (SELECT trim(upper(unaccent(spreadsheettype))) FROM tmpcsvimportergmaterial1 C WHERE C.controlnumber::int = A.controlnumber) = 'CF-4'
                                                  THEN '00000nmm##22000004##4500'
                                                 WHEN (SELECT trim(upper(unaccent(spreadsheettype))) FROM tmpcsvimportergmaterial1 C WHERE C.controlnumber::int = A.controlnumber) = 'VM-4'
                                                  THEN '00000ngm##22000004##4500'
                                                 WHEN (SELECT trim(upper(unaccent(spreadsheettype))) FROM tmpcsvimportergmaterial1 C WHERE C.controlnumber::int = A.controlnumber) = 'MX-4'
                                                  THEN '00000npm##22000004##4500'
                                                 ELSE '00000nam##22000004##4500'
                                           END) as content, 
                                           0 as line
                                        FROM gtcmaterial A WHERE controlnumber not in 
                                            (SELECT distinct controlnumber FROM gtcmaterial 
                                                    WHERE fieldid = '000' AND subfieldid = 'a' ) and controlnumber in (SELECT distinct(controlnumber) FROM gtcmaterialimportcsv);");

            //Gera o 008.a
            bBaseDeDados::executar("INSERT INTO gtcmaterial (controlnumber, fieldid, subfieldid, content, line )
                                    SELECT distinct controlnumber, '008' as fieldid, 'a' as subfieldid, '########################################', 0 as line 
                                        FROM gtcmaterial WHERE controlnumber not in 
                                        (SELECT distinct controlnumber FROM gtcmaterial 
                                            WHERE fieldid = '008' AND subfieldid = 'a' ) and controlnumber in (SELECT distinct(controlnumber) FROM gtcmaterialimportcsv);");

            //Gera o campo de número de controle 001.a
            bBaseDeDados::executar("INSERT INTO gtcmaterial (controlnumber, fieldid, subfieldid, content, line )
                                    SELECT distinct controlnumber, '001' as fieldid, 'a' as subfieldid, controlnumber, 0 as line 
                                        FROM gtcmaterial WHERE controlnumber not in 
                                        (SELECT distinct controlnumber FROM gtcmaterial 
                                            WHERE fieldid = '001' AND subfieldid = 'a' ) and controlnumber in (SELECT distinct(controlnumber) FROM gtcmaterialimportcsv);");

            //Gera obra para os registros que não tem. Igual ao número de controle
            bBaseDeDados::executar("INSERT INTO gtcmaterial (controlnumber, fieldid, subfieldid, content, line )
                                    SELECT distinct controlnumber, '950' as fieldid, 'a' as subfieldid, controlnumber, 0 as line 
                                        FROM gtcmaterial WHERE controlnumber not in 
                                        (SELECT distinct controlnumber FROM gtcmaterial 
                                            WHERE fieldid = '950' AND subfieldid = 'a' ) and controlnumber in (SELECT distinct(controlnumber) FROM gtcmaterialimportcsv);");

            //Gera tipo de material default para os exemplares que nÃ£o tem.
            bBaseDeDados::executar("INSERT INTO gtcmaterial (controlnumber, fieldid, subfieldid, content, line )
                                    SELECT distinct controlnumber, '901' as fieldid, 'c' as subfieldid, 1, line 
                                        FROM gtcmaterial WHERE controlnumber not in 
                                        (SELECT distinct controlnumber FROM gtcmaterial 
                                            WHERE fieldid = '901' AND subfieldid = 'c' ) and controlnumber in (SELECT distinct(controlnumber) FROM gtcmaterialimportcsv);");

            //Gravar no controle de exemplares
            bBaseDeDados::executar("INSERT INTO gtcexemplarycontrol (controlnumber, itemnumber, originallibraryunitid, libraryunitid, acquisitiontype, exemplarystatusid, materialgenderid, materialtypeid, materialphysicaltypeid, entrancedate, lowdate, line, observation )
                                    SELECT controlnumber, content, (SELECT content::integer FROM gtcmaterial B WHERE B.fieldid = '949' and B.subfieldid = 'b' and B.controlnumber = A.controlnumber and B.line = A.line ) as originallibraryunitid, 
                                    (SELECT content::integer FROM gtcmaterial B WHERE B.fieldid = '949' and B.subfieldid = 'b' and B.controlnumber = A.controlnumber and B.line = A.line ) as libraryunitid, 
                                    (SELECT content::varchar(1) FROM gtcmaterial B WHERE B.fieldid = '949' and B.subfieldid = 'c' and B.controlnumber = A.controlnumber and B.line = A.line ) as acquisitiontype, 
                                    (SELECT content::integer FROM gtcmaterial B WHERE B.fieldid = '949' and B.subfieldid = 'g' and B.controlnumber = A.controlnumber and B.line = A.line ) as exemplarystatusid, 
                                    (SELECT content::integer FROM gtcmaterial B WHERE B.fieldid = '949' and B.subfieldid = 'd' and B.controlnumber = A.controlnumber and B.line = A.line ) as materialgenderid, 
                                    (SELECT content::integer FROM gtcmaterial B WHERE B.fieldid = '949' and B.subfieldid = '1' and B.controlnumber = A.controlnumber and B.line = A.line ) as materialtypeid, 
                                    (SELECT content::integer FROM gtcmaterial B WHERE B.fieldid = '949' and B.subfieldid = '3' and B.controlnumber = A.controlnumber and B.line = A.line ) as materialphysicaltypeid, 
                                    (SELECT to_date(content, 'dd/mm/yyyy') FROM gtcmaterial B WHERE B.fieldid = '949' and B.subfieldid = 'y' and B.controlnumber = A.controlnumber and B.line = A.line ) as entrancedate, 
                                    (SELECT to_date(content, 'dd/mm/yyyy') FROM gtcmaterial B WHERE B.fieldid = '949' and B.subfieldid = 'z' and B.controlnumber = A.controlnumber and B.line = A.line ) as lowdate, line, 
                                    (SELECT content FROM gtcmaterial B WHERE B.fieldid = '949' and B.subfieldid = 'w' and B.controlnumber = A.controlnumber and B.line = A.line ) as observation 
                                    FROM gtcmaterial A where fieldid = '949' and subfieldid = 'a' and controlnumber in (SELECT distinct(controlnumber) FROM gtcmaterialimportcsv);");

            //Gera histórico do status
            bBaseDeDados::executar("INSERT INTO gtcexemplarystatushistory (itemnumber, exemplarystatusid, libraryunitid, date, operator)
                                    SELECT itemnumber, exemplarystatusid, libraryunitid, now()::date, 'gnuteca' FROM gtcexemplarycontrol WHERE controlnumber in (SELECT distinct(controlnumber) FROM gtcmaterialimportcsv);");

            //Gerar os históricos do material
            bBaseDeDados::executar("INSERT INTO gtcmaterialhistory (controlnumber, operator, data, chancestype, fieldid, subfieldid, previousline, currentline, currentindicator1,
                                                                    currentindicator2, currentcontent, currentprefixid, currentsuffixid, currentseparatorid, revisionnumber )
                                                                    SELECT controlnumber, 'gnuteca' as operator, now() as data, 'I' as chancestype, fieldid, subfieldid, line as previousline, 
                                                                        line as currentline, indicator1 as currentindicator1, indicator2 as currentindicator2, content as currentcontent, 
                                                                        prefixid as currentprefixid, suffixid as currentsuffixid, separatorid as currentseparatorid, 1 FROM gtcmaterial 
                                                                         WHERE controlnumber in (SELECT distinct(controlnumber) FROM gtcmaterialimportcsv);");

            bBaseDeDados::executar("COMMIT");
          
        }
        catch(Exception $m)
        {
            bBaseDeDados::executar("ROLLBACK");
            throw new Exception( _M('Ocorreu um erro durante a importação.') );
        }
            
            //Prepara o searchcontent
            bBaseDeDados::executar("UPDATE gtcmaterial SET searchcontent = trim( upper( translate( unaccent( content ) ,'+', 'A') ) ) 
                                            WHERE controlnumber in (SELECT distinct(controlnumber) FROM gtcmaterialimportcsv) AND fieldid not in ('090','080');");
            
            bBaseDeDados::executar("UPDATE gtcmaterial EM SET searchContent = prepareTopographicIndex
                                                ( content,
                                                    ( SELECT content
                                                    FROM gtcmaterial IM
                                                    WHERE fieldid = '090'
                                                        AND subfieldid = 'b'
                                                        AND line = 0
                                                        AND EM.controlnumber = IM.controlNumber
                                                    )
                                                )
                                            WHERE fieldid || '.' || subfieldid in (SELECT regexp_split_to_table( (SELECT value FROM basconfig WHERE parameter = 'MARC_CLASSIFICATION_TAG') , ',' ))  
                                                 AND controlnumber in (SELECT distinct(controlnumber) FROM gtcmaterialimportcsv);");
            
            bBaseDeDados::executar("UPDATE gtcmaterial SET searchContent = to_char( content::date, 'YYYY-mm-dd')
                                            WHERE fieldid || '.' || subfieldid in (SELECT regexp_split_to_table( (SELECT value FROM basconfig WHERE parameter = 'CATALOGUE_DATE_FIELDS') , ',' )) 
                                                 AND controlnumber in (SELECT distinct(controlnumber) FROM gtcmaterialimportcsv);");

            //Prepara a busca dos materiais
            bBaseDeDados::executar("SELECT gtcfnc_updatesearchmaterialviewtablebool();");

            //Atualiza o searchcontentsearchmodule
            bBaseDeDados::executar("UPDATE gtcmaterial SET searchcontentforsearchmodule = searchContent WHERE controlnumber in (SELECT distinct(controlnumber) FROM gtcmaterialimportcsv);");

            //Atualiza as tags 090.a e etc considerando a preferencia MARC_CLASSIFICATION_TAG
            bBaseDeDados::executar("UPDATE gtcmaterial EM SET searchcontentforsearchmodule = preparetopographicindexsearch
                                    ( content,
                                        ( SELECT content
                                        FROM gtcmaterial IM
                                        WHERE fieldid = '090'
                                            AND subfieldid = 'b'
                                            AND line = 0
                                            AND EM.controlnumber = IM.controlNumber
                                        )
                                    )
                                WHERE controlnumber in (SELECT distinct(controlnumber) FROM gtcmaterialimportcsv) and fieldid || '.' || subfieldid in (  SELECT regexp_split_to_table( '090.a,080.a', ',' ) );");

            //Atualiza a sequência de número de controle
            bBaseDeDados::executar("SELECT setval('seq_controlnumber', (SELECT max(controlnumber) from gtcmaterialcontrol))");
            
            //Cria novamente a trigger e os índices que foram excluídas para a inserção do conteúdo nas tabelas
            bBaseDeDados::executar("CREATE TRIGGER gtctgrupdatematerialsontrigger AFTER INSERT OR DELETE OR UPDATE ON gtcmaterial FOR EACH ROW EXECUTE PROCEDURE gtcfncupdatematerialson();");

            bBaseDeDados::executar("CREATE index index_gtcmaterial_suffixid ON gtcmaterial USING btree (suffixid);");
            bBaseDeDados::executar("CREATE index index_gtcmaterial_subfieldid ON gtcmaterial USING btree (controlnumber, subfieldid);");
            bBaseDeDados::executar("CREATE index index_gtcmaterial_separatorid ON gtcmaterial USING btree (separatorid);");
            bBaseDeDados::executar("CREATE index index_gtcmaterial_searchcontent ON gtcmaterial USING btree (controlnumber, searchcontent);");
            bBaseDeDados::executar("CREATE index index_gtcmaterial_indice4 ON gtcmaterial USING btree (fieldid, subfieldid, searchcontent varchar_pattern_ops);");
            bBaseDeDados::executar("CREATE index index_gtcmaterial_fieldsubfield ON gtcmaterial USING btree (controlnumber, fieldid, subfieldid);");
            bBaseDeDados::executar("CREATE index index_gtcmaterial_fieldid_subfieldid ON gtcmaterial USING btree (fieldid, subfieldid);");
            bBaseDeDados::executar("CREATE index index_gtcmaterial_fieldid ON gtcmaterial USING btree (controlnumber, fieldid);");
            bBaseDeDados::executar("CREATE index index_gtcmaterial_controlnumbersearch ON gtcmaterial USING btree (controlnumber, fieldid, subfieldid, searchcontent);");
            bBaseDeDados::executar("CREATE index index_gtcmaterial_content ON gtcmaterial USING btree (controlnumber, content);");
            bBaseDeDados::executar("CREATE index index_gtcmaterial_3 ON gtcmaterial USING btree (fieldid, subfieldid, searchcontent varchar_pattern_ops);");

            bBaseDeDados::executar("CREATE index index_gtcmaterialcontrol_type ON gtcmaterialcontrol USING btree (controlnumber, materialtypeid);");
            bBaseDeDados::executar("CREATE index index_gtcmaterialcontrol_physical ON gtcmaterialcontrol USING btree (controlnumber, materialphysicaltypeid);");
            bBaseDeDados::executar("CREATE index index_gtcmaterialcontrol_materialtypeid ON gtcmaterialcontrol USING btree (materialtypeid);");
            bBaseDeDados::executar("CREATE index index_gtcmaterialcontrol_materialphysicaltypeid ON gtcmaterialcontrol USING btree (materialphysicaltypeid);");
            bBaseDeDados::executar("CREATE index index_gtcmaterialcontrol_materialgenderid ON gtcmaterialcontrol USING btree (materialgenderid);");
            bBaseDeDados::executar("CREATE index index_gtcmaterialcontrol_level ON gtcmaterialcontrol USING btree (controlnumber, level);");
            bBaseDeDados::executar("CREATE index index_gtcmaterialcontrol_gender ON gtcmaterialcontrol USING btree (controlnumber, materialgenderid);");
            bBaseDeDados::executar("CREATE index index_gtcmaterialcontrol_fathercatlev ON gtcmaterialcontrol USING btree (controlnumberfather, category, level);");
            bBaseDeDados::executar("CREATE index index_gtcmaterialcontrol_father ON gtcmaterialcontrol USING btree (controlnumberfather);");
            bBaseDeDados::executar("CREATE index index_gtcmaterialcontrol_entrancedate ON gtcmaterialcontrol USING btree (controlnumber, entrancedate);");
            bBaseDeDados::executar("CREATE index index_gtcmaterialcontrol_controlnumber ON gtcmaterialcontrol USING btree (controlnumber, category, level);");
            bBaseDeDados::executar("CREATE index index_gtcmaterialcontrol_category_level ON gtcmaterialcontrol USING btree (category, level);");
            bBaseDeDados::executar("CREATE index index_gtcmaterialcontrol_category ON gtcmaterialcontrol USING btree (controlnumber, category);");
            
        return parent::importLineEnd($data);
    }
    
    
    
    /**
     * Define colunas a partir de um array passado
     *
     * @param int   $position
     * @param array $typeDefs
     * @param array $defs 
     */
    public function setColumnsArray( $position, array $typeDefs, array $defs)
    {
        foreach ( $defs as $def )
        {
            $column = new bCSVColumn();
            foreach ( $typeDefs as $key => $func )
            {
                $method = 'set' . ucfirst($func);
                $value = $def[$key];
                
                if ( $value )
                {
                    $column->$method( $value );
                }
            }
            
            $this->addColumn($position, $column);
        }
    }
    

     /**
     * Define colunas para gerar a tabela
     *
     * @param int $position
     * @param bCSVColumn $column
     */
    public function addColumn($position,bCSVColumn $column)
    {
        $column->_validateParams();
        
        $this->columns[$position][] = $column;
       
    }
    
     /**
     * Gera colunas para o CREATE TABLE
     * 
     * @return array
     */
    public function generateCreateTableColumns($includeType = true, $position)
    {
        // Gera colunas para CREATE TABLE
        $cols = array();
        for ($i=0; $i < count($this->columns[$position]); $i++)
        {
            $colName = MUtil::NVL($this->columns[$position][$i]->getName(), "col{$i}");
            $colName = trim($colName);
            $cols[] = $colName . ($includeType ? ' varchar' : null);
        }

        return $cols;
    }
    
    public function generateCreateTableColumnsString($includeType = null, $position)
    {
        $cols = $this->generateCreateTableColumns($includeType, $position);
        $colsStr = implode(',', $cols);

        return $colsStr;
    }
       
    /**
     * Retorna se todo conteudo do arquivo CSV esta valido (nao realiza importacao)
     * 
     * @return boolean Retorna TRUE caso todas validacoes estejam OK
     */
    public function check()
    {        
        if ( !$this->hasLoadedFile )
        {
            throw new Exception( _M('O arquivo ainda não foi carregado.') );
        }
        
        // Valida se foi definido colunas
        if ( !$this->columns )
        {
            throw new Exception( _M('Devem ser definidas colunas para o arquivo CSV.') );
        }
        
        // Valida se colunas definidas existem na planilha CSV
        foreach ( $this->columns[1] as $col )
        {
            if ( !in_array($col->getName(), $this->headerLine) )
            {
//                throw new Exception(_M('A coluna @1 nao esta presente no cabecalho do arquivo CSV.', null, $col->getName()));
            }
        }
        
        $countHeader = count($this->headerLine);
        $countCols = count($this->columns[1]);
        if ( $countHeader != $countCols )
        {
            throw new Exception( _M('O numero de colunas definidas (@1) nao bate com o numero de colunas do arquivo CSV. (@2)', null, $countCols, $countHeader) );
        }
        
        // Verifica nome repetido de colunas
        $headers = array_filter($this->headerLine);
        if ( count(array_unique($headers)) != count($headers) )
        {
//            throw new Exception( _M('Existem coluna(s) com nome repetido na planilha.') );
        }
        
        $this->createTempTable();
        $this->hasChecked = true;

        return count($this->errorLog) == 0;
    }
    
    /**
     * Importa o arquivo CSV, apenas caso tenha passado pela validacao
     * 
     * @return boolean
     */
    public function import()
    {
        $ok = $this->check();
        
        if ( $ok )
        {
            if ( $this->getCheckTransaction() )
            {
                bBaseDeDados::iniciarTransacao();
            }
            
            $this->executarBeforeImport();
            
            foreach($this->position as $position)
            {            
                $cols = array_merge( $this->generateCreateTableColumns(true, $position) , array('linha '));
                $query = bBaseDeDados::consultar("SELECT COUNT(*) FROM tmpcsvimportergmaterial{$position}");
                $this->setTotalLines($query[0][0]);
                
                $colsStr = implode(',', $cols);
                $colsStr = str_replace(array(' text', ' varchar', ' int', ' integer'), '', $colsStr);
                $rows = bBaseDeDados::consultar("SELECT {$colsStr} FROM tmpcsvimportergmaterial{$position} order by linha");

                foreach ( $rows as $key => $row )
                {
                    $line = new stdClass();

                    foreach ( $cols as $key => $col )
                    {
                        $value = $row[$key];
                        if ( in_array(strtolower($value), bCSVColumn::$booleanRangesAll) )
                        {
                            $value = strtolower($value);
                        }
                        $value = stripslashes($value);
                        $value = addslashes($value);

                        $line->$col = $value;
                    }
                }
            }
                $this->importLine2($line);
            
            $this->executarAfterImport();
            
            if ( $this->getCheckTransaction() )
            {
                $this->getExecuteRollback() ? bBaseDeDados::reverterTransacao() : bBaseDeDados::finalizarTransacao();
            }
        }
        else
        {
//            throw new Exception( _M('O arquivo CSV não está com os dados validados, verificar.') );
        }

        return $ok;
    }
        
    /**
     * Gera tabela temporaria com os dados do CSV
     */
    protected function createTempTable()
    {
        // Cria tabela temporaria
        $colsStr = $this->generateCreateTableColumnsString(true, 1); 
        bBaseDeDados::executar("DROP TABLE IF EXISTS tmpcsvimportergmaterialdefault");
        bBaseDeDados::executar("CREATE TABLE tmpcsvimportergmaterialdefault ({$colsStr}) WITH OIDS");
        bBaseDeDados::executar("VACUUM tmpcsvimportergmaterialdefault");

        // Importa arquivo CSV diretamente via base de dados em uma tabela temporária
        try 
        {
            $sql = "COPY tmpcsvimportergmaterialdefault FROM stdin DELIMITERS '{$this->delimiter}' CSV";
            $buffer = trim($this->getFileContents());
            
            $conn = SDatabase::getInstance()->conn->id;
            
            pg_query($conn, $sql);
            pg_put_line($conn, $buffer);
            pg_put_line($conn, "\\.");
            pg_end_copy($conn);
        }
        catch (Exception $n)
        {
            throw new Exception (_M('Verifique se no arquivo CSV contém dados em todas as 23 colunas do layout.'));
        }

        // Adiciona coluna com numero da linha e erros
        bBaseDeDados::executar("ALTER TABLE tmpcsvimportergmaterialdefault ADD linha SERIAL");
        bBaseDeDados::executar("ALTER TABLE tmpcsvimportergmaterialdefault ADD erros TEXT");

        // Remove a primeira linha do arquivo
        if ( $this->getIgnoreFirstLine() )
        {
            bBaseDeDados::executar("DELETE FROM tmpcsvimportergmaterialdefault WHERE oid::int = (SELECT MIN(oid)::int FROM tmpcsvimportergmaterialdefault)");
        }

        // Define o numero da linha igualada a do arquivo CSV
        bBaseDeDados::executar("UPDATE tmpcsvimportergmaterialdefault SET linha = ( oid::int - (SELECT MIN(oid)::int FROM tmpcsvimportergmaterialdefault) + 1 )");

        // Apaga primeiro registro que e o cabecalho do CSV
        bBaseDeDados::executar("DELETE FROM tmpcsvimportergmaterialdefault WHERE linha > ({$this->limitRecords} + 1)");

        
        $this->errorLog = array();
        
        $countErrors = 0;
        
        //Faz a criação das bases separadas por tipo para que possam ser aplicadas as validações
        foreach ($this->position as $i)
        {
            $this->tableName = "tmpcsvimportergmaterial". ($i);
            $position = $this->position[$i-1];
            $cont =  count($this->columns[$position]);
            $colunas = array();
            
            for($j=0; $j < $cont; $j++)
            {
                $colunas[] = $this->columns[1][$j]->name;
            }
            
            $colunas = implode(',', $colunas) . ',linha, erros';
            
            //Cria as bases
            $colsStr = $this->generateCreateTableColumnsString(true, $position) . ',linha varchar, erros varchar';
            bBaseDeDados::executar("DROP TABLE IF EXISTS {$this->tableName}");
            bBaseDeDados::executar("CREATE TABLE {$this->tableName} ({$colsStr}) WITH OIDS");
            bBaseDeDados::executar("VACUUM {$this->tableName}");
            
            // Insere dentro de cada base os dados que pertencem a ela
            bBaseDeDados::executar("INSERT INTO {$this->tableName} (select {$colunas} from tmpcsvimportergmaterialdefault where recordid='{$position}')");
            
            // Atualiza valores booleanos
            foreach ( $this->columns[$position] as $col )
            {
                $colName = $col->getName();
                bBaseDeDados::executar("UPDATE {$this->tableName} SET {$colName} = TRIM({$colName})");
                
                if ( $col->getType() == bCSVColumn::TYPE_BOOLEAN )
                {
                    $values = SAGU::quoteArrayStrings(bCSVColumn::$booleanRangesTrue);
                    $values = implode(',', $values);
                    bBaseDeDados::executar("UPDATE {$this->tableName} SET {$colName} = 't' WHERE lower({$colName}) IN ({$values})");

                    $values = SAGU::quoteArrayStrings(bCSVColumn::$booleanRangesFalse);
                    $values = implode(',', $values);
                    bBaseDeDados::executar("UPDATE {$this->tableName} SET {$colName} = 'f' WHERE lower({$colName}) IN ({$values})");
                }

                // Faz substituicoes de valores
                $repVars = $col->getReplaceVars();
                foreach ( $repVars as $old => $new )
                {
                    bBaseDeDados::executar("UPDATE {$this->tableName} SET {$colName} = '{$new}' WHERE lower({$colName}) = lower('{$old}')");
                }
            }

            foreach ( $this->sqlsBefore as $sql )
            {
                bBaseDeDados::executar($sql);
            }

            // Aplica validacoes 
            $cases = $this->generateSQLValidators($position);
            $cases = implode(' || ', $cases);
            bBaseDeDados::executar("UPDATE {$this->tableName} SET erros = {$cases}");
            bBaseDeDados::executar("UPDATE {$this->tableName} SET erros = trim(both E'\n' FROM erros)");

            foreach ( $this->sqlsAfter as $sql )
            {
                bBaseDeDados::executar($sql);
            }
            
            //Mensagem de erro para materiais com número de controle repetidos
            if($this->tableName == 'tmpcsvimportergmaterial1')
            {
                if (bBaseDeDados::consultar("SELECT controlnumber FROM tmpcsvimportergmaterial1 GROUP BY controlnumber HAVING count(controlnumber) > 1"))
                {
                    $controlNumber = bBaseDeDados::consultar("SELECT controlnumber FROM tmpcsvimportergmaterial1 GROUP BY controlnumber HAVING count(controlnumber) > 1");

                    foreach ($controlNumber as $c => $d)
                    {
                        foreach($d as $f=> $g)
                        {
                            $error = "O campo Número de Controle tem valores repetidos, deve ser único.";
                            bBaseDeDados::executar("UPDATE tmpcsvimportergmaterial1 SET erros = '{$error}' WHERE controlnumber='{$g}'");
                        }
                    }
                }
            }
            
            //Mensagem de erro para materiais com número de tombo repetidos em um mesmo material
            if($this->tableName == 'tmpcsvimportergmaterial2')
            {
                if (bBaseDeDados::consultar("SELECT controlnumber, itemnumber FROM tmpcsvimportergmaterial2 GROUP BY controlnumber,itemnumber HAVING count(controlnumber) > 1"))
                {
                    $controlNumber = bBaseDeDados::consultar("SELECT controlnumber, itemnumber FROM tmpcsvimportergmaterial2 GROUP BY controlnumber,itemnumber HAVING count(controlnumber) > 1");

                    foreach ($controlNumber as $c => $d)
                    {
                        foreach($d as $f=> $g)
                        {
                            $error = "O campo Número do tombo tem valores repetidos dentro de um mesmo material(mesmo número de controle), deve ser único.";
                            bBaseDeDados::executar("UPDATE tmpcsvimportergmaterial2 SET erros = '{$error}' WHERE itemnumber='{$g}'");
                        }
                    }
                }
            }
            
            if ( $position == 1)
            {
                $errorLibrary = bBaseDeDados::consultar("SELECT distinct(libraryunit) FROM tmpcsvimportergmaterial1  
                                                             WHERE libraryunit::int NOT IN 
                                                                 (SELECT libraryunitid from gtclibraryunit);");
                foreach ( $errorLibrary as $i => $aux)
                {
                    $errorLibrary[$i] = $aux[0];
                }
                
                $errorLibrary = implode("', '", $errorLibrary);
            }
            elseif ( $position == 2)
            {
                 if($errorLibrary)
                 {
                     $errorLibrary2 = bBaseDeDados::consultar("SELECT distinct(libraryunit) FROM tmpcsvimportergmaterial2  
                                                                  WHERE libraryunit::int NOT IN 
                                                                      (SELECT libraryunitid from gtclibraryunit) AND libraryunit::int NOT IN ('{$errorLibrary}');");
                 }
                 else
                 {
                     $errorLibrary2 = bBaseDeDados::consultar("SELECT distinct(libraryunit) FROM tmpcsvimportergmaterial2  
                                                                  WHERE libraryunit::int NOT IN 
                                                                      (SELECT libraryunitid from gtclibraryunit);");
                 }
                 
                 foreach ( $errorLibrary2 as $i => $aux)
                 {
                    $errorLibrary2[$i] = $aux[0];
                 }
                
                 $errorLibrary2 = implode("', '", $errorLibrary2);

                 if($errorLibrary || $errorLibrary2)
                 {
                     $errorLibrary = $errorLibrary . "', '" . $errorLibrary2;
                 }
            }
            
            if ($errorLibrary && $position >= 2)
            {
                throw new Exception (_M("Os seguintes códigos de unidade não estão presentes no Gnuteca ('@1'). Para continuar a importação é necessário a sua criação." , null , $errorLibrary));
            }
            
            if($position > 6)
            {
                $errorTag = bBaseDeDados::consultar("SELECT DISTINCT(field || '.' || subfield) 
                                                        FROM tmpcsvimportergmaterial7 WHERE field || '.' || subfield NOT IN 
                                                            (SELECT fieldid || '.' || subfieldid FROM gtctag);");
                if ($errorTag)
                {
                    foreach ( $errorTag as $i => $aux)
                    {
                        $errorTag[$i] = $aux[0];
                    }

                    $errorTag = implode('", "', $errorTag);
                    throw new Exception (_M('As seguintes tags não estão presentes no Gnuteca ("@1"). Para fazer a importação delas é necessário a sua criação.' , null , $errorTag));
                }
            }
            
            // Coleta os erros de validacao
            $countErrorsResult = bBaseDeDados::consultar("SELECT count(erros) FROM {$this->tableName} WHERE erros <> '';");
            
            $countErrors += (int) $countErrorsResult[0][0];
            
            if ($countErrors >= 90000)
            {
                throw new Exception (_M('Existem muitos erros no arquivo csv. Foram encontrados ' . $countErrors . ' erros.'));
            }
            else
            {
                $result = bBaseDeDados::consultar("SELECT linha,erros FROM {$this->tableName} where erros <> '' order by linha;");
                $this->setErrorLog( $result );
            }
        }
    }
    
    /**
     * Gera condicoes SQL de validacoes das linhas do CSV.
     * Foi feito via base de dados por questoes de performance.
     *
     * @return array
     */
    protected function generateSQLValidators($position)
    {
        $col = new bCSVColumn();
        $cases = array();
        
        foreach ( $this->columns[$position] as $key => $col )
        {
            $col->setColPosition($key);
            $cases = array_merge($cases, $col->getValidateExpressions());
        }

        return $cases;
    }

    public function setErrorLog($errorLog)
    {
        foreach ( (array) $errorLog as $line)
        {
            $this->errorLog[$line[0]] = $line[1]; 
        }
    }
}          
?>