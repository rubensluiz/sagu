<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Gerencia importacao de pessoas para o SAGU
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 11/06/2012
 *
 **/
class sCSVPessoaFuncionario extends sCSVPessoa
{
    public $filterColumn = 'funcionario';
    
    public function getTitle()
    {
        return 'Pessoas - Funcionario';
    }
    
    public function __construct()
    {
        // Sobrescreve validacoes para FUNCIONARIO
        $this->colDefs = array_merge($this->colDefs, array(
            'descricaosetorfuncionario' => array( 'Descricao do setor (funcionario)', false ),
            'emailsetorfuncionario' => array( 'E-mail do setor (funcionario)', false ),
            'externalid' => array( 'Codigo externo', false ),
            'salary' => array( 'Salario', false ),
            'valuehour' => array( 'Por hora ou mensal', false, bCSVColumn::TYPE_BOOLEAN  ),
            'weeklyhours' => array( 'Horas semanais', false ),
            'datainicialfuncionario' => array( 'Data inicial (funcionario)', false ),
            'datafinalfuncionario' => array( 'Data final (funcionario)', false ),
            'tipofuncionario' => array( 'Tipo de funcionario', true ),
            'classe' => array( 'Classe', false ),
            'nivel' => array( 'Nivel', false ),
            'especialidade' => array( 'Especialidade', false ),
            'unitid' => array( 'Unidade', false ),
        ));

        parent::__construct();
    }
    
    public function importLine2($data)
    {
        $data = parent::importLine2($data);

        if ( $data )
        {
            $data->externalId = $data->externalid;
            $data->beginDate = $data->datainicialfuncionario;
            $data->endDate = $data->datafinalfuncionario;
            $data->valueHour = $data->valuehour;
            $data->weeklyHours = $data->weeklyhours;
            $data->employeeTypeId = $this->obterTipoFuncionario($data->tipofuncionario);
            $data->sectorId = $this->obterSetor($data->descricaosetorfuncionario, $data->emailsetorfuncionario);
            $data->unitId = $this->busUnit->getUnitByDescription(str_replace('.', '', $data->unitid));
                        
            $this->busPhysicalPersonEmployee->insertOrUpdateAll($data);
        }
    }
}
?>
