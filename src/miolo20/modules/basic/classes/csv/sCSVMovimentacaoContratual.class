<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Gerencia importacao de movimentacoes contratuais para o SAGU
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.com.br]
 * @since
 * Class created on 27/06/2012
 *
 **/
class sCSVMovimentacaoContratual extends sCSVFileImporter
{
    public function getTitle()
    {
        $module = SAGU::getFileModule(__FILE__);
        return _M('Movimentação contratual', $module);
    }
    
    public function __construct()
    {
        $typeDefs = array('name', 'label', 'isRequired', 'type' );
        $defs = array(
            array( 'cpf', _M('Identificador'), true ),
            array( 'curso', _M('Curso'), true ),
            array( 'versao', _M('Versao'), true ),
            array( 'turno', _M('Turno'), true ),
            array( 'campus', _M('Campus'), true ),
            array( 'estadocontratual', _M('Estado contratual'), true ),
            array( 'datatrancamento', _M('Data do estado'), false, bCSVColumn::TYPE_DATE ),
            array( 'periodo', _M('Período'), false ),
        );
        
        $this->setColumnsArray($typeDefs, $defs);
        
        parent::__construct();
    }
    
    public function importLine2($data)
    {
        $module = SAGU::getFileModule(__FILE__);
        
        if ( strlen($data->datatrancamento) <= 0 )
        {
            throw new Exception( _M('Data trancamento nao informada.', $module) );
        }
        
        $personId = $this->obterPessoaPeloIdentificador($data->cpf, true);
        $courseVersion = $data->versao;
        $unitId = $this->obterUnidade($data->campus);
        $turnId = $this->obterTurno($data->turno);
        
        // Procura pelo curso utilizando o NOME (acdcourse.name)
        $courseId = $this->obterCursoPelaDescricao($data->curso, $courseVersion, $unitId, $turnId);
        
        // Caso nao encontre, procura pelo CODIGO (acdcourse.courseId)
        if ( strlen($courseId) == 0 )
        {
            $courseId = $this->obterCursoPeloCodigoEDerivados($data->curso, $courseVersion, $unitId, $turnId);
        }
        
        $contractId = $this->obterContratoDaPessoa($personId, $courseId, $courseVersion, $turnId, $unitId, $data->cpf);
        
        $periodId = $data->periodo;
        $learningPeriodId = null;
        
        if ( strlen($periodId) > 0 )
        {
            $this->verificarOcorrenciaDeCurso($data, $courseId, $courseVersion, $turnId, $unitId);
            $learningPeriodId = $this->obterPeriodoLetivo($periodId, $courseId, $courseVersion, $turnId, $unitId);
        }
        
        $data->contractId = $contractId;
        $data->stateContractId = $this->obterEstadoContratual($data->estadocontratual);
        $data->learningPeriodId = $learningPeriodId;
        $data->stateTime = $data->datatrancamento;
        $ok = $this->busMovementContract->insertOrUpdateMovementContract($data);

        parent::importLineEnd($data);
    }
}
?>
