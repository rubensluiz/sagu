<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Gerencia importacao de pessoas para o SAGU
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 11/06/2012
 *
 **/
class sCSVPessoaAluno extends sCSVPessoa
{
    public $filterColumn = 'aluno';
    
    public function getTitle()
    {
        return 'Pessoas - Aluno';
    }
    
    public function __construct()
    {        
        // Sobrescreve validacoes para ALUNO
        $this->colDefs = array_merge($this->colDefs, array(
            'yearhs' => array( 'Ano conclusao', false, bCSVColumn::TYPE_YEAR ),
            'passive' => array( 'Passivo', false ),
            'isinsured' => array( 'Esta segurado', false, bCSVColumn::TYPE_BOOLEAN ),
            'cepinstituicao' => array( 'CEP aluno', false ),
            'cidadeinstituicao' => array( 'Cidade instituicao', false ),
            'ufinstituicao' => array( 'UF aluno', false ),
            'paisinstituicao' => array( 'Pais aluno', false ),
        ));

        parent::__construct();
    }
    
    public function importLine2($data)
    {
        $data = parent::importLine2($data);
        
        if ( $data )
        {                        
            $data->externalCourseIdHs = $this->obterCursoExterno($data->cursoexterno, $data->cursoextabrev);
            
            // Cidade onde foi cursado curso externo
            $cepinstituicao = $data->cepinstituicao;
            $paisinstituicao = $data->paisinstituicao;
            list($cidadeinstituicao, $ufinstituicao) = explode(' - ', $data->cidadeinstituicao);
            $ufinstituicao = SAGU::NVL($ufinstituicao, $data->ufinstituicao);
            
            $data->cityIdHs = $this->obterCidade($cepinstituicao, $cidadeinstituicao, $ufinstituicao, $paisinstituicao);
            
            $data->institutionIdHs = $this->obterInstituicao($data->instituicao, $data->cityIdHs, $cepinstituicao);
            
            $ok = $this->busPhysicalPersonStudent->insertOrUpdatePhysicalPersonStudent($data);
        }
    }
}
?>
