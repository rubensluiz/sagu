<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Gerencia importacao de matriz curricular para o SAGU
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 07/03/2013
 *
 **/
class sCSVMatrizCurricular extends sCSVFileImporter
{
    public function getTitle()
    {
        $module = SAGU::getFileModule(__FILE__);
        return _M('Matriz curricular', $module);
    }

    public function __construct()
    {
        $typeDefs = array('name', 'label', 'isRequired', 'type' );
        $defs = array(
            //Ocorrencia curso
            array( 'curso', _M('Codigo do curso'), true ),
            array( 'versao', _M('Versao do curso'), true ),
            array( 'turno', _M('Turno'), true ),
            array( 'campus', _M('Unidade'), true     ),
            //Curriculo
            array( 'periodo', _M('Período da disciplina'), true ),
            //Disciplina
            array( 'disciplinaCodigo', _M('Código da disciplina'), true ),
            array( 'disciplinaVersao', _M('Versão da disciplina'), true ),
            array( 'disciplinaNome', _M('Nome da disciplina'), true ),
            array( 'disciplinaAvreviatura', _M('Abreviatura'), true ),
            array( 'centro', _M('Centro'), false ),
            array( 'abreviaturaCentro', _M('Abreviatura centro'), false ),
            array( 'ementa', _M('Ementa'), false ),
            array( 'credAcademicos', _M('Créditos academicos'), true ),
            array( 'credAula', _M('Créditos de aula'), true ),
            array( 'horasAcademicas', _M('Horas academicas'), true ),
            array( 'horasAula', _M('Horas aula'), true ),
            array( 'dataInicial', _M('Data inicial'), false ),
            array( 'dataFinal', _M('data final'), false ),
            array( 'areaEnsino', _M('Área de ensino'), false ),
            //Curriculo
            array( 'tipoDisciplina', _M('Tipo de disciplina'), true ),
            array( 'tipoDeCurriculo', _M('Tipo de Curriculo'), true ),
            array( 'tipoDeCurriculoAbreviatura', _M('Tipo de Curriculo abreviatura'), true ),
            array( 'exibirBoletim', _M('Exibir no boletim'), true,bCSVColumn::TYPE_BOOLEAN ),
            array( 'exibirHistorico', _M('Exibir no histórico'), true,bCSVColumn::TYPE_BOOLEAN ),
            array( 'grupoDisciplina', _M('Grupo da disciplina'), true ),
            array( 'grupoDisciplinaAbreviatura', _M('Abreviatura do grupo da disciplina'), false ),
            array( 'grupoDisciplinaEletiva', _M('Grupo da disciplicina eletiva'), false ),
            array( 'grupoDisciplinaEletivaAbreviatura', _M('Abreviatura do grupo da disciplina eletiva'), false ),
        );
        //Ignora o cabeçalho do CSV
        $this->setColumnsArray($typeDefs, $defs);

        parent::__construct();
    }

    public function importLine2($data)
    {
        //Busca ocorrencias de curso
        $filterOcorrencia = new stdClass();
        $filterOcorrencia->courseId = $data->curso;
        $filterOcorrencia->courseVersion = $data->versao;
        $filterOcorrencia->turnId = $this->obterTurno($data->turno);
        $filterOcorrencia->unitId = $this->obterUnidade($data->campus);
        $ocorrencias = $this->busCourseOccurrence->searchCourseOccurrence($filterOcorrencia, true);

        //Verifica se exite ocorrencias para o curso informado
        if ( is_array($ocorrencias) )
        {
            foreach ( $ocorrencias as $ocorrencia )
            {
                //Disciplina
                $disciplina = new stdClass();
                $disciplina->curricularComponentId = $data->disciplinaCodigo;
                $disciplina->curricularComponentVersion = $data->disciplinaVersao;
                $disciplina->centerId = $this->obterCentro($data->centro, $data->abreviaturaCentro);
                $disciplina->name = $data->disciplinaNome;
                $disciplina->shortName = $data->disciplinaAvreviatura;
                $disciplina->summary = $data->ementa;
                $disciplina->academicCredits = $data->credAcademicos;
                $disciplina->lessonCredits = $data->credAula;
                $disciplina->academicNumberHours = $data->horasAcademicas;
                $disciplina->lessonNumberHours = $data->horasAula;
                $disciplina->beginDate = $data->dataInicial;
                $disciplina->endDate = $data->dataFinal;
                $disciplina->educationAreaId = $this->obterAreaDoCurso($data->areaEnsino);
                $this->inserirDisciplina($disciplina);

                //Matriz
                $curriculum = new stdClass();
                $curriculum->courseId = $ocorrencia->courseId;
                $curriculum->courseVersion = $ocorrencia->courseVersion;
                $curriculum->turnId = $ocorrencia->turnId;
                $curriculum->unitId = $ocorrencia->unitId;
                $curriculum->curricularComponentId = $disciplina->curricularComponentId;
                $curriculum->curricularComponentVersion = $data->disciplinaVersao;
                $curriculum->curricularComponentTypeId = $this->obterTipoDeDisciplina($data->tipoDisciplina);
                $curriculum->semester = $data->periodo;
                $curriculum->showInScholarshipDescription = $data->exibirHistorico;
                $curriculum->curricularComponentGroupDocumentEndCourseId = $this->obterGrupoDisciplina($data->grupoDisciplina, $data->grupoDisciplinaAbreviatura);
                //Só insere ou obbtem grupo da disciplina eletiva se tiver alguma coisa no campo descrição
                if ( strlen($data->grupoDisciplinaEletiva)>0 )
                {
                    $curriculum->curricularComponentGroupElectiveId = $this->obterGrupoDisciplina($data->grupoDisciplinaEletiva, $data->grupoDisciplinaEletivaAbreviatura);
                }
                $curriculum->curriculumTypeId = $this->obterTipoDeCurriculo($data->tipoDeCurriculo, $data->tipoDeCurriculoAbreviatura);
                $curriculum->showInBulletin = $data->exibirBoletim;
                $this->inserirDisciplinaMatriz($curriculum);

                //LOG
                //$identificador = $curriculum->curricularComponentId;
                //$nomepessoa =  $curriculum->courseVersion;
                //$f = fopen('/tmp/logmatriz.txt', 'a+');
                //fwrite($f, "CURSO: {$data->curso}  VERSAO: {$data->versao} TURNO: {$data->turno} UNIDADE: {$data->campus} DISCIPLINA CODIGO: {$data->disciplinaCodigo}DISCIPLINA VERSÃO: {$data->disciplinaVersao} DISCIPLINA NOME: {$data->disciplinaNome} \n");
                //fclose($f);
            }
        }
        else
        {
            throw new Exception( _M("Não existe a ocorrência de curso cadastrada: <br/><br/>
            CURSO: {$data->curso} <br/>
            VERSAO: {$data->versao} <br/>
            TURNO: {$data->turno} <br/>
            UNIDADE: {$data->campus}", $module) );
        }

        return parent::importLineEnd($data);
    }
}
?>