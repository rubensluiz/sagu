<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Gerencia importacao de documentos para o SAGU
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.com.br]
 *
 * @since
 * Class created on 28/06/2012
 *
 **/
class sCSVVinculoCurriculo extends sCSVFileImporter
{
    public function getTitle()
    {
        $module = SAGU::getFileModule(__FILE__);
        return _M('Vinculo de currículo', $module);
    }
    
    public function __construct()
    {
        $module = SAGU::getFileModule(__FILE__);
        
        $typeDefs = array('name', 'label', 'isRequired', 'type', 'replaceVars' );
        $defs = array(
            //Ocorrência de curso das disciplinas 
            array( 'courseId', _M('Código do curso', $module), true ),
            array( 'courseVersion', _M('Versão do curso', $module), true ),
            array( 'turnId', _M('Turno do curso', $module), true ),
            array( 'unitId', _M('Unidade do curso', $module), true ),
            //Disciplina
            array( 'curricularComponentId', _M('Código da disciplina', $module), true ),
            array( 'curricularComponentVersion', _M('Versão da disciplina', $module), true ),
            //Disciplina equivalente
            array( 'courseVersionLink', _M('Versão do curso equivalente', $module), true ),
            array( 'curricularComponentIdLink', _M('Código da disciplina equivalente', $module), true ),
            array( 'curricularComponentVersionLink', _M('Versão da disciplina equivalente', $module), true ),   
            array( 'courseIdLink', _M('Código do curso equivalente', $module), true ),
            array( 'turnIdLink', _M('Turno do curso equivalente', $module), true ),
            array( 'unitIdLink', _M('Unidade do curso equivalente', $module), true ),
            array( 'utilizaVinculoParaMatricula', _M('Utiliza vínculo para matrícula', $module), true ),
        );

        $this->setColumnsArray($typeDefs, $defs);
        
        parent::__construct();
    }
    
    public function importLine2($data)
    {
        $module = SAGU::getFileModule(__FILE__);
        
        //FIXME Verificar ultimo parametro para demais casos deve ser false, array somente em alguns casos                
        $returnArray = false;
        $courseName = null;
        $unitId = $this->obterUnidade($data->unitId); 
        $turnId = $this->obterTurno($data->turnId);
        $unitIdLink = $this->obterUnidade($data->unitIdLink); 
        $turnIdLink = $this->obterTurno($data->turnIdLink);
        
        //Disciplina
        $curricularComponentId = $data->curricularComponentId;
        $curricularComponentVersion = $data->curricularComponentVersion;
        $courseId = $data->courseId;
        $courseVersion = $data->courseVersion;
        $data->curriculumId = $this->obterMatrizCurricularDeDisciplina($curricularComponentId,$curricularComponentVersion,$courseId, $courseVersion, $unitId, $turnId, $courseName, $returnArray);
        
        //Disciplina equivalente
        $curricularComponentIdLink = $data->curricularComponentIdLink;
        $curricularComponentVersionLink = $data->curricularComponentVersionLink;
        $courseIdLink = $data->courseIdLink;
        $courseVersionLink = $data->courseVersionLink;
        $data->curriculumLinkId = $this->obterMatrizCurricularDeDisciplina($curricularComponentIdLink, $curricularComponentVersionLink, $courseIdLink, $courseVersionLink, $unitIdLink, $turnIdLink, $courseName, $returnArray);
        
        if ( strtoupper($data->utilizaVinculoParaMatricula) == 'S' )
        {
            $data->utilizaVinculoParaMatricula = DB_TRUE;
        }
        else if ( strtoupper($data->utilizaVinculoParaMatricula) == 'N' )
        {
            $data->utilizaVinculoParaMatricula = DB_FALSE;
        }
        
        //Verifica se encontrou as disciplinas
        if( is_array($data->curriculumId) && is_array($data->curriculumLinkId) )
        {
            foreach ( $data->curriculumId as $cod => $linha )
            {
                $std = new stdClass();
                $std->curriculumId = $linha[0];
                $std->curriculumLinkId = $data->curriculumLinkId[$cod][0];
                
                if( strlen($std->curriculumId) > 0 && strlen($std->curriculumLinkId) > 0 )
                {
                    // Verifica se equivalencia já existe
                    $rows = $this->busCurriculumLink->searchCurriculumLink($std);
                    // Se equivalencia não existe insere
                    if ( count($rows) <= 0 )
                    {
                        $ok = $this->busCurriculumLink->insertCurriculumLink($std);
                    }
                }
            }
        }
        else
        {
            $filters = new stdClass();
            $filters->curriculumId = $data->curriculumId;
            $filters->curriculumLinkId = $data->curriculumLinkId;
            $filters->courseId = $data->courseId;
            $filters->courseVersion = $data->courseVersion;
            $filters->courseUnitId = $data->unitId;
            $filters->courseTurnId = $data->turnId;
            $filters->curricularComponentId = $data->curricularComponentId;
            $filters->curricularComponentVersion = $data->curricularComponentVersion;
            $filters->courseLinkId = $data->courseIdLink;
            $filters->courseLinkVersion = $data->courseVersionLink;
            $filters->courseLinkUnitId = $data->unitIdLink;
            $filters->courseLinkTurnId = $data->turnIdLink;
            $filters->curricularComponentLinkId = $data->curricularComponentIdLink;
            $filters->curricularComponentLinkVersion = $data->curricularComponentVersionLink;
            
            $rows = $this->busCurriculumLink->searchCurriculumLink($data);
            
            if ( count($rows) <= 0 )
            {
                $ok = $this->busCurriculumLink->insertCurriculumLink($data);
            }
        }
        
        parent::importLineEnd($data);
    }
}
?>