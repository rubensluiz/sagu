<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Gerencia importacao de pessoas para o SAGU
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 11/06/2012
 *
 **/
class sCSVPessoa extends sCSVFileImporter
{
//    'name' => array( 'label', 'isRequired', 'type', 'replaceVars' );
    
    public $colDefs = array(
        'codpessoa' => array('Cod. pessoa', false ),
        'identifier' => array('Identificador', true ),
        'name' => array( 'Nome da pessoa', true ),
        'email' => array( 'E-mail', true ),
        'usuario' => array( 'Usuario', false ),
        'password' => array( 'Senha', false ),
        'zipcode' => array( 'CEP', true ),
        'cidade' => array( 'Cidade', true ),
        'uf' => array( 'UF', true, bCSVColumn::TYPE_ESTADO ),
        'pais' => array( 'Pais', true ),
        'neighborhood' => array( 'Bairro', true ),
        'tipologradouro' => array( 'Tipo de logradouro', true ),
        'logradouro' => array( 'Logradouro', true ),
        'number' => array( 'Numero', false, bCSVColumn::TYPE_STRING ),
        'complement' => array( 'Complemento', false ),
        'sex' => array( 'Sexo', true, bCSVColumn::TYPE_SEX ),
        'estadocivil' => array( 'Estado civil', true ),
        'birthdate' => array( 'Data nascimento', true ),
        'cepnatal' => array( 'CEP natal', false ),
        'cidadenatal' => array( 'Cidade natal', true ),
        'ufnatal' => array( 'UF natal', true, bCSVColumn::TYPE_ESTADO ),
        'paisnatal' => array( 'Pais natal', true ),
        'nacionalidade' => array( 'Nacionalidade', true, null, array('BRASILEIRA' => 'BRASILEIRO' )),
        'nomeresponsavel' => array( 'Nome responsavel', false ),
        'cpfresponsavel' => array( 'CPF responsavel', false ),
        'sexoresponsavel' => array( 'Sexo responsavel', false, bCSVColumn::TYPE_SEX ),
        'datanascresponsavel' => array( 'Data nasc. responsavel', false ),
        'origemetnica' => array( 'Origem etnica', false ),
        'necessidadeespecial' => array( 'Necessidade especial', false ),
        'residentialphone' => array( 'Fone residencial', false ),
        'workphone' => array( 'Fone trabalho', false ),
        'cellphone' => array( 'Fone celular', false ),
        'messagephone' => array( 'Fone mensagem', false ),
        'fathername' => array( 'Nome pai', false ),
        'mothername' => array( 'Nome mae', false ),
        'aluno' => array( 'Aluno', true, bCSVColumn::TYPE_BOOLEAN ),
        'professor' => array( 'Professor', true, bCSVColumn::TYPE_BOOLEAN ),
        'funcionario' => array( 'Funcionario', true, bCSVColumn::TYPE_BOOLEAN ),
        'workfunction' => array( 'Cargo', false ),
        'workemployername' => array( 'Nome da instituicao', false ),
        
        // Aluno
        'cursoexterno' => null,
        'cursoextabrev' => null,
        'instituicao' => null,
        'cepinstituicao' => null,
        'cidadeinstituicao' => null,
        'ufinstituicao' => null,
        'paisinstituicao' => null,
        'yearhs' => null,
        'passive' => null,
        'isinsured' => null,
        
        // Professor
        'datainicialcontrato' => null,
        'datafinalcontrato' => null,
        'workload' => null,
        'teachworkload' => null,
        'timesheet' => null,
        'descricaounidade' => null,
        'cepprofessor' => null,
        'cidadeprofessor' => null,
        'ufprofessor' => null,
        'paisprofessor' => null,
        'descricaosetorprofessor' => null,
        'emailsetorprofessor' => null,
        'horarioprofessor' => null,
        'tarefasprofessor' => null,

        // Funcionario
        'descricaosetorfuncionario' => null,
        'emailsetorfuncionario' => null,
        'externalid' => null,
        'salary' => null,
        'valuehour' => null,
        'weeklyhours' => null,
        'datainicialfuncionario' => null,
        'datafinalfuncionario' => null,
        'tipofuncionario' => null,
        'classe' => null,
        'nivel' => null,
        'especialidade' => null,
        'unitid' => null,
    );
    
    public function __construct()
    {
        // Apaga todos registros que nao sejam alunos
        $this->setSqlsBefore(array(
            "DELETE FROM {$this->getTmpTableName()} WHERE {$this->filterColumn} <> 't'"
        ));
        
        foreach ( $this->colDefs as $key => $val )
        {
            $column = new sCSVColumn();
            $column->setName($key);
            $column->setLabel( SAGU::NVL($val[0], rand()) );
            $column->setIsRequired($val[1]);
            $column->setType($val[2]);
            $column->setReplaceVars($val[3]);

            $this->addColumn($column);
        }
        
        parent::__construct();
    }
    
    public function importLine2($data)
    {
        $data->zipCode = str_replace('-', '', $data->zipcode);
        $data->dateBirth = $data->birthdate;
        $data->location = $data->logradouro;
        $data->yearHs = $data->yearhs;
        $data->isInsured = $data->isinsured;
        $data->mioloUserName = $data->usuario;
        $data->motherName = $data->mothername;
        $data->fatherName = $data->fathername;
        $data->workPhone = $data->workphone;
        $data->cellPhone = $data->cellphone;
        $data->residentialPhone = $data->residentialphone;
        $data->messagePhone = $data->messagephone;
        $data->workEmployerName = $data->workemployername;
        $data->workFunction = $data->workfunction;
        $data->countryIdBirth =  $this->obterPaisNatal($data->paisnatal);
        
        $data->maritalStatusId = $this->obterEstadoCivil($data->estadocivil);
        $data->locationTypeId = $this->obterTipoDeLogradouro($data->tipologradouro);
        $data->ethnicOriginId = $this->obterOrigemEtnica($data->origemetnica);
        $data->specialNecessityId = $this->obterNecessidadeEspecial($data->necessidadeespecial);
        $data->cityId = $this->obterCidadeSimples($data->cidade, $data->uf, $data->pais);
        $data->cityIdBirth = $this->obterCidade($data->cepnatal, $data->cidadenatal, $data->ufnatal, $data->paisnatal);        
        $data->responsableLegalId = $this->inserirResponsavel($data->nomeresponsavel, $data->cpfresponsavel, $data->sexoresponsavel, $data->datanascresponsavel);

        // Inserir ou atualizar pessoa
        $data->personId = $this->obterPessoaPeloIdentificador($data->identifier);
        
        if ( strlen($data->password) > 0 && strlen($data->personId) > 0 )
        {
            $personData = $this->busPhysicalPerson->getLoginAndPassword($data->personId);
                           
            // Caso já exista senha cadastrada para a pessoa, não é alterada
            if ( $personData->password != md5($data->password) )
            {
                if ( strlen($personData->password) == 32 )
                {
                    $data->password = null;
                }
                else
                {
                    $data->password = $personData->password;
                }
            }
        }
        
        if ( strlen($data->personId) > 0 )
        {
            // Verifica se o e-mail que está inserindo/atualizando já está na base (facilita encontrar erro)
            $verEmail = $this->verificarSeEmailExiste($data->email, $data->identifier);
            if ( strlen($verEmail) > 0 )
            {
                throw new Exception('O email ' . $data->email . ' não pode ser inserido/atualizado para pessoa ' . SAGU::NVL($data->name, $data->personName) . ' já está cadastrado na pessoa ' . $verEmail . '.');
            }
            
            $ok = $this->busPhysicalPerson->updatePhysicalPerson($data);
        }
        else
        {
            $data->codpessoa = ltrim($data->codpessoa, '0');
            $data->personId = strlen($data->codpessoa) > 0 ? $data->codpessoa : NULL;
            
            // Verifica se o e-mail que está inserindo/atualizando já está na base (facilita encontrar erro)
            $verEmail = $this->verificarSeEmailExiste($data->email, $data->identifier);
            if ( strlen($verEmail) > 0 )
            {
                throw new Exception('O email ' . $data->email . ' não pode ser inserido/atualizado para pessoa ' . SAGU::NVL($data->name, $data->personName) . ' já está cadastrado na pessoa ' . $verEmail . '.');
            }
            
            $ok = $this->busPhysicalPerson->insertPhysicalPerson($data);
        }
        
        //$identificador = $data->identifier;
        //$nomepessoa = $data->name;
        //$f = fopen('/tmp/logPessoa.txt', 'a+');
        //fwrite($f, "Identificador: {$identificador} Nome:{$nomepessoa} \n");
        //fclose($f);

        parent::importLineEnd($data);
        
        //miolo::vd('Pessoa inserida: '.($ok->personId ? $ok->personId : $data->personId));
        
        return $ok ? $data : null;
    }
}
?>
