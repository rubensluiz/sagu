<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Gerencia importacao de movimentacoes contratuais para o SAGU
 *
 * @author Fabiano Tomasini [fabiano@solis.com.br]
 * @author Moises Heberle [moises@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Fabiano Tomasini [fabiano@solis.com.br]
 * Moises Heberle [moises@solis.com.br]
 *
 * @since
 * Class created on 27/06/2012
 *
 **/
class sCSVFinanceiro extends sCSVFileImporter
{
    public function getTitle()
    {
        $module = SAGU::getFileModule(__FILE__);
        return _M('Financeiro', $module);
    }

    public function __construct()
    {
        $typeDefs = array('name', 'label', 'isRequired', 'type' );
        $defs = array(
            //Titulo
            array( 'identificador', _M('Identificador da pessoa'), true ),
            array( 'nossoNumero', _M('Nosso número'), false ),
            array( 'numeroParcela', _M('Número da parcela'), true ),
            array( 'dataEmissao', _M('Data da emissão'), true ),
            array( 'dataVencimento', _M('Data do vencimento'), true ),
            array( 'valor', _M('Valor'), true ),
            array( 'contaBancaria', _M('Conta bancária'), false ),
            array( 'agencia', _M('Agência'), false ),
            array( 'banco', _M('Banco'), false ),
            array( 'dataPagamento', _M('Data de pagamento'), false ),
            array( 'valorPago', _M('Valor pago'), false ),
            array( 'comments', _M('Comentário'), false ),
            array( 'origem', _M('Origem'), false ),            
            array( 'situacaoCheque', _M('Situação do cheque'), false ),
            array( 'bankAccountId', _M('Conta bancária padrão'), false ),
            
            //Incentivo
            array( 'incentivo1', _M('Incentivo 1'), false ),
            array( 'incentivo1Valor', _M('Incentivo 1 valor'), false ),
            array( 'incentivo2', _M('Incentivo 2'), false ),
            array( 'incentivo2Valor', _M('Incentivo 2 valor'), false ),
            array( 'incentivo3', _M('Incentivo 3'), false ),
            array( 'incentivo3Valor', _M('Incentivo 3 valor'), false ),
            array( 'incentivo4', _M('Incentivo 4'), false ),
            array( 'incentivo4Valor', _M('Incentivo 4 valor'), false ),
            array( 'incentivo5', _M('Incentivo 5'), false ),
            array( 'incentivo5Valor', _M('Incentivo 5 valor'), false ),
            //Convenio
            array( 'convenio1', _M('Convenio 1'), false ),
            array( 'convenio1Valor', _M('Convenio 1 valor'), false ),
            array( 'convenio2', _M('Convenio 2'), false ),
            array( 'convenio2Valor', _M('Convenio 2 valor'), false ),
            array( 'conveni3', _M('Convenio 3'), false ),
            array( 'convenio3Valor', _M('Convenio 3 valor'), false ),
            array( 'convenio4', _M('Convenio 4'), false ),
            array( 'convenio4Valor', _M('Convenio 4 valor'), false ),
            array( 'convenio5', _M('Convenio 5'), false ),
            array( 'convenio5Valor', _M('Convenio 5 valor'), false ),
            array( 'politica', _M('Política'), false ),
            array( 'centroCusto', _M('Centro de custo'), true ),
            
            array( 'courseId', _M('Curso'), false ),
            array( 'courseVersion', _M('Versao'), false ),
            array( 'turnId', _M('Turno'), false ),
            array( 'unitId', _M('Unidade'), false ),
            array( 'periodo', _M('Periodo'), false ),
            );

//        $this->setIgnoreFirstLine(true);

        $this->setColumnsArray($typeDefs, $defs);

        parent::__construct();
    }

    public function importLine2($data)
    {
        // Boletos
        $invoice = new stdClass();
        $invoice->personId = $this->obterPessoaPeloIdentificador($data->identificador, true);        
        $invoice->accountSchemeId = strlen($data->accountSchemeId) > 0 ? $data->accountSchemeId : 1; // VALORES A RECEBER
        $invoice->costCenterId = $this->fixValue($data->centroCusto);
        $invoice->parcelNumber = $data->numeroParcela;
        $invoice->emissionDate = $data->dataEmissao;
        $invoice->maturityDate = $data->dataVencimento;
        $invoice->referenceMaturityDate = $data->dataVencimento;
        $invoice->value = $data->valor;
                
        $invoice->emissionTypeId = 4; //CEDENTE
        
        if ( !$invoice->incomeSourceId && strlen($data->situacaoCheque) > 0 )
        {
            $invoice->incomeSourceId = $this->obterCodSituacaoCheque($data->situacaoCheque);
        }

        if ( strlen($data->politica) == 0 )
        {
            throw new Exception(_M('A política do título deve ser informada.'));
        }
        
        if ( !$invoice->policyId && strlen($data->politica) > 0 )
        {
            $policyId = $this->obterCodPolitica($data->politica);
            
            if ( !$policyId )
            {
                throw new Exception(_M('Politica nao encontrada: @1', null, $data->politica));
            }
            
            $invoice->policyId = $policyId;
        }
        
        if( SAGU::allIsFilled($data->contaBancaria, $data->agencia, $data->banco) )
        {
            $invoice->bankAccountId = $this->obterContaBancaria($data->contaBancaria, $data->agencia, $data->banco);
        }
        else
        {
            $invoice->bankAccountId = SAGU::NVL($data->bankAccountId, $data->contaBancaria);
        }

        //
        // logicas de periodo letivo/contrato que serao associados a entrada MENSALIDADE do titulo
        //
        $valores = array(
            $data->courseId,    $data->courseVersion,
            $data->turnId,      $data->unitId,          $this->fixValue($data->periodo)
        );

        if ( count(array_filter($valores)) > 0 )
        {
            if ( count(array_filter($valores)) != count($valores) )
            {
                throw new Exception(_M('Caso uma das colunas Nome do curso, Versão do curso, Turno do curso, Unidade do curso, Período seja preenchida, todas as outras deverão possuir valor, também.'));
            }

            $courseId = $data->courseId;
            $courseVersion = $data->courseVersion;
            $turnId = $this->obterTurno($data->turnId);
            $unitId = $this->obterUnidade($data->unitId);

            $periodId = $this->obterPeriodo($data->periodo);
            $datasPL = $this->obterDatasPeriodoLetivo($periodId);
            $learningPeriodId = $this->obterPeriodoLetivo($periodId, $courseId, $courseVersion, $turnId, $unitId, $datasPL->beginDate, $datasPL->endDate);
            $contractId = $this->obterContratoDaPessoa($invoice->personId, $courseId, $courseVersion, $turnId, $unitId);
        }

        // Verifica se existe o centro de curso informado
        $busCostCenter = new BusinessAccountancyBusCostCenter();
        $centroDeCusto = $busCostCenter->getCostCenter($invoice->costCenterId);
        if ( !strlen($centroDeCusto->costCenterId) > 0 )
        {
            throw new Exception(_M('Não existe o centro de curso informado.'));
        }
        
        //
        // segue fluxo normal
        //
        if ($data->origem != 'BOLETO')
        {
            $invoiceId = $this->obterTitulo($invoice->personId, $invoice->parcelNumber, $invoice->emissionDate, $invoice->maturityDate, $invoice->value, $invoice->bankAccountId, $invoice->incomeSourceId, $invoice->policyId, $invoice->accountSchemeId, $invoice->costCenterId, $invoice->referenceMaturityDate, $data->comments, $contractId, $learningPeriodId);
        }
        // Atualiza ou insere na finReceivableInvoice
        else if( strlen($data->nossoNumero) > 0 )
        {
            $filters = new stdClass();
            $filters->ourNumber = $data->nossoNumero;
            $rows = $this->busBankInvoiceInfo->searchBankInvoiceInfo($filters);
            $jaExisteBoleto = count($rows) > 0;

            if ( $jaExisteBoleto )
            {
                $invoiceId = $rows[0][0];
            }
            else
            {
                if( strlen($invoice->bankAccountId) <= 0 )
                {
                    throw new Exception( _M('Conta bancária não informada para nosso número @1', $module, $data->nossoNumero) );
                }

                $invoiceId = $this->obterTitulo($invoice->personId, $invoice->parcelNumber, $invoice->emissionDate, $invoice->maturityDate, $invoice->value, $invoice->bankAccountId, $invoice->incomeSourceId, $invoice->policyId, $invoice->accountSchemeId, $invoice->costCenterId, $invoice->referenceMaturityDate, $data->comments, $contractId, $learningPeriodId);
                //$invoiceId = $this->busReceivableInvoice->insertReceivableInvoice($invoice);

                // Insere finBankInvoiceInfo
                $info = new stdClass();
                $info->invoiceId = $invoiceId;
                $info->bankAccountId = $invoice->bankAccountId;
                $info->ourNumber = $data->nossoNumero;
                $ok = $this->busBankInvoiceInfo->insertBankInvoiceInfo($info);                
            }
        }
        
        // Incentivos
        $entradas = 5;

        // Só insere lancamentos de incentivo se não for uma atualização
        if ( !$jaExisteBoleto )
        {
            for ($i=0; $i < $entradas; $i++)
            {
                $incentivo = $data->{"incentivo{$i}"};
                $valor = $data->{"incentivo{$i}Valor"};

                // Se nao existir valor, passa proximo laco de repeticao
                if ( !SAGU::allIsFilled($incentivo, $valor) )
                {
                    continue;
                }

                //Insere operação com a descrição do incentivo
                $operationId = $this->obterCodOperacaoIncentivo($incentivo);
                //Obtem tipo de incentivo, caso não exista insere um tipo novo com a descrição
                $incentiveTypeId = $this->obterTipoIncentivo($incentivo);


                //Essa versão do script não vai inserir o incentivo para a pessoa, vai ser analisado pelos lançamentos
                /*
                $incentive = new stdClass();
                $incentive->contractId =
                $incentive->startDate,
                $incentive->endDate,
                $incentive->incentiveTypeId,
                $incentive->valueIsPercent,
                $incentive->value,
                $incentive->supporterId,
                $incentive->agglutinate,
                $incentive->costCenterId,
                $incentive->cancellationDate,
                $ok = $this->obterIncentivo();
                //incere incentivo
                */

                $entry = new stdClass();
                $entry->invoiceId = $invoiceId;
                $entry->operationId = $operationId; // MENSALIDADES
                $entry->entryDate = $data->dataEmissao;
                $entry->value = $valor;
                $entry->costCenterId = $invoice->costCenterId;
                $entry->comments = _M('Importacao financeira');
                $entry->incentiveTypeId = $incentiveTypeId;
                $ok = $this->busEntry->insertEntry($entry);
            }
        }

        // Se tiver valor pago desconsidera lógica da estrutura do convênio, vai ser inserido apenas lançamendo de desconto ou juro e multa
        if ( $data->valorPago > 0 )
        {
            // Convenios
            $convenios = 5;

            if ( !$jaExisteBoleto )
            {
                for ($i=0; $i < $convenios; $i++)
                {
                    $convenio = $data->{"convenio{$i}"};
                    $valor = $data->{"convenio{$i}Valor"};


                    // Se nao existir valor, passa proximo laco de repeticao
                    if ( !SAGU::allIsFilled($convenio, $valor) )
                    {
                        continue;
                    }

                    $operationId = $this->obterCodOperacaoIncentivo($convenio);
                    $codConvenio = $this->obterCodConvenio($convenio, $operationId, $valor);

                    // Insere o convenio da pessoa
                    $cp = new stdClass();
                    $cp->convenantPersonId = $invoice->personId;
                    $cp->convenantId = $codConvenio;
                    $cp->beginDate = SAGU::getDateNow();
                    $cp->personId = $invoice->personId;
                    $ok = $this->busConvenantPerson->insertConvenantPerson($cp);

                    // Insere entrada (finEntry)
                    $entry = new stdClass();
                    $entry->invoiceId = $invoiceId;
                    $entry->operationId = $operationId;
                    $entry->entryDate = $data->dataEmissao;
                    $entry->value = $valor;
                    $entry->costCenterId = $invoice->costCenterId;
                    $entry->comments = _M('Importacao financeira');

                    $ok = $this->busEntry->insertEntry($entry);
                }
            }
        }
        // Se tiver valor no campo valor pago
        if( $data->valorPago > 0 )
        {

            //INSERE LANCAMENTO PAGAMENTO
            $entry = new stdClass();
            $entry->invoiceId = $invoiceId;
            $entry->operationId = $this->busDefaultOperations->getDefaultOperation('paymentOperation');
            $entry->entryDate = $data->dataEmissao;
            $entry->value = $data->valorPago;
            $entry->costCenterId = $invoice->costCenterId;
            $entry->comments = _M('Importacao financeira');
            
            
            $ok = $this->busEntry->insertEntry($entry);

            //(valor do titulo) - (valor pago)
//            $calculo = "{$data->valor} - {$data->valorPago}";
//            $lancamentoValor = SAGU::calcNumber($calculo, true);
//
//            //se valor for positivo insere lançamento de desconto(operaçao padrao)
//            $entry = new stdClass();

//            if($lancamentoValor > 0)
//            {
//                $entry = new stdClass();
//                $entry->operationId = $this->busDefaultOperations->getDefaultOperation('discountOperation'); //OPERAÇÃO PADRÃO DE DESCONTO
//                $entry->comments = _M('Importacao financeira');
//            }
//            //se valor for negativo insere lançamento como juro e multa
//            else if ($lancamentoValor < 0)
//            {
//                $entry->operationId = $this->busDefaultOperations->getDefaultOperation('interestOperation'); //OPERAÇÃO PADRÃO DE JUROS E MULTA
//                $entry->comments = _M('Importacao financeira');
//            }
//            //Insere o lançamento de desconto ou juro e multa
//            $entry->invoiceId = $invoiceId;
//            $entry->entryDate = $data->dataEmissao;
//            $entry->value = abs($lancamentoValor);
//            $entry->costCenterId = $invoice->costCenterId;
//            $ok = $lancamentoValor != 0 ? $this->busEntry->insertEntry($entry) : true;
        }

        // LOG
        //$identificador = $data->identificador;
        //$identificadorTitulo =  $data->identificadorTitulo;
        //$f = fopen('/tmp/logFinanceiro.txt', 'a+');
        //fwrite($f, "IDENTIFICADOR PESSOA: {$identificador}  INDENTIFICADOR TITULO: {$identificadorTitulo} \n");
        //fclose($f);

        return parent::importLineEnd($data);
    }
}
?>