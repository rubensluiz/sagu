<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Cria campos de informacao, geralmente dentro de um baseGroup e no topo de formularios.
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Equipe Solis [sagu2@solis.coop.br]
 *
 * @since
 * Class created on 12/05/2011
 */
class SInformationField extends SFieldGroup
{
    /**
     * @param array $options Opcoes
     * <br><b>value</b> Array associativo contendo label => valor, com as informacoes que serao exibidas
     * <br><b>columns</b> Numero de colunas a quebrar (padrao: 2)
     */
    public function __construct($options = array(), $width ='250')
    {
        $module = SAGU::getFileModule(__FILE__);

        // Defaults
        $options = array_merge(array(
            'value' => array(),
            'columns' => 2,
            'title' => _M('Informações', $module),
            'textWidth' => "{$width}px",
        ), $options);

        parent::__construct($options);
    }

    public function generate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $bgrFields = array();
        $i=0;
        foreach ( $this->options['value'] as $label => $value )
        {
            // Adiciona - caso valor seja em branco
            $value = strlen($value) > 0 ? $value : '-';

            $lbl = new MText('lbl' . rand(), $label . ':');
            $lbl->setWidth( SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE') );

            $val = new MText('txt' . rand(), $value);
            $val->setBold(true);
            $val->addBoxStyle('max-width', $this->options['textWidth']);

            $position = $i % $this->options['columns'];
            $bgrFields[$position][] = new MHContainer('hct' . rand(), array($lbl, $val));

            $i++;
        }

        // Cria containers verticais de acordo com numero de colunas
        $fields = array();
        foreach ( $bgrFields as $flds )
        {
            $fields[] = $vct = new MVContainer('vct' . rand(), $flds);
        }

        return parent::generate($fields);
    }
}
?>