<?php
/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Extensao da classe MLookupContainer, que incluem padroes como tamanho e outros facilitadores.
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 15/04/2011
 **/
class SLookupContainer extends MLookupContainer
{
    private $options;
    private $_id;

    /**
     *
     * @param int $id Id do campo
     * @param mixed $value Valor do campo
     * @param array $options Opcoes do lookup. Opcoes disponiveis:
     * <br><b>label</b> (string) Label do campo
     * <br><b>related</b> (array) Campos relacionados (campos que devem ser autocompletados)
     * <br><b>module</b> (string) Modulo onde este lookup se localiza, no lookup.class (padrao: MIOLO::getCurrentModule())
     * <br><b>item</b> (string) Nome deste lookup, no lookup.class
     * <br><b>filter</b> (array) Filtros a serem passados para o lookup
     * <br><b>size</b> (int) Tamanho do campo id do lookup (padrao: FIELD_LOOKUPFIELD_SIZE)
     * <br><b>autocomplete</b> (boolean) Se deve autocompletar campos (padrao: TRUE)
     * <br><b>hint</b> (string) Hint do campo (opcional)
     * <br><b>value</b> (string) Valor do campo id (opcional)
     * <br><b>descriptionName</b> (string) Id do campo de descricao (padrao: $id + 'Description')
     * <br><b>descriptionReadOnly</b> (boolean) Se campo descricao deve estar read-only (padrao: TRUE)
     * <br><b>descriptionSize</b> (int) Tamanho do campo descricao do lookup (padrao: FIELD_DESCRIPTION_SIZE)
     * <br><b>descriptionHint</b> (string) Hint do campo de descrição (opcional)
     * <br><b>descriptionDisplay</b> (boolean) Indica se deve exibir o campo descricao do lookup
     */
    public function __construct($id, $value = null, $options = array())
    {
        // FIXME Passar array para metodos
//        $this->setLabel( $options['label'] );
//        $this->setModule( SAGU::NVL($options['module'], MIOLO::getCurrentModule()) );
//        
//        
        //Get defaults
        $options = array_merge(array(
            'label' => '',
            'module' => MIOLO::getCurrentModule(),
            'item' => null,
            'filter' => array($id => $id),
            'related' => null,
            'autocomplete' => true,
            'hint' => null,
            'size' => SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'),
            'descriptionSize' => SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'),
            'descriptionName' => $id . 'Description',
            'descriptionReadOnly' => true,
            'descriptionHint' => null,
            'descriptionDisplay' => true,
            'required' => false,
            'readOnly' => false,
        ), $options);

        if ( !$options['item'] )
        {
            throw new Exception( _M('É obrigatório que seja informado o parametro "item" na lookup', $module) );
        }

        if (is_array($options['related']))
        {
            $options['related'] = implode(',', $options['related']);
        }
        else if (!$options['related'])
        {
            $options['related'] = $options['descriptionName'];
        }

        //Caso nao tenha hint especifica para campo descricao, atribui o hint do campo codigo para este tambem
        if ( !$options['descriptionHint'] )
        {
            $options['descriptionHint'] = $options['hint'];
        }

        $this->options = $options;
        $this->_id = $id;

        parent::__construct(
                $id,
                $options['descriptionName'],
                $value,
                $options['label'],
                $options['related'],
                $options['module'],
                $options['item'],
                $options['filter'],
                $options['descriptionReadOnly'],
                $options['size'],
                $options['descriptionSize'],
                $options['autocomplete']);

        $this->getLookupField()->setJsHint( $options['hint'] );
        if ($options['readOnly'])
        {
            $this->setReadOnly(true);
        }
        
        if ( $options['required'] )
        {
            if ( !$options['subDetailRequired'] )
            {
                $this->getLookupField()->setIsRequired(true);
            }
        }

        $this->getDescriptionField()->setJsHint( $options['descriptionHint'] );
        $this->showRequiredLabel = $options['required'];

        //Esconde campo descricao
        if ( !$options['descriptionDisplay'] )
        {
            $this->getDescriptionField()->addBoxStyle('display', 'none');
        }
    }
}
?>
