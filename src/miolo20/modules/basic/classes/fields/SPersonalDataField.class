<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Campos que exibem informacoes de pessoa
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 12/05/2011
 */
class SPersonalDataField extends SFieldGroup
{
    /**
     * Contrutor
     *
     * @param array $options Opcoes
     * <br><b>buttonShowDocument</b> (boolean) Exibir botao Visualizar documentos (padrao: TRUE)
     * <br><b>buttonEditPerson</b> (boolean) Exibir botao Editar pessoa (padrao: TRUE)
     * <br><b>personId</b> (integer) Id da pessoa (obrigatório)
     * <br><br>Suporta os demais $options do SFieldGroup.
     */
    public function  __construct($options = array())
    {
        $module = SAGU::getFileModule(__FILE__);

        // Defaults
        $options = array_merge(array(
            'title' => _M('Dados pessoais', $module),
            'buttonShowDocument' => true,
            'buttonEditPerson' => true,
            'personId' => null,
        ), $options);

        if (!$options['personId'])
        {
            throw new Exception(_M('Deve ser passado um personId para classe @1', $module, __CLASS__));
        }

        parent::__construct($options);
    }

    public function generate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $busPhysicalPerson = new BusinessBasicBusPhysicalPerson();
        $busCity = new BusinessBasicBusCity();
        $busDocument = new BusinessBasicBusDocument();
        $busDocumentType = new BusinessBasicBusDocumentType();

        $personData = $busPhysicalPerson->getPhysicalPerson( $this->options['personId'] );

        $flds[] = new SPersonPhotoDisplayField(array('fileId' => $personData->photoId));
        
        $sep = new MSeparator();

        $locationLabel = new MTextLabel('locationLabel', _M('Logradouro:', $module));
        $locationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $locationLabel->setClass('m-caption');
        $location = new MTextField('location', $personData->location, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $location->setReadOnly(true);
        $locationContainer = new MHContainer('locationContainer', array( $locationLabel, $location ));        
        
        $numberLabel = new MTextLabel('numLabel', _M('Número:', $module));
        $numberLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $numberLabel->setClass('m-caption');
        $number = new MTextField('number', $personData->number, null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $number->setReadOnly(true);
        $numberContainer = new MHContainer('numberContainer', array( $numberLabel, $number ));
        
        $complementLabel = new MTextLabel('complementLabel', _M('Complemento:', $module));
        $complementLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $complementLabel->setClass('m-caption');
        $complement = new MTextField('complement', $personData->complement, null, 10);
        $complement->setReadOnly(true);
        $complementContainer = new MHContainer('complementContainer', array( $complementLabel, $complement ));
        
        $neighborhoodLabel = new MTextLabel('neighborhoodLabel', _M('Bairro:', $module));
        $neighborhoodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $neighborhoodLabel->setClass('m-caption');
        $neighborhood = new MTextField('neighborhood', $personData->neighborhood, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $neighborhood->setReadOnly(true);
        $neighborhoodContainer = new MHContainer('neighborhoodContainer', array( $neighborhoodLabel, $neighborhood ));

        $zipCodeLabel = new MTextLabel('zipCodeLabel', _M('CEP:', $module));
        $zipCodeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $zipCodeLabel->setClass('m-caption');
        $zipCode = new MTextField('zipCode', $personData->zipCode, null, 10);
        $zipCode->setReadOnly(true);
        $zipCodeContainer = new MHContainer('zipCodeContainer', array( $zipCodeLabel, $zipCode ));

        $cityData = strlen($personData->cityId) > 0 ? $busCity->getCity($personData->cityId) : $personData->cityId;
        $cityLabel = new MTextLabel('cityLabel', _M('Cidade:', $module));
        $cityLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $cityLabel->setClass('m-caption');
        $city = new MTextField('city', $cityData->name, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $city->setReadOnly(true);
        $cityContainer = new MHContainer('cityContainer', array( $cityLabel, $city ));

        $stateLabel = new MTextLabel('stateLabel', _M('Estado:', $module));
        $stateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $stateLabel->setClass('m-caption');
        $stateId = new MTextField('stateId', $personData->stateId, null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $stateId->setReadOnly(true);
        $stateIdContainer = new MHContainer('stateIdContainer', array( $stateLabel, $stateId ));

        $hctAddress1 = new MHContainer('hctAddress1', array($sep, $locationContainer, $sep, $numberContainer, $sep, $complementContainer));
        $hctAddress1->setShowLabel(true);

        $hctAddress2 = new MHContainer('hctAddress2', array($sep, $neighborhoodContainer, $sep, $zipCodeContainer));
        $hctAddress2->setShowLabel(true);

        $hctAddress3 = new MHContainer('hctAddress3', array($sep, $cityContainer, $sep, $stateIdContainer));
        $hctAddress3->setShowLabel(true);

        $vctAddress = new MVContainer('vctAddress', array($hctAddress1, $hctAddress2, $hctAddress3));
        $vctAddress->setShowLabel(true);

        $flds[] = $hctAddress4 = new MBaseGroup('hctAddress4', _M('Endereço', $module), array($vctAddress),'none',false);
        $hctAddress4->addAttribute('style', 'clear:both;');
        $generalDataAdressAndPhoto[] = $hctAddress4;

        $birthDateLabel = new MTextLabel('birthDateLabel', _M('Data:', $module));
        $birthDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $birthDateLabel->setClass('m-caption');
        $birthDate = new MTextField('birthDate', $personData->dateBirth, null, SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $birthDate->setReadOnly(true);
        $birthDateContainer = new MHContainer('birthDateContainer', array( $birthDateLabel, $birthDate ));

        $cityData = strlen($personData->cityIdBirth) > 0 ? $busCity->getCity($personData->cityIdBirth) : $personData->cityIdBirth;
        $birthCityNameLabel = new MTextLabel('birthCityNameLabel', _M('Cidade:', $module));
        $birthCityNameLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $birthCityNameLabel->setClass('m-caption');
        $birthCityName = new MTextField('birthCityName', $cityData->name, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $birthCityName->setReadOnly(true);
        $birthCityNameContainer = new MHContainer('birthCityNameContainer', array( $birthCityNameLabel, $birthCityName ));        

        $hctBirth = new MHContainer('hctBirth', array( $sep, $birthDateContainer, $sep, $birthCityNameContainer ));
        $hctBirth->setShowLabel(true);

        $generalData[] = new MVContainer('mvcFields', array($hctBirth) );
        $flds[] = new MBaseGroup('mhcGeneralData',_M('Nascimento', $module), $generalData,'none',false);

        $residentialPhoneLabel = new MTextLabel('residentialPhoneLabel', _M('Residencial:', $module));
        $residentialPhoneLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $residentialPhoneLabel->setClass('m-caption');
        $residentialPhone = new MTextField('residentialPhone', $personData->residentialPhone, null, 20);
        $residentialPhone->setReadOnly(true);
        $residentialPhoneContainer = new MHContainer('residentialPhoneContainer', array( $residentialPhoneLabel, $residentialPhone ));

        $cellPhoneLabel = new MTextLabel('cellPhoneLabel', _M('Celular:', $module));
        $cellPhoneLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $cellPhoneLabel->setClass('m-caption');
        $cellPhone = new MTextField('cellPhone', $personData->cellPhone, null, 20);
        $cellPhone->setReadOnly(true);
        $cellPhoneContainer = new MHContainer('cellPhoneContainer', array( $cellPhoneLabel, $cellPhone ));

        $workPhoneLabel = new MTextLabel('workPhoneLabel', _M('Trabalho:', $module));
        $workPhoneLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $workPhoneLabel->setClass('m-caption');
        $workPhone = new MTextField('workPhone', $personData->workPhone, null, 20);
        $workPhone->setReadOnly(true);
        $workPhoneContainer = new MHContainer('workPhoneContainer', array( $workPhoneLabel, $workPhone ));

        $messagePhoneLabel = new MTextLabel('messagePhoneLabel', _M('Mensagem:', $module));
        $messagePhoneLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $messagePhoneLabel->setClass('m-caption');
        $messagePhone = new MTextField('messagePhone', $personData->messagePhone, null, 20);
        $messagePhone->setReadOnly(true);
        $messagePhoneContainer = new MHContainer('messagePhoneContainer', array( $messagePhoneLabel, $messagePhone ));

        $hctPhones = new MHContainer('hctPhones', array( $sep, $residentialPhoneContainer, $sep, $cellPhoneContainer, $sep, $workPhoneContainer, $sep, $messagePhoneContainer ));
        $hctPhones->setShowLabel(true);

        $flds[] = new MBaseGroup('basePhone', _M('Telefones',$module), array($hctPhones),'none',false);

        $emailLabel = new MTextLabel('emailLabel', _M('Principal:', $module));
        $emailLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $emailLabel->setClass('m-caption');
        $email = new MTextField('email', $personData->email, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $email->setReadOnly(true);
        $emailContainer = new MHContainer('emailContainer', array( $emailLabel, $email ));

        $emailAlternativeLabel = new MTextLabel('emailAlternativeLabel', _M('Alternativo:', $module));
        $emailAlternativeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $emailAlternativeLabel->setClass('m-caption');
        $emailAlternative = new MTextField('emailAlternative', $personData->emailAlternative, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $emailAlternative->setReadOnly(true);
        $emailAlternativeContainer = new MHContainer('emailAlternativeContainer', array( $emailAlternativeLabel, $emailAlternative ));

        $hctEmail = new MBaseGroup('hctEmail', _M('E-mail',$module), array( $sep, $emailContainer, $sep, $emailAlternativeContainer ),'none',false);
        $flds[] = $hctEmail;

        $rgData   = $busDocumentType->getDocumentType(SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_RG'));
        $rgPerson = $busDocument->getDocument($personData->personId, SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_RG'));
        $rgLabel  = new MTextLabel('rgLabel', ucfirst(strtolower($rgData->name)) . ':');
        $rgLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $rgLabel->setClass('m-caption');
        $rg       = new MTextField('rg', $rgPerson->content, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $rg->setReadOnly(true);
        $rgContainer = new MHContainer('rgContainer', array( $rgLabel, $rg ));

        $cpfData   = $busDocumentType->getDocumentType(SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF'));
        $cpfPerson = $busDocument->getDocument($personData->personId, SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF'));
        $cpfLabel  = new MTextLabel('cpfLabel', $cpfData->name . ':');
        $cpfLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $cpfLabel->setClass('m-caption');
        $cpf = new MTextField('cpf', $cpfPerson->content, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $cpf->setReadOnly(true);
        $cpfContainer = new MHContainer('cpfContainer', array( $cpfLabel, $cpf ));

        if ( $this->options['buttonShowDocument'] )
        {
            $documentsLink = new MButton('documentsLink', _M('Visualizar documentos', $module), $MIOLO->getActionURL('basic', 'main:person:document', null, array('personIdS'=>$personData->personId)));
            $documentsLink->setTarget('_blank');

            $flds[] = new MBaseGroup('hctDocuments', _M('Documentos',$module), array( $sep, $rgContainer, $sep, $cpfContainer, $sep, $documentsLink),'none',false);
        }
        
        if ( SAGU::getParameter('BASIC', 'MODULE_GNUTECA_INSTALLED') == 'YES' )
        {
            $busGnuteca = $MIOLO->getBusiness('gnuteca', 'BusGnutecaToSagu2');
            $rows = $busGnuteca->obterRestricoes( $this->options['personId']);

            $titles = array(_M('Tipo', $module), _M('Quantidade', $module));
            $table = new MTableRaw(null, $rows, $titles);
            $flds[] = new MBaseGroup('hctPendencias', _M('Pendências do Gnuteca', $module), array($table), 'none', false);
            
        }

        if ( $this->options['buttonEditPerson'] )
        {
            $editPerson = new MButton('editPersonData', _M('Editar pessoa', $module), $MIOLO->getActionURL('basic', 'main:person:person:physicalPerson', null, array('function'=>'update', 'personId'=>$personData->personId)));
            $editPerson->setTarget('_blank');
            $flds[] = $editPerson;
        }
        return parent::generate($flds);
    }
}
?>