<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Classe que renderiza periodos entre um periodo inicial e final.
 * Ex.: Data ininial + Hora inicial / Data final + Hora final
 *
 * Exemplo de uso:
 *      $fields[] = new SBeginEndPeriod($this, array(
 *          'type' => 'timestamp',
 *          'begin' => array('type' => 'time', 'label' => 'Hora inicial'),
 *          'end' => array('dateId' => 'dateEnd', 'timeId' => 'timeEnd', 'label' => 'Horario final'),
 *      ));
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 13/05/2011
 */
class SBeginEndPeriod extends SFieldGroup
{
    /**
     *
     * @param array $options Opcoes
     * <br><b>begin</b> (array) Opcoes do campo periodo inicial
     * <br><b>end</b> (array) Opcoes do campo periodo final
     * <br><b>type</b> (string) Tipo de periodo ( date, timestamp, time ) - Os parametros begin e end podem sobrescrever este parametro
     * <br><b>disposition</b> (string) Disposicao dos campos (opcoes validas: horizontal ou vertical)
     * <br><b>enable</b> (string) Ativar ou desativar exibicao de campo
     * <br><b>required</b> (boolean) Adiciona o asterisco (*) de requerido
     * <br><b>todayButton</b> (boolean) Cria o botão "Hoje" após os componentes
     */
    public function __construct($options = array())
    {
        $module = SAGU::getFileModule(__FILE__);
        $MIOLO = MIOLO::getInstance();

        // Defaults
        $options = array_merge(array(
            'title' => _M('Período', $module),
            'label' => null,
            'begin' => array(),
            'end' => array(),
            'type' => 'date',
            'disposition' => 'vertical',
            'required' => false,
            'readOnly'=> false,
            'todayButton' => false
        ), $options);

        // Periodo inicial
        $options['begin'] = array_merge(array(
            'enable' => true,
            'dateId' => 'beginDate',
            'timeId' => 'beginTime',
            'dateValue' => null,
            'timeValue' => null,
            'dateHint' => null,
            'timeHint' => null,
            'timeInputHint' => null,
            'classCaption' => true,
            'type' => $options['type'],
            'label' => _M('Início', $module),
            'required' => $options['required'],
            'readOnly'=> $options['readOnly']
        ), $options['begin']);

        // Periodo final
        $options['end'] = array_merge(array(
            'enable' => true,
            'dateId' => 'endDate',
            'timeId' => 'endTime',
            'dateValue' => null,
            'timeValue' => null,
            'dateHint' => null,
            'timeHint' => null,
            'timeInputHint' => null,
            'classCaption' => true,
            'type' => $options['type'],
            'label' => _M('Fim', $module),
            'required' => $options['required'],
            'readOnly'=> $options['readOnly']
        ), $options['end']);

        parent::__construct($options);

        if ($options['label'])
        {
            $fields[] = $lbl = new MText('lbl' . rand(), $options['label'] . ':');
            $lbl->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        }

        foreach ( array('begin', 'end') as $pType )
        {
            //Obtem valores atravez do $this->data
            if ( !$options[$pType]['dateValue'] )
            {
                $options[$pType]['dateValue'] = $this->options['data']->{$options[$pType]['dateId']};
            }
            if ( !$options[$pType]['timeValue'] )
            {
                $options[$pType]['timeValue'] = $this->options['data']->{$options[$pType]['timeId']};
            }

            if ( $options[$pType]['enable'] )
            {
                $flds = array();

                // Cria o label
                $flds[] = $lbl = new MText('lbl' . rand(), $options[$pType]['label'] . ':');
                if ( $options['disposition'] == 'vertical' )
                {
                    $lbl->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                }
                if ( $options[$pType]['required'] )
                {
                    if ( $options[$pType]['classCaption'] )
                    {
                        $lbl->setClass('m-caption');
                    }
                    
                    $lbl->setClass('m-caption-required');
                }

                // Cria campo de data
                if ( in_array($options[$pType]['type'], array('date', 'timestamp')) )
                {
                    $flds[] = $date = $this->objects[$options[$pType]['dateId']] = new SCalendarField($options[$pType]['dateId'], $options[$pType]['dateValue'], $options[$pType]['label'], SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
                    $date->setReadOnly($options[$pType]['readOnly']);
                    
                    if ( $options['required'] )
                    {
                        $date->setIsRequired(true);
                        $date->label = $options['title'] . ' (' . $options[$pType]['label'] . ')';
                    }
                    
                    if ( strlen($options[$pType]['dateHint']) > 0 )
                    {
                        $date->setJsHint($options[$pType]['dateHint']);
                    }
                }

                // Cria campo de hora
                if ( in_array($options[$pType]['type'], array('time', 'timestamp')) )
                {
                    $flds[] = $time = $this->objects[$options[$pType]['timeId']] = new MTextField($options[$pType]['timeId'], $options[$pType]['timeValue'], null, SAGU::getParameter('BASIC', 'FIELD_TIME_SIZE'), $options[$pType]['timeInputHint']);
                    $time->setReadOnly($options[$pType]['readOnly']);
                    if ( strlen($options[$pType]['timeHint']) > 0 )
                    {
                        $time->setJsHint($options[$pType]['timeHint']);
                    }
                }

                $fields[] = new MHContainer('hct' . rand(), $flds);
            }
        }
        
        if ( $options['todayButton'] )
        {
            $jsAction = "javascript:fillToday(" .
                        "'" . $options['begin']['dateId'] . "', " .
                        "'" . $options['begin']['timeId'] . "', " .
                        "'" . $options['end']['dateId'] . "', " .
                        "'" . $options['end']['timeId'] . "'," .
                        "'" . SAGU::getDateNow() . "'" .
                        ')';
            
            $image = $MIOLO->getActionURL('basic', 'html:images:fill_today-16x16.png');
            $imageLink = new MImageLink('btnToday' . rand(), '', $jsAction, $image);
            $imageLink->addAttribute('title', _M('Preencher com data atual', $module));
            $fields[] = new MHContainer('cnt' . rand(), array($imageLink));
        }

        $fields = array(new MContainer('cnt' . rand(), $fields, $this->options['disposition']));

        $this->fields = $fields;
        $this->setControls($fields);
    }

    /**
     * Obtem o objeto MControl do id passado.
     * O id deve ser identico ao dateId / timeId, tanto do begin e end
     *
     * @param string $id
     * @return object MControl
     */
    public function getField($id)
    {
        return $this->objects[$id];
    }
    
    
    public function setReadOnly($status)
    {
        foreach ( (array) $this->objects as $obj )
        {
            $obj->setReadOnly($status);
        }
    }
}

class SCalendarField extends MCalendarField
{
    public function generate()
    {
        $this->label = '';
        
        return parent::generate();
    }
}
?>