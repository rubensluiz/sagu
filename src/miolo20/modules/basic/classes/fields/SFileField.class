<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Implementa campo de envio de arquivo único ou múltiplos.
 * 
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 20/12/2010
 *
 *
 **/
class SFileField extends MContainer
{
    public $_hint;
    public $required;
    public $baseGroupTitle;
    public $fieldLabel;
    public $fileId;
    public $multiple;
    public $divDelName;

    public $formInstance;
    public $data;
    public $fields;
    public $fieldObject;
    public $fileField;

    /**
     * @param $id int (Required)
     * @param (Mixed) $formInstance MForm or MSubDetail (Required) Instance of form/subdetail
     *
     * @param array $options
     * <b>hint</b> Hint do campo<br>
     * <b>required</b> TRUE se for obrigatório, FALSE se não for<br>
     * <b>baseGroupTitle</b> Título do baseGroup. Padrão: "Arquivos"<br>
     * <b>fieldLabel</b> Label do(s) campo(s). Padrão: "Arquivo"<br>
     * <b>multiple</b> Permitir envios múltiplos de arquivos. Padrão: false<br>
     * <b>fileId</b> Id do arquivo na BusFile/basFile. Caso seja informado este id, será gerado um link para remoção deste arquivo na tela.<br>
     * <b>divDelName</b> Nome da div para preencher os fileIds removidos
     */
    public function __construct($id, $formInstance, $options = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        parent::__construct($id);

        $this->id = $id;
        $this->formInstance = $formInstance;
        
        $this->_hint = isset($options['hint']) ? $options['hint'] : _M('Informe o local do arquivo', $module);
        $this->required = isset($options['required']) ? $options['required'] : false;
        $this->baseGroupTitle = isset($options['baseGroupTitle']) ? $options['baseGroupTitle'] : _M('Arquivos', $module);
        $this->fieldLabel = isset($options['fieldLabel']) ? $options['fieldLabel'] : _M('Arquivo', $module);
        $this->multiple = isset($options['multiple']) ? $options['multiple'] : false;
        $this->fileId = $options['fileId'];
        $this->divDelName = isset($options['divDelName']) ? $options['divDelName'] : null;

        $this->createFields();
        $this->addValidators();
    }


    public function getValidators()
    {
//        return (array) $validators;
    }


    private function addValidators()
    {
        $module = MIOLO::getCurrentModule();
    }


    private function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        $busFile = new BusinessBasicBusFile();

        $varName = $this->id . 'Id';
        $varNameDel = $this->id . 'Del';

        if ( $this->formInstance instanceof SStepByStepForm )
        {
            $data = $this->formInstance->getStepData();
        }
        else
        {
            $data = $this->formInstance->getData();
        }

        $fileId = $this->formInstance->getFormValue( $varName, $data->$varName );
        if ( !$fileId )
        {
            $fileId = $this->fileId;
        }

        $fileDelete = $this->formInstance->getFormValue($varNameDel, $data->$varNameDel);

        $this->fields[] = new MHiddenField($varName, $fileId);
        $this->fields[] = new MHiddenField($varNameDel, $fileDelete);

        //Campo de upload de arquivo
        //Id do campo, caso permita multiplo envio, define campo como array
        $fieldId = $this->multiple ? "{$this->id}_0" : $this->id;
        $file = $this->fileField = new MFileField($fieldId, $value, null, 20);
        $file->setJsHint($this->_hint);
        if ( $this->multiple )
        {
            $file->addAttribute('onchange', "fileChange(this)");
        }
        //

        if ( strlen($fileId) > 0 )
        {
            $fileObj = $busFile->getFile($fileId);
                
            if ( strlen($fileDelete) <= 0 ) //Exibe label e acao de remover arquivo
            {
                $url = $busFile->getUrl($fileId, array('permission' => true));
                $downloadLink = new MLink($fileObj->fileId.'lnk', null, $url, $fileObj->uploadFileName, '_new');
                $divDelParameter = strlen($this->divDelName) > 0 ? ", '{$this->divDelName}'" : null;
                $removeFile = new MImageLink($this->id . 'imgdel', null, "javascript:markFileAsDelete('{$this->id}', '{$fileObj->fileId}' {$divDelParameter})", $MIOLO->getUI()->getImageTheme(SAGU::getCurrentTheme(), 'delete-20x20.png'));
                $divRmv = new MDiv($this->id . 'Rmv', array($downloadLink, $removeFile));
                $divDel = new MDiv($this->id . 'Del', null, null, array('style' => 'display:none'));
                $divFile = new MDiv($this->id . 'File', array($file), null, array('style' => 'display:none'));
                $hiddenValue = new SHiddenField($this->id . 'Old', $fileId);
                $file = new MDiv("{$this->id}Rmvlabel", array($divFile, $divDel, $divRmv, $hiddenValue));
            }
        }

        if ( $this->multiple )
        {
            $this->fields[] = $file;
        }
        else
        {
            $hctFields = array();
            
            // label do campo
            if ( $this->fieldLabel !== false )
            {
                $fileLabel = new MText('fileLabel', $this->fieldLabel . ':');
                $fileLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
                $hctFields[] = $fileLabel;
            }
            
            $hctFields[] = $file;
            
            $this->fields[] = new MHContainer('fileCnt', $hctFields);
        }

        $this->setControls($this->fields);
    }

    
   /**
    * Generate the component
    */
   public function GenerateInner()
   {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        //Quando for envio multiplo, encobre os campos em um MBaseGroup
        if ( $this->multiple )
        {
            $bgrLabel = new MText("{$this->id}label", $this->fieldLabel . ':');
            $bgrLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );

            $bgr = new MBaseGroup("bgr{$this->id}", $this->baseGroupTitle, $this->fields, 'vertical', 'css');
            $bgr->setWidth(400);

            $this->fields = array( new MHContainer("{$this->id}Cnt", array($bgrLabel, $bgr)) );
        }

        $this->inner = new MDiv($this->name . rand(), $this->fields);
    }


    public function saveUploadedFile()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $busFile = new BusinessBasicBusFile();

        $tmpName = SAGU::getTmpFile('sfile' . rand());
        $ok = $this->fileField->copyFile($tmpName);

        $fileId = null;
        if ( $ok )
        {
            $fdata = new stdClass();
            $fdata->uploadFileName = $this->fileField->getFileName();
            $fdata->contentType = $this->fileField->getFileType();

            $fileId = $this->fileId = $busFile->insertFile($fdata, $tmpName);
        }

        return $fileId;
    }
}
?>