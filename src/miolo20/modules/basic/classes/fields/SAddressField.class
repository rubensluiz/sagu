<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * This class implements functions to work with lookup.
 * 
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 03/01/2010
 *
 *
 **/
class SAddressField extends MContainer
{
    public $isRequired;
    public $useBaseGroup;
    public $baseGroupTitle;
    public $formInstance;
    public $fieldId;
    public $data;
    public $fields;

    public $countryId;
    public $countryIdLabel;
    public $stateId;
    public $statsIdLabel;
    public $cityId;
    public $cityIdLabel;

    
    /**
     * @param $id int (Required)
     * @param (Mixed) $formInstance MForm or MSubDetail (Required) Instance of form/subdetail
     *
     * @param array $options
     * <b>isRequired</b> Is fields is required<br>
     * <b>useBaseGroup</b> Encapsulate fields with baseGroup<br>
     * <b>baseGroupTitle</b> Title of the base group, if used. Default: "Endereço"<br>
     * <b>fieldId</b> Associative array with id name of fields (see defaults on construct)<br>
     */
    public function __construct($id, $formInstance, $options = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        parent::__construct($id);

        $this->formInstance = $formInstance;
        $this->isRequired = isset($options['isRequired']) ? $options['isRequired'] : false;
        $this->useBaseGroup = isset($options['useBaseGroup']) ? $options['useBaseGroup'] : true;
        $this->baseGroupTitle = isset($options['baseGroupTitle']) ? $options['baseGroupTitle'] : _M('Endereço', $module);

        //fieldname => defaultId
        $options['data'] = (array) $options['data'];
        $_fields = array(
            'country' => 'countryId',
            'state' => 'stateId',
            'city' => 'cityId',
            'locationTypeId' => 'locationTypeId',
            'location' => 'location',
            'zipCode' => 'zipCode',
            'number' => 'number',
            'complement' => 'complement',
        );
        foreach ($_fields as $key => $val)
        {
            $this->fieldId[$key] = isset($options['fieldId'][$key]) ? $options['fieldId'][$key] : $val;
            if ($formInstance instanceof MForm)
            {
                $fldId = $this->fieldId[$key];
                $this->data[$key] = $formInstance->getFormValue($this->fieldId[$key], $options['data'][$fldId]);
            }
        }

        $this->createFields();
        $this->addValidators();
    }


    public function getValidators()
    {
        $validators[] = new MRequiredValidator('locationTypeId', _M('Tipo de logradouro', $module));
        $validators[] = new MRequiredValidator('location', _M('Logradouro', $module));
        $validators[] = new MRequiredValidator('number', _M('Número', $module));
        $validators[] = new MRegExpValidator('zipCode', _M('CEP',$module), '^[0-9]{5,8}$', 'required');
        $validators[] = new MIntegerValidator($this->fieldId['city'], _M('Cidade', $module), 'required');
        $validators[] = new MRequiredValidator($this->fieldId['country'], _M('País', $module));
        $validators[] = new MRequiredValidator($this->fieldId['state'], _M('Estado', $module));
//        $validators[] = new MRequiredValidator('neighborhood', _M('Bairro', $module));
        return $validators;
    }


    private function addValidators()
    {
        if ($this->isRequired)
        {
            $validators = $this->getValidators();
            if ($this->formInstance instanceof MForm)
            {
                foreach ($validators as $validator)
                {
                    $this->formInstance->addValidator($validator);
                }
            }
            else if ($this->formInstance instanceof MSubDetail)
            {
                $this->formInstance->setValidators( array_merge( (array)$this->formInstance->getValidators(), $validators ) );
            }
        }
    }


    private function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        //TODO Deve ser feito condicoes, quando nao for pedido para exibir campos como Estado, remove-lo do autocomplete e criar campo MHiddenField para o mesmo

        // Field location type id
        $busLocationType = new BusinessBasicBusLocationType();
        $locationTypeIdLabel = new MText('locationTypeIdLabel', _M('Tipo de logradouro',$module) . ':');
        $locationTypeIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        if ($this->isRequired)
        {
            $locationTypeIdLabel->setClass('m-caption m-caption-required');
        }
        $locationTypeId = new MSelection('locationTypeId', $this->data['locationTypeId'], '', $busLocationType->listLocationType(), false, '');
        $locationTypeId->setJsHint(_M('Informe o tipo de logradouro da pessoa', $module));
        $this->fields[] = new MHContainer('locationTypeIdCnt', array($locationTypeIdLabel, $locationTypeId));

        //Logradouro
        $locationLabel = new MText('locationLabel', _M('Logradouro',$module) . ':');
        $locationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        if ($this->isRequired)
        {
            $locationLabel->setClass('m-caption m-caption-required');
        }
        $location = new MTextField('location', $this->data['location'], NULL, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $location->setJsHint(_M('Informe o logradouro da pessoa',$module));
        $hctLocation = new MHContainer('hctLocation', array($locationLabel, $location));
        $hctLocation->setShowLabel(true);
        $this->fields[] = $hctLocation;

        // Field number
        $numberLabel = new MText('numberLabel', _M('Número',$module) . ':');
        $numberLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        if ($this->isRequired)
        {
            $numberLabel->setClass('m-caption m-caption-required');
        }
        $number = new MTextField('number', $this->data['number'], NULL, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $number->setJsHint(_M('Informe o número do logradouro',$module));
        $hctNumber = new MHContainer('hctNumber', array($numberLabel, $number));
        $hctNumber->setShowLabel(true);
        $this->fields[] = $hctNumber;

        // Field complement
        $complementLabel = new MText('complementLabel', _M('Complemento',$module) . ':');
        $complementLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $complementLabel->setJsHint(_M('Informe o complemento',$module));
        $complement = new MTextField('complement', $this->data['complement'], null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $complement->setJsHint(_M('Informe o complemento',$module));
        $this->fields[] = new MHContainer('hctComplement', array($complementLabel, $complement));

        // Field zip code
//        $zipCodeLabel = new MText('zipCodeLabel', _M('CEP',$module) . ':');
//        $zipCodeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
//        if ($this->isRequired)
//        {
//            $zipCodeLabel->setClass('m-caption m-caption-required');
//        }
//        $zipCode = new MLookupTextField('zipCode', null, NULL, SAGU::getParameter('BASIC', 'FIELD_ZIPCODE_SIZE'), null, null, 'limbo, limbo, countryName, limbo, stateName, cityId, cityName, limbo, limbo', 'basic', 'LocationZipCode', null, null, false /*!$this->page->isPostBack()*/ );
//        $zipCode->setJsHint(_M('Informe o CEP da pessoa',$module));
//        $hctZipCode = new MHContainer('hctZipCode', array($zipCodeLabel, $zipCode));
//        $hctZipCode->setShowLabel(true);
//        if ($this->show['zipCode'])
//        {
//            $this->fields[] = $hctZipCode;
//        }
//
        $zipCodeLabel = new MText('zipCodeLabel', _M('CEP',$module) . ':');
        $zipCodeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        if ($this->isRequired)
        {
            $zipCodeLabel->setClass('m-caption m-caption-required');
        }
        $zipCode = new MTextField('zipCode', $this->data['zipCode'], null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE'));
        $zipCode->setJsHint(_M('Informe o CEP',$module));
        $this->fields[] = new MHContainer('zipCodeCnt', array($zipCodeLabel, $zipCode));

        //City
        $cityLabel = new MText('cityLabel', _M('Cidade',$module) . ':');
        $cityLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        if ($this->isRequired)
        {
            $cityLabel->setClass('m-caption m-caption-required');
        }
        $cityId = $this->cityId = new MLookupTextField('cityId', $this->data['city'], null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, "cityName, {$this->fieldId['state']}, stateIdName, {$this->fieldId['country']}, countryIdName, zipCode", 'basic', 'City', null, null, true);
        $cityId->setJsHint(_M('Informe o código da cidade da pessoa',$module));
        $cityName = new MTextField('cityName', null, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $cityName->setReadOnly(true);
        $cityName->setJsHint(_M('Informe o nome da cidade',$module));
        $this->fields[] = new MHContainer('hctCity', array($cityLabel, $cityId, $cityName));

        //State
        $stateIdLabel = new MText('stateLabel', _M('Estado',$module) . ':');
        $stateIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        if ($this->isRequired)
        {
            $stateIdLabel->setClass('m-caption m-caption-required');
        }
        $stateId = $this->stateId = new MLookupTextField('stateId', $this->data['state'], null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, "stateIdName", 'basic', 'state', null, null, true);
        $stateId->setReadOnly(true);
        $stateId->setJsHint(_M('Informe o código do estado', $module));
        $stateIdName = new MTextField('stateIdName', null, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $stateIdName->setReadOnly(true);
        $stateIdName->setJsHint(_M('Nome do estado',$module));
        $this->fields[] = new MHContainer('stateIdCnt', array($stateIdLabel, $stateId, $stateIdName));

        //Country
        $countryIdLabel = new MText('countryLabel', _M('País',$module) . ':');
        $countryIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        if ($this->isRequired)
        {
            $countryIdLabel->setClass('m-caption m-caption-required');
        }
        $countryId = $this->countryId = new MLookupTextField('countryId', $this->data['country'], null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, "countryIdName", 'basic', 'country', null, null, true);
        $countryId->setReadOnly(true);
        $countryId->setJsHint(_M('Informe o código do país', $module));
        $countryIdName = new MTextField('countryIdName', null, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $countryIdName->setReadOnly(true);
        $countryIdName->setJsHint(_M('Nome do país',$module));
        $this->fields[] = new MHContainer('countryIdCnt', array($countryIdLabel, $countryId, $countryIdName));

        // Field neighborhood
//        $neighborhoodLabel = new MText('neighborhoodLabel', _M('Bairro',$module) . ':');
//        $neighborhoodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
//        $neighborhoodLabel->setClass('m-caption m-caption-required');
//        $neighborhood = new MTextField('neighborhood', null, NULL, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
//        $neighborhood->setJsHint(_M('Informe o bairro da pessoa',$module));
//        $hctNeighborhood = new MHContainer('hctNeighborhood', array($neighborhoodLabel, $neighborhood));
//        $hctNeighborhood->setShowLabel(true);
//        $this->fields[] = $hctNeighborhood;

        $this->setControls($this->fields);
    }

    
   /**
    * Generate the component
    */
   public function GenerateInner()
   {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        //Encapsulate fields with baseGroup
        if ($this->useBaseGroup)
        {
            $bgr = new MBaseGroup('bgrCourse', $this->baseGroupTitle, $this->fields, 'vertical');
            $bgr->showLabel = true;
            $this->fields = array($bgr);
        }

        $this->inner = new MDiv($this->name, $this->fields);
    }
}
?>
