<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Checkboxes multiplos.
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 12/05/2011
 *
 **/

class sMultiCheckbox extends MHContainer
{
    /**
     * @var array
     */
    private $options = array();
    
    /**
     * @var string
     */
    private $title;
    
    private $checkboxes = array();
    
    private $data = array();
    
    private $myId;
    
    /**
     *
     * @param array $options Qualquer atributo valido desta classe.
     */
    public function   __construct($id, $title, $options = array())
    {
        $this->myId = $id;
        $this->setTitle($title);
        $this->setOptions($options);

        parent::__construct('hct' . rand());
    }
    
    public function getOptions() {
        return $this->options;
    }

    public function setOptions($options) {
        $this->options = $options;
        
        $checkeds = $this->getCheckeds();
        
        foreach ( $this->getOptions() as $key => $label )
        {
            $chave = $this->myId . '_' . $key;
            
            $this->checkboxes[$key] = new MCheckBox($chave, DB_TRUE, null, isset($checkeds[$key]));
        }
    }
    
    public function getTitle() {
        return $this->title;
    }

    public function setTitle($title) {
        $this->title = $title;
    }
    
    public function getForm() {
        return $this->form;
    }

    public function setForm($form) {
        $this->form = $form;
    }

    public function getCheckboxes() {
        return $this->checkboxes;
    }

    public function setCheckboxes($checkboxes) {
        $this->checkboxes = $checkboxes;
    }

    public function getData() {
        if ( !$this->data )
        {
            $this->data = (object) $_REQUEST;
        }
        
        return $this->data;
    }

    public function setData($data) {
        $this->data = $data;
    }
    
    public function setCheckeds($list = array())
    {
        $data = $this->getData();
        
        foreach ( $list as $key )
        {
            $chave = $this->myId . '_' . $key;
            
            $data->$chave = DB_TRUE;
            
            if ( isset($this->checkboxes[$key]) )
            {
                $this->checkboxes[$key]->setChecked(true);
            }
        }

        $this->setData($data);
    }
    
    public function setChecked($key)
    {
        $this->setCheckeds(array($key));
    }

    /**
     * @return array
     */
    public function getCheckeds()
    {
        $data = $this->getData();
        $checkeds = array();
        
        foreach ( $this->getOptions() as $key => $label )
        {
            $chave = $this->myId . '_' . $key;

            if ( $data->$chave == DB_TRUE )
            {
                $checkeds[] = $key;
            }
        }
        
        return $checkeds;
    }
    
    /**
     * @return boolean
     */
    public function hasChecked($key)
    {
        $checkeds = $this->getCheckeds();
        
        return in_array($key, $checkeds);
    }
        
    public function generate()
    {
        $hcts = array();
        
        foreach ( $this->getOptions() as $key => $label )
        {
            $controls = array();
            $controls[] = $this->checkboxes[$key];
            $controls[] = new MLabel($label);
            
            $hcts[] = new MHContainer('hct' . $key, $controls);
        }
        
        $vct = new MVContainer('vct'.$this->id, $hcts);
        $bsg = new MBaseGroup('bsg'.$this->id, $this->getTitle(), array($vct));
        
        return $bsg->generate();
    }
}
?>
