<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Classe de criacao de controls (campos) genericos.
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 30/09/2013
 *
 **/

class sGenericFields
{
    /**
     *
     * @var SForm
     */
    private $form;
    
    public function getForm() {
        return $this->form;
    }

    public function setForm($formInstance) {
        $this->form = $formInstance;
    }
    
    public function minAndMax($fieldMin, $fieldMax, $label)
    {
        $lbl = new MTextLabel(rand(), $label . ':');
        $lbl->setWidth('350');
        
        $lblMin = new MLabel(_M('mínimo').':');
        $minimo = new MIntegerField($fieldMin, null, $label, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));

        $lblMax = new MLabel(_M('máximo').':');
        $maximo = new MIntegerField($fieldMax, null, _M('Máximo'), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));

        $controls[] = $hct = new MHContainer('hct' . rand(), array($lbl, $lblMin, $minimo, $lblMax, $maximo), MControl::FORM_MODE_SHOW_SIDE);
        
        $hct = new MHContainer('hct' . rand(), $controls);
        
        return $hct;
    }
    
    public function minAndMaxDate($fieldMin, $fieldMax, $label, $labelWidth = null, $required = false)
    {
        $lbl = new MLabel($label . ':');
        $lbl->setClass('m-label label');
        
        if ( $required )
        {
            $lbl->setClass('m-caption-required');
        }
        
        if ( $labelWidth )
        {
            $lbl->setWidth($labelWidth);
        }

        $lblMin = new MLabel(_M('de').':');
        $minimo = new MCalendarField($fieldMin, null, null, SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        
        $lblMax = new MLabel(_M('até').':');
        $maximo = new MCalendarField($fieldMax, null, null, SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));

        if( $required )
        {
            $minimo->setIsRequired(true);
            $minimo->label = $label.' de';
            $maximo->setIsRequired(true);
            $maximo->label = $label.' até';
        }
        
        $controls[] = $hct = new MHContainer('hct' . rand(), array($lbl, $lblMin, $minimo, $lblMax, $maximo), MControl::FORM_MODE_SHOW_SIDE);
        
        $hct = new MHContainer('hct' . rand(), $controls);
        $hct->showLabel = false;
        $hct->showChildLabel = false;
        
        return $hct;
    }
    
    public function quantidadeComUnidade($fieldQuantidade, $fieldUnidade, $opcoes = array(), $label)
    {
        $quantidade = new MTextField($fieldQuantidade, null, $label, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $quantidade->setIsRequired(true);
        
        $unidade = new MSelection($fieldUnidade, null, null, $opcoes);
        $unidade->setIsRequired(true);
        
        $hct = new MHContainer('hct' . rand(), array($quantidade, $unidade), MControl::FORM_MODE_SHOW_SIDE);
        
        return $hct;
    }
    
    /**
     * @return array
     */
    public function camposBooleanos($opcoes = array())
    {
        $fields = array();
        
        foreach ( $opcoes as $key => $label )
        {
            $fields[] = $this->radioButtonGroup($key, DB_TRUE, $label, SAGU::listYesNo());
        }
        
        return $fields;
    }
    
    /**
     * @return MRadioButtonGroup 
     */
    public function radioButtonGroup($id, $value, $label, $options = array(), $align = null, $hint = null)
    {
        if ( !$align )
        {
            $align = 'horizontal';
        }
        
        // Corrige comportamento errado de estar setando valor 'f' quando nao passa default.
        if ( strlen($value) == 0 )
        {
            $value = ' ';
        }
        
        $radio = new MRadioButtonGroup($id, $label, $options, $value, null, $align);
        if ( strlen($hint) > 0 )
        {
            $radio->hint = $hint;
        }
        
        return $radio;
    }
    
    /**
     * @return MHContainer 
     */
    public function textoHtml($id, $label, $hint = null, $value = null)
    {
        $editLabel = new MText($id . 'lbl', $label . ':');
        $editLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        
        $editor = new MEditor($id, $value);        
        $editor->setWidth(SAGU::getParameter('BASIC', 'FIELD_EDITOR_SIZE'));
        
        if ( strlen($hint) > 0 )
        {
            $editor->setJsHint($hint);
        }
        
        $hct = new MHContainer('hct' . $id, array($editLabel, $editor));
        
        return $hct;
    }
    
    /**
     *
     * @return MComboBox 
     */
    public function comboTurno()
    {
        $business = new BusinessBasicBusTurn();
        $turnId = new MComboBox('turnId', null, _M('Turno', $module), $business->listTurn());
        $turnId->setJsHint(_M('Informe o código do turno', $module));
        
        return $turnId;
    }
    
    /**
     *
     * @return MComboBox 
     */
    public function comboUnidade()
    {
        //Field unit
        $business = new BusinessBasicBusUnit();
        $unitId = new MComboBox('unitId', null, _M('Unidade', $module), $business->listUnit());
        $unitId->setJsHint(_M('Informe o código da unidade', $module));
        
        return $unitId;
    }
    
    /**
     * @return MComboBox 
     */
    public function comboCentro()
    {
        $business = new BusinessAcademicBusCenter();

        $centerId = new MComboBox('centerId', null, _M('Centro', $module), $business->listCenter());
        $centerId->setJsHint(_M('Selecione o centro do curso', $module));
        
        return $centerId;
    }
    
    /**
     * Cria um botão centralizado
     * 
     * @return MDiv
     */
    public function divCentralizada($name, $content, $class, $attributes)
    {
        $div = new MDiv($name, $content, $class, $attributes);
        $div->addBoxStyle('text-align', 'center');
        
        return $div;
    }
    
    public function labelDica($texto)
    {
        $label = new MLabel('<font style="color: red;">*</font> ' . $texto);
        $label->addBoxStyle('background-color', '#FFFFCC');
        $label->addBoxStyle('border', '1px solid #FFCC33');
        $label->addBoxStyle('padding', '3px');
        $label->addBoxStyle('margin-top', '3px');
        $label->addBoxStyle('margin-bottom', '3px');
        
        return $label;
    }
    
    /**
     * @author Jonas G. Diel
     * 
     * @return array
     */
    public function bibliografiaGnuteca()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $url = str_replace( 'miolo20', 'miolo25',$MIOLO->getConf('home.url')).'/index.php?module=gnuteca3&action=main:search:externalSearch&parentElement=bibliografia.bibliografiaid';
        $link = "javascript:window.open('{$url}', 'Busca externa', 'STATUS=NO, TOOLBAR=NO, LOCATION=NO, DIRECTORIES=NO, RESISABLE=NO, SCROLLBARS=YES, TOP=10, LEFT=10, WIDTH=770, HEIGHT=400');";

        //Adicionar aqui popup que abre janela do Gnuteca
        $fields[] = $field = new MIntegerField('bibliografia.bibliografiaid', NULL, _M('Código do material'));            
        $field->addAttribute('onBlur', SForm::getAjaxAction('obterBibliografiaGnuteca', 'divResult', false));
        
        $fields[] = new MButton('lnkGnutecaSearch', _M('Buscar material', $module), $link);
        
        return $fields;
    }
    
    /**
     * @author Jonas G. Diel
     * 
     * @return string
     */
    public static function bibliografiaGnutecaResposta($bibliografiaId)
    {
        $domain = $_SERVER['SERVER_NAME'];
        $module = MIOLO::getCurrentModule();
        $url = 'http://'.$domain.'/miolo25/html/';
        $clientOptions["location"] = "$url/webservices.php?module=gnuteca3&action=main&class=gnuteca3WebServicesMaterial";
        $clientOptions["uri"] = "$url";
        $clientOptions["encoding"] = "LATIN1";
        $client = new SoapClient(NULL, $clientOptions);
        $result = $client->getMaterialInformation('1', base64_encode('123456'), $bibliografiaId, null, "PHP_OBJECT", true);
        $value = strip_tags($result['format']);
        
        return $value;
    }
    
    /**
     * @return array
     */
    public function lookupCPFComPessoa()
    {
        //Field cpf
        $cpfLabel = new MText('cpfLabel', _M('CPF', $module) . ':');
        $cpfLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $lkpFields = array (
            'personId',
            'personName'
        );
        $txtCpf  = new MLookupTextField('txtCpf', $this->form->getFormValue('txtCpf', $this->form->txtCpf->value), _M('CPF',$module), 16, null, null, $lkpFields, 'basic', 'PhysicalPersonCPF', null, array('cpf' => 'txtCpf'), true);
        $txtCpf->setJsHint(_M('Informe o CPF', $module));
        
        $this->form->AddValidator( new MCPFValidator('txtCpf', _M('CPF',$module), 'optional') );
        
        $cntCPF = new MHContainer('cntCPF', array($cpfLabel, $txtCpf));
        $cntCPF->setShowLabel(false);
        $fields[] = $cntCPF;
        
        //Field person
        $personLabel = new MText('personLabel', _M('Pessoa', $module) . ':');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $lkpFields = array (
            'personName', 
            'limbo', 
            'limbo', 
            'limbo', 
            'limbo', 
            'limbo', 
            'limbo', 
            'limbo', 
            'limbo', 
            'limbo', 
            'limbo', 
            'limbo', 
            'limbo', 
            'limbo', 
            'limbo', 
            'limbo', 
            'limbo', 
            'limbo', 
            'txtCpf'
        );
        $personId  = new MLookupTextField('personId', $this->form->getFormValue('personId', $this->form->personId), _M('Código da pessoa',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, $lkpFields, 'basic', 'PhysicalPerson', null, array('cpf' => 'txtCpf'), true);
        $personId->setJsHint(_M('Informe o código da pessoa', $module));
        
        $this->form->AddValidator( new MIntegerValidator('personId', _M('Código da pessoa'), 'optional') );
        
        $personName  = new MTextField('personName', $this->form->getFormValue('personName', $this->inscriptionData->personName), _M('Nome da pessoa', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setJsHint(_M('Nome da pessoa', $module));
        $personName->setReadOnly(true);
        
        $cntPerson = new MHContainer('cntPerson', array($personLabel, $personId, $personName));
        $cntPerson->setShowLabel(false);
        $fields[] = $cntPerson;
        
        return $fields;
    }
}
?>