<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluçoes Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; voce pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundaçao
 * do Software Livre (FSF); na versao 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇAO a qualquer MERCADO
 * ou APLICAÇAO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * portugues para maiores detalhes.
 *
 * Voce deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se nao, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundaçao do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Representa o conjunto de modulos do sistema.
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 28/12/2011
 */
class SModules
{
    const MODULE_ACADEMIC = 'academic';
    const MODULE_ADMIN = 'admin';
    const MODULE_BASE = 'base';
    const MODULE_BASIC = 'basic';
    const MODULE_ACCOUNTANCY = 'accountancy';
    const MODULE_CONTROLCOPIES = 'controlCopies';
    const MODULE_TRAINING = 'training';
    const MODULE_FINANCE = 'finance';
    const MODULE_INSTITUTIONAL = 'institutional';
    const MODULE_SELECTIVEPROCESS = 'selectiveProcess';
    const MODULE_PROTOCOL = 'protocol';
    const MODULE_RESEARCH = 'research';
    const MODULE_RESIDENCY = 'residency';
    const MODULE_HUMANRESOURCES = 'humanResources';
    const MODULE_SERVICES = 'services';
    const MODULE_CONTASPAGAR = 'contaspagar';
    const MODULE_PORTAL = 'portal';
    const MODULE_RELCLIENTE = 'relcliente';
    const MODULE_AVINST = 'avinst';
    const MODULE_RESMEDICA = 'resmedica';
    const MODULE_APS = 'aps';
    const MODULE_PEDAGOGICO = 'pedagogico';
    
    /**
     *
     * @var array
     */
    private $modules = array();
    
    private static $instance;

    
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        $modules = array(
            'academic' => array('MODULE_ACADEMIC_INSTALLED', _M('Acadêmico', $module),'acd'),
            'admin' => array('', _M('Administrativo', $module),'adm'),
            'base' => array('', _M('Base', $module),''),
            'basic' => array('', _M('Básico', $module),'bas'),
            'accountancy' => array('MODULE_ACCOUNTANCY_INSTALLED', _M('Contábil', $module),'acc'),
            'controlCopies' => array('MODULE_CONTROLCOPIES_INSTALLED', _M('Controle de cópias', $module),'ccp'),
            'training' => array('MODULE_TRAINING_INSTALLED', _M('Estágio', $module),'tra'),
            'finance' => array('MODULE_FINANCE_INSTALLED', _M('Financeiro', $module),'fin'),
            'institutional' => array('MODULE_INSTITUTIONAL_INSTALLED', _M('Institucional', $module),'ins'),
            'selectiveProcess' => array('MODULE_SELECTIVEPROCESS_INSTALLED', _M('Processo seletivo', $module),'spr'),
            'protocol'=> array('MODULE_PROTOCOL_INSTALLED', _M('Protocolo', $module),'ptc'),
            'research' => array('MODULE_RESEARCH_INSTALLED', _M('Questionário', $module),'rsh'),
            'residency' => array('MODULE_RESIDENCY_INSTALLED', _M('Residência multiprofissional', $module),'res'),
            'humanResources' => array('MODULE_HUMANRESOURCES_INSTALLED', _M('Recursos humanos', $module),'hur'),
            'services' => array('MODULE_SERVICES_INSTALLED', _M('Serviços', $module),''),
            'contaspagar' => array('MODULE_CONTASPAGAR_INSTALLED', _M('Contas a pagar', $module),'cap'),
            'relcliente' => array('MODULE_RELCLIENTE_INSTALLED', _M('Relacionamento com cliente', $module),'rcc'),
            'avinst' => array('MODULE_AVINST_INSTALLED', _M('Avaliação Institucional', $module),'ava'),
            'pedagogico' => array('MODULE_PEDAGOGICO_INSTALLED', _M('Pedagógico', $module),'acp'),
            'portal' =>array('MOSTRAR_ATALHOS_PORTAL_MENU', _M('Portal', $module),'prt'),
            'portal-coordinator' =>array('MOSTRAR_ATALHOS_PORTAL_MENU', _M('Portal do coordenador', $module),'prt'),
            'portal-professor' =>array('MOSTRAR_ATALHOS_PORTAL_MENU', _M('Portal do professor', $module),'prt'),
            'portal-pupil' =>array('MOSTRAR_ATALHOS_PORTAL_MENU', _M('Portal do aluno', $module),'prt'),
            'resmedica' =>array('MODULE_RESIDENCY_INSTALLED', _M('Residência médica'), 'med'),
            'aps' =>array('MODULE_RESIDENCY_INSTALLED', _M('Atenção primária a saúde'), 'aps')
        );
        
        //
        foreach ( $modules as $key => $val )
        {
            $obj = new SSystemModule();
            $obj->setName($key);
            $obj->setInstallParameter($val[0]);
            $obj->setLabel($val[1]);
            $obj->setModulePrefix($val[2]);
            
            $this->modules[$key] = $obj;
        }
    }
    
    /**
     *
     * @return SModules
     */
    public static function getInstance()
    {
        if ( !isset(self::$instance) )
        {
            self::$instance = new self();
        }

        return self::$instance;
    }
    
    private function getModules()
    {
        return $this->modules;
    }

    
    /**
     * Obtem todos modulos do sistema
     * 
     * @return array Array de SSystemModule
     */
    public static function getAllModules()
    {
        return self::getInstance()->getModules();
    }
    
    /**
     * Obtem todos modulos instalados no sistema
     * 
     * @return array Array de SSystemModule
     */
    public static function getInstalledModules()
    {
        $modules = array();
        
        $sysModule = new SSystemModule();
        foreach ( self::getAllModules() as $sysModule )
        {
            if ( $sysModule->getHasInstalled() )
            {
                $modules[] = $sysModule;
            }
        }
        
        return $modules;
    }
    
    /**
     * @return array 
     */
    public static function getInstalledModulesList()
    {
        $list = array();
        
        foreach ( SModules::getInstalledModules() as $sysModule )
        {
            $sysModule instanceof SSystemModule;
            $list[] = $sysModule->getName();
        }
        
        return $list;
    }
    
    
    /**
     * Obtem um modulo especifico
     *
     * @param string $moduleName 
     * @return SSystemModule Objeto do modulo
     */
    public static function getModule($moduleName)
    {
        $module = SAGU::getFileModule(__FILE__);
        $modules = self::getInstance()->getModules();
        
        if ( !isset($modules[$moduleName]) )
        {
            throw new Exception( "O módulo '$moduleName' não foi encontrado!", 1001 );
        }
        
        return $modules[$moduleName];
    }
    
    
    /**
     * Obtem array no formato 'modulo' => 'label'
     * Util para listagem em MSelection's, etc..
     * 
     * @return array
     */
    public static function getList()
    {
        $list = array();
        $sysModule = new SSystemModule();
        
        foreach ( self::getInstance()->getModules() as $sysModule )
        {
            $list[ $sysModule->getName() ] = $sysModule->getLabel();
        }
        
        return $list;
    }
    
    
    /**
     * Obtem array identico ao getList(), porem apenas com modulos instalados
     * 
     * @return array
     */
    public static function getListOnlyInstalled()
    {
        $list = array();
        $sysModule = new SSystemModule();
        
        foreach ( self::getInstance()->getModules() as $sysModule )
        {
            if ( $sysModule->getHasInstalled() )
            {
                $list[ $sysModule->getName() ] = $sysModule->getLabel();
            }
        }
        
        return $list;
    }
    
    public static function moduleExists($module)
    {
        $sysMod = new SModules();
        return isset($sysMod->modules[$module]);
    }
    
    /**
     * Obtem modulo a partir de seu prefixo
     *
     * @param string $prefix Ex.: acd
     * @return SSystemModule 
     */
    public static function getModuleByPrefix($prefix)
    {
        $return = null;
        $sysModule = new SSystemModule();
        
        foreach ( self::getAllModules() as $sysModule )
        {
            if ( $sysModule->getModulePrefix() == $prefix )
            {
                $return = $sysModule;
                break;
            }
        }
        
        return $return;
    }
}
?>
