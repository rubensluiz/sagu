<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Classe para testes unitários.
 *
 * @author Daniel Hartmann [daniel@solis.coop.br]
 *
 * \b Maintainers: \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Daniel Hartmann [daniel@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 14/03/2011
 */
error_reporting(E_ALL & ~E_NOTICE & ~E_DEPRECATED);

global $module;
global $dir;
global $path;

$dir = explode('/', exec('pwd -L ../../../'));

foreach ( $dir as $k => $d )
{
    if ( $d == 'modules' )
    {
        $kSAGU = $k - 1;
        $kModule = $k + 1;
        break;
    }
}

$module = $dir[$kModule];
$path = implode('/', array_slice($dir, 0, $kSAGU+1));

//require_once("$path/classes/tests/munittest.class");

class SUnitTest extends PHPUnit_Framework_TestCase
{
    private $busPhysicalPerson;
    private $personId;

    public function  __destruct()
    {
        if ( strlen($this->personId) > 0 )
        {
            $this->busPhysicalPerson->deletePhysicalPerson($this->personId);
        }
    }

    /**
     * Test type objects in type attribute
     */
//    public function testSAGUType()
//    {
//        foreach ( $this->type as $key => $obj )
//        {
//            echo "Type $key:\n";
//            $typeName = get_class($obj);
//            $tableName = substr(get_class($obj), 3, strlen(get_class($obj)));
//
//            SDatabase::beginTransaction();
//
//            try
//            {
//                echo _M('Testando') . " save:\t\t";
//                $ret = $obj->save();
//                $this->assertTrue($ret);
//                echo "OK\n";
//
//                echo _M('Testando') . " populate:\t";
//                $pkeys = implode(', ', $this->pkeys);
//                foreach ( $this->pkeys as $pkey )
//                {
//                    $params[] = $obj->$pkey;
//                }
//
//                $params = implode(', ', $params);
//                eval('$newObj = new ' . get_class($obj) . "($params);");
//                $this->assertTrue(is_object($newObj));
//                echo "OK\n";
//
//                $filters = new stdClass();
//                foreach ( (array)$obj as $key => $value )
//                {
//                    $key = preg_replace("/^\\0(.*)\\0/","",$key);
//
//                    if ( (is_array($value))
//                      || ($key == 'removeData')
//                      || ($key == 'userName')
//                      || ($key == 'dateTime')
//                      || ($key == 'ipAddress') )
//                    {
//                        continue;
//                    }
//
//                    $filters->$key = strtoupper($value);
//                }
//
//                echo _M('Testando') . " search:\t";
//                $ret = $obj->search($filters);
//                $this->assertTrue(count($ret) > 0);
//                echo "OK\n";
//
//                echo _M('Testando') . " searchGrid:\t";
//                if ( method_exists($obj, 'searchGrid') )
//                {
//                    $ret = $obj->searchGrid($filters);
//                    $this->assertTrue(count($ret) > 0);
//                    echo "OK\n";
//                }
//                else
//                {
//                    echo '<b>' . _M('Método não existe') . ".</b>\n";
//                }
//
//                echo _M('Testando') . " list:\t\t";
//                if ( method_exists($typeName, "list$tableName") )
//                {
//                    eval("\$ret = $typeName::list$tableName();");
//                    $this->assertTrue(count($ret) > 0);
//                    echo "OK\n";
//                }
//                else
//                {
//                    echo '<b>' . _M('Método não existe') . ".</b>\n";
//                }
//                
//                echo _M('Testando') . " duplicate:\t";
//                if ( method_exists($typeName, 'duplicate') )
//                {
//                    $newObj = $obj->duplicate();
//                    $this->assertTrue(is_object($newObj));
//                    echo "OK\n";
//                }
//                else
//                {
//                    echo '<b>' . _M('Método não existe') . ".</b>\n";
//                }
//
//                echo _M('Testando') . " update:\t";
//                $newObj = $obj->save();
//                $this->assertTrue(count($ret) > 0);
//                echo "OK\n";
//
//                echo _M('Testando') . " delete:\t";
//                $newObj = $obj->delete();
//                $this->assertTrue(count($ret) > 0);
//                echo "OK\n";
//            }
//            catch ( MDatabaseException $e )
//            {
//                echo "FAIL\n\n";
//                echo $e;
//                throw new Exception;
//            }
//            catch ( Exception $e )
//            {
//                echo "FAIL\n\n";
//                echo str_replace('<br />', "\n", $e->getMessage());
//                throw new Exception;
//            }
//
//            echo "\n";
//
//            SDatabase::rollback();
//        }
//    }
//
//    /**
//     * Test business objects in business attribute
//     */
//    public function testBusiness()
//    {
//        foreach ( $this->business as $key => $row )
//        {
//            list($obj, $data) = $row;
//            echo "Business $key:\n";
//
//            // Get class name for methods
//            $methods = get_class_methods($obj);
//            foreach ( $methods as $method )
//            {
//                if ( preg_match('/^search.*/', $method) )
//                {
//                    $class = substr($method, 6);
//                    break;
//                }
//            }
//
//            $db = $obj->getDatabase();
//            SDatabase::beginTransaction();
//
//            try
//            {
//                echo _M('Testando') . " insert$class:\t";
//                $ret = $obj->{"insert$class"}($data);
//                $this->assertTrue($ret);
//                echo "OK\n";
//
//                echo _M('Testando') . " get$class:\t";
//                $pkeys = implode(', ', $this->pkeys);
//                foreach ( $this->pkeys as $pkey )
//                {
//                    $params[] = $data->$pkey;
//                }
//                $params = implode(', ', $params);
//                eval("\$newObj = \$obj->get$class($params);");
//                $this->assertTrue(is_object($newObj));
//                echo "OK\n";
//
//                echo _M('Testando') . " list$class:\t";
//                $ret = $obj->{"list$class"}();
//                $this->assertTrue(count($ret) > 0);
//                echo "OK\n";
//
//                echo _M('Testando') . " search$class:\t";
//                $ret = $obj->{"search$class"}($data);
//                $this->assertTrue(count($ret) > 0);
//                echo "OK\n";
//
//                echo _M('Testando') . " update$class:\t";
//                $ret = $obj->{"update$class"}($data);
//                $this->assertTrue($ret > 0);
//                echo "OK\n";
//
//                echo _M('Testando') . " delete$class:\t";
//                eval("\$ret = \$obj->delete$class($params);");
//                $this->assertTrue($ret);
//                echo "OK\n";
//            }
//            catch ( MDatabaseException $e )
//            {
//                echo "FAIL\n\n";
//                echo $e;
//                throw new Exception;
//            }
//            catch ( Exception $e )
//            {
//                echo "FAIL\n\n";
//                echo str_replace('<br />', "\n", $e->getMessage());
//                throw new Exception;
//            }
//
//            echo "\n";
//
//            SDatabase::rollback();
//        }
//    }
    
    public function setUp()
    {
        parent::setUp();
        
        try
        {
            SDatabase::beginTransaction();
        }
        catch(Exception $ex)
        {
            SDatabase::rollback();
            SDatabase::beginTransaction();
            
        }
    }
    
    public function tearDown()
    {
        parent::tearDown();
        
        SDatabase::rollback();
    }
}

?>