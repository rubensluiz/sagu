<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for acdCourseVersionType table
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 16/03/2011
 */
class BusinessBasicBusResetPassword extends sBusiness
{
    /**
     * Class constructor
     */
    public function BusinessBasicBusResetPassword()
    {
        // Reset expiration date
        $this->updateResetPasswordExpirationDate();

        parent::__construct();
    }

    /**
     * Return a specific record from the database where expirationDate and resetDate is null
     *
     * @param $confirmHash (integer): Primary key of the record to be retrieved
     * @return (object): Return an object of the type handled by the class
     */
    public function getResetPasswordByConfirmHash($confirmHash)
    {
        $sql = 'SELECT resetPasswordId,
                       confirmHash,
                       requestDate,
                       idUser,
                       resetDate,
                       expirationDate,
                       userName,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipAddress
                  FROM basResetPassword
                 WHERE confirmHash = ?
                   AND expirationDate IS NULL
                   AND resetDate IS NULL';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $confirmHash));

        $resetPassword = new BasResetPassword();
        list ( $resetPassword->resetPasswordId,
               $resetPassword->confirmHash,
               $resetPassword->requestDate,
               $resetPassword->idUser,
               $resetPassword->resetDate,
               $resetPassword->expirationDate,
               $resetPassword->userName,
               $resetPassword->dateTime,
               $resetPassword->ipAddress ) = $result[0];

        return $resetPassword;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     * @return boolean
     */
    public function insertResetPassword($data)
    {
        // Gera um hash novo
        $hashAndRequestDate = $this->generateHashAndRequestDate($data->idUser);
        $hash = $hashAndRequestDate->hash;
        $requestDate = $hashAndRequestDate->requestDate;

        // Verifica se o hash existe se existe gera outro
        while ( $this->checksConfirmHash($hash) )
        {
            $hashAndRequestDate = $this->generateHashAndRequestDate($data->idUser);
            $hash = $hashAndRequestDate->hash;
            $requestDate = $hashAndRequestDate->requestDate;
        }

        // Insere o hash na tabela basResetPassword
        $sql = 'INSERT INTO basResetPassword(
                            confirmHash,
                            requestDate,
                            idUser)
                     VALUES (?,?,?)';

        $params = array( $hash,
                       $requestDate,
                       $data->idUser );

        $return = $this->getDatabase()->execute(SAGU::prepare($sql, $params));

        if ( $return )
        {
            $result = $hash;
        }

        return $result;
    }

    /**
     * Update reset password add expirationdate
     *
     * @param $data (object): Data which will replace the old record data
     * @return (boolean): True if succeed, otherwise False
     */
    public function addExpirationDateResetPassword($resetPasswordId)
    {
        $sql = 'UPDATE basResetPassword
                   SET expirationDate = now()
                 WHERE resetPasswordId = ?';

        $params[] = $resetPasswordId;
        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $params));

        return $result;
    }

    /**
     * Generate hash code and request date
     *
     * @return (object): hash and requestDate
     */
    private function generateHashAndRequestDate($idUser)
    {
        // Obtem o md5 da data com o idUser
        $sql = 'SELECT MD5(now()::varchar||?), now()';

        $params = array( $idUser );
        $hashData = $this->getDatabase()->query(SAGU::prepare($sql, $params));

        $return = new stdClass();
        $return->hash = $hashData[0][0];
        $return->requestDate = $hashData[0][1];

        return $return;
    }

    /**
     * Checks if the hash exists
     *
     * @param <string> $confirmHash
     * @return boolean
     */
    private function checksConfirmHash($confirmHash)
    {
        $sql = "SELECT confirmHash
                  FROM basResetPassword
                 WHERE confirmHash = ?";

        $params = array($confirmHash);
        $return = $this->getDatabase()->query(SAGU::prepare($sql, $params));

        $result = false;
        if( is_array($return) )
        {
            $result = true;
        }

        return $result;
    }

    /**
     * Reset expiration date
     *
     * @return True if succed, otherwise False
     */
    private function updateResetPasswordExpirationDate()
    {
        $sql = "UPDATE basResetPassword
                   SET expirationDate = now()
                 WHERE (now() - requestDate) > '" .SAGU::getParameter('basic', 'FORGOT_PASSWORD_HASH_TIMEOUT'). "'::interval second
                   AND resetDate IS NULL
                   AND expirationDate IS NULL";

        $return = $this->getDatabase()->execute(SAGU::prepare($sql, null));

        return $return;
    }

    /**
     * Remove registros da basResetPassword
     *
     * @param int $idUser - Código do usuário
     * @return boolean
     */
    public function deleteResetPasswordData($idUser)
    {
        $sql = "DELETE FROM basResetPassword
                      WHERE idUser = ?";

        $params = array();
        $params[] = $idUser;

        $return = $this->getDatabase()->execute(SAGU::prepare($sql, $params));

        return $return[0][0];
    }
}
?>
