<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for basEmployee table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 12/09/2005
 *
 **/

/**
 * Class to manipulate the basEmployee table
 **/
class BusinessBasicBusEmployee extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listEmployee()
    {
        $db  = $this->getDatabase();
        $sql = 'SELECT A.employeeId,
                       B.name
                  FROM basEmployee A
        LEFT JOIN ONLY basPhysicalPersonEmployee B
                    ON ( A.employeeId = B.personId )
              ORDER BY B.name';
        $ret = $db->query($sql);

        return $ret;
    }

    /**
     * Return a specific record from the database
     *
     * @param $employeeId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getEmployee($employeeId)
    {
        $sql = 'SELECT A.employeeId,
                       A.personId,
                       B.name,
                       A.externalId,
                       A.sectorId,
                       C.description,
                       A.salary,
                       A.valueHour,
                       A.weeklyhours,
                       TO_CHAR(A.beginDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(A.endDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.employeeTypeId,
                       D.description,
                       A.bankId,
                       E.description,
                       A.branchNumber,
                       A.branchNumberDigit,
                       A.accountNumber,
                       A.accountNumberDigit,
                       A.isActiveAccount,
                       A.accountType,
                       A.clearingHouse,
                       A.especialidade,
                       A.classe,
                       A.nivel,
                       A.unitId,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM basEmployee A
        LEFT JOIN ONLY basPhysicalPersonEmployee B
                 USING (personid)
             LEFT JOIN ONLY basSector C
                 USING (sectorId)
             LEFT JOIN basEmployeeType D
                    ON (A.employeeTypeId = D.employeeTypeId)
             LEFT JOIN finBank E
                    ON (A.bankId = E.bankId)
                 WHERE A.employeeId = ?';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $employeeId));

        $employee = new basEmployee();
        list ( $employee->employeeId,
               $employee->personId,
               $employee->personName,
               $employee->externalId,
               $employee->sectorId,
               $employee->sectorDescription,
               $employee->salary,
               $employee->valueHour,
               $employee->weeklyhours,
               $employee->beginDate,
               $employee->endDate,
               $employee->employeeTypeId,
               $employee->description,
               $employee->bankId,
               $employee->description,
               $employee->branchNumber,
               $employee->branchNumberDigit,
               $employee->accountNumber,
               $employee->accountNumberDigit,
               $employee->isActiveAccount,
               $employee->accountType,
               $employee->clearingHouse,
               $employee->especialidade,
               $employee->classe,
               $employee->nivel,
               $employee->unitId,
               $employee->userName,
               $employee->dateTime,
               $employee->ipAddress ) = $result[0];

        return $employee;
    }

    /**
     * Return a specific record from the database - used in return account file for module human resourses
     *
     * @param $employeeId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
     *
     **/
    public function getEmployeeForPersonId($personId)
    {
        $sql = 'SELECT A.employeeId,
                       A.personId,
                       A.externalId,
                       A.sectorId,
                       A.salary,
                       A.valueHour,
                       A.weeklyhours,
                       TO_CHAR(A.beginDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(A.endDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.employeeTypeId,
                       A.bankId,
                       A.branchNumber,
                       A.branchNumberDigit,
                       A.accountNumber,
                       A.accountNumberDigit,
                       A.isActiveAccount,
                       A.accountType,
                       A.clearingHouse, 
                       A.especialidade,
                       A.classe,
                       A.nivel,
                       A.unitId,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress                       
                  FROM basEmployee A
                 WHERE A.personId = ?
                       ORDER BY A.beginDate DESC, A.employeeId
                       LIMIT 1 ';

        $db     = $this->getDatabase();
        
        $result = $db->query(SAGU::prepare($sql, $personId));

        $employee = false;

        if(is_array($result))
        {
            $employee = new basEmployee();
            list ( $employee->employeeId,
                    $employee->personId,
                    $employee->externalId,
                    $employee->sectorId,
                    $employee->salary,
                    $employee->valueHour,
                    $employee->weeklyhours,
                    $employee->beginDate,
                    $employee->endDate,
                    $employee->employeeTypeId,
                    $employee->bankId,
                    $employee->branchNumber,
                    $employee->branchNumberDigit,
                    $employee->accountNumber,
                    $employee->accountNumberDigit,
                    $employee->isActiveAccount,
                    $employee->accountType,
                    $employee->clearingHouse,
                    $employee->userName,
                    $employee->dateTime,
                    $employee->ipAddress,
                    $employee->especialidade,
                    $employee->classe,
                    $employee->nivel,
                    $employee->unitId ) = $result[0];
         }
         
        return $employee;
    }



    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchEmployee($filters)
    {
        $sql = 'SELECT A.employeeId,
                       A.personId,
                       B.name,
                       A.externalId,
                       A.sectorId,
                       C.description,
                       A.salary,
                       A.valueHour,
                       A.weeklyhours,
                       TO_CHAR(A.beginDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(A.endDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.employeeTypeId,
                       D.description,
                       A.bankId,
                       E.description,
                       A.branchNumber,
                       A.branchNumberDigit,
                       A.accountNumber,
                       A.accountNumberDigit,
                       A.isActiveAccount,
                       A.accountType,
                       A.clearingHouse,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM basEmployee A
        LEFT JOIN ONLY basPhysicalPersonEmployee B
                 USING (personid)
             LEFT JOIN ONLY basSector C
                 USING (sectorId)
             LEFT JOIN basEmployeeType D
                    ON (A.employeeTypeId = D.employeeTypeId)
             LEFT JOIN finBank E
                    ON (A.bankId = E.bankId)';

        if ( strlen($filters->employeeId) > 0 )
        {
            $where .= ' AND A.employeeId = ? ';
            $args[] = $filters->employeeId;
        }
        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND A.personId = ? ';
            $args[] = $filters->personId;
        }
        if ( strlen($filters->employeeTypeId) > 0 )
        {
            $where .= ' AND A.employeeTypeId = ? ';
            $args[] = $filters->employeeTypeId;
        }
        if ( strlen($filters->personName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?) ';
            $args[] = $filters->personName . '%';
        }
        if ( strlen($filters->sectorId) > 0 )
        {
            $where .= ' AND A.sectorId = ? ';
            $args[] = $filters->sectorId;
        }
        if ( strlen($filters->sectorName) > 0 )
        {
            $where .= ' AND UNACCENT(C.description) ILIKE UNACCENT(?) ';
            $args[] = $filters->sectorName .'%';
        }
        if ( strlen($filters->personName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?) ';
            $args[] = $filters->personName . '%';
        }

        //Acrescentar outros ANDs necessários.

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql   .= ' WHERE ' . substr($where, 4) . ' ORDER BY B.name';
            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));

        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertEmployee($data, $insertPhysicalPersonEmployee = true)
    {
        $MIOLO = MIOLO::getInstance();        

        $busPerson = new BusinessBasicBusPhysicalPersonEmployee();

        $personData = $busPerson->getPhysicalPerson($data->personId);

        $db = $this->getDatabase();
        
        if ( $insertPhysicalPersonEmployee )
        {
            if ( !strlen($busPerson->getPhysicalPersonEmployee($personData->personId)->personId) > 0 )
            {
                $busPerson->insertPhysicalPersonEmployee($personData);
            }
        }
        
        $sql = 'INSERT INTO basEmployee
                            (personId,
                             externalId,
                             sectorId,
                             salary,
                             valueHour,
                             weeklyhours,
                             beginDate,
                             endDate,
                             employeeTypeId,
                             bankId,
                             branchNumber,
                             branchNumberDigit,
                             accountNumber,
                             accountNumberDigit,
                             isActiveAccount,
                             accountType,
                             clearingHouse, 
                             especialidade,
                             classe,
                             nivel,
                             unitId)

                     VALUES (?,?,?,?,?,?,
                             TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                             TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                             ?,?,?,?,?,?,?,?,?,?,?,?,?)';

        $args = array( $data->personId,
                       $data->externalId,
                       $data->sectorId,
                       $data->salary,
                       $data->valueHour,
                       $data->weeklyhours,
                       $data->beginDate,
                       $data->endDate,
                       $data->employeeTypeId,
                       $data->bankId,
                       $data->branchNumber,
                       $data->branchNumberDigit,
                       $data->accountNumber,
                       $data->accountNumberDigit,
                       SAGU::NVL($data->isActiveAccount, DB_TRUE),
                       $data->accountType,
                       $data->clearingHouse,
                       $data->especialidade,
                       $data->classe,
                       $data->nivel,
                       $data->unitId);
        
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateEmployee($data)
    {
        $sql = 'UPDATE basEmployee
                   SET personId           = ?,
                       externalId         = ?,
                       sectorId           = ?,
                       salary             = ?,
                       valueHour          = ?,
                       weeklyhours        = ?,
                       beginDate          = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       endDate            = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       employeeTypeId     = ?,
                       bankId             = ?,
                       branchNumber       = ?,
                       branchNumberDigit  = ?,
                       accountNumber      = ?,
                       accountNumberDigit = ?,
                       isActiveAccount    = ?,
                       accountType        = ?,
                       clearingHouse      = ?,
                       especialidade      = ?,
                       classe             = ?,
                       nivel              = ?,
                       unitId             = ?
                 WHERE employeeId         = ?';

        $args = array( $data->personId,
                       $data->externalId,
                       $data->sectorId,
                       $data->salary,
                       $data->valueHour,
                       $data->weeklyhours,
                       $data->beginDate,
                       $data->endDate,
                       $data->employeeTypeId,
                       $data->bankId,
                       $data->branchNumber,
                       $data->branchNumberDigit,
                       $data->accountNumber,
                       $data->accountNumberDigit,
                       SAGU::NVL($data->isActiveAccount, DB_FALSE),
                       $data->accountType,
                       $data->clearingHouse,                       
                       $data->especialidade,
                       $data->classe,
                       $data->nivel,
                       $data->unitId,
                       $data->employeeId);

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }
        

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $employeeId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteEmployee($employeeId)
    {
        $MIOLO = MIOLO::getInstance();       
        $personId = $this->getEmployee($employeeId)->personId;
        $sql = 'DELETE FROM basEmployee
                      WHERE employeeId = ?';
        
        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $employeeId));

        //Excluir dependências do Funcionário (BusPhysicalPersonEmployee)
        $busPhysicalPersonEmployee = new BusinessBasicBusPhysicalPersonEmployee();        
        $busPhysicalPersonEmployee->deletePhysicalPersonEmployee($personId);
        
        return $result;
    }

}

?>
