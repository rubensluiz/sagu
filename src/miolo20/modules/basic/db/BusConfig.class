<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for basConfig table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 01/09/2005
 *
 **/

/**
 * Class to manipulate the acdCourseVersion table
 **/
class BusinessBasicBusConfig extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listConfig()
    {
        return 'Not implemented';
    }

    /**
     * Return a specific record from the database
     *
     * @param $moduleConfig (integer): Primary key of the record to be retrieved
     * @param $parameter (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getConfig($moduleConfig, $parameter)
    {
        $sql = 'SELECT A.moduleConfig,
                       A.parameter,
                       A.value,
                       A.label,
                       A.description,
                       A.type,
                       A.orderby,
                       A.groupby,
                       A.isgeneralparameter,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM basConfig A
                 WHERE A.moduleConfig = UPPER(?)
                   AND A.parameter    = UPPER(?)';

        $pk = array ( $moduleConfig,
                      $parameter );

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $pk, false));


        $basConfig = new BasConfig();

        list ( $basConfig->moduleConfig,
               $basConfig->parameter,
               $basConfig->value,
               $basConfig->label,
               $basConfig->description,
               $basConfig->type,
               $basConfig->orderBy,
               $basConfig->groupBy,
               $basConfig->isgeneralparameter,
               $basConfig->userName,
               $basConfig->dateTime,
               $basConfig->ipAddress ) = $result[0];

        return $basConfig;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchConfig($filters)
    {
        $ativaMultiUnidade = sMultiUnidade::estaHabilitada() && sMultiUnidade::temUnidadeLogada();
        
        // Filtra apenas pela unidade logada
        $filtraUnidade = strlen($filters->filterOnlyUnit) > 0;
        //( $filtraUnidade ) ? 'COALESCE(UC.value, A.value)' : 
        
        $fieldValue = 'A.value';
        
        $sql = "SELECT A.moduleConfig,
                       A.parameter,
                       CASE WHEN LENGTH({$fieldValue}) > 30 THEN SUBSTR({$fieldValue}, 0, 30) || '...' ELSE {$fieldValue} END,
                       A.label,
                       A.description,
                       A.type,
                       A.orderby,
                       A.groupby
                  FROM basConfig A";
        
//        if ( $filtraUnidade )
//        {
//            $sql .= ' INNER JOIN basUnitConfig UC ON (UC.moduleConfig, UC.parameter, UC.unitId) = (A.moduleConfig, A.parameter, ?)';
//            $args[] = sMultiUnidade::obterUnidadeLogada();
//        }
//        else if ( $ativaMultiUnidade )
//        {
//            $sql .= ' LEFT JOIN basUnitConfig UC ON (UC.moduleConfig, UC.parameter, UC.unitId) = (A.moduleConfig, A.parameter, ?)';
//            $args[] = sMultiUnidade::obterUnidadeLogada();            
//        }

        if ( strlen($filters->moduleConfig) > 0 )
        {
            $where .= ' AND A.moduleConfig ILIKE ?';
            $args[] = $filters->moduleConfig;
        }
        if ( strlen($filters->parameter) > 0 )
        {
            $where .= ' AND A.parameter ILIKE ?';
            $args[] = $filters->parameter . '%';
        }
        if ( strlen($filters->value) > 0 )
        {
            $where .= ' AND ' . $fieldValue . ' ILIKE ?';
            $args[] = $filters->value . '%';
        }
        if ( strlen($filters->label) > 0 )
        {
            $where .= ' AND UNACCENT(A.label) ILIKE UNACCENT(?)';
            $args[] = $filters->label. '%';
        }
        if ( strlen($filters->groupBy) > 0 )
        {
            $where .= ' AND UNACCENT(A.groupby) ILIKE UNACCENT(?)';
            $args[] = $filters->groupBy. '%';
        }
        if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $filters->description. '%';
        }
        if ( strlen($filters->type) > 0 )
        {
            $where .= ' AND A.type ILIKE ?';
            $args[] = $filters->type;
        }
        if ( strlen($filters->orderBy) > 0 )
        {
            $where .= ' AND A.orderby = ?';
            $args[] = $filters->orderBy;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY A.moduleConfig,
                            A.parameter';

            $db = $this->getDatabase();
            $sql = SAGU::prepare($sql, $args, false);
            $result = $db->query($sql);

        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertConfig($data)
    {

        $sql = 'INSERT INTO basConfig
                            (moduleConfig,
                             parameter,
                             value,
                             label,
                             description,
                             orderby,
                             groupby,
                             type)
                     VALUES (UPPER(?),
                             UPPER(?),
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             UPPER(?))';

        $args = array( $data->moduleConfig,
                       $data->parameter,
                       $data->value,
                       $data->label,
                       $data->description,
                       $data->orderBy,
                       $data->groupBy,
                       $data->type );

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args, false));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateConfig($data)
    {   
        $sql = 'UPDATE basConfig
                SET value = ?,
                    label = ?,
                    description = ?,
                    orderby = ?,
                    groupby = ?,
                    type = UPPER(?)
                WHERE moduleConfig = UPPER(?)
                AND parameter    = UPPER(?)';

        $args = array( $data->value,
                    $data->label,
                    $data->description,
                    $data->orderBy,
                    $data->groupBy,
                    $data->type,
                    $data->moduleConfig,
                    $data->parameter );

        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args, false);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateConfigValue($data)
    {
        $sql = ' UPDATE basConfig
                    SET value        = ?
                  WHERE moduleConfig = UPPER(?)
                    AND parameter    = ? ';

        $args = array( $data->value,
                         $data->moduleConfig,
                         $data->parameter
                       );

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args, false) );

        return $result;
    }
    
    public function setParameterValue($module, $parameter, $value)
    {
        $data = new stdClass();
        $data->moduleConfig = $module;
        $data->parameter = $parameter;
        $data->value = $value;
        
        return $this->updateConfigValue($data);
    }


    /**
     * Delete a record
     *
     * @param $moduleConfig (string): Primary key for deletion
     * @param $parameter (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteConfig($args)
    {
        $module = SAGU::getFileModule(__FILE__);
        $result = false;
        
        if ( sMultiUnidade::estaHabilitada() && sMultiUnidade::temUnidadeLogada() )
        {
            $row = BasUnitConfig::findByPks($args[0], $args[1], sMultiUnidade::obterUnidadeLogada());
         
            if ( $row instanceof BasUnitConfig )
            {
                $result = $row->delete();
            }
            else
            {
                throw new Exception( _M('Não foi possível excluir este parâmetro devido à ele não existir para a unidade atual logada.', $module) );
            }
        }
        else
        {
            $sql = 'DELETE FROM basConfig
                        WHERE moduleConfig = UPPER(?)
                            AND parameter    = UPPER(?)';

            $db = $this->getDatabase();
            $result = $db->execute(SAGU::prepare($sql, $args));
        }
        
        if ( !$result )
        {
            throw new Exception( _M('Não foi possível excluir este parâmetro.', $module) );
        }

        return $result;
    }

    /**
     * List all modules currently recorded.
     *
     * @param None
     *
     * @return (array): An array of key pair values
     *
     **/
    function listModules()
    {
        $sql = 'SELECT DISTINCT moduleConfig, moduleConfig
                           FROM basConfig
                       ORDER BY moduleConfig';

        $db = $this->getDatabase();
        $result = $db->query($sql);

        for ( $i=0; $i<count($result); $i++ )
        {
            $res[$result[$i][0]] = $result[$i][1];
        }

        return $res;
    }

    /**
     * List all available types.
     * New types must be declared within this method.
     *
     * @param None
     *
     * @return (array): An array of key pair values
     *
     **/
    function listTypes()
    {
        $args = array( 'INT'     => 'INTEGER',
                       'CHAR'    => 'CHAR',
                       'VARCHAR' => 'VARCHAR',
                       'DATE'    => 'DATE',
                       'FILE'    => 'FILE',
                       'BOOLEAN' => 'BOOLEAN',
                       'NULL'    => 'NULL' );

        return $args;
    }
}
?>
