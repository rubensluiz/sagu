<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for basLegalPerson table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 31/08/2005
 *
 **/

$MIOLO  = MIOLO::getInstance();
$MIOLO->uses('db/BusPerson.class', 'basic');

/**
 * Class to manipulate the basPerson table
 **/
class BusinessBasicBusLegalPerson extends BusinessBasicBusPerson
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listLegalPerson()
    {
        $sql = 'SELECT personId,
                       name
             FROM ONLY basLegalPerson
              ORDER BY name';

        $ret = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return $ret;
    }
    
    /**
     * Lista todas as pessoas jurídicas que forem de um determinado tipo e estado.
     *
     * @param: $legalPersonTypeId, $stateId
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listLegalPersonByType($legalPersonTypeId, $stateId=null)
    {
        $sql = ' SELECT A.personid as pessoa, 
                        A.name 
              FROM ONLY baslegalperson A
             INNER JOIN basCity B
                     ON B.cityId = A.cityId
             INNER JOIN basState C
                     ON C.stateId = B.stateId
                  WHERE legalpersontypeid = ?';
            
        
        $args[] = $legalPersonTypeId;
        
        if(strlen($stateId)>0)
        {
            $sql .= ' AND C.stateId = ? ';
            $args[] = $stateId;
        }
        
        $sql .= ' ORDER BY name';
                
        $ret = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return $ret;
    }

    /**
     * Return a specific record from the database
     *
     * @param $personId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getLegalPerson($personId)
    {
        //get the basPerson data
        $person = $this->getPerson($personId);
        //get the basLegalPerson data
        $sql = 'SELECT A.fakeName,
                       A.name,
                       A.cnpj,
                       A.stateRegistration,
                       A.cityRegistration,
                       A.legalPersonTypeId,
                       B.description,
                       A.phone,
                       A.fax,
                       A.isPublic,
                       A.aliquota,
                       A.codigoServicoPrestado
             FROM ONLY basLegalPerson A
             LEFT JOIN basLegalPersonType B
                 USING ( legalPersonTypeId )
                 WHERE A.personId = ?';
        
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $personId));

        if ( count($result) == 0 )
        {
            return null;
        }

        $legalPerson = new basLegalPerson();
        list ( $legalPerson->fakeName,
               $legalPerson->name,
               $legalPerson->cnpj,
               $legalPerson->stateRegistration,
               $legalPerson->cityRegistration,
               $legalPerson->legalPersonTypeId,
               $legalPerson->description,
               $legalPerson->phone,
               $legalPerson->fax,
               $legalPerson->isPublic,
               $legalPerson->aliquota,
               $legalPerson->codigoServicoPrestado ) = $result[0];

        //put into legalPerson attributes all person attributes

        $array = get_object_vars($person);
        foreach ( $array as $key => $row )
        {
            $legalPerson->$key = $person->$key;
        }

        return $legalPerson;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchLegalPerson($filters)
    {
        $sql = 'SELECT A.personId,
                       A.personDv,
                       A.personMask,
                       A.name,
                       A.shortName,
                       A.cityId,
                       C.name,
                       A.zipCode,
                       D.name || \' \' || A.location,
                       A.complement,
                       A.neighborhood,
                       A.email,
                       A.emailAlternative,
                       A.url,
                       TO_CHAR(A.dateIn,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.password,
                       A.isAllowPersonalData,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress,
                       A.fakeName,
                       A.name,
                       A.phone,
                       A.fax,
                       A.cnpj,
                       A.stateRegistration,
                       A.cityRegistration,
                       A.legalPersonTypeId,
                       B.description,
                       A.isPublic
             FROM ONLY basLegalPerson A
            INNER JOIN basLegalPersonType B
                    ON (A.legalPersonTypeId = B.legalPersonTypeId)
            INNER JOIN basLocationType D
                    ON (A.locationTypeId = D.locationTypeId)
             LEFT JOIN basCity C
                 USING (cityId) ';

        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND A.personId = ? ';
            $args[] = $filters->personId;
        }
        if ( strlen($filters->name) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?) ';
            $args[] = $filters->name.'%';
        }
        if ( strlen($filters->fakeName) > 0 )
        {
            $where .= ' AND UNACCENT(A.fakeName) ILIKE UNACCENT(?) ';
            $args[] = $filters->fakeName.'%';
        }
        if ( strlen($filters->cnpj) > 0 )
        {
            $where .= ' AND A.cnpj = ? ';
            $args[] = $filters->cnpj;
        }
        if ( strlen($filters->stateRegistration) > 0 )
        {
            $where .= ' AND A.stateRegistration = ? ';
            $args[] = $filters->stateRegistration;
        }
        if ( strlen($filters->cityRegistration) > 0 )
        {
            $where .= ' AND A.cityRegistration = ? ';
            $args[] = $filters->cityRegistration;
        }
        if ( strlen($filters->legalPersonTypeId) > 0 )
        {
            $where .= ' AND A.legalPersonTypeId = ? ';
            $args[] = $filters->legalPersonTypeId;
        }
        if ( strlen($filters->phone) > 0 )
        {
            $where .= ' AND A.phone = ? ';
            $args[] = $filters->phone;
        }
        if ( strlen($filters->fax) > 0 )
        {
            $where .= ' AND A.fax = ? ';
            $args[] = $filters->fax;
        }
        if ( strlen($filters->isPublic) > 0 )
        {
            $where .= ' AND A.isPublic = ? ';
            $args[] = $filters->isPublic;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql   .= ' WHERE ' . substr($where, 4) . ' ORDER BY A.name';            
            $result = $this->getDatabase()->query(SAGU::Prepare($sql,$args));
        }

        return $result;
    }


    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertLegalPerson($data)
    {
        $data = $this->insertPerson($data);

        $legalPerson = new basLegalPerson();
        $vars        = get_object_vars($legalPerson);

        foreach ( $vars as $var => $value )
        {
            if ( strlen($data->$var)>0 && strtolower($data->$var) != 'null' && $var != 'timeStamp' && $var != 'uploadFile' && $var != 'stateId' && $var != 'locationType' && $var != 'personName' )
            {
                $string1 .= $var . ',';
                $string2 .= '?,';
                $args[]   = $data->$var;
            }
        }

        if ( strlen($string1)>0 )
        {
            $string1 = substr($string1,0,-1);
            $string2 = substr($string2,0,-1);
            $sql    = 'INSERT INTO basLegalPerson
                                ( ' . $string1 . ')
                            VALUES ( ' . $string2 . ')';

            $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));
            
            // Registra o usuário para a pessoa jurídica
            $this->geraLoginAutomatico($data);

            return $data;
        }
        
        return false;
    }
    
    public function geraLoginAutomatico($data)
    {
        $loginType = SAGU::getParameter('BASIC', 'AUTOMATIC_LOGIN_GENERATION_SOURCE');
                
        $mioloUserName = $data->mioloUserName;
        
        if ( !strlen($mioloUserName) > 0 )
        {
            if ( in_array($loginType, array('CPF', 'CPFNOMASK')) )
            {
                $mioloUserName = $data->cnpj;
                
                // Se estiver configurado para gerar login com CPF sem mascara, remover
                if ( $loginType == 'CPFNOMASK' )
                {
                    $mioloUserName = SAGU::convertInCPFWithoutDelimiters($mioloUserName);
                }
            }
            else if ( $loginType == 'PERSONID' )
            {
                $mioloUserName = $data->personId;
            }
            else if ( $loginType == 'PERSONNAME' )
            {
                $busPhysicalPerson = new BusinessBasicBusPhysicalPerson();
                
                // Cria login com nome-sobrenome da pessoa
                $personName = SDatabase::query('SELECT UNACCENT(?)', array($data->personName));
                $personName = $personName[0][0];

                // Define login como PRIMEIRONOME-ULTIMONOME
                $explodeNames = explode(' ', $personName);
                $mioloUserName = strtolower(current($explodeNames)) . '-' . strtolower(end($explodeNames));
                $mioloUserName = substr($mioloUserName, 0, 24); // limite de CHAR(25) na base

                // Enquanto houver logins iguais, incrementar com NUMERO no final
                $newMioloUserName = $mioloUserName;
                $filters = new stdClass();
                $filters->mioloUserName = $mioloUserName;
                for ( $i=1; count($busPhysicalPerson->searchPhysicalPerson($filters)) > 0; $i++ )
                {
                    $newMioloUserName = $mioloUserName . $i;
                    $filters->mioloUserName = $newMioloUserName;
                }

                $mioloUserName = $newMioloUserName;
            }
        }
        
        if ( strlen($mioloUserName) > 0 )
        {
            $data->mioloUserName = $mioloUserName;
            $this->insereUsuario($data);
        }
    }

    private function insereUsuario($data)
    {
        $okUser = false;
        $mioloUserName = $data->mioloUserName;
                
        if ( strlen($mioloUserName) > 0 )
        {   
            $busUser = new BusinessAdminUser();
            
            $userData->admLogin = $mioloUserName;
            $userData->username = $data->personName;
            $userData->admPassword = SAGU::NVL($data->password, SAGU::createPassword());
            
            //Busca pelo codigo de usuário
            $filters = new stdClass();
            $filters->iduser = $data->mioloIdUser;
            $rows = $busUser->searchUser($filters);
            
            if ( count($rows) > 0 && strlen($data->mioloIdUser) > 0 )
            {
                $idUser = $rows[0][0];
                $getUser = $busUser->getUser($idUser);

                $userData->idUser = $idUser;
                $userData->admPassword = SAGU::NVL($data->password, $getUser->admPassword, $userData->admPassword);
                
                $okUser = $busUser->updateUser($userData);
            }
            else
            {
                $returnUser = $busUser->insertUser($userData);
                $okUser = strlen($returnUser)>0;
            }
            
            //Insere miolousername na pessoa
            $dataPerson = $this->getPerson($data->personId);
            $dataPerson->mioloUserName =  $mioloUserName;
            $this->updatePerson($dataPerson);
        }
        
        return $okUser;
    }
    
    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateLegalPerson($data)
    {
        $sql = 'UPDATE basLegalPerson SET
                       fakeName          = ?,
                       name              = ?,
                       stateRegistration = ?,
                       cityRegistration  = ?,
                       phone             = ?,
                       fax               = ?,
                       isPublic          = ?,
                       aliquota          = COALESCE(?, 0),
                       codigoServicoPrestado     = ?';

        $args[] = $data->fakeName;
        $args[] = $data->name;        
        $args[] = $data->stateRegistration;
        $args[] = $data->cityRegistration;
        $args[] = $data->phone;
        $args[] = $data->fax;
        $args[] = $data->isPublic;        
        $args[] = $data->aliquota;        
        $args[] = $data->codigoServicoPrestado;        
        
        if ( strlen($data->cnpj) > 0 )
        {
            $sql .= ', cnpj = ?';
            $args[] = $data->cnpj;
        }
        
        if ( strlen($data->legalPersonTypeId) > 0 )
        {
            $sql .= ', legalPersonTypeId = ?';
            $args[] = $data->legalPersonTypeId;
        }
        
        $sql .= ' WHERE personId = ? ';
        $args[] = $data->personId;

        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }
        
        $this->updatePerson($data);
        
        // Registra o usuário para a pessoa jurídica
        $this->geraLoginAutomatico($data);

        return $result;
    }

    /**
     * Update the person data, from forms fields that haven't null values
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateLegalPersonToInscriptions($data)
    {
        $sql = 'UPDATE basLegalPerson SET ';

        if ( strlen($data->fakeName)>0 )
        {
            $sql   .= ' fakeName = ?, ';
            $args[] = $data->fakeName;
        }

        if ( strlen($data->name)>0 )
        {
            $sql   .= ' name = ?, ';
            $args[] = $data->name;
        }

        if ( strlen($data->cnpj)>0 )
        {
            $sql   .= ' cnpj = ?, ';
            $args[] = $data->cnpj;
        }

        if ( strlen($data->stateRegistration)>0 )
        {
            $sql   .= ' stateRegistration = ?, ';
            $args[] = $data->stateRegistration;
        }

        if ( strlen($data->cityRegistration)>0 )
        {
            $sql   .= ' cityRegistration = ?, ';
            $args[] = $data->cityRegistration;
        }

        if ( strlen($data->legalPersonTypeId)>0 )
        {
            $sql   .= ' legalPersonTypeId = ?, ';
            $args[] = $data->legalPersonTypeId;
        }

        if ( strlen($data->description)>0 )
        {
            $sql   .= ' description = ?, ';
            $args[] = $data->description;
        }

        if ( count($args)>0 )
        {
            $args[] = $data->personId;
            $sql .= ' WHERE personId = ?';
            $sql = str_replace(',  WHERE',' WHERE',$sql);
            $sqls = SAGU::prepare($sql, $args);

            for ( $i=0; $i<count($sqls); $i++ )
            {
                $result = $this->getDatabase()->execute($sqls[$i]);
            }

            $this->updatePersonToInscriptions($data);

            return $result;
        }
    }

    /**
     * Delete a record
     *
     * @param $personId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteLegalPerson($personId)
    {
        $result = $this->deletePerson($personId);

        return $result;
    }
}
?>
