<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file manipulate the lookups for the basic module of sagu
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 02/05/2005
 */

$MIOLO = MIOLO::getInstance();
$MIOLO->getClass('basic', 'lookupFields');

/**
 * Class to manipulate the Lookups
 */
class BusinessBasicLookup
{
    /**
     * Auto complete for neighborhood
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteNeighborhood(&$context)
    {
        $sql = 'SELECT A.name AS neighborhoodName
                  FROM basNeighborhood A
                 WHERE A.neighborhoodId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for neighborhood
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupNeighborhood(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class',$module);
        $MIOLO->conf->loadConf($module);

        $neighborhoodId = $lookup->getFilterValue('neighborhoodId');
        $neighborhoodName = $lookup->getFilterValue('neighborhoodName');

        $lookup->addFilterField( new MTextField('neighborhoodName', $neighborhoodName, _M('Bairro',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MHiddenField('neighborhoodId', $neighborhoodId) );

        $columns[] = new DataGridColumn('neighborhoodId', _M('Código do bairro', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('neighborhoodName', _M('Nome do bairro', $module), 'left', true, null, true);

        $sql = 'SELECT A.neighborhoodId,
                       A.name AS neighborhoodName
                  FROM basNeighborhood A';

        if ( strlen($neighborhoodId) > 0 )
        {
            $where .= ' AND A.neighborhoodId = ?';
            $args[] = $neighborhoodId;
        }

        if ( strlen($neighborhoodName) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?)';
            $args[] = $neighborhoodName . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.name';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar bairro',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for city
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteCity(&$context)
    {
        $sql = 'SELECT A.name AS cityName,
                       A.stateId,
                       B.name AS stateName,
                       A.countryId,
                       C.name AS countryName,
                       A.zipCode
                  FROM basCity A
             LEFT JOIN basState B
                    ON ( B.stateId = A.stateId )
             LEFT JOIN basCountry C
                    ON ( C.countryId = A.countryId )
                 WHERE A.cityId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for city
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupCity(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class',$module);
        $MIOLO->conf->loadConf($module);

        $isPossibleNew = $lookup->getFilterValue('isPossibleNew');

        $cityId = $lookup->getFilterValue('cityId');
        $cityName = $lookup->getFilterValue('cityName');
        $stateId = $lookup->getFilterValue('stateId');
        $stateName = $lookup->getFilterValue('stateName');
        $countryId = $lookup->getFilterValue('countryId');
        $countryName = $lookup->getFilterValue('countryName');
        $zipCode = $lookup->getFilterValue('zipCode');

        $lookup->addFilterField(new MTextField('cityId', $cityId, _M('Código',$module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('cityName', $cityName, _M('Cidade',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('stateId', $stateId, _M('Código',$module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('stateName', $stateName, _M('Estado',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(fields::country($countryId));
        $lookup->addFilterField(new MTextField('zipCode', $zipCode, _M('CEP',$module), SAGU::getParameter('BASIC', 'FIELD_ZIPCODE_LOOKUP_SIZE')));
        $lookup->addFilterField(new MHiddenField('isPossibleNew', $isPossibleNew));

        global $page;
        $page->onLoad('document.' . $page->name . '.cityName.focus()');

        $columns[] = new DataGridColumn('cityId', _M('Código', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('cityName', _M('Cidade', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('stateId', _M('Código do estado', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('stateName', _M('Estado', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('countryId', _M('Código do país', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('countryName', _M('País', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('zipCode', _M('CEP', $module), 'left', true, null, true);

        $sql = 'SELECT A.cityId,
                       A.name AS cityName,
                       A.stateId,
                       B.name AS stateName,
                       A.countryId,
                       C.name AS countryName,
                       A.zipCode
                  FROM basCity A
             LEFT JOIN basState B
                    ON ( B.stateId = A.stateId )
             LEFT JOIN basCountry C
                    ON ( C.countryId = A.countryId )';

        if ( strlen($cityId) > 0 )
        {
            $where .= ' AND A.cityId = ?';
            $args[] = $cityId;
        }

        if ( strlen($cityName) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?)';
            $args[] = $cityName . '%';
        }

        if ( strlen($stateId) > 0 )
        {
            $where .= ' AND A.stateId ILIKE ?';
            $args[] = $stateId . '%';
        }

        if ( strlen($stateName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $stateName . '%';
        }

        if ( strlen($countryId) > 0 )
        {
            $where .= ' AND A.countryId = ?';
            $args[] = $countryId;
        }

        if ( strlen($countryName) > 0 )
        {
            $where .= ' AND UNACCENT(C.name) ILIKE UNACCENT(?)';
            $args[] = $countryName . '%';
        }

        if ( strlen($zipCode) > 0 )
        {
            $where .= ' AND A.zipCode ILIKE ?';
            $args[] = $zipCode . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.name';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom($sql,$args);
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar cidade',$module), 15, 0);
        $lookup->grid->setIsScrollable();

        if ( !($isPossibleNew == DB_FALSE) )
        {
            $lookup->grid->header[] = '<b><center><a href="' . $MIOLO->getActionURL('basic', 'cityLookup') . '">' . _M('Inserir novo', 'basic') . '</a></center></b><br>';
        }
    }

    /**
     * Auto complete for state
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteState(&$context)
    {
        $sql = 'SELECT A.name AS stateName,
                       A.countryId,
                       B.name AS countryName
                  FROM basState A
             LEFT JOIN basCountry B
                    ON ( B.countryId = A.countryId )
                 WHERE A.stateId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for state
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupState(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class',$module);
        $MIOLO->conf->loadConf($module);

        $stateId = $lookup->getFilterValue('stateId');
        $stateName = $lookup->getFilterValue('stateName');
        $countryId = $lookup->getFilterValue('countryId');
        $countryName = $lookup->getFilterValue('countryName');

        $lookup->addFilterField(new MTextField('stateId', $stateId, _M('Código',$module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('stateName', $stateName, _M('Estado',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(fields::country($countryId));

        $columns[] = new DataGridColumn('stateId', _M('Código do estado', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('stateName', _M('Estado', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('countryId', _M('Código do país', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('countryName', _M('País', $module), 'left', true, null, true);

        $sql = 'SELECT A.stateId,
                       A.name AS stateName,
                       A.countryId,
                       B.name AS countryName
                  FROM basState A
             LEFT JOIN basCountry B
                    ON ( B.countryId = A.countryId )';

        if ( strlen($stateId) > 0 )
        {
            $where .= ' AND A.stateId = ?';
            $args[] = $stateId;
        }

        if ( strlen($stateName) > 0 )
        {
            $where .= ' AND UNACCENT(A.nam)e ILIKE UNACCENT(?)';
            $args[] = $stateName . '%';
        }

        if ( strlen($countryId) > 0 )
        {
            $where .= ' AND A.countryId = ?';
            $args[] = $countryId;
        }

        if ( strlen($countryName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $countryName . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.name';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar estado',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for country
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteCountry(&$context)
    {
        $sql = 'SELECT A.name,
                       A.nationality,
                       A.currency,
                       A.currencySymbol
                  FROM basCountry A
                 WHERE A.countryId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for country
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupCountry(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class',$module);
        $MIOLO->conf->loadConf($module);

        $countryId = $lookup->getFilterValue('countryId');
        $countryName = $lookup->getFilterValue('countryName');
        $nationality = $lookup->getFilterValue('nationality');
        $currency = $lookup->getFilterValue('currency');
        $currencySymbol = $lookup->getFilterValue('currencySymbol');

        $lookup->addFilterField(fields::country($countryId) );
        $lookup->addFilterField(new MTextField('nationality', $nationality, _M('Nacionalidade',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('currency', $currency, _M('Moeda',$module), SAGU::getParameter('BASIC', 'FIELD_TIME_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('currencySymbol', $currencySymbol, _M('Símbolo monetário',$module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));

        $columns[] = new DataGridColumn('countryId', _M('Código', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('countryName', _M('País', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('nationality', _M('Nacionalidade', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('currency', _M('Moeda', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('currencySymbol', _M('Símbolo monetário', $module), 'left', true, null, true);

        $sql = 'SELECT A.countryId,
                       A.name AS countryName,
                       A.nationality,
                       A.currency,
                       A.currencySymbol
                  FROM basCountry A';

        if ( strlen($countryId) > 0 )
        {
            $where .= ' AND A.countryId = ?';
            $args[] = $countryId;
        }

        if ( strlen($countryName) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?)';
            $args[] = $countryName . '%';
        }

        if ( strlen($nationality) > 0 )
        {
            $where .= ' AND UNACCENT(A.nationality) ILIKE UNACCENT(?)';
            $args[] = $nationality . '%';
        }

        if ( strlen($currency) > 0 )
        {
            $where .= ' AND A.currency ILIKE ?';
            $args[] = $currency . '%';
        }

        if ( strlen($currencySymbol) > 0 )
        {
            $where .= ' AND A.currencySymbol ILIKE ?';
            $args[] = $currencySymbol . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.name';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar país',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for location
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteLocationZipCode(&$context)
    {
        $sql = 'SELECT locationName AS location,
                       countryId,
                       countryName,
                       stateId,
                       stateName,
                       cityId,
                       cityName,
                       neighborhoodName AS neighborhood,
                       neighborhoodName AS neighborhood
                  FROM ( SELECT B.zipCode,
                                \'\' AS locationName,
                                B.countryId,
                                E.name AS countryName,
                                B.stateId,
                                D.name AS stateName,
                                B.cityId,
                                B.name AS cityName,
                                null AS neighborhoodId,
                                \'\' AS neighborhoodName,
                                2 AS orderBy
                           FROM basCity B
                      LEFT JOIN basLocation A
                             ON ( B.cityId = A.cityId )
                      LEFT JOIN basState D
                             ON ( D.stateId = B.stateId
                                AND D.countryId = B.countryId )
                      LEFT JOIN basCountry E
                             ON ( E.countryId = B.countryId )
                          UNION
                         SELECT A.zipCode,
                                A.name AS locationName,
                                B.countryId,
                                E.name AS countryName,
                                B.stateId,
                                D.name AS stateName,
                                B.cityId,
                                B.name AS cityName,
                                C.neighborhoodId AS neighborhoodId,
                                C.name AS neighborhoodName,
                                1 AS orderBy
                           FROM basCity B
                      LEFT JOIN basLocation A
                             ON ( B.cityId = A.cityId )
                      LEFT JOIN basNeighborhood C
                             ON ( C.neighborhoodId = A.neighborhoodId )
                      LEFT JOIN basState D
                             ON ( D.stateId = B.stateId
                                AND D.countryId = B.countryId )
                      LEFT JOIN basCountry E
                             ON ( E.countryId = B.countryId )
                       ) as E
                 WHERE zipCode = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for location
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupLocationZipCode(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class',$module);
        $MIOLO->conf->loadConf($module);

        $locationId = $lookup->getFilterValue('locationId');
        $zipCode = $lookup->getFilterValue('zipCode');
        $locationName = $lookup->getFilterValue('locationName');
        $countryId = $lookup->getFilterValue('countryId');
        $countryName = $lookup->getFilterValue('countryName');
        $stateId = $lookup->getFilterValue('stateId');
        $stateName = $lookup->getFilterValue('stateName');
        $cityId = $lookup->getFilterValue('cityId');
        $cityName = $lookup->getFilterValue('cityName');
        $neighborhoodId = $lookup->getFilterValue('neighborhoodId');
        $neighborhoodName = $lookup->getFilterValue('neighborhoodName');

        $lookup->addFilterField(new MTextField('zipCode', $zipCode, _M('CEP',$module), SAGU::getParameter('BASIC', 'FIELD_ZIPCODE_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('locationName', $locationName, _M('Logradouro',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(fields::country($countryId));
        $lookup->addFilterField(new MTextField('stateId', $stateId, _M('Código do estado',$module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('stateName', $stateName, _M('Estado',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('cityId', $cityId, _M('Código da cidade',$module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('cityName', $cityName, _M('Cidade',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('neighborhoodName', $neighborhoodName, _M('Bairro',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        $columns[] = new DataGridColumn('zipCode', _M('CEP', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('locationName', _M('Logradouro', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('countryId', _M('Código do país', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('countryName', _M('País', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('stateId', _M('Código do estado', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('stateName', _M('Estado', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('cityId', _M('Código da cidade', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('cityName', _M('Cidade', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('neighborhoodId', _M('Código do bairro', $module), 'left', true, null, false);
        $columns[] = new DataGridColumn('neighborhoodName', _M('Bairro', $module), 'left', true, null, true);

        $sql = 'SELECT zipCode,
                       locationName,
                       countryId,
                       countryName,
                       stateId,
                       stateName,
                       cityId,
                       cityName,
                       neighborhoodId,
                       neighborhoodName,
                       orderBy
                  FROM ( SELECT B.zipCode,
                                \'\' AS locationName,
                                B.countryId,
                                E.name AS countryName,
                                B.stateId,
                                D.name AS stateName,
                                B.cityId,
                                B.name AS cityName,
                                null AS neighborhoodId,
                                \'\' AS neighborhoodName,
                                2 AS orderBy
                           FROM basCity B
                      LEFT JOIN basLocation A
                             ON ( B.cityId = A.cityId )
                      LEFT JOIN basState D
                             ON ( D.stateId = B.stateId
                                AND D.countryId = B.countryId )
                      LEFT JOIN basCountry E
                             ON ( E.countryId = B.countryId )
                          UNION
                         SELECT A.zipCode,
                                A.name AS locationName,
                                B.countryId,
                                E.name AS countryName,
                                B.stateId,
                                D.name AS stateName,
                                B.cityId,
                                B.name AS cityName,
                                C.neighborhoodId AS neighborhoodId,
                                C.name AS neighborhoodName,
                                1 AS orderBy
                           FROM basCity B
                      LEFT JOIN basLocation A
                             ON ( B.cityId = A.cityId )
                      LEFT JOIN basNeighborhood C
                             ON ( C.neighborhoodId = A.neighborhoodId )
                      LEFT JOIN basState D
                             ON ( D.stateId = B.stateId
                                AND D.countryId = B.countryId )
                      LEFT JOIN basCountry E
                             ON ( E.countryId = B.countryId )
                       ) as E ' ;

        if ( strlen($zipCode) > 0 )
        {
            $where .= ' AND zipCode ILIKE ?';
            $args[] = $zipCode . '%';
        }

        if ( strlen($locationName) > 0 )
        {
            $where .= ' AND UNACCENT(locationName) ILIKE UNACCENT(?)';
            $args[] = $locationName . '%';
        }

        if ( strlen($countryId) > 0 )
        {
            $where .= ' AND countryId = ?';
            $args[] = $countryId;
        }

        if ( strlen($countryName) > 0 )
        {
            $where .= ' AND UNACCENT(countryName) ILIKE UNACCENT(?)';
            $args[] = $countryName . '%';
        }

        if ( strlen($stateId) > 0 )
        {
            $where .= ' AND stateId = ?';
            $args[] = $stateId;
        }

        if ( strlen($stateName) > 0 )
        {
            $where .= ' AND UNACCENT(stateName) ILIKE UNACCENT(?)';
            $args[] = $stateName . '%';
        }

        if ( strlen($cityId) > 0 )
        {
            $where .= ' AND cityId = ?';
            $args[] = $cityId;
        }

        if ( strlen($cityName) > 0 )
        {
            $where .= ' AND UNACCENT(cityName) ILIKE UNACCENT(?)';
            $args[] = $cityName . '%';
        }

        if ( strlen($neighborhoodId) > 0 )
        {
            $where .= ' AND neighborhoodId = ?';
            $args[] = $neighborhoodId;
        }

        if ( strlen($neighborhoodName) > 0 )
        {
            $where .= ' AND UNACCENT(neighborhoodName) ILIKE UNACCENT(?)';
            $args[] = $neighborhoodName . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE zipCode IS NOT NULL
                        AND ' . substr($where, 5);
        }

        $sql .= ' ORDER BY countryName,
                           stateName,
                           cityName,
                           locationName';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar logradouro',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for sector
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteSector(&$context)
    {
        $sql = 'SELECT description,
                       email
                  FROM ONLY basSector
                 WHERE sectorId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for sector
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupSector(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class',$module);
        $MIOLO->conf->loadConf($module);

        $sectorId = $lookup->getFilterValue('sectorId');
        $description = $lookup->getFilterValue('description');
        $email = $lookup->getFilterValue('email');

        $lookup->addFilterField(new MTextField('sectorId', $cityId, _M('Código',$module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('description', $cityName, _M('Setor',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('email', $stateId, _M('E-mail',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        global $page;
        $page->onLoad('document.' . $page->name . '.description.focus()');

        $columns[] = new DataGridColumn('sectorId', _M('Código', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('description', _M('Setor', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('email', _M('E-mail', $module), 'left', true, null, true);

        $sql = 'SELECT sectorId,
                       description,
                       email
                  FROM ONLY basSector ';

        if ( strlen($sectorId) > 0 )
        {
            $where .= ' AND sectorId = ?';
            $args[] = $sectorId;
        }

        if ( strlen($description) > 0 )
        {
            $where .= ' AND UNACCENT(description) ILIKE UNACCENT(?)';
            $args[] = $description . '%';
        }

        if ( strlen($email) > 0 )
        {
            $where .= ' AND email ILIKE ?';
            $args[] = $email . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY description';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar setor',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for person
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompletePerson(&$context)
    {
        $sql = 'SELECT A.name AS personName,
                       D.name || \' \' || A.location AS location,
                       A.complement,
                       A.neighborhood,
                       A.cityId,
                       B.name AS cityName,
                       B.stateId,
                       B.countryId,
                       C.name AS countryName
             FROM ONLY basPerson A
             LEFT JOIN basCity B
                    ON ( B.cityId = A.cityId )
             LEFT JOIN basCountry C
                    ON ( C.countryId = B.countryId )
             LEFT JOIN basLocationType D
                    ON (A.locationTypeId = D.locationTypeId)
                 WHERE A.personId = ?';
        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for person
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupPerson(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class',$module);
        $MIOLO->conf->loadConf($module);

        $personId = $lookup->getFilterValue('personId');
        $personName = $lookup->getFilterValue('personName');
        $personLastName = $lookup->getFilterValue('personLastName');
        $location = $lookup->getFilterValue('location');
        $complement = $lookup->getFilterValue('complement');
        $neighborhood = $lookup->getFilterValue('neighborhood');
        $cityId = $lookup->getFilterValue('cityId');
        $cityName = $lookup->getFilterValue('cityName');
        $stateId = $lookup->getFilterValue('stateId');
        $countryId = $lookup->getFilterValue('countryId');
        $countryName = $lookup->getFilterValue('countryName');

        $lookup->addFilterField(new MTextField('personId', $personId, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('personName', $personName, _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('personLastName', $personLastName, _M('Sobrenome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('location', $location, _M('Logradouro', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('cityName', $cityName, _M('Cidade', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(fields::country($countryId));

        global $page;
        $page->onLoad('document.' . $page->name . '.personName.focus()');

        $columns[] = new DataGridColumn('personId', _M('Código', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('personName', _M('Nome', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('location', _M('Logradouro', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('complement', _M('Complemento', $module), 'left', true, null, false);
        $columns[] = new DataGridColumn('neighborhood', _M('Bairro', $module), 'left', true, null, false);
        $columns[] = new DataGridColumn('cityId', _M('Código da cidade', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('cityName', _M('Nome da cidade', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('stateId', _M('Estado', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('countryId', _M('Código do país', $module), 'left', true, null, false);
        $columns[] = new DataGridColumn('countryName', _M('País', $module), 'left', true, null, true);

        $sql = 'SELECT A.personId,
                       A.name AS personName,
                       D.name || \' \' || A.location AS location,
                       A.complement,
                       A.neighborhood,
                       A.cityId,
                       B.name AS cityName,
                       B.stateId,
                       B.countryId,
                       C.name AS countryName
             FROM ONLY basPerson A
             LEFT JOIN basCity B
                    ON ( B.cityId = A.cityId )
             LEFT JOIN basCountry C
                    ON ( C.countryId = B.countryId )
             LEFT JOIN basLocationType D
                    ON ( A.locationTypeId = D.locationTypeId )';

        if ( strlen($personId) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $args[] = $personId;
        }

        if ( strlen($personName) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?)';
            $args[] = $personName . '%';
        }

        if ( strlen($personLastName) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?)';
            $args[] = '%' . $personLastName . '%';
        }

        if ( strlen($location) > 0 )
        {
            $where .= ' AND UNACCENT(A.location) ILIKE UNACCENT(?)';
            $args[] = $location . '%';
        }

        if ( strlen($complement) > 0 )
        {
            $where .= ' AND A.complement ILIKE ?';
            $args[] = $complement . '%';
        }

        if ( strlen($neighborhood) > 0 )
        {
            $where .= ' AND UNACCENT(A.neighborhood) ILIKE UNACCENT(?)';
            $args[] = $neighborhood . '%';
        }

        if ( strlen($cityId) > 0 )
        {
            $where .= ' AND A.cityId = ?';
            $args[] = $cityId;
        }

        if ( strlen($cityName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $cityName . '%';
        }

        if ( strlen($stateId) > 0 )
        {
            $where .= ' AND B.stateId ILIKE ?';
            $args[] = $stateId;
        }

        if ( strlen($countryId) > 0 )
        {
            $where .= ' AND C.countryId = ?';
            $args[] = $countryId;
        }

        if ( strlen($countryName) > 0 )
        {
            $where .= ' AND UNACCENT(C.name) ILIKE UNACCENT(?)';
            $args[] = $countryName . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5) . '
                   ORDER BY A.name';
        }
        else
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar pessoa',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    public function autoCompletePersonPupils(&$context)
    {
        $sql = 'SELECT A.name AS personName,
                       D.name || \' \' || A.location AS location,
                       A.complement,
                       A.neighborhood,
                       A.cityId,
                       B.name AS cityName,
                       B.stateId,
                       B.countryId,
                       C.name AS countryName
             FROM ONLY basPhysicalPersonStudent A
             LEFT JOIN basCity B
                    ON ( B.cityId = A.cityId )
             LEFT JOIN basCountry C
                    ON ( C.countryId = B.countryId )
             LEFT JOIN basLocationType D
                    ON ( A.locationTypeId = D.locationTypeId)
                 WHERE A.personId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for person
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupPersonPupils(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class',$module);
        $MIOLO->conf->loadConf($module);

        $personId = $lookup->getFilterValue('personId');
        $personName = $lookup->getFilterValue('personName');
        $personLastName = $lookup->getFilterValue('personLastName');
        $location = $lookup->getFilterValue('location');
        $complement = $lookup->getFilterValue('complement');
        $neighborhood = $lookup->getFilterValue('neighborhood');
        $cityId = $lookup->getFilterValue('cityId');
        $cityName = $lookup->getFilterValue('cityName');
        $stateId = $lookup->getFilterValue('stateId');
        $countryId = $lookup->getFilterValue('countryId');
        $countryName = $lookup->getFilterValue('countryName');

        $lookup->addFilterField(new MTextField('personId', $personId, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('personName', $personName, _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('personLastName', $personLastName, _M('Sobrenome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('location', $location, _M('Logradouro', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('cityName', $cityName, _M('Cidade', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(fields::country($countryId));

        global $page;
        $page->onLoad('document.' . $page->name . '.personName.focus()');

        $columns[] = new DataGridColumn('personId', _M('Código', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('personName', _M('Nome', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('location', _M('Logradouro', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('complement', _M('Complemento', $module), 'left', true, null, false);
        $columns[] = new DataGridColumn('neighborhood', _M('Bairro', $module), 'left', true, null, false);
        $columns[] = new DataGridColumn('cityId', _M('Código da cidade', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('cityName', _M('Nome da cidade', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('stateId', _M('Estado', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('countryId', _M('Código do país', $module), 'left', true, null, false);
        $columns[] = new DataGridColumn('countryName', _M('País', $module), 'left', true, null, true);

        $sql = 'SELECT A.personId,
                       A.name AS personName,
                       D.name || \' \' || A.location AS location,
                       A.complement,
                       A.neighborhood,
                       A.cityId,
                       B.name AS cityName,
                       B.stateId,
                       B.countryId,
                       C.name AS countryName
             FROM ONLY basPhysicalPersonStudent A
             LEFT JOIN basCity B
                    ON ( B.cityId = A.cityId )
             LEFT JOIN basCountry C
                    ON ( C.countryId = B.countryId )
             LEFT JOIN basLocationType D
                    ON ( A.locationTypeId = D.locationTypeId )';

        if ( strlen($personId) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $args[] = $personId;
        }

        if ( strlen($personName) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?)';
            $args[] = $personName . '%';
        }

        if ( strlen($personLastName) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?)';
            $args[] = '%' . $personLastName . '%';
        }

        if ( strlen($location) > 0 )
        {
            $where .= ' AND UNACCENT(A.location) ILIKE UNACCENT(?)';
            $args[] = $location . '%';
        }

        if ( strlen($complement) > 0 )
        {
            $where .= ' AND A.complement ILIKE ?';
            $args[] = $complement . '%';
        }

        if ( strlen($neighborhood) > 0 )
        {
            $where .= ' AND UNACCENT(A.neighborhood) ILIKE UNACCENT(?)';
            $args[] = $neighborhood . '%';
        }

        if ( strlen($cityId) > 0 )
        {
            $where .= ' AND A.cityId = ?';
            $args[] = $cityId;
        }

        if ( strlen($cityName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $cityName . '%';
        }

        if ( strlen($stateId) > 0 )
        {
            $where .= ' AND B.stateId ILIKE ?';
            $args[] = $stateId;
        }

        if ( strlen($countryId) > 0 )
        {
            $where .= ' AND C.countryId = ?';
            $args[] = $countryId;
        }

        if ( strlen($countryName) > 0 )
        {
            $where .= ' AND UNACCENT(C.name) ILIKE UNACCENT(?)';
            $args[] = $countryName . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5) . '
                   ORDER BY A.name';
        }
        else
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisa por alunos',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for legal person
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteLegalPerson(&$context)
    {
        $sql = 'SELECT A.name AS personName,
                      D.name || \' \' ||  A.location AS location,
                       A.complement,
                       A.neighborhood,
                       A.cityId,
                       B.name AS cityName,
                       B.stateId,
                       B.countryId,
                       C.name AS countryName
             FROM ONLY basLegalPerson A
             LEFT JOIN basCity B
                    ON ( B.cityId = A.cityId )
             LEFT JOIN basCountry C
                    ON ( C.countryId = B.countryId )
             LEFT JOIN basLocationType D
                    ON ( A.locationTypeId = D.locationTypeId)
                 WHERE A.personId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for legal person
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupLegalPerson(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class',$module);
        $MIOLO->conf->loadConf($module);

        $personId = $lookup->getFilterValue('personId');
        $personName = $lookup->getFilterValue('personName') == '' ? '%' : $lookup->getFilterValue('personName');
        $location = $lookup->getFilterValue('location');
        $complement = $lookup->getFilterValue('complement');
        $neighborhood = $lookup->getFilterValue('neighborhood');
        $cityId = $lookup->getFilterValue('cityId');
        $cityName = $lookup->getFilterValue('cityName');
        $stateId = $lookup->getFilterValue('stateId');
        $countryId = $lookup->getFilterValue('countryId');
        $countryName = $lookup->getFilterValue('countryName');
        $legalPersonTypeId = $lookup->getFilterValue('legalPersonTypeId');

        $lookup->addFilterField(new MTextField('personId', $personId, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('personName', $personName, _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('location', $location, _M('Logradouro', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('cityName', $cityName, _M('Cidade', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(fields::country($countryId));
        $lookup->addFilterField(fields::legalLegalPersonType());

        global $page;
        $page->onLoad('document.' . $page->name . '.personName.focus()');

        $columns[] = new DataGridColumn('personId', _M('Código', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('personName', _M('Nome', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('location', _M('Logradouro', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('complement', _M('Complemento', $module), 'left', true, null, false);
        $columns[] = new DataGridColumn('neighborhood', _M('Bairro', $module), 'left', true, null, false);
        $columns[] = new DataGridColumn('cityId', _M('Código da cidade', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('cityName', _M('Nome da cidade', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('stateId', _M('Estado', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('countryId', _M('Código do país', $module), 'left', true, null, false);
        $columns[] = new DataGridColumn('countryName', _M('País', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('legalPersonTypeId', _M('Tipo de pessoa jurídica', $module), 'left', true, null, true);

        $sql = 'SELECT A.personId,
                       A.name AS personName,
                       D.name || \' \' || A.location AS location,
                       A.complement,
                       A.neighborhood,
                       A.cityId,
                       B.name AS cityName,
                       B.stateId,
                       B.countryId,
                       C.name AS countryName
             FROM ONLY basLegalPerson A
             LEFT JOIN basCity B
                    ON ( B.cityId = A.cityId )
             LEFT JOIN basCountry C
                    ON ( C.countryId = B.countryId )
             LEFT JOIN basLocationType D
                    ON (A.locationTypeId = D.locationTypeId)';

        if ( strlen($personId) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $args[] = $personId;
        }

        if ( strlen($personName) > 0 )
        {
            $where .= ' AND ( UNACCENT(A.name) ILIKE UNACCENT(?) OR UNACCENT(A.shortName) ILIKE UNACCENT(?) OR UNACCENT(A.fakeName) ILIKE UNACCENT(?) )';
            $args[] = $personName . '%';
            $args[] = $personName . '%';
            $args[] = $personName . '%';
        }

        if ( strlen($location) > 0 )
        {
            $where .= ' AND UNACCENT(A.location) ILIKE UNACCENT(?)';
            $args[] = $location . '%';
        }

        if ( strlen($complement) > 0 )
        {
            $where .= ' AND A.complement ILIKE ?';
            $args[] = $complement . '%';
        }

        if ( strlen($neighborhood) > 0 )
        {
            $where .= ' AND UNACCENT(A.neighborhood) ILIKE UNACCENT(?)';
            $args[] = $neighborhood . '%';
        }

        if ( strlen($cityId) > 0 )
        {
            $where .= ' AND A.cityId = ?';
            $args[] = $cityId;
        }

        if ( strlen($cityName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $cityName . '%';
        }

        if ( strlen($stateId) > 0 )
        {
            $where .= ' AND B.stateId ILIKE ?';
            $args[] = $stateId;
        }

        if ( strlen($countryId) > 0 )
        {
            $where .= ' AND C.countryId = ?';
            $args[] = $countryId;
        }

        if ( strlen($countryName) > 0 )
        {
            $where .= ' AND UNACCENT(C.name) ILIKE UNACCENT(?)';
            $args[] = $countryName . '%';
        }
        if ( strlen($legalPersonTypeId) > 0 )
        {
            $where .= ' AND A.legalPersonTypeId = ?';
            $args[] = $legalPersonTypeId;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5) . '
                   ORDER BY A.name';
        }
        else
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar pessoa jurídica',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    public function autoCompleteLegalPersonInstitution(&$context)
    {
        $sql = 'SELECT A.name as personName,
                       D.name || \' \' || A.location AS location,
                       A.complement,
                       A.neighborhood,
                       A.cityId,
                       B.name AS cityName,
                       B.stateId,
                       B.countryId,
                       C.name AS countryName,
                       A.shortName
             FROM ONLY basLegalPerson A
             LEFT JOIN basCity B
                    ON ( B.cityId = A.cityId )
             LEFT JOIN basCountry C
                    ON ( C.countryId = B.countryId )
             LEFT JOIN basLocationType D
                    ON ( A.locationTypeId = D.locationTypeId)
                 WHERE A.personId = ?
                   AND A.legalPersonTypeId = ' . SAGU::getParameter('BASIC', 'LEGAL_PERSON_TYPE_INSTITUTIONS') . '';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for legal person
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupLegalPersonInstitution(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class',$module);
        $MIOLO->conf->loadConf($module);

        $personId = $lookup->getFilterValue('personId');
        $personName = $lookup->getFilterValue('personName');
        $location = $lookup->getFilterValue('location');
        $complement = $lookup->getFilterValue('complement');
        $neighborhood = $lookup->getFilterValue('neighborhood');
        $cityId = $lookup->getFilterValue('cityId');
        $cityName = $lookup->getFilterValue('cityName');
        $stateId = $lookup->getFilterValue('stateId');
        $countryId = $lookup->getFilterValue('countryId');
        $countryName = $lookup->getFilterValue('countryName');

        $lookup->addFilterField(new MTextField('personId', $personId, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('personName', $personName, _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('location', $location, _M('Logradouro', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('cityName', $cityName, _M('Cidade', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(fields::country($countryId));

        global $page;
        $page->onLoad('document.' . $page->name . '.personName.focus()');

        $columns[] = new DataGridColumn('personId', _M('Código', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('personName', _M('Nome', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('location', _M('Logradouro', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('complement', _M('Complemento', $module), 'left', true, null, false);
        $columns[] = new DataGridColumn('neighborhood', _M('Bairro', $module), 'left', true, null, false);
        $columns[] = new DataGridColumn('cityId', _M('Código da cidade', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('cityName', _M('Nome da cidade', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('stateId', _M('Estado', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('countryId', _M('Código do país', $module), 'left', true, null, false);
        $columns[] = new DataGridColumn('countryName', _M('País', $module), 'left', true, null, true);

        $sql = 'SELECT A.personId,
                       replace(A.name, \'"\', \'\') as personName,
                       D.name || \' \' || A.location AS location,
                       A.complement,
                       A.neighborhood,
                       A.cityId,
                       B.name AS cityName,
                       B.stateId,
                       B.countryId,
                       C.name AS countryName,
                       A.shortName
             FROM ONLY basLegalPerson A
             LEFT JOIN basCity B
                    ON ( B.cityId = A.cityId )
             LEFT JOIN basCountry C
                    ON ( C.countryId = B.countryId )
             LEFT JOIN basLocationType D
                    ON ( A.locationTypeId = D.locationTypeId)';

        if ( strlen($personId) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $args[] = $personId;
        }

        if ( strlen($personName) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?)';
            $args[] = $personName . '%';
        }

        if ( strlen($location) > 0 )
        {
            $where .= ' AND UNACCENT(A.location) ILIKE UNACCENT(?)';
            $args[] = $location . '%';
        }

        if ( strlen($complement) > 0 )
        {
            $where .= ' AND A.complement ILIKE ?';
            $args[] = $complement . '%';
        }

        if ( strlen($neighborhood) > 0 )
        {
            $where .= ' AND UNACCENT(A.neighborhood) ILIKE UNACCENT(?)';
            $args[] = $neighborhood . '%';
        }

        if ( strlen($cityId) > 0 )
        {
            $where .= ' AND A.cityId = ?';
            $args[] = $cityId;
        }

        if ( strlen($cityName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $cityName . '%';
        }

        if ( strlen($stateId) > 0 )
        {
            $where .= ' AND B.stateId ILIKE ?';
            $args[] = $stateId;
        }

        if ( strlen($countryId) > 0 )
        {
            $where .= ' AND C.countryId = ?';
            $args[] = $countryId;
        }

        if ( strlen($countryName) > 0 )
        {
            $where .= ' AND UNACCENT(C.name) ILIKE UNACCENT(?)';
            $args[] = $countryName . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE A.legalPersonTypeId = ' . SAGU::getParameter('BASIC', 'LEGAL_PERSON_TYPE_INSTITUTIONS') . ' ' . $where . '
                   ORDER BY A.name';
        }
        else
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar instituição',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for physical person
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompletePhysicalPerson(&$context)
    {
        $filterOnlyPreceptor = MIOLO::_REQUEST('filterOnlyPreceptor');
        $filterOnlyPreceptorMedico = MIOLO::_REQUEST('filterOnlyPreceptorMedico');
        $optionId = MIOLO::_REQUEST('optionId');
        $selectiveProcessId = MIOLO::_REQUEST('selectiveProcessId');

        $sql = 'SELECT A.name AS personName,
                       H.name || \' \' || A.location AS location,
                       A.complement,
                       A.neighborhood,
                       A.cityId,
                       B.name AS cityName,
                       B.stateId,
                       B.countryId,
                       C.name AS countryName,
                       D.externalCourseIdHs,
                       E.name,
                       D.institutionIdHs,
                       F.name,
                       D.cityIdHs,
                       G.name,
                       D.yearHs,
                       D.isInsured,
                       D.passive,
                       I.content AS CPF,
                       A.personId
             FROM ONLY basPhysicalPerson A
             LEFT JOIN basCity B
                    ON ( B.cityId = A.cityId )
             LEFT JOIN basCountry C
                    ON ( C.countryId = B.countryId )
             LEFT JOIN basPhysicalPersonStudent D
                    ON ( D.personId = A.personId )
             LEFT JOIN acdExternalCourse E
                    ON (E.externalCourseId = D.externalCourseIdHs)
             LEFT JOIN basLegalPerson F
                    ON (F.personId = D.institutionIdHs)
             LEFT JOIN basCity G
                    ON (G.cityId = D.cityIdHs)
             LEFT JOIN basLocationType H
                    ON (A.locationTypeId = H.locationTypeId)
             LEFT JOIN basDocument I
                    ON (I.personId = A.personId
                        AND I.documentTypeId = ' . SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF') . ')
                 WHERE A.personId = ?';

        // Filtra apenas por preceptores
        if ( $filterOnlyPreceptor == DB_TRUE )
        {
            $sql .= ' AND EXISTS(SELECT 1 FROM res.preceptoria PRE WHERE PRE.personId = A.personId )';
        }

        //Filtra apenas por preceptores da residencia medica
        if ( $filterOnlyPreceptorMedico == DB_TRUE )
        {
            $sql .= ' AND EXISTS(SELECT 1 FROM med.preceptoria PRE WHERE PRE.personId = A.personId )';
        }

        // Filtra apenas por inscritos em determinada opção de curso
        if ( strlen($optionId) > 0 )
        {
            $where .= ' AND EXISTS(SELECT 1
                                     FROM spr.subscription
                               INNER JOIN spr.subscriptionoption
                                    USING (subscriptionid)
                                    WHERE personid = A.personId
                                      AND optionid = ? ) ';
            $args[] = $optionId;
        }

        // Filtra apenas por inscritos em determinado processo seletivo
        if ( strlen($selectiveProcessId) > 0 )
        {
            $where .= ' AND EXISTS(SELECT 1 FROM spr.subscription WHERE personId = A.personId AND selectiveprocessid = ? ) ';
            $args[] = $selectiveProcessId;
        }

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for physical person
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupPhysicalPerson(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->conf->loadConf($module);

        $filterOnlyPreceptor = $lookup->getFilterValue('filterOnlyPreceptor');
        $filterOnlyPreceptorMedico = $lookup->getFilterValue('filterOnlyPreceptorMedico');
        $filterOnlySubscription = $lookup->getFilterValue('filterOnlySubscription');
        $personId = $lookup->getFilterValue('personId');
        $personName = $lookup->getFilterValue('personName') == null ? '%' : $lookup->getFilterValue('personName');
        $cpf = $lookup->getFilterValue('_cpf');
        $username = $lookup->getFilterValue('username');
        $personLastName = $lookup->getFilterValue('personLastName');
        $location = $lookup->getFilterValue('location');
        $complement = $lookup->getFilterValue('complement');
        $neighborhood = $lookup->getFilterValue('neighborhood');
        $cityId = $lookup->getFilterValue('cityId');
        $cityName = $lookup->getFilterValue('cityName');
        $stateId = $lookup->getFilterValue('stateId');
        $countryId = $lookup->getFilterValue('countryId');
        $countryName = $lookup->getFilterValue('countryName');
        $disableInsertNew = $lookup->getFilterValue('disableInsertNew');
        $optionId = $lookup->getFilterValue('optionId');
        $selectiveProcessId = $lookup->getFilterValue('selectiveProcessId');

        $lookup->addFilterField(new MTextField('personId', $personId, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('personName', $personName, _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('personLastName', $personLastName, _M('Sobrenome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        $cpfF = new MTextField('_cpf', $cpf, _M('CPF', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE'));
        $cpfF->addAttribute('placeholder', 'Ex: 999.999.999-99');

        $lookup->addFilterField($cpfF);
        $lookup->addFilterField(new MTextField('username', $username, _M('Usuário', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE')));
        $lookup->addFilterField(new MTextField('location', $location, _M('Logradouro', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('cityName', $cityName, _M('Cidade', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(fields::country($countryId));
        $lookup->addFilterField(new SHiddenField('filterOnlyPreceptor', $filterOnlyPreceptor));
        $lookup->addFilterField(new SHiddenField('filterOnlyPreceptorMedico', $filterOnlyPreceptorMedico));
        $lookup->addFilterField(new SHiddenField('filterOnlySubscription', $filterOnlySubscription));
        $lookup->addFilterField(new SHiddenField('disableInsertNew', $disableInsertNew));
        $lookup->addFilterField(new SHiddenField('optionId', $optionId));
        $lookup->addFilterField(new SHiddenField('selectiveProcessId', $selectiveProcessId));

        global $page;
        $page->onLoad('document.' . $page->name . '.personName.focus()');

        $columns[] = new MDataGridColumn('personId', _M('Código', $module), 'right', true, null, true);
        $columns[] = new MDataGridColumn('personName', _M('Nome', $module), 'left', true, null, true);
        $columns[] = new MDataGridColumn('location', _M('Logradouro', $module), 'left', true, null, true);
        $columns[] = new MDataGridColumn('complement', _M('Complemento', $module), 'left', true, null, false);
        $columns[] = new MDataGridColumn('neighborhood', _M('Bairro', $module), 'left', true, null, false);
        $columns[] = new MDataGridColumn('cityId', _M('Código da cidade', $module), 'left', true, null, true);
        $columns[] = new MDataGridColumn('cityName', _M('Nome da cidade', $module), 'left', true, null, true);
        $columns[] = new MDataGridColumn('stateId', _M('Estado', $module), 'left', true, null, true);
        $columns[] = new MDataGridColumn('countryId', _M('Código do país', $module), 'left', true, null, false);
        $columns[] = new MDataGridColumn('countryName', _M('País', $module), 'left', true, null, true);
        $columns[] = new MDataGridColumn('externalCourseIdHs', _M('Código do curso de ensino médio', $module), 'left', true, null, false);
        $columns[] = new MDataGridColumn('externalCourseNameHs', _M('Nome do curso de ensino médio', $module), 'left', true, null, false);
        $columns[] = new MDataGridColumn('institutionIdHs', _M('Código da instituição do ensino médio', $module), 'left', true, null, false);
        $columns[] = new MDataGridColumn('institutionNameHs', _M('Nome da instituição do ensino médio', $module), 'left', true, null, false);
        $columns[] = new MDataGridColumn('cityIdHs', _M('Código da cidade do ensino médio', $module), 'left', true, null, false);
        $columns[] = new MDataGridColumn('cityNameHs', _M('Nome da cidade do ensino médio', $module), 'left', true, null, false);
        $columns[] = new MDataGridColumn('yearHs', _M('Ano do ensino médio', $module), 'left', true, null, false);
        $columns[] = new MDataGridColumn('isInsured', _M('Está segurado', $module), 'left', true, null, false);
        $columns[] = new MDataGridColumn('passive', _M('Passivo', $module), 'left', true, null, false);
        $columns[] = new MDataGridColumn('cpf', _M('CPF', $module), 'left', true, null, true);
        $columns[] = new MDataGridColumn('sex', _M('Sexo', $module), 'left', true, null, true);

        $sql = "SELECT A.personId,
                       A.name AS personName,
                       H.name || ' ' || A.location AS location,
                       A.complement,
                       A.neighborhood,
                       A.cityId,
                       B.name AS cityName,
                       B.stateId,
                       B.countryId,
                       C.name AS countryName,
                       D.externalCourseIdHs,
                       E.name,
                       D.institutionIdHs,
                       F.name,
                       D.cityIdHs,
                       G.name,
                       D.yearHs,
                       D.isInsured,
                       D.passive,
                       I.content AS CPF,
                       A.sex
             FROM ONLY basPhysicalPerson A
             LEFT JOIN basCity B
                    ON ( B.cityId = A.cityId )
             LEFT JOIN basCountry C
                    ON ( C.countryId = B.countryId )
             LEFT JOIN basPhysicalPersonStudent D
                    ON ( D.personId = A.personId )
             LEFT JOIN acdExternalCourse E
                    ON (E.externalCourseId = D.externalCourseIdHs)
             LEFT JOIN basLegalPerson F
                    ON (F.personId = D.institutionIdHs)
             LEFT JOIN basCity G
                    ON (G.cityId = D.cityIdHs)
             LEFT JOIN basLocationType H
                    ON (A.locationTypeId = H.locationTypeId)
             LEFT JOIN basDocument I
                    ON (I.personId = A.personId
                    AND I.documentTypeId = GETPARAMETER('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF')::int)";

        if ( strlen($personId) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $args[] = $personId;
        }

        if ( strlen($personName) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?)';
            $args[] = $personName . '%';
        }

        if ( strlen($personLastName) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?)';
            $args[] = '%' . $personLastName . '%';
        }

        if ( strlen($location) > 0 )
        {
            $where .= ' AND UNACCENT(A.location) ILIKE UNACCENT(?)';
            $args[] = $location . '%';
        }

        if ( strlen($complement) > 0 )
        {
            $where .= ' AND A.complement ILIKE ?';
            $args[] = $complement . '%';
        }

        if ( strlen($neighborhood) > 0 )
        {
            $where .= ' AND A.neighborhood ILIKE ?';
            $args[] = $neighborhood . '%';
        }

        if ( strlen($cityId) > 0 )
        {
            $where .= ' AND A.cityId = ?';
            $args[] = $cityId;
        }

        if ( strlen($cityName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $cityName . '%';
        }

        if ( strlen($stateId) > 0 )
        {
            $where .= ' AND B.stateId ILIKE ?';
            $args[] = $stateId;
        }

        if ( strlen($countryId) > 0 )
        {
            $where .= ' AND C.countryId = ?';
            $args[] = $countryId;
        }

        if ( strlen($countryName) > 0 )
        {
            $where .= ' AND UNACCENT(C.name) ILIKE UNACCENT(?)';
            $args[] = $countryName . '%';
        }

        if ( strlen($cpf) > 0 )
        {
            $where .= ' AND I.content ILIKE ?';
            $args[] = $cpf . '%';
        }

        if ( strlen($username) > 0 )
        {
            $where .= ' AND A.mioloUserName = ?';
            $args[] = $username;
        }

        // Filtra apenas por preceptores
        if ( $filterOnlyPreceptor == DB_TRUE )
        {
            $where .= ' AND EXISTS(SELECT 1 FROM res.preceptoria PRE WHERE PRE.personId = A.personId )';
        }

        // Filtra apenas por preceptores medicos
        if ( $filterOnlyPreceptorMedico == DB_TRUE )
        {
            $where .= ' AND EXISTS(SELECT 1 FROM med.preceptoria PRE WHERE PRE.personId = A.personId )';
        }

        // Filtra apenas por inscritos em processo seletivo
        if ( $filterOnlySubscription == DB_TRUE )
        {
            $where .= ' AND EXISTS(SELECT 1 FROM spr.subscription S WHERE S.personId = A.personId)';
        }

        // Filtra apenas por inscritos em determinada opção de curso
        if ( strlen($optionId) > 0 )
        {
            $where .= ' AND EXISTS(SELECT 1
                                     FROM spr.subscription
                               INNER JOIN spr.subscriptionoption
                                    USING (subscriptionid)
                                    WHERE personid = A.personId
                                      AND optionid = ? ) ';
            $args[] = $optionId;
        }

        // Filtra apenas por inscritos em determinado processo seletivo
        if ( strlen($selectiveProcessId) > 0 )
        {
            $where .= ' AND EXISTS(SELECT 1 FROM spr.subscription WHERE personId = A.personId AND selectiveprocessid = ? ) ';
            $args[] = $selectiveProcessId;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5) . '
                   ORDER BY A.name';
        }
        else
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar pessoa física',$module), 15, 0);
        $lookup->grid->setIsScrollable();
        /*
        if ( $disableInsertNew != DB_TRUE )
        {
            $lookup->grid->header[] = '<b><center><a href="' . $MIOLO->getActionURL('basic', 'physicalPersonLookup', '', $_GET) . '">' . _M('Inserir novo', 'basic') . '</a></center></b><br>';
        }*/
    }

    /**
     * Auto complete for physical person
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompletePersonFinanceConsultation(&$context)
    {
        $filterOnlyPreceptor = MIOLO::_REQUEST('filterOnlyPreceptor');

        $sql = 'SELECT A.name AS personName,
                       H.name || \' \' || A.location AS location,
                       A.complement,
                       A.neighborhood,
                       A.cityId,
                       B.name AS cityName,
                       B.stateId,
                       B.countryId,
                       C.name AS countryName,
                       D.externalCourseIdHs,
                       E.name,
                       D.institutionIdHs,
                       F.name,
                       D.cityIdHs,
                       G.name,
                       D.yearHs,
                       D.isInsured,
                       D.passive,
                       I.content AS CPF,
                       A.personId
             FROM ONLY basPerson A
             LEFT JOIN basCity B
                    ON ( B.cityId = A.cityId )
             LEFT JOIN basCountry C
                    ON ( C.countryId = B.countryId )
             LEFT JOIN basPhysicalPersonStudent D
                    ON ( D.personId = A.personId )
             LEFT JOIN acdExternalCourse E
                    ON (E.externalCourseId = D.externalCourseIdHs)
             LEFT JOIN basLegalPerson F
                    ON (F.personId = D.institutionIdHs)
             LEFT JOIN basCity G
                    ON (G.cityId = D.cityIdHs)
             LEFT JOIN basLocationType H
                    ON (A.locationTypeId = H.locationTypeId)
             LEFT JOIN basDocument I
                    ON (I.personId = A.personId
                        AND I.documentTypeId = ' . SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF') . ')
                 WHERE A.personId = ?';

        // Filtra apenas por preceptores
        if ( $filterOnlyPreceptor == DB_TRUE )
        {
            $sql .= ' AND EXISTS(SELECT 1 FROM res.preceptoria PRE WHERE PRE.personId = A.personId )';
        }

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for physical person
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupPersonFinanceConsultation(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->conf->loadConf($module);

        $filterOnlyPreceptor = $lookup->getFilterValue('filterOnlyPreceptor');
        $filterOnlySubscription = $lookup->getFilterValue('filterOnlySubscription');
        $personId = $lookup->getFilterValue('_personId');
        $personName = $lookup->getFilterValue('personName');
        $personLastName = $lookup->getFilterValue('personLastName');
        $location = $lookup->getFilterValue('location');
        $complement = $lookup->getFilterValue('complement');
        $neighborhood = $lookup->getFilterValue('neighborhood');
        $cityId = $lookup->getFilterValue('cityId');
        $cityName = $lookup->getFilterValue('cityName');
        $stateId = $lookup->getFilterValue('stateId');
        $countryId = $lookup->getFilterValue('countryId');
        $countryName = $lookup->getFilterValue('countryName');
        $cpf = $lookup->getFilterValue('cpf');
        $disableInsertNew = $lookup->getFilterValue('disableInsertNew');

        $lookup->addFilterField(new MTextField('_personId', $personId, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('personName', $personName, _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('personLastName', $personLastName, _M('Sobrenome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('location', $location, _M('Logradouro', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('cityName', $cityName, _M('Cidade', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(fields::country($countryId));
        $lookup->addFilterField(new SHiddenField('filterOnlyPreceptor', $filterOnlyPreceptor));
        $lookup->addFilterField(new SHiddenField('filterOnlySubscription', $filterOnlySubscription));
        $lookup->addFilterField(new SHiddenField('disableInsertNew', $disableInsertNew));

        global $page;
        $page->onLoad('document.' . $page->name . '.personName.focus()');

        $columns[] = new MDataGridColumn('personId', _M('Código', $module), 'right', true, null, true);
        $columns[] = new MDataGridColumn('personName', _M('Nome', $module), 'left', true, null, true);
        $columns[] = new MDataGridColumn('location', _M('Logradouro', $module), 'left', true, null, true);
        $columns[] = new MDataGridColumn('complement', _M('Complemento', $module), 'left', true, null, false);
        $columns[] = new MDataGridColumn('neighborhood', _M('Bairro', $module), 'left', true, null, false);
        $columns[] = new MDataGridColumn('cityId', _M('Código da cidade', $module), 'left', true, null, true);
        $columns[] = new MDataGridColumn('cityName', _M('Nome da cidade', $module), 'left', true, null, true);
        $columns[] = new MDataGridColumn('stateId', _M('Estado', $module), 'left', true, null, true);
        $columns[] = new MDataGridColumn('countryId', _M('Código do país', $module), 'left', true, null, false);
        $columns[] = new MDataGridColumn('countryName', _M('País', $module), 'left', true, null, true);
        $columns[] = new MDataGridColumn('externalCourseIdHs', _M('Código do curso de ensino médio', $module), 'left', true, null, false);
        $columns[] = new MDataGridColumn('externalCourseNameHs', _M('Nome do curso de ensino médio', $module), 'left', true, null, false);
        $columns[] = new MDataGridColumn('institutionIdHs', _M('Código da instituição do ensino médio', $module), 'left', true, null, false);
        $columns[] = new MDataGridColumn('institutionNameHs', _M('Nome da instituição do ensino médio', $module), 'left', true, null, false);
        $columns[] = new MDataGridColumn('cityIdHs', _M('Código da cidade do ensino médio', $module), 'left', true, null, false);
        $columns[] = new MDataGridColumn('cityNameHs', _M('Nome da cidade do ensino médio', $module), 'left', true, null, false);
        $columns[] = new MDataGridColumn('yearHs', _M('Ano do ensino médio', $module), 'left', true, null, false);
        $columns[] = new MDataGridColumn('isInsured', _M('Está segurado', $module), 'left', true, null, false);
        $columns[] = new MDataGridColumn('passive', _M('Passivo', $module), 'left', true, null, false);
        $columns[] = new MDataGridColumn('cpf', _M('CPF', $module), 'left', true, null, true);
        $columns[] = new MDataGridColumn('sex', _M('Sexo', $module), 'left', true, null, true);

        $sql = 'SELECT A.personId,
                       A.name AS personName,
                       H.name || \' \' || A.location AS location,
                       A.complement,
                       A.neighborhood,
                       A.cityId,
                       B.name AS cityName,
                       B.stateId,
                       B.countryId,
                       C.name AS countryName,
                       D.externalCourseIdHs,
                       E.name,
                       D.institutionIdHs,
                       F.name,
                       D.cityIdHs,
                       G.name,
                       D.yearHs,
                       D.isInsured,
                       D.passive,
                       I.content AS CPF,
                       D.sex
             FROM ONLY basPerson A
             LEFT JOIN basCity B
                    ON ( B.cityId = A.cityId )
             LEFT JOIN basCountry C
                    ON ( C.countryId = B.countryId )
             LEFT JOIN basPhysicalPersonStudent D
                    ON ( D.personId = A.personId )
             LEFT JOIN acdExternalCourse E
                    ON (E.externalCourseId = D.externalCourseIdHs)
             LEFT JOIN basLegalPerson F
                    ON (F.personId = D.institutionIdHs)
             LEFT JOIN basCity G
                    ON (G.cityId = D.cityIdHs)
             LEFT JOIN basLocationType H
                    ON (A.locationTypeId = H.locationTypeId)
             LEFT JOIN basDocument I
                    ON (I.personId = A.personId
                        AND I.documentTypeId = ' . SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF') . ')';

        if ( strlen($personId) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $args[] = $personId;
        }

        if ( strlen($personName) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?)';
            $args[] = $personName . '%';
        }

        if ( strlen($personLastName) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?)';
            $args[] = '%' . $personLastName . '%';
        }

        if ( strlen($location) > 0 )
        {
            $where .= ' AND UNACCENT(A.location) ILIKE UNACCENT(?)';
            $args[] = $location . '%';
        }

        if ( strlen($complement) > 0 )
        {
            $where .= ' AND A.complement ILIKE ?';
            $args[] = $complement . '%';
        }

        if ( strlen($neighborhood) > 0 )
        {
            $where .= ' AND A.neighborhood ILIKE ?';
            $args[] = $neighborhood . '%';
        }

        if ( strlen($cityId) > 0 )
        {
            $where .= ' AND A.cityId = ?';
            $args[] = $cityId;
        }

        if ( strlen($cityName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $cityName . '%';
        }

        if ( strlen($stateId) > 0 )
        {
            $where .= ' AND B.stateId ILIKE ?';
            $args[] = $stateId;
        }

        if ( strlen($countryId) > 0 )
        {
            $where .= ' AND C.countryId = ?';
            $args[] = $countryId;
        }

        if ( strlen($countryName) > 0 )
        {
            $where .= ' AND UNACCENT(C.name) ILIKE UNACCENT(?)';
            $args[] = $countryName . '%';
        }

        if ( strlen($cpf) > 0 )
        {
            $where .= ' AND I.content = ?';
            $args[] = $cpf;
        }

        // Filtra apenas por preceptores
        if ( $filterOnlyPreceptor == DB_TRUE )
        {
            $where .= ' AND EXISTS(SELECT 1 FROM res.preceptoria PRE WHERE PRE.personId = A.personId )';
        }

        // Filtra apenas por inscritos em processo seletivo
        if ( $filterOnlySubscription == DB_TRUE )
        {
            $where .= ' AND EXISTS(SELECT 1 FROM spr.subscription S WHERE S.personId = A.personId)';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5) . '
                   ORDER BY A.name';
        }
        else
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar pessoa',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }


    /**
     * Auto complete for searching physical person by CPF number
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompletePhysicalPersonCPF(&$context)
    {
        $sql = ' SELECT A.personId,
                        B.name AS personName
                   FROM basDocument A
             INNER JOIN ONLY basPhysicalPerson B
                     ON B.personId = A.personId
                  WHERE A.documentTypeId = ' . SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF') . '
                    AND LENGTH(A.content) > 0
                    AND UNMASK(A.content) = UNMASK(?)';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for searching physical person by CPF number
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupPhysicalPersonCPF(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->conf->loadConf($module);

        $cpf = $lookup->getFilterValue('cpf');
        $personId = $lookup->getFilterValue('personId');
        $personName = $lookup->getFilterValue('personName');

        $lookup->addFilterField(new MTextField('cpf', $cpf, _M('CPF', $module), 16));
        $lookup->addFilterField(new MTextField('personId', $personId, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('personName', $personName, _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        global $page;
        $page->onLoad('document.getElementById(\'cpf\').focus()');

        $columns[] = new MDataGridColumn('cpf', _M('CPF', $module), 'left', true, null, true);
        $columns[] = new MDataGridColumn('personId', _M('Código', $module), 'right', true, null, true);
        $columns[] = new MDataGridColumn('personName', _M('Nome', $module), 'left', true, null, true);

        $sql = ' SELECT A.content AS cpf,
                        A.personId,
                        B.name AS personName
                   FROM basDocument A
             INNER JOIN ONLY basPhysicalPerson B
                     ON B.personId = A.personId
                  WHERE A.documentTypeId = ' . SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF') . '
                    AND LENGTH(A.content) > 0';

        if ( strlen($cpf) > 0 )
        {
            $where .= ' AND UNMASK(A.content) = UNMASK(?)';
            $args[] = $cpf;
        }

        if ( strlen($personId) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $args[] = $personId;
        }

        if ( strlen($personName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $personName . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= $where . ' ORDER BY B.name';
            }
        else
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql, $args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Procurar pessoa física por CPF',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }


    /**
     * Auto complete for physical person student
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompletePhysicalPersonStudent(&$context)
    {
        $sql = 'SELECT A.name AS personName,
                       D.name || \' \' || A.location AS location,
                       A.complement,
                       A.neighborhood,
                       A.cityId,
                       B.name AS cityName,
                       B.stateId,
                       B.countryId,
                       C.name AS countryName
             FROM ONLY basPhysicalPersonStudent A
             LEFT JOIN basCity B
                    ON ( B.cityId = A.cityId )
             LEFT JOIN basCountry C
                    ON ( C.countryId = B.countryId )
             LEFT JOIN basLocationType D
                    ON ( A.locationTypeId = D.locationTypeId )
                 WHERE A.personId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for physical person student
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupPhysicalPersonStudent(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class',$module);
        $MIOLO->conf->loadConf($module);

        $personId = $lookup->getFilterValue('personId');
        $personName = $lookup->getFilterValue('personName');
        $personLastName = $lookup->getFilterValue('personLastName');
        $location = $lookup->getFilterValue('location');
        $complement = $lookup->getFilterValue('complement');
        $neighborhood = $lookup->getFilterValue('neighborhood');
        $cityId = $lookup->getFilterValue('cityId');
        $cityName = $lookup->getFilterValue('cityName');
        $stateId = $lookup->getFilterValue('stateId');
        $countryId = $lookup->getFilterValue('countryId');
        $countryName = $lookup->getFilterValue('countryName');
        $cpf = $lookup->getFilterValue('cpf');
        $username = $lookup->getFilterValue('username');

        $lookup->addFilterField(new MTextField('personId', $personId, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('personName', $personName, _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('personLastName', $personLastName, _M('Sobrenome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('cpf', $cpf, _M('CPF', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('username', $username, _M('Usuário', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE')));
        $lookup->addFilterField(new MTextField('location', $location, _M('Logradouro', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('cityName', $cityName, _M('Cidade', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(fields::country($countryId));

        global $page;
        $page->onLoad('document.' . $page->name . '.personName.focus()');

        $columns[] = new DataGridColumn('personId', _M('Código', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('personName', _M('Nome', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('location', _M('Logradouro', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('complement', _M('Complemento', $module), 'left', true, null, false);
        $columns[] = new DataGridColumn('neighborhood', _M('Bairro', $module), 'left', true, null, false);
        $columns[] = new DataGridColumn('cityId', _M('Código da cidade', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('cityName', _M('Nome da cidade', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('stateId', _M('Estado', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('countryId', _M('Código do país', $module), 'left', true, null, false);
        $columns[] = new DataGridColumn('countryName', _M('País', $module), 'left', true, null, true);

        $sql = "SELECT A.personId,
                       A.name AS personName,
                       D.name || ' ' || A.location AS location,
                       A.complement,
                       A.neighborhood,
                       A.cityId,
                       B.name AS cityName,
                       B.stateId,
                       B.countryId,
                       C.name AS countryName
             FROM ONLY basPhysicalPersonStudent A
             LEFT JOIN basCity B
                    ON ( B.cityId = A.cityId )
             LEFT JOIN basCountry C
                    ON ( C.countryId = B.countryId )
             LEFT JOIN basLocationType D
                    ON ( A.locationTypeId = D.locationTypeId )
             LEFT JOIN basDocument I
                    ON (I.personId = A.personId
                    AND I.documentTypeId = GETPARAMETER('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF')::int)";

        if ( strlen($personId) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $args[] = $personId;
        }

        if ( strlen($personName) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?)';
            $args[] = $personName . '%';
        }

        if ( strlen($personLastName) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?)';
            $args[] = '%' . $personLastName . '%';
        }

        if ( strlen($location) > 0 )
        {
            $where .= ' AND UNACCENT(A.location) ILIKE UNACCENT(?)';
            $args[] = $location . '%';
        }

        if ( strlen($complement) > 0 )
        {
            $where .= ' AND A.complement ILIKE ?';
            $args[] = $complement . '%';
        }

        if ( strlen($neighborhood) > 0 )
        {
            $where .= ' AND UNACCENT(A.neighborhood) ILIKE UNACCENT(?)';
            $args[] = $neighborhood . '%';
        }

        if ( strlen($cityId) > 0 )
        {
            $where .= ' AND A.cityId = ?';
            $args[] = $cityId;
        }

        if ( strlen($cityName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $cityName . '%';
        }

        if ( strlen($stateId) > 0 )
        {
            $where .= ' AND B.stateId ILIKE ?';
            $args[] = $stateId;
        }

        if ( strlen($countryId) > 0 )
        {
            $where .= ' AND C.countryId = ?';
            $args[] = $countryId;
        }

        if ( strlen($countryName) > 0 )
        {
            $where .= ' AND UNACCENT(C.name) ILIKE UNACCENT(?)';
            $args[] = $countryName . '%';
        }

        if ( strlen($cpf) > 0 )
        {
            $where .= ' AND I.content ILIKE ?';
            $args[] = $cpf . '%';
        }

        if ( strlen($username) > 0 )
        {
            $where .= ' AND A.mioloUserName = ?';
            $args[] = $username;
        }


        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5) . '
                   ORDER BY A.name';
        }
        else
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisa por estudante',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for physical person professor
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompletePhysicalPersonProfessor(&$context)
    {
        $sql = 'SELECT A.name AS personName,
                       D.name || \' \' || A.location AS location,
                       A.complement,
                       A.neighborhood,
                       A.cityId,
                       B.name AS cityName,
                       B.stateId,
                       B.countryId,
                       C.name AS countryName
             FROM ONLY basPhysicalPersonProfessor A
             LEFT JOIN basCity B
                    ON ( B.cityId = A.cityId )
             LEFT JOIN basCountry C
                    ON ( C.countryId = B.countryId )
             LEFT JOIN basLocationType D
                    ON ( A.locationTypeId = D.locationTypeId )
                 WHERE A.personId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for physical person professor
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupPhysicalPersonProfessor(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class',$module);
        $MIOLO->conf->loadConf($module);

        $personId = $lookup->getFilterValue('personId');
        $personName = $lookup->getFilterValue('personName');
        $personLastName = $lookup->getFilterValue('personLastName');
        $location = $lookup->getFilterValue('location');
        $complement = $lookup->getFilterValue('complement');
        $neighborhood = $lookup->getFilterValue('neighborhood');
        $cityId = $lookup->getFilterValue('cityId');
        $cityName = $lookup->getFilterValue('cityName');
        $stateId = $lookup->getFilterValue('stateId');
        $countryId = $lookup->getFilterValue('countryId');
        $countryName = $lookup->getFilterValue('countryName');
        $curricularComponentId = $lookup->getFilterValue('curricularComponentId');
        $curricularComponentVersion = $lookup->getFilterValue('curricularComponentVersion');
        $checkCurricularComponent = $lookup->getFilterValue('checkCurricularComponent');
        $cpf = $lookup->getFilterValue('cpf');
        $username = $lookup->getFilterValue('username');

        $lookup->addFilterField(new MTextField('personId', $personId, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('personName', $personName, _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('personLastName', $personLastName, _M('Sobrenome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('cpf', $cpf, _M('CPF', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('username', $username, _M('Usuário', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE')));
        $lookup->addFilterField(new MTextField('location', $location, _M('Logradouro', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('cityName', $cityName, _M('Cidade', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(fields::country($countryId));

        if ( strlen($curricularComponentId) > 0 )
        {
            $lookup->addFilterField( new MCheckBox('checkCurricularComponent', true, null, $checkCurricularComponent, _M('Checar se o professor pode ministrar essa disciplina', $module)));
            $lookup->addFilterField( new MHiddenField('curricularComponentId', $curricularComponentId));
            $lookup->addFilterField( new MHiddenField('curricularComponentVersion', $curricularComponentVersion));
        }

        global $page;
        $page->onLoad('document.' . $page->name . '.personName.focus()');

        $columns[] = new DataGridColumn('personId', _M('Código', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('personName', _M('Nome', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('location', _M('Logradouro', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('complement', _M('Complemento', $module), 'left', true, null, false);
        $columns[] = new DataGridColumn('neighborhood', _M('Bairro', $module), 'left', true, null, false);
        $columns[] = new DataGridColumn('cityId', _M('Código da cidade', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('cityName', _M('Nome da cidade', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('stateId', _M('Estado', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('countryId', _M('Código do país', $module), 'left', true, null, false);
        $columns[] = new DataGridColumn('countryName', _M('País', $module), 'left', true, null, true);

        $sql = "SELECT A.personId,
                       A.name AS personName,
                       D.name || ' ' || A.location AS location,
                       A.complement,
                       A.neighborhood,
                       A.cityId,
                       B.name AS cityName,
                       B.stateId,
                       B.countryId,
                       C.name AS countryName
             FROM ONLY basPhysicalPersonProfessor A
             LEFT JOIN basDocument I
                    ON (I.personId = A.personId
                    AND I.documentTypeId = GETPARAMETER('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF')::int)";

        if ( $checkCurricularComponent == true )
        {
            $sql .= 'INNER JOIN acdProfessorCurricularComponent A2
                             ON (     A.personId = A2.professorId
                                  AND A2.curricularComponentId = ?
                                  AND A2.curricularComponentVersion = ?) ';
            $args[] = $curricularComponentId;
            $args[] = $curricularComponentVersion;
        }

        $sql .= '
             LEFT JOIN basCity B
                    ON ( B.cityId = A.cityId )
             LEFT JOIN basCountry C
                    ON ( C.countryId = B.countryId )
             LEFT JOIN basLocationType D
                    ON ( A.locationTypeId = D.locationTypeId)';

        if ( strlen($personId) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $args[] = $personId;
        }

        if ( strlen($personName) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?)';
            $args[] = $personName . '%';
        }

        if ( strlen($personLastName) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?)';
            $args[] = '%' . $personLastName . '%';
        }

        if ( strlen($location) > 0 )
        {
            $where .= ' AND UNACCENT(A.location) ILIKE UNACCENT(?)';
            $args[] = $location . '%';
        }

        if ( strlen($complement) > 0 )
        {
            $where .= ' AND A.complement ILIKE ?';
            $args[] = $complement . '%';
        }

        if ( strlen($neighborhood) > 0 )
        {
            $where .= ' AND UNACCENT(A.neighborhood) ILIKE UNACCENT(?)';
            $args[] = $neighborhood . '%';
        }

        if ( strlen($cityId) > 0 )
        {
            $where .= ' AND A.cityId = ?';
            $args[] = $cityId;
        }

        if ( strlen($cityName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $cityName . '%';
        }

        if ( strlen($stateId) > 0 )
        {
            $where .= ' AND B.stateId ILIKE ?';
            $args[] = $stateId;
        }

        if ( strlen($countryId) > 0 )
        {
            $where .= ' AND C.countryId = ?';
            $args[] = $countryId;
        }

        if ( strlen($countryName) > 0 )
        {
            $where .= ' AND UNACCENT(C.name) ILIKE UNACCENT(?)';
            $args[] = $countryName . '%';
        }

        if ( strlen($cpf) > 0 )
        {
            $where .= ' AND I.content ILIKE ?';
            $args[] = $cpf . '%';
        }

        if ( strlen($username) > 0 )
        {
            $where .= ' AND A.mioloUserName = ?';
            $args[] = $username;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5) . '
                   ORDER BY A.name';
        }
        else
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisa por professor',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for physical person professor
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompletePhysicalPersonEmployee(&$context)
    {
        $sql = 'SELECT A.name AS personName,
                       D.name || \' \' || A.location AS location,
                       A.complement,
                       A.neighborhood,
                       A.cityId,
                       B.name AS cityName,
                       B.stateId,
                       B.countryId,
                       C.name AS countryName
             FROM ONLY basPhysicalPersonEmployee A
             LEFT JOIN basCity B
                    ON ( B.cityId = A.cityId )
             LEFT JOIN basCountry C
                    ON ( C.countryId = B.countryId )
             LEFT JOIN basLocationType D
                    ON ( A.locationTypeId = D.locationTypeId)
                 WHERE A.personId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for physical person professor
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupPhysicalPersonEmployee(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class',$module);
        $MIOLO->conf->loadConf($module);

        $personId = $lookup->getFilterValue('personId');
        $personName = $lookup->getFilterValue('personName');
        $personLastName = $lookup->getFilterValue('personLastName');
        $location = $lookup->getFilterValue('location');
        $complement = $lookup->getFilterValue('complement');
        $neighborhood = $lookup->getFilterValue('neighborhood');
        $cityId = $lookup->getFilterValue('cityId');
        $cityName = $lookup->getFilterValue('cityName');
        $stateId = $lookup->getFilterValue('stateId');
        $countryId = $lookup->getFilterValue('countryId');
        $countryName = $lookup->getFilterValue('countryName');
        $cpf = $lookup->getFilterValue('cpf');
        $username = $lookup->getFilterValue('username');

        $lookup->addFilterField(new MTextField('personId', $personId, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('personName', $personName, _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('personLastName', $personLastName, _M('Sobrenome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('cpf', $cpf, _M('CPF', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('username', $username, _M('Usuário', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE')));
        $lookup->addFilterField(new MTextField('location', $location, _M('Logradouro', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('cityName', $cityName, _M('Cidade', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(fields::country($countryId));

        global $page;
        $page->onLoad('document.' . $page->name . '.personName.focus()');

        $columns[] = new DataGridColumn('personId', _M('Código', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('personName', _M('Nome', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('location', _M('Logradouro', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('complement', _M('Complemento', $module), 'left', true, null, false);
        $columns[] = new DataGridColumn('neighborhood', _M('Bairro', $module), 'left', true, null, false);
        $columns[] = new DataGridColumn('cityId', _M('Código da cidade', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('cityName', _M('Nome da cidade', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('stateId', _M('Estado', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('countryId', _M('Código do país', $module), 'left', true, null, false);
        $columns[] = new DataGridColumn('countryName', _M('País', $module), 'left', true, null, true);

        $sql = "SELECT A.personId,
                       A.name AS personName,
                       D.name || ' ' || A.location AS location,
                       A.complement,
                       A.neighborhood,
                       A.cityId,
                       B.name AS cityName,
                       B.stateId,
                       B.countryId,
                       C.name AS countryName
             FROM ONLY basPhysicalPersonEmployee A
             LEFT JOIN basCity B
                    ON ( B.cityId = A.cityId )
             LEFT JOIN basCountry C
                    ON ( C.countryId = B.countryId )
             LEFT JOIN basLocationType D
                    ON ( A.locationTypeId = D.locationTypeId )
             LEFT JOIN basDocument I
                    ON (I.personId = A.personId
                    AND I.documentTypeId = GETPARAMETER('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF')::int)";

        if ( strlen($personId) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $args[] = $personId;
        }

        if ( strlen($personName) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?)';
            $args[] = $personName . '%';
        }

        if ( strlen($personLastName) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?)';
            $args[] = '%' . $personLastName . '%';
        }

        if ( strlen($location) > 0 )
        {
            $where .= ' AND UNACCENT(A.location) ILIKE UNACCENT(?)';
            $args[] = $location . '%';
        }

        if ( strlen($complement) > 0 )
        {
            $where .= ' AND A.complement ILIKE ?';
            $args[] = $complement . '%';
        }

        if ( strlen($neighborhood) > 0 )
        {
            $where .= ' AND UNACCENT(A.neighborhood) ILIKE UNACCENT(?)';
            $args[] = $neighborhood . '%';
        }

        if ( strlen($cityId) > 0 )
        {
            $where .= ' AND A.cityId = ?';
            $args[] = $cityId;
        }

        if ( strlen($cityName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $cityName . '%';
        }

        if ( strlen($stateId) > 0 )
        {
            $where .= ' AND B.stateId ILIKE ?';
            $args[] = $stateId;
        }

        if ( strlen($countryId) > 0 )
        {
            $where .= ' AND C.countryId = ?';
            $args[] = $countryId;
        }

        if ( strlen($countryName) > 0 )
        {
            $where .= ' AND UNACCENT(C.name) ILIKE UNACCENT(?)';
            $args[] = $countryName . '%';
        }

        if ( strlen($cpf) > 0 )
        {
            $where .= ' AND I.content ILIKE ?';
            $args[] = $cpf . '%';
        }

        if ( strlen($username) > 0 )
        {
            $where .= ' AND A.mioloUserName = ?';
            $args[] = $username;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5) . '
                   ORDER BY A.name';
        }
        else
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar funcionários',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for physical person employee and professor
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompletePhysicalPersonEmployeeAndProfessor(&$context)
    {

        $sql = 'SELECT A.name AS personName,
                       D.name || \' \' || A.location AS location,
                       A.complement,
                       A.neighborhood,
                       A.cityId,
                       B.name AS cityName,
                       B.stateId,
                       B.countryId,
                       C.name AS countryName
             FROM ONLY basPhysicalPerson A
             LEFT JOIN basCity B
                    ON ( B.cityId = A.cityId )
             LEFT JOIN basCountry C
                    ON ( C.countryId = B.countryId )
             LEFT JOIN basLocationType D
                    ON ( A.locationTypeId = D.locationTypeId )
                 WHERE A.personId = ? ';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for physical person employee and professor
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupPhysicalPersonEmployeeAndProfessor(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class',$module);
        $MIOLO->conf->loadConf($module);

        //flag que identifica se a variavel where deve utilizar a experessao AND no SQL
        $flag_in = FALSE;

        $personId = $lookup->getFilterValue('personId');
        $personName = $lookup->getFilterValue('personName');
        $personLastName = $lookup->getFilterValue('personLastName');
        $location = $lookup->getFilterValue('location');
        $complement = $lookup->getFilterValue('complement');
        $neighborhood = $lookup->getFilterValue('neighborhood');
        $cityId = $lookup->getFilterValue('cityId');
        $cityName = $lookup->getFilterValue('cityName');
        $stateId = $lookup->getFilterValue('stateId');
        $countryId = $lookup->getFilterValue('countryId');
        $countryName = $lookup->getFilterValue('countryName');

        $lookup->addFilterField(new MTextField('personId', $personId, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('personName', $personName, _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('personLastName', $personLastName, _M('Sobrenome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('location', $location, _M('Logradouro', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('cityName', $cityName, _M('Cidade', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(fields::country($countryId) );

        global $page;
        $page->onLoad('document.' . $page->name . '.personName.focus()');

        $columns[] = new DataGridColumn('personId', _M('Código', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('personName', _M('Nome', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('location', _M('Logradouro', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('complement', _M('Complemento', $module), 'left', true, null, false);
        $columns[] = new DataGridColumn('neighborhood', _M('Bairro', $module), 'left', true, null, false);
        $columns[] = new DataGridColumn('cityId', _M('Código da cidade', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('cityName', _M('Nome da cidade', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('stateId', _M('Estado', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('countryId', _M('Código do país', $module), 'left', true, null, false);
        $columns[] = new DataGridColumn('countryName', _M('País', $module), 'left', true, null, true);

        $sql = 'SELECT A.personId,
                       A.name AS personName,
                       F.name || \' \' || A.location AS location,
                       A.complement,
                       A.neighborhood,
                       A.cityId,
                       B.name AS cityName,
                       B.stateId,
                       B.countryId,
                       C.name AS countryName
             FROM ONLY basPhysicalPerson A
             LEFT JOIN basCity B
                    ON ( B.cityId = A.cityId )
             LEFT JOIN basCountry C
                    ON ( C.countryId = B.countryId )
        LEFT JOIN ONLY basPhysicalPersonEmployee D
                    ON ( D.personId = A.personId )
        LEFT JOIN ONLY basPhysicalPersonProfessor E
                    ON ( E.personId = A.personId )
             LEFT JOIN basLocationType F
                    ON ( A.locationTypeId = F.locationTypeId )';

        if ( strlen($personId) > 0 )
        {
            $where .= ' AND D.personId = ?';
            $args[] = $personId;
        }

        if ( strlen($personName) > 0 )
        {
            $where .= ' AND UNACCENT(D.name) ILIKE UNACCENT(?)';
            $args[] = $personName . '%';
        }

        if ( strlen($personLastName) > 0 )
        {
            $where .= ' AND UNACCENT(D.name) ILIKE UNACCENT(?)';
            $args[] = '%'. $personLastName . '%';
        }

        if ( strlen($location) > 0 )
        {
            $where .= ' AND UNACCENT(D.location) ILIKE UNACCENT(?)';
            $args[] = $location . '%';
        }

        if ( strlen($location) > 0 )
        {
            $where .= ' AND UNACCENT(A.location) ILIKE UNACCENT(?) ';
            $args[] = $location . '%';
        }

        if ( strlen($complement) > 0 )
        {
            $where .= ' AND D.complement ILIKE ?';
            $args[] = $complement . '%';
        }

        if ( strlen($complement) > 0 )
        {
            $where .= ' AND E.complement ILIKE ? ';
            $args[] = $complement . '%';
        }

        if ( strlen($neighborhood) > 0 )
        {
            $where .= ' AND UNACCENT(D.neighborhood) ILIKE UNACCENT(?)';
            $args[] = $neighborhood . '%';
        }

        if ( strlen($cityId) > 0 )
        {
            $where .= ' AND D.cityId = ?';
            $args[] = $cityId;
        }

        if ( strlen($cityName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $cityName . '%';
        }

        if ( strlen($stateId) > 0 )
        {
            $where .= ' AND B.stateId ILIKE ?';
            $args[] = $stateId;
        }

        if ( strlen($countryId) > 0 )
        {
            $where .= ' AND B.countryId = ?';
            $args[] = $countryId;
        }

        if ( strlen($countryName) > 0 )
        {
            $where .= ' AND UNACCENT(C.name) ILIKE UNACCENT(?)';
            $args[] = $countryName . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5) . ' ORDER BY A.name';
        }
        else
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql();

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar funcionário e professor',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for turn
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteTurn(&$context)
    {
        $sql = 'SELECT A.description,
                       A.shortDescription,
                       A.beginHour,
                       A.endHour,
                       A.charId
                  FROM basTurn A
                 WHERE A.turnId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for turn
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupTurn(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class',$module);
        $MIOLO->conf->loadConf($module);

        $turnId = $lookup->getFilterValue('turnId');
        $description = $lookup->getFilterValue('description');
        $shortDescription = $lookup->getFilterValue('shortDescription');
        $beginHour = $lookup->getFilterValue('beginHour');
        $endHour = $lookup->getFilterValue('endHour');
        $charId = $lookup->getFilterValue('charId');

        $lookup->addFilterField(new MHiddenField('turnId', $turId));
        $lookup->addFilterField(new MTextField('description', $description, _M('Turno', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('shortDescription', $shortDescription, _M('Abreviatura', $module), SAGU::getParameter('BASIC', 'FIELD_TIME_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('beginHour', $beginHour, _M('Hora de início', $module), SAGU::getParameter('BASIC', 'FIELD_TIME_LOOKUP_SIZE')));
        $validators[] = new MTimeValidator('beginHour','','optional');
        $lookup->addFilterField(new MTextField('endHour', $endHour, _M('Hora de fim', $module), SAGU::getParameter('BASIC', 'FIELD_TIME_LOOKUP_SIZE')));
        $validators[] = new MTimeValidator('endHour','','optional');
        $lookup->addFilterField(new MTextField('charId', $charId, _M('Caractere de identificação', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));

        $columns[] = new DataGridColumn('turnId', _M('Código', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('description', _M('Turno', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('shortDescription', _M('Abreviatura', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('beginHour', _M('Hora de início', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('endHour', _M('Hora de fim', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('charId', _M('Caractere de identificação', $module), 'left', true, null, true);

        $sql = 'SELECT A.turnId,
                       A.description,
                       A.shortDescription,
                       TO_CHAR(A.beginHour, \'' . SAGU::getParameter('BASIC', 'MASK_TIME') . '\') as beginHour,
                       TO_CHAR(A.endHour, \'' . SAGU::getParameter('BASIC', 'MASK_TIME') . '\') as endHour,
                       A.charId
                  FROM basTurn A';

        if ( strlen($turnId) > 0 )
        {
            $where .= ' AND A.turnId = ?';
            $args[] = $turnId;
        }

        if ( strlen($description) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $description . '%';
        }

        if ( strlen($shortDescription) > 0 )
        {
            $where .= ' AND UNACCENT(A.shortDescription) ILIKE UNACCENT(?)';
            $args[] = $shortDescription . '%';
        }

        if ( strlen($beginHour) > 0 )
        {
            $where .= ' AND TO_TIMESTAMP(A.beginHour, \'' . SAGU::getParameter('BASIC', 'MASK_TIME') . '\') = TO_TIMESTAMP(?, \'' . SAGU::getParameter('BASIC', 'MASK_TIME') . '\')';
            $args[] = $beginHour;
        }

        if ( strlen($endHour) > 0 )
        {
            $where .= ' AND TO_TIMESTAMP(A.endHour, \'' . SAGU::getParameter('BASIC', 'MASK_TIME') . '\') = TO_TIMESTAMP(?, \'' . SAGU::getParameter('BASIC', 'MASK_TIME') . '\')';
            $args[] = $endHour;
        }

        if ( strlen($charId) > 0 )
        {
            $where .= ' AND A.charId ILIKE ?';
            $args[] = $charId;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5) . '
                   ORDER BY A.description';
        }
        else
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar turno',$module), 15, 0);
        //$lookup->setValidators($validators);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for unit
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteUnit(&$context)
    {
        $sql = 'SELECT A.cityId,
                       A.description,
                       B.name AS cityName,
                       B.stateId,
                       B.countryId,
                       C.name AS countryName,
                       A.accountingCode
                  FROM basUnit A
             LEFT JOIN basCity B
                    ON ( B.cityId = A.cityId )
             LEFT JOIN basCountry C
                    ON ( C.countryId = B.countryId )
                 WHERE A.unitId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for unit
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupUnit(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class',$module);
        $MIOLO->conf->loadConf($module);

        $unitId = $lookup->getFilterValue('unitId');
        $cityId = $lookup->getFilterValue('cityId');
        $cityName = $lookup->getFilterValue('cityName');
        $stateId = $lookup->getFilterValue('stateId');
        $countryId = $lookup->getFilterValue('countryId');
        $countryName = $lookup->getFilterValue('countryName');
        $description = $lookup->getFilterValue('description');
        $accountingCode = $lookup->getFilterValue('accountingCode');

        $lookup->addFilterField(new MTextField('description', $description, _M('Unidade', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('cityId', $cityId, _M('Código da cidade', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('cityName', $cityName, _M('Nome da cidade', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('stateId', $stateId, _M('Código do estado', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(fields::country($countryId));
        $lookup->addFilterField(new MTextField('accountingCode', $accountingCode, _M('Código de contabilização', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));

        $columns[] = new DataGridColumn('unitId', _M('Código', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('description', _M('Unidade', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('cityId', _M('Código da cidade', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('cityName', _M('Cidade', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('stateId', _M('Estado', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('countryId', _M('Código do país', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('countryName', _M('País', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('accountingCode', _M('Código de contabilização', $module), 'center', true, null, true);

        $sql = 'SELECT A.unitId,
                       A.description,
                       D.cityId,
                       B.name AS cityName,
                       B.stateId,
                       B.countryId,
                       C.name AS countryName,
                       A.accountingCode
                  FROM basUnit A
             LEFT JOIN basLocation D
                    ON ( D.locationId = A.locationId )
             LEFT JOIN basCity B
                    ON ( B.cityId = D.cityId )
             LEFT JOIN basCountry C
                    ON ( C.countryId = B.countryId )';

        if ( strlen($unitId) > 0 )
        {
            $where .= ' AND A.unitId = ?';
            $args[] = $unitId;
        }

        if ( strlen($cityId) > 0 )
        {
            $where .= ' AND A.cityId = ?';
            $args[] = $cityId;
        }

        if ( strlen($cityName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $cityName . '%';
        }

        if ( strlen($stateId) > 0 )
        {
            $where .= ' AND B.stateId ILIKE ?';
            $args[] = $stateId;
        }

        if ( strlen($countryId) > 0 )
        {
            $where .= ' AND C.countryId = ?';
            $args[] = $countryId;
        }

        if ( strlen($countryName) > 0 )
        {
            $where .= ' AND UNACCENT(C.name) ILIKE UNACCENT(?)';
            $args[] = $countryName . '%';
        }

        if ( strlen($description) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $description . '%';
        }

        if ( strlen($accountingCode) > 0 )
        {
            $where .= ' AND A.accountingCode ILIKE ?';
            $args[] = $accountingCode . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5) . '
                   ORDER BY A.description';
        }
        else
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar unidade',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for company
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteCompany(&$context)
    {
        $sql = 'SELECT name
                  FROM basCompanyConf
                 WHERE companyId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for company
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupCompany(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class',$module);
        $MIOLO->conf->loadConf($module);

        $companyId = $lookup->getFilterValue('companyId');
        $companyName = $lookup->getFilterValue('companyName');
        $personName = $lookup->getFilterValue('personName');

        $lookup->addFilterField(new MTextField('companyId', $companyId, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('companyName', $cityId, _M('Empresa', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('personName', $cityName, _M('Pessoa', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        global $page;
        $page->onLoad('document.' . $page->name . '.companyName.focus()');

        $columns[] = new DataGridColumn('companyId', _M('Código da empresa', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('companyName', _M('Nome da empresa', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('personName', _M('Nome da pessoa', $module), 'left', true, null, true);

        $sql = 'SELECT A.companyId,
                       A.name AS companyName,
                       B.name AS personName
                  FROM basCompanyConf A
        LEFT JOIN ONLY basLegalPerson B
                 USING ( personId ) ';

        if ( strlen($companyId) > 0 )
        {
            $where .= ' AND A.companyId = ?';
            $args[] = $companyId;
        }

        if ( strlen($companyName) > 0 )
        {
            $where .= ' AND ( UNACCENT(A.name) ILIKE UNACCENT(?) OR UNACCENT(A.acronym) ILIKE UNACCENT(?) )';
            $args[] = $companyName . '%';
            $args[] = $companyName . '%';
        }

        if ( strlen($personName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $personName . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5) . '
                   ORDER BY B.name,
                            A.name';
        }
        else
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar empresa',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for professional activity
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteProfessionalActivity(&$context)
    {
        $sql = 'SELECT description AS professionalActivityDescription
                  FROM basProfessionalActivity
                 WHERE professionalActivityId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for professional activity
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupProfessionalActivity(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class',$module);
        $MIOLO->conf->loadConf($module);

        $professionalActivityId = $lookup->getFilterValue('professionalActivityId');
        $professionalActivityDescription = $lookup->getFilterValue('professionalActivityDescription');

        $lookup->addFilterField(new MHiddenField('professionalActivityId'));
        $lookup->addFilterField(new MTextField('professionalActivityDescription', $professionalActivityDescription, _M('Atividade profissional',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        global $page;
        $page->onLoad('document.' . $page->name . '.professionalActivityDescription.focus()');

        $columns[] = new DataGridColumn('professionalActivityId', _M('Código', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('professionalActivityDescription', _M('Atividade profissional', $module), 'left', true, null, true);

        $sql = 'SELECT professionalActivityId,
                       description as professionalActivityDescription
                  FROM basProfessionalActivity';

        if ( strlen($professionalActivityId) > 0 )
        {
            $where .= ' AND professionalActivityId = ?';
            $args[] = $professionalActivityId;
        }

        if ( strlen($professionalActivityDescription) > 0 )
        {
            $where .= ' AND UNACCENT(description) ILIKE UNACCENT(?)';
            $args[] = $professionalActivityDescription . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5) . '
                   ORDER BY description';
        }
        else
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar profissão',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for professional activity
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteProfessionalActivityAgent(&$context)
    {
        $sql = 'SELECT description AS professionalActivityDescription
                  FROM basProfessionalActivityAgent
                 WHERE professionalActivityAgentId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for professional activity agent
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupProfessionalActivityAgent(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class',$module);
        $MIOLO->conf->loadConf($module);

        $professionalActivityAgentId = $lookup->getFilterValue('professionalActivityAgentId');
        $professionalActivityAgentDescription = $lookup->getFilterValue('professionalActivityAgentDescription');

        $lookup->addFilterField(new MHiddenField('professionalActivityAgentId', $professionalActivityAgentId));
        $lookup->addFilterField(new MTextField('professionalActivityAgentDescription', $professionalActivityAgentDescription, _M('Intermediador da atividade profissional',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        global $page;
        $page->onLoad('document.' . $page->name . '.professionalActivityAgentDescription.focus()');

        $columns[] = new DataGridColumn('professionalActivityAgentId', _M('Código', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('professionalActivityAgentDescription', _M('Intermediador da atividade profissional', $module), 'left', true, null, true);

        $sql = 'SELECT professionalActivityAgentId,
                       description as professionalActivityAgentDescription
                  FROM basProfessionalActivityAgent';

        if ( strlen($professionalActivityAgentId) > 0 )
        {
            $where .= ' AND professionalActivityAgentId = ?';
            $args[] = $professionalActivityAgentId;
        }

        if ( strlen($professionalActivityAgentDescription) > 0 )
        {
            $where .= ' AND UNACCENT(description) ILIKE UNACCENT(?)';
            $args[] = $professionalActivityAgentDescription . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5) . '
                   ORDER BY description';
        }
        else
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql();

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar intermediador da atividade profissional',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for document type
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteDocumentType(&$context)
    {
        $sql = 'SELECT A.name,
                       A.mask,
                       A.sex,
                       A.personType,
                       A.minAge,
                       A.maxAge,
                       A.needDeliver
                  FROM basDocumentType A
                 WHERE A.documentTypeId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for turn
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupDocumentType(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');
        $MIOLO = MIOLO::getInstance();
        $MIOLO->uses('classes/sagu.class',$module);
        $MIOLO->conf->loadConf($module);
        $business = new BusinessBasicBusConfig();

        $documentTypeId = $lookup->getFilterValue('documentTypeId');
        $documentTypeName = $lookup->getFilterValue('documentTypeName');
        $mask = $lookup->getFilterValue('mask');
        $sex = $lookup->getFilterValue('sex');
        $personType = $lookup->getFilterValue('personType');
        $minAge = $lookup->getFilterValue('minAge');
        $maxAge = $lookup->getFilterValue('maxAge');
        $needDeliver = $lookup->getFilterValue('needDeliver');

        $lookup->addFilterField(new MHiddenField('documentTypeId', $documentTypeId));
        $lookup->addFilterField(new MTextField('documentTypeName', $documentTypeName, _M('Documento', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MSelection('sex', $sex, _M('Sexo', $module), SAGU::listSex()));
        $lookup->addFilterField(new MSelection('personType', $personType, _M('Tipo de pessoa', $module), SAGU::listPersonTypes()));
        $lookup->addFilterField(new MTextField('minAge', $minAge, _M('Idade mínima', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('maxAge', $maxAge, _M('Idade máxima', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MSelection('needDeliver', $needDeliver, _M('Necessita entrega', $module) . '?', SAGU::listTrueFalse()));

        global $page;
        $page->onLoad('document.' . $page->name . '.documentTypeName.focus()');

        $columns[] = new DataGridColumn('documentTypeId', _M('Código', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('documentTypeName', _M('Documento', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('mask', _M('Máscara', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('sex', _M('Sexo', $module), 'left', true, null, true, array('M' => _M('Masculino',$module), 'F' => _M('Feminino',$module)));
        $columns[] = new MDataGridColumn('personType', _M('Tipo de pessoa', $module), 'left', true, null, true, array( SAGU::getParameter('BASIC', 'DB_PHYSICAL') => _M('Física',$module), SAGU::getParameter('BASIC', 'DB_LEGAL') => _M('Jurídica',$module) ), true );
        $columns[] = new DataGridColumn('minAge', _M('Idade mínima', $module), 'center', true, null, true);
        $columns[] = new DataGridColumn('maxAge', _M('Idade máxima', $module), 'center', true, null, true);
        $columns[] = new DataGridColumn('needDeliver', _M('Necessita entrega', $module), 'left', true, null, true, array(DB_TRUE => _M('Sim',$module), DB_FALSE => _M('Não',$module)));

        $sql = 'SELECT A.documentTypeId,
                       A.name AS documentTypeName,
                       A.mask,
                       A.sex,
                       A.personType,
                       A.minAge,
                       A.maxAge,
                       A.needDeliver
                  FROM basDocumentType A';

        if ( strlen($documentTypeId) > 0 )
        {
            $where .= ' AND A.documentTypeId = ?';
            $args[] = $documentTypeId;
        }

        if ( strlen($documentTypeName) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?)';
            $args[] = $documentTypeName . '%';
        }

        if ( strlen($mask) > 0 )
        {
            $where .= ' AND A.mask ILIKE ?';
            $args[] = $mask . '%';
        }

        if ( strlen($sex) > 0 )
        {
            $where .= ' AND A.sex ILIKE ?';
            $args[] = $sex;
        }

        if ( strlen($personType) > 0 )
        {
            $where .= ' AND A.personType ILIKE ?';
            $args[] = $personType;
        }

        if ( strlen($minAge) > 0 )
        {
            $where .= ' AND A.minAge = ?';
            $args[] = $minAge;
        }

        if ( strlen($maxAge) > 0 )
        {
            $where .= ' AND A.maxAge = ?';
            $args[] = $maxAge;
        }

        if ( strlen($needDeliver) > 0 )
        {
            $where .= ' AND A.needDeliver = ?';
            $args[] = $needDeliver;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5) . '
                   ORDER BY A.name';
        }

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar tipo de documento',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for file
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteFile(&$context)
    {
        $sql = 'SELECT A.fileName
                  FROM basFile A
                 WHERE A.fileId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for file
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupFile(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class',$module);
        $MIOLO->conf->loadConf($module);

        $fileId = $lookup->getFilterValue('fileId');
        $fileName = $lookup->getFilterValue('fileName');

        $lookup->addFilterField(new MHiddenField('fileId', $fileId));
        $lookup->addFilterField(new MTextField('fileName', $fileName, _M('Arquivo',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        $columns[] = new DataGridColumn('fileId', _M('Código', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('fileName', _M('Arquivo', $module), 'left', true, null, true);

        $sql = 'SELECT A.fileId,
                       A.fileName
                  FROM basFile A';

        if ( strlen($fileId) > 0 )
        {
            $where .= ' AND A.fileId = ?';
            $args[] = $fileId;
        }

        if ( strlen($fileName) > 0 )
        {
            $where .= ' AND A.fileName ILIKE ?';
            $args[] = $fileName . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.fileName';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisa por arquivo',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for link
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteLink(&$context)
    {
        $sql = 'SELECT description
                  FROM basLink
                 WHERE linkId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for link
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupLink(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class',$module);
        $MIOLO->conf->loadConf($module);

        $linkId = $lookup->getFilterValue('linkId');
        $linkDescription = $lookup->getFilterValue('description');

        $lookup->addFilterField(new MHiddenField('linkId', $linkId));
        $lookup->addFilterField(new MTextField('description', $linkDescription, _M('Descrição',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        global $page;
        $page->onLoad('document.' . $page->name . '.description.focus()');

        $columns[] = new DataGridColumn('linkId', _M('Código', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('description', _M('Descrição do vínculo', $module), 'left', true, null, true);

        $sql = 'SELECT linkId,
                       description
                  FROM basLink';

        if ( strlen($linkId) > 0 )
        {
            $where .= ' AND linkId = ?';
            $args[] = $linkId;
        }

        if ( strlen($linkDescription) > 0 )
        {
            $where .= ' AND UNACCENT(description) ILIKE UNACCENT(?)';
            $args[] = $linkDescription . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY description';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisa de vínculo',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for stamp
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteStamp(&$context)
    {
        $sql = ' SELECT A.personId as employeeId,
                        B.name as employeeName,
                        A.functionDescription,
                        D.description as sector
                   FROM basStamp A
        INNER JOIN ONLY basPerson B
                     ON (A.personId = B.personId)
              LEFT JOIN basSectorBoss C
                     ON ( B.personId = C.bossId )
              LEFT JOIN ONLY basSector D
                     ON ( C.sectorId = D.sectorId )
                  WHERE A.personId = ? ';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for stamp
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupStamp(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

//        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $employeeId = $lookup->getFilterValue('employeeId');
        $employeeName = $lookup->getFilterValue('employeeName');
        $functionDescription = $lookup->getFilterValue('functionDescription');

        $lookup->addFilterField(new MTextField('employeeId', $employeeId, _M('Código da pessoa', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('employeeName', $employeeName, _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('functionDescription', $periodId, _M('Função', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        global $page;
        $page->onLoad('document.' . $page->name . '.employeeName.focus()');

        /*
         * Note: the name of the grid columns must match the SQL columns names below
         */
        $columns[] = new DataGridColumn('employeeId', _M('Código da pessoa', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('employeeName', _M('Nome', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('functionDescription', _M('Função', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('sector', _M('Setor', $module), 'left', true, null, true);

        $sql = ' SELECT A.personId as employeeId,
                        B.name as employeeName,
                        A.functionDescription,
                        D.description as sector
                   FROM basStamp A
        INNER JOIN ONLY basPerson B
                     ON (A.personId = B.personId)
              LEFT JOIN basSectorBoss C
                     ON ( B.personId = C.bossId )
              LEFT JOIN ONLY basSector D
                     ON ( C.sectorId = D.sectorId )
                  WHERE A.personId = B.personId ';

        if ( strlen($employeeId) > 0 )
        {
            $where .= ' AND A.personid = ?';
            $args[] = $employeeId;
        }

        if ( strlen($employeeName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $employeeName . '%';
        }

        if ( strlen($functionDescription) > 0 )
        {
            $where .= ' AND UNACCENT(A.functionDescription) ILIKE UNACCENT(?)';
            $args[] = $functionDescription . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= $where;
        }

        $sql .= ' ORDER BY 2';

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar carimbo',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for registed e-mails
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteEmail(&$context)
    {
        $sql = ' SELECT A.description,
                        A.from,
                        A.bcc,
                        A.subject
                   FROM basEmail A
                  WHERE A.emailId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for registed e-mails
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupEmail(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->conf->loadConf($module);

        $description = $lookup->getFilterValue('description');
        $from = $lookup->getFilterValue('from');
        $subject = $lookup->getFilterValue('subject');
        $body = $lookup->getFilterValue('body');

        $lookup->addFilterField(new MTextField('description', $description, _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('from', $from, _M('De', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('subject', $subject, _M('Assunto', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        global $page;
        $page->onLoad('document.' . $page->name . '.description.focus()');

        /*
         * Note: the name of the grid columns must match the SQL columns names below
         */
        $columns[] = new DataGridColumn('emailId', _M('Código do E-mail', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('description', _M('Descrição', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('from', _M('De', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('subject', _M('Assunto', $module), 'left', true, null, true);

        $sql = ' SELECT A.emailId,
                        A.description,
                        A.from,
                        A.bcc,
                        A.subject
                   FROM basEmail A ';

        if ( strlen($description) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $description . '%';
        }

        if ( strlen($from) > 0 )
        {
            $where .= ' AND A.from ILIKE ?';
            $args[] = $from . '%';
        }

        if ( strlen($subject) > 0 )
        {
            $where .= ' AND A.subject ILIKE ?';
            $args[] = $subject . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
            //$sql .= $where;
        }

        $sql .= ' ORDER BY 2';

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisa por e-mail',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for location
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteLocation(&$context)
    {
        $sql = 'SELECT A.name as locationName,
                       C.countryId,
                       D.name as countryName,
                       B.stateId,
                       C.name as stateName,
                       A.cityId,
                       B.name as cityName,
                       A.neighborhoodId,
                       E.name as neighborhoodName
                  FROM basLocation A
            INNER JOIN basCity B
                    ON ( B.cityId = A.cityId )
            INNER JOIN basState C
                    ON ( C.stateId = B.stateId AND C.countryId = B.countryId )
            INNER JOIN basCountry D
                    ON ( D.countryId = C.countryId )
            LEFT JOIN basNeighborhood E
                    ON ( E.neighborhoodId = A.neighborhoodId )
                 WHERE locationId = ?
              ORDER BY 1';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for location
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupLocation(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class',$module);
        $MIOLO->conf->loadConf($module);

        $locationId = $lookup->getFilterValue('locationId');
        $zipCode = $lookup->getFilterValue('zipCode');
        $locationName = $lookup->getFilterValue('locationName');
        $countryId = $lookup->getFilterValue('countryId');
        $countryName = $lookup->getFilterValue('countryName');
        $stateId = $lookup->getFilterValue('stateId');
        $stateName = $lookup->getFilterValue('stateName');
        $cityId = $lookup->getFilterValue('cityId');
        $cityName = $lookup->getFilterValue('cityName');
        $neighborhoodId = $lookup->getFilterValue('neighborhoodId');
        $neighborhoodName = $lookup->getFilterValue('neighborhoodName');

        $lookup->addFilterField(new MTextField('zipCode', $zipCode, _M('CEP',$module), SAGU::getParameter('BASIC', 'FIELD_ZIPCODE_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('locationName', $locationName, _M('Logradouro',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(fields::country($countryId));
        $lookup->addFilterField(new MTextField('stateId', $stateId, _M('Código do estado',$module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('stateName', $stateName, _M('Estado',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('cityId', $cityId, _M('Código da cidade',$module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('cityName', $cityName, _M('Cidade',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('neighborhoodName', $neighborhoodName, _M('Bairro',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        $columns[] = new DataGridColumn('locationId', _M('Código Local', $module),'left', true, null, true);
        $columns[] = new DataGridColumn('locationName', _M('Logradouro', $module),'left', true, null, true);
        $columns[] = new DataGridColumn('countryId', _M('Código do país', $module),'left', true, null, true);
        $columns[] = new DataGridColumn('countryName', _M('País', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('stateId', _M('Código do estado', $module),'left', true, null, true);
        $columns[] = new DataGridColumn('stateName', _M('Estado', $module),'left', true, null, true);
        $columns[] = new DataGridColumn('cityId', _M('Código da cidade', $module),'left', true, null, true);
        $columns[] = new DataGridColumn('cityName', _M('Cidade', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('neighborhoodId', _M('Código do bairro', $module), 'left', true, null, false);                          new DataGridColumn('neighborhoodName', _M('Bairro', $module),'left', true, null, true);
        $columns[] = new DataGridColumn('zipCode', _M('CEP', $module),'left', true, null, true);


        $sql = 'SELECT A.locationId,
                       A.name as locationName,
                       C.countryId,
                       D.name as countryName,
                       B.stateId,
                       C.name as stateName,
                       A.cityId,
                       B.name as cityName,
                       A.neighborhoodId,
                       E.name as neighborhoodName,
                       A.zipCode
                  FROM basLocation A
            INNER JOIN basCity B
                    ON ( B.cityId = A.cityId )
            INNER JOIN basState C
                    ON ( C.stateId = B.stateId AND C.countryId = B.countryId )
            INNER JOIN basCountry D
                    ON ( D.countryId = C.countryId )
             LEFT JOIN basNeighborhood E
                    ON ( E.neighborhoodId = A.neighborhoodId )';

        if ( strlen($zipCode) > 0 )
        {
            $where .= ' AND A.zipCode ILIKE ?';
            $args[] = $zipCode . '%';
        }

        if ( strlen($locationName) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?)';
            $args[] = $locationName . '%';
        }

        if ( strlen($countryId) > 0 )
        {
            $where .= ' AND C.countryId = ?';
            $args[] = $countryId;
        }

        if ( strlen($countryName) > 0 )
        {
            $where .= ' AND UNACCENT(D.name) ILIKE UNACCENT(?)';
            $args[] = $countryName . '%';
        }

        if ( strlen($stateId) > 0 )
        {
            $where .= ' AND B.stateId = ?';
            $args[] = $stateId;
        }

        if ( strlen($stateName) > 0 )
        {
            $where .= ' AND UNACCENT(C.name) ILIKE UNACCENT(?)';
            $args[] = $stateName . '%';
        }

        if ( strlen($cityId) > 0 )
        {
            $where .= ' AND A.cityId = ?';
            $args[] = $cityId;
        }

        if ( strlen($cityName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $cityName . '%';
        }

        if ( strlen($neighborhoodId) > 0 )
        {
            $where .= ' AND A.neighborhoodId = ?';
            $args[] = $neighborhoodId;
        }

        if ( strlen($neighborhoodName) > 0 )
        {
            $where .= ' AND UNACCENT(E.name) ILIKE UNACCENT(?)';
            $args[] = $neighborhoodName . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY 11';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar logradouro',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for badge
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteBadge(&$context)
    {
        $sql = 'SELECT description,
                       badgeStatusId
                  FROM basBadge
                 WHERE badgeId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for location
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupBadge(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class',$module);
        $MIOLO->conf->loadConf($module);

        $badgeId = $lookup->getFilterValue('badgeId');
        $description = $lookup->getFilterValue('description');
        $badgeStatusId = $lookup->getFilterValue('badgeStatusId');
        $badgeStatusDescription = $lookup->getFilterValue('badgeStatusDescription');

        $lookup->addFilterField(new MTextField('badgeId', $badgeId, _M('Código do crachá',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('description', $description, _M('Descrição do crachá',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('badgeStatusId', $badgeStatusId, _M('Código do status',$module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('badgeStatusDescription', $badgeStatusDescription, _M('Descrição do status',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        $columns[] = new DataGridColumn('badgeId', _M('Código do crachá', $module),'roght', true, null, true);
        $columns[] = new DataGridColumn('description', _M('Descrição do crachá', $module),'left', true, null, true);
        $columns[] = new DataGridColumn('badgeStatusId', _M('Código do status', $module),'left', true, null, true);
        $columns[] = new DataGridColumn('badgeStatusDescription', _M('Descrição do status', $module),'left', true, null, true);

        $sql = 'SELECT A.badgeId,
                       A.description,
                       A.badgeStatusId,
                       B.description AS badgeStatusDescription
                  FROM basBadge A
            INNER JOIN basBadgeStatus B
                    ON A.badgeStatusId = B.badgeStatusId';

        if ( strlen($badgeId) > 0 )
        {
            $where .= ' AND A.badgeId = ?';
            $args[] = $badgeId;
        }
        elseif ( strlen($description) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $description . '%';
        }

        if ( strlen($badgeStatusId) > 0 )
        {
            $where .= ' AND A.badgeStatusId = ?';
            $args[] = $badgeStatusId;
        }
        elseif ( strlen($badgeStatusDescription) > 0 )
        {
            $where .= ' AND UNACCENT(B.description) ILIKE UNACCENT(?)';
            $args[] = $badgeStatusDescription . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar crachá',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    public function autoCompleteTaskConfig(&$context)
    {
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT description
                  FROM bas.taskconfig
                 WHERE taskconfigid = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    public function lookupTaskConfig(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');
        $MIOLO->uses('classes/sagu.class', 'basic');
        $MIOLO->conf->loadConf($module);

        $taskConfigId = $lookup->getFilterValue('taskConfigId');
        $description = $lookup->getFilterValue('description');
        $idUser = $lookup->getFilterValue('idUser');
        $idGroup = $lookup->getFilterValue('idGroup');

        $lookup->addFilterField(new MTextField('taskConfigId', $taskConfigId, _M('Código', $module), 10));
        $descriptionField = new MTextField('description', $description, _M('Descrição', $module), 20);
        $descriptionField->addAttribute('maxlength', '255');
        $lookup->addFilterField($descriptionField);

        $columns[] = new MDataGridColumn('taskConfigId', _M('Código', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('taskConfigDescription', _M('Descrição', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('idUser', _M('Usuário', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('idGroup', _M('Grupo', $module), 'left', true, NULL, true);

        $sql = 'SELECT A.taskconfigid,
                       A.description as taskConfigDescription,
                       B.login as idUser,
                       C.m_group as idGroup
                  FROM bas.taskConfig A
             LEFT JOIN miolo_user B
                    ON (B.iduser = A.iduser)
             LEFT JOIN miolo_group C
                    ON (C.idgroup = A.idgroup)';

        if (strlen($taskConfigId) > 0)
        {
            $where.=' AND taskconfigid = ?';
            $args[] = $taskConfigId;
        }

        if (strlen($idUser) > 0)
        {
            $where.=' AND A.iduser = ?';
            $args[] = $idUser;
        }

        if (strlen($idGroup) > 0)
        {
            $where.=' AND A.idgroup = ?';
            $args[] = $idGroup;
        }

        if (strlen($description) > 0)
        {
            $where.=' AND UNACCENT(A.description) ILIKE UNACCENT(?) ';
            $args[] = $description.'%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql.=' ORDER BY taskconfigid';
        $sqlObject = new sql();

        if (strlen($where) == 0)
        {
            $sql.=' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql, $args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisar', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete da lookup de pessoas
     *
     * @param type $context
     */
    public function autoCompletePersons(&$context)
    {
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT DISTINCT BP.name
                      FROM ONLY basPerson BP
                          WHERE BP.personId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup de pessoas
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @global type $MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupPersons(&$lookup)
    {
        global $MIOLO;
        global $page;

        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class', 'basic');
        $MIOLO->conf->loadConf($module);
        $page->onLoad('document.' . $page->name . '.personName.focus();');

        // Obtém os dados
        $personId = $lookup->getFilterValue('personId');
        $personName = $lookup->getFilterValue('personName');
        $personType = $lookup->getFilterValue('personType');
        $rg = $lookup->getFilterValue('rg');
        $cpf = $lookup->getFilterValue('cpf');
        $countryId = $lookup->getFilterValue('countryId');
        $cityId = $lookup->getFilterValue('cityId');
        $cityName = $lookup->getFilterValue('cityName');
        $stateId = $lookup->getFilterValue('stateId');
        $stateName = $lookup->getFilterValue('stateName');
        $neighborhood = $lookup->getFilterValue('neighborhood');
        $location = $lookup->getFilterValue('location');
        $complement = $lookup->getFilterValue('complement');

        // Campos
        $lookup->addFilterField(new MTextField('personId', $personId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('personName', $personName, _M('Nome', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('rg', $rg, _M('RG', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('cpf', $cpf, _M('CPF', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $personTypes = array(
            'legal' => _M('Jurídica', $module),
            'physical' => _M('Todos', $module),
            'student' => _M('Aluno', $module),
            'professor' => _M('Professor', $module),
            'employee' => _M('Funcionário', $module)
        );
        $lookup->addFilterField(new MSelection('personType', ($personType ? $personType : 'physical'), _M('Tipo', $module), $personTypes));
        $busCountry = new BusinessBasicBusCountry();
        $lookup->addFilterField(new MComboBox('countryId', $countryId, _M('País', $module), $busCountry->listCountry()));
        $lookup->addFilterField(new MTextField('cityId', $cityId, _M('Código da cidade', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('cityName', $cityName, _M('Nome da cidade', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('stateName', $stateName, _M('Estado', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('neighborhood', $neighborhood, _M('Bairro', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('location', $location, _M('Logradouro', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('complement', $complement, _M('Complemento', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        $columns = array();
        $columns[] = new DataGridColumn('personId', _M('Código', $module ), 'right', true, null, true);
        $columns[] = new DataGridColumn('personName', _M('Nome', $module ), 'left', true, null, true);
        $columns[] = new DataGridColumn('location', _M('Endereço', $module ), 'left', true, null, true);
        $columns[] = new DataGridColumn('complement', _M('Complemento', $module ), 'left', true, null, true);
        $columns[] = new DataGridColumn('neighborhood', _M('Bairro', $module ), 'left', true, null, true);
        $columns[] = new DataGridColumn('city', _M('Cidade', $module ), 'left', true, null, true);
        $columns[] = new DataGridColumn('state', _M('Estado', $module ), 'left', true, null, true);
        $columns[] = new DataGridColumn('country', _M('País', $module ), 'left', true, null, true);
        if ( $personType != 'legal' )
        {
            // Documento de pessoas físicas
            $columns[] = new DataGridColumn('rg', _M('RG', $module ), 'right', true, null, true);
            $columns[] = new DataGridColumn('cpf', _M('CPF', $module ), 'right', true, null, true);
        }
        else
        {
            // Documento de pessoas jurídicas
            $columns[] = new DataGridColumn('cnpj', _M('CNPJ', $module ), 'right', true, null, true);

            $cnpjColumn = "COALESCE(LEGAL.cnpj, '-') AS cnpj,";
        }

        // Código dos documentos (RG e CPF)
        $documentTypeId_RG = SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_RG');
        $documentTypeId_CPF = SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF');

        $sql = "SELECT DISTINCT PERSON.personId AS personId,
                                PERSON.name AS personName,
                                COALESCE(RG.content, '-') AS rg,
                                COALESCE(CPF.content, '-') AS cpf,
                                {$cnpjColumn}
                                LOCATION.name || ' ' || PERSON.location AS location,
                                PERSON.complement,
                                COALESCE(PERSON.neighborhood, '-') AS neighborhood,
                                COALESCE(CITY.name, '-') AS city,
                                COALESCE(STATE.name, '-') AS state,
                                COALESCE(COUNTRY.name, '-') AS country
                      FROM ONLY basPerson PERSON
                 LEFT JOIN ONLY basDocument RG
                             ON RG.personId = PERSON.personId
                            AND RG.documentTypeId = {$documentTypeId_RG}
                 LEFT JOIN ONLY basDocument CPF
                             ON CPF.personId = PERSON.personId
                            AND CPF.documentTypeId = {$documentTypeId_CPF}
                 LEFT JOIN ONLY basCity CITY
                             ON CITY.cityId = PERSON.cityId
                 LEFT JOIN ONLY basState STATE
                             ON STATE.stateId = CITY.stateId
                 LEFT JOIN ONLY basCountry COUNTRY
                             ON COUNTRY.countryId = CITY.countryId
                 LEFT JOIN ONLY basLocationType LOCATION
                             ON LOCATION.locationTypeId = PERSON.locationTypeId";

        // Filtra, ou não, por tipo de pessoa
        if ( strlen($personType) > 0 )
        {
            // Somente estudantes
            if ( $personType == 'student' )
            {
                $sql .= ' INNER JOIN ONLY basPhysicalPersonStudent STUDENT
                                       ON STUDENT.personId = PERSON.personId';
            }
            elseif ( $personType == 'professor' )
            {
                $sql .= ' INNER JOIN ONLY basPhysicalPersonProfessor PROFESSOR
                                       ON PROFESSOR.personId = PERSON.personId';
            }
            elseif ( $personType == 'employee' )
            {
                $sql .= ' INNER JOIN ONLY basPhysicalPersonEmployee EMPLOYEE
                                       ON EMPLOYEE.personId = PERSON.personId';
            }
            elseif ( $personType == 'physical' )
            {
                $sql .= ' INNER JOIN ONLY basPhysicalPerson PHYSICAL
                                       ON PHYSICAL.personId = PERSON.personId';
            }
            elseif ( $personType == 'legal' )
            {
                $sql .= ' INNER JOIN ONLY basLegalPerson LEGAL
                                       ON LEGAL.personId = PERSON.personId';
            }
        }

        $where = '';
        $params = array();
        // Pessoa
        if ( strlen($personId) > 0 )
        {
            $where .= ' AND PERSON.personId = ? ';
            $params[] = $personId;
        }
        elseif ( strlen($personName) > 0 )
        {
            $where .= ' AND UNACCENT(PERSON.name) ILIKE UNACCENT(?)';
            $params[] = $personName . '%';
        }

        // Documentos
        if ( strlen($cpf) > 0 )
        {
            $where .= ' AND CPF.content = ?';
            $params[] = $cpf;
        }
        elseif ( strlen($rg) > 0 )
        {
            $where .= ' AND RG.content = ?';
            $params[] = $rg;
        }

        // País
        if ( strlen($countryId) > 0 )
        {
            $where .= ' AND CITY.countryId = ?';
            $params[] = $countryId;
        }
        elseif ( strlen($countryName) > 0 )
        {
            $where .= ' AND UNACCENT(COUNTRY.name) ILIKE UNACCENT(?)';
            $params[] = $countryName . '%';
        }

        // Estado
        if ( strlen($stateId) > 0 )
        {
            $where .= ' AND CITY.stateId ILIKE ?';
            $params[] = $stateId;
        }
        elseif ( strlen($stateName) > 0 )
        {
            $where .= ' AND UNACCENT(STATE.name) ILIKE UNACCENT(?)';
            $params[] = $stateName . '%';
        }

        // Cidade
        if ( strlen($cityId) > 0 )
        {
            $where .= ' AND PERSON.cityId = ?';
            $params[] = $cityId;
        }
        elseif ( strlen($cityName) > 0 )
        {
            $where .= ' AND UNACCENT(CITY.name) ILIKE UNACCENT(?)';
            $params[] = $cityName . '%';
        }

        // Bairro
        if ( strlen($neighborhood) > 0 )
        {
            $where .= ' AND PERSON.neighborhood ILIKE ?';
            $params[] = $neighborhood . '%';
        }

        // Endereço
        if ( strlen($location) > 0 )
        {
            $where .= ' AND UNACCENT(PERSON.location) ILIKE UNACCENT(?)';
            $params[] = $location . '%';
        }

        // Complemento
        if ( strlen($complement) > 0 )
        {
            $where .= ' AND PERSON.complement ILIKE ?';
            $params[] = $complement . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY PERSON.name';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql, $params));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar pessoas', $module ), 15, 0);
        $lookup->grid->setIsScrollable();
    }



/**
     * Auto complete for physical person professor
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompletePhysicalPersonEmployeeToReport(&$context)
    {
        $sql = 'SELECT A.personid as personId,
                       A.name AS personName,
                       D.name || \' \' || A.location AS location,
                       A.complement,
                       A.neighborhood,
                       A.cityId,
                       B.name AS cityName,
                       B.stateId,
                       B.countryId,
                       C.name AS countryName
             FROM ONLY basPhysicalPersonEmployee A
             LEFT JOIN basCity B
                    ON ( B.cityId = A.cityId )
             LEFT JOIN basCountry C
                    ON ( C.countryId = B.countryId )
             LEFT JOIN basLocationType D
                    ON ( A.locationTypeId = D.locationTypeId)
                 WHERE A.personId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for physical person professor
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupPhysicalPersonEmployeeToReport(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class',$module);
        $MIOLO->conf->loadConf($module);

        $personId = $lookup->getFilterValue('personId');
        $personName = $lookup->getFilterValue('personName');
        $personLastName = $lookup->getFilterValue('personLastName');
        $location = $lookup->getFilterValue('location');
        $complement = $lookup->getFilterValue('complement');
        $neighborhood = $lookup->getFilterValue('neighborhood');
        $cityId = $lookup->getFilterValue('cityId');
        $cityName = $lookup->getFilterValue('cityName');
        $stateId = $lookup->getFilterValue('stateId');
        $countryId = $lookup->getFilterValue('countryId');
        $countryName = $lookup->getFilterValue('countryName');
        $cpf = $lookup->getFilterValue('cpf');
        $username = $lookup->getFilterValue('username');

        $lookup->addFilterField(new MTextField('personId', $personId, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('personName', $personName, _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('personLastName', $personLastName, _M('Sobrenome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('cpf', $cpf, _M('CPF', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('username', $username, _M('Usuário', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE')));
        $lookup->addFilterField(new MTextField('location', $location, _M('Logradouro', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('cityName', $cityName, _M('Cidade', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(fields::country($countryId));

        global $page;
        $page->onLoad('document.' . $page->name . '.personName.focus()');

        $columns[] = new DataGridColumn('personId', _M('Código', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('personName', _M('Nome', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('location', _M('Logradouro', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('complement', _M('Complemento', $module), 'left', true, null, false);
        $columns[] = new DataGridColumn('neighborhood', _M('Bairro', $module), 'left', true, null, false);
        $columns[] = new DataGridColumn('cityId', _M('Código da cidade', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('cityName', _M('Nome da cidade', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('stateId', _M('Estado', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('countryId', _M('Código do país', $module), 'left', true, null, false);
        $columns[] = new DataGridColumn('countryName', _M('País', $module), 'left', true, null, true);

        $sql = "SELECT A.personId,
                       A.name AS personName,
                       D.name || ' ' || A.location AS location,
                       A.complement,
                       A.neighborhood,
                       A.cityId,
                       B.name AS cityName,
                       B.stateId,
                       B.countryId,
                       C.name AS countryName
             FROM ONLY basPhysicalPersonEmployee A
             LEFT JOIN basCity B
                    ON ( B.cityId = A.cityId )
             LEFT JOIN basCountry C
                    ON ( C.countryId = B.countryId )
             LEFT JOIN basLocationType D
                    ON ( A.locationTypeId = D.locationTypeId )
             LEFT JOIN basDocument I
                    ON (I.personId = A.personId
                    AND I.documentTypeId = GETPARAMETER('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF')::int)";

        if ( strlen($personId) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $args[] = $personId;
        }

        if ( strlen($personName) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?)';
            $args[] = $personName . '%';
        }

        if ( strlen($personLastName) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?)';
            $args[] = '%' . $personLastName . '%';
        }

        if ( strlen($location) > 0 )
        {
            $where .= ' AND UNACCENT(A.location) ILIKE UNACCENT(?)';
            $args[] = $location . '%';
        }

        if ( strlen($complement) > 0 )
        {
            $where .= ' AND A.complement ILIKE ?';
            $args[] = $complement . '%';
        }

        if ( strlen($neighborhood) > 0 )
        {
            $where .= ' AND UNACCENT(A.neighborhood) ILIKE UNACCENT(?)';
            $args[] = $neighborhood . '%';
        }

        if ( strlen($cityId) > 0 )
        {
            $where .= ' AND A.cityId = ?';
            $args[] = $cityId;
        }

        if ( strlen($cityName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $cityName . '%';
        }

        if ( strlen($stateId) > 0 )
        {
            $where .= ' AND B.stateId ILIKE ?';
            $args[] = $stateId;
        }

        if ( strlen($countryId) > 0 )
        {
            $where .= ' AND C.countryId = ?';
            $args[] = $countryId;
        }

        if ( strlen($countryName) > 0 )
        {
            $where .= ' AND UNACCENT(C.name) ILIKE UNACCENT(?)';
            $args[] = $countryName . '%';
        }

        if ( strlen($cpf) > 0 )
        {
            $where .= ' AND I.content ILIKE ?';
            $args[] = $cpf . '%';
        }

        if ( strlen($username) > 0 )
        {
            $where .= ' AND A.mioloUserName = ?';
            $args[] = $username;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5) . '
                   ORDER BY A.name';
        }
        else
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar funcionários',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }

    public function autoCompleteCsvImportation(&$context)
    {
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT timestamptouser(date)
                  FROM basCsvImportation
                 WHERE csvimportationid = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    public function lookupCsvImportation(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');
        $MIOLO->uses('classes/sagu.class', 'basic');
        $MIOLO->conf->loadConf($module);

        global $page;
        $page->onLoad('document.' . $page->name . '.observation.focus()');

        $where = '';

        $csvImportationId = $lookup->getFilterValue('csvImportationId');
        $observation = $lookup->getFilterValue('observation');
        $date = $lookup->getFilterValue('date');
        $type = $lookup->getFilterValue('type');
        $layout = $lookup->getFilterValue('layout');

        $lookup->addFilterField(new MTextField('csvImportationId', $csvImportationId, _M('Código', $module), 10));

        $obsField = new MTextField('observation', $observation, _M('Observações', $module), 20);
        $obsField->addAttribute('maxlength', '255');
        $lookup->addFilterField($obsField);

        $lookup->addFilterField(new MCalendarField('date', $date, _M('Data', $module), 13));
        $lookup->addFilterField(new MSelection('type', $type, _M('Tipo', $module), BasCSVImportation::listImportationTypes()));
        $lookup->addFilterField(new MSelection('layout', $layout, _M('Layout', $module), sCSVFileImporter::listarPlanilhas()));

        $columns[] = new MDataGridColumn('csvImportationId', _M('Código', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('date', _M('Data importação', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('type', _M('Tipo', $module), 'left', true, NULL, true, BasCSVImportation::listImportationTypes());
        $columns[] = new MDataGridColumn('layout', _M('Layout', $module), 'left', true, NULL, true, sCSVFileImporter::listarPlanilhas());
        $columns[] = new MDataGridColumn('observation', _M('Observação', $module), 'left', true, NULL, true);

        $sql = 'SELECT A.csvImportationId,
                       A.observation as observation,
                       timestamptouser(A.date) AS date,
                       A.type,
                       A.layout
                  FROM basCsvImportation A';

        if (strlen($csvImportationId) > 0)
        {
            $where.=' AND A.csvimportationid = ?';
            $args[] = $csvImportationId;
        }

        if (strlen($observation) > 0)
        {
            $where.=' AND ( UNACCENT(A.observation) ILIKE UNACCENT(?) OR A.observation IS NULL )';
            $args[] = $observation . '%';
        }

        if ( strlen($date) > 0 )
        {
            $where .= ' AND datetouser(A.date::date) = ?';
            $args[] = $date;
        }

        if ( strlen($type) > 0 )
        {
            $where .= ' AND lower(A.type) = lower(?)';
            $args[] = $type;
        }

        if ( strlen($layout) > 0 )
        {
            $where .= ' AND lower(A.layout) = lower(?)';
            $args[] = $layout;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql.=' ORDER BY A.date DESC';
        $sqlObject = new sql();

        if (strlen($where) == 0)
        {
            $sql.=' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql, $args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisar', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    public function autoCompleteClass($context)
    {
        $view_turmas = 'unit_view_turmas';

        if ( MIOLO::_REQUEST('allClasses') == DB_TRUE )
        {
            $view_turmas = 'view_turmas';
        }

        if ( SAGU::getParameter('BASIC', 'MODULE_ACADEMIC_INSTALLED') == 'YES' )
        {
            $sql = "SELECT className,
                           modulo,
                           periodId
                      FROM {$view_turmas}
                     WHERE classId = ?
                       AND modulo = 'A'";
        }

        if ( SAGU::getParameter('BASIC', 'MODULE_PEDAGOGICO_INSTALLED') == 'YES' )
        {
            $sql = "SELECT className,
                           modulo,
                           periodId
                      FROM {$view_turmas}
                     WHERE classId = ?
                       AND modulo = 'P'";
        }

        if ( SAGU::getParameter('BASIC', 'MODULE_ACADEMIC_INSTALLED') == 'YES' && SAGU::getParameter('BASIC', 'MODULE_PEDAGOGICO_INSTALLED') == 'YES' )
        {
            $sql = "SELECT className,
                           modulo,
                           periodId
                      FROM {$view_turmas}
                     WHERE classId = ?";
        }

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    public function lookupClass($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $MIOLO->page->onLoad( 'document.' . $MIOLO->page->name . '.className.focus()' );

        $classId = $lookup->getFilterValue( 'classId' );
        $className = $lookup->getFilterValue( 'className' );
        $periodId = $lookup->getFilterValue( 'periodId' );
        $courseId = $lookup->getFilterValue( 'courseId' );
        $courseVersion = $lookup->getFilterValue( 'courseVersion' );
        $courseName = $lookup->getFilterValue( 'courseName' );
        $closed = $lookup->getFilterValue( 'closed' );

        // Recebe DB_TRUE caso solicitaç?o seja para exibir todas as turmas independente a unidade.
        $allClasses = $lookup->getFilterValue('allClasses');

        $lookup->addFilterField( new MTextField( 'classId', $classId, _M('Código da turma', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'className', $className, _M('Nome da turma', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'periodId', $periodId, _M('Código do período', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseId', $courseId, _M('Código do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseVersion', $courseVersion, _M('Versão do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseName', $courseName, _M('Nome do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MSelection( 'closed', $closed, _M('Mostrar encerradas/fechadas', null), SAGU::listYesNo()));
        $lookup->addFilterField( new SHiddenField('allClasses', $allClasses) );

        $columns = array(
                new DataGridColumn( 'classId', _M('Código da turma', $module ), 'left', true, null, true ),
                new DataGridColumn( 'className', _M('Nome da turma', $module ), 'left', true, null, true ),
                new DataGridColumn( 'periodId', _M('Código do período', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseId', _M('Código do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseVersion', _M('Versão do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseName', _M('Nome do curso', $module ), 'left', true, null, true )
        );

        $view_turmas = 'unit_view_turmas';

        if ( $allClasses == DB_TRUE )
        {
            $view_turmas = 'view_turmas';
        }

        if ( SAGU::getParameter('BASIC', 'MODULE_ACADEMIC_INSTALLED') == 'YES' )
        {
            $modulo = " WHERE modulo = 'A' ";
            if (SAGU::getParameter('BASIC', 'MODULE_PEDAGOGICO_INSTALLED'))
            {
                $modulo = " WHERE (modulo = 'A' OR modulo = 'P') ";
            }
        }
        else
        {
            $modulo = " WHERE modulo = 'P' ";
        }

        $sql = "SELECT classId,
                       className,
                       modulo,
                       courseId,
                       courseVersion,
                       courseName,
                       periodId
                  FROM {$view_turmas}
                       {$modulo}";


        if ( strlen( $classId ) > 0 )
        {
            $where .= ' AND classId ILIKE ?';
            $args[] = $classId . '%';
        }
        if ( strlen( $className ) > 0 )
        {
            $where .= ' AND UNACCENT(className) ILIKE UNACCENT(?) ';
            $args[] = $className . '%';
        }
        if ( strlen( $periodId ) > 0 )
        {
            $where .= ' AND periodId = ? ';
            $args[] = $periodId;
        }
        if ( strlen( $courseId ) > 0 )
        {
            $where .= ' AND courseId = ? ';
            $args[] = $courseId;
        }
        if ( strlen( $courseVersion ) > 0 )
        {
            $where .= ' AND courseVersion = ? ';
            $args[] = $courseVersion;
        }
        if ( strlen( $courseName ) > 0 )
        {
            $where .= ' AND ( getCourseShortName(courseId) ILIKE ? OR getCourseName(courseId) ILIKE ? )';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }
        if ( $closed == DB_FALSE )
        {
            $where .= ' AND (closed = \'false\' OR closed IS NULL)';
        }
        else if ( $closed == DB_TRUE )
        {
            $where .= ' AND (closed = \'true\' OR closed IS NOT NULL)';
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' AND ' . substr( $where, 4 );
        }

        $sql .= ' ORDER BY className';

        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql( );

        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );

        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );

        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisa por turma', $module ), 15, 0 );

        $lookup->grid->setIsScrollable();
    }

    public function autoCompleteCourseOccurrence($context)
    {
        $view_ocorrencia_de_curso = 'unit_view_ocorrencia_de_curso';

        if ( MIOLO::_REQUEST('allCourseOccurrences') == DB_TRUE )
        {
            $view_ocorrencia_de_curso = 'view_ocorrencia_de_curso';
        }

        if (SAGU::getParameter('BASIC', 'MODULE_ACADEMIC_INSTALLED') == 'YES')
        {
            $sql = "SELECT coursename,
                           courseversion,
                           turndescription,
                           unitdescription,
                           unitid,
                           turnid,
                           modulo,
                           courseid
                      FROM {$view_ocorrencia_de_curso}
                     WHERE courseid = ?
                       AND modulo = 'A'";
        }

        if (SAGU::getParameter('BASIC', 'MODULE_PEDAGOGICO_INSTALLED') == 'YES')
        {
            $sql = "SELECT coursename,
                           courseversion,
                           turndescription,
                           unitdescription,
                           unitid,
                           turnid,
                           modulo,
                           courseid
                      FROM {$view_ocorrencia_de_curso}
                     WHERE ocorrenciacursoid = ?
                       AND modulo = 'P'";
        }

        if (SAGU::getParameter('BASIC', 'MODULE_ACADEMIC_INSTALLED') == 'YES' &&
                SAGU::getParameter('BASIC', 'MODULE_PEDAGOGICO_INSTALLED') == 'YES')
        {
            $sql = "SELECT coursename,
                           courseversion,
                           turndescription,
                           unitdescription,
                           unitid,
                           turnid,
                           modulo,
                           courseid
                      FROM {$view_ocorrencia_de_curso}
                     WHERE courseid = ?";
        }

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    public function lookupCourseOccurrence($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $MIOLO->page->onLoad( 'document.' . $MIOLO->page->name . '.className.focus()' );

        $busFormation = new BusinessAcademicBusFormationLevel();

        $courseId = $lookup->getFilterValue( 'courseid' );
        $courseVersion = $lookup->getFilterValue( 'courseversion' );
        $turnId = $lookup->getFilterValue( 'turnid' );
        $unitId = $lookup->getFilterValue( 'unitid' );
        $courseName = $lookup->getFilterValue( 'coursename' );
        $formationLevelId = $lookup->getFilterValue ('formationlevelid');
        $status = $lookup->getFilterValue ('status');

        // Recebe DB_TRUE caso solicitaç?o seja para exibir todas as turmas independente a unidade.
        $allCourseOccurrences = $lookup->getFilterValue('allCourseOccurrences');

        //Opções de formação
        $lookup->addFilterField( new MTextField( 'courseid', $courseId, _M('Código do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseversion', $courseVersion, _M('Versão do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'turnid', $turnId, _M('Código do turno', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'unitid', $unitId, _M('Código da unidade', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'coursename', $courseName, _M('Nome do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MComboBox( 'formationlevelid', $formationLevelId, _M('Nível de formação', $module ), $busFormation->listFormationLevel() ,true, null, SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MSelection( 'status', $status, _M('Status', $module ), array(DB_FALSE => "Desativado", DB_TRUE => "Ativado") ) );
        $lookup->addFilterField( new SHiddenField('allCourseOccurrences', $allCourseOccurrences) );

        $columns = array(
                new DataGridColumn( 'courseid', _M('Cód. Curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseversion', _M('Versão do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'coursename', _M('Nome do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'turndescription', _M('Turno', $module ), 'left', true, null, true ),
                new DataGridColumn( 'unitdescription', _M('Unidade', $module ), 'left', true, null, true ),
        );

        $view_ocorrencia_de_curso = 'unit_view_ocorrencia_de_curso';

        if ( $allCourseOccurrences == DB_TRUE )
        {
            $view_ocorrencia_de_curso = 'view_ocorrencia_de_curso';
        }

        if (SAGU::getParameter('BASIC', 'MODULE_ACADEMIC_INSTALLED') == 'YES')
        {
            $modulo = " WHERE modulo = 'A' ";
            if (SAGU::getParameter('BASIC', 'MODULE_PEDAGOGICO_INSTALLED') == 'YES')
            {
                $modulo = " WHERE (modulo = 'A' OR modulo = 'P') ";
            }
        }
        else
        {
            $modulo = " WHERE modulo = 'P' ";
        }

        $sql = "SELECT courseId,
                       courseName,
                       courseVersion,
                       turnDescription,
                       unitDescription,
                       turnId,
                       unitId
                  FROM {$view_ocorrencia_de_curso}
                       {$modulo}";

        if ( strlen( $courseId ) > 0 )
        {
            $where .= ' AND courseId ILIKE ?';
            $args[] = $courseId . '%';
        }
        if ( strlen( $formationLevelId ) > 0 )
        {
            $where .= ' AND formationLevelId = ? ';
            $args[] = $formationLevelId;
        }
        if ( strlen( $courseVersion ) > 0 )
        {
            $where .= ' AND courseVersion = ? ';
            $args[] = $courseVersion;
        }
        if ( strlen( $turnId ) > 0 )
        {
            $where .= ' AND turnId = ? ';
            $args[] = $turnId;
        }
        if ( strlen( $unitId ) > 0 )
        {
            $where .= ' AND unitId = ? ';
            $args[] = $unitId;
        }
        if ( strlen( $courseName ) > 0 )
        {
            $where .= ' AND UNACCENT(courseName) ILIKE UNACCENT(?) ';
            $args[] = $courseName;
        }
        if ( strlen ($status) > 0 )
        {
            $where .= ' AND status = ? ';
            $args[] = $status;
        }
        if ( strlen( $where ) > 0 )
        {
            $sql .= ' AND ' . substr( $where, 4 );
        }

        $sql .= ' ORDER BY courseName';

        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql( );

        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );

        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );

        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisa por ocorrência de curso', $module ), 15, 0 );

        $lookup->grid->setIsScrollable();
    }
}
?>