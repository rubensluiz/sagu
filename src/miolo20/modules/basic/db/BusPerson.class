<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * Class to manipulate the basPerson table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 25/08/2005
 */
class BusinessBasicBusPerson extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @return (array): Return an array with the entire table
     */
    public function listPerson()
    {
        $sql = 'SELECT personId,
                       name
             FROM ONLY basPerson
              ORDER BY name';

        $ret = $this->getDatabase()->query($sql);
        return $ret;
    }

    /**
     * Return a specific record from the database
     *
     * @param $personId (integer): Primary key of the record to be retrieved
     * @return (object): Return an object of the type handled by the class
     */
    public function getPerson($personId)
    {
        $sql = 'SELECT A.personId,
                       A.personDv,
                       A.personMask,
                       A.name,
                       A.name AS personName,
                       A.shortName,
                       A.cityId,
                       B.name,
                       A.zipCode,
                       A.location,
                       A.locationTypeId,
                       E.name AS locationType,
                       A.complement,
                       A.neighborhood,
                       A.email,
                       A.emailAlternative,
                       A.url,
                       TO_CHAR(A.dateIn,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.mioloUserName,
                       A.password,
                       A.isAllowPersonalData,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress,
                       A.number,
                       B.stateId,
                       C.name as stateName,
                       D.name as countryName,
                       A.sentEmail,
                       MU.m_password AS mioloPassword,
                       MU.login AS mioloLogin,
                       MU.iduser AS mioloIdUser,
                       A.photoId
             FROM ONLY basPerson A
             LEFT JOIN basCity B
                    ON ( A.cityId = B.cityId )
             LEFT JOIN basState C
                    ON ( C.stateId = B.stateId)
             LEFT JOIN basCountry D
                    ON ( D.countryId = C.countryId)
             LEFT JOIN basLocationType E
                    ON ( A.locationTypeId = E.locationTypeId )
             LEFT JOIN miolo_user MU
                    ON ( A.mioloUsername = MU.login )
                 WHERE A.personId = ?';

        $params = array();
        $params[] = $personId;

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $params));

        $person = new basPerson();
        list ( $person->personId,
               $person->personDv,
               $person->personMask,
               $person->name,
               $person->personName,
               $person->shortName,
               $person->cityId,
               $person->cityName,
               $person->zipCode,
               $person->location,
               $person->locationTypeId,
               $person->locationType,
               $person->complement,
               $person->neighborhood,
               $person->email,
               $person->emailAlternative,
               $person->url,
               $person->dateIn,
               $person->mioloUserName,
               $person->password,
               $person->isAllowPersonalData,
               $person->userName,
               $person->dateTime,
               $person->ipAddress,
               $person->number,
               $person->stateId,
               $person->stateName,
               $person->countryName,
               $person->sentEmail,
               $person->mioloPassword,
               $person->mioloLogin,
               $person->mioloIdUser,
               $person->photoId) = $result[0];

        return $person;
    }

    /**
     * Get the person name if that exists
     *
     * @param $filters (int): Person id (primary key for basPerson)
     * @return (varchar): The person name
     */
    public function getPersonName($personId)
    {
        $sql = ' SELECT A.name
              FROM ONLY basPerson A
                  WHERE A.personId = ? ';

        $params = array();
        $params[] = $personId;

        $return = $this->getDatabase()->query(SAGU::prepare($sql, $params));

        return $return[0][0];
    }

    /**
     * Get the person age if that exists
     *
     * @param $filters (int): Person id (primary key for basPerson)
     * @return (int): The person age in years
     */
    public function getPersonAge($personId)
    {
        $sql = 'SELECT getPhysicalPersonAge(?::BIGINT)';

        $return = $this->getDatabase()->query(SAGU::prepare($sql, array($personId)));

        return $return[0][0];
    }

    /*
     * Pega o ID do responsável se a pessoa for de menor.
     */
    public function getResponsableId($personId)
    {     
        if ( $this->getPersonAge($personId) < 18 )
        {
            $sql = 'SELECT responsablelegalid FROM basPhysicalPerson WHERE personId = ?';
            $return = $this->getDatabase()->query(SAGU::prepare($sql, array($personId)));
            return $return[0][0];
        } 
        else
        {
            return 0;
        }
    }
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     * @return (array): An array containing the search results
     */
    public function searchPerson($filters)
    {
        $sql = "SELECT A.personId,
                       A.personDv,
                       A.personMask,
                       A.name,
                       A.shortName,
                       A.cityId,
                       B.name,
                       A.zipCode,
                       A.location,
                       A.locationTypeId,
                       E.name AS locationType,
                       A.complement,
                       A.neighborhood,
                       A.email,
                       A.emailAlternative,
                       A.url,
                       TO_CHAR(A.dateIn,'" . SAGU::getParameter('BASIC', 'MASK_DATE') . "'),
                       A.mioloUserName,
                       A.password,
                       A.isAllowPersonalData,
                       A.userName,
                       TO_CHAR(A.dateTime,'" . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . "'),
                       A.ipAddress,
                       A.number,
                       B.stateId,
                       C.name as stateName,
                       D.name as countryName,
                       F.content as cpf,
                       G.cnpj,
                       H.acronym,
                       G.stateregistration,
                       PP.datebirth
             FROM ONLY basPerson A
             LEFT JOIN  basphysicalperson PP
                    ON  A.personid = PP.personid
             LEFT JOIN basCity B
                    ON A.cityId = B.cityId
             LEFT JOIN basState C
                    ON C.stateId = B.stateId
             LEFT JOIN basCountry D
                    ON D.countryId = C.countryId
             LEFT JOIN basLocationType E
                    ON A.locationTypeId = E.locationTypeId
             LEFT JOIN basdocument F
                    ON ( A.personid = F.personid AND F.documenttypeid = '" . SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF') . "' )
             LEFT JOIN baslegalperson G
                    ON A.personid = G.personid
             LEFT JOIN bascompanyconf H
                    ON A.personId = H.personId
             LEFT JOIN miolo_user MU
                    ON MU.login = A.mioloUserName";

        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND A.personId = ? ';
            $params[] = $filters->personId;
        }

        if ( strlen($filters->name) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?) ';
            $params[] = $filters->name . '%';
        }

        if ( strlen($filters->email) > 0 )
        {
            $where .= ' AND A.email ILIKE ? ';
            $params[] = '%' . $filters->email . '%';
        }
        
        if ( strlen($filters->fullEmail) > 0 )
        {
            $where .= ' AND UPPER(A.email) = UPPER(?) ';
            $params[] = $filters->fullEmail;
        }

        if ( strlen($filters->emailAlternative) > 0 )
        {
            $where .= ' AND A.emailAlternative ILIKE ? ';
            $params[] = $filters->emailAlternative . '%';
        }

        if ( strlen($filters->datetime) > 0 )
        {
            $where .= ' AND TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\') = ? ';
            $params[] = $filters->datetime;
        }

        if ( strlen($filters->idUser) > 0 )
        {
            $where .= ' AND MU.iduser = ? ';
            $params[] = $filters->idUser;
        }
        
        if ( strlen($filters->cpf) > 0 )
        {
            $where .= ' AND F.content = ? ';
            $params[] = $filters->cpf;
        }

        if ( strlen($filters->dateBirth) > 0 )
        {
            $where .= ' AND PP.datebirth = ? ';
            $params[] = $filters->dateBirth;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY A.name';
            $result = $this->getDatabase()->query(SAGU::Prepare($sql, $params));
        }

        return $result;
    }

    /**
     * Generate a person DV
     *
     * @param $data (personId): basPerson primary key
     * @return the respective code
     */
    function getDv($personId)
    {
        $max = 9;                      // max number of chars
        $len = strlen((int)$personId); // chars number of person_id
        $acum = 0;

        if ( ($len <= $max) && (is_numeric($personId)) )
        {
            for ( $x = $len; $x < $max; $x++ )
            {
                $personId = '0' . $personId;
            }

            for ( $x = 0; $x < $max; $x++ )
            {
                $acum += $personId[$x] * ($x + 1);
            }

            $acum *= 10;
            $res = $acum % 11;
            if ( $res >= 10 )
            {
                $res = 0;
            }
            return $res;
        }
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     * @return True if succed, otherwise False
     */
    public function insertPerson($data)
    {
        $MIOLO = MIOLO::getInstance();
        
        $sql = 'SELECT NEXTVAL(\'seq_personid\')';
        $ret = $this->getDatabase()->query($sql);

        $data->photoId = $this->checkFile($data->_uploadFile);
        $data->personId = strlen($data->personId) > 0 ? $data->personId : $ret[0][0];
        $data->personDv = $this->getDv($data->personId);

        $sql = 'INSERT INTO basPerson
                            ( personId,
                              personDv,
                              personMask,
                              name,
                              shortName,
                              cityId,
                              zipCode,
                              location,
                              locationTypeId,
                              complement,
                              neighborhood,
                              email,
                              emailAlternative,
                              url,
                              mioloUserName,
                              password,
                              isAllowPersonalData,
                              number,
                              sentEmail,
                              photoId)
                     VALUES ( ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?)';

        $params = array();
        $params[] = $data->personId;
        $params[] = $data->personDv;
        $params[] = strtoupper($data->personMask);
        $params[] = strtoupper(SAGU::NVL($data->name, $data->personName));
        $params[] = strtoupper($data->shortName);
        $params[] = $data->cityId;
        $params[] = strtoupper($data->zipCode);
        $params[] = strtoupper($data->location);
        $params[] = strlen($data->locationTypeId) > 0 ? $data->locationTypeId : SAGU::getParameter('BASIC', 'DEFAULT_LOCATION_TYPE_ID');
        $params[] = strtoupper($data->complement);
        $params[] = strtoupper($data->neighborhood);
        $params[] = $data->email;
        $params[] = $data->emailAlternative;
        $params[] = $data->url;
        $params[] = $data->mioloUserName;
        $params[] = $data->password;
        $params[] = SAGU::NVL($data->isAllowPersonalData, DB_TRUE);
        $params[] = strtoupper($data->number);
        $params[] = SAGU::NVL($data->sentEmail, DB_FALSE);
        $params[] = $data->photoId;

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $params, false));

        $retVal = false;
        if ( $result && strlen($data->personId) > 0 )
        {
            $retVal = $data;
            
            // Insere documento CPF caso exista
            if ( strlen($data->personCPF) > 0 )
            {
                $busDocument = new BusinessBasicBusDocument();
                
                $docData = new stdClass();
                $docData->content = $data->personCPF;
                
                $rows = $busDocument->searchDocument($docData);
                if ( count($rows) <= 0 )
                {
                    $docData->personId = $data->personId;
                    $docData->documentTypeId = SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF');
                    $docData->isDelivered = DB_FALSE;
                    $docData->isExcused = DB_FALSE;
                    $busDocument->insertDocument($docData);
                }
            }
        }

        return $retVal;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     * @return (boolean): True if succeed, otherwise False
     */
    public function updatePerson($data)
    {
        $sql = 'UPDATE basPerson SET';

        $params = array();
        
        if($data->personDv)
        {
            $sql .= ' personDv = ?, ';
            $params[] = $data->personDv;
        }
        
        if($data->personMask)
        {
            $sql .= ' personMask = ?, ';
            $params[] = strtoupper($data->personMask);
        }
        
        if($data->name)
        {
            $sql .= ' name = ?, ';
            $params[] = strtoupper($data->name);
        }
        
        if ( isset($data->shortName) )
        {
            $sql .= ' shortName = ?, ';
            $params[] = strtoupper($data->shortName);
        }
        
        if ( isset($data->cityId) )
        {
            $sql .= ' cityId = ?, ';
            $params[] = $data->cityId;
        }
        
        if ( isset($data->zipCode) )
        {
            $sql .= ' zipCode = ?, ';
            $params[] = strtoupper($data->zipCode);
        }
        
        if ( isset($data->location) )
        {
            $sql .= ' location = ?, ';
            $params[] = strtoupper($data->location);
        }
        
        if ( isset($data->locationTypeId) )
        {
            $sql .= ' locationTypeId = ?, ';
            $params[] = strlen($data->locationTypeId) > 0 ? $data->locationTypeId : SAGU::getParameter('BASIC', 'DEFAULT_LOCATION_TYPE_ID');
        }
        
        if ( isset($data->complement) )
        {
            $sql .= ' complement = ?, ';
            $params[] = strtoupper($data->complement);
        }
        
        if ( isset($data->neighborhood) )
        {
            $sql .= ' neighborhood = ?, ';
            $params[] = strtoupper($data->neighborhood);
        }
        
        if ( isset($data->email) )
        {
            $sql .= ' email = ?, ';
            $params[] = $data->email;
        }
        
        if ( isset($data->emailAlternative) )
        {
            $sql .= ' emailAlternative = ?, ';
            $params[] = $data->emailAlternative;
        }
        
        if ( isset($data->url) )
        {
            $sql .= ' url = ?, ';
            $params[] = $data->url;
        }
        
        if($data->mioloUserName)
        {
            $sql .= ' mioloUserName = ?, ';
            $params[] = $data->mioloUserName;
        }
        
        if($data->password)
        {
            $sql .= ' password = ?, ';
            $params[] = $data->password;
        }
        
        $sql .= ' sentEmail = ?, ';
        $params[] = SAGU::NVL($data->sentEmail, DB_FALSE);

        if ( strlen($data->isAllowPersonalData) > 0 )
        {
            $sql .= ' isAllowPersonalData = ?, ';
            $params[] = $data->isAllowPersonalData;
        }

        // Quando existe arquivo novo, atualiza, senao, mantem o atual
        $fileId = $this->checkFile($data->_uploadFile);
        if ( strlen($fileId) > 0 )
        {
            $sql .= 'photoId = ?, ';
            $params[] = $fileId;
        }
        else if(strcmp($data->SPhotoManagerFlag, 'remove') == 0) // Se não deixa nulo.
        {
            $sql .= 'photoId = ?, ';
            $params[] = $data->photoId;
            
        }       
        
        if ( isset($data->number) )
        {
            $sql .= ' number = UPPER(?), ';
            $params[] = $data->number;
        }
        
        $sql = substr($sql, 0, -2);

        $sql .= ' WHERE personId = ?';
        $params[] = $data->personId;

        $sqls = SAGU::prepare($sql, $params, false);

        for ( $i = 0; $i < count($sqls); $i++ )
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }
        
        return $result;
    }

    /**
     * Update the person data, from forms fields that haven't null values
     *
     * @param $data (object): Data which will replace the old record data
     * @return (boolean): True if succeed, otherwise False
     */
    public function updatePersonToInscriptions($data)
    {
        //Aqui entra para update da pessoa
        $sql = 'UPDATE basPerson SET ';

        $params = array();
        if ( strlen($data->personDv) > 0 )
        {
            $sql .= ' personDv = ?, ';
            $params[] = $data->personDv;
        }

        if ( strlen($data->personMask) > 0 )
        {
            $sql .= 'personMask = UPPER(?), ';
            $params[] = $data->personMask;
        }

        if ( strlen($data->name) > 0 )
        {
            $sql .= ' name = ?, ';
            $params[] = strtoupper($data->name);
        }

        if ( strlen($data->shortName) > 0 )
        {
            $sql .= ' shortName = ?, ';
            $params[] = strtoupper($data->shortName);
        }

        if ( strlen($data->cityId) > 0 )
        {
            $sql .= ' cityId = ?, ';
            $params[] = $data->cityId;
        }

        if ( strlen($data->zipCode) > 0 )
        {
            $sql .= ' zipCode = ?, ';
            $params[] = strtoupper($data->zipCode);
        }

        if ( strlen($data->location) > 0 )
        {
            $sql .= ' location = ?, ';
            $params[] = strtoupper($data->location);
        }

        if ( strlen($data->locationTypeId) > 0 )
        {
            $sql .= ' locationTypeId = ?, ';
            $params[] = $data->locationTypeId;
        }

        if ( strlen($data->complement) > 0 )
        {
            $sql .= ' complement = ?, ';
            $params[] = strtoupper($data->complement);
        }

        if ( strlen($data->neighborhood) > 0 )
        {
            $sql .= ' neighborhood = ?, ';
            $params[] = strtoupper($data->neighborhood);
        }

        if ( strlen($data->email) > 0 )
        {
            $sql .= ' email = ?, ';
            $params[] = $data->email;
        }

        if ( strlen($data->emailAlternative) > 0 )
        {
            $sql .= ' emailAlternative = ?, ';
            $params[] = $data->emailAlternative;
        }

        if ( strlen($data->url) > 0 )
        {
            $sql .= ' url = ?, ';
            $params[] = $data->url;
        }

        if ( strlen($data->mioloUserName) > 0 )
        {
            $sql .= ' mioloUserName = ?, ';
            $params[] = $data->mioloUserName;
        }

        if ( strlen($data->password) > 0 )
        {
            $sql .= ' password = ?, ';
            $params[] = $data->password;
        }

        if ( strlen($data->isAllowPersonalData) > 0 )
        {
            $sql .= ' isAllowPersonalData = ?, ';
            $params[] = $data->isAllowPersonalData;
        }

        if ( strlen($data->number) > 0 )
        {
            $sql .= ' number = ?, ';
            $params[] = strtoupper($data->number);
        }
        
        $fileId = $this->checkFile($data->_uploadFile, $data->personId);
        if ( strlen($fileId) > 0 )
        {
            $sql .= 'photoId = ?, ';
            $params[] = $fileId;
        }

        if ( count($params) > 0 )
        {
            $params[] = $data->personId;
            $sql .= ' WHERE personId = ?';
            $sql = str_replace(',  WHERE', ' WHERE', $sql);
            $sqls = SAGU::prepare($sql, $params, false);

            for ( $i = 0; $i < count($sqls); $i++ )
            {
                $result = $this->getDatabase()->execute($sqls[$i]);
            }

            return $result;
        }

        return false;
    }

    /**
     * Delete a record
     *
     * @param $personId (string): Primary key for deletion
     * @return (boolean): True if succeed, otherwise False
     */
    public function deletePerson($personId)
    {
        $result = FALSE;
        
        // Verifica se a pessoa é de uma unidade.
        // Se for, avisa o usuário e não exclui.
        $busUnit = new BusinessBasicBusUnit();
        $filter = new stdClass();
        $filter->personId = $personId;
        $unit = $busUnit->searchUnit($filter);        
        if ( count($unit) > 0 )
        {
            $MIOLO = MIOLO::getInstance();
            $url = $MIOLO->GetActionURL('basic', 'main:company:unit', NULL, array(
                'function' => 'update',
                'unitId' => $unit[0][0]
            ));
            
            $link = new MLink('lnkUnit', _M('Clique aqui'), $url, $text = _M('Clique aqui'), $target = 'blank');
            
            throw new Exception('Ops! Esta pessoa não pode ser excluída enquanto estiver referenciada a uma unidade.<br>
                Para possibilitar a exclusão desta pessoa, primeiro ajuste o campo \'Pessoa jurídica\' da unidade.<br>
                ' . $link->generate() . ' para alterar o cadastro da unidade.');
        }
        else
        {
            // Verifica e deleta os telefones antes de deletar a pessoa.
            if ( $this->ifPhoneExists($personId) )
            {
                $sql = 'DELETE FROM basPhone
                              WHERE personId = ?';

                $result = $this->getDatabase()->execute(SAGU::prepare($sql, array( $personId )));
            }

            // Deleta a pessoa.
            $sql = 'DELETE FROM basPerson
                          WHERE personId = ?';

            $params = array();
            $params[] = $personId;

            $result = $this->getDatabase()->execute(SAGU::prepare($sql, $params));
        }

        return $result;   
    }
    
    /**
     * Verifica se a pessoa possue telefones na basPhone.
     * 
     * @param type $personId
     * @return type data
     */
    public function ifPhoneExists($personId)
    {
        $sql = 'SELECT * 
                  FROM basPhone
                 WHERE personId = ?';
        
        $result = $this->getDatabase()->query(SAGU::prepare($sql, array( $personId )));
        
        return $result;
    }

    /**
     * Verify if the informed user and password match
     *
     * @param $personId (string): Primary key of the basPerson table
     * @param $password (string): Password for the informed personId
     * @return (boolean): True if personId and password are valid, otherwise False
     */
    public function authenticate($personId, $password, $unusedParameter)
    {
        $sql = 'SELECT A.personId,
                       B.m_password
             FROM ONLY basPerson A
            INNER JOIN miolo_user B
                    ON (TRIM(B.login) = TRIM(A.mioloUserName))
                 WHERE ( A.personId::varchar = ?::varchar OR A.miolousername = ?::varchar )
                   AND ( B.m_password = ?
                    OR B.m_password = MD5(?) 
                    OR \''.SAGU::getParameter('BASIC', 'MASTER_PASSWORD'). '\' = ?)';

        $params = array();
        $params[] = $personId;
        $params[] = $personId;
        $params[] = $password;
        $params[] = $password;
        $params[] = $password;


        $result = $this->getDatabase()->query(SAGU::prepare($sql, $params, false));

        return (count($result) > 0);
    }

    /**
     * Get the physical person type (employee)
     *
     * @param $filters (int): Person id (primary key for basPerson)
     * @return (varchar): Return true if is employee
     */
    public function isPersonEmployee($personId)
    {
        $sql = 'SELECT COUNT(*)
                  FROM basPhysicalPersonEmployee
                 WHERE personId = ?';

        $params = array();
        $params[] = $personId;

        $return = $this->getDatabase()->query(SAGU::prepare($sql, $params));

        return ($return[0][0] > 0) || SAGU::isDebugMode();
    }

    /**
     * Verifica se é uma pessoa física
     *
     * @param $filters (int): Person id (primary key for basPerson)
     * @return (varchar): Return true if is physical person
     */
    public function isPhysicalPerson($personId)
    {
        $sql = 'SELECT COUNT(*)
                  FROM basPhysicalPerson
                 WHERE personId = ?';

        $params = array();
        $params[] = $personId;

        $return = $this->getDatabase()->query(SAGU::prepare($sql, $params));

        return ($return[0][0] > 0);
    }

    /**
     * Get the physical person type (professor)
     *
     * @param $filters (int): Person id (primary key for basPerson)
     * @return (varchar): Return true if is professor
     */
    public function isPersonProfessor($personId)
    {
        $sql = 'SELECT COUNT(*)
                  FROM basPhysicalPersonProfessor
                 WHERE personId = ?';

        $params = array();
        $params[] = $personId;

        $return = $this->getDatabase()->query(SAGU::prepare($sql, $params));

        return ($return[0][0] > 0) || SAGU::isDebugMode();
    }

    /**
     * Get the physical person type (student)
     *
     * @param $filters (int): Person id (primary key for basPerson)
     * @return (varchar): Return true if is student
     */
    public function isPersonStudent($personId)
    {
        $sql = 'SELECT COUNT(*)
                  FROM basPhysicalPersonStudent
                 WHERE personId = ?';

        $params = array();
        $params[] = $personId;

        $return = $this->getDatabase()->query(SAGU::prepare($sql, $params));

        return ($return[0][0] > 0) || SAGU::isDebugMode();
    }

    /**
     * Get the physical person type (student)
     *
     * @param $filters (int): Person id (primary key for basPerson)
     * @return (varchar): Return true if is student
     */
    public function isPersonLegal($personId)
    {
        $sql = 'SELECT COUNT(*)
                  FROM basLegalPerson
                 WHERE personId = ?';

        $params = array();
        $params[] = $personId;

        $return = $this->getDatabase()->query(SAGU::prepare($sql, $params));

        return ($return[0][0] > 0) || SAGU::isDebugMode();
    }

    /**
     * Get the person by miolo username
     *
     * @param $mioloUserName (string): Miolo username linked to person
     * @param $checkPermissions (boolean): Check other permissions
     * 
     * @return basPerson
     */
    public function getPersonByMioloUserName($mioloUserName, $checkPermissions = true)
    {
        $MIOLO = MIOLO::getInstance();
        $action = MIOLO::getCurrentAction();
        $params = array();
        
        if ( SAGU::isDebugMode() )
        {
            $sql = 'SELECT personId FROM ONLY basPhysicalPersonProfessor LIMIT 1';
            
            // Obtem o primeiro aluno valido (com notas etc..) para testes
            if ( preg_match('/main:pupil/i', $action) )
            {
                $sql = 'SELECT S.personId
                     FROM ONLY basPhysicalPersonStudent S 
                            WHERE EXISTS(
                                SELECT 1
                                  FROM unit_acdContract C
                            INNER JOIN unit_acdEnroll E ON E.contractId = C.contractId
                            INNER JOIN acdFrequenceEnroll FE ON FE.enrollId = E.enrollId
                            INNER JOIN acdDegreeEnroll DE ON DE.enrollId = E.enrollId
                                 WHERE C.personId = S.personId
                    ) LIMIT 1';
            }
        }
        else
        {
            $sql =  'SELECT personId
                  FROM ONLY basPerson
                      WHERE mioloUserName = ?';
            
            $params[] = $mioloUserName;
        }     

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $params, false));
        $personId = $result[0][0];

        if ( ( strlen($personId) > 0 ) && $checkPermissions )
        {
            $busCourseCoordinator = new BusinessAcademicBusCourseCoordinator();
            $busCenter = new BusinessAcademicBusCenter();
            
            $busContract = new BusinessAcademicBusContract();
            $contratos = $busContract->getPersonContracts($personId);
            
            $person = $this->getPerson($personId);
            $person->isLegalPerson = $this->isPersonLegal($personId);
            $person->isPhysicalPerson = $this->isPhysicalPerson($personId);
            $person->isEmployee = $this->isPersonEmployee($personId);
            $person->isProfessor = $this->isPersonProfessor($personId);
            $person->isCourseCoordinator = $busCourseCoordinator->isCourseCoordinator($personId) || AcpCoordenadores::verificaPessoaECoordenador($personId);
            $person->isCenterDirector = $busCenter->isCenterDirector($personId);
            $person->isStudent = $this->isPersonStudent($personId);
            $person->isTraining = TraRequest::isTraining($personId);
            $person->isAgreement = TraAddendumCourseAdmin::isAgreement($personId);
            $person->isTeamPreceptor = TraTeam::isTeamPreceptor($personId);
            $person->isResident = ResResidente::isResident($personId);
            //$person->isPreceptorUnidadeTematica = ResOfertaDeUnidadeTematica::isPreceptor( $personId );
            //$person->responsavelNucleoEnfase = ResPreceptoria::responsavelNucleoEnfase( $personId );
            $person->isResidentMedico = MedResidente::isResident( $personId );
            $person->isPreceptorUnidadeTematicaMedico = MedOfertaDeUnidadeTematica::isPreceptor( $personId );
            $person->responsavelNucleoEnfaseMedico = MedPreceptoria::responsavelNucleoEnfase( $personId );
            
            // Verifica se o aluno tem um contrato trancado.
            if ( $person->isStudent && !$person->isProfessor )
            {
                $numeroDeContratos = count($contratos);
                if ( $numeroDeContratos == 1 )
                {
                    $person->isContractLocked = $busContract->isLock($contratos[0][0]);
                }
                else
                {
                    $locked = array();
                    
                    foreach ( $contratos as $contrato )
                    {
                        $locked[] = $busContract->isLock($contrato[0]);
                    }
                    
                    $person->isContractLocked = in_array(false, $locked) ? false : true;
                }
            }
            
            // Define todas permissoes como TRUE para facilitar debug no portal
            if ( SAGU::isDebugMode() )
            {
                foreach ( $person as $key => & $val )
                {
                    if ( substr($key, 0, 2) == 'is' )
                    {
                        $val = true;
                    }
                }
            }
        }
        
        $person->personId = $personId;

        return $person;
    }

    /**
     * Obtém a pessoa logada atualmente, de acordo com o mioloUsername
     * 
     * @return basPerson
     */
    public function getCurrentLoginPerson()
    {
        $MIOLO = MIOLO::getInstance();

        return $this->getPersonByMioloUserName(trim($MIOLO->getLogin()->id));
    }

    /**
     * Get the person type
     *
     * @param $personId (integer): Person id (primary key for basPerson)
     * @return (varchar): Return "L" if legal person and "P" if physicalPerson
     */
    public function getPersonType($personId)
    {
        // definir se a pessoa eh juridica ou fisica
        $sql = "SELECT CASE WHEN ( SELECT COUNT(*) > 0
                                FROM ONLY basPhysicalPerson
                                    WHERE personId = ? )
                           THEN 'P'
                           ELSE CASE WHEN ( SELECT COUNT(*) > 0
                                         FROM ONLY basLegalPerson
                                             WHERE personId = ?)
                                    THEN 'L'
                                END
                       END";

        $params = array();
        $params[] = $personId;
        $params[] = $personId;

        $personType = $this->getDatabase()->query(SAGU::prepare($sql, $params));

        return $personType[0][0];
    }

    /**
     * Get the person type
     *
     * @param $personId (integer): Person id (primary key for basPerson)
     * @return (varchar): Return logins and password
     */
    public function getLoginAndPassword($personId, $upper = true)
    {
        $sql = 'SELECT DISTINCT miolousername
                  FROM basPerson
                 WHERE personId = ?';

        $params = array();
        $params[] = $personId;

        $userName = $this->getDatabase()->query(SAGU::prepare($sql, $params, $upper));

        $sql = 'SELECT login,
                       m_password
                  FROM miolo_user
                 WHERE login = ?';

        $params = array();
        $params[] = $userName[0][0];

        $return = $this->getDatabase()->query(SAGU::prepare($sql, $params, $upper));

        if ( count($return) > 0 )
        {
            $data = new stdClass();
            list ( $data->login,
                   $data->password ) = $return[0];
        }

        return $data;
    }

    /**
     * Get the person type
     *
     * @param $personId (integer): Person id (primary key for basPerson)
     * @return (varchar): Return logins and password
     */
    public function changePassword($data)
    {
        $sql = "UPDATE miolo_user
                   SET m_password = ?
                 WHERE login = ?";

        $params = array();
        $params[] = $data->password;
        $params[] = $data->login;

        $return = $this->getDatabase()->execute(SAGU::prepare($sql, $params));

        return $return;
    }

    /**
     * Verifica arquivo de foto novo que deve ser inserido/atualizado
     *
     * @param string $filename Path temporario do arquivo
     * @return int $fileId
     */
    public function checkFile($filename = null, $personId = null)
    {
        if( $personId != null ) // Quando estiver editando a imagem será recebido o id da pessoa.
        {
            $sql = "SELECT DISTINCT photoId
                      FROM basPerson
                     WHERE personId = ?";
            
            $params = array();
            $params[] = $personId;
            
            $result = $this->getDatabase()->query(SAGU::prepare($sql, $params));
            $photoId = $result[0][0]; //Pega o id da foto atual.
        }
        
        $MIOLO = MIOLO::getInstance();
        $fileId = null;

        if ( file_exists($filename) )
        {
            $fdata = new stdClass();            
            $fdata->uploadFileName = 'foto.png';
            $fdata->contentType = mime_content_type($filename);

            $busFile = new BusinessBasicBusFile();
            
            if( $photoId != null )//Se a pessoa possue uma foto atual ela será deletada para receber a nova.
            {
                $path = $busFile->getDefaultPath();                
                $file = $path.$photoId;
                $busFile->removeTheFile($file);
            }
            
            $fileId = $busFile->insertFile($fdata, $filename);
        }

        return $fileId;
    }
    
    /**
     * Processo de unificação de pessoa.
     * 
     * @param int $pessoaQueFica
     * @param int $pessoaQueSai
     * @return boolean
     */
    public function unificarPessoa($pessoaQueSai, $pessoaQueFica)
    {   
        $MIOLO = MIOLO::getInstance();
        try
        {
            $sql = "SELECT * FROM unificarPessoa(?, ?);";
            $return = $this->getDatabase()->execute(SAGU::prepare($sql, array($pessoaQueSai, $pessoaQueFica)));

            return $return;
        }
        catch ( Exception $e )
        {
            $MIOLO->error($e->getMessage());
        }
    }
    
    /**
     * Função utilizada no webservice de sincronização de pessoa.
     * 
     * @author Bruno Edgar Fuhr [bruno@solis.com.br]
     * @since 11/04/2014
     * 
     * @param Array $personData - Array com os dados da pessoa a ser sincronizada.
     * @return Array - Array com informação de sucesso e mensagem sobre a sincronização.
     */
    public function syncPerson($personData)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->uses('classes/sCSVFileImporter.class', 'basic');
        
        $return = array('success' => FALSE, 'msg' => '');
        $personId = NULL;
        
        // Instancia classes necessárias
        $busDocument = new BusinessBasicBusDocument();
        $busPhysicalPerson = new BusinessBasicBusPhysicalPerson();
        $busLegalPerson = new BusinessBasicBusLegalPerson();
        $busCity = new BusinessBasicBusCity();
        $busLocationType = new BusinessBasicBusLocationType();
        $csvFileImporter= new sCSVFileImporter();
        
        // Cria o objeto
        $person = new stdClass();
        $person->name = $personData['nome'];
        $person->fakeName = $personData['nomeFantasia'];
        $person->shortName = $personData['abreviatura'];        
        $person->email = $personData['email'];
        $person->emailAlternative = $personData['emailAlternativo'];
        $person->url = $personData['url'];
        $person->zipCode = $personData['cep'];
        $person->cityId = $csvFileImporter->obterCidade($person->zipCode, $personData['cidade'], $personData['estado'], $personData['pais']);
        $person->location = $personData['logradouro'];
        $person->locationTypeId = $busLocationType->getLocationTypeIdByName($personData['tipoLogradouro']);
        $person->number = $personData['numero'];
        $person->complement = $personData['complemento'];
        $person->neighborhood = $personData['bairro'];
        $person->phone = $personData['fone'];
        $person->fax = $personData['fax'];
        $person->sex = $personData['sexo'];
        $person->dateBirth = $personData['dataNascimento'];
        $person->cellPhone = $personData['celular'];
        $person->motherName = $personData['nomeMae'];
        $person->residentialPhone = $personData['telefoneResidencial'];
        $person->workPhone = $personData['telefoneTrabalho'];
        
        // Se possuir cpf, é pessoa física.
        $isPhysicalPerson = strlen($personData['cpf']) > 0;
        
        if ( $isPhysicalPerson )
        {
            // Obtém o código da pessoa pelo cpf
            $cpfDocument = $busDocument->getCPFDocument($personData['cpf']);           
            $personId = $cpfDocument[0];
            
            // Se encontrar o código, atualiza a pessoa.
            if ( strlen($personId) > 0 )
            {
                $person->personId = $personId;
                
                try
                {
                    SDatabase::beginTransaction();
                    
                    $ok = $busPhysicalPerson->updatePhysicalPerson($person, FALSE, TRUE);
                    if ( $ok )
                    {
                        $rgDocument = new stdClass();
                        $rgDocument->content = $personData['rg'];
                        $rgDocument->organ = $personData['orgaoExpeditorRg'];
                        $rgDocument->cityId = $csvFileImporter->obterCidade($personData['cepCidadeRg'], $personData['nomeCidadeRg'], NULL, $personData['nomePaisRg']);                        
                        $rgDocument->dateExpedition = $personData['dataExpedicao'];
                        $rgDocument->personId = $personId;
                        $rgDocument->documentTypeId = SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_RG');
                        
                        $ok = $busDocument->insertOrUpdateDocument($rgDocument);
                    }
                    
                    if ( $ok )
                    {
                        SDatabase::commit();
                    }
                    else
                    {
                        SDatabase::rollback();
                    }
                    $return['success'] = $ok;
                }
                catch( Exception $e )
                {
                    SDatabase::rollback();
                    $return['msg'] = utf8_encode(_M('Não foi possível atualizar a pessoa. ') . $e->getMessage());
                }
            }
            else
            {
                $return['msg'] = utf8_encode(_M('Não foi encontrado nenhum registro de pessoa com o CPF ' . $personData['cpf']));
            }
        }
        else
        {
            // Obtem o código da pessoa pelo cnpj
            $filtros = new stdClass();
            $filtros->cnpj = $personData['cnpj'];
            $legalPerson = $busLegalPerson->searchLegalPerson($filtros);
            
            $personId = $legalPerson[0][0];
            
            // Se encontrar o código, atualiza a pessoa.
            if ( strlen($personId) > 0 )
            {
                $person->personId = $personId;
                
                try
                {
                    SDatabase::beginTransaction();
                    
                    $ok = $busLegalPerson->updateLegalPerson($person);
                    
                    if ( $ok )
                    {
                        SDatabase::commit();
                    }
                    else
                    {
                        SDatabase::rollback();
                    }
                    
                    $return['success'] = $ok;
                }
                catch( Exception $e )
                {
                    SDatabase::rollback();
                    $return['msg'] = utf8_encode(_M('Não foi possível atualizar a pessoa. ') . $e->getMessage());
                }
            }
            else
            {
                $return['msg'] = utf8_encode(_M('Não foi encontrado nenhum registro de pessoa com o CNPJ ' . $personData['cnpj']));
            }
        }
        
        return $return;
    }
}
?>
