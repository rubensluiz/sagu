<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for basProfessionalActivityLinkType table
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 11/08/2005
 *
 **/

/**
 * Class to manipulate the basProfessionalActivityLinkType table
 **/
class BusinessBasicBusProfessionalActivityLinkType extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listProfessionalActivityLinkType()
    {
        $db  = $this->getDatabase();
        $sql = 'SELECT professionalActivityLinkTypeId,
                       description,
                       notifyCompany
                  FROM basProfessionalActivityLinkType
              ORDER BY description';

        $ret = $db->query($sql);
        
        return $ret;
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $professionalActivityLinkTypeId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getProfessionalActivityLinkType($professionalActivityLinkTypeId)
    {
        $sql = 'SELECT professionalActivityLinkTypeId,
                       description,
                       notifyCompany,
                       userName,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipAddress
                  FROM basProfessionalActivityLinkType
                 WHERE professionalActivityLinkTypeId = ?';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $professionalActivityLinkTypeId));
        

        $professionalActivityLinkType = new basProfessionalActivityLinkType();
        list ( $professionalActivityLinkType->professionalActivityLinkTypeId,
               $professionalActivityLinkType->description,
               $professionalActivityLinkType->notifyCompany,
               $professionalActivityLinkType->userName,
               $professionalActivityLinkType->dateTime,
               $professionalActivityLinkType->ipAddress ) = $result[0];

        return $professionalActivityLinkType; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchProfessionalActivityLinkType($filters)
    {
        $sql= 'SELECT professionalActivityLinkTypeId,
                      description,
                      notifyCompany
                 FROM basProfessionalActivityLinkType ';

        if ( strlen($filters->professionalActivityLinkTypeId) > 0 )
        {
            $where .= ' AND professionalActivityLinkTypeId = ? ';
            $args[] = $filters->professionalActivityLinkTypeId;
        }
        if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND UNACCENT(description) ILIKE UNACCENT(?) ';
            $args[] = $filters->description .'%';
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE '. substr($where, 4) .' ORDER BY description';
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertProfessionalActivityLinkType($data)
    {
        $sql = 'INSERT INTO basProfessionalActivityLinkType
                            (description,
                             notifyCompany
                            )
                     VALUES (?,?)';

        $db     = $this->getDatabase();
        $args   = array($data->description,
                        $data->notifyCompany);

        $result = $db->execute(SAGU::prepare($sql, $args));
        

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateProfessionalActivityLinkType($data)
    {
        //$data->notifyCompany = ($data->notifyCompany==1) ? 'true' : 'false';

        $sql = 'UPDATE basProfessionalActivityLinkType
                   SET description   = ?,
                       notifyCompany = ?
                 WHERE professionalActivityLinkTypeId = ?';
        $args = array( $data->description,
                       $data->notifyCompany,
                       $data->professionalActivityLinkTypeId );


        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $professionalActivityLinkTypeId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function deleteProfessionalActivityLinkType($professionalActivityLinkTypeId)
    {
        $sql = 'DELETE FROM basProfessionalActivityLinkType
                      WHERE professionalActivityLinkTypeId = ?';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $professionalActivityLinkTypeId));
        

        return $result;
    }

}

?>
