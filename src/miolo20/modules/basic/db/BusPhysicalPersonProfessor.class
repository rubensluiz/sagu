<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for basPhysicalPersonProfessor table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 12/09/2005
 *
 **/

$MIOLO  = MIOLO::getInstance();
$MIOLO->uses('db/BusPhysicalPerson.class', 'basic');

/**
 * Class to manipulate the basPhysicalPersonProfessor table
 **/
class BusinessBasicBusPhysicalPersonProfessor extends BusinessBasicBusPhysicalPerson
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listPhysicalPersonProfessor()
    {
        return 'Not implemented.';
    }

    /**
     * Return a specific record from the database
     *
     * @param $personId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getPhysicalPersonProfessor($personId)
    {   
        $physicalPerson = $this->getPhysicalPerson($personId);

        $physicalPersonProfessor = new BasPhysicalPersonProfessor();

        $array = get_object_vars($physicalPerson);
        foreach ( $array as $key => $row )
        {
            $physicalPersonProfessor->$key = $physicalPerson->$key;
        }
        
        $sql = 'SELECT eTemporario,
                       escolaridade,
                       posGraduacao,
                       situacao,
                       regimeTrabalho,
                       substituto,
                       visitante,
                       tipoVinculo
                  FROM basPhysicalPersonProfessor
                 WHERE personId = ?';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, array($personId)));
        
        list($physicalPersonProfessor->eTemporario,
             $physicalPersonProfessor->escolaridade,
             $physicalPersonProfessor->posGraduacao,
             $physicalPersonProfessor->situacao,
             $physicalPersonProfessor->regimeTrabalho,
             $physicalPersonProfessor->substituto,
             $physicalPersonProfessor->visitante,
             $physicalPersonProfessor->tipoVinculo,
        ) = $result[0];
        
        return $physicalPersonProfessor;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchPhysicalPersonProfessor($filters)
    {
        $sql = 'SELECT A.personId,
                       A.personDv,
                       A.personMask,
                       A.name,
                       A.shortName,
                       A.cityId,
                       B.name,
                       A.zipCode,
                       C.name || \' \' || A.location AS location,
                       A.complement,
                       A.neighborhood,
                       A.email,
                       A.emailAlternative,
                       A.url,
                       TO_CHAR(A.dateIn,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.password,
                       A.isAllowPersonalData,
                       A.eTemporario
             FROM ONLY basPhysicalPersonProfessor A
             LEFT JOIN basCity B 
                 USING (cityId) 
             LEFT JOIN basLocationType C
                    ON (A.locationTypeId = C.locationTypeId)';

        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND A.personId = ? ';
            $args[] = $filters->personId;
        }
        if ( strlen($filters->name) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?) ';
            $args[] = $filters->name . '%';
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql   .= ' WHERE ' . substr($where, 4) . ' ORDER BY A.name';
            $result = $this->getDatabase()->query(SAGU::Prepare($sql,$args));
        }
        return $result;
    }


    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertPhysicalPersonProfessor($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        $sql = 'INSERT INTO basPhysicalPersonProfessor 
                            ( sex, name, personId, escolaridade, posGraduacao, situacao, regimetrabalho, substituto, visitante, tipovinculo )
                     VALUES ( \'\', \'\', ?, ?, ?, ?, ?, ?, ?, ? )';

        $args[] = $data->personId;
        $args[] = $data->escolaridade;
        $args[] = $data->posGraduacao;
        $args[] = $data->situacao;
        $args[] = $data->regimeTrabalho;
        $args[] = $data->substituto;
        $args[] = $data->visitante;
        $args[] = $data->tipoVinculo;

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        if ( count($result) == 0 )
        {
            return null;
        }

        $data2 = $this->getPhysicalPerson($data->personId);
        $this->updatePhysicalPerson($data2);

        $this->insertInDefaultGroupProfessor($data2);
        
        $this->insertOrUpdateProfessorCommitment($data);
        
        return $data2;
    }
    
    public function insertInDefaultGroupProfessor($data)
    {
        $groupId = SAGU::getParameter('BASIC', 'DEFAULT_GROUP_PROFESSOR_ID');
        $this->insertInDefaultGroup($data->mioloUserName, $groupId);
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updatePhysicalPersonProfessor($data)
    {
        $ok = $this->updatePhysicalPerson($data);
        
        if ( $ok )
        {
            $sql = 'UPDATE basPhysicalPersonProfessor SET';
            
            if( $data->eTemporario )
            {
                $sql .= ' eTemporario = ?, ';
                $args[] = strtoupper($data->eTemporario);
            }
            
            $sql .= ' escolaridade = ?, ';
            $args[] = $data->escolaridade;

            $sql .= ' posGraduacao = ?, ';
            $args[] = $data->posGraduacao;

            $sql .= ' regimeTrabalho = ?, ';
            $args[] = $data->regimeTrabalho;
            
            $sql .= ' substituto = ?, ';
            $args[] = $data->substituto;
            
            $sql .= ' visitante = ?, ';
            $args[] = $data->visitante;
            
            $sql .= ' tipoVinculo = ?, ';
            $args[] = $data->tipoVinculo;
            
            $sql .= ' situacao = ?, ';
            $args[] = $data->situacao;
            
            if ( count($args) > 0 )
            {
                $sql = substr($sql, 0, -2);
                $sql .= ' WHERE personId = ?';
                $args[] = $data->personId;
                
                $ok = $this->getDatabase()->execute(SAGU::prepare($sql, $args));
            }
        }
        
        $this->insertOrUpdateProfessorCommitment($data);
        $this->insertInDefaultGroupProfessor($data);

        return $ok;
    }
    
    /**
     * @return boolean
     */
    public function insertOrUpdatePhysicalPersonProfessor($data)
    {
        $MIOLO = MIOLO::getInstance();
        
        $filters = new stdClass();
        $filters->personId = $data->personId;
        $rows = $this->searchPhysicalPersonProfessor($filters);
        $personId = $rows[0][0];
        
        if ( strlen($personId) > 0 )
        {
            $ok = $this->updatePhysicalPersonProfessor($data);
        }
        else
        {
            $ok = $this->insertPhysicalPersonProfessor($data);
        }
        
        return $ok;
    }
    
    private function insertOrUpdateProfessorCommitment($data)
    {
        $MIOLO = MIOLO::getInstance();
        
        if ( SAGU::allIsFilled($data->personId, $data->beginDate, $data->workLoad) )
        {
            $busProfessorCommitment = new BusinessBasicBusProfessorCommitment();

            $filters = new stdClass();
            $filters->personId = $data->personId;
            $rows = $busProfessorCommitment->searchProfessorCommitment($filters, true);
            $row = $rows[0];
            if ( $row->personId )
            {
                $busProfessorCommitment->deleteProfessorCommitment($row->personId, $row->beginDate);
            }

            $row = (object) array_merge( (array) $row, (array) $data );
            $busProfessorCommitment->insertProfessorCommitment($row);
        }
    }

    /**
     * Delete a record
     *
     * @param $personId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deletePhysicalPersonProfessor($personId)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $busProfessorCommitment = new BusinessBasicBusProfessorCommitment();

        $filters = new stdClass();
        $filters->personId = $personId;
        $rows = $busProfessorCommitment->searchProfessorCommitment($filters, true);
        foreach ( (array) $rows as $row )
        {
            $busProfessorCommitment->deleteProfessorCommitment($row->personId, $row->beginDate);
        }

        $sql = 'DELETE FROM ONLY basPhysicalPersonProfessor 
                           WHERE personId = ?';

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $personId));

        return $result;
    }


    /**
     * Obtem data de entrada de professor
     *
     * @param int $professorId
     * @return string $data
     */
    public function getProfessorEntranceDate($professorId)
    {
        $maskDate = SAGU::getParameter('BASIC', 'MASK_DATE');
        $sql = "SELECT TO_CHAR(MIN(occurrencedate), '{$maskDate}')
              FROM (SELECT UNNEST(occurrencedates) AS occurrenceDate
                      FROM acdScheduleProfessor A
                INNER JOIN acdSchedule B
                        ON B.scheduleId = A.scheduleId
                     WHERE professorId = ?) A";
        
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $professorId));
        return $result[0][0];
    }
    
    /**
     * Verifica se o personId é de um professor
     * 
     * @param int $personId - Id da pessoa;
     * @return boolean - True se o id passado for de um professor
     */
    public function isProfessor($personId)
    {
        $sql = " SELECT count(*) FROM basphysicalpersonprofessor where personid = ? ";
        
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $personId));
        return $result[0][0] > 0;
    }
    
    /**
     * Verifica se professor é vigente em curso, baseando-se nas disciplinas.
     * 
     * @param integer $personId
     * @param string $courseId
     * 
     * @return boolean
     */
    public static function verificaProfessorAtivoNoCurso($personId, $courseId)
    {
        $sql = "SELECT LP.*
                  FROM acdScheduleProfessor SP
            INNER JOIN acdSchedule S
                    ON (SP.scheduleId = S.scheduleId)
            INNER JOIN acdGroup G
                    ON (G.groupId = S.groupId)
            INNER JOIN acdLearningPeriod LP
                    ON (G.learningPeriodId = LP.learningPeriodId)
            INNER JOIN ONLY basPhysicalPersonProfessor BP
                    ON (SP.professorId = BP.personId)
                 WHERE LP.courseId = ?
                   AND SP.professorId = ?
                   AND NOW()::DATE BETWEEN LP.beginDate AND LP.endDate
                   AND BP.situacao = '" . BasPhysicalPersonProfessor::SITUACAO_EM_EXERCICIO . "'";
        
        $args[] = $courseId;
        $args[] = $personId;
        
        $result = SDatabase::query($sql, $args);
        
        if ( strlen($result[0][0]) > 0 )
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}
?>
