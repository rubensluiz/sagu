<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for basCitySquare table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 02/09/2005
 *
 **/

/**
 * Class to manipulate the basCitySquare table
 **/
class BusinessBasicBusCitySquare extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listCitySquare()
    {
        $db  = $this->getDatabase();

        $sql = 'SELECT cityId,
                       square
                  FROM basCitySquare
              ORDER BY cityId';

        $ret = $db->query(SAGU::prepare($sql, $args));

        return $ret;
    }

    /**
     * Return a specific record from the database
     *
     * @param $citySquareId (integer): Primary key of the record to be retrieved
     * @param $companyId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getCitySquare($cityId, $square)
    {
        $sql = 'SELECT A.cityId,
                       B.name,
                       A.square,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM basCitySquare A
             LEFT JOIN basCity B
                 USING ( cityId )
                 WHERE A.cityId = ?
                   AND A.square = ?';

        $args = array ( $cityId,
                        $square );
        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));


        $citySquare = new basCitySquare();
        list ( $citySquare->cityId,
               $citySquare->name,
               $citySquare->square,
               $citySquare->userName,
               $citySquare->dateTime,
               $citySquare->ipAddress ) = $result[0];

        return $citySquare;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchCitySquare($filters)
    {
        $sql = 'SELECT A.cityId,
                       B.name,
                       A.square
                  FROM basCitySquare A
            INNER JOIN basCity B
                 USING ( cityId ) ';

        if ( strlen($filters->cityId) > 0 )
        {
            $where .= ' AND A.cityId = ? ';
            $args[] = $filters->cityId;
        }

        if ( strlen($filters->square) > 0 )
        {
            $where .= ' AND UNACCENT(A.square) ILIKE UNACCENT(?) ';
            $args[] = $filters->square . '%';
        }

        if ( strlen($filters->cityName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?) ';
            $args[] = $filters->cityName . '%';
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY B.name,
                                                               A.square';

            $db     = $this->getDatabase();
            $result = $db->query(SAGU::Prepare($sql,$args));

        }
        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertCitySquare($data)
    {
        $sql = 'INSERT INTO basCitySquare
                            (cityId,
                             square)
                     VALUES (?,?)';

        $args = array( $data->cityId,
                       $data->square );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));



        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateCitySquare($data)
    {
        $sql = 'UPDATE basCitySquare
                   SET square = ?
                 WHERE cityId = ?
                   AND square = ?';

        $args = array( $data->square,
                       $data->cityId,
                       $data->squareOld );

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $citySquareId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteCitySquare($args)
    {
        $sql = 'DELETE FROM basCitySquare
                      WHERE cityId = ?
                        AND square = ?';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

}
?>
