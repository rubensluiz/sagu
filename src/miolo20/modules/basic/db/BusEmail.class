<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for basCity table
 *
 * @author Hélio Henrique Rodrigues Guimarães [helio@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 04/08/2006
 *
 **/

/**
 * Class to manipulate the basCity table
 **/
class BusinessBasicBusEmail extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listEmail()
    {
        $sql = 'SELECT emailId,
                       description
                  FROM basEmail
               ORDER BY description';

        $db = $this->getDatabase();
        $result = $db->query($sql);

        return $result;
    }

    /**
     * Return a specific record from the database
     *
     * @param $cityId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getEmail($emailId)
    {
        $sql = 'SELECT A.emailId,
                       A.description,
                       A.from,
                       A.bcc,
                       A.subject,
                       A.body,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM basEmail A
                 WHERE A.emailId = ?';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $emailId));

        $email  = new BasEmail();
        list (  $email->emailId,
                $email->description,
                $email->from,
                $email->bcc,
                $email->subject,
                $email->body,
                $email->userName,
                $email->dateTime,
                $email->ipAddress ) = $result[0];

        return $email;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchEmail($filters)
    {
        $sql = 'SELECT A.emailId,
                       A.description,
                       A.from,
                       A.bcc,
                       A.subject,
                       A.body,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM basEmail A ';

        if ( strlen($filters->emailId) > 0 )
        {
            $where .= ' AND A.emailId = ?';
            $args[] = $filters->emailId;
        }
         if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?) ';
            $args[] = $filters->description . '%';
        }
        if ( strlen($filters->subject) > 0 )
        {
            $where .= ' AND UNACCENT(A.subject) ILIKE UNACCENT(?) ';
            $args[] = $filters->subject . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ';
            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql,$args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertEmail($data)
    {
        $db  = $this->getDatabase();

        $sql = 'SELECT NEXTVAL(\'seq_emailid\')';
        $ret = $db->query(SAGU::prepare($sql,null));

        $data->emailId = $ret[0][0];

        $sql = 'INSERT INTO basEmail
                            (emailId,
                             description,
                             "from",
                             bcc,
                             subject,
                             body)
                     VALUES (?,?,?,?,?,?)';

        $args = array(  $data->emailId,
                        $data->description,
                        $data->from,
                        $data->bcc,
                        $data->subject,
                        $data->body);

        $result = $db->execute(SAGU::prepare($sql, $args, false));

        if ( $result )
        {
            return $data->emailId;
        }
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function updateEmail($data)
   {
        $sql = 'UPDATE basEmail
                   SET description  = ?,
                       "from"       = ?,
                       bcc          = ?,
                       subject      = ?,
                       body         = ?
                 WHERE emailId    = ?';

        $args = array(  $data->description,
                        $data->from,
                        $data->bcc,
                        $data->subject,
                        $data->body,
                        $data->emailId);

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args, false);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $cityId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteEmail($emailId)
    {
        $sql = 'DELETE FROM basEmail
                      WHERE emailId = ?';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $emailId));

        return $result;
    }
}
?>
