<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for basPhysicalPersonEmployee table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 12/09/2005
 *
 **/

$MIOLO  = MIOLO::getInstance();
$MIOLO->uses('db/BusPhysicalPerson.class', 'basic');

/**
 * Class to manipulate the basPerson table
 **/
class BusinessBasicBusPhysicalPersonEmployee extends BusinessBasicBusPhysicalPerson
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listPhysicalPersonEmployee()
    {
        $sql = 'SELECT personId,
                       name
             FROM ONLY basPhysicalPersonEmployee 
              ORDER BY name';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Return a specific record from the database
     *
     * @param $personId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getPhysicalPersonEmployee($personId)
    {

        //get the basPersonPhysical data
        $physicalPerson = $this->getPhysicalPerson($personId);

        //get the basPhysicalPersonEmployee data
        $sql = 'SELECT 1
             FROM ONLY basPhysicalPersonEmployee
                 WHERE personId = ?';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $personId));

        if ( count($result) == 0 )
        {
            return null;
        }

        $physicalPersonEmployee = new basPhysicalPersonEmployee();

        //put into physicalPersonEmployee attributes all person attributes
        $array = get_object_vars($physicalPerson);
        foreach ( $array as $key => $row )
        {
            $physicalPersonEmployee->$key = $physicalPerson->$key;
        }

        return $physicalPersonEmployee;
    }
    
    
    /**
     * Get the person by miolo username
     *
     * @param $mioloUserName (string): Miolo username linked to person
     *
     * @return (array): Return all person data just like getPerson or null if login doesn't exists
     **/
    public function getPersonByMioloUserName($mioloUserName)
    {
        $sql = 'SELECT P.personId,
                       P.name
             FROM ONLY basPhysicalPersonEmployee P
                 WHERE P.miolousername = ? 
                 LIMIT 1';
        
        $db = $this->getDatabase();
        $args[] =  $mioloUserName;
        $result = $db->query(SAGU::prepare($sql,$args, false));
        
        $person = null;
        
        if( is_array($result) )
        {
            $person = new stdClass();
            $person->personId = $result[0][0];
            $person->name = $result[0][1];
        }
        
        return $person; 
    }

    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchPhysicalPersonEmployee($filters)
    {
        $sql = 'SELECT A.personId,
                       A.personDv,
                       A.personMask,
                       A.name,
                       A.shortName,
                       A.cityId,
                       B.name,
                       A.zipCode,
                       C.name || \' \' || A.location AS location,
                       A.complement,
                       A.neighborhood,
                       A.email,
                       A.emailAlternative,
                       A.url,
                       TO_CHAR(A.dateIn,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.password,
                       A.isAllowPersonalData
             FROM ONLY basPhysicalPersonEmployee A
             LEFT JOIN basCity B 
                 USING (cityId)
             LEFT JOIN basLocationType C
                    ON ( A.locationTypeId = C.locationTypeId ) ';

        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND A.personId = ? ';
            $args[] = $filters->personId;
        }
        if ( strlen($filters->name) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?) ';
            $args[] = $filters->name . '%';
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql   .= ' WHERE ' . substr($where, 4) . ' ORDER BY A.name';
            $result = $this->getDatabase()->query(SAGU::Prepare($sql,$args));
        }
        return $result;
    }


    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertPhysicalPersonEmployee($data)
    {
        $sql = 'INSERT INTO basPhysicalPersonEmployee 
                            ( personId, name, sex)
                     VALUES ( ?, ?, ? )';

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, array($data->personId, $data->name, $data->sex)));

        if ( count($result) == 0 )
        {
            return null;
        }

        $data2 = $this->getPhysicalPerson($data->personId);
        $this->updatePhysicalPerson($data2);
        
//        $this->insertOrUpdateEmployee($data);
        
        return $data2;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updatePhysicalPersonEmployee($data)
    {
        $data2 = $this->getPhysicalPerson($data->personId);
        $this->updatePhysicalPerson($data2);
        
//        $this->insertOrUpdateEmployee($data);
        
        return $data2;
    }
    
    private function insertOrUpdateEmployee($data)
    {
        $MIOLO = MIOLO::getInstance();
        
        if ( strlen($data->personId) > 0 )
        {
            $filters = new stdClass();
            $filters->personId = $data->personId;
            $filters->employeeTypeId = $data->employeeTypeId;
            $busEmployee = new BusinessBasicBusEmployee();
            $rows = $busEmployee->searchEmployee($filters);

            $data->employeeId = $employeeId = $rows[0][0];

            $employeeId ? $busEmployee->updateEmployee($data) : $busEmployee->insertEmployee($data, false);
        }
    }
    
    public function insertOrUpdatePhysicalPersonEmployee($data, $useExisting = true)
    {
        $MIOLO = MIOLO::getInstance();
        
        $currentPersonId = $useExisting ? $data->personId : null;
        
        $filters = new stdClass();
        $filters->personId = $data->personId;
        $rows = $this->searchPhysicalPersonEmployee($filters);
        $personId = SAGU::NVL($rows[0][0], $currentPersonId);
        
        if ( strlen($personId) > 0 )
        {
            $this->updatePhysicalPersonEmployee($data);
        }
        else
        {
            $this->insertPhysicalPersonEmployee($data);
        }
    }
    
    /**
     * Tenta garantir a existencia dos registros tanto na basEmployee quanto basPhysicalPersonEmployee,
     *  devido a ter o problema de existirem duas tabelas separadas.
     *  
     * @param stdClass $data 
     */
    public function insertOrUpdateAll($data)
    {
        $this->insertOrUpdatePhysicalPersonEmployee($data, false);
        $this->insertOrUpdateEmployee($data);
    }

    /**
     * Delete a record
     *
     * @param $personId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deletePhysicalPersonEmployee($personId)
    {
        $sql = 'DELETE FROM ONLY basPhysicalPersonEmployee 
                           WHERE personId = ?';

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $personId));

        return $result;
    }

}

?>
