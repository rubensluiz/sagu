<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * This file handles the connection and actions for BasPhysicalPersonKinship table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @since
 * Class created on 03/11/2010
 *
 **/

/**
 * Class to manipulate the BasPhysicalPersonKinship table
 **/
class BusinessBasicBusPhysicalPersonKinship extends sBusiness
{
    /**
     * Return a specific record from the database
     *
     * @param $kinshipId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getPhysicalPersonKinship($personId, $kinshipId, $relativePersonId)
    {
        $sql = 'SELECT personId,
                       kinshipId,
                       relativePersonId,
                       obs,
                       userName,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipAddress
                  FROM basPhysicalPersonKinship
                 WHERE personId = ?
                   AND kinshipId = ?
                   AND relativePersonId = ?';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, array($personId, $kinshipId, $relativePersonId)));

        $kinship = new BasPhysicalPersonKinship();
        list ( $kinship->personId,
               $kinship->kinshipId,
               $kinship->relativePersonId,
               $kinship->obs,
               $kinship->userName,
               $kinship->dateTime,
               $kinship->ipAddress ) = $result[0];

        return $kinship;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchPhysicalPersonKinship($filters, $returnAsObject = false)
    {
        $sql=     'SELECT  A.personId,
                      A.kinshipId,
                      A.relativePersonId,
                      B.name AS relativePersonName,
                      A.obs
                 FROM basPhysicalPersonKinship A
      INNER JOIN ONLY basPerson B
                   ON (B.personId = A.relativePersonId)';

        $cols[] = 'personId';
        $cols[] = 'kinshipId';
        $cols[] = 'relativePersonId';
        $cols[] = 'relativePersonName';
        $cols[] = 'obs';

        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND A.personId = ? ';
            $args[] = $filters->personId;
        }
        if ( strlen($filters->kinshipId) > 0 )
        {
            $where .= ' AND A.kinshipId = ? ';
            $args[] = $filters->kinshipId;
        }
        if ( strlen($filters->relativePersonId) > 0 )
        {
            $where .= ' AND A.relativePersonId = ? ';
            $args[] = $filters->relativePersonId;
        }
        if ( strlen($filters->obs) > 0 )
        {
            $where .= ' AND UNACCENT(A.obs) ILIKE UNACCENT(?) ';
            $args[] = $filters->obs . '%';
        }

        $result = array();
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY A.personId, A.kinshipId, A.relativePersonId';

            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

            return $returnAsObject ? SAGU::resultToObject($result, $cols) : $result;
        }
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertPhysicalPersonKinship($data)
    {
        $sql = 'INSERT INTO basPhysicalPersonKinship
                            (personId,
                             kinshipId,
                             relativePersonId,
                             obs)
                     VALUES (?,?,?,?)';

        $args = array( $data->personId,
                       $data->kinshipId,
                       $data->relativePersonId,
                       $data->obs );

        return $this->getDatabase()->execute(SAGU::prepare($sql, $args));
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updatePhysicalPersonKinship($data)
    {
        $sql = 'UPDATE basPhysicalPersonKinship
                   SET obs = ?
                 WHERE personId = ?
                   AND kinshipId = ?
                   AND relativePersonId = ?';

        $args = array( $data->obs,
                       $data->personId,
                       $data->kinshipId,
                       $data->relativePersonId );

        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $kinshipId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deletePhysicalPersonKinship($personId, $kinshipId, $relativePersonId)
    {
        $sql = 'DELETE FROM basPhysicalPersonKinship
                      WHERE personId = ?
                        AND kinshipId = ?
                        AND relativePersonId = ?';

        return $this->getDatabase()->execute(SAGU::prepare($sql, array($personId, $kinshipId, $relativePersonId)));
    }
}
?>
