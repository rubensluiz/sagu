<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for basLocation table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 10/08/2005
 *
 **/

/**
 * Class to manipulate the basLocation table
 **/
class BusinessBasicBusLocation extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listLocation()
    {
        $db  = $this->getDatabase();
        $sql = 'SELECT zipCode,
                       name
                  FROM basLocation
              ORDER BY name';
        $ret = $db->query($sql);

        return $ret;
    }

    /**
     * Return a specific record from the database
     *
     * @param $zipCode (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getLocation($zipCode)
    {


        $sql = 'SELECT A.zipCode,
                       A.name,
                       A.cityId,
                       B.name,
                       A.neighborhoodId,
                       C.name,
                       E.countryId,
                       E.name as countryName,
                       F.stateId,
                       F.name as stateName,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM basLocation A
             LEFT JOIN basCity B
                    ON ( A.cityId = B.cityId )
             LEFT JOIN basNeighborhood C
                    ON ( A.neighborhoodId = C.neighborhoodId )
             LEFT JOIN bascountry E
                    ON ( E.countryId = B.countryId )
             LEFT JOIN basstate F
                    ON ( F.stateId = B.stateId )
                 WHERE A.locationId = ?';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $zipCode));

        $location  = new basLocation();
        list ( $location->zipCode,
               $location->name,
               $location->cityId,
               $location->cityName,
               $location->neighborhoodId,
               $location->neighborhoodName,
               $location->countryId,
               $location->countryName,
               $location->stateId,
               $location->stateName,
               $location->userName,
               $location->dateTime,
               $location->ipAddress ) = $result[0];

        return $location;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchLocation($filters)
    {
        $sql = 'SELECT A.locationId,
                       A.zipCode,
                       A.name,
                       A.cityId,
                       B.name,
                       A.neighborhoodId,
                       C.name,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM basLocation A
             LEFT JOIN basCity B
                    ON ( A.cityId = B.cityId )
             LEFT JOIN basNeighborhood C
                    ON ( A.neighborhoodId = C.neighborhoodId ) ' ;

        if ( strlen($filters->zipCode) > 0 )
        {
            $where .= ' AND A.zipCode ILIKE ? ';
            $args[] = $filters->zipCode . '%';
        }
        if ( strlen($filters->name) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?) ';
            $args[] = $filters->name . '%';
        }
        if ( strlen($filters->cityId) > 0 )
        {
            $where .= ' AND A.cityId = ? ';
            $args[] = $filters->cityId;
        }
        if ( strlen($filters->cityName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?) ';
            $args[] = $filters->cityName . '%';
        }
        if ( strlen($filters->neighborhoodId) > 0 )
        {
            $where .= ' AND A.neighborhoodId = ? ';
            $args[] = $filters->neighborhoodId;
        }
        if ( strlen($filters->neighborhoodName) > 0 )
        {
            $where .= ' AND UNACCENT(C.name) ILIKE UNACCENT(?) ';
            $args[] = $filters->neighborhoodName . '%';
        }
        if ( strlen($filters->locationId) > 0 )
        {
            $where .= ' AND A.locationId = ? ';
            $args[] = $filters->locationId;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY B.name,
                                                               A.name';
            $db     = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql, $args));

        }
        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertLocation($data)
    {
        $sql = 'INSERT INTO basLocation
                            (zipCode,
                             name,
                             cityId,
                             neighborhoodId)
                     VALUES (?,?,?,?)';

        $args = array( $data->zipCode,
                       $data->name,
                       $data->cityId,
                       $data->neighborhoodId );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateLocation($data)
    {
        $sql = 'UPDATE basLocation
                   SET zipCode        = ?,
                       name           = ?,
                       cityId         = ?,
                       neighborhoodId = ?
                 WHERE locationId     = ?';

        $args = array( $data->zipCode,
                       $data->name,
                       $data->cityId,
                       $data->neighborhoodId,
                       $data->locationId );

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $zipCode (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteLocation($locationId)
    {
        $sql = 'DELETE FROM basLocation
                      WHERE locationId = ?';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $locationId));

        return $result;
    }

    /**
     * Obtém os bairros pertencentes a uma cidade.
     * 
     * @param (stdClass) $filters Aceita os atributos a seguir:
     * cityId
     * neighborhoodId
     * neighborhoodName
     * locationId
     * 
     * @return (array) Retorna um array de registros.
     */
    public function searchCityNeighborhood($filters)
    {
        $sql = 'SELECT DISTINCT A.neighborhoodId,
                       B.name,
                       C.cityId,
                       C.stateId,
                       C.countryId
                  FROM basLocation A
            INNER JOIN basNeighborhood B
                    ON B.neighborhoodId = A.neighborhoodId
            INNER JOIN basCity C
                    ON C.cityId = A.cityId' ;

        if ( strlen($filters->cityId) > 0 )
        {
            $where .= ' AND A.cityId = ? ';
            $args[] = $filters->cityId;
        }
        if ( strlen($filters->neighborhoodId) > 0 )
        {
            $where .= ' AND A.neighborhoodId = ? ';
            $args[] = $filters->neighborhoodId;
        }
        if ( strlen($filters->neighborhoodName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?) ';
            $args[] = $filters->neighborhoodName . '%';
        }
        if ( strlen($filters->locationId) > 0 )
        {
            $where .= ' AND A.locationId = ? ';
            $args[] = $filters->locationId;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY B.name';
            $db     = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql, $args));

        }
        return $result;
    }

    /**
     * Indica se a cidade especificada possui ou locais sem bairro. Esta função é utilizada
     * para o componente de locais saber se deve preencher a lista de locais imediatamente após
     * uma cidade ser definida ou se deve aguardar que um bairro seja selecionado da lista.
     * 
     * @param (integer) $cityId Cidade a ser pesquisada
     * 
     * @return (boolean) TRUE se há locais sem bairro. Caso contrário, FALSE.
     */
    public function hasLocationsWithoutNeighborhood($cityId)
    {
        $sql = 'SELECT COUNT(*) > 0
                  FROM basLocation A
                 WHERE A.cityId = ?
                   AND A.neighborhoodId IS NULL' ;

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $cityId));
        
        return ($result[0][0] == DB_TRUE);
    }

    public function getLastInsertId()
    {
        $sql = "SELECT MAX(locationId) FROM baslocation";
        $result = SDatabase::query($sql);
        return $result[0][0];
    }
    
    
    /**
     * @return int 
     */
    public function getFirstLocationId()
    {
        $sql = 'SELECT MIN(locationid) FROM baslocation';
        $query = SDatabase::query($sql);
        
        return $query[0][0];
    }
}

?>
