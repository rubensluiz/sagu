<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for basMaritalStatus table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 15/08/2005
 *
 **/

/**
 * Class to manipulate the basMaritalStatus table
 **/
class BusinessBasicBusMaritalStatus extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listMaritalStatus( $resultAssociative = false )
    {
        $db = $this->getDatabase();
        $sql = 'SELECT maritalStatusId,
                       description
                  FROM basMaritalStatus
              ORDER BY description';

        $ret = $db->query($sql);

        $out = $ret;
        if ( $resultAssociative )
        {
            $out = array();
            foreach ( (array) $ret as $r )
            {
                $out[ $r[0] ] = $r[1];
            }
        }

        return $out;
    }

    /**
     * Return a specific record from the database
     *
     * @param $maritalStatusId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getMaritalStatus($maritalStatusId)
    {
        $sql = 'SELECT maritalStatusId,
                       description,
                       userName,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipAddress
                  FROM basMaritalStatus
                 WHERE maritalStatusId = ?';

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $maritalStatusId));

        $maritalStatus = new basMaritalStatus();
        list ( $maritalStatus->maritalStatusId,
               $maritalStatus->description,
               $maritalStatus->userName,
               $maritalStatus->dateTime,
               $maritalStatus->ipAddress ) = $result[0];

        return $maritalStatus;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchMaritalStatus($filters)
    {
        $sql= 'SELECT maritalStatusId,
                      description
                 FROM basMaritalStatus ';

        if ( strlen($filters->maritalStatusId) > 0 )
        {
            $where .= ' AND maritalStatusId = ? ';
            $args[] = $filters->maritalStatusId;
        }
        if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND UNACCENT(description) ILIKE UNACCENT(?) ';
            $args[] = $filters->description . '%';
        }
        if ( strlen($filters->lowerDescription) > 0 )
        {
            $where .= ' AND UNACCENT(lower(description)) ILIKE UNACCENT(lower(?)) ';
            $args[] = $filters->description . '%';
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY description';
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertMaritalStatus($data)
    {
        $sql = 'INSERT INTO basMaritalStatus
                            (maritalStatusId,
                             description)
                     VALUES (?,?)';

        $db = $this->getDatabase();
        $args = array ( $data->maritalStatusId,
                          $data->description );
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function updateMaritalStatus($data)
    {
        $sql = 'UPDATE basMaritalStatus
                   SET description    = ?
                 WHERE maritalStatusId = ?';

        $args = array( $data->description,
                       $data->maritalStatusId );

        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $maritalStatusId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function deleteMaritalStatus($maritalStatusId)
    {
        $sql = 'DELETE FROM basMaritalStatus
                      WHERE maritalStatusId = ?';

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $maritalStatusId));

        return $result;
    }
}
?>
