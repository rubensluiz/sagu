<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for basDocumentType table
 *
 * @author William Prigol Lopes [william] [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 02/05/2005
 *
 **/

/**
 * Class to manipulate the basDocumentType table
 **/

class BusinessBasicBusDocumentType extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listDocumentType()
    {
        $db  = $this->getDatabase();

        $sql = 'SELECT documentTypeId,
                       name,
                       mask,
                       sex,
                       personType,
                       minAge,
                       maxAge,
                       needDeliver,
                       isBlockEnroll,
                       fillHint,
                       informarpendencianoportal,
                       limiteDeDiasParaBloquear,
                       nacionalidade
                  FROM basDocumentType
              ORDER BY name';

        $ret = $db->query(SAGU::prepare($sql, $args));
        
        return $ret;
    }

   /**
    * Insert a specific documentType
    *
    * @param $data (object): documentType object
    *
    * @return (boolean): True if succed otherwise false
    *
   **/
   public function insertDocumentType($data)
    {
       $query = SDatabase::query("SELECT nextval('seq_documenttypeid'::regclass)");
       $documentTypeId = $query[0][0];
       
        $sql = ' INSERT INTO basDocumentType
                            (documentTypeId,
                             name,
                             mask,
                             sex,
                             personType,
                             minAge,
                             maxAge,
                             needDeliver,
                             isBlockEnroll,
                             fillHint,
                             exigepreenchimento,
                             validaConteudo,
                             registroModuloResidency,
                             registroModuloPedagogico,
                             registroModuloResmedica,
                             nacionalidade,
                             informarpendencianoportal,
                             limiteDeDiasParaBloquear
                             )
                      VALUES (?, ?, ?, ?, ?, ?, ?,
                              COALESCE(?, TRUE),
                              COALESCE(?, FALSE),
                              ?,
                              COALESCE(?, TRUE),
                              COALESCE(?, TRUE),
                              COALESCE(?, FALSE),
                              COALESCE(?, FALSE),
                              COALESCE(?, FALSE),
                              ?,
                              COALESCE(?, FALSE),
                              ?)';
        $args = array( $documentTypeId,
                       $data->name,
                       $data->mask,
                       $data->sex,
                       $data->personType,
                       $data->minAge,
                       $data->maxAge,
                       $data->needDeliver,
                       $data->isBlockEnroll,
                       $data->fillHint,
                       $data->exigePreenchimento,
                       $data->validaConteudo,
                       $data->registroModuloResidency,
                       $data->registroModuloPedagogico,
                       $data->registroModuloResmedica,
                       $data->nacionalidade,
                       $data->informarpendencianoportal,
                       $data->limiteDeDiasParaBloquear);

        $db  = $this->getDatabase();

        $ret = $db->execute(SAGU::prepare($sql, $args) );

        return $ret ? $documentTypeId : false;
    }

   /**
    *
    * get a specific documentType
    *
    * @param $documentTypeId (int): Primary key for documentType
    *
    * @return (object): documentType object referred by primary key
    *
   **/
   public function getDocumentType($documentTypeId)
    {
        $sql = '     SELECT documentTypeId,
                            name,
                            mask,
                            sex,
                            personType,
                            minAge,
                            maxAge,
                            needDeliver,
                            TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                            userName,
                            isBlockEnroll,
                            fillHint,
                            exigePreenchimento,
                            informarpendencianoportal,
                            limiteDeDiasParaBloquear,
                            validaConteudo,
                            registroModuloResidency,
                            registroModuloPedagogico,
                            registroModuloResmedica,
                            nacionalidade
                       FROM basDocumentType
                      WHERE documentTypeId = ? ';
        $args = array($documentTypeId);

        $db  = $this->getDatabase();
        $ret = $db->query(SAGU::prepare($sql, $args));

        $ret = $ret[0];

        $return = new basDocumentType;

        list ( $return->documentTypeId,
               $return->name,
               $return->mask,
               $return->sex,
               $return->personType,
               $return->minAge,
               $return->maxAge,
               $return->needDeliver,
               $return->dateTime,
               $return->userName,
               $return->isBlockEnroll,
               $return->fillHint, 
               $return->exigePreenchimento,
               $return->informarpendencianoportal,
               $return->limiteDeDiasParaBloquear,
               $return->validaConteudo,
               $return->registroModuloResidency,
               $return->registroModuloPedagogico,
               $return->registroModuloResmedica,
               $return->nacionalidade) = $ret;

        return $return;
    }

   /**
    * Update a specific documentType
    *
    * @param $data (object): DocumentType object containing data to update
    *
    * @return (boolean): True if succed otherwise false
    *
   **/
   public function updateDocumentType($data)
   {    
        $sql = ' UPDATE basDocumentType
                    SET name           = ?,
                        mask           = ?,
                        sex            = ?,
                        personType     = ?,
                        minAge         = ?,
                        maxAge         = ?,
                        needDeliver    = ?,
                        isBlockEnroll  = ?,
                        fillHint       = ?,
                        exigepreenchimento     = ?,
                        validaConteudo = ?,
                        registroModuloResidency = ?,
                        registroModuloPedagogico = ?,
                        registroModuloResmedica = ?,
                        nacionalidade           = ?,
                        informarpendencianoportal = ?,
                        limiteDeDiasParaBloquear = ?
                  WHERE documentTypeId = ? ';

        $args = array($data->name,
                      $data->mask,
                      $data->sex,
                      $data->personType,
                      $data->minAge,
                      $data->maxAge,
                      $data->needDeliver,
                      $data->isBlockEnroll,
                      $data->fillHint,
                      SAGU::NVL($data->exigePreenchimento, DB_TRUE),
                      SAGU::NVL($data->validaConteudo, DB_TRUE),
                      SAGU::NVL($data->registroModuloResidency, DB_FALSE),
                      SAGU::NVL($data->registroModuloPedagogico, DB_FALSE),
                      SAGU::NVL($data->registroModuloResmedica, DB_FALSE),
                      $data->nacionalidade,
                      $data->informarpendencianoportal,
                      $data->limiteDeDiasParaBloquear,
                      $data->documentTypeId);

        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $ret = $db->execute($sqls[$i]);
        }

        return $ret;
    }

   /**
    * Search a specific documentType filtering by specific fields
    *
    * @param $range (object): MIOLO PageNavigator Object
    * @param $filter (object): Object containing filters
    *
    * @return (array): Array containing a documentType list
    *
   **/
   public function searchDocumentType($filter)
    {
        $module = MIOLO::getCurrentModule();
        $sql = ' SELECT documentTypeId,
                        name,
                        personType,
                        mask,
                        needDeliver,
                        isBlockEnroll, 
                        informarpendencianoportal,
                        limiteDeDiasParaBloquear,
                        validaConteudo,
                        exigePreenchimento
                   FROM basDocumentType';

        if (strlen($filter->documentTypeId)>0 )
        {
            $where.= ' AND documentTypeId = ? ';
            $args[] = $filter->documentTypeId;
        }
        if (strlen($filter->name)>0 )
        {
            $where.= ' AND UNACCENT(name) ILIKE UNACCENT(?) ';
            $args[] = $filter->name . '%';
        }
        if (strlen($filter->personType)>0 )
        {
            $where.= ' AND UPPER(personType) = UPPER(?) ';
            $args[] = $filter->personType;
        }
        if ( strlen($filter->registroModuloResidency) > 0 )
        {
            $where.= ' AND registroModuloResidency = ? ';
            $args[] = $filter->registroModuloResidency;
        }
        if ( strlen($filter->registroModuloPedagogico) > 0 )
        {
            $where.= ' AND registroModuloPedagogico = ? ';
            $args[] = $filter->registroModuloPedagogico;
        }
        if ( strlen($filter->registroModuloResmedica) > 0 )
        {
            $where.= ' AND registroModuloResmedica = ? ';
            $args[] = $filter->registroModuloResmedica;
        }

        if (strlen($where)>0 )
        {
            $sql.= ' WHERE '.substr($where, 4, strlen($where)).' ORDER BY name, personType ';
            $db = $this->getDatabase();
            $ret = $db->query(SAGU::prepare($sql, $args), $range);

            return $ret;
        }
        return null;

    }

   /**
    * delete a specific documentType
    *
    * @param $documentTypeId (int): DocumentType object
    *
    * @return (boolean): True if succed otherwise fails
    *
   **/
   public function deleteDocumentType($documentTypeId)
    {
        $sql = ' DELETE FROM basDocumentType
                       WHERE documentTypeId = ? ';

        $db = $this->getDatabase();
        $ret = $db->execute(SAGU::Prepare($sql, $documentTypeId) );
        
        return $ret;
    }
}
?>
