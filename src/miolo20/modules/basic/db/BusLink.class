<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for basLink table
 *
 * @author Jamiel Spezia[jamiel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 07/08/2005
 *
 **/

/**
 * Class to manipulate the basLink table
 **/
class BusinessBasicBusLink extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listLink()
    {
        $db  = $this->getDatabase();
        $sql = 'SELECT linkId,
                       description
                  FROM basLink
              ORDER BY description';
        $ret = $db->query($sql);

        return $ret;
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $linkId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getLink($linkId)
    {
        $sql = 'SELECT linkId,
                       description,
                       level,
                       isvisibletoperson,
                       isoperator,
                       userName,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipAddress
                  FROM basLink
                 WHERE linkId = ?';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $linkId));

        $link = new basLink();
        list ( $link->linkId,
               $link->description,
               $link->level,
               $link->isVisibleToPerson,
               $link->isOperator,
               $link->userName,
               $link->dateTime,
               $link->ipAddress ) = $result[0];

        return $link; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchLink($filters)
    {
        $sql= 'SELECT linkId,
                      description,
                      level,
                      isvisibletoperson,
                      isoperator
                 FROM basLink ';

        if ( strlen($filters->linkId) > 0 )
        {
            $where .= ' AND linkId = ? ';
            $args[] = $filters->linkId;
        }
        
        if ( strlen($filters->level) > 0 )
        {
            $where .= ' AND level = ? ';
            $args[] = $filters->level;
        }
                
        if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND UNACCENT(description) ILIKE UNACCENT(?) ';
            $args[] = $filters->description . '%';
        }
        
        if ( strlen($filters->isVisibleToPerson) > 0 )
        {
            $where .= ' AND isVisibleToPerson = ? ';
            $args[] = $filters->isVisibleToPerson;
        }
        
        if ( strlen($filters->isOperator) > 0 )
        {
            $where .= ' AND isOperator = ? ';
            $args[] = $filters->isOperator;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY description';
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertLink($data)
    {
        $sql = 'INSERT INTO basLink
                            (description,
                             level,
                             isvisibletoperson,
                             isoperator)
                     VALUES (?,?,?,?)';

        $args = array( $data->description,
                       $data->level,
                       $data->isVisibleToPerson?DB_TRUE:DB_FALSE,
                       $data->isOperator?DB_TRUE:DB_FALSE );
                       
        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function updateLink($data)
    {
        $sql = 'UPDATE basLink
                   SET description = ?,
                       level = ?,
                       isvisibletoperson = ?,
                       isoperator = ?
                 WHERE linkId = ?';

        $args = array( $data->description,
                       $data->level,
                       $data->isVisibleToPerson?DB_TRUE:DB_FALSE,
                       $data->isOperator?DB_TRUE:DB_FALSE,
                       $data->linkId );

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $linkId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function deleteLink($linkId)
   {
        $sql = 'DELETE FROM basLink
                      WHERE linkId = ?';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $linkId));

        return $result;
   }
}
?>
