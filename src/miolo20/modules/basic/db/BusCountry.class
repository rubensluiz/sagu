<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for basCountry table
 *
 * @author William Prigol Lopes [william] [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Vinícius Becker [vinicius@solis.coop.br]
 *
 * @since
 * Class created on 07/08/2005
 *
 **/

/**
 * Class to manipulate the basCountry table
 **/
class BusinessBasicBusCountry extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listCountry()
    {
        $db  = $this->getDatabase();
        $sql = 'SELECT countryId,
                       name
                  FROM basCountry
              ORDER BY name';
        $ret = $db->query($sql);

        return $ret;
    }

    /**
     * List all records from the table handled by the class using the nationality field
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listNationality()
    {
        $db  = $this->getDatabase();
        $sql = 'SELECT countryId,
                       nationality
                  FROM basCountry
              ORDER BY name';
        $ret = $db->query($sql);

        return $ret;
    }

    /**
     * Return a specific record from the database
     *
     * @param $countryId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getCountry($countryId)
    {
        $country = new basCountry();
        
        if ( strlen($countryId) > 0 )
        {
            $sql = 'SELECT countryId,
                           name,
                           nationality,
                           currency,
                           pluralCurrency,
                           decimalDescription,
                           pluralDecimalDescription,
                           currencySymbol,
                           userName,
                           TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                           ipAddress,
                           fronteirico
                      FROM basCountry
                     WHERE countryId = ?';

            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $countryId));


            list ( $country->countryId,
                   $country->name,
                   $country->nationality,
                   $country->currency,
                   $country->pluralCurrency,
                   $country->decimalDescription,
                   $country->pluralDecimalDescription,
                   $country->currencySymbol,
                   $country->userName,
                   $country->dateTime,
                   $country->ipAddress,
                   $country->fronteirico) = $result[0];
        }

        return $country;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchCountry($filters)
    {
        $sql= 'SELECT countryId,
                      name,
                      nationality,
                      currency,
                      pluralCurrency,
                      decimalDescription,
                      pluralDecimalDescription,
                      currencySymbol,
                      fronteirico
                 FROM basCountry ';

        if ( strlen($filters->countryId) > 0 )
        {
            $where .= ' AND countryId = ? ';
            $args[] = $filters->countryId;
        }
        if ( strlen($filters->name) > 0 )
        {
            $where .= ' AND UNACCENT(name) ILIKE UNACCENT(?) ';
            $args[] = $filters->name . '%';
        }
        if ( strlen($filters->nationality) > 0 )
        {
            $where .= ' AND UNACCENT(nationality) ILIKE UNACCENT(?) ';
            $args[] = $filters->nationality . '%';
        }
        if ( strlen($filters->currency) > 0 )
        {
            $where .= ' AND currency ILIKE ? ';
            $args[] = $filters->currency . '%';
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY name';
            $db = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertCountry($data)
    {
        $sql = 'INSERT INTO basCountry
                            (countryid,
                             name,
                             nationality,
                             currency,
                             pluralCurrency,
                             decimalDescription,
                             pluralDecimalDescription,
                             currencySymbol,
                             fronteirico)
                     VALUES (?,?,?,?,?,?,?,?,?)';

        $args = array( $data->countryId,
                       $data->name,
                       $data->nationality,
                       $data->currency,
                       $data->pluralCurrency,
                       $data->decimalDescription,
                       $data->pluralDecimalDescription,
                       $data->currencySymbol,
                       $data->fronteirico);

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateCountry($data)
    {
        $sql = 'UPDATE basCountry
                   SET name                     = ?,
                       nationality              = ?,
                       currency                 = ?,
                       pluralCurrency           = ?,
                       decimalDescription       = ?,
                       pluralDecimalDescription = ?,
                       currencySymbol           = ?,
                       fronteirico              = ?
                 WHERE countryId = ?';

        $args = array( $data->name,
                       $data->nationality,
                       $data->currency,
                       $data->pluralCurrency,
                       $data->decimalDescription,
                       $data->pluralDecimalDescription,
                       $data->currencySymbol,
                       $data->fronteirico,
                       $data->countryId );

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }
        if($data->fronteirico == DB_FALSE)
        {
            $filters = new stdClass();
            $filters->countryId = $data->countryId;
            $busCity = new BusinessBasicBusCity();
            $citys = $busCity->searchCity($filters);

            foreach ($citys as $city)
            {
                $data = new stdClass();
                $data->name = $city[1];
                $data->zipCode = $city[2];
                $data->stateId = $city[3];
                $data->countryId = $city[5];
                $data->ibgeId = $city[7];
                $data->fronteirico = DB_FALSE;
                $data->cityId = $city[0];

                $busCity->updateCity($data);
            }
        }
        return $result;
    }

    /**
     * Delete a record
     *
     * @param $countryId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteCountry($countryId)
    {
        $sql = 'DELETE FROM basCountry
                      WHERE countryId = ?';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $countryId));

        return $result;
    }
}
?>
