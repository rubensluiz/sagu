<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for basState table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 02/05/2005
 *
 **/

/**
 * Class to manipulate the basState table
 **/
class BusinessBasicBusState extends sBusiness
{

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listState($countryId=null)
    {
        $sql = 'SELECT stateId,
                       name
                  FROM basState ';

        if ( isset($countryId) )
        {
            $sql .= ' WHERE countryId = ? ';
            $args[] = $countryId;
        }

        $sql .= ' ORDER BY name';

        $db  = $this->getDatabase();
        $ret = $db->query(SAGU::prepare($sql, $args));

        return $ret;
    }

    /**
     * Return a specific record from the database
     *
     * @param $stateId (integer): Primary key of the record to be retrieved
     * @param $countryId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getState($stateId, $countryId)
    {
        $sql = 'SELECT A.stateId,
                       A.name,
                       A.countryId,
                       B.name,
                       A.ibgeId,
                       A.userName,                       
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM basState A
             LEFT JOIN basCountry B
                    ON ( A.countryId = B.countryId )
                 WHERE A.stateId = UPPER(?)
                   AND A.countryId = ?';

        $db     = $this->getDatabase();
        $args   = array($stateId,
                        $countryId);
        $result = $db->query(SAGU::prepare($sql, $args));

        $state  = new basState();
        list ( $state->stateId,
               $state->name,
               $state->countryId,
               $state->countryName,
               $state->ibgeId,
               $state->userName,
               $state->dateTime,
               $state->ipAddress ) = $result[0];

        return $state;
    }
    
    /**
     * Pega o nome do estado cujo id é recebido por parâmetro.
     * 
     * @param type $stateId
     * @return basState 
     */
    public function getStateNameById($stateId)
    {
        $sql = 'SELECT name
                  FROM basState
                 WHERE stateId = ?';

        $db     = $this->getDatabase();
        $args   = array($stateId);
        
        $result = $db->query(SAGU::prepare($sql, $args));

        $state  = new basState();
        list ( $state->name ) = $result[0];

        return $state;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchState($filters)
    {
        $sql = 'SELECT A.stateId,
                       A.name,
                       A.countryId,
                       B.name,
                       A.ibgeId,
                       A.userName,                       
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM basState A
             LEFT JOIN basCountry B
                    ON ( A.countryId = B.countryId ) ';

        if ( strlen($filters->stateId) > 0 )
        {
            $where .= ' AND A.stateId ILIKE UPPER(?) ';
            $args[] = $filters->stateId . '%';
        }
        if ( strlen($filters->name) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?) ';
            $args[] = $filters->name . '%';
        }
        if ( strlen($filters->countryId) > 0 )
        {
            $where .= ' AND A.countryId = ? ';
            $args[] = $filters->countryId;
        }
        if ( strlen($filters->ibgeId) > 0 )
        {
            $where .= ' AND A.ibgeId = ? ';
            $args[] = $filters->ibgeId;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY B.name, A.name';
            $db = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertState($data)
    {
        $sql = 'INSERT INTO basState
                            (stateId,
                             name,
                             countryId,
                             ibgeId)
                     VALUES (?,?,?,?)';

        $args = array( $data->stateId,
                       $data->name,
                       $data->countryId,
                       $data->ibgeId );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function updateState($data)
    {
        $sql = 'UPDATE basState
                   SET name      = ?,
                       ibgeId    = ?
                 WHERE stateId   = ?
                   AND countryId = ?';

        $args = array($data->name,
                      $data->ibgeId,
                      $data->stateId,
                      $data->countryId);

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $stateId (string): Primary key for deletion
     * @param $countryId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function deleteState($args)
    {
        $sql = 'DELETE FROM basState
                      WHERE stateId = ?
                        AND countryId = ?';

        $db = $this->getDatabase();

        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }
    
    public function getCountryId($stateId)
    {
        $sql = 'SELECT countryID
                  FROM basstate
                 WHERE stateId = ?';

        $db = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql, array($stateId)));

        return $result[0][0];
    }
}
?>
