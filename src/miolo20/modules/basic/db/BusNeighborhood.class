<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for basNeighborhood table
 *
 * @author Hélio H. R. Guimarães [helio@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Mauricio de Castro [mcastro@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 09/08/2005
 *
 **/

/**
 * Class to manipulate the basNeighborhood table
 **/
class BusinessBasicBusNeighborhood extends sBusiness
{
    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertNeighborhood($data)
    {
        $sql = 'INSERT INTO basNeighborhood
                            (name)
                     VALUES (?)';

        $args = array( $data->name );

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listNeighborhood()
    {
        $db  = $this->getDatabase();
        $sql = 'SELECT neighborhoodId,
                       name
                  FROM basNeighborhood
              ORDER BY name';
        $ret = $db->query($sql);

        return $ret;
    }

    /**
     * Return a specific record from the database
     *
     * @param $neighborhoodId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getNeighborhood($neighborhoodId)
    {
        $sql = 'SELECT neighborhoodId,
                       name,
                       userName,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\')
                  FROM basNeighborhood
                 WHERE neighborhoodId = ? ';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $neighborhoodId));

        $neighborhood = new basNeighborhood();
        list ( $neighborhood->neighborhoodId,
               $neighborhood->name,
               $neighborhood->userName,
               $neighborhood->dateTime ) = $result[0];

        return $neighborhood;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchNeighborhood($filters)
    {
        $sql= 'SELECT A.neighborhoodId,
                      A.name
                 FROM basNeighborhood A ';

        if ( strlen($filters->neighborhoodId) > 0 )
        {
            $where .= ' AND A.neighborhoodId = ? ';
            $args[] = $filters->neighborhoodId;
        }
        if ( strlen($filters->name) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?) ';
            $args[] = $filters->name . '%';
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY A.name';
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function updateNeighborhood($data)
    {
        $sql = 'UPDATE basNeighborhood
                   SET name           = ?
                 WHERE neighborhoodId = ?';

        $args = array($data->name,
                      $data->neighborhoodId );

        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);
        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $data (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function deleteNeighborhood($neighborhoodId)
    {
        $sql = 'DELETE FROM basNeighborhood
                      WHERE neighborhoodId = ?';

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $neighborhoodId));

        return $result;
    }
}
?>
