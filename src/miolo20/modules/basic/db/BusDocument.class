<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for basDocument table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 05/09/2005
 *
 **/

/**
 * Class to manipulate the basDocument table
 **/

class BusinessBasicBusDocument extends sBusiness
{
    /**
     *
     * get a specific document
     *
     * @param $personId (int): Document primary key
     * @param $documentTypeId (int): Document priary key
     *
     * @return (object): document object referred by primary key
     *
    **/
    public function getDocument($personId, $documentTypeId)
    {
        $sql = 'SELECT A.personId,
                       B.name,
                       A.documentTypeId,
                       C.name,
                       A.content,
                       A.isDelivered,
                       A.obs,
                       A.cityId,
                       D.name,
                       A.organ,
                       to_char(A.dateExpedition, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.userName,
                       to_char(A.dateTime, \'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress,
                       A.isExcused
                       FROM basDocument A
            INNER JOIN ONLY basPerson B
                      USING (personId)
                 INNER JOIN basDocumentType C
                      USING (documentTypeId)
                  LEFT JOIN basCity D
                         ON (A.cityId = D.cityId)
                      WHERE A.personId       = ?
                        AND A.documentTypeId = ?';

        $args = array( $personId,
                       $documentTypeId );

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        $document = new basDocument();
        list ( $document->personId,
               $document->personName,
               $document->documentTypeId,
               $document->documentTypeName,
               $document->content,
               $document->isDelivered,
               $document->obs,
               $document->cityId,
               $document->cityName,
               $document->organ,
               $document->dateExpedition,
               $document->userName,
               $document->dateTime,
               $document->ipAddress,
               $document->isExcused ) = $result[0];

        return $document;
    }

    /**
     * Search a specific document filtering by specific fields
     *
     * @param $range (object): MIOLO PageNavigator Object
     * @param $filter (object): Object containing filters
     *
     * @return (array): Array containing a document list
     *
    **/
    public function searchDocument($filter, $returnAsObject = false)
    {
        $sql = 'SELECT A.personId,
                       B.name,
                       A.documentTypeId,
                       C.name,
                       A.content,
                       A.isDelivered,
                       A.obs,
                       A.cityId,
                       D.name,
                       A.organ,
                       TO_CHAR(A.dateExpedition,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress,
                       A.isExcused
                       FROM basDocument A
             LEFT JOIN ONLY basPerson B
                      USING (personId)
                  LEFT JOIN basDocumentType C
                      USING (documentTypeId)
                  LEFT JOIN basCity D
                         ON (A.cityId = D.cityId) ';

        $cols = array(
            'personId',
            'personName',
            'documentTypeId',
            'documentType',
            'content',
            'isDelivered',
            'obs',
            'cityId',
            'cityName',
            'organ',
            'dateExpedition',
            'userName',
            'dateTime',
            'ipAddress',
            'isExcused',
        );

        if ( strlen($filter->personId) > 0 )
        {
            $where .= ' AND A.personId = ? ';
            $args[] = $filter->personId;
        }

        if ( strlen($filter->documentTypeId)>0 )
        {
            $where .= ' AND A.documentTypeId = ? ';
            $args[] = $filter->documentTypeId;
        }

        if ( strlen($filter->content)>0 )
        {
            $where .= ' AND A.content ILIKE ? ';
            $args[] = $filter->content;
        }
        if ( strlen($filter->nonPersonId) > 0 )
        {
            $where .= ' AND B.personId <> ? ';
            $args[] = $filter->nonPersonId;
        }

        if ( strlen($where)>0 )
        {
            $sql   .= ' WHERE ' . substr($where, 4, strlen($where)) .
                   ' ORDER BY B.name,
                              C.name';

            $result = $this->getDatabase()->query(SAGU::Prepare($sql,$args));
        }

        if ($result && $returnAsObject)
        {
            return SAGU::resultToObject($result, $cols);
        }

        return $result;
    }
    
    /**
     * @return boolean
     */
    public function hasDocument($personId, $documentTypeId)
    {
        $filters = new stdCLass();
        $filters->personId = $personId;
        $filters->documentTypeId = $documentTypeId;
        
        return count($this->searchDocument($filters)) > 0;
    }
    
    public function insertOrUpdateDocument($data)
    {
        $ok = true;
        
        if ( ( SAGU::allIsFilled($data->personId, $data->content) ) || ( $data->isDelivered == DB_TRUE ) )
        {
            $filters = new stdClass();
            $filters->personId = $data->personId;
            $filters->documentTypeId = $data->documentTypeId;
            $rows = $this->searchDocument($filters);

            if ( count($rows) > 0 )
            {
                $ok = $this->updateDocument($data);
            }
            else
            {
                $ok = $this->insertDocument($data);
            }
        }
        
        return $ok;
    }

    /**
     * Insert a specific document
     *
     * @param $data (object): document object
     *
     * @return (boolean): True if succed otherwise false
     *
     **/
    public function insertDocument($data)
    {
        $sql = 'INSERT INTO basDocument
                           (personId,
                            documentTypeId,
                            content,
                            isDelivered,
                            obs,
                            cityId,
                            organ,
                            dateExpedition';

        $values = 'VALUES (?,?,?,?,?,?,?,TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';

        $args = array( $data->personId,
                       $data->documentTypeId,
                       $data->content,
                       MUtil::getBooleanValue($data->isDelivered) ? DB_TRUE : DB_FALSE,
                       $data->obs,
                       $data->cityId,
                       $data->organ,
                       $data->dateExpedition);

        if ( strlen($data->isExcused) > 0 )
        {
            $sql    .= ', isExcused';
            $values .= ',?';
            $args[]  = $data->isExcused;
        }
        $sql    .= ')';
        $values .= ')';

        $sql .= $values;

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args) );

        return $result;
    }

    /**
     * Update a specific document
     *
     * @param $data (object): Document object containing data to update
     *
     * @return (boolean): True if succed otherwise false
     *
    **/
    public function updateDocument($data)
    {
        $sql = ' UPDATE basDocument SET ';

        $sql   .= ' content = ?, ';
        $args[] = $data->content;

        if ( strlen($data->isDelivered)>0 )
        {
            $sql   .= ' isDelivered = ?, ';
            $args[] = MUtil::getBooleanValue($data->isDelivered) ? DB_TRUE : DB_FALSE;
        }
        
        
        //Precisa sempre salvar as observacoes, nao somente quando esta inserindo conteudo
        //também precisamos excluir depois
//        if ( strlen($data->obs)>0 )
//        {
            $sql   .= ' obs = ?, ';
            $args[] = $data->obs;
//        }
        if ( strlen($data->cityId)>0 )
        {
            $sql   .= ' cityId = ?, ';
            $args[] = $data->cityId;
        }
        if ( strlen($data->organ)>0 )
        {
            $sql   .= ' organ = ?, ';
            $args[] = $data->organ;
        }
        if ( strlen($data->dateExpedition)>0 )
        {
            $sql   .= ' dateExpedition = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'), ';
            $args[] = $data->dateExpedition;
        }
        if ( strlen($data->isExcused) > 0 )
        {
            $sql   .= ' isExcused = ?, ';
            $args[] = $data->isExcused;
        }

        $sql .= ' WHERE personId = '.$data->personId.' AND documentTypeId = '.$data->documentTypeId.'';
        $sql = str_replace(',  WHERE',' WHERE',$sql);
        
        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * delete a specific document
     *
     * @param $personId (int): Document primary key
     * @param $documentTypeId (int): Document priary key
     *
     * @return (boolean): True if succed otherwise fails
     *
    **/
    public function deleteDocument($personId, $documentTypeId)
    {
        $sql  = 'DELETE FROM basDocument
                       WHERE personId       = ?
                         AND documentTypeId = ?';

        $args = array( $personId,
                       $documentTypeId );

        $result = $this->getDatabase()->Execute(SAGU::Prepare($sql, $args));

        return $result;
    }

    /**
     * delete a all documents
     *
     * @param $personId (int): Document primary key
     *
     * @return (boolean): True if succed otherwise fails
     *
    **/
    public function deleteAllDocument($personId)
    {
        $sql  = 'DELETE FROM basDocument
                       WHERE personId       = ?';

        $args = array( $personId );
        $result = $this->getDatabase()->Execute(SAGU::Prepare($sql, $args));

        return $result;
    }

    /**
     * Vefify if a person delivered the needed documents
     *
     * @param $personId (int): id of the person to be verified
     *
     * @return (array): list of missing documents
     *
    **/
    public function checkMissingDocuments($personId, $contractId=null, $isEnroll = false)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        // definir se a pessoa eh juridica ou fisica
        $sql = 'SELECT CASE WHEN ( SELECT COUNT(*) > 0
                                FROM ONLY basPhysicalPerson
                                    WHERE personId = ? )
                            THEN \'P\'
                            ELSE CASE WHEN ( SELECT COUNT(*) > 0
                                          FROM ONLY basLegalPerson
                                              WHERE personId = ?)
                                      THEN \'L\'
                                 END
                       END';

        $args = array( $personId,
                       $personId );

        $personType = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        $personType = $personType[0][0];

        // obter os dados da pessoa conforme o seu tipo
        if ($personType == 'P')
        {
            $busPerson  = new BusinessBasicBusPhysicalPerson();
            $personData = $busPerson->getPhysicalPerson($personId);
        }
        elseif ($personType == 'L')
        {
            $busPerson  = new BusinessBasicBusLegalPerson();
            $personData = $busPerson->getLegalPerson($personId);
        }
        else
        {
            $busPerson  = new BusinessBasicBusPerson();
            $personData = $busPerson->getPerson($personId);
        }

        // obter lista de documentos nao entregues pela pessoa
        $sql = 'SELECT documentTypeId,
                       name,
                       minAge,
                       maxAge,		
                       needDeliver,
                       isBlockEnroll
                  FROM basDocumentType
                 WHERE documentTypeId NOT IN (SELECT documentTypeId
                                                FROM basDocument
                                               WHERE personId = ?
                                                 AND (isDelivered = \'' . DB_TRUE . '\'
                                                      OR isExcused = \'' . DB_TRUE . '\'))
                   AND (sex = ? OR sex IS NULL)
                   AND (minAge <= EXTRACT(YEAR FROM AGE(TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'))) OR minAge IS NULL)
                   AND (maxAge >= EXTRACT(YEAR FROM AGE(TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'))) OR maxAge IS NULL)
                   AND personType = ?
                   AND 
                   ( 
                     EXISTS
                     (
			SELECT *
			FROM basperson p
			LEFT JOIN basCity c
			ON ( p.cityId = c.cityId)		      
			WHERE p.personId = ?
		        AND CASE WHEN nacionalidade = \'B\' THEN c.countryid = \'BRA\' 
			WHEN nacionalidade = \'F\' THEN c.fronteirico IS TRUE
                        WHEN nacionalidade = \'E\' THEN c.countryid != \'BRA\' AND c.fronteirico IS FALSE
                        WHEN nacionalidade = \'T\' THEN TRUE 
                        ELSE FALSE END
                     )
                   )';

        $args = array( $personId,
                       $personData->sex,
                       $personData->dateBirth,
                       $personData->dateBirth,
                       $personType,
                       $personId
                        );

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        if ( strlen($contractId) > 0 )
        {
            $busContract  = new BusinessAcademicBusContract();
            $contractData = $busContract->getContract($contractId);

            $busCourse  = new BusinessAcademicBusCourse();
            $courseData = $busCourse->getCourse($contractData->courseId);
        }
        else
        {
            unset($contractData);
        }

        // a partir da lista de documentos nao entregues, verificar os que
        // realmente deveriam ter sido entregues
        if ( count($result) > 0 )
        {
            $retVal = null;
            foreach ( $result as $row )
            {
                list ( $documentTypeId,
                       $documentName,
                       $minAge,
                       $maxAge,
                       $needDeliver,
                       $isBlockEnroll ) = $row;

                $add = false;

                if ( $isEnroll && ( $isBlockEnroll == DB_TRUE ) )
                {
                    $add = true;
                }
                else if ( $needDeliver == DB_TRUE )
                {
                    if ( $documentTypeId == SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_MARITAL_STATUS') && $personType == 'P' )
                    {
                        // teste para obrigar apresentacao do documento de solteiro emancipado
                        $sql = 'SELECT maritalStatusId
                             FROM ONLY basPhysicalPerson
                                 WHERE personId = ?';

                        $res = $this->getDatabase()->query(SAGU::prepare($sql, $personId));

                        if ( strtoupper($res[0][0]) == strtoupper(SAGU::getParameter('BASIC', 'EMANCIPATED_PERSON')) )
                        {
                            $add = true;
                        }
                    } 
                    elseif ( $documentTypeId == SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_ELECTORAL_QUIT') && $personType == 'P' )
                    {
                        // testar se a pessoa precisa entregar comprovacao de quitacao eleitoral
                        // verificando se a pessoa, na data da ultima eleicao, ja tinha a idade
                        // minima ou ainda nao tinha passado da data maxima.

                        // pega a data da ultima eleicao e, se nao existir, pega a data atual
                        $sql = 'SELECT TO_CHAR(electionDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                                  FROM acdElection
                              ORDER BY electionDate DESC
                                 LIMIT 1';

                        $res = $this->getDatabase()->query($sql);

                        $electionDate = ( strlen($res[0][0]) > 0 ) ? $res[0][0] : date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'));

                        // pega a data de nascimento da pessoa
                        $sql = 'SELECT TO_CHAR(dateBirth, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                             FROM ONLY basPhysicalPerson
                                 WHERE personId = ?';
                        $res = $this->getDatabase()->query(SAGU::prepare($sql, $personId));
                        $birthDate = ( strlen($res[0][0]) > 0 ) ? $res[0][0] : date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'));

                        $sql = 'SELECT EXTRACT(YEAR FROM AGE(TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'), TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')))';

                        $res = $this->getDatabase()->query(SAGU::prepare($sql, array($electionDate, $birthDate)));

                        // idade da pessoa na data da ultima eleicao
                        $idade = $res[0][0];

                        // verificar se, na data da eleicao, a pessoa tinha a idade minima ou maxima
                        if ( ($idade >= $minAge || is_null($minAge)) && ($idade <= $maxAge || is_null($maxAge)) )
                        {
                            $add = true;
                        }
                    }
                    else
                    {
                        $add = true;
                    }
                }

                // verificar se ha registros nos documentos restritos
                if ( isset($contractData) )
                {
                    $sql1 = 'SELECT documentTypeId
                               FROM acdRestrictedDocuments
                              WHERE documentTypeId = '.$documentTypeId.'';

                    $res1 = $this->getDatabase()->query($sql1);

                    if ( count($res1) > 0 ) //Is restricted document
                    {
                        $sql2 = 'SELECT documentTypeId
                                   FROM acdRestrictedDocuments
                                  WHERE documentTypeId    = ?
                                    AND (courseId         = ? OR courseId IS NULL)
                                    AND (courseVersion    = ? OR courseVersion IS NULL)
                                    AND (turnId           = ? OR turnId IS NULL)
                                    AND (unitId           = ? OR unitId IS NULL)
                                    AND (formationLevelId = ? OR formationLevelId IS NULL)
                                    AND isIn              = TRUE';

                        $args2 = array ( $documentTypeId,
                                         $contractData->courseId,
                                         $contractData->courseVersion,
                                         $contractData->turnId,
                                         $contractData->unitId,
                                         $courseData->formationLevelId );

                        $res2 = $this->getDatabase()->query(SAGU::prepare($sql2, $args2));

                        if ( count($res2) > 0 )
                        {
                            $add = true;
                        }
                        else
                        {
                            $add = false;
                        }
                    }
                }

                if ( $add )
                {
                    $retVal[$documentTypeId]->documentName   = $documentName;
                    $retVal[$documentTypeId]->isBlockEnroll  = ($isBlockEnroll == DB_TRUE);
                }
            }
        }

        return $retVal;
    }

    /**
     * This function retrieves all documents of a person (using personId) where 'obs'
     * field is not empty
     *
     * @param  $personId
     * @return document
     */
    public function checkDocumentsObs($personId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $sql = 'SELECT A.documentTypeId,
                       B.name,
                       A.obs,
                       B.isBlockEnroll
                  FROM basDocument A
            INNER JOIN basDocumentType B
                    ON (B.documentTypeId = A.documentTypeId)
                 WHERE A.personId = ?
                   AND length(A.obs) > 0
                   AND 
                   ( 
                     EXISTS
                     (
			SELECT *
			FROM basperson p
			LEFT JOIN basCity c
			ON ( p.cityId = c.cityId)		      
			WHERE p.personId = ?
		        AND CASE WHEN nacionalidade = \'B\' THEN c.countryid = \'BRA\' 
			WHEN nacionalidade = \'F\' THEN c.fronteirico IS TRUE
                        WHEN nacionalidade = \'E\' THEN c.countryid != \'BRA\' AND c.fronteirico IS FALSE
                        WHEN nacionalidade = \'T\' THEN TRUE 
                        ELSE FALSE END
                     )
                   )';

        $args = array($personId,$personId);
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return $result;
    }
    
    /**
     * Verifica se a pessoa possui documentos pendentes de entrega e
     * retorna a lista destes documentos
     * 
     * @param type $personId
     * @return type
     */
        public function checkDocumentosPendentes($personId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $sql = "SELECT DISTINCT t.name
                FROM basdocumenttype t
                 WHERE t.needDeliver IS TRUE
                   AND ( 
			NOT EXISTS
			(
                            SELECT 1 
                            FROM basdocument d            
                            WHERE d.personid = ? 
                            AND d.documenttypeid = t.documenttypeid
			)
			OR EXISTS(SELECT 1 
                        FROM basdocument 
                        WHERE personid = ? 
                        AND documenttypeid = t.documenttypeid 
                        AND isDelivered IS FALSE)
		       )
                   AND 
                   ( 
                     EXISTS
                     (
			SELECT *
			FROM basperson p
			LEFT JOIN basCity c
			ON ( p.cityId = c.cityId)		      
			WHERE p.personId = ?
		        AND CASE WHEN t.nacionalidade = 'B' THEN c.countryid = 'BRA' 
			WHEN t.nacionalidade = 'F' THEN c.fronteirico IS TRUE
                        WHEN t.nacionalidade = 'E' THEN c.countryid != 'BRA'  AND c.fronteirico IS FALSE
                        WHEN t.nacionalidade = 'T' THEN TRUE 
                        ELSE FALSE END
                     )
                   )";

//        $result = $this->getDatabase()->query(SAGU::prepare($sql, $personId));
        $result = SDatabase::query($sql, array($personId,$personId, $personId));

        return $result;
    }
    
    public function checkInformarPendenciaNoPortal($personId)
    {        
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $sql = "SELECT DISTINCT t.name
                FROM basdocumenttype t
                 WHERE t.needDeliver IS TRUE
                   AND ( 
			NOT EXISTS
			(
                            SELECT 1 
                            FROM basdocument d            
                            WHERE d.personid = ? 
                            AND d.documenttypeid = t.documenttypeid
			)
			OR EXISTS(SELECT 1 
                        FROM basdocument 
                        WHERE personid = ? 
                        AND documenttypeid = t.documenttypeid 
                        AND isDelivered IS FALSE)
		       )
                   AND 
                   ( 
                     EXISTS
                     (
			SELECT *
			FROM basperson p
			LEFT JOIN basCity c
			ON ( p.cityId = c.cityId)		      
			WHERE p.personId = ?
		        AND CASE WHEN t.nacionalidade = 'B' THEN c.countryid = 'BRA' 
			WHEN t.nacionalidade = 'F' THEN c.fronteirico IS TRUE
                        WHEN t.nacionalidade = 'E' THEN c.countryid != 'BRA'  AND c.fronteirico IS FALSE
                        WHEN t.nacionalidade = 'T' THEN TRUE 
                        ELSE FALSE END
                     )
                   )  
                    AND t.informarpendencianoportal IS TRUE";

        $result = $this->getDatabase()->query(SAGU::prepare($sql, array($personId,$personId,$personId)));

        return $result;
    }
    
        public function checkLimiteDeDiasPendenciaNoPortal()
    {        
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $sql = 'SELECT MIN(t.limitedediasparabloquear)
                  FROM basDocument d
            INNER JOIN basdocumenttype t
                 USING (documentTypeId)
               WHERE T.needDeliver IS TRUE';

        $result = $this->getDatabase()->query(SAGU::prepare($sql));

        return $result[0][0];
    }
    
    /**
     * Verify if the birth date is  that the document max age of the document
     *
     * @param $personId (int): Id of the person
     * @param $documentTypeId (int): Id of the document type
     *
     * @return (array): Return true if the birth date is <= and false otherwise
     *
    **/
    public function checkMaxAge($personId, $documentTypeId, $birthDate=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $sql = 'SELECT maxAge
                  FROM basDocumentType
                 WHERE documentTypeId = ?';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $documentTypeId));
        $years  = $result[0][0];
        
        //Se o documento nao tem idade maxima nao precisa realizar toda essa checagem
        if ( strlen($years) > 0)
        {
            if ((strlen($personId) > 0) && (strlen($birthDate) <= 0))
            {
                $sql = 'SELECT CASE WHEN (A.dateBirth + \'' . $years . ' years\'::INTERVAL) >= date(now())
                                    THEN true
                                    ELSE false
                                     END
                     FROM ONLY basPhysicalPerson A
                         WHERE A.personId = ?';

                $result = $this->getDatabase()->query(SAGU::prepare($sql, $personId));
            }
            elseif (strlen($birthDate) > 0)
            {
                $sql = 'SELECT CASE WHEN (TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') + \'' . $years . ' years\'::INTERVAL) >= date(now())
                                    THEN true
                                    ELSE false
                                     END';

                $result = $this->getDatabase()->query(SAGU::prepare($sql, $birthDate));
            }
            else
            {
                $return = false;
            }

            if ( $result[0][0] == DB_TRUE )
            {
                $return = true;
            }
            else
            {
                $return = false;
            }
        }
        else
        {
            $return = true;
        }
        
        
        return $return;
    }

    /**
     * Verify if the birth date is > that the document min age of the document
     *
     * @param $personId (int): Id of the person
     * @param $documentTypeId (int): Id of the document type
     *
     * @return (array): Return true if the birth date is >= and false otherwise
     *
    **/
    public function checkMinAge($personId, $documentTypeId, $birthDate=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $sql = 'SELECT minAge
                  FROM basDocumentType
                 WHERE documentTypeId = ?';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $documentTypeId));
        $years  = strlen($result[0][0]) == 0 ? '0' : $result[0][0];

        if ((strlen($personId) > 0) && (strlen($birthDate) <= 0))
        {
            $sql = 'SELECT CASE WHEN (date(now()) - \'' . $years . ' years\'::INTERVAL) >= A.dateBirth
                                THEN true
                                ELSE false
                                 END
                 FROM ONLY basPhysicalPerson A
                     WHERE A.personId = ?';

            $result = $this->getDatabase()->query(SAGU::prepare($sql, $personId));
        }
        elseif (strlen($birthDate) > 0)
        {
            $sql = 'SELECT CASE WHEN (date(now()) - \'' . $years . ' years\'::INTERVAL) >= TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                                THEN true
                                ELSE false
                                 END';

            $result = $this->getDatabase()->query(SAGU::prepare($sql, $birthDate));
        }
        else
        {
            return false;
        }

        if ( $result[0][0] == DB_TRUE )
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    public function getMissingDocument($data)
    {
        // obter lista de documentos nao entregues pela pessoa
        $sql = 'SELECT documentTypeId,
                       name,
                       minAge,
                       maxAge,
                       needDeliver,
                       isBlockEnroll
                  FROM basDocumentType
                 WHERE documentTypeId NOT IN (SELECT documentTypeId
                                                FROM basDocument
                                               WHERE personId = ?
                                                 AND (isDelivered = \'' . DB_TRUE . '\'
                                                      OR isExcused = \'' . DB_TRUE . '\'))
                   AND (sex = ? OR sex IS NULL)
                   AND (minAge <= EXTRACT(YEAR FROM AGE(TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'))) OR minAge IS NULL)
                   AND (maxAge >= EXTRACT(YEAR FROM AGE(TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'))) OR maxAge IS NULL)
                   AND personType = ?';

        $args = array( $data->personId,
                       $data->sex,
                       $data->dateBirth,
                       $data->dateBirth,
                       $data->personType );

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return $result;
    }
    
    /*
     * Recebe um cpf e o retorna formatado
     */
    public function formataCpf( $cpf )
    {
        $sql = " SELECT MASKCPF(UNMASKCPF( ? )) ";
        
        $args[] = $cpf;
        
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        
        return $result[0][0];
    }

    /**
     * Recebe CPF e retorna sem máscara.
     * 
     * @param string $cpf
     * @return string
     */
    public function desmascararCPF($cpf)
    {
        $sql = "SELECT * FROM unmaskCPF(?)";
        
        $args[] = $cpf;
        
        $return = SDatabase::query($sql, $args);
        
        return $return[0][0];
    }
    
    /*
     * Obtem registro de cpf
     */
    public function getCPFDocument($cpf)
    {
        $documentTypeCPF = SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF');
        
        $sql = " SELECT personid, 
                        documenttypeid, 
                        content, 
                        isdelivered, 
                        cityid,
                        organ,
                        dateexpedition,
                        obs,
                        isexcused
                   FROM basdocument 
                  WHERE documenttypeid = ? 
                    AND trim(content) = ? ";
        
        $args = array();
        $args[] = $documentTypeCPF;
        $args[] = $cpf;
        
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        
        return $result[0];
    }
}
?>
