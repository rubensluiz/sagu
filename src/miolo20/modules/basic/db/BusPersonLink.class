<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for basPersonLink table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 12/09/2005
 *
 **/

/**
 * Class to manipulate the basPersonLink table
 **/
class BusinessBasicBusPersonLink extends sBusiness
{   
    /**
     * Return a specific record from the database
     *
     * @param $personId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getPersonLink($personId, $linkId)
    {
        $sql = 'SELECT A.personId,
                       C.name,
                       A.linkId,
                       B.description,
                       TO_CHAR(A.dateValidate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM basPersonLink A
             LEFT JOIN basLink B
                 USING (linkId)
        LEFT JOIN ONLY basPhysicalPerson C
                 USING (personId)
                 WHERE A.personId = ?
                   AND A.linkId   = ?';

        $db     = $this->getDatabase();

        $args = array($personId, $linkId);
        $result = $db->query(SAGU::prepare($sql, $args));
        

        $personLink = new basPersonLink();
        list ( $personLink->personId,
               $personLink->personName,
               $personLink->linkId,
               $personLink->linkDescription,
               $personLink->dateValidate,
               $personLink->userName,
               $personLink->dateTime,
               $personLink->ipAddress ) = $result[0];

        return $personLink;
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchPersonLink($filters)
    {
        $sql = 'SELECT A.personId,
                       C.name,
                       A.linkId,
                       B.description,
                       TO_CHAR(A.dateValidate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM basPersonLink A
             LEFT JOIN basLink B
                 USING (linkId)
       INNER JOIN ONLY basPhysicalPerson C
                 USING (personId) ';


        //Filtro utilizado inicialmente em FrmGenerateMultipleLink
        $filterSQL = ' ? IN (
            SELECT %s
              FROM unit_acdContract _A
        INNER JOIN unit_acdlearningperiod _B
                ON (_A.courseId = _B.courseId)
               AND (_A.courseVersion = _B.courseVersion)
               AND (_A.turnId = _B.turnId)
               AND (_A.unitId = _B.unitId)
             WHERE _A.personId = C.personId)';

        if ( strlen($filters->periodId) > 0 )
        {
            $where .= ' AND ' . sprintf($filterSQL, '_B.periodId');
            $args[] = $filters->periodId;
        }

        if ( strlen($filters->courseId) > 0 )
        {
            $where .= ' AND ' . sprintf($filterSQL, '_B.courseId');
            $args[] = $filters->courseId;
        }

        if ( strlen($filters->learningPeriodId) > 0 )
        {
            $where .= ' AND ' . sprintf($filterSQL, '_B.learningPeriodId');
            $args[] = $filters->learningPeriodId;
        }

        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND personId = ? ';
            $args[] = $filters->personId;
        }

        if ( strlen($filters->personName) > 0 )
        {
            $where .= ' AND UNACCENT(C.name) ILIKE UNACCENT(?) ';
            $args[] = $filters->personName . '%';
        }

        if ( strlen($filters->linkId) > 0 )
        {
            $where .= ' AND A.linkId= ? ';
            $args[] = $filters->linkId;
        }

        if ( strlen($filters->linkDescription) > 0 )
        {
            $where .= ' AND UNACCENT(B.description) ILIKE UNACCENT(?) ';
            $args[] = $filters->linkDescription . '%';
        }
        
        //Somente alunos ativos
        if ( $filters->onlyActivePupils == DB_TRUE )
        {
            //$where .= ' AND A.linkid = ? AND TO_CHAR(A.datevalidate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') <= TO_CHAR(NOW(), \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $where .= 'AND (CASE WHEN A.linkId = ? THEN TO_CHAR(A.datevalidate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') <= TO_CHAR(NOW(), \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') ELSE TRUE END)';
            $args[] = SAGU::getParameter('BASIC', 'PERSON_LINK_STUDENT');            
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY C.name, B.description';
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertPersonLink($data)
    {
        $sql = 'INSERT INTO basPersonLink
                            (
                             personId,
                             linkId,
                             dateValidate)
                     VALUES (?,?,TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'))';

        $args = array( 
                       $data->personId,
                       $data->linkId,
                       $data->dateValidate);

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updatePersonLink($data)
    {
        $sql = 'UPDATE basPersonLink
                   SET 
                       dateValidate = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                 WHERE personId     = ?
                   AND linkId       = ?';

        $args = array( 
                       $data->dateValidate,
                       $data->personId,
                       $data->linkId );

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $personId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deletePersonLink($Id)
    {
        $sql = 'DELETE FROM basPersonLink
                      WHERE personId = ?
                        AND linkId   = ?';

        $db = $this->getDatabase();

        $args = $Id;
        $result = $db->execute(SAGU::prepare($sql, $args));
        

        return $result;
    }

    /**
     * Remove registro por pessoa
     *
     * @param int $personId
     * @return boolean 
     */
    public function deleteByPerson($personId)
    {
        $sql = 'DELETE FROM basPersonLink WHERE personId = ?';

        $db = $this->getDatabase();

        $args = array($personId);
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }
}

?>
