<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for basSectorBoss table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 02/09/2005
 *
 **/

/**
 * Class to manipulate the basSectorBoss table
 **/
class BusinessBasicBusSectorBoss extends sBusiness
{
    /**
     * Return a specific record from the database
     *
     * @param $bossId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getSectorBoss($sectorId, $bossId)
    {
        $sql = 'SELECT A.sectorId,
                       B.description,
                       A.bossId,
                       C.name,
                       A.level,
                       ( lpad(((extract(day from A.expirationLevel)*24) +
                         extract(hour from A.expirationLevel))::text,2,\'0\') || \':\' ||
                         lpad(extract(minutes from A.expirationLevel)::text,2,\'0\')  || \':\' ||
                         lpad(extract(seconds from A.expirationLevel)::text,2,\'0\')
                       ),
                       A.isSendEmail,
                       A.email,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM basSectorBoss A
             LEFT JOIN ONLY basSector B
                 USING (sectorId)
        LEFT JOIN ONLY basPhysicalPerson C
                    ON (A.bossId  = C.personId)
                 WHERE A.sectorId = ?
                   AND A.bossId   = ?';

        $args = array( $sectorId,
                       $bossId );

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));
        

        $sectorBoss = new basSectorBoss();
        list ( $sectorBoss->sectorId,
               $sectorBoss->sectorDescription,
               $sectorBoss->bossId,
               $sectorBoss->sectorBossName,
               $sectorBoss->level,
               $sectorBoss->expirationLevel,
               $sectorBoss->isSendEmail,
               $sectorBoss->email,
               $sectorBoss->userName,
               $sectorBoss->dateTime,
               $sectorBoss->ipAddress ) = $result[0];

        return $sectorBoss; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchSectorBoss($filters)
    {
        $sql = 'SELECT A.sectorId,
                       B.description,
                       A.bossId,
                       C.name,
                       A.level,
                       ( lpad(((extract(day from A.expirationLevel)*24) +
                         extract(hour from A.expirationLevel))::text,2,\'0\') || \':\' ||
                         lpad(extract(minutes from A.expirationLevel)::text,2,\'0\')  || \':\' ||
                         lpad(extract(seconds from A.expirationLevel)::text,2,\'0\')
                       ),
                       A.isSendEmail,
                       A.email
                  FROM basSectorBoss A
            INNER JOIN ONLY basSector B
                 USING (sectorId)
       INNER JOIN ONLY basPhysicalPerson C
                    ON (A.bossId = C.personId) ';

        if ( strlen($filters->bossId) > 0 )
        {
            $where .= ' AND A.bossId = ? ';
            $args[] = $filters->bossId;
        }

        if ( strlen($filters->bossName) > 0 )
        {
            $where .= ' AND UNACCENT(C.name) ILIKE UNACCENT(?) ';
            $args[] = $filters->bossName . '%';
        }

        if ( strlen($filters->sectorId) > 0 )
        {
            $where .= ' AND A.sectorId = ? ';
            $args[] = $filters->sectorId;
        }

        if ( strlen($filters->sectorDescription) > 0 )
        {
            $where .= ' AND UNACCENT(B.description) ILIKE UNACCENT(?) ';
            $args[] = $filters->sectorDescription . '%';
        }

        if ( strlen($filters->level) > 0 )
        {
            $where .= ' AND A.level = ? ';
            $args[] = $filters->level;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY B.description, A.level';
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            
        }
        
        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertSectorBoss($data)
    {
        $sql = 'INSERT INTO basSectorBoss
                            (sectorId,
                             bossId,
                             level,
                             expirationLevel,
                             isSendEmail,
                             email)
                     VALUES (?,?,?,?,?,?)';

        $ret = explode(':',$data->expirationLevel);
        $data->expirationLevel = ( $ret[0] ? $ret[0] : '00' ) . ':' .
                                 ( $ret[1] ? $ret[1] : '00' ) . ':' .
                                 ( $ret[2] ? $ret[2] : '00' );

        $args = array( $data->sectorId,
                       $data->bossId,
                       $data->level,
                       $data->expirationLevel,
                       $data->isSendEmail,
                       $data->email );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateSectorBoss($data)
    {
        $sql = 'UPDATE basSectorBoss
                   SET level           = ?,
                       expirationLevel = ?,
                       isSendEmail     = ?,
                       email           = ?
                 WHERE sectorId        = ?
                   AND bossId          = ?';

        $ret = explode(':',$data->expirationLevel);
        $data->expirationLevel = ( $ret[0] ? $ret[0] : '00' ) . ':' .
                                 ( $ret[1] ? $ret[1] : '00' ) . ':' .
                                 ( $ret[2] ? $ret[2] : '00' );

        $args = array( $data->level,
                       $data->expirationLevel,
                       $data->isSendEmail,
                       $data->email,
                       $data->sectorId,
                       $data->bossId );

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $bossId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteSectorBoss($sectorId, $bossId)
    {

        $sql = 'DELETE FROM basSectorBoss
                      WHERE sectorId = ?
                        AND bossId   = ?';

        $args = array( $sectorId,
                       $bossId );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        

        return $result;
    }

    /**
     * Return a list of sectorBoss by sector
     *
     * @param $sectorId (int): Primary key for sector
     *
     * @return (array): If sector exists return a array with bossId, name and email by this sector
     *
     */
    function getSectorBossBySector($sectorId)
    {
        $sql = '   SELECT bossid,
                          (SELECT name
                             FROM ONLY basPerson
                            WHERE bossid=personid)||\' (\'||email||\')\'
                     FROM bassectorboss
                    WHERE sectorid=?
                 ORDER BY level ';

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $sectorId));
        
        return $result;
    }
}
?>
