<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for basUnit table
 *
 * @author William Prigol Lopes [william] [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 07/08/2005
 *
 **/

/**
 * Class to manipulate the basUnit table
 *
**/
class BusinessBasicBusUnit extends sBusiness
{
    private $userName;
    private $dateTime;
    private $ipAddress;
    private $unitId;
    private $cityId;
    private $description;
    private $accountingCode;
    private $location;
    private $locationId;
    private $personId;
    

   /**
    * 
    */
   public function setData($data = null)
    {
        $this->userName       = $data[0][0];
        $this->dateTime       = $data[0][1];
        $this->ipAddress      = $data[0][2];
        $this->unitId         = $data[0][3];
        $this->locationId     = $data[0][4];
        $this->description    = $data[0][5];
        $this->accountingCode = $data[0][6];
        $this->personId       = $data[0][7];
    }

   /**
    * Generate a array with all units basic information
    *
    * @param: No parameters
    *
    * @return (array): Return a array with all units registered on database
    *
   **/
   public function listUnit()
    {
        $db  = $this->getDatabase();
        $sql = '   SELECT unitId,
                          description as unitDescription
                     FROM basUnit   
                 ORDER BY description ';
        $ret = $db->query($sql);
        
        return $ret;
    }
    
    /*
     * 
     * 
     * Lista a unidade recebendo como parâmetro id da unidade.
     * 
     * 
     */
    public function listUnitSimple($unitId)
    {
        $db  = $this->getDatabase();
        
        $sql = '   SELECT unitId,
                          description as unitDescription
                     FROM basUnit 
                    WHERE unitId = ?';
        
        $args = array($unitId);
        
        $ret = $db->query(SAGU::prepare($sql, $args));
        
        return $ret;
    }
    
    /**
     * @return array
     */
    public function listUnitAssoc()
    {
        return SAGU::convertListToAssociative( $this->listUnit() );
    }

   /**
    * @return basUnit
    *
    **/
   public function getUnit($unitId)
    {
        $db = $this->getDatabase();

        $sql = ' SELECT A.unitId,
                        A.description,
                        A.accountingCode,
                        C.cityId,
                        B.name,
                        C.name AS location,
                        A.locationId,
                        A.userName,
                        TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                        A.ipAddress,
                        A.personId
                   FROM basUnit A
              LEFT JOIN basLocation C
                     ON C.locationId = A.locationId
              LEFT JOIN basCity B
                     ON B.cityId = C.cityId
                  WHERE A.unitId = ? ';
        $args = array($unitId);
        
        $ret  = $db->query(SAGU::prepare($sql, $args));

        $return = new basUnit();
        list ( $return->unitId,
               $return->description,
               $return->accountingCode,
               $return->cityId,
               $return->cityName,
               $return->location,
               $return->locationId,
               $return->userName,
               $return->dateTime,
               $return->ipAddress,
               $return->personId ) = $ret[0];

        return $return;
    }

   /**
    * Search a unit by predefined filters
    *
    * @param $range (object): MIOLO PageNavigator Objec
    * @param $filter (object): Default object containing the filter values 
    *
    * @return (array): Return a array with units registered on database with filters
    *
   **/
  public function searchUnit($filters)
   {
        $sql = 'SELECT unitId,
                       description
                  FROM basUnit ';

        if (strlen($filters->description)>0 )
        {
            $where  = ' AND UNACCENT(description) ilike UNACCENT(?) ';
            $args[] = $filters->description.'%';
        }
        if (strlen($filters->unitId)>0 )
        {
            $where .= ' AND unitId = ? ';
            $args[] = $filters->unitId;
        }
        if (strlen($filters->personId)>0 )
        {
            $where .= ' AND personId = ? ';
            $args[] = $filters->personId;
        }
        if (strlen($filters->locationId)>0 )
        {
            $where .= ' AND locationId = ? ';
            $args[] = $filters->locationId;
        }
        if ( $filters->personIdNotNull === DB_TRUE )
        {
            $where .= ' AND personId IS NOT NULL ';
        }

        if (strlen($where)>0)
        {
            $sql .= ' WHERE '.substr($where, 4, strlen($where)).'   ORDER BY description ';

            $db   = $this->getDatabase();
            $data = $db->query(SAGU::prepare($sql, $args));
            

            return $data;
        }
        return null;
   }

   /**
    * Generate a array with all units basic information
    *
    * @param $data (object): Unit object containing data to insert a record on database
    *
    * @return (array): Return a array with all units registered on database
    *
   **/
   public function insertUnit($data)
   {
       $db = $this->getDatabase();

       $result = SDatabase::query("SELECT nextval('seq_unitid'::regclass)");
       $unitId = $result[0][0];
       
       $sql = ' INSERT INTO basUnit
                            (unitId,
                             description,
                             accountingCode,
                             locationId,
                             personId)
                     VALUES (?, ?, ?, ?, ?) ';

        $args = array($unitId,
                      $data->description,
                      SAGU::NVL($data->accountingCode, '00'),
                      $data->locationId,
                      $data->personId);

       $ret=$db->execute(SAGU::prepare($sql, $args)); 

       return $ret ? $unitId : false;
    }
   
   /**
    * update a specific unit
    *
    * @param $data (object): basUnit object
    *
    * @return (boolean): True if succed otherwise fails
    *
   **/
   public function updateUnit($data)
    {
        $sql = ' UPDATE basUnit
                    SET description    = ?,
                        accountingCode = ?,
                        locationId     = ?,
                        personId       = ?
                  WHERE unitId         = ? ';
        $args = array($data->description,
                      $data->accountingCode,                      
                      $data->locationId,
                      $data->personId,
                      $data->unitId );
        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $ret = $db->execute($sqls[$i]);
        }
        
        return $ret;
    }

   /**
    * delete a specific unit
    *
    * @param $unitId (integer): Primary key for unit
    *
    * @return (boolean): True if succed otherwise fails
    *
   **/
   public function deleteUnit($unitId)
    {
        $db = $this->getDatabase();

        $sql = ' DELETE FROM basUnit
                       WHERE unitId = ? ';
        
        $ret = $db->execute(SAGU::prepare($sql, $unitId));
        
        return $ret;
    }
    
    /**
     * Obtém o id da unidade pela descrição
     * 
     * @param type $description
     * @return type integer
     */
    public function getUnitByDescription($description)
    {
        $sql = ' SELECT unitId
                   FROM basUnit
                  WHERE description ilike UPPER(?)';
        
        $result = SDatabase::query(SAGU::prepare($sql, $description));
    
        return $result[0][0];
    }
}
?>
