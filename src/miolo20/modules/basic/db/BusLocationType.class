<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for basLocation table
 *
 * @author Samuel Koch [samuel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 24/09/2008
 *
 **/

/**
 * Class to manipulate the basLocation table
 **/
class BusinessBasicBusLocationType extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listLocationType($returnAssociative = false)
    {
        $db  = $this->getDatabase();
        $sql = 'SELECT locationTypeId,
                       name
                  FROM basLocationType
              ORDER BY name';

        $ret = $db->query($sql);
        
        if ( $returnAssociative && $ret )
        {
            $ret = SAGU::convertListToAssociative($ret);
        }

        return $ret;
    }

    /**
     * Return a specific record from the database
     *
     * @param $locationType (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getLocationType($locationType)
    {
        $location  = new basLocationType();
        
        if ( strlen($locationType) > 0 )
        {
            $sql = 'SELECT locationTypeId,
                           name,
                           userName,
                           TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                           ipAddress
                      FROM basLocationType
                     WHERE locationTypeId = ?';

            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $locationType));


            list ( $location->locationTypeId,
                   $location->name,
                   $location->userName,
                   $location->dateTime,
                   $location->ipAddress ) = $result[0];
        }

        return $location;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchLocationType($filters)
    {
        $sql = 'SELECT locationTypeId,
                       name,
                       userName,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipAddress
                  FROM basLocationType ' ;

        if ( strlen($filters->locationTypeId) > 0 )
        {
            $where .= ' AND locationTypeId = ? ';
            $args[] = $filters->locationTypeId;
        }
        if ( strlen($filters->name) > 0 )
        {
            $where .= ' AND name ILIKE ? ';
            $args[] = $filters->name . '%';
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql   .= ' WHERE ' . substr($where, 4) . ' ORDER BY name ';
            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertLocationType($data)
    {
        $sql = 'INSERT INTO basLocationType
                            ( name )
                     VALUES ( ? ) ';

        $args   = array( $data->name );
        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateLocationType($data)
    {
        $sql = 'UPDATE basLocationType
                   SET name           = ?
                 WHERE locationTypeId = ?';

        $args = array( $data->name,
                       $data->locationTypeId );
        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $locationType (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function deleteLocationType($locationTypeId)
    {
        $sql = 'DELETE FROM basLocationType
                      WHERE locationTypeId = ?';

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $locationTypeId));

        return $result;
    }
    
    public function getLocationTypeIdByName($name)
    {
        $sql = 'SELECT locationtypeid FROM baslocationtype WHERE name = ?';

        $result = SDatabase::query($sql, array($name));

        return strlen($result[0][0]) > 0 ? $result[0][0] : 0;
    }
}
?>
