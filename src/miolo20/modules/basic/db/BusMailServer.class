<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Moises Heberle [moises@solis.coop.br]
 * 
 * @since
 * Class created on 29/10/2010
 *
 **/

/**
 * Class to manipulate the basBasicLocation table
 *
**/
class BusinessBasicBusMailServer extends sBusiness
{
   /**
    * Insert a specific sector
    *
    * @param $data (object): sector object
    *
    * @return (boolean): True if succed otherwise false
    *
   **/
   public function insertMailServer($data)
    {
        $sql = ' INSERT INTO basMailServer
                            (host,
                             port,
                             smtpUser,
                             smtpPassword,
                             enableAuth,
                             secureAuth)
                      VALUES (?, ?, ?, ?, ?, ?)';
        $args = array(
            $data->host,
            $data->port,
            $data->smtpUser,
            $data->smtpPassword,
            $data->enableAuth,
            $data->secureAuth
        );

        $db  = $this->getDatabase();
        $ret = $db->execute(SAGU::prepare($sql, $args, false) );

        return $ret;
    }


   /**
    * Update a specific sector
    *
    * @param $data (object): Sector object containing data to update
    *
    * @return (boolean): True if succed otherwise false
    *
   **/
    public function updateMailServer($data)
    {
        if (!$this->getMailServer()->host)
        {
            return $this->insertMailServer($data);
        }
        else
        {
            $sql = 'UPDATE basMailServer SET
                    host = ?,
                    port = ?,
                    smtpUser = ?,
                    smtpPassword = ?,
                    enableAuth = ?,
                    secureAuth = ?
              WHERE 1=1';

            $args = array(
                $data->host,
                $data->port,
                $data->smtpUser,
                $data->smtpPassword,
                $data->enableAuth,
                $data->secureAuth
            );

            $db = $this->getDatabase();
            $sqls = SAGU::prepare($sql, $args, false);

            for ( $i=0; $i<count($sqls); $i++ )
            {
                $ret = $db->execute($sqls[$i]);
            }

            return $ret;
        }
    }


   /**
    *
    * get a specific sector
    *
    * @param $sectorId (int): Primary key for sector
    *
    * @return (object): sector object referred by primary key
    *
   **/
   public function getMailServer()
    {
        $sql = ' SELECT host,
                    port,
                    smtpUser,
                    smtpPassword,
                    enableAuth,
                    secureAuth
               FROM basMailServer
              LIMIT 1';
        
        $db = $this->getDatabase();
        $ret = $db->query(SAGU::prepare($sql, null, false));
        
        $ret=$ret[0];
        
        $return = new BasMailServer();
        list(
            $return->host,
            $return->port,
            $return->smtpUser,
            $return->smtpPassword,
            $return->enableAuth,
            $return->secureAuth,
        ) = $ret;

        return $return;
    }
}
?>
