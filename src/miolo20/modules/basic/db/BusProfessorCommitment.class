<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * @author Moises Heberle [moiseh@gmail.com]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Moises Heberle [moiseh@gmail.com]
 * 
 * @since
 * Class created on 09/02/2011
 *
 **/

class BusinessBasicBusProfessorCommitment extends sBusiness
{
    public function searchProfessorCommitment($filters, $toObject = false)
    {
        $cols = array(
            'personId',
            'beginDate',
            'endDate',
            'workLoad',
            'teachWorkLoad',
            'timeSheet',
            'schedule',
            'tasks',
            'unitId',
            'sectorId',
            'sectorIdDescription',
        );

        $sql = 'SELECT PC.personId,
                   TO_CHAR(PC.beginDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                   TO_CHAR(PC.endDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                   PC.workLoad,
                   PC.teachWorkLoad,
                   PC.timeSheet,
                   PC.schedule,
                   PC.tasks,
                   PC.unitId,
                   PC.sectorId,
                   S.description AS sectorIdDescription
              FROM basProfessorCommitment PC
         LEFT JOIN basSector S
                ON S.sectorId = PC.sectorId';

        $where = array();
        if ( strlen($filters->personId) > 0 )
        {
            $where[] = 'PC.personId = ?';
            $args[] = $filters->personId;
        }

        $result = null;
        if ( count($where) > 0 )
        {
            $sql .= ' WHERE ' . implode(' AND ', $where) . ' ORDER BY PC.beginDate';
            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        }

        return (array) $toObject ? SAGU::resultToObject($result, $cols) : $result;
    }

    
    public function insertProfessorCommitment($data)
    {
        $sql = 'INSERT INTO basProfessorCommitment (
                            personId,
                            beginDate,
                            endDate,
                            workLoad,
                            teachWorkLoad,
                            timeSheet,
                            schedule,
                            tasks,
                            unitId,
                            sectorId )
                     VALUES ( ?,
                              TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                              TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?)';

        $args = array( $data->personId,
                       $data->beginDate,
                       $data->endDate,
                       $data->workLoad,
                       $data->teachWorkLoad,
                       $data->timeSheet,
                       $data->schedule,
                       $data->tasks,
                       $data->unitId,
                       $data->sectorId);

        return $this->getDatabase()->execute(SAGU::prepare($sql, $args));
    }


    public function deleteProfessorCommitment($personId, $beginDate)
    {
        $sql = 'DELETE FROM basProfessorCommitment
                      WHERE personId = ?
                        AND beginDate = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';

        $pk = array( $personId,
                     $beginDate );

        return $this->getDatabase()->execute(SAGU::prepare($sql, $pk));
    }
    
    /**
     * Retorna a data inicial mais antiga de suas cargas horárias.
     * 
     * @param type $professorId
     * @return type
     */
    public function getOldProfessorCommitmentDate($professorId)
    {
        $sql = "SELECT TO_CHAR(beginDate, getParameter('BASIC', 'MASK_DATE'))
                  FROM basProfessorCommitment
                 WHERE personid = ?
              ORDER BY beginDate
             ASC LIMIT 1";
        
        return $this->getDatabase()->query(SAGU::prepare($sql, $professorId));
    }
}
?>
