<?php
/**
  * <--- Copyright 2005-2013 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for basPhysicalPerson table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 25/08/2005
 *
 * */
$MIOLO = MIOLO::getInstance();
$MIOLO->uses('db/BusPerson.class', 'basic');
$MIOLO->uses('db/BusUser.class', 'admin');
$MIOLO->uses('classes/user.class', 'admin');
$MIOLO->uses('classes/sform.class', 'basic');

/**
 * Class to manipulate the basPerson table
 * */
class BusinessBasicBusPhysicalPerson extends BusinessBasicBusPerson
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     * */
    public function listPhysicalPerson()
    {
        $sql = 'SELECT personId,
                       name
             FROM ONLY basPhysicalPerson
              ORDER BY name';

        $ret = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return $ret;
    }

    /**
     * Return a specific record from the database
     *
     * @param $personId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     * */
    public function getPhysicalPerson($personId)
    {
        //get the basPerson data
        $person = $this->getPerson($personId);

        //get the basPhysicalPerson data
        $sql = 'SELECT A.sex,
                       A.maritalStatusId,
                       A.residentialphone,
                       A.workphone,
                       A.cellphone,
                       getmessagephone(A.personId),
                       A.messageContact,
                       TO_CHAR(A.dateBirth,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.cityIdBirth,
                       A.countryIdBirth,
                       getFatherId(A.personId) AS fatherId,
                       getMotherId(A.personId) AS motherId,
                       A.responsableLegalId,
                       A.carPlate,
                       A.specialNecessityId,
                       A.specialNecessityDescription,
                       A.cityIdWork,
                       A.zipCodeWork,
                       A.locationWork,
                       A.locationTypeIdWork,
                       A.complementWork,
                       A.neighborhoodWork,
                       A.ethnicOriginId,
                       TO_CHAR(A.dateDeath,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.number,
                       C.stateId,
                       C.name as stateName,
                       D.countryId,
                       D.name as countryName,
                       A.personTitleId,
                       E.description AS personTitleDescription,
                       A.motherName,
                       A.fatherName,
                       A.workEmployerName,
                       A.workFunction,
                       TO_CHAR(A.workStartDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(A.workEndDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.workAtHome,
                       A.ethnicorigin,
                       ( SELECT content from basDocument where personId = A.personId AND documentTypeId = GETPARAMETER(\'BASIC\',\'DEFAULT_DOCUMENT_TYPE_ID_CPF\')::int ) AS personCpf,
                       ( SELECT content from basDocument where personId = A.personId AND documentTypeId = GETPARAMETER(\'BASIC\',\'DEFAULT_DOCUMENT_TYPE_ID_RG\')::int ) AS personRg,
                       ( SELECT organ from basDocument where personId = A.personId AND documentTypeId = GETPARAMETER(\'BASIC\',\'DEFAULT_DOCUMENT_TYPE_ID_RG\')::int ) AS rgOrgan,
                       A.pis,
                       A.mioloUserName
             FROM ONLY basPhysicalPerson A
             LEFT JOIN basCity B
                    ON ( A.cityId = B.cityId )
             LEFT JOIN basState C
                    ON (     B.stateId   = C.stateId
                         AND B.countryId = C.countryId )
             LEFT JOIN basCountry D
                    ON ( C.countryId = D.countryId )
             LEFT JOIN basPersonTitle E
                    ON ( E.personTitleId = A.personTitleId )
                 WHERE A.personId = ?';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, array($personId)));

        if ( count($result) == 0 )
        {
            return null;
        }

        $physicalPerson = new basPhysicalPerson();
        list ( $physicalPerson->sex,
                $physicalPerson->maritalStatusId,
                $physicalPerson->residentialPhone,
                $physicalPerson->workPhone,
                $physicalPerson->cellPhone,
                $physicalPerson->messagePhone,
                $physicalPerson->messageContact,
                $physicalPerson->dateBirth,
                $physicalPerson->cityIdBirth,
                $physicalPerson->countryIdBirth,
                $physicalPerson->fatherId,
                $physicalPerson->motherId,
                $physicalPerson->responsableLegalId,
                $physicalPerson->carPlate,
                $physicalPerson->specialNecessityId,
                $physicalPerson->specialNecessityDescription,
                $physicalPerson->cityIdWork,
                $physicalPerson->zipCodeWork,
                $physicalPerson->locationWork,
                $physicalPerson->locationTypeIdWork,
                $physicalPerson->complementWork,
                $physicalPerson->neighborhoodWork,
                $physicalPerson->ethnicOriginId,
                $physicalPerson->dateDeath,
                $physicalPerson->number,
                $physicalPerson->stateId,
                $physicalPerson->stateName,
                $physicalPerson->countryId,
                $physicalPerson->countryName,
                $physicalPerson->personTitleId,
                $physicalPerson->personTitleDescription,
                $physicalPerson->motherName,
                $physicalPerson->fatherName,
                $physicalPerson->workEmployerName,
                $physicalPerson->workFunction,
                $physicalPerson->workStartDate,
                $physicalPerson->workEndDate,
                $physicalPerson->workAtHome,
                $physicalPerson->ethnicorigin,
                $physicalPerson->personCpf,
                $physicalPerson->personRg,
                $physicalPerson->rgOrgan,
                $physicalPerson->pis,
                $physicalPerson->mioloUserName) = $result[0];

        //put into physicalPerson attributes all person attributes
        $array = get_object_vars($person);
        foreach ( $array as $key => $row )
        {
            $physicalPerson->$key = $person->$key;
        }

        return $physicalPerson;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     * */
    public function searchPhysicalPerson($filters)
    {
        $sql = 'SELECT A.personId,
                       A.personDv,
                       A.personMask,
                       A.name,
                       A.shortName,
                       A.cityId,
                       B.name,
                       A.zipCode,
                       C.name || A.location AS location,
                       A.complement,
                       A.neighborhood,
                       A.email,
                       A.emailAlternative,
                       A.url,
                       TO_CHAR(A.dateIn,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.password,
                       A.isAllowPersonalData,
                       A.userName,
                       A.sex,
                       TO_CHAR(A.dateBirth,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.workphone,
                       A.cityidbirth,
                       A.workfunction,
                       D.content
             FROM ONLY basPhysicalPerson A
             LEFT JOIN basCity B
                 USING (cityId)
             LEFT JOIN basLocationType C
                    ON (A.locationTypeId = C.locationTypeId)
             LEFT JOIN basDocument D
		    ON (A.personId = D.personId 
                        AND D.documenttypeid = getParameter(\'BASIC\',\'DEFAULT_DOCUMENT_TYPE_ID_CPF\')::INTEGER )';

        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND A.personId = ? ';
            $args[] = $filters->personId;
        }

        if ( strlen($filters->sex) > 0 )
        {
            $where .= ' AND A.sex = ? ';
            $args[] = $filters->sex;
        }

        if ( strlen($filters->email) > 0 )
        {
            $where .= ' AND A.email = lower(?) ';
            $args[] = $filters->email;
        }

        if ( strlen($filters->dateBirth) > 0 )
        {
            $where .= ' AND A.dateBirth = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') ';
            $args[] = $filters->dateBirth;
        }

        if ( strlen($filters->name) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(UPPER(?)) ';
            $args[] = $filters->name . '%';
        }
        
        if ( strlen($filters->mioloUserName) > 0 )
        {
            $where .= ' AND lower(A.mioloUserName) = lower(?) ';
            $args[] = $filters->mioloUserName;
        }
        
        if ( strlen($filters->identifier) > 0 )
        {
            $where .= ' AND A.identifier = ? ';
            $args[] = $filters->identifier;
        }
        if ( strlen($filters->content) > 0 )
        {
            $where .= ' AND D.content = ? ';
            $args[] = $filters->content;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY A.name';
            
            $result = $this->getDatabase()->query(SAGU::Prepare($sql, $args, false));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @maintainer: Samuel Koch [samuel@solis.coop.br]
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @last modification: Samuel Koch [smauel@solis.coop.br]
     *                     Amended the parameter of return for personId.
     *
     * @return $data->personId (integer): Return ID person
     *
     * */
    public function insertPhysicalPerson($data)
    {
        $data = $this->insertPerson($data);
        $physicalPerson = new basPhysicalPerson();
        
        $sql = 'INSERT INTO basPhysicalPerson
                            (sex,
                             maritalStatusId,
                             residentialPhone,
                             workPhone,
                             cellPhone,
                             messagePhone,
                             messageContact,
                             dateBirth,
                             cityIdBirth,
                             countryIdBirth,
                             responsableLegalId,
                             carPlate,
                             specialNecessityId,
                             specialNecessityDescription,
                             cityIdWork,
                             zipCodeWork,
                             locationWork,
                             locationTypeIdWork,
                             complementWork,
                             neighborhoodWork,
                             ethnicOriginId,
                             dateDeath,
                             personTitleId,
                             personId,
                             personDv,
                             name,
                             zipCode,
                             cityId,
                             location,
                             number,
                             neighborhood,
                             isAllowPersonalData,
                             motherName,
                             fatherName,
                             workEmployerName,
                             workFunction,
                             workStartDate,
                             workEndDate,
                             workAtHome,
                             ethnicorigin,
                             email,
                             mioloUserName,
                             identifier,
                             pis,
                             photoId)
                     VALUES (?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                             TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?)';

        $args = array( strtoupper($data->sex),
            strtoupper($data->maritalStatusId),
            strtoupper($data->residentialPhone),
            strtoupper($data->workPhone),
            strtoupper($data->cellPhone),
            strtoupper($data->messagePhone),
            strtoupper($data->messageContact),
            $data->dateBirth,
            $data->cityIdBirth,
            $data->countryIdBirth,
            $data->responsableLegalId,
            strtoupper($data->carPlate),
            $data->specialNecessityId,
            strtoupper($data->specialNecessityDescription),
            $data->cityIdWork,
            strtoupper($data->zipCodeWork),
            strtoupper($data->locationWork),
            strlen($data->locationTypeIdWork) > 0 ? $data->locationTypeIdWork : SAGU::getParameter('BASIC', 'DEFAULT_LOCATION_TYPE_ID'),
            strtoupper($data->complementWork),
            strtoupper($data->neighborhoodWork),
            $data->ethnicOriginId,
            $data->dateDeath,
            $data->personTitleId,
            $data->personId,
            $data->personDv,
            strtoupper(SAGU::NVL($data->name, $data->personName)),
            strtoupper($data->zipCode),
            $data->cityId,
            strtoupper($data->location),
            strtoupper($data->number),
            strtoupper($data->neighborhood),
            SAGU::NVL($data->isAllowPersonalData, DB_TRUE),
            strtoupper($data->motherName),
            strtoupper($data->fatherName),
            strtoupper($data->workEmployerName),
            strtoupper($data->workFunction),
            $data->workStartDate,
            $data->workEndDate,
            SAGU::NVL($data->workAtHome, DB_FALSE),
            $data->ethnicOrigin,
            $data->email,
            $data->mioloUserName,
            $data->identifier,
            $data->pis,
            $data->photoId);

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args, false));

        //
        
        if ( $result  && (preg_match('/registroaluno/', MIOLO::getCurrentAction()) || MIOLO::getCurrentAction() == 'main:process:subscription'))
        {
            $data = $this->checkDataDocuments($data);
            $this->insertOrUpdateDocuments( $data, (array) $data->documents );
        }

        // insert parents, if any
        if ( $result )
        {
            $MIOLO = MIOLO::getInstance();
            $busKinship = new BusinessBasicBusPhysicalPersonKinship();

            if ( strlen($data->fatherId) > 0 )
            {
                $kinshipData = new stdClass();
                $kinshipData->personId = $data->personId;
                $kinshipData->kinshipId = SAGU::getParameter('BASIC', 'FATHER_KINSHIP_ID');
                $kinshipData->relativePersonId = $data->fatherId;
                $kinshipData->obs = '';

                $result = $busKinship->insertPhysicalPersonKinship($kinshipData);
            }

            if ( $result && strlen($data->motherId) > 0 )
            {
                $kinshipData = new stdClass();
                $kinshipData->personId = $data->personId;
                $kinshipData->kinshipId = SAGU::getParameter('BASIC', 'MOTHER_KINSHIP_ID');
                $kinshipData->relativePersonId = $data->motherId;
                $kinshipData->obs = '';

                $result = $busKinship->insertPhysicalPersonKinship($kinshipData);
            }
        }
        
        //Insere usuário para a pessoa
        $okUser = $this->insertUser($data);
        if ( !$okUser )
        {
            $MIOLO->error(_M('Erro ao inserir usuï¿½rio',$module));
        }
        
        // Adiciona a pessoa no grupo padrão
        $this->insertInDefaultGroup($data->mioloUserName, SAGU::getParameter('BASIC', 'DEFAULT_GROUP_ID'));

        if ( $result )
        {
            return $data->isFromUnitTest ? TRUE : $data->personId;
        }
    }


    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     * */
    public function updatePhysicalPerson($data, $insertUser=true, $isFromWebService = FALSE)
    {
        $sql = 'UPDATE basPhysicalPerson SET';
        
        if ( $data->sex || ($isFromWebService && isset($data->sex)) )
        {
            $sql .= ' sex = ?, ';
            $args[] = strtoupper($data->sex);
        }

        if ( $data->maritalStatusId  || ($isFromWebService && isset($data->maritalStatusId)) )
        {
            $sql .= ' maritalStatusId = ?, ';
            $args[] = strtoupper($data->maritalStatusId);
        }
                
        if ( $data->residentialPhone || ($isFromWebService && isset($data->residentialPhone)) )
        {
            $sql .= ' residentialPhone = ?, ';
            $args[] = $data->residentialPhone;
        }

        if ( $data->workPhone || ($isFromWebService && isset($data->workPhone)) )
        {
            $sql .= ' workPhone = ?, ';
            $args[] = $data->workPhone;
        }

        if ( $data->cellPhone || ($isFromWebService && isset($data->cellPhone)) )
        {
            $sql .= ' cellPhone = ?, ';
            $args[] = $data->cellPhone;
        }

        if ( $data->messagePhone || ($isFromWebService && isset($data->messagePhone)) )
        {
            $sql .= ' messagePhone = ?, ';
            $args[] = $data->messagePhone;
        }

        if ( $data->messageContact || ($isFromWebService && isset($data->messageContact)) )
        {
            $sql .= ' messageContact = ?, ';
            $args[] = $data->messageContact;
        }

        if ( $data->dateBirth || ($isFromWebService && isset($data->dateBirth)) )
        {
            $sql .= ' dateBirth = to_date(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'), ';
            $args[] = $data->dateBirth;
        }

        if ( $data->cityid || ($isFromWebService && isset($data->cityid)) )
        {
            $sql .= ' cityid = ?, ';
            $args[] = $data->cityid;
        }

        if ( $data->complement || ($isFromWebService && isset($data->complement)) )
        {
            $sql .= ' complement = ?, ';
            $args[] = $data->complement;
        }

        if ( $data->number || ($isFromWebService && isset($data->number)) )
        {
            $sql .= ' number = ?, ';
            $args[] = $data->number;
        }

        if ( $data->cityIdBirth || ($isFromWebService && isset($data->cityIdBirth)) )
        {
            $sql .= ' cityIdBirth = ?, ';
            $args[] = $data->cityIdBirth;
        }


        if ( $data->countryIdBirth  || ($isFromWebService && isset($data->countryIdBirth)) )
        {
            $sql .= ' countryIdBirth = ?, ';
            $args[] = strtoupper($data->countryIdBirth);
        }

        if ( $data->responsableLegalId || ($isFromWebService && isset($data->responsableLegalId)) )
        {
            $sql .= ' responsableLegalId = ?, ';
            $args[] = $data->responsableLegalId;
        }

        if ( $data->carPlate || ($isFromWebService && isset($data->carPlate)) )
        {
            $sql .= ' carPlate = ?, ';
            $args[] = strtoupper($data->carPlate);
        }

        if ( strlen($data->specialNecessityId) > 0  || ($isFromWebService && isset($data->specialNecessityId)) )
        {
            $sql .= ' specialNecessityId = ?, ';
            $args[] = $data->specialNecessityId;
        }

        if ( $data->specialNecessityDescription || ($isFromWebService && isset($data->specialNecessityDescription)) )
        {
            $sql .= ' specialNecessityDescription = ?, ';
            $args[] = strtoupper($data->specialNecessityDescription);
        }

        if ( $data->cityIdWork || ($isFromWebService && isset($data->cityIdWork)) )
        {
            $sql .= ' cityIdWork = ?, ';
            $args[] = $data->cityIdWork;
        }

        if ( $data->zipCodeWork || ($isFromWebService && isset($data->zipCodeWork)) )
        {
            $sql .= ' zipCodeWork = ?, ';
            $args[] = strtoupper($data->zipCodeWork);
        }

        if ( $data->locationWork || ($isFromWebService && isset($data->locationWork)) )
        {
            $sql .= ' locationWork = ?, ';
            $args[] = $data->locationWork;
        }

        if ( $data->locationTypeIdWork || ($isFromWebService && isset($data->locationTypeIdWork)) )
        {
            $sql .= ' locationTypeIdWork = ?, ';
            $args[] = strlen($data->locationTypeIdWork) > 0 ? $data->locationTypeIdWork : SAGU::getParameter('BASIC', 'DEFAULT_LOCATION_TYPE_ID');
        }
        
        if ( $data->complementWork || ($isFromWebService && isset($data->complementWork)) )
        {
            $sql .= ' complementWork = ?, ';
            $args[] = $data->complementWork;
        }

        if ( $data->neighborhoodWork || ($isFromWebService && isset($data->neighborhoodWork)) )
        {
            $sql .= ' neighborhoodWork = ?, ';
            $args[] = strtoupper($data->neighborhoodWork);
        }

        if ( $data->ethnicOriginId || ($isFromWebService && isset($data->ethnicOriginId)) )
        {
            $sql .= ' ethnicOriginId = ?, ';
            $args[] = $data->ethnicOriginId;
        }

        if ( $data->dateDeath || ($isFromWebService && isset($data->dateDeath)) )
        {
            $sql .= ' dateDeath = to_date(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'), ';
            $args[] = $data->dateDeath;
        }

        if ( $data->personTitleId || ($isFromWebService && isset($data->personTitleId)) )
        {
            $sql .= ' personTitleId = ?, ';
            $args[] = strtoupper($data->personTitleId);
        }

        if ( $data->motherName || ($isFromWebService && isset($data->motherName)) )
        {
            $sql .= ' motherName = ?, ';
            $args[] = strtoupper($data->motherName);
        }

        if ( $data->fatherName || ($isFromWebService && isset($data->fatherName)) )
        {
            $sql .= ' fatherName = ?, ';
            $args[] = strtoupper($data->fatherName);
        }

        if ( $data->workEmployerName || ($isFromWebService && isset($data->workEmployerName)) )
        {
            $sql .= ' workEmployerName = ?, ';
            $args[] = strtoupper($data->workEmployerName);
        }

        if ( $data->workFunction || ($isFromWebService && isset($data->workFunction)) )
        {
            $sql .= ' workFunction = ?, ';
            $args[] = strtoupper($data->workFunction);
        }

        if ( $data->workStartDate || ($isFromWebService && isset($data->workStartDate)) )
        {
            $sql .= ' workStartDate = to_date(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'), ';
            $args[] = $data->workStartDate;
        }

        if ( $data->workEndDate || ($isFromWebService && isset($data->workEndDate)) )
        {
            $sql .= ' workEndDate = to_date(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'), ';
            $args[] = $data->workEndDate;
        }

        if ( $data->workAtHome || ($isFromWebService && isset($data->workAtHome)) )
        {
            $sql .= ' workAtHome = ?, ';
            $args[] = $data->workAtHome;
        }
       
        if ( $data->ethnicOrigin || ($isFromWebService && isset($data->ethnicOrigin)) )
        {
            $sql .= ' ethnicorigin = ?, ';
            $args[] = $data->ethnicOrigin;
        }
        
        if($data->mioloUserName)
        {
            $sql .= ' mioloUserName = ?, ';
            $args[] = $data->mioloUserName;
        }
        
        if($data->identifier)
        {
            $sql .= ' identifier = ?, ';
            $args[] = $data->identifier;
        }
        
        if($data->pis)
        {
            $sql .= ' pis = ?, ';
            $args[] = $data->pis;
        }
        
        if($data->password)
        {
            $sql .= ' password = ?, ';
            $args[] = md5($data->password);
        }

        $result = TRUE;
        if(count($args)>0)
        {
            $sql = substr($sql, 0, -2);
            $sql .= ' WHERE personId = ?';
            $args[] = $data->personId;

            $sqls = SAGU::prepare($sql, $args);
            
            for ( $i = 0; $i < count($sqls); $i++ )
            {
                $result = $this->getDatabase()->execute($sqls[$i]);
            }
        }
        
        // update parents, if necessary
        if ( $result )
        {
            $MIOLO = MIOLO::getInstance();
            $busKinship = new BusinessBasicBusPhysicalPersonKinship();

            if ( strlen($data->fatherId) > 0 )
            {
                $kinshipData = new stdClass();
                $kinshipData->personId = $data->personId;
                $kinshipData->kinshipId = SAGU::getParameter('BASIC', 'FATHER_KINSHIP_ID');

                // delete all father kinship
                $currKinship = $busKinship->searchPhysicalPersonKinship($kinshipData);
                for ( $i = 0; $i < count($currKinship); $i++ )
                {
                    $busKinship->deletePhysicalPersonKinship($currKinship[$i][0], $currKinship[$i][1], $currKinship[$i][2]);
                }

                $kinshipData->relativePersonId = $data->fatherId;
                $kinshipData->obs = '';

                $result = $busKinship->insertPhysicalPersonKinship($kinshipData);
            }

            if ( $result && strlen($data->motherId) > 0 )
            {
                $kinshipData = new stdClass();
                $kinshipData->personId = $data->personId;
                $kinshipData->kinshipId = SAGU::getParameter('BASIC', 'MOTHER_KINSHIP_ID');

                // delete all mother kinship
                $currKinship = $busKinship->searchPhysicalPersonKinship($kinshipData);
                for ( $i = 0; $i < count($currKinship); $i++ )
                {
                    $busKinship->deletePhysicalPersonKinship($currKinship[$i][0], $currKinship[$i][1], $currKinship[$i][2]);
                }

                $kinshipData->relativePersonId = $data->motherId;
                $kinshipData->obs = '';

                $result = $busKinship->insertPhysicalPersonKinship($kinshipData);
            }
        }
                
        if ( $result && (preg_match('/registroaluno/', MIOLO::getCurrentAction())|| MIOLO::getCurrentAction() == 'main:process:subscription') )
        {
            $data = $this->checkDataDocuments($data);
            $this->insertOrUpdateDocuments( $data, (array) $data->documents );
        }
        
        $this->updatePerson($data);

        //Insere usuário para a pessoa
        if ( $insertUser )
        {
            if ( strlen($data->mioloUserNameOld) > 0 && $data->mioloUserNameOld != $data->mioloUserName )
            {
                $busUser = new BusinessAdminBusUser();
                
                $filters = new stdClass();
                $filters->login = $data->mioloUserNameOld;
                
                $rows = $busUser->searchUser($filters);
                
                $filters->login = $data->mioloUserName;
                $rows = ( count($rows) > 0 ) ? $rows : $busUser->searchUser($filters);

                if ( count($rows) > 0 )
                {
                    $userData = new stdClass();
                    $userData->idUser   = $rows[0][0];
                    $userData->name     = $rows[0][2];
                    $userData->login    = str_replace(array('.', '-'), array('', ''), $data->content2);
                    $userData->password = (strlen($data->miolo_user_passwd) > 0) ? $data->miolo_user_passwd : $rows[0][4];

                    $okUser = $busUser->updateUser($userData);
                    
                    if ( !$okUser )
                    {
                        $MIOLO->error(_M('Erro ao editar usuário.',$module));
                    }
                }
            }
            else if ( (strlen($data->mioloUserNameOld) > 0 || strlen($data->mioloUserName) > 0) || (!strlen($data->mioloUserName) > 0) )
            {
                $okUser = $this->insertUser($data);
                
                if ( !$okUser )
                {
                    $MIOLO->error(_M('Erro ao inserir usuário.',$module));
                }
            }
        }

        // Chama a função de sincronização de pessoas do webservice, se existir.
        if ( !$isFromWebService )
        {
            $wsURL = sagu::getParameter('BASIC', 'URL_WEB_SERVICE_PESSOA_SISTEMA_EXTERNO');
            if ( $result && strlen($wsURL) > 0 )
            {
                $wsData = $this->getSyncData($data);

                $wsdlUrl = sagu::getParameter('BASIC', 'URL_WSDL_PESSOA_SISTEMA_EXTERNO');
                $soapClient = new SoapClient($wsdlUrl, array('location' => $wsURL, 'uri' => $wsURL));
                $wsFunction = sagu::getParameter('BASIC', 'WEB_SERVICE_FUNCTION_PESSOA_EXTERNO');

                $result = $soapClient->__soapCall($wsFunction, array($wsData));
            }
        }
        
        // Adiciona a pessoa no grupo padrão
        $this->insertInDefaultGroup($data->mioloUserName, SAGU::getParameter('BASIC', 'DEFAULT_GROUP_ID'));

        return $result;
    }
    
    public function checkDataDocuments($data)
    {
        //RG
        $rg = SAGU::NVL($data->rg, $data->personRg);
        
        if ( ( strlen($rg) > 0 ) && !$this->hasDocumentDefined($data, SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_RG')) )
        {
            $rgOrgan = SAGU::NVL($data->rgOrgao, $data->rgOrgan);
            
            $doc = new stdClass();
            $doc->documentTypeId = SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_RG');
            $doc->content = $rg;
            $doc->organ = $rgOrgan;
            $doc->isDelivered = DB_FALSE;
            
            $data->documents[] = $doc;
        }

        //CPF
        $cpf = SAGU::NVL($data->cpf, $data->personCpf);
        
        if ( ( strlen($cpf) > 0 ) && !$this->hasDocumentDefined($data, SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF')) )
        {
            $doc = new stdClass();
            $doc->documentTypeId = SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF');
            $doc->content = $cpf;      
            $doc->isDelivered = DB_FALSE;
            
            $data->documents[] = $doc;
        }
        
        return $data;
    }
    
    /**
     * @return boolean
     */
    public function hasDocumentDefined($data, $type)
    {
        $hasDefined = false;
        
        foreach ( (array) $data->documents as $doc )
        {
            if ( $doc->documentTypeId == $type )
            {
                $hasDefined = true;
                break;
            }
        }
        
        return $hasDefined;
    }

    /**
     * Update the person data, from forms fields that haven't null values
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     * */
    public function updatePhysicalPersonToInscriptions($data)
    {
        $sql = 'UPDATE basPhysicalPerson SET ';

        if ( strlen($data->sex) > 0 )
        {
            $sql .= ' sex = ?, ';
            $args[] = strtoupper($data->sex);
        }

        if ( strlen($data->maritalStatusId) > 0 )
        {
            $sql .= ' maritalStatusId = ?, ';
            $args[] = $data->maritalStatusId;
        }

        if ( strlen($data->residentialPhone) > 0 )
        {
            $sql .= ' residentialPhone = ?, ';
            $args[] = $data->residentialPhone;
        }

        if ( strlen($data->workPhone) > 0 )
        {
            $sql .= ' workPhone = ?, ';
            $args[] = $data->workPhone;
        }

        if ( strlen($data->cellPhone) > 0 )
        {
            $sql .= ' cellPhone = ?, ';
            $args[] = $data->cellPhone;
        }

        if ( strlen($data->messagePhone) > 0 )
        {
            $sql .= ' messagePhone = ?, ';
            $args[] = $data->messagePhone;
        }

        if ( strlen($data->messageContact) > 0 )
        {
            $sql .= ' messageContact = ?, ';
            $args[] = $data->messageContact;
        }

        if ( strlen($data->dateBirth) > 0 )
        {
            $sql .= ' dateBirth = to_date(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'), ';
            $args[] = $data->dateBirth;
        }

        if ( strlen($data->cityIdBirth) > 0 )
        {
            $sql .= ' cityIdBirth = ?, ';
            $args[] = $data->cityIdBirth;
        }

        if ( strlen($data->countryIdBirth) > 0 )
        {
            $sql .= ' countryIdBirth = ?, ';
            $args[] = $data->countryIdBirth;
        }

        if ( strlen($data->responsableLegalId) > 0 )
        {
            $sql .= ' responsableLegalId = ?, ';
            $args[] = $data->responsableLegalId;
        }

        if ( strlen($data->carPlate) > 0 )
        {
            $sql .= ' carPlate = ?, ';
            $args[] = strtoupper($data->carPlate);
        }

        if ( strlen($data->specialNecessityId) > 0 )
        {
            $sql .= ' specialNecessityId = ?, ';
            $args[] = $data->specialNecessityId;
        }

        if ( strlen($data->specialNecessityDescription) > 0 )
        {
            $sql .= ' specialNecessityDescription = ?, ';
            $args[] = strtoupper($data->specialNecessityDescription);
        }

        if ( strlen($data->cityIdWork) > 0 )
        {
            $sql .= ' cityIdWork = ?, ';
            $args[] = $data->cityIdWork;
        }

        if ( strlen($data->zipCodeWork) > 0 )
        {
            $sql .= ' zipCodeWork = ?, ';
            $args[] = strtoupper($data->zipCodeWork);
        }

        if ( strlen($data->locationWork) > 0 )
        {
            $sql .= ' locationWork = ?, ';
            $args[] = $data->locationWork;
        }

        if ( strlen($data->locationTypeIdWork) > 0 )
        {
            $sql .= ' locationTypeIdWork = ?, ';
            $args[] = $data->locationTypeIdWork;
        }

        if ( strlen($data->complementWork) > 0 )
        {
            $sql .= ' complementWork = ?, ';
            $args[] = strtoupper($data->complementWork);
        }

        if ( strlen($data->neighborhoodWork) > 0 )
        {
            $sql .= ' neighborhoodWork = ?, ';
            $args[] = strtoupper($data->neighborhoodWork);
        }

        if ( strlen($data->ethnicOriginId) > 0 )
        {
            $sql .= ' ethnicOriginId = ?, ';
            $args[] = $data->ethnicOriginId;
        }

        if ( strlen($data->dateDeath) > 0 )
        {
            $sql .= ' dateDeath = to_date(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'), ';
            $args[] = $data->dateDeath;
        }

        if ( strlen($data->name) > 0 )
        {
            $sql .= ' name = ?, ';
            $args[] = strtoupper($data->name);
        }

        if ( count($args) > 0 )
        {
            $args[] = $data->personId;
            $sql .= ' WHERE personId = ?';
            $sql = str_replace(',  WHERE', ' WHERE', $sql);
            $sqls = SAGU::prepare($sql, $args);

            for ( $i = 0; $i < count($sqls); $i++ )
            {
                $result = $this->getDatabase()->execute($sqls[$i]);
            }

            // update parents, if necessary
            if ( $result )
            {
                $MIOLO = MIOLO::getInstance();
                $busKinship = new BusinessBasicBusPhysicalPersonKinship();

                if ( strlen($data->fatherId) > 0 )
                {
                    $kinshipData = new stdClass();
                    $kinshipData->personId = $data->personId;
                    $kinshipData->kinshipId = SAGU::getParameter('BASIC', 'FATHER_KINSHIP_ID');

                    // delete all father kinship
                    $currKinship = $busKinship->searchPhysicalPersonKinship($kinshipData);
                    for ( $i = 0; $i < count($currKinship); $i++ )
                    {
                        $busKinship->deletePhysicalPersonKinship($currKinship[$i][0], $currKinship[$i][1], $currKinship[$i][2]);
                    }

                    $kinshipData->relativePersonId = $data->fatherId;
                    $kinshipData->obs = '';

                    $result = $busKinship->insertPhysicalPersonKinship($kinshipData);
                }

                if ( $result && strlen($data->motherId) > 0 )
                {
                    $kinshipData = new stdClass();
                    $kinshipData->personId = $data->personId;
                    $kinshipData->kinshipId = SAGU::getParameter('BASIC', 'MOTHER_KINSHIP_ID');

                    // delete all mother kinship
                    $currKinship = $busKinship->searchPhysicalPersonKinship($kinshipData);
                    for ( $i = 0; $i < count($currKinship); $i++ )
                    {
                        $busKinship->deletePhysicalPersonKinship($currKinship[$i][0], $currKinship[$i][1], $currKinship[$i][2]);
                    }

                    $kinshipData->relativePersonId = $data->motherId;
                    $kinshipData->obs = '';

                    $result = $busKinship->insertPhysicalPersonKinship($kinshipData);
                }
            }

            $this->updatePersonToInscriptions($data);

            return $result;
        }
    }

    /**
     * Get the person by miolo username
     *
     * @param $mioloUserName (string): Miolo username linked to person
     *
     * @return (array): Return all person data just like getPerson or null if login doesn't exists
     * */
    public function getPhysicalPersonByMioloUserName($mioloUserName)
    {
        $sql = 'SELECT personId
             FROM ONLY basPhysicalPerson
                 WHERE mioloUserName = ?';

        $db = $this->getDatabase();
        $param[] = $mioloUserName;
        $personId = $db->query(SAGU::prepare($sql, $param, false));

        unset($person);
        if ( isset($personId) )
        {
            $person = $this->getPhysicalPerson($personId[0][0]);
        }

        return $person;
    }

    /**
     * Delete a record
     *
     * @param $personId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     * */
    public function deletePhysicalPerson($personId)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // Remove parentesco
        $busPhysicalPersonKinship = new BusinessBasicBusPhysicalPersonKinship();
        $filters = new stdClass();
        $filters->personId = $personId;
        $rows = $busPhysicalPersonKinship->searchPhysicalPersonKinship($filters, true);
        foreach ( (array) $rows as $row )
        {
            $busPhysicalPersonKinship->deletePhysicalPersonKinship($row->personId, $row->kinshipId, $row->relativePersonId);
        }
        
        // Remove busPersonLink
        $busPersonLink = new BusinessBasicBusPersonLink();
        $busPersonLink->deleteByPerson($personId);

        $result = $this->deletePerson($personId);

        return $result;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     * */
    public function searchPhysicalPersonByDocument($filters)
    {
        $sql = 'SELECT A.personId
             FROM ONLY basPhysicalPerson A
            INNER JOIN basDocument B
                    ON (A.personId = B.personId)
                 WHERE B.content = ?';

        $args[] = $filters->content;
        $result = $this->getDatabase()->query(SAGU::Prepare($sql, $args));

        return $result[0][0];
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     * */
    public function searchPhysicalPersonByDocumentOrEmail($filters)
    {
        $sql = 'SELECT A.personId
             FROM ONLY basPhysicalPerson A
            INNER JOIN basDocument B
                    ON (A.personId = B.personId)';

        if ( strlen($filters->content) > 0 )
        {
            $where .= ' AND B.content = ? ';
            $args[] = $filters->content;
        }
        if ( strlen($filters->email) > 0 )
        {
            $where .= ' AND ( A.email = ? OR A.emailalternative = ? )';
            $args[] = $filters->email;
            $args[] = $filters->email;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' LIMIT 1';
            $result = $this->getDatabase()->query(SAGU::Prepare($sql, $args, false));
        }

        return $result;
    }

    /**
     * Obtem a lista de pessoas subordinadas
     *
     * Se for coordenador de centro, traz todos os coordenadores de curso do centro.
     * Se for coordenador de curso, traz todas as pessoas que dão aula em disciplinas neste curso.
     *
     * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
     *
     * @param $personId (integer): Código da pessoa
     *
     * @return (array): Array de subordinados
     *
     */
    public function searchSubordinates($personId)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $periodId = SAGU::getParameter('basic', 'CURRENT_PERIOD_ID');

                   $sql = 'SELECT  DISTINCT A.personId,
                                   A.name
                         FROM ONLY basphysicalPerson A
                        INNER JOIN acdScheduleProfessor B
                                ON (A.personId = B.professorId)
                        INNER JOIN acdSchedule C
                                ON (B.scheduleId = C.scheduleId)
                        INNER JOIN unit_acdGroup D
                                ON (C.groupId = D.groupId)
                        INNER JOIN unit_acdlearningperiod E
                                ON (D.learningPeriodId = E.learningPeriodId)
                        INNER JOIN unit_acdcurriculum F
                                ON (D.curriculumId = F.curriculumId)
                        INNER JOIN acdCourseCoordinator G
                                ON (F.courseId = G.courseId
                                AND F.courseVersion = G.courseVersion
                                AND F.turnId = G.turnId
                                AND F.unitId = G.unitId)
                        WHERE E.periodId = ? AND G.coordinatorId = ?
                        UNION
                        SELECT DISTINCT A.personId,
                               A.name
                     FROM only basphysicalPerson A
                    INNER JOIN acdCourseCoordinator B
                            ON (A.personId = B.coordinatorId)
                    INNER JOIN acdCourse C
                            ON (B.courseId = C.courseId)
                    INNER JOIN acdCenter D
                            ON (C.centerId = D.centerId)
                       WHERE D.directorId = ?';

        $result = $this->getDatabase()->query(SAGU::Prepare($sql, array( $periodId, $personId, $personId )));

        return $result;
    }


    /**
     * Função responsável por inserir um usuário para a pessoa física,
     * esta função é privada e deve ser acessada somente por essa classe
     *
     * @param <stdClass> $data dados da pessoa
     * @return <string> $mioloUserName
     */
    private function insertUser($data)
    {
        $MIOLO = MIOLO::getInstance();
        $busUser = new BusinessAdminUser();
        $busDocument = new BusinessBasicBusDocument();
        $busPerson = new BusinessBasicBusPerson();
        $okUser = false;
        $executedInsertOrUpdate = false;
                
        if ( ( strlen($data->mioloUserName) <= 0 ) && ( strlen($data->personId) > 0 ) )
        {
            $physicalPerson = $this->getPhysicalPerson($data->personId);
            $data->mioloUserName = $physicalPerson->mioloUserName;
        }
        
        $user = $busUser->getByLogin($data->mioloUserName);
        $mioloUserName = $data->mioloUserName;
        
        $authMethod = SAGU::getParameter('BASIC', 'AUTH_METHOD');
        if ( $authMethod == 'SAGU' )
        {            
            $busUser = new BusinessAdminUser();
            $user = $busUser->getByLogin($data->mioloUserName);                        
        }
        else if ( $authMethod == 'LDAP' )
        {
            $busUser = new BusinessAdminUser();
            $users = $busUser->listByLoginLdap($data->mioloUserName, null, null);
            $user->login = $users[key($users)];
        }
        
        //Verifica se não existe um registro de login com o usuário informado
        if( !strlen($user->login)>0 )
        {            
            $userData->admLogin = $data->personId;
            
            if ( !strlen($mioloUserName) )
            {
                $loginType = SAGU::getParameter('BASIC', 'AUTOMATIC_LOGIN_GENERATION_SOURCE');
                
                if( in_array($loginType, array('CPF', 'CPFNOMASK')) )
                {
                    // Verifica se o documento ja existe na base de dados
                    $filters = new stdClass();
                    $documents = $busDocument->getDocument($data->personId,SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF'));

                    //Caso for inserido o documento ainda não foi gravado, assim obtém o valor do formulário antes de salvá-lo
                    if( MIOLO::_request('function') == SForm::FUNCTION_INSERT && strlen($documents->content) == 0 )
                    {
                        $id = 'content'.SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF');
                        $documents->content = $data->$id;
                    }
                    
                    if ( strlen($documents->content)>0 )
                    {
                        $mioloUserName = $documents->content;
                        
                        // Se estiver configurado para gerar login com CPF sem mascara, remover
                        if ( $loginType == 'CPFNOMASK' )
                        {
                            $mioloUserName = SAGU::convertInCPFWithoutDelimiters($mioloUserName);
                        }
                    }
                    //Se não achar o CPF não insere usuário
                    else
                    {
                        $okUser = true;
                    }
                }
                else if( $loginType == 'PERSONID' )
                {
                    $mioloUserName = $data->personId;
                }
                else if( $loginType == 'PERSONNAME' )
                {
                    // Cria login com nome-sobrenome da pessoa
                    $personName = SDatabase::query('SELECT UNACCENT(?)', array($data->name));
                    $personName = $personName[0][0];
                    
                    // Define login como PRIMEIRONOME-ULTIMONOME
                    $explodeNames = explode(' ', $personName);
                    $mioloUserName = strtolower(current($explodeNames)) . '-' . strtolower(end($explodeNames));
                    $mioloUserName = substr($mioloUserName, 0, 24); // limite de CHAR(25) na base
                    
                    // Enquanto houver logins iguais, incrementar com NUMERO no final
                    $newMioloUserName = $mioloUserName;
                    $filters = new stdClass();
                    $filters->mioloUserName = $mioloUserName;
                    for ( $i=1; count($this->searchPhysicalPerson($filters)) > 0; $i++ )
                    {
                        $newMioloUserName = $mioloUserName . $i;
                        $filters->mioloUserName = $newMioloUserName;
                    }
                    
                    $mioloUserName = $newMioloUserName;
                }
            }
            
            if ( (strlen($mioloUserName)>0) && (!$okUser) )
            {   
                $userData->admLogin = $mioloUserName;
                $data->mioloUserName = $mioloUserName;
                $userData->username = $data->name;
                $userData->admPassword = ( strlen($data->mioloUserPasswd) > 0 ) ? $data->mioloUserPasswd : SAGU::NVL($data->password, SAGU::createPassword());
                $MIOLO->session->admPasswd = $userData->admPassword; // Guarda a senha na sessão para ser exibida ao concluir a inscrição.
                
                //Busca pelo codigo de usuário
                $filters = new stdClass();
                $filters->login = $mioloUserName;
                $rows = $busUser->searchUser($filters);
                if ( count($rows) > 0 )
                {
                    $idUser = $rows[0][0];
                    $getUser = $busUser->getUser($idUser);
                    
                    $userData->idUser = $idUser;
                    if ( $MIOLO->getConf('login.class') == 'mauthLdap' )
                    {
                        $userData->admPassword = NULL;
                        $userData->admPassword = ( strlen($data->mioloUserPasswd) > 0 ) ? $data->mioloUserPasswd : $data->password; 
                    }
                    else
                    {
                        $userData->admPassword = SAGU::NVL($data->password, $getUser->admPassword, $userData->admPassword);
                    }
                    
                    $okUser = $busUser->updateUser($userData);
                }
                else
                {
                    $returnUser = $busUser->insertUser($userData);
                    $okUser = strlen($returnUser)>0;
                }
                
                $executedInsertOrUpdate = true;
            }

            if ( strlen($mioloUserName)>0 )
            {
                //Insere miolousername na pessoa
                $dataPhysicalPerson = $this->getPhysicalPerson($data->personId);
                $dataPhysicalPerson->mioloUserName =  $mioloUserName;
                $busPerson->updatePerson($dataPhysicalPerson);
            }
        }
        //Já existe usuário e não foi alterado        
        else if( $user->login == $data->mioloUserName )
        {
            $okUser = true;
        }
        
        // O motivo de ter sido feito isto é para garantir a integracao com LDAP
        if ( ( strlen($mioloUserName) > 0 ) && !$executedInsertOrUpdate )
        {
            $userData = $busUser->getByLogin($mioloUserName);
            
            if ( strlen($userData->login) > 0 )
            {
                $getUser = $busUser->getUser($userData->idUser);
                $getUser->admPassword = SAGU::NVL( $data->password, $getUser->admPassword );
                $getUser->admPassword = ( strlen($data->mioloUserPasswd) > 0 ) ? $data->mioloUserPasswd : $getUser->admPassword;
                $busUser->updateUser($getUser);
            }
        }

        return $okUser;
    }


    /**
     * Insere a pessoa no grupo padrão
     *
     * @param type $mioloUserName
     */
    public function insertInDefaultGroup($mioloUserName, $groupId)
    {
        $MIOLO = MIOLO::getInstance();

        if ( (strlen($mioloUserName) > 0) && (strlen($groupId) > 0) )
        {
            // Instancia os business

            $busUser = new BusinessAdminBusUser();
            $busGroupUser = new BusinessAdminGroupUser();

            // Define os valores
            $idUser = $busUser->getUserByLogin($mioloUserName)->idUser;

            // Verifica se a pessoa tem usuário
            if ( strlen($idUser) > 0 )
            {
                // Verifica se a pessoa não está em nenhum grupo
                $filters = new stdClass();
                $filters->idUser = $idUser;
                $filters->idGroup = $groupId;
                if ( !(count($busGroupUser->search($filters)) > 0) )
                {
                    // Insere a pessoa no grupo padrão
                    $data = new BusinessAdminGroupUser();
                    $data->setIdUser($idUser);
                    $data->setIdGroup($groupId);
                    $data->setUnitId( sMultiUnidade::obterUnidadeLogada() );

                    $busGroupUser->insertUserInGroups($data);
                }
            }
        }
    }
    

    /**
     * Insere em grupos padroes
     *
     * @param stdClass $data
     */
    public function insertInDefaultGroups($data)
    {
        // Utilizado no TraRequest
        if ( $data->isFromTraining )
        {
            $this->insertInDefaultGroup($data->mioloUserName, SAGU::getParameter('BASIC', 'DEFAULT_GROUP_TRAINING_ID'));
        }

        // Adiciona a pessoa no grupo padrão
        $this->insertInDefaultGroup($data->mioloUserName, SAGU::getParameter('BASIC', 'DEFAULT_GROUP_ID'));
    }
    
    /**
     *
     * @param stdClass $data
     * @param array $documents 
     */
    private function insertOrUpdateDocuments($data, $documents = array())
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $busDocument = new BusinessBasicBusDocument();
   
        foreach ( $documents as $document )
        {
            $document->personId = SAGU::NVL($document->personId, $data->personId);
            $ok = $busDocument->insertOrUpdateDocument($document);
        }
    }
    
    /**
     * @return basPhysicalPerson
     */
    public function procurarPeloNascimentoMaisCPF($cpf, $dataNascimento)
    {
        $busDocument = new BusinessBasicBusDocument();
        
        // Verifica se o documento ja existe na base de dados
        $filters = new stdClass();
        $filters->documentTypeId = SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF');
        $filters->content = $cpf;
        
        $documents = $busDocument->searchDocument($filters, true);
        $personId = $documents[0]->personId;
        
        $pessoa = null;

        if ( strlen($personId) > 0 )
        {
            $filters = new stdClass();
            $filters->personId = $personId;
            $filters->dateBirth = $dataNascimento;

            $searchPerson = $this->searchPhysicalPerson($filters);

            if ( count($searchPerson) > 0 )
            {
                $pessoa = $this->getPhysicalPerson($personId);
            }
        }
        
        return $pessoa;
    }
    
    /**
     * Função que retorna uma string com os dados da pessoa concatenados, para utilização em um
     * webservice externo.
     * 
     * @author Bruno Edgar Fuhr [bruno@solis.com.br]
     * @since 14/04/2014
     * 
     * @param $data - Dados da pessoa a serem sincronizados
     * @param $separator - Caracteres a serem utilizados para separar as informações da pessoa
     * @return String - String com informações da pessoa concatenadas.
     */
    public function getSyncData($data, $separator = '||')
    {
        $busDocument = new BusinessBasicBusDocument();
        $busCity = new BusinessBasicBusCity();
        $busCountry = new BusinessBasicBusCountry();
        $busLocationType = new BusinessBasicBusLocationType();
        
        $cpfDocumentType = SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF');
        $rgDocumentType = SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_RG');
        
        $cpf = NULL;
        $rg = NULL;
        
        // Obter o cpf e rg
        foreach ( $data->documents as $document )
        {
            if ( $document->documentTypeId == $cpfDocumentType )
            {
                $cpf = $document;
            }
            elseif ( $document->documentTypeId == $rgDocumentType )
            {
                $rg = $document;
            }
        }
        
        if ( strlen($cpf->content) <= 0 )
        {
            $cpfDocument = $busDocument->getDocument($data->personId, $cpfDocumentType);
            $cpf = $cpfDocument;
        }
        
        if ( strlen($rg->content) <= 0 )
        {
            $rgDocument = $busDocument->getDocument($data->personId, $rgDocumentType);
            $rg = $rgDocument;
        }
        
        // Obter as cidades
        $city = $busCity->getCity($data->cityId);
        $rgCity = $busCity->getCity($rg->cityId);
        $rgCountry = $busCountry->getCountry($rgCity->countryId);
        
        // Obter o tipo de logradouro
        $locationType = $busLocationType->getLocationType($data->locationType);
        
        $personData = array();
        
        switch ( SAGU::getParameter('BASIC', 'ESTRUTURA_DADOS_SINCRONIZACAO_PESSOA') )
        {
            case 1:
                
                $personData['cpf'] = $cpf->content;
                $personData['cnpj'] = '';
                $personData['nome'] = $data->name;
                $personData['nomeFantasia'] = '';
                $personData['abreviatura'] = $data->shortName;
                $personData['email'] = $data->email;
                $personData['emailAlternativo'] = $data->emailAlternative;
                $personData['url'] = $data->url;
                $personData['cep'] = $data->zipCode;
                $personData['cidade'] = $city->name;
                $personData['estado'] = $data->stateId;
                $personData['pais'] = $data->countryId;
                $personData['logradouro'] = $data->location;
                $personData['tipoLogradouro'] = $locationType->name;
                $personData['numero'] = $data->number;
                $personData['complemento'] = $data->complement;
                $personData['bairro'] = $data->neighborhood;
                $personData['fone'] = $data->residentialPhone;
                $personData['fax'] = '';
                $personData['sexo']= $data->sex;
                $personData['dataNascimento'] = $data->dateBirth;
                $personData['celular'] = $data->cellPhone;
                $personData['nomeMae'] = $data->motherName;
                $personData['telefoneResidencial'] = $data->residentialPhone;
                $personData['telefoneTrabalho'] = $data->workPhone;
                $personData['rg'] = $rg->content;
                $personData['orgaoExpeditorRg'] = $rg->organ;
                $personData['nomeCidadeRg'] = $rgCity->name;
                $personData['cepCidadeRg'] = $rgCity->zipCode;
                $personData['nomePaisRg'] = $rgCountry->name;
                $personData['dataExpedicao'] = $rg->dateExpedition;
                
                break;

            default:
                break;
        }
        
        return implode($separator, $personData);
    }
    
    /**
     * @return int
     */
    public function getLastInsertId()
    {
        $rows = SDatabase::query("SELECT nextval('seq_personid'::regclass)");
        
        return $rows[0][0];
    }
}
?>
