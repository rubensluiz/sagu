<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for basCompanyConf table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 01/09/2005
 *
 **/

/**
 * Class to manipulate the basCompanyConf table
 **/
class BusinessBasicBusCompany extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listCompany()
    {
        $sql = 'SELECT companyId,
                       name
                  FROM basCompanyConf
              ORDER BY name';

        $ret = $this->getDatabase()->query($sql);

        return $ret;
    }

    /**
     * Return a specific record from the database
     *
     * @param $companyId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getCompany($companyId)
    {
        $sql = 'SELECT A.companyId,
                       A.personId,
                       A.name,
                       A.acronym,
                       A.companyTypeDescription,
                       A.legalResponsableId,
                       C.name,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress,
                       B.cnpj,
                       B.shortName,
                       B.phone,
                       E.currency,
                       E.currencySymbol
                  FROM basCompanyConf A
       INNER JOIN ONLY basLegalPerson B
                    ON B.personId = A.personId
             LEFT JOIN basCity D
                    ON D.cityId = B.cityId
             LEFT JOIN basCountry E
                    ON E.countryId = D.countryId
        LEFT JOIN ONLY basPhysicalPerson C
                    ON A.legalResponsableId = C.personId
                 WHERE A.companyId = ?';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $companyId));

        $company = new BasCompanyConf();
        list ( $company->companyId,
               $company->personId,
               $company->name,
               $company->acronym,
               $company->companyTypeDescription,
               $company->legalResponsableId,
               $company->legalResponsableName,
               $company->userName,
               $company->dateTime,
               $company->ipAddress,
               $company->cnpj,
               $company->shortName,
               $company->phone,
               $company->currency,
               $company->currencySymbol ) = $result[0];

        return $company;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchCompany($filters)
    {
        $sql = 'SELECT A.companyId,
                       A.name,
                       A.acronym,
                       A.personId,
                       B.name,
                       A.legalResponsableId,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM basCompanyConf A
        LEFT JOIN ONLY basLegalPerson B
                 USING ( personId ) ';

        if ( strlen($filters->companyId) > 0 )
        {
            $where .= ' AND A.companyId = ? ';
            $args[] = $filters->companyId;
        }
        if ( strlen($filters->name) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?) ';
            $args[] = $filters->name . '%';
        }
        if ( strlen($filters->acronym) > 0 )
        {
            $where .= ' AND UNACCENT(A.acronym) ILIKE UNACCENT(?) ';
            $args[] = $filters->acronym . '%';
        }
        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND A.personId = ? ';
            $args[] = $filters->personId;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY A.name';

            $result = $this->getDatabase()->query(SAGU::prepare($sql,$args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertCompany($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $sql = 'INSERT INTO basCompanyConf
                            (personId,
                             name,
                             acronym,
                             companyTypeDescription,
                             legalResponsableId)
                     VALUES (?,?,?,?,?)';

        $args = array( $data->personId,
                       $data->name,
                       $data->acronym,
                       $data->companyTypeDescription,
                       $data->legalResponsableId );

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateCompany($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $sql = 'UPDATE basCompanyConf
                   SET name                         = ?,
                       acronym                      = ?,
                       companyTypeDescription       = ?,
                       personId                     = ?,
                       legalResponsableId           = ?
                 WHERE companyId                    = ?';

        $args[] = $data->name;
        $args[] = $data->acronym;
        $args[] = $data->companyTypeDescription;
        $args[] = $data->personId;
        $args[] = $data->legalResponsableId;
        $args[] = $data->companyId;

        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $companyId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteCompany($companyId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $sql = 'DELETE FROM basCompanyConf
                      WHERE companyId = ?';

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $companyId));

        return $result;
    }
}
?>
