<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * This file handles the connection and actions for BasKinship table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @since
 * Class created on 03/11/2010
 *
 **/

/**
 * Class to manipulate the BasKinship table
 **/
class BusinessBasicBusKinship extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listKinship($returnAssociative = false)
    {
        $sql = 'SELECT kinshipId,
                       description
                  FROM basKinship
              ORDER BY description';
        
        $ret = $this->getDatabase()->query($sql);

        if ($returnAssociative && (count($ret) > 0))
        {
            foreach ($ret as $i => $r)
            {
                unset($ret[$i]);
                $ret[ $r[0] ] = $r[1];
            }
        }

        return $ret;
    }

    /**
     * Return a specific record from the database
     *
     * @param $kinshipId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getKinship($kinshipId)
    {
        $sql = 'SELECT kinshipId,
                       description,
                       required,
                       userName,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipAddress
                  FROM basKinship
                 WHERE kinshipId = ?';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $kinshipId));

        $kinship = new basKinship();
        list ( $kinship->kinshipId,
               $kinship->description,
               $kinship->required,
               $kinship->userName,
               $kinship->dateTime,
               $kinship->ipAddress ) = $result[0];

        return $kinship;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchKinship($filters)
    {
        $sql= 'SELECT kinshipId,
                      description,
                      required
                 FROM basKinship ';

        if ( strlen($filters->kinshipId) > 0 )
        {
            $where .= ' AND kinshipId = ? ';
            $args[] = $filters->kinshipId;
        }
        if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND UNACCENT(description) ILIKE UNACCENT(?) ';
            $args[] = $filters->description . '%';
        }
        if ( strlen($filters->required) > 0 )
        {
            $where .= ' AND required = ? ';
            $args[] = $filters->required;
        }

        $result = array();
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY description';

            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertKinship($data)
    {
        $sql = 'INSERT INTO basKinship
                            (description,
                             required)
                     VALUES (?,?)';

        $args = array( $data->description,
                       $data->required );

        return $this->getDatabase()->execute(SAGU::prepare($sql, $args));
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateKinship($data)
    {
        $sql = 'UPDATE basKinship
                   SET description = ?,
                       required = ?
                 WHERE kinshipId = ?';

        $args = array( $data->description,
                       $data->required,
                       $data->kinshipId );

        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $kinshipId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteKinship($kinshipId)
    {
        $sql = 'DELETE FROM basKinship
                      WHERE kinshipId = ?';

        return $this->getDatabase()->execute(SAGU::prepare($sql, $kinshipId));
    }
}
?>
