<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for basPhysicalPersonStudent table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 09/09/2005
 *
 **/

$MIOLO  = MIOLO::getInstance();
$MIOLO->uses('db/BusPhysicalPerson.class', 'basic');

/**
 * Class to manipulate the basPerson table
 **/
class BusinessBasicBusPhysicalPersonStudent extends BusinessBasicBusPhysicalPerson
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listPhysicalPersonStudent()
    {
        $sql = 'SELECT personId,
                       name
             FROM ONLY basPhysicalPersonStudent
              ORDER BY name';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Return a specific record from the database
     *
     * @param $personId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getPhysicalPersonStudent($personId)
    {
        //get the basPersonPhysical data
        $physicalPerson = $this->getPhysicalPerson($personId);

        //get the basPhysicalPersonStudent data
        $sql = 'SELECT A.externalCourseIdHs,
                       B.name,
                       A.institutionIdHs,
                       C.name,
                       A.cityIdHs,
                       D.name,
                       A.yearHs,
                       A.isInsured,
                       A.passive,
                       D.stateId,
                       A.sex
             FROM ONLY basPhysicalPersonStudent A
             LEFT JOIN acdExternalCourse B
                    ON ( A.externalCourseIdHs = B.externalCourseId )
        LEFT JOIN ONLY basLegalPerson C
                    ON ( A.institutionIdHs = C.personId )
             LEFT JOIN basCity D
                    ON ( A.cityIdHs = D.cityId )
                 WHERE A.personId = ?';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $personId));

        if ( count($result) == 0 )
        {
            return null;
        }

        $physicalPersonStudent = new basPhysicalPersonStudent();
        list ( $physicalPersonStudent->externalCourseIdHs,
               $physicalPersonStudent->externalCourseHsName,
               $physicalPersonStudent->institutionIdHs,
               $physicalPersonStudent->institutionHsName,
               $physicalPersonStudent->cityIdHs,
               $physicalPersonStudent->cityHsName,
               $physicalPersonStudent->yearHs,
               $physicalPersonStudent->isInsured,
               $physicalPersonStudent->passive,
               $physicalPersonStudent->stateIdHs,
               $physicalPersonStudent->sex) = $result[0];

        //put into physicalPersonStudent attributes all person attributes
        $array = get_object_vars($physicalPerson);
        foreach ( $array as $key => $row )
        {
            $physicalPersonStudent->$key = $physicalPerson->$key;
        }

        return $physicalPersonStudent;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchPhysicalPersonStudent($filters)
    {
        $sql = 'SELECT C.personId,
                       C.personDv,
                       C.personMask,
                       C.name,
                       C.shortName,
                       C.cityId,
                       B.name,
                       C.zipCode,
                       D.name || \' \' || C.location AS location,
                       C.complement,
                       C.neighborhood,
                       C.email,
                       C.emailAlternative,
                       C.url,
                       TO_CHAR(C.dateIn,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       C.password,
                       C.isAllowPersonalData
             FROM ONLY basPhysicalPersonStudent A
       INNER JOIN ONLY basPhysicalPerson C
                    ON (C.personId = A.personId)
             LEFT JOIN basCity B
                    ON (B.cityId = C.cityId)
             LEFT JOIN basLocationType D
                    ON ( A.locationTypeId = D.locationTypeId )';

        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND A.personId = ? ';
            $args[] = $filters->personId;
        }
        if ( strlen($filters->name) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?) ';
            $args[] = $filters->name . '%';
        }
        if ( strlen($filters->email) > 0 )
        {
            $where .= ' AND A.email ILIKE ? ';
            $args[] = $filters->email;
        }
        if ( strlen($filters->emailAlternative) > 0 )
        {
            $where .= ' AND A.emailAlternative ILIKE ? ';
            $args[] = $filters->emailAlternative;
        }
        
        if ( strlen($filters->identifier) > 0 )
        {
            $where .= ' AND C.identifier = ? ';
            $args[] = $filters->identifier;
        }

        $result = null;
        if ( strlen($where) > 0 )
        {
            $sql   .= ' WHERE ' . substr($where, 4) . ' ORDER BY C.name';
            $result = $this->getDatabase()->query(SAGU::prepare($sql,$args));
        }

        return $result;
    }
    
    public function insertOrUpdatePhysicalPersonStudent($data)
    {
        $MIOLO = MIOLO::getInstance();
        
        $filters = new stdClass();
        $filters->personId = $data->personId;
        $rows = $this->searchPhysicalPersonStudent($filters);
        $personId = $rows[0][0];
        
        if ( strlen($personId) > 0 )
        {
            $ok = $this->updatePhysicalPersonStudent($data);
        }
        else
        {
            $ok = $this->insertPhysicalPersonStudent($data);
        }
        
        return $ok;
    }


    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertPhysicalPersonStudent($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $physicalPersonStudent = new basPhysicalPersonStudent();
        $vars = get_object_vars($physicalPersonStudent);

        foreach ( $vars as $var => $value )
        {
            if ( strlen($data->$var) > 0 && strtolower($data->$var) != 'null' && $var != 'dateBirth' && $var != 'ipAddress' && $var != 'dateTime' && $var != 'userName' && $var != 'stateId' && $var != 'locationType' && strtolower($var) != 'timestamp' && $var != 'workStartDate' && $var != 'workEndDate' && $var != 'personCpf' && $var != 'personRg' && $var != 'rgOrgan' && $var != 'mioloIdUser' && $var != 'mioloLogin' && $var!= 'mioloPassword' && $var != 'personName' && $var != 'mioloUserPasswd' && $var != 'dateIn')
            {
                $string1 .= $var . ',';
                $string2 .= '?,';
                $args[]   = $data->$var;
            }

            if ( $var == 'dateBirth' )
            {
                $string1 .= $var . ',';
                $string2 .= 'TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),';
                $args[]   = $data->$var;
            }

            if ( $var == 'workStartDate' )
            {
                $string1 .= $var . ',';
                $string2 .= 'TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),';
                $args[]   = $data->$var;
            }

            if ( $var == 'workEndDate' )
            {
                $string1 .= $var . ',';
                $string2 .= 'TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),';
                $args[]   = $data->$var;
            }
            
            if ( $var == 'dateIn')
            {
                $string1 .= $var . ',';
                $string2 .= 'TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),';
                $args[]  .= $data->$var;
            }
        }

        if ( strlen($string1) > 0 )
        {
            $string1 = substr($string1,0,-1);
            $string2 = substr($string2,0,-1);

            $stringSex  = stripos($string1, 'sex');
            $stringName = stripos($string1, 'name');

            if ( ($stringSex === FALSE) || ($stringName === FALSE) )
            {

                //Sexo, nome, ou ambos não vieram para incluir
                if ( ($stringSex === FALSE) && ($stringName === FALSE) )
                {
                    //Não veio name nem sexo da pessoa
                    $sql    = 'INSERT INTO basPhysicalPersonStudent
                                           ( sex, name, ' . $string1 . ')
                                    VALUES ( \'\', \'\', ' . $string2 . ')';
                }
                elseif ( ($stringSex !== FALSE) && ($stringName === FALSE) )
                {
                    //Não veio name e veio sexo pessoa
                    $sql    = 'INSERT INTO basPhysicalPersonStudent
                                           ( sex, ' . $string1 . ')
                                    VALUES ( \'\', ' . $string2 . ')';
                }
                elseif ( ($stringSex === FALSE) && ($stringName !== FALSE) )
                {
                    //Não veio sexo e veio name da pessoa
                    $sql    = 'INSERT INTO basPhysicalPersonStudent
                                           ( name, ' . $string1 . ')
                                    VALUES ( \'\', ' . $string2 . ')';
                }
            }
            else
            {
                //Vieram sexo e nome da pessoa para incluir
                $sql    = 'INSERT INTO basPhysicalPersonStudent
                                        (' . $string1 . ')
                                 VALUES (' . $string2 . ')';
            }

            $data2 = $this->getPhysicalPerson($data->personId);
            $this->updatePhysicalPerson($data2);

            $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

            $data2 = $this->getPhysicalPerson($data->personId);
            $this->updatePhysicalPerson($data2);

            $this->insertInDefaultGroupStudent($data2);

            return $data;
        }

        return false;
    }
    
    public function insertInDefaultGroupStudent($data)
    {
        $groupId = SAGU::getParameter('BASIC', 'DEFAULT_GROUP_STUDENT_ID');
        $this->insertInDefaultGroup($data->mioloUserName, $groupId);
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updatePhysicalPersonStudent($data)
    {
        $sql = 'UPDATE basPhysicalPersonStudent SET ';

        if ( strlen($data->externalCourseIdHs)>0 )
        {
            $sql   .= ' externalCourseIdHs = ?, ';
            $args[] = $data->externalCourseIdHs;
        }

        if ( strlen($data->institutionIdHs)>0 )
        {
            $sql   .= ' institutionIdHs = ?, ';
            $args[] = $data->institutionIdHs;
        }

        if ( strlen($data->cityIdHs)>0 )
        {
            $sql   .= ' cityIdHs = ?, ';
            $args[] = $data->cityIdHs;
        }

        if ( strlen($data->yearHs)>0 )
        {
            $sql   .= ' yearHs = ?, ';
            $args[] = $data->yearHs;
        }

        if ( strlen($data->isInsured)>0 )
        {
            $sql   .= ' isInsured = ?, ';
            $args[] = $data->isInsured;
        }

        if ( strlen($data->passive)>0 )
        {
            $sql   .= ' passive = ?, ';
            $args[] = $data->passive;
        }

        if ( count($args)>0 )
        {
            $args[] = $data->personId;
            $sql .= ' WHERE personId = ?';
            $sql = str_replace(',  WHERE',' WHERE',$sql);

            $sqls = SAGU::prepare($sql, $args);

            for ( $i=0; $i<count($sqls); $i++ )
            {
                $result = $this->getDatabase()->execute($sqls[$i]);
            }
            
            $this->insertInDefaultGroupStudent($data);

            return $result;
        }
    }

    /**
     * Get needed informations to selective process
     *
     * @param $personId (string): Primary key for deletion
     * @return (array): Array with the needed informations
     *
     **/
    public function getInstitutionHsAndCityHs($personId)
    {
        $sql = 'SELECT institutionIdHs,
                       cityIdHs
                  FROM basPhysicalPersonStudent
                 WHERE personId = ?';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $personId));

        $data = new stdClass();
        list( $data->institutionIdHs,
              $data->cityIdHs) = $result[0];

        return $data;
    }

    /**
     * Update Institution Id Hs And City Id Hs
     *
     * @param $personId (string): Primary key for deletion
     * @return (array): Array with the needed informations
     *
     **/
    public function updateInstitutionIdHsAndCityIdHs($institutionIdHs, $cityIdHs, $personId)
    {
        $sql = "UPDATE basPhysicalPersonStudent
                   SET institutionIdHs = ?,
                       cityIdHs = ?
                 WHERE personid = ?";

        $args[] = $institutionIdHs;
        $args[] = $cityIdHs;
        $args[] = $personId;

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $personId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deletePhysicalPersonStudent($personId)
    {
        $sql = 'DELETE FROM ONLY basPhysicalPersonStudent
                           WHERE personId = ?';

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $personId));

        return $result;
    }
}
?>
