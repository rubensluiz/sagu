<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * File to manipulate basSector on system
 *
 * @author William Prigol Lopes [william] [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * William Prigol Lopes [william] [william@solis.coop.br]
 * 
 * @since
 * Class created on 02/05/2005
 *
 **/

/**
 * Class to manipulate the basBasicLocation table
 *
**/
class BusinessBasicBusSector extends sBusiness
{
   /**
    * Insert a specific sector
    *
    * @param $data (object): sector object
    *
    * @return (boolean): True if succed otherwise false
    *
   **/
   public function insertSector($data)
    {
       $query = SDatabase::query("select nextval('seq_sectorid'::regclass)");
       $sectorId = $query[0][0];
       
        $sql = ' INSERT INTO basSector
                            (sectorId,
                             description,
                             email,
                             iscoordinatorsSector)
                      VALUES (?, UPPER(?), ?, COALESCE(?, TRUE))';
        $args = array( $sectorId,
                       $data->description,
                       $data->email,
                       $data->iscoordinatorsSector );

        $db  = $this->getDatabase();
        $ret = $db->execute(SAGU::prepare($sql, $args, false) );
        
        return $ret ? $sectorId : false;
    }

   /**
    *
    * get a specific sector
    *
    * @param $sectorId (int): Primary key for sector
    *
    * @return (object): sector object referred by primary key
    *
   **/
   public function getSector($sectorId)
    {
        $sql = ' SELECT description,
                        email,
                        iscoordinatorsSector,
                        userName,
                        TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\')
                   FROM ONLY basSector 
                  WHERE sectorId = ? ';
        $args = array($sectorId);
        
        $db = $this->getDatabase();
        $ret = $db->query(SAGU::prepare($sql, $args));
        
        $ret=$ret[0];
        
        $return = new basSector;
        $return->sectorId             = $sectorId;
        $return->description          = $ret[0];
        $return->email                = $ret[1];
        $return->iscoordinatorsSector = $ret[2];
        $return->userName             = $ret[3];
        $return->dateTime             = $ret[4];
        return $return;
    }

   /**
    * Update a specific sector
    *
    * @param $data (object): Sector object containing data to update
    *
    * @return (boolean): True if succed otherwise false
    *
   **/
   public function updateSector($data)
    {
        $sql = ' UPDATE basSector
                    SET description = UPPER(?),
                        email = ?,
                        iscoordinatorsSector = COALESCE(?, TRUE)
                  WHERE sectorId = ? ';
        $args = array($data->description,
                      $data->email,
                      $data->iscoordinatorsSector,
                      $data->sectorId);

        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args, false);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $ret = $db->execute($sqls[$i]);
        }

        
        return $ret;
    }

   /**
    * Search a specific sector filtering by specific fields
    *
    * @param $range (object): MIOLO PageNavigator Object
    * @param $filter (object): Object containing filters
    *
    * @return (array): Array containing a sector list
    *
   **/
   public function searchSector($filter)
    {
        $sql = ' SELECT sectorId,
                        description,
                        email,
                        isCoordinatorsSector
                   FROM ONLY basSector ';

        if (strlen($filter->sectorId)>0 )
        {
            $where.= ' AND sectorId = ? ';
            $args[] = $filter->sectorId;
        }

        if (strlen($filter->description)>0 )
        {
            $where.= ' AND UNACCENT(description) ilike UNACCENT(?) ';
            $args[] = $filter->description .'%';
        }
        if (strlen($filter->email)>0 )
        {
            $where.= ' AND email ilike ? ';
            $args[] = $filter->email . '%';
        }
        if (strlen($filter->isCoordinatorsSector)>0 )
        {
            $where.= ' AND isCoordinatorsSector = ? ';
            $args[] = $filter->isCoordinatorsSector;
        }



        if (strlen($where)>0 )
        {
            $sql.= ' WHERE '.substr($where, 4, strlen($where)).' ORDER BY description ';
            $db = $this->getDatabase();
            $ret = $db->query(SAGU::prepare($sql, $args));
            
            return $ret;
        }
        return null;
                 
    }
    
   /**
    * delete a specific sector
    *
    * @param $sectorId (int): Sector object
    *
    * @return (boolean): True if succed otherwise fails
    *
   **/
   public function deleteSector($sectorId)
    {
        $sql = ' DELETE FROM basSector
                       WHERE sectorId = ? ';

        $db = $this->getDatabase();
        $ret = $db->execute(SAGU::prepare($sql, $sectorId));
        
        return $ret;
    }

   /**
    * List all sectors
    *
    * @return (array): Array containing all sectors
    *
   **/
   public function listSector()
    {
        $sql = ' SELECT sectorId,
                        description
                   FROM ONLY basSector 
               ORDER BY description';

        $db  = $this->getDatabase();
        $ret = $db->queryRange(SAGU::prepare($sql, $args), $range);
        
        return $ret;
    }
}
?>
