<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for basProfessionalActivityPeople table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 12/09/2005
 *
 **/

/**
 * Class to manipulate the basProfessionalActivityPeople table
 **/
class BusinessBasicBusProfessionalActivityPeople extends sBusiness
{
    /**
     * Return a specific record from the database
     *
     * @param $professionalActivityPeopleId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getProfessionalActivityPeople($professionalActivityPeopleId)
    {
        $sql = 'SELECT A.professionalActivityPeopleId,
                       A.personId,
                       C.name,
                       A.professionalActivityId,
                       B.description,
                       A.legalPersonId,
                       D.name,
                       TO_CHAR(A.beginDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(A.endDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.professionalActivityLinkTypeId,
                       E.description,
                       A.professionalActivityAgentId,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM basProfessionalActivityPeople A
             LEFT JOIN basProfessionalActivity B
                 USING (professionalActivityId)
        LEFT JOIN ONLY basPerson C
                 USING (personId)
        LEFT JOIN ONLY basLegalPerson D
                 USING (personId)
             LEFT JOIN basProfessionalActivityLinkType E
                 USING (professionalActivityLinkTypeId)
                 WHERE A.professionalActivityPeopleId = ?';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $professionalActivityPeopleId));
        

        $professionalActivityPeople = new basProfessionalActivityPeople();
        list ( $professionalActivityPeople->professionalActivityPeopleId,
               $professionalActivityPeople->personId,
               $professionalActivityPeople->personName,
               $professionalActivityPeople->professionalActivityId,
               $professionalActivityPeople->professionalActivityDescription,
               $professionalActivityPeople->legalPersonId,
               $professionalActivityPeople->legalPersonName,
               $professionalActivityPeople->beginDate,
               $professionalActivityPeople->endDate,
               $professionalActivityPeople->professionalActivityLinkTypeId,
               $professionalActivityPeople->professionalActivityLinkTypeDescription,
               $professionalActivityPeople->professionalActivityAgentId,
               $professionalActivityPeople->userName,
               $professionalActivityPeople->dateTime,
               $professionalActivityPeople->ipAddress ) = $result[0];

        return $professionalActivityPeople; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchProfessionalActivityPeople($filters)
    {
        $sql = 'SELECT A.professionalActivityPeopleId,
                       A.personId,
                       C.name,
                       A.professionalActivityId,
                       B.description,
                       A.legalPersonId,
                       D.name,
                       TO_CHAR(A.beginDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(A.endDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.professionalActivityLinkTypeId,
                       E.description,
                       A.professionalActivityAgentId,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM basProfessionalActivityPeople A
             LEFT JOIN basProfessionalActivity B
                    ON (A.professionalActivityId = B.professionalActivityId)
       INNER JOIN ONLY basPerson C
                    ON (C.personId = A.personId)
       INNER JOIN ONLY basLegalPerson D
                    ON (D.personId = A.legalPersonId)
       INNER JOIN ONLY basProfessionalActivityLinkType E
                    ON (E.professionalActivityLinkTypeId = A.professionalActivityLinkTypeId) ';

        if ( strlen($filters->professionalActivityPeopleId) > 0 )
        {
            $where .= ' AND A.professionalActivityPeopleId = ? ';
            $args[] = $filters->professionalActivityPeopleId;
        }

        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND A.personId = ? ';
            $args[] = $filters->personId;
        }

        if ( strlen($filters->personName) > 0 )
        {
            $where .= ' AND C.name ILIKE ? ';
            $args[] = $filters->personName;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY C.name, A.beginDate, B.description';
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertProfessionalActivityPeople($data)
    {
        $sql = 'INSERT INTO basProfessionalActivityPeople
                            (professionalActivityId,
                             personId,
                             legalPersonId,
                             beginDate,
                             endDate,
                             professionalActivityLinkTypeId,
                             professionalActivityAgentId)
                     VALUES (?,?,?,TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                             TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),?,?)';

        $args = array( $data->professionalActivityId,
                       $data->personId,
                       $data->legalPersonId,
                       $data->beginDate,
                       $data->endDate,
                       $data->professionalActivityLinkTypeId,
                       $data->professionalActivityAgentId );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateProfessionalActivityPeople($data)
    {
        $sql = 'UPDATE basProfessionalActivityPeople
                   SET professionalActivityId          = ?,
                       personId                        = ?,
                       legalPersonId                   = ?,
                       beginDate                       = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       endDate                         = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       professionalActivityLinkTypeId  = ?,
                       professionalActivityAgentId     = ?
                 WHERE professionalActivityPeopleId    = ?';

        $args = array( $data->professionalActivityId,
                       $data->personId,
                       $data->legalPersonId,
                       $data->beginDate,
                       $data->endDate,
                       $data->professionalActivityLinkTypeId,
                       $data->professionalActivityAgentId,
                       $data->professionalActivityPeopleId );

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $professionalActivityPeopleId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteProfessionalActivityPeople($professionalActivityPeopleId)
    {
        $sql = 'DELETE FROM basProfessionalActivityPeople
                      WHERE professionalActivityPeopleId = ?';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $professionalActivityPeopleId));
        

        return $result;
    }

}

?>
