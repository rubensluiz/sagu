<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for basCity table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 10/08/2005
 *
 **/

/**
 * Class to manipulate the basCity table
 **/
class BusinessBasicBusCity extends sBusiness
{
    protected $_modoDePaginacaoPorLimitOffset = true;
    
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listCity($countryId=null, $stateId=null)
    {
        $sql = 'SELECT cityId,
                       name,
                       zipCode
                  FROM basCity ';

        if ( strlen($countryId)>0 )
        {
            $where .= ' AND countryId = ? ';
            $args[] = $countryId;
        }

        if ( strlen($stateId)>0 )
        {
            $where .= ' AND stateId = ? ';
            $args[] = $stateId;
        }

        unset($ret);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY name';
        }

        $db = $this->getDatabase();
        $ret = $db->query(SAGU::Prepare($sql, $args));

        return $ret;
    }

    /**
     * Return a specific record from the database
     *
     * @param $cityId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getCity($cityId)
    {
        $city  = new basCity();
        
        if ( strlen($cityId) > 0 )
        {
            $sql = 'SELECT A.cityId,
                           A.name,
                           A.zipCode,
                           A.stateId,
                           B.name,
                           A.countryId,
                           C.name,
                           A.ibgeId,
                           A.userName,
                           TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                           A.ipAddress,
                           A.fronteirico
                      FROM basCity A
                 LEFT JOIN basState B
                        ON ( A.stateId = B.StateId )
                 LEFT JOIN basCountry C
                        ON ( A.countryId = C.countryId )
                     WHERE A.cityId = ?';

            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $cityId));

            list ( $city->cityId,
            $city->name,
            $city->zipCode,
            $city->stateId,
            $city->stateName,
            $city->countryId,
            $city->countryName,
            $city->ibgeId,
            $city->userName,
            $city->dateTime,
            $city->ipAddress,
            $city->fronteirico) = $result[0];
        }

        return $city;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchCity($filters)
    {
        $sql = 'SELECT A.cityId,
                       A.name,
                       A.zipCode,
                       A.stateId,
                       B.name,
                       A.countryId,
                       C.name,
                       A.ibgeId,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress,
                       A.fronteirico
                  FROM basCity A
             LEFT JOIN basState B
                    ON ( A.stateId = B.StateId AND A.countryId = B.countryId )
             LEFT JOIN basCountry C
                    ON ( A.countryId = C.countryId ) ' ;

        if ( strlen($filters->cityId) > 0 )
        {
            $where .= ' AND A.cityId = ? ';
            $args[] = $filters->cityId;
        }
        if ( strlen($filters->name) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?) ';
            $args[] = $filters->name . '%';
        }
        if ( strlen($filters->nameUpper) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?) ';
            $args[] = strtoupper($filters->nameUpper);
        }
        if ( strlen($filters->zipCode) > 0 )
        {
            $where .= ' AND A.zipCode = ? ';
            $args[] = $filters->zipCode;
        }
        if ( strlen($filters->stateId) > 0 )
        {
            $where .= ' AND A.stateId = ? ';
            $args[] = $filters->stateId;
        }
        if ( strlen($filters->countryId) > 0 )
        {
            $where .= ' AND A.countryId = ? ';
            $args[] = $filters->countryId;
        }
        if ( strlen($filters->ibgeId) > 0 )
        {
            $where .= ' AND A.ibgeId = ? ';
            $args[] = $filters->ibgeId;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY C.name,
                                                               A.stateId,
                                                               A.name';
            
            $result = SDatabase::query($sql, $args, true, $filters);
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertCity($data)
    {
        $db  = $this->getDatabase();

        $sql = 'SELECT NEXTVAL(\'seq_cityid\')';
        $ret = $db->query(SAGU::prepare($sql,null));

        $data->cityId = $ret[0][0];

        $sql = 'INSERT INTO basCity
                            (cityId,
                             name,
                             zipCode,
                             stateId,
                             countryId,
                             ibgeId,
                             fronteirico)
                     VALUES (?,?,?,?,?,?,?)';

        $args = array( $data->cityId,
        $data->name,
        $data->zipCode,
        $data->stateId,
        $data->countryId,
        $data->ibgeId,
        $data->fronteirico);

        $result = $db->execute(SAGU::prepare($sql, $args));

        if ( $result )
        {
            return $data->cityId;
        }
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateCity($data)
    {
        $sql = 'UPDATE basCity
                   SET name        = ?,
                       zipCode     = ?,
                       stateId     = ?,
                       countryId   = ?,
                       ibgeId      = ?,
                       fronteirico = ?
                 WHERE cityId    = ?';

        $args = array( $data->name,
        $data->zipCode,
        $data->stateId,
        $data->countryId,
        $data->ibgeId,
        $data->fronteirico,
        $data->cityId );

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $cityId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteCity($cityId)
    {
        $sql = 'DELETE FROM basCity
                      WHERE cityId = ?';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $cityId));

        return $result;
    }
    
    /**
     * Processo de unificação de cidade.
     * 
     * @param int $cidadeQueFica
     * @param int $cidadeQueSai
     * @return boolean
     */
    public function unificarCidade($cidadeQueSai, $cidadeQueFica)
    {   
        $sql = "SELECT * FROM unificarCidade(?, ?);";
        $return = $this->getDatabase()->execute(SAGU::prepare($sql, array($cidadeQueSai, $cidadeQueFica)));

        return $return;
    }
}
?>
