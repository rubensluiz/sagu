<?php

/**
 * <--- Copyright 2005-2012 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Nataniel Ingor da Silva [nataniel@solis.coop.br]
 *
 * @since
 * Class created on 08/04/2014
 *
 */

class BusinessBasicBusConfiguracaoTrocaDeSenha extends sBusiness
{
    /*
     * Inserção
     */
    public function insertConfiguracaoTrocaDeSenha($data)
    {
        $sqlId = " SELECT nextval('basconfiguracaotrocadesenha_configuracaotrocadesenhaid_seq')";
        $idTrocaDeSenha = $this->getDatabase()->query(SAGU::prepare($sqlId, array()));
                
        $sql = " INSERT INTO basConfiguracaoTrocaDeSenha
                            ( configuracaoTrocaDeSenhaId,
                              descricao,
                              dataInicial,
                              dataFinal,
                              mensagem,
                              concordarParaProsseguir )
                      VALUES ( ?, ?, ?, ?, ?, ? ) ";
        
        $args[] = $idTrocaDeSenha[0][0];
        $args[] = $data->descricao;
        $args[] = $data->dataInicial;
        $args[] = $data->dataFinal;
        $args[] = $data->mensagem;
        $args[] = $data->concordarParaProsseguir;
        
        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args, false));
        
        if( $result == DB_TRUE )
        {
            foreach( $data->grupos as $key => $group )
            {
                $sqlGroups = " INSERT INTO basGrupoTrocaDeSenha
                                           ( configuracaoTrocaDeSenhaId,
                                             idGroup )
                                    VALUES ( ?, ? ) ";
                
                $argsGroups = array();
                $argsGroups[] = $idTrocaDeSenha[0][0]; //id da configuração cadastrada anteriormente
                $argsGroups[] = $group;
                                
                $ok = $this->getDatabase()->execute(SAGU::prepare($sqlGroups, $argsGroups));
            }
        }
        else
        {
            $ok = $result;
        }
        
        return $ok;
    }
    
    /*
     * Atualização
     */
    public function updateConfiguracaoTrocaDeSenha($data)
    {
        $sql = ' UPDATE basConfiguracaoTrocaDeSenha
                    SET descricao = ?,
                        dataInicial = ?,
                        dataFinal = ?,
                        mensagem = ?,
                        concordarParaProsseguir = ?
                  WHERE configuracaoTrocaDeSenhaId = ? ';
        
        $args[] = $data->descricao;
        $args[] = $data->dataInicial;
        $args[] = $data->dataFinal;
        $args[] = $data->mensagem;
        $args[] = $data->concordarParaProsseguir;
        $args[] = $data->configuracaoTrocaDeSenhaId;
        
        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args, false));
        
        $sqlDeleteGroups = " DELETE FROM basGrupoTrocaDeSenha WHERE configuracaoTrocaDeSenhaId = ? ";
        $this->getDatabase()->execute(SAGU::prepare($sqlDeleteGroups, array($data->configuracaoTrocaDeSenhaId)));
        
        if( $result == DB_TRUE )
        {
            foreach( $data->grupos as $key => $group )
            {
                $sqlGroups = " INSERT INTO basGrupoTrocaDeSenha
                                           ( configuracaoTrocaDeSenhaId,
                                             idGroup )
                                    VALUES ( ?, ? ) ";
                
                $argsGroups = array();
                $argsGroups[] = $data->configuracaoTrocaDeSenhaId; //id da configuração cadastrada anteriormente
                $argsGroups[] = $group;
                                
                $ok = $this->getDatabase()->execute(SAGU::prepare($sqlGroups, $argsGroups));
            }
        }
        else
        {
            $ok = $result;
        }
        
        return $ok;
        
    }
    
    /*
     * Search para a grid de consulta
     */
    public function searchConfiguracaoTrocaDeSenha($filters)
    {
        $sql= ' SELECT configuracaoTrocaDeSenhaId,
                       descricao,
                       TO_CHAR(dataInicial, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(dataFinal, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                  FROM basConfiguracaoTrocaDeSenha ';

        if ( strlen($filters->configuracaoTrocaDeSenhaId) > 0 )
        {
            $where .= ' AND configuracaoTrocaDeSenhaId = ? ';
            $args[] = $filters->configuracaoTrocaDeSenhaId;
        }
        if ( strlen($filters->descricao) > 0 )
        {
            $where .= ' AND UNACCENT(descricao) ILIKE UNACCENT(?) ';
            $args[] = $filters->descricao . '%';
        }
        if ( strlen($filters->dataInicial) > 0 )
        {
            $where .= ' AND dataInicial = ? ';
            $args[] = $filters->dataInicial;
        }
        if ( strlen($filters->dataFinal) > 0 )
        {
            $where .= ' AND dataFinal = ? ';
            $args[] = $filters->dataFinal;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY configuracaoTrocaDeSenhaId, descricao';
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }
    
    /*
     * Obtem as configurações de uma determinada solicitação
     */
    public function getConfiguracaoTrocaDeSenha($configuracaoTrocaDeSenhaId)
    {
        $sql = ' SELECT configuracaoTrocaDeSenhaId,
                        descricao,
                        TO_CHAR(dataInicial, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                        TO_CHAR(dataFinal, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                        mensagem,
                        concordarParaProsseguir
                   FROM basConfiguracaoTrocaDeSenha
                  WHERE configuracaoTrocaDeSenhaId = ? ';
        
        $result = $this->getDatabase()->query(SAGU::prepare($sql, array($configuracaoTrocaDeSenhaId)));
        
        $sqlGroups = ' SELECT idGroup
                         FROM basGrupoTrocaDeSenha 
                        WHERE configuracaoTrocaDeSenhaId = ? ';
                
        $resultGroups = $this->getDatabase()->query(SAGU::prepare($sqlGroups, array($configuracaoTrocaDeSenhaId)));
        
        $data->configuracaoTrocaDeSenhaId = $result[0][0];
        $data->descricao = $result[0][1];
        $data->dataInicial = $result[0][2];
        $data->dataFinal = $result[0][3];
        $data->mensagem = $result[0][4];
        $data->concordarParaProsseguir = $result[0][5];
        
        foreach( $resultGroups as $key => $grupo )
        {
            $grupos[$grupo[0]] = $grupo[0];
        }
        
        $data->grupos = $grupos;
        
        return $data;
    }
    
    /*
     * Verifica se existe uma ocorrência de troca de senha para o periodo de datas informado
     */
    public function verificaOcorrenciaDeDatas($filters)
    {
        $sql = ' SELECT count(*) > 0
                   FROM basConfiguracaoTrocaDeSenha
                  WHERE (datetodb(?) BETWEEN dataInicial AND dataFinal
                     OR datetodb(?) BETWEEN dataInicial AND dataFinal)
                    AND COALESCE(?, 0) != configuracaoTrocaDeSenhaId ';
        
        $args[] = $filters->dataInicial;
        $args[] = $filters->dataFinal;
        $args[] = $filters->configuracaoTrocaDeSenhaId;
                        
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        
        return $result[0][0];
    }
    
    /*
     * Deleta uma configuração de troca de senha
     */
    public function deleteConfiguracaoTrocaDeSenha($configuracaoTrocaDeSenhaId)
    {
        try
        {
            SDatabase::beginTransaction();
            
            $sqlGroups = ' DELETE FROM basGrupoTrocaDeSenha WHERE configuracaoTrocaDeSenhaId = ? ';

            $this->getDatabase()->query(SAGU::prepare($sqlGroups, array($configuracaoTrocaDeSenhaId)));

            $sql = ' DELETE FROM basConfiguracaoTrocaDeSenha WHERE configuracaoTrocaDeSenhaId = ? ';

            $ok = $this->getDatabase()->query(SAGU::prepare($sql, array($configuracaoTrocaDeSenhaId)));
            
            SDatabase::commit();
        }
        catch ( Exception $e )
        {
            SDatabase::rollback();
            throw new Exception(_M('A configuração selecionada não pode ser excluída, pois possuí dependências: já foi registrado troca de senha para esta solicitação.'));
        }
        
        return $ok;
    }
    
    /*
     * Verifica se existe uma configuração de troca de senha para a data informada
     */
    public function verficaConfiguracao($data)
    {
        $sql = ' SELECT configuracaoTrocaDeSenhaId
                   FROM basConfiguracaoTrocaDeSenha 
                  WHERE datetodb(?) >= dataInicial
                    AND CASE WHEN dataFinal IS NOT NULL
                             THEN 
                                 datetodb(?) <= dataFinal
                             ELSE
                                 TRUE 
                        END ';
        
        $result = $this->getDatabase()->query(SAGU::prepare($sql, array($data, $data)));
        
        if( strlen($result[0][0]) > 0 )
        {
            $configuracao = $this->getConfiguracaoTrocaDeSenha($result[0][0]);
        }
        
        return strlen($result[0][0]) > 0 ? $configuracao : false;
    }
    
    /*
     * Verifica se existe uma configuração de alteração de senha para o grupo da pessoa logada
     * e se para essa configuração, a pessoa já não tenha alterado sua senha 
     */
    public static function verificaTrocaDeSenha()
    {
        $MIOLO     = MIOLO::getInstance();
        $loginUser = $MIOLO->getLogin();
                
        $groupUser = new BusinessAdminUser();        
        $grupos = $groupUser->listGroupsByUser($loginUser->idkey);
        
        $hoje = SAGU::getDateNow();
        
        $busConfiguracaoTrocaDeSenha = new BusinessBasicBusConfiguracaoTrocaDeSenha();
        $configuracao = $busConfiguracaoTrocaDeSenha->verficaConfiguracao($hoje);
                
        $solicitaTroca = DB_FALSE;
        
        foreach( $configuracao->grupos as $keys => $grups)
        {    
            foreach( $grupos as $key => $grupo )
            {
                $data = null;
                $data->userId = $loginUser->idkey;
                $data->configuracaoTrocaDeSenhaId = $configuracao->configuracaoTrocaDeSenhaId;
                
                if( $grupo[0] == $grups && $busConfiguracaoTrocaDeSenha->verificaSeTrocaDeSenhaFoiRealizada($data) == DB_FALSE )
                {
                    $solicitaTroca = DB_TRUE;
                }
            }
        }
        
        // Verifica se a senha no AD, caso esteja configurado, expirou, ou necessita ser atualizada.
        $senhaADExpirada = $MIOLO->session->getValue("senhaADExpirada");
        $solicitaTroca = ($senhaADExpirada == DB_TRUE) ? DB_TRUE : $solicitaTroca;
                        
        return $solicitaTroca;
    }
    
    /*
     * Verifica se o usuário já alterou a sua senha para aquela solicitação de alteração
     */
    public function verificaSeTrocaDeSenhaFoiRealizada($data)
    {
        $sql = ' SELECT count(*) > 0 
                   FROM bassolicitacaotrocadeSenha
                  WHERE configuracaoTrocaDeSenhaId = ?
                    AND userId = ? ';
        
        $args[] = $data->configuracaoTrocaDeSenhaId;
        $args[] = $data->userId;
        
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
                
        return $result[0][0];
    } 
    
    /*
     * Salva a alteração de senha para que não seja mais solicitado a alteração, referente a mesma configuração
     */
    public function salvaAlteracaoDeSenha($data)
    {
        $sql = ' INSERT INTO bassolicitacaotrocadesenha 
                             ( configuracaoTrocaDeSenhaId,
                               userId,
                               concordo )
                      VALUES ( ?, ?, ? ) ';
        
        $args[] = $data->configuracaoTrocaDeSenhaId;
        $args[] = $data->userId;
        $args[] = $data->concordo;
        
        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));
        
        return $result;
        
    }
}

