<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for basSpecialNecessity table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 15/08/2005
 *
 **/

/**
 * Class to manipulate the basSpecialNecessity table
 **/
class BusinessBasicBusSpecialNecessity extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listSpecialNecessity()
    {
        $db  = $this->getDatabase();
        $sql = 'SELECT specialNecessityId,
                       description
                  FROM basSpecialNecessity   
              ORDER BY description';

        $ret = $db->query($sql);

        return $ret;
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $specialNecessityId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getSpecialNecessity($specialNecessityId)
    {
        $sql = 'SELECT specialNecessityId,
                       description,
                       easyAccess,
                       accompanimentNeeds,
                       isPermanent,
                       howMuchWeeks,
                       to_char(beginDate, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       userName,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipAddress
                  FROM basSpecialNecessity
                 WHERE specialNecessityId = ?';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $specialNecessityId));


        $specialNecessity = new basSpecialNecessity();
        list ( $specialNecessity->specialNecessityId,
               $specialNecessity->description,
               $specialNecessity->easyAccess,
               $specialNecessity->accompanimentNeeds,
               $specialNecessity->isPermanent,
               $specialNecessity->howMuchWeeks,
               $specialNecessity->beginDate,
               $specialNecessity->userName,
               $specialNecessity->dateTime,
               $specialNecessity->ipAddress ) = $result[0];

        return $specialNecessity; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchSpecialNecessity($filters)
    {

        $sql= 'SELECT specialNecessityId,
                      description,
                      easyAccess,
                      accompanimentNeeds,
                      isPermanent,
                      howMuchWeeks,
                      to_char(beginDate, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')
                 FROM basSpecialNecessity ';

        if ( strlen($filters->specialNecessityId) > 0 )
        {
            $where .= ' AND specialNecessityId = ? ';
            $args[] = $filters->specialNecessityId;
        }
        if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND UNACCENT(description) ILIKE UNACCENT(?) ';
            $args[] = $filters->description .'%';
        }
        if ( strlen($filters->beginDate) > 0 )
        {
            $where .= ' AND beginDate = to_date(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\') ';
            $args[] = $filters->beginDate;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE '. substr($where, 4) .' ORDER BY description';
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertSpecialNecessity($data)
    {
        //Realizado checagem devido a importação csv
        $data->easyAccess ? $data->easyAccess : $data->easyAccess = 'f';
        $data->accompanimentNeeds ? $data->accompanimentNeeds : $data->accompanimentNeeds = 'f';
        $data->isPermanent ? $data->isPermanent : $data->isPermanent = 'f';
        
        $sql = 'INSERT INTO basSpecialNecessity
                            (description,
                             easyAccess,
                             accompanimentNeeds,
                             isPermanent,
                             howMuchWeeks,
                             beginDate) 
                     VALUES (?,?,?,?,?,to_date(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'))';

        $args   = array( $data->description,
                         $data->easyAccess,
                         $data->accompanimentNeeds,
                         $data->isPermanent,
                         $data->howMuchWeeks,
                         $data->beginDate );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function updateSpecialNecessity($data)
    {
        $sql = 'UPDATE basSpecialNecessity
                   SET description        = ?,
                       easyAccess         = ?,
                       accompanimentNeeds = ?,
                       isPermanent        = ?,
                       howMuchWeeks       = ?,
                       beginDate          = to_date(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')
                 WHERE specialNecessityId = ?';

        $args = array( $data->description,
                       $data->easyAccess,
                       $data->accompanimentNeeds,
                       $data->isPermanent,
                       $data->howMuchWeeks,
                       $data->beginDate,
                       $data->specialNecessityId );

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $specialNecessityId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function deleteSpecialNecessity($specialNecessityId)
    {
        $sql = 'DELETE FROM basSpecialNecessity
                      WHERE specialNecessityId = ?';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $specialNecessityId));

        return $result;
    }
}
?>
