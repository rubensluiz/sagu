<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for basFile table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coo.br]
 *
 * @since
 * Class created on 15/08/2005
 *
 **/

$MIOLO = MIOLO::getInstance();
$MIOLO->uses( 'types.class', 'finance' );

/**
 * Class to manipulate the basFile table
 **/
class BusinessBasicBusFile extends sBusiness
{

    /**
     * Upload default path
     * @var <string>
     */
    private $uploadPath;
    
    /**
     *
     * @var string
     */
    public $defaultContentType;

    /**
     * Altera o nome padrao do arquivo
     *
     * @var string
     */
    private $customFileName;
    
    /**
     * Mover os arquivos para subdiretorios (ANO, MES)
     * 
     * @var boolean
     */
    private $splitDirByDate = true;
    
    /**
     * Constructor of busFile
     */
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $this->uploadPath = $MIOLO->GetModulePath('basic', SAGU::getParameter('BASIC', 'UPLOAD_PATH'));
        $this->defaultContentType = 'application/octet-stream';

        parent::__construct();
    }
    
    /**
     *
     * @return string
     */
    public function getUploadPath()
    {
        return $this->uploadPath;
    }

    public function setUploadPath($uploadPath)
    {
        $this->uploadPath = $uploadPath;
    }

    /**
     *
     * @return string
     */
    public function getCustomFileName()
    {
        return $this->customFileName;
    }

    public function setCustomFileName($customFileName)
    {
        $this->customFileName = $customFileName;
    }
    
    public function getSplitDirByDate()
    {
        return $this->splitDirByDate;
    }

    public function setSplitDirByDate($splitDirByDate)
    {
        $this->splitDirByDate = $splitDirByDate;
    }
    
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listFile()
    {
        $db  = $this->getDatabase();
        $sql = 'SELECT fileId,
                       uploadfilename,
                       contenttype,
                       filepath
                  FROM basFile
              ORDER BY uploadfilename';
        $ret = $db->query($sql);

        return $ret;
    }

    /**
     * Return a specific record from the database
     *
     * @param $fileId (integer): Primary key of the record to be retrieved
     *
     * @return BasFile
     *
     **/
    public function getFile($fileId)
    {
        $sql = 'SELECT fileId,
                       uploadfilename,
                       contenttype,
                       filepath,
                       filepath || fileId,
                       userName,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipAddress
                  FROM basFile
                 WHERE fileId = ?';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $fileId));


        $file = new basFile();
        list ( $file->fileId,
               $file->uploadFileName,
               $file->contentType,
               $file->filePath,
               $file->absolutePath,
               $file->userName,
               $file->dateTime,
               $file->ipAddress ) = $result[0];

        return $file;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchFile($filters)
    {
        $sql= 'SELECT fileId,
                      uploadfilename,
                      contenttype,
                      filepath
                 FROM basFile ';

        if ( strlen($filters->fileId) > 0 )
        {
            $where .= ' AND fileId = ? ';
            $args[] = $filters->fileId;
        }

        if ( strlen($filters->uploadFileName) > 0 )
        {
            $where .= ' AND uploadfilename ILIKE ? ';
            $args[] = $filters->uploadFileName . '%';
        }

        if ( strlen($filters->contentType) > 0 )
        {
            $where .= ' AND contentType ILIKE ? ';
            $args[] = $filters->contentType . '%';
        }

        if ( strlen($filters->filePath) > 0 )
        {
            $where .= ' AND filePath ILIKE ? ';
            $args[] = $filters->filePath . '%';
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY uploadFileName';
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }
    
    /**
     * Insere arquivo a partir de uma string.
     * Util para casos onde nao tem-se um arquivo fisico salvo no disco, apenas dados na memoria.
     * 
     * @return int
     */
    public function insertFileFromBuffer($buffer, $fileName = null)
    {
        $tmpPath = '/tmp/sagu_tmp_file_' . rand();
        
        file_put_contents($tmpPath, $buffer);
        
        $fdata = new stdClass();
        $fdata->uploadFileName = SAGU::NVL($fileName, basename($tmpPath));
        $fdata->contentType = mime_content_type($tmpPath);
        
        return $this->insertFile($fdata, $tmpPath);
    }
    
    /**
     * Simplifica funcao insertFile().
     * 
     * @param $filePath string Caminho absoluto do arquivo no disco.
     * @return int Id do arquivo (fileId)
     */
    public function insertFileSimple($filePath)
    {
        $fdata = new stdClass();
        $fdata->uploadFileName = basename($filePath);
        $fdata->contentType = mime_content_type($filePath);
        
        return $this->insertFile($fdata, $filePath);
    }
    
    /**
     * Simplifica insercao de arquivo vindo da variavel $_FILES
     * 
     * @param $data Array dados oriundos do upload de arquivo nativo do PHP
     * @return int Id do arquivo (fileId)
     */
    public function insertFileUpload($data)
    {
        $fileData = new stdClass();
        $fileData->uploadFileName = $data['name'];
        $fileData->contentType = mime_content_type($data['tmp_name']);
        
        return $this->insertFile($fileData, $data['tmp_name']);
    }

    /**
     * Insert a new record
     *
     * @param stdClass $data
     * <br><b>uploadFileName</b> Nome do arquivo
     * <br><b>contentType</b> MIME do arquivo (ex.: image/x-png)
     * <br><b>filePath</b> Path do arquivo (opcional)
     *
     * @param string $tmpFilePath Caminho temporario do arquivo (diretorio + nome do arquivo)
     * 
     * @return int Id do arquivo inserido
     */
    public function insertFile($data, $tmpFilePath, $renameSaveFile = false)
    {
        try
        {
            $db  = $this->getDatabase();
            $sql = 'SELECT NEXTVAL(\'seq_fileid\')';
            $seqFile = $db->query(SAGU::prepare($sql,null));
            $return = false;
        
            if ( strlen($seqFile[0][0]) > 0  )
            {
                if ( strlen($data->uploadFileName)> 0 )
                {
                    if($tmpFilePath)
                    {
                        //File id
                        $fileId = $seqFile[0][0];
                        //File path
                        $filePath = strlen($data->filePath)>0 ? $data->filePath : $this->getDefaultPath();
                        $contentType = strlen($data->contentType)>0? $data->contentType : $this->defaultContentType;

                        $sql = 'INSERT INTO basFile
                                            (fileId,
                                            uploadFileName,
                                            contentType,
                                            filePath)
                                    VALUES (?,?,?,?)';

                        $args = array( $fileId,
                                       $data->uploadFileName,
                                       $contentType,
                                       $filePath
                                     );

                        $result = $db->execute(SAGU::prepare($sql, $args, false));

                        if ( $result )
                        {
                            $return = $fileId;
                        }
                        
                        $nameFile = ($renameSaveFile == true) ? $data->uploadFileName : $fileId;
                        
                        $saveFileToLocal = $this->saveFileToLocal($tmpFilePath, $nameFile, $filePath);

                        if ( !$saveFileToLocal )
                        {
                            $msg = _M('Não foi possível salvar o arquivo no diretório', 'basic');
                            throw new Exception($msg);
                        }
                        
                    }
                    
                }
            }
        }
        catch (Exception $e)
        {
            throw $e;
        }

        return $return;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateFile($data, $tmpFilePath, $renameSaveFile = false)
    {
        //Remove the old file
        $oldFile = new stdClass();
        $oldFile = $this->getFile($data->fileId);

        //New path
        $filePath = strlen($data->filePath)>0 ? $data->filePath : $this->getDefaultPath();
        $contentType = strlen($data->contentType)>0? $data->contentType : $this->defaultContentType;

        $return = false;
        try
        {            
            $sql = 'UPDATE basFile
                       SET uploadFileName = ?,
                           contentType = ?,
                           filePath = ?
                     WHERE fileId = ?';

            $args = array( $data->uploadFileName,
                           $contentType,
                           $filePath,
                           $data->fileId );

            $db = $this->getDatabase();
            $return = $db->execute(SAGU::prepare($sql, $args, false));
            
            $oldFilePath = $oldFile->filePath.$oldFile->fileId;
            
            // Se o arquivo existir, efetua a exclusão, caso contrário somente será necessário fazer o upload.
            if ( file_exists($oldFilePath) )
            {
                //Remove the old file
                $this->validateFileData($oldFile->fileId, $oldFilePath);
                $removeOldFile = $this->removeTheFile($oldFilePath);

                if ( !$removeOldFile )
                {
                    $msg = _M('Erro ao remover o arquivo antigo', 'basic');
                    throw new Exception($msg);
                }
            }
            
            $nameFile = ($renameSaveFile == true) ? $data->uploadFileName : $data->fileId;
            
            //Save the new file in local
            $saveFileToLocal = $this->saveFileToLocal($tmpFilePath, $nameFile, $filePath);
            
            if( !$saveFileToLocal )
            {
                $msg = _M('Não foi possível salvar o arquivo no diretório', 'basic');
                throw new Exception($msg);
            }
        }
        catch (Exception $e)
        {
            throw $e;
        }

        return $return;
    }

    /**
     * Delete a record
     *
     * @param $fileId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteFile($fileId)
    {
        //Removes the directory file
        $file = new stdClass();
        $file = $this->getFile($fileId);
        try 
        {
            $fileId = $file->fileId;
            $filePath = $file->filePath.$file->fileId;
            $this->validateFileData($fileId, $filePath);

            $sql = 'DELETE FROM basFile
                          WHERE fileId = ?';

            $db = $this->getDatabase();
            $result = $db->execute(SAGU::prepare($sql, $fileId));

            //Remove the file
            $removeFile = $this->removeTheFile($filePath);

            if ( !$removeFile )
            {
                $msg = _M('Não foi possível remover o arquivo', 'basic');
                throw new Exception($msg);
            }
        }
        catch (Exception $e)
        {
            throw $e;
        }

        return $result;
    }

    /**
     * Removes the directory file
     * @param <string> $file
     * @return <boolean>
     */
    public function removeTheFile($file)
    {
        try
        {
            $return = unlink($file);

            if( !$return )
            {
                $msg = _M('Erro removendo arquivo antigo', 'basic');
                throw new Exception($msg);
            }
        }
        catch (Exception $e)
        {
            throw $e;
        }

        return $return;
    }

    /**
     * Save uploaded file to local file
     * @param <string> $tmpFilePath
     * @param <int> $fileId
     * @param <string> $filePath
     * @return <boolean>
     */
    private function saveFileToLocal($tmpFilePath, $fileId, $filePath)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $result = false;
        try
        {
            if( strlen($filePath) > 0 )
            {
                $path = $filePath;

                if ( is_writable($filePath) )
                {
                    if( !$this->checksPathFile($tmpFilePath) )
                    {
                        $msg = _M('Caminho temporário inválido. Uma das causas do problema pode ser o parametro upload_max_filesize do php.ini', 'basic');
                        throw new Exception($msg);
                    }
                    if( !$this->checksPathFile($filePath) )
                    {
                        $msg = _M('Caminho inválido', 'basic');
                        throw new Exception($msg);
                    }
                    
                    // Obtem nome do arquivo
                    if ( strlen($this->getCustomFileName()) > 0 )
                    {
                        $fileName = $filePath . '/' . $this->getCustomFileName();
                    }
                    else
                    {
                        $fileName = $filePath.$fileId;
                    }
                    
                    //Copy file
                    $result = copy($tmpFilePath, $fileName);
                    
                    
                    if( !$result )
                    {
                        $msg = _M('Falha ao copiar arquivo', 'basic');
                        throw new Exception($msg);
                    }
                }
                else
                {
                    $msg = _M('Diretório não possui permissão de escrita (@1)', 'basic', $filePath);
                    throw new Exception($msg);
                }
            }
        }
        catch (Exception $e)
        {
            throw $e;
        }
            
        return $result;
    }

    /**
     * Check path exists
     * @param <string> $path
     * @return <boolean>
     */
    public function checksPathFile($path)
    {
        return (file_exists($path));
    }

    /**
     * Creates path for the year if no exists
     * @param <int> $year
     * @return <boolean>
     */
    private function createYearDir($year)
    {   
        $yearPath = $this->checksPathFile($this->uploadPath.$year);

        if( !$yearPath )
        {
            @$yearPath = mkdir($this->uploadPath.$year, 0755, true);
        }
        
        return $yearPath;
    }

    /**
     * Creates path for the month if no exists
     * @param <int> $year
     * @param <int> $month
     * @return <boolean>
     */
    private function createMonthDir($year, $month)
    {
        $monthPath = $this->checksPathFile($this->uploadPath.$year.'/'.$month);

        if( !$monthPath )
        {
            $monthPath = mkdir($this->uploadPath.$year.'/'.$month, 0755, true);
        }

        return $monthPath;
    }

    /**
     * Get default path upload
     * @return <string>
     */
    public function getDefaultPath()
    {
        if ( $this->getSplitDirByDate() )
        {
            //Year
            $year = date("Y");
            //Month
            $month = date("m");

            $return =  $this->uploadPath.$year.'/'.$month.'/';

            try
            {
                if ( !$this->createYearDir($year) )
                {
                    $msg = _M('Erro criando diretório @1', 'basic', $year);
                    throw new Exception($msg);

                    $return = false;
                }
                if( !$this->createMonthDir($year, $month) )
                {
                    $msg = _M('Erro criando diretório @1', 'basic', $month);
                    throw new Exception($msg);

                    $return = false;
                }
            }
            catch ( Exception $e )
            {
                throw $e;
            }
        }
        else
        {
            $return = $this->uploadPath;
        }
        
        return $return;
    }

    /**
     * Return file path
     * @param $file (string): File name
     * @return (varchar): path to file
     */
    public function getFilePath($fileId)
    {
        $file = new stdClass();
        $file = $this->getFile($fileId);

        try
        {
            $fileId = $file->fileId;
            $filePath = $file->filePath.$file->fileId;
            $this->validateFileData($fileId, $filePath);
            
            $return = $filePath;
        }
        catch ( Exception $e )
        {
            throw $e;
        }
        return $return;
    }

    /**
     * Validate fileId and filePath
     * @param <int> $fileId
     * @param <string> $filePath
     */
    private function validateFileData($fileId, $filePath)
    {
        $MIOLO = MIOLO::getInstance();
        try
        {
            //File id
            if( strlen($fileId) == 0 )
            {
                $msg = _M('Arquivo inválido', 'basic');
                throw new Exception($msg . ': ' . $fileId);
            }
            //File path
            if ( !$this->checksPathFile($filePath) )
            {
                $msg = _M('Caminho de arquivo inválido', 'basic');
                throw new Exception($msg . ': ' . $filePath);
            }
        }
        catch ( Exception $ex )
        {
            $MIOLO->error($ex->getMessage());
        }
    }

    /**
     * Get File as string
     * @param <int> $fileId
     * @param <int> $returnArray
     * @return <$buffer>
     */
    public function getFileAsString($fileId, $returnArray = false)
    {
        $file = new stdClass();
        $file = $this->getFile($fileId);
        try
        {
            $fileId = $file->fileId;
            $filePath = $file->filePath.$file->fileId;
            $this->validateFileData($fileId, $filePath);
            
            if ( $returnArray )
            {
                $buffer = file($filePath);
            }
            else
            {
                //String
                $buffer = file_get_contents($filePath);
            }
        }
        catch ( Exception $e )
        {
            throw $e;
        }

        return $buffer;
    }

    /**
     * get file as download
     * @param <type> $fileId
     * @return <type>
     */
    public function getFileAsDownload($fileId, $contentType = 'application/force-download')
    {
        try
        {
            //File
            $file = new stdClass();
            $file = $this->getFile($fileId);
        
            if ( !headers_sent() )
            {
                ob_clean();
                $fileId = $file->fileId;
                $filePath = $file->filePath.$file->fileId;
                $this->validateFileData($fileId, $filePath);
                //File name
                $fileName = $file->uploadFileName;
                //Buffer of the file
                $buffer = file_get_contents($filePath);

                header('Content-Type: ' . $contentType);
                header('Content-Length: ' . strlen($buffer));
                header('Content-disposition: inline; filename="' . $fileName . '"');

                echo $buffer;
                exit;
            }
        }
        catch ( Exception $e )
        {
            throw $e;
        }

        return '';
    }

    /**
     * Obtem a URL de download do arquivo, para poder ser obtido posteriormente
     * Util para casos onde precisa-se de um link estatico para referenciar o arquivo
     *
     * @param int $fileId
     * @param array $options Opcoes adicionais diversas
     * <br><b>permission</b> (boolean) Se deve ja adicionar permissao de download automaticamente (padrao: FALSE)
     *
     * @return string MIOLO link
     */
    public function getUrl($fileId, $options = array())
    {
        //Get defaults
        $options = array_merge(array(
            'permission' => false,
        ), $options);

        if ( $options['permission'] )
        {
            $this->addFilePermission($fileId);
        }

        $MIOLO = MIOLO::getInstance();
        return $MIOLO->getActionUrl('basic', 'main:getfile', null, array('fileId' => $fileId));
    }
    
    /**
     * @return \MLink 
     */
    public function getLink($fileId, $label = null)
    {
        $module = SAGU::getFileModule(__FILE__);
        
        if ( !$label )
        {
            $label = _M('Clique aqui', $module);
        }
        
        $href = $this->getUrl($fileId, array('permission' => true));
        $link = new MLink('linkDl_' . $fileId, $label, $href);
        
        return $link;
    }

    /**
     * Save to local file
     * @param <int> $fileId
     * @param <string> $buffer
     * @return <boolean>
     */
    public function saveToLocalFile($fileId, $buffer)
    {
        //File
        $file = new stdClass();
        $file = $this->getFile($fileId);
        $return = false;
        try
        {
            if ( strlen($file->fileId) > 0 )
            {
                $pathName = $file->filePath . $fileId;
                
                $fp = fopen($pathName, "w");
                if( $fp )
                {
                    $return = fwrite($fp, $buffer);
                    if ( !$return )
                    {
                        $msg = _M('Não foi possível gravar arquivo', 'basic');
                        throw new Exception($msg);
                    }
                }
            }
            else
            {
                $msg = _M('Código de arquivo inválido', 'basic');
                throw new Exception($msg);
            }
        }
        catch ( Exception $e )
        {
            throw $e;
        }
        
        return $return;
    }

    /**
     * Adiciona permissao temporaria, na sessao, para autorizar download para o usuario
     * Esta permissao é verificada no handler basic/handlers/getfile.inc
     *
     * @param int $fileId
     */
    public function addFilePermission($fileId)
    {
        $MIOLO = MIOLO::getInstance();

        $files = (array) $MIOLO->getSession()->getValue('allowFileDownload');

        if ( !in_array($fileId, $files) )
        {
            $files[] = $fileId;
            $MIOLO->getSession()->setValue('allowFileDownload', $files);
        }
    }


    /**
     * Verifica se um arquivo possui permissao temporaria de download
     *
     * @param int $fileId
     */
    public function checkFilePermission($fileId)
    {
        $MIOLO = MIOLO::getInstance();
        $files = (array) $MIOLO->getSession()->getValue('allowFileDownload');

        return in_array($fileId, $files);
    }


    /**
     * Limpa permissoes temporarias para arquivos
     */
    public function clearFilePermission()
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->getSession()->setValue('allowFileDownload', '');
    }
    
    public static function calcDirectorySize($DirectoryPath) {

        // I reccomend using a normalize_path function here
        // to make sure $DirectoryPath contains an ending slash
        // (-> http://www.jonasjohn.de/snippets/php/normalize-path.htm)

        // To display a good looking size you can use a readable_filesize
        // function.
        // (-> http://www.jonasjohn.de/snippets/php/readable-filesize.htm)

        $Size = 0;

        $Dir = opendir($DirectoryPath);

        if (!$Dir)
            return -1;

        while (($File = readdir($Dir)) !== false) {

            // Skip file pointers
            if ($File[0] == '.') continue; 

            // Go recursive down, or add the file size
            if (is_dir($DirectoryPath . $File))            
                $Size += self::calcDirectorySize($DirectoryPath . $File . DIRECTORY_SEPARATOR);
            else 
                $Size += filesize($DirectoryPath . $File);        
        }

        closedir($Dir);

        return $Size;
    }
    
    /**
     * Convert bytes to human readable format
     *
     * @param integer bytes Size in bytes to convert
     * @return string
     */
    public static function bytesToSize($bytes, $precision = 2)
    {
        $kilobyte = 1024;
        $megabyte = $kilobyte * 1024;
        $gigabyte = $megabyte * 1024;
        $terabyte = $gigabyte * 1024;

        if ( ($bytes >= 0) && ($bytes < $kilobyte) )
        {
            return $bytes . ' B';
        }
        elseif ( ($bytes >= $kilobyte) && ($bytes < $megabyte) )
        {
            return round($bytes / $kilobyte, $precision) . ' KB';
        }
        elseif ( ($bytes >= $megabyte) && ($bytes < $gigabyte) )
        {
            return round($bytes / $megabyte, $precision) . ' MB';
        }
        elseif ( ($bytes >= $gigabyte) && ($bytes < $terabyte) )
        {
            return round($bytes / $gigabyte, $precision) . ' GB';
        }
        elseif ( $bytes >= $terabyte )
        {
            return round($bytes / $terabyte, $precision) . ' TB';
        }
        else
        {
            return $bytes . ' B';
        }
    }
    
    /**
     * Descompacta um arquivo .tar.gz (caso esteja de acordo com padroes).
     * Sempre chame esta funcao dentro de try {} catch {}
     * 
     * @TODO Fazer mais verificacoes de integridade do arquivo .tar.gz , se esta correto, etc.
     * 
     * @param int $fileId 
     */
    public function untarGzFile($fileId, $extension = null)
    {
        $fileData = $this->getFile($fileId);
        
        $originalFile = '/tmp/' . $fileData->uploadFileName.$extension;
        copy($fileData->absolutePath, $originalFile);

        // decompress from gz
        $phar = new PharData($originalFile);
        $tarFile = $phar->decompress();

        // unarchive from the tar
        $phar = new PharData( $tarFile->getPath() );
        $phar->extractTo('/tmp/', null, true);

        unlink($tarFile->getPath());

        // Monta caminho do arquivo descompactado
        $fileName = str_replace('.tar.gz', '', $originalFile);
        
        return $fileName;
    }
    
    /**
     * @return boolean
     */
    public function isTarGzFile($fileId)
    {
        $file = $this->getFile($fileId);
        
        return preg_match('/\.tar\.gz/', $file->uploadFileName);
    }
}
?>
