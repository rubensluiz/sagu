<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for basTurn table
 *
 * @author Mauricio de Castro [mcastro@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Mauricio de Castro [mcastro@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 10/08/2005
 *
 **/

/**
 * Class to manipulate the basTurn table
 **/
class BusinessBasicBusTurn extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listTurn()
    {
        $db  = $this->getDatabase();
        $sql = 'SELECT turnId,
                       description,
                       shortDescription,
                       TO_CHAR(beginHour,\'' . SAGU::getParameter('BASIC', 'MASK_TIME') . '\'),
                       TO_CHAR(endHour,\'' . SAGU::getParameter('BASIC', 'MASK_TIME') . '\'),
                       charId
                  FROM basTurn
              ORDER BY description';
        $ret = $db->query($sql);

        return $ret;
    }
    
    public function listDescAndShortDesc()
    {
        $db  = $this->getDatabase();
        $sql = 'SELECT turnId,
                       description || \'---\' || shortDescription
                  FROM basTurn
              ORDER BY description';
        $ret = $db->query($sql);

        return SAGU::convertListToAssociative($ret);
    }

    public function listTurnOrderById()
    {
        $db = $this->getDatabase();

        $sql = 'SELECT turnId,
                       description,
                       shortDescription,
                       TO_CHAR(beginHour,\'' . SAGU::getParameter('BASIC', 'MASK_TIME') . '\'),
                       TO_CHAR(endHour,\'' . SAGU::getParameter('BASIC', 'MASK_TIME') . '\'),
                       charId
                  FROM basTurn
              ORDER BY turnId';

        $ret = $db->query($sql);

        return $ret;
    }

    /**
     * Return a specific record from the database
     *
     * @param $turnId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getTurn($turnId)
    {
        $sql = 'SELECT turnId,
                       description,
                       shortDescription,
                       TO_CHAR(beginHour,\'' . SAGU::getParameter('BASIC', 'MASK_TIME') . '\'),
                       TO_CHAR(endHour,\'' . SAGU::getParameter('BASIC', 'MASK_TIME') . '\'),
                       charId,
                       userName,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipAddress
                  FROM basTurn
                 WHERE turnId = ?';

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $turnId));

        $turn = new basTurn();
        list ( $turn->turnId,
               $turn->description,
               $turn->shortDescription,
               $turn->beginHour,
               $turn->endHour,
               $turn->charId,
               $turn->userName,
               $turn->dateTime,
               $turn->ipAddress ) = $result[0];

        return $turn;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchTurn($filters)
    {

        $sql= 'SELECT turnId,
                      description,
                      shortDescription,
                      TO_CHAR(beginHour,\'' . SAGU::getParameter('BASIC', 'MASK_TIME') . '\'),
                      TO_CHAR(endHour,\'' . SAGU::getParameter('BASIC', 'MASK_TIME') . '\'),
                      charId
                 FROM basTurn ';

        if ( strlen($filters->turnId) > 0 )
        {
            $where .= ' AND turnId = ? ';
            $args[] = $filters->turnId;
        }
        if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND UNACCENT(description) ILIKE UNACCENT(?) ';
            $args[] = $filters->description . '%';
        }
        if ( strlen($filters->shortDescription) > 0 )
        {
            $where .= ' AND UNACCENT(shortDescription) ILIKE UNACCENT(?) ';
            $args[] = $filters->shortDescription . '%';
        }
        if ( strlen($filters->beginHour) > 0 )
        {
            $where .= ' AND beginHour >= ? ';
            $args[] = $filters->beginHour;
        }
        if ( strlen($filters->endHour) > 0 )
        {
            $where .= ' AND endHour <= ? ';
            $args[] = $filters->endHour ;
        }
        if ( strlen($filters->charId) > 0 )
        {
            $where .= ' AND charId ILIKE ? ';
            $args[] = $filters->charId . '%';
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY description';
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }
        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertTurn($data)
    {
        $query = SDatabase::query("SELECT nextval('seq_turnid'::regclass)");
        $turnId = $query[0][0];
        
        $sql = 'INSERT INTO basTurn
                            (turnId,
                             description,
                             shortDescription,
                             beginHour,
                             endHour,
                             charId)
                     VALUES (?,
                             ?,
                             ?,
                             TO_TIMESTAMP(?, \'' . SAGU::getParameter('BASIC', 'MASK_TIME') . '\'),
                             TO_TIMESTAMP(?, \'' . SAGU::getParameter('BASIC', 'MASK_TIME') . '\'),
                             ?)';

        $args = array( $turnId,
                       $data->description,
                       $data->shortDescription,
                       $data->beginHour,
                       $data->endHour,
                       $data->charId );

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result ? $turnId : false;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function updateTurn($data)
    {
        $sql = 'UPDATE basTurn
                   SET description      = ?,
                       shortDescription = ?,
                       beginHour        = TO_TIMESTAMP(?, \'' . SAGU::getParameter('BASIC', 'MASK_TIME') . '\'),
                       endHour          = TO_TIMESTAMP(?, \'' . SAGU::getParameter('BASIC', 'MASK_TIME') . '\'),
                       charId           = ?
                 WHERE turnId = ?';

        $args = array( $data->description,
                       $data->shortDescription,
                       $data->beginHour,
                       $data->endHour,
                       $data->charId,
                       $data->turnId );

        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $turnId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function deleteTurn($turnId)
    {
        $sql = 'DELETE FROM basTurn
                      WHERE turnId = ?';

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $turnId));

        return $result;
    }
}
?>
