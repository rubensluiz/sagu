<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for basPersonLink table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br] 
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 12/09/2005
 *
 **/

/**
 * Form to search the basPerson table
 */
class FrmPersonLinkSearch extends SSearchForm
{

    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(_M('Localizar', 'basic'), new BasPersonLink(), array('personId', 'linkId'), 'BusPersonLink');
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $personLabelS = new MText('personLabelS', _M('Pessoa', $module) . ':');
        $personLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        
        $personIdS = new MLookupTextField('personIdS', $this->personIdS->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'personNameS', $module, 'PhysicalPerson', null, null, true);
        $personIdS->setJsHint(_M('Informe o código da pessoa', $module));
        $validators[] = new MIntegerValidator('personIdS', _M('Pessoa', $module), 'optional');
        
        $personNameS = new MTextField('personNameS', $this->personNameS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personNameS->setJsHint(_M('Nome da pessoa', $module));
        
        $hctPersonS = new MHContainer('hctPersonS', array($personLabelS, $personIdS, $personNameS));
        $hctPersonS->setShowLabel(true);
        $fields[] = $hctPersonS;
        
        //link
        $linkLabelS = new MText('linkLabelS', _M('Grupo do vínculo', $module) . ':');
        $linkLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        
        $linkIdS = new MLookupTextField('linkIdS', $this->linkIdS->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'linkDescriptionS', $module, 'Link', null, null, true);
        $validators[] = new MIntegerValidator('linkIdS', _M('Grupo do vínculo', $module), 'optional');
        $linkIdS->setJsHint(_M('Informe o código do vínculo', $module));
        
        $linkDescriptionS = new MTextField('linkDescriptionS', $this->linkDescriptionS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $linkDescriptionS->setJsHint(_M('Descrição do vínculo', $module));
        
        $hctLinkS = new MHContainer('hctLinkS', array($linkLabelS, $linkIdS, $linkDescriptionS));
        $hctLinkS->setShowLabel(true);
        $fields[] = $hctLinkS;
        
        parent::defineFields($fields, $module, 'GrdPersonLinkSearch');
        $this->setValidators($validators);
    }

    public function getTypesData()
    {
        $data = clone ($this->object);
        $data->personName = $this->personNameS->value;
        $data->linkDescription = $this->linkDescriptionS->value;
        $vars = get_object_vars($data);
        
        foreach ( $vars as $var => $value )
        {
            $fieldName = $var;
            // The suffix 'S' is standard for search forms, so we have to check
            // for fields with that suffix to make the same method work for both
            // search and non-search forms.
            if ( strlen(MIOLO::_REQUEST($fieldName)) == 0 )
            {
                $fieldName .= 'S';
            }
            $data->$var = MIOLO::_REQUEST($fieldName);
        }
        return $data;
    }
}

?>
