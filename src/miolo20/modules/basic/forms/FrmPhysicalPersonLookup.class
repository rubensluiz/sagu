<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Physical person lookup form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 28/03/2006
 *
 **/

/**
 * Form to manipulate a city lookup
 **/
class FrmPhysicalPersonLookup extends SForm
{

    public function __construct()
    {
        $MIOLO  = MIOLO::getInstance( );
        $module   = 'basic';

        parent::__construct( _M('Inserir pessoa física', $module), new BasPhysicalPerson(), array('personId') );
    }


    /**
     * this method is automatically called by MIOLO
     * and is intended to create the form fields
     */
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $personName   = new MTextField('personName', $this->getFormValue('personName', $data->personName), _M('Nome',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setJsHint(_M('Informe o nome da pessoa',$module));
        $fields[]     = $personName; 
        $validators[] = new MRequiredValidator('personName');

        $fields[]     = new MSelection('sex', $this->getFormValue('sex', $data->sex) ? $this->getFormValue('sex', $data->sex) : MIOLO::_REQUEST('sexPerson'), _M('Sexo',$module), SAGU::listSex());
        $validators[] = new MRequiredValidator('sex');

        $dateBirth    = new MCalendarField('dateBirth', $this->getFormValue('dateBirth',$data->dateBirth), _M('Data de nascimento',$module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $validators[] = new MDateDMYValidator('dateBirth','','required');
        $dateBirth->setJsHint(_M('Informe a data de nascimento',$module));
        $fields[]     = $dateBirth;
        
        if ( MIOLO::_request('source') == 'responsableLegal' )
        {
            $cpf          = new MTextField('cpf', $this->getFormValue('cpf',$data->cpf), _M('CPF',$module), 20);
            $validators[] = new MRequiredValidator('cpf');
            $cpf->setJsHint(_M('Informe o CPF',$module));
            $fields[]     = $cpf;
        }
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators, 'toolbar' => false ) );

        $this->addButton( new formButton('tbBtnSave' , _M('Salvar', $module)));
        $this->addButton( new formButton('tbBtnBack' , _M('Voltar', $module), 'history.go(-1)'));
    }

    public function tbBtnSave_click()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = 'basic';
        $action   = MIOLO::getCurrentAction();
        $name     = MIOLO::_Request('name');

        $data     = $this->getTypesData();
        $business = new BusinessBasicBusPhysicalPerson();
        
        if ( $personId = $business->insertPhysicalPerson($data) )
        {
            $data = $business->getPhysicalPerson($personId);

            //testa se eh para inserir o cpf
            if ( $this->getFormValue('cpf') )
            {
                $data->content        = $this->getFormValue('cpf');
                $data->documentTypeId = SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF');
                $data->isDelivered    = DB_FALSE;

                $business = new BusinessBasicBusDocument();
                $business->insertDocument($data);
            }

            $this->page->addScript('m_lookup.js');
            $this->page->addJsCode("MIOLO_Deliver('$name', 0, '{$data->personId}','{$data->name}')" );
        }
        else
        {
            $this->AddError(_M('Parâmetros inválidos','basic'));
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new BasPhysicalPerson();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }
        $data->name = $this->personName->value;

        return $data;
    }

}
?>
