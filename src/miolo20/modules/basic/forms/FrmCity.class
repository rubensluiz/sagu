<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * City form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 11/08/2005
 *
 **/

/**
 * Form to manipulate a city
 **/
class FrmCity extends SManagementForm
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new BasCity(), array('cityId'), 'BusCity');
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        // Field City Id
        if ( in_array($function,array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $pk = $this->getObjectPk();
            $fields[] = new MTextLabel('', $pk->cityId, _M('Código',$module));
            $fields[] = new MHiddenField('cityId', $pk->cityId);

            $data = $this->busObject->getCity($pk->cityId);
            $defaultCountryId = $data->countryId;
        }

        // Field Country
        $business = new BusinessBasicBusCountry();
        $countryId = new MComboBox('countryId', $this->getFormValue('countryId', $defaultCountryId), _M('País',$module), $business->listCountry());
        $countryId->setJsHint(_M('Informe o código do país',$module));
        $countryId->setAutoSubmit(true);
        $fields[] = $countryId;
        $validators[] = new MRequiredValidator('countryId');

        // Field State
        $actualCountryId = $this->getFormValue('countryId', $defaultCountryId);

        if ( $actualCountryId )
        {
            $business = new BusinessBasicBusState();
            $options = $business->listState($actualCountryId);
            // este if deve permanecer ate que o problema de o $options nao poder ser
            // nulo ser resolivdo pelo MIOLO2.

            if ( count($options) == 0 )
            {
                $options = array();
            }
            $fields[] = new MComboBox('stateId', $this->getFormValue('stateId', $data->stateId) ? $this->getFormValue('stateId', $data->stateId) : SAGU::getParameter('BASIC', 'DEFAULT_STATE_ID'), _M('Estado',$module), $options);
            $validators[] = new MRequiredValidator('stateId');
        }

        // Field City Name
        $data->cityName = $this->getFormValue('cityName', $data->name);
        $fields[] = $cityName = new MTextField('cityName', $data->cityName, _M('Nome',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $cityName->setJsHint(_M('Informe o nome da cidade', $module));
        $validators[] = new MRequiredValidator('cityName');

        // Field Zip Code
        $fields[] = $zipCode = new MTextField('zipCode', $this->getFormValue('zipCode', $data->zipCode), _M('CEP',$module), SAGU::getParameter('BASIC', 'FIELD_ZIPCODE_SIZE'), _M('Ex.: 12345678', $module));
        $zipCode->setJsHint(_M('Informe o CEP. Ex.: 12345678', $module));
        $validators[] = new MIntegerValidator('zipCode');

        // Field Ibge Id
        $fields[] = $ibgeId = new MTextField('ibgeId', $this->getFormValue('ibgeId', $data->ibgeId), _M('Código IBGE',$module), SAGU::getParameter('BASIC', 'FIELD_ZIPCODE_SIZE'), _M("Ex.: 1234567", $module));
        $ibgeId->setJsHint(_M('Informe o código IBGE.', $module));
        $validators[] = new MIntegerValidator('ibgeId');
        
        //fronteirico
        $busCountry = new BusinessBasicBusCountry();
        $front = $busCountry->getCountry($actualCountryId);

        $data->fronteirico = $data->fronteirico ? $data->fronteirico : DB_FALSE;
        if($front->fronteirico == DB_TRUE)
        {
            $enableAuth = $this->getFormValue('fronteirico', $data->fronteirico) == DB_TRUE ? DB_TRUE : DB_FALSE;
            $fields[] = $fronteira = new MRadioButtonGroup('fronteirico', 'Fronteiriço', SAGU::listTrueFalse(1), $enableAuth, null, 'horizontal');
        }
        parent::defineFields($fields, $validators, $data);
    }

    public function getTypesData()
    {
        $data = parent::getTypesData();
        $fieldName = 'cityName';

        if ( strlen(MIOLO::_REQUEST($fieldName)) == 0 )
        {
            $fieldName .= 'S';
        }

        $data->name = MIOLO::_REQUEST($fieldName);

        return $data;
    }
}
?>
