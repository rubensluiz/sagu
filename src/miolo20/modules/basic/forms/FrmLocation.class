<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Location form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 11/08/2005
 *
 **/

/**
 * Form to manipulate a location
 **/
class FrmLocation extends SManagementForm
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new BasLocation(), array('locationId'), 'BusLocation');
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        if ( in_array($function,array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $locationId = MIOLO::_request('locationId');
            $business = new BusinessBasicBusLocation();
            $data = $business->getLocation($locationId);
            $fields[] = new MHiddenField('locationId', $locationId);
            $this->page->onLoad('document.' . $this->name . '.locationName.focus();');
        }

        // limbo field
        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        // zip code field
        $zipCode = new MTextField('zipCode', $this->getFormValue('zipCode',$data->zipCode), _M('CEP',$module), SAGU::getParameter('BASIC', 'FIELD_ZIPCODE_SIZE'), _M("Ex.: 12345678", $module));
        $zipCode->setJsHint(_M('Informe o CEP. Ex.: 12345678', $module));
        $validators[] = new MIntegerValidator('zipCode', null, 'required');
        $fields[] = $zipCode;

        // location field
        $locationName = new MTextField('locationName', $this->getFormValue('locationName',$data->name), _M('Nome do logradouro',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $locationName->setJsHint(_M('Informe o nome do logradouro',$module));
        $validators[] = new MRequiredValidator('locationName', _M('Nome do logradouro', $module));
        $fields[] = $locationName;

        // city field
        $cityLabel = new MText('cityLabel', _M('Cidade',$module).':');
        $cityLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $cityLabel->setClass('m-caption m-caption-required');
        $cityId = new MLookupTextField('cityId', $this->getFormValue('cityId',$data->cityId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'cityName,limbo,stateName,limbo,countryName,limbo', $module, 'City', null, null, true);
        $validators[] = new MIntegerValidator('cityId', _M('Cidade', $module), 'required');
        $cityId->setJsHint(_M('Informe o código da cidade',$module));
        $cityName = new MTextField('cityName', $this->getFormValue('cityName',$data->cityName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $cityName->setJsHint(_M('Nome da cidade',$module));
        $cityName->setReadOnly(true);
        $hctCity = new MHContainer('hctCity', array($cityLabel, $cityId, $cityName));
        $hctCity->setShowLabel(true);
        $fields[] = $hctCity;

        // state field
        $stateName = new MTextField('stateName', $this->getFormValue('stateName',$data->stateName), _M('Estado',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $stateName->setJsHint(_M('Informe o nome do estado',$module));
        $stateName->setReadOnly(true);
        $fields[] = $stateName;

        // country field
        $countryName = new MTextField('countryName', $this->getFormValue('countryName',$data->countryName), _M('País',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $countryName->setJsHint(_M('Informe o nome do país',$module));
        $countryName->setReadOnly(true);
        $fields[] = $countryName;

        // neighborhood field
        $neighborhoodLabel = new MText('neighborhoodLabel', _M('Bairro',$module).':');
        $neighborhoodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $neighborhoodLabel->setClass('m-caption m-caption-required');
        $neighborhoodId = new MLookupTextField('neighborhoodId', $this->getFormValue('neighborhoodId',$data->neighborhoodId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'neighborhoodName', $module, 'Neighborhood', null, null, true);
        $validators[] = new MIntegerValidator('neighborhoodId', _M('Bairro', $module), 'required');
        $neighborhoodId->setJsHint(_M('Informe o código do bairro',$module));
        $neighborhoodName = new MTextField('neighborhoodName', $this->getFormValue('neighborhoodName',$data->neighborhoodName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $neighborhoodName->setJsHint(_M('Nome do bairro',$module));
        $neighborhoodName->setReadOnly(true);
        $hctNeighborhood = new MHContainer('hctNeighborhood', array($neighborhoodLabel, $neighborhoodId, $neighborhoodName));
        $hctCity->setShowLabel(true);
        $fields[] = $hctNeighborhood;

        parent::defineFields($fields, $validators, $data);
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = parent::getTypesData();
        $fieldName = 'locationName';
        $fieldCityName = 'cityName';
        $fieldNeighborhoodName = 'neighborhoodName';

        if ( strlen(MIOLO::_REQUEST($fieldCityName)) == 0 )
        {
            $fieldCityName .= 'S';
        }
        if ( strlen(MIOLO::_REQUEST($fieldNeighborhoodName)) == 0 )
        {
            $fieldNeighborhoodName .= 'S';
        }
        if ( strlen(MIOLO::_REQUEST($fieldName)) == 0 )
        {
            $fieldName .= 'S';
        }

        $data->cityName = MIOLO::_REQUEST($fieldCityName);
        $data->neighborhoodName = MIOLO::_REQUEST($fieldNeighborhoodName);
        $data->name = MIOLO::_REQUEST($fieldName);

        return $data;
    }
}
?>
