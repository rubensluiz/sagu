<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Unit form
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class Created on 18/01/2013
 *
 **/
    $MIOLO->uses('classes/bCatalogo.class.php','base');
    $MIOLO->uses('classes/bBaseDeDados.class.php','base');
    $MIOLO->uses('/ui/controls/msubdetail.class');

class FrmCustomField extends SManagementForm
{    
    /**
     * Class constructor
     **/
    public function __construct()
    {
        if(MIOLO::_REQUEST('function') == 'update' || MIOLO::_REQUEST('function') == 'delete') 
        {
            parent::__construct(new BasCustomField(), array('nameCampo') );
        }
        else
        {
            parent::__construct(_M('Campos personalizados', $module), null, null);
        }
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $data = BasCustomField::getCamposAsObject($this->getRequestValue('nameCampo'));
                
        $fieldName = new MTextField('nameCampo', NULL, _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $fieldName->hint = _M('Nome do campo para ser lido pela máquina, ex.: data_nascimento', $module);
        $this->AddField($fieldName);
        $validators[] = new MRequiredValidator('nameCampo', _M('Nome', $module));
        
        if ( $this->isUpdateFunction() )
        {
            $fieldName->setReadOnly(true);
        }

        $fieldLabel = new MTextField('label', NULL, _M('Label', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $fieldLabel->hint = _M('Nome amigável para este campo que aparece nos formulários, listagens, relatórios, etc..', $module);
        $this->AddField($fieldLabel);
        $validators[] = new MRequiredValidator('label', _M('Label', $module));

        $fieldFormat = new MSelection('field_format', NULL, _M('Formato do campo', $module), array());
        $fieldFormat->options = MCustomField::listFormatFields();
        $fieldFormat->setAutoPostBack(true);
        $this->AddField($fieldFormat);

        // Valores possiveis
        if ( $fieldFormat->getValue() == MCustomField::FORMAT_LIST )
        {
            $hint = _M('Informe os valores no formato: <br><br>valor1<br>valor2<br>valor3', $module);
            $possibleValues = new MMultilineField('possible_values', NULL, _M('Valores possíveis', $module), NULL, SAGU::getParameter('BASIC', 'FIELD_MULTILINE_NUM_ROWS'), SAGU::getParameter('BASIC', 'FIELD_MULTILINE_NUM_COLS'), $hint);
            $this->AddField($possibleValues);
            
            $validators[] = new MRequiredValidator('possible_values', _M('Valores possíveis', $module));
        }
        else if ( $fieldFormat->getValue() == MCustomField::FORMAT_LISTSQL )
        {
            $hint = _M('Informe o SQL para geração da combo de listagem, ex.:<br><b>SELECT id, descricao FROM cidades</b>', $module);
            $possibleValues = new MMultilineField('possible_values', NULL, _M('SQL', $module), NULL, SAGU::getParameter('BASIC', 'FIELD_MULTILINE_NUM_ROWS'), SAGU::getParameter('BASIC', 'FIELD_MULTILINE_NUM_COLS'), $hint);
            $this->AddField($possibleValues);
            
            $validators[] = new MRequiredValidator('possible_values', _M('SQL', $module));
            
            $possibleParameters = new MTextField('possible_parameters', NULL, _M('Ids dos parâmetros', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $possibleParameters->hint = _M('Somente obrigatório se a consulta acima espera parâmetros: ?, ex.:<br><b>contractId,personId</b>', $module);
            $this->AddField($possibleParameters);
        }
        
        $regexp = new MTextField('regexp', NULL, _M('Expressão regular', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $this->AddField($regexp);
        
        $minLength = new MTextField('min_length', NULL, _M('Tamanho mínimo', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $this->AddField($minLength);
        
        $maxLength = new MTextField('max_length', NULL, _M('Tamanho máximo', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $this->AddField($maxLength);
       
        $defaultValue = new MTextField('default_value', NULL, _M('Valor padrão', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $this->AddField($defaultValue);
        
        //Filtro dos relatorios genericos 
        $filtrorelatoriogenericoLabel= new MText('filtroGenLabel', _M('Utilizar como filtro em relatórios genéricos', $module) . ':');
        $filtrorelatoriogenericoLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $filtrorelatoriogenerico = new MSelection('filtrorelatoriogenerico', $data->filtrorelatoriogenerico, '', SAGU::listTrueFalse(0, FALSE));
        $filtrorelatoriogenerico->setAllowNullValue(FALSE);
        $ctnFiltroGen = new MHContainer('ctnFiltroGen', array($filtrorelatoriogenericoLabel, $filtrorelatoriogenerico));
        $this->AddField($ctnFiltroGen);
        
        $this->AddField(new MSeparator());
        
                //Criar listagem das tabelas
        $tabelas = bCatalogo::listarTabelas(NULL,NULL,TRUE);
        foreach ($tabelas as $tabela)
        {
            if(substr($tabela->tablename, 0,3) != 'pg_' && substr($tabela->tablename, 0,4) != 'sql_'  && substr($tabela->tablename, 0,3) != 'tmp')
            {
                $tabelasOptions[$tabela->schemaname.'.'.$tabela->tablename] =  $tabela->tablename;
            }
        }
        
        //Listagem das tabelas
        $tabelaLabel= new MText('tabelaLabel', _M('Tabela', $module) . ':');
        $tabelaLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $tabela = new MSelection('tabela', NULL, null, $tabelasOptions);
        $tabela->addAttribute('onchange', SForm::getAjaxAction('popularCampo', 'divCampo', false));    
        $ctnTabela = new MHContainer('ctnTabela', array($tabelaLabel, $tabela));

        //Criar listagem dos campos apos ser selecionada uma tabela
        $schemaAndTable = explode('.', SAGU::NVL($data[0]->tabela,MIOLO::_REQUEST('tabela')));
        if($schemaAndTable[1])
        {
            $campos = bCatalogo::obterColunasDaTabela($schemaAndTable[0],$schemaAndTable[1]);
            foreach ($campos as $campo)
            {
                $tabelasOptions2[$campo->column] =  $campo->column;
            }
        }
        
        //Listagem dos campos
        $campoLabel= new MText('campoLabel', _M('Campo', $module) . ':');
        $campoLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $coluna = new MSelection('coluna', NULL, null, $tabelasOptions2);
        $div = new MHContainer('conta',array($campoLabel,new MDiv('divCampo', array($coluna))));
             
        $stdFields[] = $ident = new SHiddenField('ident');
        $stdFields[] = $ident = new SHiddenField('identifier');
        $stdFields[] = new MHiddenField('idtransactionDescription');
                
        $stdFields[] = $sIdentifier = new sEscolha('idtransaction',null,'Formulário',new AdmMioloTransaction());
        $subValidators[] = new MRequiredValidator('idtransaction', _M('Formulário', $module));
                        
        $stdFields[] = $required = new MSelection('required', DB_TRUE, _M('Obrigatório', $module), array());
        $required->options = SAGU::listYesNo();
        
        $stdFields[] = $editable = new MSelection('editable', DB_TRUE, _M('Editável', $module), array());
        $subValidators[] = new MRequiredValidator('editable', _M('Editável', $module));
        $editable->options = SAGU::listYesNo();
        
        $stdFields[] = $visible = new MSelection('visibleCampo', DB_TRUE, _M('Visível', $module), array());
        $visible->options = SAGU::listYesNo();
        
        $stdFields[] = $position = new MTextField('position', '', _M('Posição', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $subValidators[] = new MIntegerValidator('position', _M('Posição', $module));
        
        // Colunas da grid da Subdetail
        $sdtFieldsColumns[] = new MGridColumn('Formulário', 'left', true, 1, false, 'ident');
        $sdtFieldsColumns[] = new MGridColumn('Formulário', 'left', true, 1, false, 'identifier');
        $sdtFieldsColumns[] = new MGridColumn('Formulário', 'left', true, 1, false, 'idtransaction');
        $sdtFieldsColumns[] = new MGridColumn('Formulário', 'left', true, '80%', true, 'idtransactionDescription');        
        $sdtFieldsColumns[] = new MGridColumn('Obrigatório', 'left', true, 1, false, 'required');
        $sdtFieldsColumns[] = new MGridColumn('Editável', 'left', true, 1, false, 'editable');
        $sdtFieldsColumns[] = new MGridColumn('Posição', 'left', true, 1, false, 'position');
        $sdtFieldsColumns[] = new MGridColumn('Visivel', 'left', true, 1, false, 'visibleCampo');
                
        $sdt = new MSubDetail('transactionS', _M('Formulários'), $sdtFieldsColumns, $stdFields,true);
        $sdt->setWidth('90%');
        $this->addField($sdt);
        $sdt->setValidators($subValidators);
        
        // set data dos dados da subdetail (edição)
        if ( $this->isSubDetailEditMode() && ( strlen($this->getRequestValue('nameCampo')) > 0 ) )
        { 
            $data = BasCustomField::getCamposAsObject($this->getRequestValue('nameCampo'));
            //descricao
            foreach($data as $order => $dat)
            {
                //identifiqer verificar se vem vazio
                $filters = new stdClass();
                $filters->mTransaction = $dat->identifier;
                $description = AdmMioloTransaction::searchGrid($filters, false);
                $dat->idtransactionDescription = $description[0][6];
                $dat->idtransaction = $description[0][0];
                $dat->visibleCampo = $dat->visible;
                if ( !$dat->identifier )
                {
                    $data[$order] = null;
                }
            }
            MSubDetail::setData($data, 'transactionS');
        }
        else if ( $this->isInsertFunction() && !$this->estaEmUmEvento() )
        {
            MSubDetail::clearData('transactionS');
        }
        
        //BaseGroup Dicionario de dados
        $bsgDicionarioDeDados = new MBaseGroup('bsgDicionarioDeDados', _M("Dicionário de dados", $module), array($ctnTabela, $div), 'vertical');
        $bsgDicionarioDeDados->setWidth('90%');
        $this->AddField($bsgDicionarioDeDados);

        parent::defineFields(null, $validators,$data);
    }
    
    public function popularCampo($args)
    {
        $module = MIOLO::getCurrentModule();
        $schemaAndTable = explode('.', $args->tabela);
        $campos = bCatalogo::obterColunasDaTabela($schemaAndTable[0],$schemaAndTable[1]);
        foreach ($campos as $campo)
        {
            $tabelasOptions[$campo->column] =  $campo->column;
        }
        $tabela = new MSelection('coluna', NULL, _M('Campo', $module), $tabelasOptions);
        $response[] = $tabela;

        return $response;        
    }
    
    public function tbBtnSave_click($sender = NULL)
    {
        $possibleParameters = MIOLO::_REQUEST('possible_parameters');
        $sql = MIOLO::_REQUEST('possible_values');
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        try
        {
            if ( strlen($possibleParameters) > 0 )
            {
                $parametros = explode(',', $possibleParameters);

                if ( count($parametros) != substr_count($sql, '?') )
                {
                    throw new Exception(_M('O número de parâmetros definidos no campo "Ids dos parâmetros" não é o mesmo que o número de coringas no SQL.'));
                }
            }
            $allNames = BasCustomField::getCamposAsObject(MIOLO::_REQUEST('nameCampo'));
            if(count($allNames) > 0 && MIOLO::_REQUEST('function') != 'update')
            {
                throw new Exception(_M('Nome já utilizado, preencha com um outro nome.'));
            }
            $data = $this->getData();
            
            //Insert e update SEM formulario
            if( count($data->transactionS) == 0)
            {
                if(MIOLO::_REQUEST('function') == 'insert')
                {
                    $data = $this->obterCamposInsertSemForm();
                    
                    BasCustomField::insertCampos($data);
                }
                if(MIOLO::_REQUEST('function') == 'update')
                {                        
                    $this->atualizarCampos(MIOLO::_REQUEST('bascustomfield_id'));
                }
            }

            SDatabase::beginTransaction();
                        
           // inserts, updates, remove formularios
            if ( count($data->transactionS) > 0 )
            {
                foreach ( $data->transactionS as $dataSub )
                {
                     // Update
                    if ( !$dataSub->removeData && (strlen($dataSub->identifier) > 0) && (strlen($dataSub->ident) > 0))
                    {
                        $ident = explode(' ', $dataSub->idtransactionDescription);
                        $dataSub->identifier = $ident[0];

                        $dataOld = BasCustomField::obterFormulario($dataSub->ident);
                        if(
                            $dataOld[0]->identifier != $ident[0] ||
                            $dataOld[0]->required !=  $dataSub->required ||
                            $dataOld[0]->position != $dataSub->position ||
                            $dataOld[0]->editable != $dataSub->editable ||
                            $dataOld[0]->visible != $dataSub->visibleCampo
                          )
                        {
                            $dataSub->visible = $dataSub->visibleCampo;
                            BasCustomField::updateFormulario($dataSub);
                        }
                        $this->atualizarCampos($dataSub->ident);
                    }
                   // Insert
                    else if ( !$dataSub->removeData && ((strlen($dataSub->ident) == 0) || (strlen($dataSub->identifier) > 0)))
                    {
                        $data = new stdClass();
                        $ident = explode(' ', $dataSub->idtransactionDescription);
                        $data->identifier = $ident[0];
                        $data->name = MIOLO::_REQUEST('nameCampo');
                        $data->field_format = MIOLO::_REQUEST('field_format');
                        $data->possible_values = MIOLO::_REQUEST('possible_values');
                        $data->regexp = MIOLO::_REQUEST('regexp');
                        $data->min_length = MIOLO::_REQUEST('min_length');
                        $data->max_length = MIOLO::_REQUEST('max_length');
                        $data->required = $dataSub->required;
                        $data->position = $dataSub->position;
                        $data->default_value = MIOLO::_REQUEST('default_value');
                        $data->editable = $dataSub->editable;
                        $data->visible = $dataSub->visibleCampo;
                        $data->label = MIOLO::_REQUEST('label');
                        $data->possible_parameters = MIOLO::_REQUEST('possible_parameters');
                        $data->tabela = MIOLO::_REQUEST('tabela');
                        $data->coluna = MIOLO::_REQUEST('coluna');
                        $data->filtrorelatoriogenerico = MIOLO::_REQUEST('filtrorelatoriogenerico');

                        BasCustomField::insertCampos($data);
                    }
                    // Delete
                    else if ( $dataSub->removeData && (strlen($dataSub->ident) > 0) )
                    {
                        //quando deletar todos os formularios criar um vazio
                        $campos = BasCustomField::obterCampos(MIOLO::_REQUEST('nameCampo'));
                        if(count($campos) == 1)
                        {
                            $data = $this->obterCamposInsertSemForm();
                            
                            BasCustomField::insertCampos($data);
                        }
                        BasCustomField::deleteCampos($dataSub->ident);
                    }
                }
            }
            SDatabase::commit();
            
            SAGU::information(_M('Dados salvos com sucesso.', $module), $this->getPreviousURL());
        }
        catch (Exception $e)
        {
            $this->AddError($e->getMessage());
        }           
    }
    public function atualizarCampos($id)
    {
        $basField = new BasCustomField();
                        
        $basField->id = $id;
        $basField->name = MIOLO::_REQUEST('nameCampo');
        $basField->field_format = MIOLO::_REQUEST('field_format');
        $basField->possible_values = MIOLO::_REQUEST('possible_values');
        $basField->regexp = MIOLO::_REQUEST('regexp');
        $basField->min_length = MIOLO::_REQUEST('min_length');
        $basField->max_length = MIOLO::_REQUEST('max_length');
        $basField->default_value = MIOLO::_REQUEST('default_value');
        $basField->label = MIOLO::_REQUEST('label');
        $basField->possible_parameters = MIOLO::_REQUEST('possible_parameters');
        $basField->tabela = MIOLO::_REQUEST('tabela');
        $basField->coluna = MIOLO::_REQUEST('coluna');
        $basField->filtrorelatoriogenerico = MIOLO::_REQUEST('filtrorelatoriogenerico');

        $basField->save();
    }
    
    public function obterCamposInsertSemForm()
    {
        $data = new stdClass();
                    
        $data->name = MIOLO::_REQUEST('nameCampo');
        $data->field_format = MIOLO::_REQUEST('field_format');
        $data->possible_values = MIOLO::_REQUEST('possible_values');
        $data->regexp = MIOLO::_REQUEST('regexp');
        $data->min_length = MIOLO::_REQUEST('min_length');
        $data->max_length = MIOLO::_REQUEST('max_length');
        $data->default_value = MIOLO::_REQUEST('default_value');
        $data->label = MIOLO::_REQUEST('label');
        $data->possible_parameters = MIOLO::_REQUEST('possible_parameters');
        $data->tabela = MIOLO::_REQUEST('tabela');
        $data->coluna = MIOLO::_REQUEST('coluna');
        $data->filtrorelatoriogenerico = MIOLO::_REQUEST('filtrorelatoriogenerico');
        $data->first =DB_TRUE;
        
        return $data;
    }
    
   public function tbBtnDelete_confirm($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $this->defaultDisabledButtonsToolbar();
        
        try
        {
            SDatabase::beginTransaction();

            $ok = BasCustomField::deleteAllForms( MIOLO::_REQUEST('nameCampo') );

            if ( $ok )
            {
                SDatabase::commit();
                
                $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_DELETED');
  
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
                
               $this->messageSuccess($msg, $goto);
            }
            else
            {
                SDatabase::rollback();
                
                $msg = _M('Erro executando a operação solicitada.', $module);
                
                if ( $this->busObject instanceof MBusiness )
                {
                    $errors = $this->busObject->getErrors();
                    for ( $i=0; $i<count($errors); $i++ )
                    {
                        $msg .= '<br />' . $errors[$i];
                    }
                }
                
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);

                $this->messageError($msg, $goto);
            }
        }
        catch ( Exception $e )
        {
            SDatabase::rollback();
            
            $goto = SForm::getReturnTo();
            
            if ( !$goto )
            {
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
            }
            
            $msg = _M('Erro ao excluir.', $module) . ' <br>' . $e->getMessage();
            
            $this->messageError($msg, $goto);
        }
    }
}
?>
