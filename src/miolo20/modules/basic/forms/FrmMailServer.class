<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Default operations form
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 29/10/2010
 *
 **/

/**
 * Form to manipulate a voucher messages
 **/
class FrmMailServer extends SManagementForm
{

    /**
     * Class constructor
     **/
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();
        parent::__construct(new BasMailServer(), array(), 'BusMailServer');

        $this->toolbar->disableButton( MToolBar::BUTTON_DELETE );
        $this->toolbar->disableButton( MToolBar::BUTTON_PRINT );
        $this->toolbar->disableButton( MToolBar::BUTTON_NEW );
        $this->toolbar->disableButton( MToolBar::BUTTON_SEARCH );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        if ( in_array($function, array(SForm::FUNCTION_UPDATE, '')) )
        {
            $business = new BusinessBasicBusMailServer();
            $data = $business->getMailServer();
            if (is_object($data))
            {
                $function = SForm::FUNCTION_UPDATE;
                $fields[] = new MHiddenField('function', $function );
            }
        }
        
        $fields[] = $host = new MTextField('host', $this->getFormValue('host', $data->host), _M('Servidor', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $host->setJsHint(_M('Endereço do servidor SMTP', $module));
        $validators[] = new MRequiredValidator('host');
        
        $fields[] = $port = new MTextField('port', $this->getFormValue('port', $data->port), _M('Porta', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $port->setJsHint(_M('Porta do servidor SMTP', $module));
        $validators[] = new MIntegerValidator('port', null, 'required');

        $lblEnableAuth   = new MText('lblUseAuth', _M('Autenticação de usuário',$module) . '?');
        $lblEnableAuth->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $enableAuth = strlen($this->getFormValue('enableAuth', $data->enableAuth)) > 0 ? $this->getFormValue('enableAuth', $data->enableAuth) : DB_FALSE;
        $enableAuth = new MRadioButtonGroup('enableAuth', null, SAGU::listTrueFalse(1), $enableAuth, null, 'horizontal');
        $enableAuth->setShowLabel(false);
        $hctEnableAuth = new MHContainer('hctEnableAuth', array($lblEnableAuth, $enableAuth));

        $lblSmtpUser = new MText('lblSmtpUser', _M('Usuário', $module));
        $lblSmtpUser->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $smtpUser = new MTextField('smtpUser', $this->getFormValue('smtpUser', $data->smtpUser), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $smtpUser->setJsHint(_M('Usuário do servidor SMTP', $module));
        $hctSmtpUser = new MHContainer('hctUsername', array($lblSmtpUser, $smtpUser));

        $lblSmtpPassword = new MText('lblSmtpPassword', _M('Senha', $module));
        $lblSmtpPassword->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $smtpPassword = new MPasswordField('smtpPassword', $this->getFormValue('smtpPassword', $data->smtpPassword), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $smtpPassword->setJsHint(_M('Senha do servidor SMTP', $module));
        $hctSmtpPassword = new MHContainer('hctPassword', array($lblSmtpPassword, $smtpPassword));

        $fields[] = new MBaseGroup('bgrAuthentication', _M('Autenticação', $module), array($hctEnableAuth, $hctSmtpUser, $hctSmtpPassword), 'vertical');

        $optsSecureAuth = array(
            array('ssl', _M('SSL', $module)),
            array('tls', _M('TLS', $module)),
        );
        $fields[] = $secureAuth = new MSelection('secureAuth', $data->secureAuth, _M('Autenticação segura', $module), $optsSecureAuth);
        $secureAuth->setJsHint(_M('Informe o tipo de autenticação segura', $module));

        parent::defineFields($fields, $validators, $data);
    }
}
?>

