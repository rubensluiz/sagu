<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Upload csv file note form
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 13/10/2010
 *
 **/

class FrmUploadCsvPhysicalPerson extends SForm
{
    protected $_fields;
    protected $_validators;
    protected $_errors;
    protected $courseOptions;
    protected $importedData;
    
    protected $busFile;
    protected $busPhysicalPerson;
    protected $busPhysicalPersonStudent;
    protected $busCity;
    protected $busCountry;
    protected $busDocument;
    protected $busLegalPerson;
    protected $busLocation;
    protected $busUser;
    protected $busMaritalStatus;
    protected $busState;
    protected $busLocationType;
    
    protected $allData;


    public function __construct($title, $object = null, $pkey = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // Instancia o business file
        $dbs = array();
        $dbs[] = $this->busFile = new BusinessBasicBusFile();
        $dbs[] = $this->busPhysicalPerson = new BusinessBasicBusPhysicalPerson();
        $dbs[] = $this->busPhysicalPersonStudent = new BusinessBasicBusPhysicalPersonStudent();
        $dbs[] = $this->busCity = new BusinessBasicBusCity();
        $dbs[] = $this->busCountry = new BusinessBasicBusCountry();
        $dbs[] = $this->busDocument = new BusinessBasicBusDocument();
        $dbs[] = $this->busLegalPerson = new BusinessBasicBusLegalPerson();
        $dbs[] = $this->busLocation = new BusinessBasicBusLocation();
        $dbs[] = $this->busUser = new BusinessAdminBusUser();
        $dbs[] = $this->busMaritalStatus = new BusinessBasicBusMaritalStatus();
        $dbs[] = $this->busState = new BusinessBasicBusState();
        $dbs[] = $this->busLocationType = new BusinessBasicBusLocationType();
        
        foreach ( $dbs as $db )
        {
        }

        parent::__construct(is_string($title) ? $title : _M('Importação de pessoas físicas', $module), $object ? $object : null, $pkey ? $pkey : null);

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }


    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // Pega os dados
        $data = $this->getTypesData();

        $this->addSubscriptionFields();

        // Field upload CSV file
        $this->_fields[] = new MFileField('uploadCsvFileSubscriptionRegister', $data->uploadCsvFileSubscriptionRegister, _M('Importar arquivo CSV',$module), 40);
        $this->_fields[] = new MSeparator();
        $inscriptionsLabel = new MText('inscriptionsLabel', _M('Ordem de inscrição para o arquivo',$module) . ':');
        $inscriptionsLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $this->_validators[] = new MRequiredValidator('uploadCsvFileSubscriptionRegister', '', 'required');

        // Instruções para montagem do arquivo CSV
        $this->_fields[] = new MText('inscriptionsColumnT', _M('A ordem das colunas do arquivo de importação deve ser assim:', $module) );
        $this->_fields[] = new MSeparator();

        // Foreach responsável por montar os MText para informar a ordem das colunas do CSV
        
        $descs = $this->getHumanDescription();
        
        for($i=1; $i<=count($descs); $i++)
        {
            $options[$i] = 'Coluna '.$i;
        }
        
        $counter = 1;
        foreach ( $descs as $key=>$collumn)
        {
            //$flds[] = new MText('inscriptionsColumn'.$counter, _M('Coluna', $module) . ' ' . $counter.' => ' . $collumn);
            $collumnLabel = new MTextLabel('collumn' . $key, $collumn . ':');
            $collumnLabel->setClass('m-caption');
            $selection    = new MSelection('order' . $key, $counter, $collumn, $options);
            $info[] = $container = new MHContainer('container' . $key, array($collumnLabel, $selection));
            $container->setShowLabel(false);
            $container->addAttribute('style', 'float:right;');
            $counter++;
        }
        
        $flds[] = $div = new MDiv('infoDiv', $info);
        $div->addBoxStyle('width', '270px;');

        // Base group para organizar
        $bsgInscriptionLabel = new BaseGroup('bsgInscriptionLabel', '', $flds, 'vertical' );
        $bsgInscriptionLabel->addBoxStyle('width', '90%');

        $this->_fields[] = $bsgInscriptionLabel;
        $this->_fields[] = new MSeparator();
        $this->_fields[] = new MButton('submit_button', _M('Enviar', $module));
        $this->_fields[] = new MSeparator();

        $this->SetFields($this->_fields);
        $this->SetValidators($this->_validators);

        parent::defineFields();
    }
    
    public function getSelectionsInfo()
    {
        
    }


    public function submit_button_click($sender=NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        try
        {
            SDatabase::beginTransaction();

            // Tenta pegar o arquivo que foi enviado
            if ( $_FILES["uploadCsvFileSubscriptionRegister"]["error"] === 0 )
            {
                $data->uploadFileName = $_FILES["uploadCsvFileSubscriptionRegister"]["name"];
                $data->contentType = $_FILES["uploadCsvFileSubscriptionRegister"]["type"];
                $data->size = $_FILES["uploadCsvFileSubscriptionRegister"]["size"];

                $tempFile = $_FILES["uploadCsvFileSubscriptionRegister"]["tmp_name"];

                // Grava o arquivo
                $fileId = $this->busFile->insertFile($data, $tempFile);
            }

            // Se não existe o arquivo, erro
            if ( !$fileId )
            {
                throw new Exception(_M('Falha no envio do arquivo. Por favor, verifique se você selecionou o arquivo a ser importado e tente novamente. O arquivo não foi importado, nenhuma alteração foi feita.', $module));
            }

            $this->checkSelectiveProcess();

            // Abre o arquivo e importa os dados
            $content = $this->busFile->getFileAsString($fileId, true);
            if ( !$content )
            {
                throw new Exception(_M('Não foi possível ler o arquivo. O arquivo não foi importado, nenhuma alteração foi feita.', $module));
            }

            // Percorre o arquivo linha a linha pegando e organizando os dados
            $globalErrors = array();
            foreach ( $content as $i => $line )
            {
                $this->_errors = array();
                $lineNumber = $i + 1;
                $this->importedData = $this->getDataProcessed($line);

                $this->checkImportErrors();

                $personsImported[] = $this->importedData;

                foreach ( $this->_errors as $err )
                {
                    $globalErrors[] = _M('Linha @1: @2', $module, $lineNumber, $err);
                }
            }

            // Exibe log de erros caso tenha ocorrido e cancela operacao
            if ( count($globalErrors) > 0 )
            {
                $this->_errors = implode("<br><br>- ", $globalErrors);
                throw new Exception( _M("Os seguintes erros ocorreram:<br><br>- @1", $module, $this->_errors) );
            }
            
            foreach ( $personsImported as & $importedData )
            {
                // Objeto que conterá todos os dados da pessoa
                $physicalPerson = new stdClass();
                $physicalPerson->name = $importedData->name;

                $filters = new stdClass();
                if ( strlen($importedData->cpf) > 0 )
                {
                    $filters->content = $importedData->cpf;
                    $physicalPerson->personId = $this->busPhysicalPerson->searchPhysicalPersonByDocument($filters);
                }

                if ( !is_null($physicalPerson->personId) && strlen($importedData->rg) > 0 )
                {
                    $filters->content = $importedData->rg;
                    $physicalPerson->personId = $this->busPhysicalPerson->searchPhysicalPersonByDocument($filters);
                }

                //Save person data
                foreach ((array)$importedData as $key => $val)
                {
                    $physicalPerson->$key = $val;
                }

                $physicalPerson->sentEmail = DB_FALSE;
                $physicalPerson->workAtHome = DB_FALSE;

                //
                $filters = new stdClass();
                $filters->login = $importedData->userData->login;
                $rows = $this->busUser->searchUser($filters);
                if ( count($rows) <= 0 )
                {
                    $this->busUser->insertUser($importedData->userData);
                }
                $importedData = $this->savePhysicalPerson($physicalPerson);
            }

            SDatabase::commit();
            
            if ( count($personsImported) > 0 )
            {
                $this->addField(new MSeparator(''));
                $this->addField( $this->getTableRaw($personsImported) );

                $this->AddInfo(_M('Importação concluída com sucesso.', $module));
            }
        }
        catch ( Exception $e )
        {
            SDatabase::rollback();
            $this->AddError($e->getMessage());
        }
    }

    
    /**
     * Processa dados e retorna o stdClass
     * OBS: O array com os dados no arquivo CSV devem estar na mesma posicao do array $humanDescription
     *
     * @param stdClass $line
     */
    public function getDataProcessed($line)
    {
        $importedData = new stdClass();
        $list = (array) explode(';', $line);

        //$count = 0;
        foreach ( $this->getHumanDescription() as $key => $val )
        {
            if($_REQUEST['order'.$key])
            {   
                $importedData->$key = $list[$_REQUEST['order'.$key]-1];
            }
        }
        
        return $importedData;
    }

    
    public function addSubscriptionFields()
    {
    }


    /**
     * Numero maximo de caracteres
     *
     * @return array
     */
    public function getMaxChars()
    {
        return array(
            'name' => 100,
            'email' => 60,
            'url' => 255,
            'login' => 25,
            'isAllowPersonalData' => 1,
            'receiveMail' => 1,
            'sex' => 1,
            'maritalStatusId' => 1,
            'dateBirth' => 10,
            'cpf' => 14,
            'fatherName' => 255,
            'motherName' => 255,
            'zipCode' => 8,
            'city' => 255,
            'state' => 2,
            'country' => 3,
            'locationType' => 60,
            'location' => 255,
            'number' => 10,
            'complement' => 255,
            'neighborhood' => 255,
            'residentialPhone' => 15,
            'cellPhone' => 15,
            'messagePhone' => 50,
            'isHighSchool' => 1,
            'ethnicOrigin' => 255,
        );
    }


    /**
     * Descricao humana dos campos
     *
     * @return array
     */
    public function getHumanDescription()
    {
        return array(
            'name'               => _M('Nome da pessoa', $module),
            'email'              => _M('E-mail', $module),
            'url'                => _M('URL', $module),
            'login'               => _M('Usuário', $module),
            'isAllowPersonalData'=> _M('Permite dados pessoais', $module),
            'receiveMail'        => _M('Recebe e-mail', $module),
            'sex'                => _M('Sexo', $module),
            'maritalStatusId'    => _M('Estado civil', $module),
            'dateBirth'          => _M('Data de nascimento', $module),
            'cpf'                => _M('CPF da pessoa', $module),
            'fatherName'         => _M('Nome do pai', $module),
            'motherName'         => _M('Nome da mãe', $module),
            'zipCode'            => _M('CEP', $module),
            'city'               => _M('Cidade', $module),
            'state'              => _M('Estado', $module),
            'country'            => _M('País', $module),
            'locationType'       => _M('Tipo de logradouro', $module),
            'location'           => _M('Logradouro', $module),
            'number'             => _M('Número', $module),
            'number'             => _M('Número', $module),
            'complement'         => _M('Complemento', $module),
            'neighborhood'       => _M('Bairro', $module),
            'residentialPhone'   => _M('Telefone residencial', $module),
            'cellPhone'          => _M('Telefone celular', $module),
            'messagePhone'       => _M('Pessoa de contato telefonico', $module),
            'isHighSchool'       => _M('Ensino médio completo', $module),
            'ethnicOrigin'       => _M('Origem Étnica', $module),
        );
    }


    /**
     * Campos que sao obrigatorios
     *
     * @return array
     */
    public function getRequiredFields()
    {
        return array('name', 'sex', 'dateBirth', 'cpf');
    }


    /**
     * Verifica por erros na importacao dos dados
     */
    public function checkImportErrors()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $maxChars = $this->getMaxChars();
        $humanDescription = $this->getHumanDescription();
        $requiredFields = $this->getRequiredFields();

        // Verifica maximo de caracteres
        foreach ( $maxChars as $key => $val )
        {
            $importVal = $this->importedData->$key;

            // Realiza validacoes de tamanho maximo de caracteres
            if ( strlen($importVal) > $val )
            {
                $this->_errors[] = _M('O campo "@1" ultrapassou o limite de caracteres (@2)', $module, $humanDescription[$key], $val);
            }
        }

        // Verifica campos obrigatorios
        foreach ( $requiredFields as $field )
        {
            $value = $this->importedData->$field;
            if ( strlen(trim($value)) <= 0 )
            {
                $this->_errors[] = _M('O campo "@1" é obrigatório.', $module, $humanDescription[$field]);
            }
        }

        //
        // Realiza validacoes
        //
        // Email
        if ( ( strlen($this->importedData->email) > 0 ) && !SValidator::email($this->importedData->email) )
        {
            $this->_errors[] = _M('O campo "@1" está inválido', $module, $humanDescription['email']);
        }
        //
        // Usuario
        //
        $userData = new stdClass();
        $userData->login = $this->importedData->login;
        $searchByLogin = $this->busUser->searchUser($userData);
        // Pesquisa por usuario via CPF
        $userData->login = $this->importedData->cpf;
        $searchByCPF = $this->busUser->searchUser($userData);
        if ( ( count($searchByLogin) <= 0 ) && ( count($searchByCPF) > 0 ) )
        {
            $this->importedData->login = $this->importedData->cpf;
        }
        //
        $userData->login = ( strlen($this->importedData->login) > 0 ) ? $this->importedData->login : $this->importedData->cpf;
        $userData->name = $this->importedData->name;
        $userData->nickname = $this->importedData->login;
        $userData->password = $this->importedData->login;
        $this->importedData->userData = $userData;
        // Caracteres que sinificam true/false
        // Campos true/false (Permite dados pessoais / Recebe e-mail / Ensino medio completo)
        $trueChars = array('t', 'y', 's');
        $falseChars = array('n', 'f');
        $trueFalseChars = array_merge($trueChars, $falseChars);
        foreach ( array('isAllowPersonalData', 'receiveMail', 'isHighSchool') as $field )
        {
            $val = $this->importedData->$field;
            if ( ( strlen($val) > 0 ) && !in_array(strtolower($val), $trueFalseChars) )
            {
                $this->_errors[] = _M('O campo "@1" está inválido.', $module, $humanDescription[$field]);
            }
            $this->importedData->$field = in_array($val, $trueChars) ? DB_TRUE : DB_FALSE;
        }
        // Sexo
        if ( strlen($this->importedData->sex) > 0 )
        {
            if ( ! in_array(strtoupper($this->importedData->sex), array_keys(SAGU::listSex())) )
            {
                $this->_errors[] = _M('O campo "@1" está inválido.', $module, $humanDescription['sex']);
            }
        }
        // Estado civil
        if ( strlen($this->importedData->maritalStatusId) > 0 )
        {
            if ( ! in_array(strtoupper($this->importedData->maritalStatusId), array_keys($this->busMaritalStatus->listMaritalStatus(true))) )
            {
                $this->_errors[] = _M('O campo "@1" está inválido.', $module, $humanDescription['maritalStatusId']);
            }
        }
        // Data de nascimento
        if ( strlen($this->importedData->dateBirth) > 0 )
        {
            $exp = explode('/', $this->importedData->dateBirth);
            if ( ! @checkdate($exp[1], $exp[0], $exp[2]) )
            {
                $this->_errors[] = _M('O campo "@1" está inválido.', $module, $humanDescription['dateBirth']);
            }
        }
        // CPF
        if ( strlen($this->importedData->cpf) > 0 )
        {
            if ( SAGU::checkCPF($this->importedData->cpf) == DB_FALSE )
            {
                $this->_errors[] = _M('O campo "@1" está inválido.', $module, $humanDescription['cpf']);
            }
        }
        
        // ZIP code
        if ( strlen($this->importedData->zipCode) > 0 )
        {
            $this->importedData->zipCode = str_replace('-', '', $this->importedData->zipCode);
            if ( strlen($this->importedData->zipCode) != $maxChars['zipCode'] )
            {
                $this->_errors[] = _M('O campo "@1" está inválido.', $module, $humanDescription['zipCode']);
            }
        }
        
        // Cidade / estado / país
        $country = null;
        $state = null;
        if ( strlen($this->importedData->country) > 0 )
        {
            $country = strtoupper($this->importedData->country);
            $this->getCountry($country);
            $this->importedData->countryIdBirth = $country;
        }
        if ( ( strlen($this->importedData->state) > 0 ) && ( strlen($country) > 0 ) )
        {
            $state = strtoupper($this->importedData->state);
            $this->getState($state, $country);
        }
        
        // Código da cidade
        if ( strlen($this->importedData->city) > 0 )
        {
            if ( ( strlen($state) <= 0 ) || ( strlen($country) <= 0 ) )
            {
                $this->_errors[] = _M('Foi detectado que uma cidade foi informada (campo @1), porém não seu estado ou país.', $modules, $humanDescription['city']);
            }
            else
            {
                $this->importedData->cityId = $this->getCity($this->importedData->city, $state, $country);
            }
        }
        
        // Código do tipo de logradouro
        if ( strlen($this->importedData->locationType) > 0 )
        {
            $this->importedData->locationTypeId = $this->busLocationType->getLocationTypeIdByName($this->importedData->locationType);
            
            if ( $this->importedData->locationTypeId === 0 )
            {
                $this->_errors[] =_M("O tipo de logradouro '{$this->importedData->locationType}' foi informado no arquivo CSV, mas não foi encontrado na base de dados.");
            }
        }
    }
    

    /**
     * Salva dados da pessoa fisica
     *
     * @param stdClass $physicalPerson
     * @return stdClass
     */
    public function savePhysicalPerson($physicalPerson)
    {
        if ( strlen($physicalPerson->personId) > 0 )
        {
            $this->busPhysicalPerson->updatePhysicalPerson($physicalPerson);
        }
        else
        {
            $physicalPerson->personId = $this->busPhysicalPerson->insertPhysicalPerson($physicalPerson);
        }

        return $physicalPerson;
    }

    
    public function getTypesData()
    {
        return new stdClass();
    }


    public function getCountry($country)
    {
        $getCountry = $this->busCountry->getCountry( $country );
        // Caso nao exista, insere novo
        if ( strlen($getCountry->countryId) <= 0 )
        {
            $cData = new stdClass();
            $cData->countryId = $country;
            $cData->name = $country;
            $cData->nationality = $country;
            $ok = $this->busCountry->insertCountry($cData);
        }
    }


    public function getState($state, $country)
    {
        $getState = $this->busState->getState( $state, $country );
        if ( strlen($getState->stateId) <= 0 )
        {
            $sData = new stdClass();
            $sData->stateId = $state;
            $sData->countryId = $country;
            $sData->name = $state;
            $ok = $this->busState->insertState($sData);
        }
    }


    public function getCity($city, $state, $country)
    {
        // Caso cidade nao exista na base, inserir
        $filters = (object) array('nameUpper' => $city, 'stateId' => $state, 'countryId' => $country);
        $rows = $this->busCity->searchCity($filters);
        if ( count($rows) > 0 )
        {
            $cityId = $rows[0][0];
        }
        else
        {
            $cData = new stdClass();
            $cData->name = $city;
            $cData->stateId = $state;
            $cData->countryId = $country;
            $cityId = $this->busCity->insertCity($cData);
        }

        return $cityId;
    }


    /**
     *
     * @param array
     * @return MTableRaw
     */
    public function getTableRaw($personsImported)
    {
        $tableColumns[] = _M('Código da pessoa', $module);
        $tableColumns[] = _M('Nome da pessoa', $module);

        foreach ( (array) $personsImported as $count => $personData )
        {
            $importedValues[$count][] = '<center><font color="blue">'.$personData->personId.'</font></center>';
            $importedValues[$count][] = '<center><font color="blue">'.$personData->name.'</font></center>';
        }

        $table = new MTableRaw(_M('Pessoas importadas com sucesso', $module), $importedValues, $tableColumns);

        return $table;
    }


    /**
     * Valida dados de processo seletivo
     */
    public function checkSelectiveProcess()
    {
    }
}
?>