<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for basPhysicalPersonProfessor table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Jonas Gualberto Diel [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 12/09/2005
 *
 **/

/**
 * Form to search the basPhysicalPersonProfessor table
 */
class FrmPhysicalPersonProfessorSearch extends SSearchForm
{
    /**
     * Class constructor
     */
    public function __construct($data)
    {
        parent::__construct( _M('Localizar', 'basic'), new BasPhysicalPersonProfessor(), array('personId'), 'BusPhysicalPersonProfessor');
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        //Field professor
        $personLabelS = new MText('personLabelS', _M('Professor',$module));
        $personLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $personIdS = new MLookupTextField('personIdS', $this->getFormValue('personIdS',$data->personIdS), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'personNameS', $module, 'PhysicalPersonProfessor', null, null, true);
        $personIdS->setJsHint(_M('Informe o código da pessoa',$module));
        $validators[] = new MIntegerValidator('personIdS', _M('Professor',$module), 'optional');
        $personNameS = new MTextField('personNameS', $this->personNameS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personNameS->setJsHint(_M('Nome da pessoa',$module));
        $hctPerson = new MHContainer('hctPerson', array($personLabelS, $personIdS, $personNameS));
        $hctPerson->setShowLabel(true);
        $fields[]  = $hctPerson;

        if ( SAGU::getParameter('BASIC', 'INCREASE_SECURITY_LEVEL') == 'YES' )
        {
    	    $this->toolbar->disableButton('tbBtnSave');
        }

		parent::defineFields($fields, $module, 'GrdPhysicalPersonProfessorSearch', $validators);
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = parent::getTypesData();
        $fieldName = 'personName';

        if ( strlen(MIOLO::_REQUEST($fieldName)) == 0 )
        {
            $fieldName .= 'S';
        }

        $data->name = MIOLO::_REQUEST($fieldName);

        return $data;
    }
}
?>
