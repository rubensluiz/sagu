<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Document type form
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 02/08/2005
 *
 **/

/**
 * Form to manipulate a document type
 **/
class FrmDocumentType extends SManagementForm
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new BasDocumentType(), array('documentTypeId'), 'BusDocumentType');
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $pk = $this->getObjectPk();
            $fields[] = new MTextLabel('', $pk->documentTypeId, _M('Código', $module));
            $fields[] = new MHiddenField('documentTypeId', $pk->documentTypeId);
            $data = $this->busObject->getDocumentType($pk->documentTypeId);
        }
        if ( in_array($function, array(SForm::FUNCTION_INSERT)) )
        {
            $data->nacionalidade = BasDocumentType::NACIONALIDADE_BRASILEIROS;
        }

        //Field document name
        $data->documentTypeName = $this->getFormValue('documentTypeName', $data->name);
        $fields[] = $documentTypeName = new MTextField('documentTypeName', $data->documentTypeName, _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $documentTypeName->setJsHint( _M('Informe o nome do tipo de documento',$module) );
        $validators[] = new MRequiredValidator('documentTypeName');

        $fields[] = $mask = new MTextField('mask', $this->getFormValue('mask', $data->mask), _M('Máscara', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $mask->setJsHint( _M('Informe a máscara para este documento',$module) );
        $options = array('' => _M('Não informado', $module), 'F' => _M('Feminino', $module), 'M' => _M('Masculino', $module));

        $fields[] = $sex = new MSelection('sex', $this->getFormValue('sex', $data->sex), _M('Sexo', $module), $options, false, '');
        $sex->setJsHint( _M('Informe o sexo',$module) );
        $options = array('P' => _M('Física', $module), 'L' => _M('Jurídica', $module));

        $fields[] = $personType = new MSelection('personType', $this->getFormValue('personType', $data->personType), _M('Tipo de pessoa', $module), $options, false, '');
        $personType->setJsHint( _M('Informe o tipo de pessoa',$module) );
        $validators[] = new MRequiredValidator('personType');

        $fields[] = $minAge = new MTextField('minAge', $this->getFormValue('minAge', $data->minAge), _M('Idade mínima', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $minAge->setJsHint( _M('Informe a idade mínima',$module) );
        $validators[] = new MRegExpValidator('minAge', '', '(^[0-9]+)');

        $fields[] = $maxAge = new MTextField('maxAge', $this->getFormValue('maxAge', $data->maxAge), _M('Idade máxima', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $maxAge->setJsHint( _M('Informe a idade máxima',$module) );
        $validators[] = new MRegExpValidator('maxAge', '', '(^[0-9]+)');

        $needDeliverLabel = $needDeliver = new MText('needDeliverLabel', _M('Necessita entrega', $module) . '?');
        $needDeliverLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        $needDeliver = $this->GetFormValue('needDeliver', $data->needDeliver) ? $this->GetFormValue('needDeliver', $data->needDeliver) : DB_FALSE;
        $needDeliver = new MRadioButtonGroup('needDeliver', '', SAGU::listTrueFalse(1), $needDeliver, null, 'horizontal');
        $needDeliver->SetShowLabel(false);
        $needDeliver->setAutoPostBack(true);
        
        $hctNeedDeliver = new MHContainer('hctNeedDeliver', array($needDeliverLabel, $needDeliver));
        $fields[] = $hctNeedDeliver;
        
        if ( $this->GetFormValue('needDeliver', $data->needDeliver) == DB_TRUE )
        {
            
            $informarpendencianoportalLabel = $informarpendencianoportal = new MText('informarpendencianoportalLabel', _M('Informar Pendencia no portal', $module) . '?');
            $informarpendencianoportalLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            
            $msg = "Adiciona mensagem no portal caso o usuário esteja pendente da entrega deste documento.";
            $hint = new MText('hint', $msg);
            $hint->addAttribute('style', 'padding: 2px 3px; border-radius: 0.5em; background-color: #F2F5F7; font-size: 10px; border: 1px solid #93BCD9; color: #287EB0; display: inline-block; text-align: left'); 

            $informarpendencianoportal = $this->GetFormValue('informarpendencianoportal', $data->informarpendencianoportal) ? $this->GetFormValue('informarpendencianoportal', $data->informarpendencianoportal) : DB_FALSE;
            $informarpendencianoportal = new MRadioButtonGroup('informarpendencianoportal', '', SAGU::listTrueFalse(1), $informarpendencianoportal, null, 'horizontal');

            $informarpendencianoportal->SetShowLabel(false);
            $informarpendencianoportal->setAutoPostBack(true);

            $hctinformarpendencianoportal = new MHContainer('hctinformarpendencianoportal', array($informarpendencianoportalLabel, $informarpendencianoportal, $hint));
            $fields[] = $hctinformarpendencianoportal;
            
            if( $this->GetFormValue('informarpendencianoportal', $data->informarpendencianoportal) == DB_TRUE )
            {
                $msg2 = "Módulo Acadêmico: Número de dias limite a partir do início do período letivo para permitir acesso ao portal do ALUNO. Após o limite o portal do aluno é bloqueado até que o documento seja entregue.
                <br> Módulo Pedagógico: Número de dias limite a partir do início da oferta da turma para permitir acesso ao portal do ALUNO. Após o limite o portal do aluno é bloqueado até que o documento seja entregue.";
                
                //Limite de dias
                $fields[] = $limiteDeDiasParaBloquear = new MTextField('limiteDeDiasParaBloquear', $this->getFormValue('limiteDeDiasParaBloquear', $data->limiteDeDiasParaBloquear), _M('Limite de dias para bloquear', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), $msg2);
                $limiteDeDiasParaBloquear->setJsHint( _M('Informe a quantidade de dias para bloquear o portal',$module) );

                $validators[] = new MRegExpValidator('limiteDeDiasParaBloquear', '', '(^[0-9]+)');
            }
            
        }
        
        //isBlockEnroll
        $isBlockEnrollLabel = new MText('isBlockEnrollLabel', _M('Bloqueia matrícula', $module) . '?');
        $isBlockEnrollLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        $isBlockEnroll = $this->GetFormValue('isBlockEnroll', $data->isBlockEnroll) ? $this->GetFormValue('isBlockEnroll', $data->isBlockEnroll) : DB_TRUE;
        $isBlockEnroll = new MRadioButtonGroup('isBlockEnroll', '', SAGU::listTrueFalse(1), $isBlockEnroll, null, 'horizontal');
        $isBlockEnroll->SetShowLabel(false);

        $hctIsBlockEnroll = new MHContainer('hctIsBlockEnroll', array($isBlockEnrollLabel, $isBlockEnroll));
        $fields[] = $hctIsBlockEnroll;
        
        //exige preenchimento do campo conteúdo se o campo foi entregue está marcado como true
        $exigePreenchimentoLabel = new MText('exigePreenchimentoLabel', _M('Exige preenchimento do conteúdo', $module) . '?');
        $exigePreenchimentoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        $exigePreenchimento = $this->GetFormValue('exigePreenchimento', $data->exigePreenchimento) ? $this->GetFormValue('exigePreenchimento', $data->exigePreenchimento) : DB_TRUE;
        $exigePreenchimento = new MRadioButtonGroup('exigePreenchimento', '', SAGU::listTrueFalse(1), $exigePreenchimento, null, 'horizontal');
        $exigePreenchimento->SetShowLabel(false);

        $hctexigePreenchimento = new MHContainer('hctExigePreenchimento', array($exigePreenchimentoLabel, $exigePreenchimento));
        $fields[] = $hctexigePreenchimento;
        
        // Configuração para validar se o conteúdo do documento deve ser único 
        $validaConteudoLabel = new MText('validaConteudoLabel', _M('Conteúdo do documento deve ser único?', $module) . '?');
        $validaConteudoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        $validaConteudo = $this->GetFormValue('validaConteudo', $data->validaConteudo) ? $this->GetFormValue('validaConteudo', $data->validaConteudo) : DB_TRUE;
        $validaConteudo = new MRadioButtonGroup('validaConteudo', '', SAGU::listTrueFalse(1), $validaConteudo, null, 'horizontal');
        $validaConteudo->SetShowLabel(false);

        $hctValidaConteudo = new MHContainer('hctValidaConteudo', array($validaConteudoLabel, $validaConteudo));
        $fields[] = $hctValidaConteudo;
        
        $txtFillHint = $fillHint = new MTextField('fillHint', $data->fillHint, _M('Dica de preenchimento', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $fillHint->setJsHint( _M('Informe a dica de preenchimento',$module) );
        $fields[] = $txtFillHint;

        
        if( SAGU::getParameter('BASIC', 'MODULE_RESIDENCY_INSTALLED') == 'YES' 
                || SAGU::getParameter('BASIC', 'MODULE_PEDAGOGICO_INSTALLED') == 'YES' 
                || SAGU::getParameter('BASIC', 'MODULE_RESMEDICA_INSTALLED') == 'YES' )
        {
            $fields[] = new MText('labelCadastroUsuario', _M('Permitir preenchimento no Cadastro de Usuário dos Módulos', $module) . ':');
        }
        
        if( SAGU::getParameter('BASIC', 'MODULE_RESIDENCY_INSTALLED') == 'YES' )
        {
            // Configuração para validar se o conteúdo do documento deve ser único 
            $moduloResidencyLabel = new MText('moduloResidencyLabel', _M('Residência Multiprofissional', $module) . '?');
            $moduloResidencyLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

            $moduloResidency = $this->GetFormValue('registroModuloResidency', $data->registroModuloResidency) ? $this->GetFormValue('registromoduloresidency', $data->registroModuloResidency) : DB_FALSE;
            $moduloResidency = new MRadioButtonGroup('registroModuloResidency', '', SAGU::listTrueFalse(1), $moduloResidency, null, 'horizontal');
            $moduloResidency->SetShowLabel(false);
            
            $moduloResidency = new MHContainer('hctRegistroModuloResidency', array($moduloResidencyLabel, $moduloResidency));
            $fields[] = $moduloResidency;
        }
        
        if( SAGU::getParameter('BASIC', 'MODULE_RESMEDICA_INSTALLED') == 'YES' )
        {
            // Configuração para validar se o conteúdo do documento deve ser único 
            $moduloResmedicaLabel = new MText('moduloResmedicaLabel', _M('Residência Médica', $module) . '?');
            $moduloResmedicaLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

            $moduloResmedica = $this->GetFormValue('registroModuloResmedica', $data->registroModuloResmedica) ? $this->GetFormValue('registroModuloResmedica', $data->registroModuloResmedica) : DB_FALSE;
            $moduloResmedica = new MRadioButtonGroup('registroModuloResmedica', '', SAGU::listTrueFalse(1), $moduloResmedica, null, 'horizontal');
            $moduloResmedica->SetShowLabel(false);
            
            $moduloResmedica = new MHContainer('hctRegistroModuloResmedica', array($moduloResmedicaLabel, $moduloResmedica));
            $fields[] = $moduloResmedica;
        }
        
        if( SAGU::getParameter('BASIC', 'MODULE_PEDAGOGICO_INSTALLED') == 'YES' )
        {
            // Configuração para validar se o conteúdo do documento deve ser único 
            $moduloPedagogicoLabel = new MText('moduloPedagogicoLabel', _M('Pedagógico', $module) . '?');
            $moduloPedagogicoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

            $moduloPedagogico = $this->GetFormValue('registroModuloPedagogico', $data->registroModuloPedagogico) ? $this->GetFormValue('registroModuloPedagogico', $data->registroModuloPedagogico) : DB_FALSE;
            $moduloPedagogico = new MRadioButtonGroup('registroModuloPedagogico', '', SAGU::listTrueFalse(1), $moduloPedagogico, null, 'horizontal');
            $moduloPedagogico->SetShowLabel(false);
            
            $moduloPedagogico = new MHContainer('hctRegistroModuloPedagogico', array($moduloPedagogicoLabel, $moduloPedagogico));
            $fields[] = $moduloPedagogico;
        }
        
        $options = array(
            array(_M('Brasileiros'), BasDocumentType::NACIONALIDADE_BRASILEIROS),
            array(_M('Estrangeiros não fronteiriços'), BasDocumentType::NACIONALIDADE_ESTRANGEIROS),
            array(_M('Entrangeiros fronteiriços'), BasDocumentType::NACIONALIDADE_ESTRANGEIROS_FRONTEIRICOS),
            array(_M('Todos'), BasDocumentType::NACIONALIDADE_TODOS)
        );
        
        $fields[] = $nacionalidade = new MRadioButtonGroup('nacionalidade', 'Disponível para', $options, $this->getFormValue('nacionalidade', $data->nacionalidade), null, 'horizontal');
        
        parent::defineFields($fields, $validators, $data);
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = parent::getTypesData();
        $fieldName = 'documentTypeName';

        if ( strlen(MIOLO::_REQUEST($fieldName)) == 0 )
        {
            $fieldName .= 'S';
        }

        $data->name = MIOLO::_REQUEST($fieldName);
        $data->informarpendencianoportal = $data->informarpendencianoportal ? $data->informarpendencianoportal : DB_FALSE;

        return $data;
    }
}
?>
