<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Legal person form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 31/08/2005
 *
 **/

/**
 * Form to manipulate tabbs
 **/

class FrmLegalPerson extends SStepByStepForm
{
    /**
     * Class constructor
     **/
    public function __construct($steps=null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $function = MIOLO::_request('function');

        parent::__construct(null, $steps, __CLASS__);

        //Disable toolbar buttons
        $this->toolbar->disableButton('tbBtnBack');
        $this->toolbar->disableButton('tbBtnPrint');
        if ( $function == 'insert' || $function == 'update' )
        {
            $this->toolbar->disableButton('tbBtnDelete');
            $this->toolbar->disableButton('tbBtnSave');
        }
        elseif ( $function == 'delete' )
        {
            $this->toolbar->disableButton('tbBtnSave');
        }
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        $busFile = new BusinessBasicBusFile();

        $stepData = $this->getStepData();
        $personId = $stepData->personId;
        if ((strlen($personId) > 0) && $this->isFirstAccess())
        {
            $business = new BusinessBasicBusLegalPerson();
            $data = $business->getLegalPerson($personId);
        }
        else
        {
            $data = $stepData;
        }
        
        $fields[] = new SHiddenField('mioloIdUser', $data->mioloIdUser);
        
        //BaseGroup 1
        // Field fake name
        $fakeNameLabel = new MText('fakeNameLabel', _M('Nome fantasia',$module) . ':');
        $fakeNameLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $fakeNameLabel->setClass('m-caption m-caption-required');
        $fakeName = new MTextField('fakeName', $this->getFormValue('fakeName',$data->fakeName), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $fakeName->setJsHint(_M('Informe o nome de fantasia da pessoa jurídica',$module));
        $validators[] = new MRequiredValidator('fakeName', _M('Nome fantasia',$module));
        $flds[] = new MHContainer('hctFakeName', array($fakeNameLabel, $fakeName));

        // Field phone number
        $phoneLabel = new MText('phoneLabel', _M('Fone',$module) . ':');
        $phoneLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $phone = new MTextField('phone', $this->getFormValue('phone',$data->phone), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), _M('Use os dois primeiros para o código DDD', $module));
        $phone->setJsHint(_M('Informe o número do telefone',$module));
        $flds[] = new MHContainer('hctPhone', array($phoneLabel, $phone));

        // Field fax number
        $faxLabel = new MText('faxLabel', _M('Fax',$module) . ':');
        $faxLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $fax = new MTextField('fax', $this->getFormValue('fax',$data->fax), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $fax->setJsHint(_M('Informe o número do fax',$module));
        $flds[] = new MHContainer('hctFax', array($faxLabel, $fax));
        $bsg1 = new BaseGroup('bsg1',_M('Dados gerais',$module),$flds,'vertical');
        $bsg1->showLabel = true;
        unset($flds);

        //BaseGroup 2
        // Field CNPJ
        $cnpjLabel = new MText('cnpjLabel', _M('CNPJ', $module) . ':');
        $cnpjLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $cnpj = new MTextField('cnpj', $this->getFormValue('cnpj',$data->cnpj), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $cnpj->setJsHint(_M('Informe o CNPJ',$module));
        $validators[] = new MCnpjValidator('cnpj', _M('CNPJ',$module));
        $flds[] = new MHContainer('hctCnpj', array($cnpjLabel, $cnpj));

        // Field state registration
        $stateRegistrationLabel = new MText('stateRegistrationLabel', _M('Inscrição estadual',$module) . ':');
        $stateRegistrationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $stateRegistration = new MTextField('stateRegistration', $this->getFormValue('stateRegistration',$data->stateRegistration), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $stateRegistration->setJsHint(_M('Informe a inscrição estadual',$module));
        $flds[] = new MHContainer('hctStateRegistration', array($stateRegistrationLabel, $stateRegistration));

        // Field city registration
        $cityRegistrationLabel = new MText('cityRegistrationLabel', _M('Inscrição municipal',$module) . ':');
        $cityRegistrationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $cityRegistration = new MTextField('cityRegistration', $this->getFormValue('cityRegistration',$data->cityRegistration), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $cityRegistration->setJsHint(_M('Informe a inscrição municipal',$module));
        $flds[] = new MHContainer('hctCityRegistration', array($cityRegistrationLabel, $cityRegistration));

        // Field legal person type
        $legalPersonTypeLabel = new MText('legalPersonTypeLabel', _M('Tipo de pessoa jurídica',$module) . ':');
        $legalPersonTypeLabel->setClass('m-caption m-caption-required');
        $legalPersonTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $business = new BusinessBasicBusLegalPersonType();
        $legalPersonTypeId = new MComboBox('legalPersonTypeId', $this->getFormValue('legalPersonTypeId', $data->legalPersonTypeId), null, $business->listLegalPersonType());
        $legalPersonTypeId->setJsHint(_M('Informe o tipo de pessoa jurídica',$module));
        $validators[] = new MIntegerValidator('legalPersonTypeId',_M('Tipo de pessoa jurídica',$module),'required');
        $flds[] = new MHContainer('hctLegalPersonType', array($legalPersonTypeLabel, $legalPersonTypeId));
        
        $hint = _M('Informe a alíquota, referente a emissão de notas fiscais eletrônicas. Ex.: Se for 5%(cinco por cento), o campo alíquota recebe o valor 5.',$module);
        $aliquotaLabel = new MText('aliquotaLabel', _M('Aliquota', $module) . ':');
        $aliquotaLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $aliquota = new MIntegerField('aliquota', $this->getFormValue('aliquota', $data->aliquota), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), $hint);
        $aliquota->setJsHint($hint);
        $flds[] = new MHContainer('hctAliquota', array($aliquotaLabel, $aliquota));
        
        $hint = _M('Informe o códigdo do serviço prestado, referente a lista do seu município.',$module);
        $servicoPrestadoLabel = new MText('servicoPrestadoLabel', _M('Código do serviço prestado', $module) . ':');
        $servicoPrestadoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $servicoPrestado = new MIntegerField('codigoServicoPrestado', $this->getFormValue('codigoServicoPrestado', $data->codigoServicoPrestado), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), $hint);
        $servicoPrestado->setJsHint($hint);
        $flds[] = new MHContainer('hctServicoPrestado', array($servicoPrestadoLabel, $servicoPrestado));
        
        // Field ispublic
        $isPublicLabel = new MText('isPublicLabel', _M('Instituição pública',$module));
        $isPublicLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $isPublicData = $this->getFormValue('isPublic',is_null($data->isPublic) ? DB_FALSE : $data->isPublic);
        $isPublic = new MRadioButtonGroup('isPublic', '', SAGU::listYesNo(1), $isPublicData, null, 'horizontal');
        $isPublic->setShowLabel(false);
        $hctIsPublic = new MHContainer('hctIsPublic', array($isPublicLabel, $isPublic));
        $flds[] = $hctIsPublic;
        
        $bsg2 = new BaseGroup('bsg2',_M('Registro',$module),$flds,'vertical');
        $bsg2->showLabel = true;
        unset($flds);
        
        if ( strlen($personId) > 0 )
        {
            $filters = new stdClass();
            $filters->uploadFileName = $personId;
            $file = $busFile->searchFile($filters);
                        
            if ( strlen($file[0][0]) > 0 )
            {
                $flds[] = new MSeparator();
                
                $message = _M('Já existe uma certificação anexada para essa pessoa, caso seja informado um novo arquivo, irá substituir o antigo.', $module);
                $flds[] = MMessage::getStaticMessage($name, $message, MMessage::TYPE_WARNING);
            }
        }
        
        $file = new MFileField('uploadFile', null, _M('Anexar certificado digital:', $module));
        $file->addAllowedExtension(MFileField::EXT_PFX);
        $file->addAllowedExtension(MFileField::EXT_CER);
        $flds[] = $file;
        
        $bsgCertificacao = new BaseGroup('bsgCertificacao',_M('Certificação digital',$module),$flds,'vertical');
        $bsgCertificacao->showLabel = true;
        unset($flds);

        $fields[] = $bsg1;
        $fields[] = $bsg2;
        $fields[] = $bsgCertificacao;

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

    }

    /**
     * Event triggered when user click save
     **/
    public function finalizeButton_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        if ( $this->fieldsOk() )
        {
            $data = $this->getTypesData($action);
            
            //Pega os dados da foto
            $photoInfo = SPhotoManager::getData('photoManager');
            
            if(!is_null($photoInfo))
            {
                $data->_uploadFile = $photoInfo->tmpFilePath;

            }
            
            $business2 = new BusinessBasicBusLegalPerson();
            $busDadosBancariosDaPessoa = new BusinessFinanceBusDadosBancariosDaPessoa();

            $business = new BusinessBasicBusTransaction();
            $business->beginTransaction();
            
            $data->bankId = MIOLO::_REQUEST('dadosBancario');
            $data->agencia = MIOLO::_REQUEST('agencia');
            $data->digitoDaAgencia = MIOLO::_REQUEST('digitoAgencia');
            $data->conta = MIOLO::_REQUEST('conta');
            $data->digitoDaConta = MIOLO::_REQUEST('digitoConta');
            $data->observacao = MIOLO::_REQUEST('observacao');
            
            //PERSON e LEGAL PERSON
            if ( $function == 'update' )
            {
                if (!$data->personId)
                {
                    $data->personId = MIOLO::_REQUEST('personId');
                }
                $ok2 = $business2->updateLegalPerson($data);
                $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED');
                
                $busDadosBancariosDaPessoa->updateDadosBancariosDaPessoa($data);
            }
            elseif ( $function == 'insert' )
            {
                $ok2 = $business2->insertLegalPerson($data);
                $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED');
                $data->personId = $ok2->personId;
                
                $busDadosBancariosDaPessoa->insertDadosBancariosDaPessoa($data);
            }
                        
            if ( strlen($data->personId) > 0 && strlen($_FILES['uploadFile']['name']) > 0 )
            {
                // Salva o arquivo anexado de certificação digital
                $this->savarCertificadoDigital($data->personId);
            }

            $_SESSION['dadosBancario'] = null;
            $_SESSION['agencia'] = null;
            $_SESSION['digitoAgencia'] = null;
            $_SESSION['conta'] = null;
            $_SESSION['digitoConta'] = null;
            $_SESSION['observacao'] = null;
            
            if ( $ok2 )
            {
                $business->commit();
                $opts = array('personIdS' => $data->personId);
                
                parent::finalizeButton_click($args);
                
                if ( $function == 'update' )
                {
                    $caption = _M('Informação', $module);
                    $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
                }
                else
                {
                    unset($opts);
                    $goto = $MIOLO->getActionURL( $module, $action, null, $opts);

                    $opts = array('function'=>'insert');
                    $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);

                    $caption = _M('Questão',$module);
                    $MIOLO->question($msg, $gotoYes, $goto);
                }
            }
            else
            {
                parent::finalizeButton_click($args);
                
                $msg  = _M('Erro executando a operação solicitada.',$module);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
                $caption = _M('Erro',$module);
                $MIOLO->error( $msg, $goto, $caption );
            }
        }
    }
    
    /**
     * Obtém o caminho para salvar o certificado digital
     * 
     * @return type
     */
    public function getUploadPath()
    {
        $MIOLO = MIOLO::getInstance();
        
        $path = $MIOLO->GetModulePath('basic', SAGU::getParameter('BASIC', 'UPLOAD_PATH')) . '/certificadodigital/';
        
        if ( !is_dir($path) )
        {
            mkdir($path);
        }
        
        return $path;
    }
    
    /**
     * Salva o certificado digital
     * 
     * @param type $personId
     * @return type
     */
    public function savarCertificadoDigital($personId)
    {
        $MIOLO = MIOLO::getInstance();
        
        $busFile = new BusinessBasicBusFile();

        $extensao = substr($_FILES['uploadFile']['name'], -4);
        
        $fileData = new stdClass();
        $fileData->localPath = $_FILES['uploadFile']['tmp_name'];
        $fileData->fileName = $personId . $extensao;
        $fileData->fileType = $_FILES['uploadFile']['type'];
        $fileData->size = $_FILES['uploadFile']['size'];
        $fileData->uploadFileName = $fileData->fileName;
        $fileData->contentType = $fileData->fileType;
        
        // Obtém o caminho onde será salvo o arquivo
        $uploadPath = $this->getUploadPath() . $personId . '/';

        if ( !is_dir($uploadPath) )
        {
            mkdir($uploadPath);
        }

        $busFile->setUploadPath($uploadPath);
        $busFile->setSplitDirByDate(false);
        
        $filters = new stdClass();
        $filters->uploadFileName = $personId;
        
        // Verifica se o arquivo existe
        $file = $busFile->searchFile($filters);
                
        // Atualiza as informarções da basfile
        if ( strlen($file[0][0]) > 0 )
        {
            $fileData->fileId = $fileId = $file[0][0];
                        
            $busFile->updateFile($fileData, $fileData->localPath, true);
        }
        // Insere o arquivo na basfile
        else
        {
            $fileId = $busFile->insertFile($fileData, $fileData->localPath, true);
        }
        
        return $fileId;
    }

    public function fieldsOk()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data = $this->getTypesData($action);

        if ( strlen($data->legalPersonTypeId) > 0 )
        {
            $bus = new BusinessBasicBusLegalPersonType();
            $legalPersonType = $bus->getLegalPersonType($data->legalPersonTypeId);
            if ( is_null($legalPersonType->legalPersonTypeId) )
            {
                $this->addError(_M('O código @1 informado não existe.', $module, _M('tipo de pessoa jurídica', $module)));
            }
        }

        return ($this->hasErrors() == 0);
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData($action = NULL)
    {
        $stepData  = $this->getStepData();

        if ( strlen($action) == 0 )
        {
            $data = new BasPerson();
        }
        elseif ( strstr(strtolower($action), 'physical') )
        {
            $data = new BasPhysicalPerson();
        }
        elseif ( strstr(strtolower($action), 'legal') )
        {
            $data = new BasLegalPerson();
        }

        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $stepData->$var )
            {
                $data->$var = $stepData->$var;
            }
        }
        $data->locationTypeId = $stepData->locationType;
        $data->name = $stepData->personName;

        return $data;
    }
}
?>