<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Badge loan form
 *
 * @author Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 *
 * @since
 * Class created on 11/03/2011
 */

/**
 * Form to manipulate a personTitle
 * */
class FrmBadgeLoan extends SManagementForm
{
    /**
     * Class constructor
     * */
    public function __construct()
    {
        parent::__construct(new BasBadgeLoan(), array( 'loanId' ), null);
    }

    /**
     * Default method to define fields
     * */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $function = MIOLO::_request('function');

        if ( in_array($function, array( SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE )) )
        {
            $loanId = MIOLO::_request('loanId');
            // Dados do empréstimo
            $data = new BasBadgeLoan($loanId);
            // Campos escondidos
            $fields[] = new SHiddenField('loanId', $loanId);
            $fields[] = new SHiddenField('badgeLoanId', $loanId);
            $fields[] = new SHiddenField('badgeId', $data->badgeId);
            $fields[] = new SHiddenField('personId', $data->personId);
            $fields[] = new SHiddenField('loanDate', $data->loanDate);
            $fields[] = new SHiddenField('expectedReturnDate', $data->expectedReturnDate);

            if ( strlen($data->returnDate)>0 )
            {
                $this->toolbar->disableButton('tbBtnSave');
            }

            // BaseGroup de informações
            $dataInformation = array(
                _M('Código', $module) => $this->getFormValue('loanId', $data->badgeId),
                _M('Crachá', $module) => $this->getFormValue('badgeId', $data->badgeId) . ' - ' . $data->badge->description,
                _M('Pessoa', $module) => $data->personId . ' - ' . $data->physicalPerson->name,
                _M('Data do empréstimo', $module) => $data->loanDate,
                _M('Data prevista de devolução', $module) => $data->expectedReturnDate
            );
            $fields[] = new SInformationField(array(
                        'columns' => 1,
                        'title' => _M('Dados do empréstimo do crachá', $module),
                        'value' => $dataInformation ));
        }
        else
        {
            // Field badge (lookup badge)
            $badgeLoanLabel = new MText('badgeLabel', _M('Crachá', $module) . ':');
            $badgeLoanLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $badgeLoanLabel->setClass('m-caption m-caption-required');
            $badgeLoanId = new MLookupTextField('badgeId', $this->getFormValue('badgeId', $data->badgeId), _M('Código da crachá', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'description', 'basic', 'Badge', null, null, true);
            $badgeLoanId->setJsHint(_M('Informe código do crachá', $module));
            $description = new MTextField('description', $this->getFormValue('description', $data->description), _M('Descrição do crachá', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $description->setJsHint(_M('Descrição do crachá', $module));
            $description->setReadOnly(true);
            $hctBadge = new MHContainer('hctBadge', array( $badgeLoanLabel, $badgeLoanId, $description ));
            $hctBadge->setShowLabel(false);
            $fields[] = $hctBadge;
            $validators[] = new MRequiredValidator('badgeId', _M('Código do crachá', $module));

            // Field person (lookup physical person)
            $personLabel = new MText('personLabel', _M('Pessoa', $module) . ':');
            $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $personLabel->setClass('m-caption m-caption-required');
            $personId = new MLookupTextField('personId', $this->getFormValue('personId', $data->personId), _M('Código da pessoa', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'personName', 'basic', 'PhysicalPerson', null, null, true);
            $personId->setJsHint(_M('Informe o nome da pessoa a quem foi emprestado o crachá', $module));
            $personName = new MTextField('personName', $this->getFormValue('personName', $data->personName), _M('Nome da pessoa', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $personName->setJsHint(_M('Nome da pessoa', $module));
            $personName->setReadOnly(true);

            $hctPerson = new MHContainer('hctPerson', array( $personLabel, $personId, $personName ));
            $hctPerson->setShowLabel(false);
            $fields[] = $hctPerson;
            $validators[] = new MRequiredValidator('personId', _M('Código da pessoa', $module));

            /*
             * Field loan date
             */
            // Field loan date label
            $data->loanDate = $data->loanDate ? $data->loanDate : SAGU::getDateNow();
            $loanDateLabel = new MText('loanDateLabel', _M('Data do empréstimo', $module));
            $loanDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $loanDateLabel->setClass('m-caption m-caption-required');
            // Field loan date
            $loanDate = new MCalendarField('loanDate', $data->loanDate, '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
            $loanDate->setJsHint(_M('Informe a data de empréstimo do crachá', $module));
            // Container
            $hctLoanDate = new MHContainer('hctLoanDate', array( $loanDateLabel, $loanDate ));
            $validators[] = new MDATEDMYValidator('loanDate', _M('Data do empréstimo', $module));
            $validators[] = new MRequiredValidator('loanDate', _M('Data do empréstimo', $module));
            $fields[] = $hctLoanDate;

            /*
             * Field expected return date
             */
            // Field expected return date label
            $expectedReturnDateLabel = new MText('expectedReturnDateLabel', _M('Previsão de devolução do crachá', $module));
            $expectedReturnDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $expectedReturnDateLabel->setClass('m-caption m-caption-required');
            // Field expected return date
            $expectedReturnDate = new MCalendarField('expectedReturnDate', $data->expectedReturnDate, '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
            $expectedReturnDate->setJsHint(_M('Informe a data esperada da devolução do crachá', $module));
            // Container
            $hctexpectedReturnDate = new MHContainer('hctexpectedReturnDate', array( $expectedReturnDateLabel, $expectedReturnDate ));
            $validators[] = new MDATEDMYValidator('expectedReturnDate', _M('Previsão de devolução do crachá', $module));
            $validators[] = new MRequiredValidator('expectedReturnDate', _M('Previsão de devolução do crachá', $module));
            $fields[] = $hctexpectedReturnDate;
        }

        /*
         * Field return date
         */
        // Field return date label
        $returnDateLabel = new MText('returnDateLabel', _M('Data da devolução', $module));
        $returnDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $returnDate = new MCalendarField('returnDate', $data->returnDate, '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $returnDate->setJsHint(_M('Informe a data da devolução do crachá', $module));
        $returnDate->setReadOnly(strlen($data->returnDate) > 0 || $function == SForm::FUNCTION_INSERT );
        // Container
        $hctreturnDate = new MHContainer('hctreturnDate', array( $returnDateLabel, $returnDate ));
        $fields[] = $hctreturnDate;

        // Field comments
        $comments = new MMultiLineField('comments', $data->comments, _M('Comentários', $module), null, 5, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $comments->setJsHint(_M('Informe um comentário sobre o empréstimo do crachá', $module));
        $comments->setReadOnly(strlen($data->returnDate)>0);
        $fields[] = $comments;

        parent::defineFields($fields, $validators, $data);
    }

    /**
     * Função que salva os dados
     *
     * @param $sender
     */
    public function tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $function = MIOLO::_REQUEST('function');
        $function = MIOLO::_REQUEST('function');
        $action = MIOLO::getCurrentAction();
        $msg = ($function == SForm::FUNCTION_UPDATE) ? SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED') : SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED');

        // Instancia o business
        $busPhysicalPerson = new BusinessBasicBusPhysicalPerson();

        // Obtém os dados do form
        $args = $this->getData();

        try
        {
            $data = new stdClass();
            $data->loanId = $args->loanId;
            $data->badgeId = $args->badgeId;
            $data->personId = $args->personId;
            $data->loanDate = $args->loanDate;
            $data->expectedReturnDate = $args->expectedReturnDate;
            $data->returnDate = $args->returnDate;
            $data->comments = $args->comments;

            if ( $function == SForm::FUNCTION_INSERT )
            {
                if ( $data->loanDate > $data->expectedReturnDate )
                {
                    throw new Exception(_M('Verifique a data esperada para devolução. Uma pessoa não pode devolver um crachá antes de ter pego emprestado.', $module));
                }

                /*
                 * Verifica se o estado do crachá permite empréstimo
                 */
                $badge = new BasBadge($data->badgeId);
                $badgeStatus = new BasBadgeStatus($badge->badgeStatusId);
                if ( $badgeStatus->allowLoan == DB_FALSE )
                {
                    throw new Exception(_M('O estado atual do crachá @1 é @2 e não permite empréstimo.', $module, $badge->description, $badgeStatus->description));
                }

                /*
                 * Verifica se a pessoa tem crachá à devolver
                 */
                $filters = new stdClass();
                $filters->personId = $data->personId;
                $badgeLoans = BasBadgeLoan::search($filters);
                foreach ( $badgeLoans as $badgeLoan )
                {
                    $badge = new BasBadge($badgeLoan->badgeId);

                    // Verifica se tem data de devolução
                    if ( $badgeLoan->returnDate == null )
                    {
                        $hasBadgePending = true;
                        $message .= "<br />-" . _M('Crachá @1.', $module, $badge->description);
                    }
                }

                if ( $hasBadgePending )
                {
                    $basBadge = new BasBadge($badgeLoan->badgeId);
                    throw new Exception(_M('A pessoa @1 tem crachá pendente de devolução:', $module, $args->personName) . $message . "<BR />" . _M('Não é possível fazer o empréstimo do crachá @1.', $module, $basBadge->description));
                }

                /*
                 *  Verifica se o crachá já está emprestado
                 */
                $filters = new stdClass();
                $filters->badgeId = $data->badgeId;
                $badgeLoans = BasBadgeLoan::search($filters);
                foreach ( $badgeLoans as $badgeLoan )
                {
                    $badge = new BasBadge($badgeLoan->badgeId);

                    // Verifica se não foi devolvido ainda
                    if ( $badgeLoan->returnDate == null )
                    {
                        throw new Exception(_M('O crachá @1 está emprestado. A data prevista de retorno é @2.', $module, $badge->description, $badgeLoan->expectedReturnDate));
                    }
                }
            }

            $badgeLoan = new BasBadgeLoan();
            $badgeLoan->loanId = $data->loanId;
            $badgeLoan->badgeId = $data->badgeId;
            $badgeLoan->personId = $data->personId;
            $badgeLoan->loanDate = $data->loanDate;
            $badgeLoan->expectedReturnDate = $data->expectedReturnDate;
            $badgeLoan->returnDate = $data->returnDate;
            $badgeLoan->comments = $data->comments;
            // Salva os dados na base
            SDatabase::beginTransaction();
            $badgeLoan->save();

            /*
             * Atualiza o status do crachá
             */
            if ( strlen($data->returnDate) > 0 ) // Se o crachá foi devolvido
            {
                $badgeStatusId = SAGU::getParameter($module, 'BADGE_STATUS_AVAILABLE');
            }
            else // Se o crachá foi emprestado
            {
                $badgeStatusId = SAGU::getParameter($module, 'BADGE_STATUS_UNAVAILABLE');
            }
            $badge = new BasBadge($data->badgeId);
            $badge->badgeStatusId = $badgeStatusId;
            $badge->save();
            SDatabase::commit();

            if ( $function == SForm::FUNCTION_UPDATE )
            {
                $caption = _M('Informação', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL($module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
                $opts = array( 'function' => SForm::FUNCTION_INSERT );

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Questão', $module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        catch ( Exception $e )
        {
            SDatabase::rollback();
            $this->AddError($e->getMessage());
        }
    }

    /**
     * Função que deleta um registro
     *
     * @param $sender
     */
    public function tbBtnDelete_confirm($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        // Instancia o empréstimo
        $badgeLoan = new BasBadgeLoan(MIOLO::_REQUEST('loanId'));
        // Deleta-o
        $ok = $badgeLoan->delete();

        // Mensagem de sucesso ou falha
        if ( $ok )
        {
            $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_DELETED');
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Informação', $module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg = _M('Erro executando a operação solicitada. Não foi possível fazer a exclusão do registro.', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro', $module);
            $MIOLO->error($msg, $goto, $caption);
        }
    }
}
?>