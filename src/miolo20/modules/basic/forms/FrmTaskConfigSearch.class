<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for basTaskConfig table
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br] 
 *
 * @since
 * Class created on 06/04/2011
 *
 **/

/**
 * Form to search the basTaskConfig table
 */
class FrmTaskConfigSearch extends SSearchForm
{
    /**
     * Class constructor
     */
    public function __construct($data)
    {
        parent::__construct(_M('Localizar', 'basic'), new BasTaskConfig(), array('taskConfigId'));
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        // Campo código
        $taskConfigId = new MTextField('taskConfigIdS', $this->taskConfigIdS->value, _M('Código',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $taskConfigId->setJsHint(_M('Informe o código da configuração de pendência',$module));
        $fields[] = $taskConfigId;
        $validators[] = new MIntegerValidator('taskConfigIdS', _M('Código', $module), 'optional');

        // Campo Descrição
        $data->description = $this->getFormValue('descriptionS', $data->description);
        $fields[] = $description= new MTextField('descriptionS', $data->description, _M('Descrição',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $description->setJsHint(_M("Informe a descrição.", $module));

        // Campo usuário
        $userLabel = new MText( 'userLabelS', _M('Usuário', $module ) . ':' );
        $userLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $user = new MLookupTextField( 'userS', $this->getFormValue( 'userS', $data->user ), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'idUserS, limbo, userNameS', 'admin', 'UserByLogin', null,null, true);
        $user->setJsHint( _M('Informa o login do usuário', $module ) );
        $userName = new MTextField( 'userNameS', $this->getFormValue( 'userNameS', $data->username ), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE') );
        $userName->setJsHint(_M('Nome do usuário', $module));
        $userName->setReadOnly(true);
        $htcUser = new MHContainer('hctUserS', array($userLabel, $user,  $userName));
        $fields[] = $htcUser;

        //Campo utilizado para filtrar o usuário.
        $fields[] = new MHiddenField('idUserS', null);

        // Campo Grupo de usuários
        $groupLabel = new MText( 'groupLabelS', _M('Grupo', $module ) . ':' );
        $groupLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $groupId = new MLookupTextField( 'idGroupS', $this->getFormValue( 'idGroupS', $data->idGroup ), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'idGroupS, m_groupS', 'admin', 'group', null, null, true );
        $groupId->setJsHint( _M('Informe o codigo do grupo', $module ) );
        $groupDescription = new MTextField( 'm_groupS', $this->getFormValue( 'm_groupS', $data->m_group ), _M('Nome do grupo', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE') );
        $groupDescription->setJsHint(_M('Informe o nome do grupo', $module));
        $groupDescription->setReadOnly(true);
        $hctGroup = new MHContainer( 'hctCourseS', array($groupLabel, $groupId, $groupDescription) );
        $hctGroup->setShowLabel( false );
        $validators[] = new MIntegerValidator('idGroupS', _M('Grupo', $module), 'optional');
        $fields[] = $hctGroup;

        parent::defineFields($fields, $module, 'GrdTaskConfigSearch', $validators);
    }

    public function getTypesData()
    {
        $data = new stdClass();
        $data->taskConfigId = $this->getFormValue('taskConfigIdS');
        $data->idUser = $this->getFormValue('idUserS');
        $data->idGroup = $this->getFormValue('idGroupS');
        $data->description = $this->getFormValue('descriptionS');

        return $data;
    }


}
?>
