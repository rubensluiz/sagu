<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Nataniel Ingor da Silva [nataniel@solis.coop.br]
 *
 * \b Maintainers: \n
 * Nataniel [augusto@solis.coop.br]
 *
 * @since
 * Class created on 12/11/2012
 *
 */

$MIOLO->uses('ui/controls/msubdetailvalidators.class');
$MIOLO->uses('/ui/controls/msubdetail.class');
class FrmFeriasFuncionario extends SStepByStepForm
{

    /**
     * Class constructor
     **/
    public function __construct($steps)
    {
        parent::__construct(_M('Férias funcionário'), $steps, __CLASS__);
    }

    /**
     * Default method to define fields
     **/
    public function CreateFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $function = MIOLO::_REQUEST('function');
        $event    = MIOLO::_REQUEST('event');
                
        $data = $this->getStepData();
        
        if ( $this->isFirstAccess() )
        {
            MSubDetail::clearData('ferias');

            $filters = new stdClass();
            $filters->personId = $data->personId;
            $basHistoricoFerias = new BasHistoricoFerias();
            $dataFerias = $basHistoricoFerias->search($filters);
        }
               
        // Subdetail férias        
        $historicoFeriasId = new SHiddenField('historicoFeriasId', null);
        $flds[] = $historicoFeriasId;
        
        $dataLabel = new MText('dataLabel', _M('Data', $module).':');
        $dataLabel->setClass('m-caption m-caption-required');
        $dataLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $data = new MCalendarField('dataSub', null, _M('Data', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $data->setJshint(_M('Informe a data', $module));
        $hctData = new MContainer('hctData', array($dataLabel, $data));
        $flds[] = $hctData;
        $valids[] = new MDATEDMYValidator('dataSub');
        $valids[] = new MRequiredValidator('dataSub', _M('Informe a data ', $module));
        
        $ate = new MText('ate', _M('até ', $module));
        $ate->setClass('m-caption m-caption');
        
        $periodoAquisitivo = new MText('periodoAquisitivo', _M('Período aquisitivo', $module). ':');
        $periodoAquisitivo->setClass('m-caption m-caption-required');
        $periodoAquisitivo->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $dataInicial = new MCalendarField('inicioAquisicao', null, _M('Data inicial', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $dataInicial->setJshint(_M('Informe a data inicial do período aquisitivo', $module));
        $dataFinal = new MCalendarField('fimAquisicao', null, _M('Data final', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $dataFinal->setJshint(_M('Informe a data final do período aquisitivo', $module));
        $hctPeriodoAquisitivo = new MContainer('hctPeriodoAquisitivo', array($periodoAquisitivo,$dataInicial,$ate,$dataFinal));
        $flds[] = $hctPeriodoAquisitivo;
        
        $valids[] = new MDATEDMYValidator('fimAquisicao');
        $valids[] = new MRequiredValidator('fimAquisicao', _M('Informe a data final do período aquisitivo', $module));        
        $valids[] = new MDATEDMYValidator('inicioAquisicao');
        $valids[] = new MRequiredValidator('inicioAquisicao', _M('Informe a data inicial do período aquisitivo', $module));        
        
        
        $periodoConscessao = new MText('periodoConcessao', _M('Período concessão', $module). ':');
        $periodoConscessao->setClass('m-caption m-caption-required');        
        $periodoConscessao->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        
        $inicioConcessao = new MCalendarField('inicioConcessao', null, _M('Data inicial', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $inicioConcessao->setJshint(_M('Informe a data inicial do período de concessão', $module));
        $valids[] = new MDATEDMYValidator('inicioConcessao');
        $valids[] = new MRequiredValidator('inicioConcessao', _M('Informe a data inicial do período de concessão', $module));        
        
        $fimConcessao = new MCalendarField('fimConcessao', null, _M('Data final', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $fimConcessao->setJshint(_M('Informe a data final do período de concessão', $module));
        $valids[] = new MDATEDMYValidator('fimConcessao');
        $valids[] = new MRequiredValidator('fimConcessao', _M('Informe a data final do período de concessão', $module));        
        
        $hctPeriodoConcessao = new MContainer('hctPeriodoConcessao', array($periodoConscessao,$inicioConcessao,$ate,$fimConcessao));
        $flds[] = $hctPeriodoConcessao;
        
        $observacaoLabel = new MText('dataLabel', _M('Observação', $module).':');
        $observacaoLabel->setClass('m-caption m-caption');
        $observacaoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $observacao = new MMultiLineField('observacao', null, _M('Observação', $module), 40, 5, 30);
        $observacao->setJsHint(_M('Informe uma observação', $module));
        $observacao->setClass('m-caption-none');
        $flds[] = new MContainer ('hctObservacao', array($observacaoLabel, $observacao));
        
        $cols[] = new MGridColumn(_M('Código de férias', $module), 'left', true, '', false, 'historicoFeriasId');
        $cols[] = new MGridColumn(_M('Data', $module), 'left', true, '', true, 'dataSub');
        $cols[] = new MGridColumn(_M('Data inicial aquisição', $module), 'right', true, '', true, 'inicioAquisicao');
        $cols[] = new MGridColumn(_M('Data final aquisição', $module), 'left', true, '', true, 'fimAquisicao');
        $cols[] = new MGridColumn(_M('Data inicial concessão', $module), 'right', true, '', true, 'inicioConcessao');
        $cols[] = new MGridColumn(_M('Data final concessão', $module), 'left', true, '', true, 'fimConcessao');
        $cols[] = new MGridColumn(_M('Observação', $module), 'right', true, '', true, 'observacao');
        
        $fields[] = $subFerias = new MSubDetail('ferias', _M('Férias', $module), $cols, $flds, true);
        $subFerias->setValidators($valids);
        
        if(!$dataFerias)
        {
            $dataFerias = MSubDetail::getData('ferias');
        }
        
        $subFerias->setData($dataFerias);
                        
        $this->setFields($fields);
        $this->SetValidators($validators);
    }
    
    public function tbBtnSave_click($sender = NULL)
    {
        $module = MIOLO::getCurrentModule();
        $function = MIOLO::_REQUEST('function');
        $action = MIOLO::getCurrentAction();
        $MIOLO = MIOLO::getInstance();
        $alterouCentros = FALSE;
                
        $data = $this->getStepData();
        
        $busEmployee = new BusinessBasicBusEmployee();
        
        try
        {
            if($function == SForm::FUNCTION_UPDATE)
            {
                $ok = $busEmployee->updateEmployee($data);
                
                $msg = _M("Dados atualizados com sucesso.", $module);
            }
            else
            {
                $ok = $busEmployee->insertEmployee($data);
                $msg = _M("Dados inseridos com sucesso.", $module);
            }      
                        
            if ( $ok )
            {
                // Centros
                $busCenter = new BusinessAcademicBusCenter();
                $centros = $busCenter->listCenterAssoc();

                $pec = new BasPersonEmployeeCenter();
                $centrosPessoa = $pec->buscarCentrosPessoa($data->personId);

                foreach ( $centros as $centerId => $desc )
                {
                    $name = 'center_' . $centerId;
                    
                    if ( $data->$name == DB_TRUE )
                    {
                        if ( !in_array($centerId, array_keys($centrosPessoa)) )
                        {
                            $pec = new BasPersonEmployeeCenter();
                            $pec->centerid = $centerId;
                            $pec->personid = $data->personId;
                            $pec->save();
                            
                            $alterouCentros = TRUE;
                        }
                    }
                    else
                    {
                        if ( in_array($centerId, array_keys($centrosPessoa)) )
                        {
                            $pec = new BasPersonEmployeeCenter();
                            $pec->removerCentroPessoa($data->personId, $centerId);
                            
                            $alterouCentros = TRUE;
                        }
                    }
                }
                
                // Ferias
                if ( MSubDetail::getData('historico') != null )
                {
                    foreach ( MSubDetail::getData('historico') as $value )
                    {                                  
                            $historico = new BasHistoricoFuncional();

                            $historico->historicoFuncionalId = $value->historicoFuncionalId;

                            $historico->personId   = $data->personId;
                            $historico->portaria   = $value->ordinance;
                            $historico->data       = $value->date;
                            $historico->assunto    = $value->subject;
                            $historico->inicio     = $value->startDate;
                            $historico->fim        = $value->endDateSub;
                            $historico->observacao = $value->historical;
                            
                            
                            if ( $historico->removeData )
                            {   
                                $historico->delete();
                            }
                            else
                            {
                                $historico->save();
                            }                
                        }
                }
                
                if ( MSubDetail::getData('ferias') != null )
                {
                    foreach ( MSubDetail::getData('ferias') as $value )
                    {                         
                        $basHistoricoFerias = new BasHistoricoFerias();

                        $basHistoricoFerias->historicoFeriasId = $value->historicoFeriasId;

                        $basHistoricoFerias->personId         = $data->personId;
                        $basHistoricoFerias->data             = $value->dataSub;
                        $basHistoricoFerias->inicioAquisicao  = $value->inicioAquisicao;
                        $basHistoricoFerias->fimAquisicao     = $value->fimAquisicao;
                        $basHistoricoFerias->inicioConcessao  = $value->inicioConcessao;
                        $basHistoricoFerias->fimConcessao     = $value->fimConcessao;
                        $basHistoricoFerias->observacao       = $value->observacao;

                        if ( $value->removeData )
                        {
                            $basHistoricoFerias->delete();
                        }
                        else
                        {            
                            $basHistoricoFerias->save();                            
                        }                
                    }
                } 
            }
            
            if ( $alterouCentros )
            {
                $url = $this->manager->GetActionURL('admin', 'main:logout');
                
                $msg .= "<br>Você alterou o vínculo a centros que limitam o acesso deste usuário aos dados do SAGU.<br>
                    Para estas alterações terem efeito, você deve orientar o usuário a refazer o login de acesso ao sistema.<br>
                    Caso o usuário seja você mesmo, <a href=\"$url\">clique aqui</a> para refazer o login.";
            }
            
            SAGU::information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
        }
        catch ( Exception $e )
        {
            $this->addError($e->getMessage());
        }        
    }
    
    public function finalizeButton_click($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        //parent::finalizeButton_click($args);
        
        $this->tbBtnSave_click($sender);
    }
    
}
?>