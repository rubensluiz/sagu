<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 11/11/2010
 *
 **/

class FrmPersonChoose extends FrmPersonSteps
{
    public function __construct($steps=null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $function = MIOLO::_REQUEST('function');

        parent::__construct(null, $steps, __CLASS__);
    }

    
    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        if ($this->isFirstAccess())
        {
            $this->cleanStepData();
        }

        //carrega os dados
        $data->personId = $this->getStepData()->personId;

        //Person lookup
        $lookupName = strpos($action, 'legal') ? 'LegalPerson' : 'PhysicalPerson';

        $personLabel = new MText('personLabel', _M('Pessoa', $module) . ':');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $personId = new MLookupTextField('personId', $this->getFormValue('personId',$data->personId), null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'personName', $module, $lookupName, null, null, true);
        $personId->setJsHint(_M('Informe o código da mãe',$module));
        $personName = new MTextField('personName', $this->getFormValue('personName', $data->personName), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setReadOnly(true);
        $personName->setJsHint(_M('Nome da pessoa',$module));
        $hctPerson = new MHContainer('hctPerson',array($personLabel, $personId, $personName));
        $hctPerson->showLabel = true;
        $fields[] = $hctPerson;
        $validators[] = new MIntegerValidator('personId', _M('Pessoa', $module));

        $fields[] = new MHiddenField('isFromPersonChoose', DB_TRUE);

        //If user go to next and after back to this step, not permit change the person
        if (!$this->isFirstAccess())
        {
            $personId->setReadOnly(TRUE);
        }

        $this->setFields($fields);
        $this->SetValidators($validators);
    }

    /**
     * Ação do botão próxima etapa
     *
     */
    public function nextStepButton_click($args = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $formData = $this->getTypesData();
        
        $filters = new stdClass();
        $filters->personId = $formData->personId;

        $gender = explode(':', $action);
        unset($data);
        switch ( $gender[3] )
        {
            case 'physicalPersonStudent':

                $busPhysicalPersonStudent = new BusinessBasicBusPhysicalPersonStudent();
                $data = $busPhysicalPersonStudent->searchPhysicalPersonStudent($filters);
                $msg = _M('O aluno @1 ja está cadastrado', $module, $data[0][3]).'.';

                break;
            case 'physicalPersonProfessor':

                $busPhysicalPersonProfessor = new BusinessBasicBusPhysicalPersonProfessor();
                $data = $busPhysicalPersonProfessor->searchPhysicalPersonProfessor($filters);
                $msg = _M('O professor @1 ja está cadastrado', $module, $data[0][3]).'.';
                
                break;
        }
        
        if ( count($data) > 0 && $function == SForm::FUNCTION_INSERT )
        {
            $this->addError($msg);
        }
        else
        {
            parent::nextStepButton_click($args);
        }
    }

    public function saveData($data)
    {
        return true;
    }
}
