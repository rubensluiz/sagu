<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Person link form
 *
 * @author Rudi Uhri Neto [rudi@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 09/01/2005
 *
 **/

class FrmPersonLink extends SManagementForm
{

    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new BasPersonLink(), array('personId', 'linkId'), 'BusPersonLink');
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        if ( in_array($function, array('update', 'delete')) )
        {
            $personLabel = new MText('personLabel', _M('Pessoa', $module) . ':');
            $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $person[] = $personLabel;
            $linkLabel = new MText('linkLabel', _M('Grupo do vínculo', $module) . ':');
            $linkLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $link[] = $linkLabel;
            
            //data
            $id = $this->getObjectPk();
            $personId = $id->personId;
            $linkId = $id->linkId;
            $data = $this->busObject->getPersonLink($personId, $linkId);
            
            //Person
            $person[] = new MTextLabel('personId', $personId);
            $person[] = new MHiddenField('personId', $personId);
            $person[] = new MTextLabel('personName', $this->getFormValue('personName', $data->personName));
            $hctPerson = new MHContainer('hctPerson', $person);
            $hctPerson->setShowLabel(true);
            $fields[] = $hctPerson;
            
            //Link
            $link[] = new MTextLabel('linkId', $linkId, '');
            $link[] = new MHiddenField('linkId', $linkId);
            $link[] = new MTextLabel('linkDescription', $this->getFormValue('linkDescription', $data->linkDescription));
            $hctLink = new MHContainer('hctLink', $link);
            $hctLink->setShowLabel(true);
            $fields[] = $hctLink;
        }
        else
        {
            //personId
            $personLabel = new MText('personLabel', _M('Pessoa', $module));
            $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $personLabel->setClass('m-caption m-caption-required');
            
            $personId = new MLookupTextField('personId', $this->getFormValue('personId', $data->personId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'personName', $module, 'PhysicalPerson', null, null, true);
            $personId->setJsHint(_M('Informe o código da pessoa', $module));
            $validators[] = new MIntegerValidator('personId', _M('Pessoa', $module), 'required');
            
            $personName = new MTextField('personName', $this->getFormValue('personName', $data->personName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $personName->setReadOnly(true);
            $personName->setJsHint(_M('Nome da pessoa', $module));
            
            $hctPerson = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
            $hctPerson->setShowLabel(true);
            $fields[] = $hctPerson;
            
            //link
            $linkLabel = new MText('linkLabel', _M('Grupo do vínculo', $module));
            $linkLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $linkLabel->setClass('m-caption m-caption-required');
            
            $linkId = new MLookupTextField('linkId', $this->getFormValue('linkId', $data->linkId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'linkDescription', $module, 'Link', null, null, true);
            $linkId->setJsHint(_M('Informe o código do vínculo', $module));
            $validators[] = new MIntegerValidator('linkId', _M('Vínculo', $module), 'required');
            
            $linkDescription = new MTextField('linkDescription', $this->getFormValue('linkDescription', $data->linkDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $linkDescription->setReadOnly(true);
            $linkDescription->setJsHint(_M('Descrição do vínculo', $module));
            
            $hctLink = new MHContainer('hctLink', array($linkLabel, $linkId, $linkDescription));
            $hctLink->setShowLabel(true);
            $fields[] = $hctLink;
        }
        
        $dateValidate = new MCalendarField('dateValidate', $this->getFormValue('dateValidate', $data->dateValidate), _M('Data de validade', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $dateValidate->setValidator(new MDateDMYValidator('dateValidate'));
        $dateValidate->setJsHint(_M('Informea data de validade', $module));
        $fields[] = $dateValidate;
        
        parent::defineFields($fields, $validators, $data);
    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $data = $this->getTypesData();
        $vars = get_object_vars($data);
        
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                eval('$this->' . $var . '->value = $this->getFormValue(\'' . $var . 'S\') ? $this->getFormValue(\'' . $var . 'S\') : \'\';');
            }
        }
        $this->personName->value = $this->getFormValue('personNameS') ? $this->getFormValue('personNameS') : '';
    }
}

?>
