<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Person document form
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 04/11/2010
 *
 **/

$MIOLO->uses('ui/controls/msubdetailvalidators.class');

class FrmPhysicalPersonKinship extends FrmPersonSteps
{
    /**
     * Class constructor
     **/
    public function __construct($steps=null)
    {
        parent::__construct(null, $steps, __CLASS__);
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);;
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $busKinship = new BusinessBasicBusKinship();
        $busPhysicalPerson = new BusinessBasicBusPhysicalPerson();

        //carrega os dados
        $stepData = $this->getStepData();
        $personIdRequest = MIOLO::_REQUEST('personId');
        
        $personId = SAGU::NVL($stepData->personId, $personIdRequest);
        $dataPerson = new stdClass();
        
        if ( $this->isFirstAccess() )
        {
            MSubDetail::clearData('kinship');

            if ( strlen($personId)>0 )
            {
                $filters = new stdClass();
                $filters->personId = $personId;

                $dataPerson = $busPhysicalPerson->getPhysicalPerson($personId);

                $business = new BusinessBasicBusPhysicalPersonKinship();
                $dataKinship = $business->searchPhysicalPersonKinship($filters, true);
            }
        }
        
        // Fornecido pela inscrição online
        $controls = array();
        $controls[] = $motherName = new MTextField('motherName', MUtil::NVL($stepData->motherName, $dataPerson->motherName), _M('Nome da mãe', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $motherName->setReadOnly(true);
        $controls[] = $fatherName = new MTextField('fatherName', MUtil::NVL($stepData->fatherName, $dataPerson->fatherName), _M('Nome do pai', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $fatherName->setReadOnly(true);
        $fields[] = $bgr = new sBaseGroup('bgrSubscriptionFatherMother', _M('Dados fornecidos pela inscrição online', $module), $controls);

        // Kinship
        $kinshipIdLabel = new MText('kinshipIdLabel', _M('Parentesco', $module) . ':');
        $kinshipIdLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE') );
        $kinshipId = new MSelection('kinshipId', $data->kinshipId, null, $busKinship->listKinship());
        $kinshipId->setJsHint(_M('Entre com o parentesco', $module));
        $flds[] = new MHContainer('hctKinshipId', array($kinshipIdLabel, $kinshipId));
        //$valids[] = new MRequiredValidator('kinshipId');
        $valids[] = new MSubDetailUniqueValidator('kinshipId', _M('Parentesco', $module), 'required');

        // Person
        $flds[] = new MHiddenField('limbo');
        $personLabel = new MText('personLabel', _M('Pessoa', $module) . ':');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $personId = new MLookupTextField('relativePersonId', $this->getFormValue('relativePersonId',$data->relativePersonId), null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'relativePersonName, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, personSex', $module, 'PhysicalPerson', null, null, true);
        $personId->setJsHint(_M('Informe o código da pessoa',$module));
        $personName = new MTextField('relativePersonName', $this->getFormValue('relativePersonName',$data->relativePersonName), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setReadOnly(true);
        $personName->setJsHint(_M('Nome da pessoa',$module));
        $hctPerson = new MHContainer('hctPerson',array($personLabel, $personId, $personName));
        $hctPerson->showLabel = true;
        $flds[] = $hctPerson;
        $valids[] = new MIntegerValidator('relativePersonId', _M('Pessoa',$module), 'required');
        $flds[] = $personSex = new SHiddenField('personSex', $this->getFormValue('personSex', $data->sex));
        

        // Observation
        $lblObs = new MText('lblObs', _M('Observação', $module), ':');
        $lblObs->setWidth( SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE') );
        $obs = new MMultiLineField('obs', null, null, null, 5, 40);
        $obs->setJsHint( _M('Entre com a observação', $module) );
        $flds[] = new MHContainer('hctObservation', array($lblObs, $obs));

        $cols[] = $kinship = new MGridColumn(_M('Parentesco', $module), 'left', true, '', true, 'kinshipId');
        $kinship->replace = $busKinship->listKinship(true);
        $cols[] = new MGridColumn(_M('Pessoa', $module), 'left', true, '', false, 'relativePersonId');
        $cols[] = new MGridColumn(_M('Pessoa', $module), 'left', true, '', true, 'relativePersonName');
        $cols[] = new MGridColumn(_M('Observação', $module), 'left', true, '', true, 'obs');

        $fields[] = $sub = new MSubDetail('kinship', _M('Parentesco', $module), $cols, $flds, true);
        $sub->setValidators($valids);
        $sub->addActionEvent(MSubDetail::EVENT_ADD, 'validateSexSub', __CLASS__);
        
        if ( $dataKinship || ( $this->isSubDetailEditMode() && SAGU::getEventName() == 'tbBtnSave:click' ) )
        {
            $sub->setData($dataKinship);
        }

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
    }
    
    public function validateSexSub($args)
    {
        $MIOLO = MIOLO::getInstance();
        $validators = array();
        //kinshipId = 1 = PAI, 2 = MÃE 
        $error = false;
        if( $args->kinshipId == 1 )
        {
            if( $args->personSex == 'F' )
            {
                $error = true;                
            }
        }
        else if( $args->kinshipId == 2 )
        {
            if( $args->personSex == 'M' )
            {
                $error = true;                
            }
        }
        
        if( $error )
        {
            $args->relativePersonId = null;
            $args->relativePersonName = null;
            
            $MIOLO->page->addAJAXJsCode("
                alert('O sexo da pessoa não corresponde ao parentesco!');
                document.getElementById('relativePersonId').value = null;
                document.getElementById('relativePersonName').value = null;
            ");
        }
        
        return $args;
    }

    public function saveData($data = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);;
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        if (!$this->validateData($data))
        {
            return false;
        }

        if (!$data)
        {
            $data = $this->getData();
        }
        else
        {   
            $data = $this->parseData($data);
        }

        if (!$data->personId)
        {
            return false;
        }

        if ( count($data->kinship) == 0 )
        {
            $data->kinship = MSubDetail::getData('kinship');
        }
        
        $business = new BusinessBasicBusPhysicalPersonKinship();
        $busPhysicalPerson = new BusinessBasicBusPhysicalPerson();

        if ( count($data->kinship) > 0 )
        {
            $filters = new stdClass();
            $filters->personId = $data->personId;
            $search = $business->searchPhysicalPersonKinship($filters);
            if (count($search) > 0)
            {
                foreach ($search as $s)
                {
                    $business->deletePhysicalPersonKinship($s[0], $s[1], $s[2]);
                }
            }

            $motherName = null;
            $fatherName = null;
            foreach ($data->kinship as $kinship)
            {
                if ($kinship->removeData)
                {
                    $ok = true;
                    continue;
                }
                
                // Define motherName e fatherName 
                $physicalPerson = $busPhysicalPerson->getPhysicalPerson($kinship->relativePersonId);
                if ( $kinship->kinshipId == SAGU::getParameter('BASIC', 'MOTHER_KINSHIP_ID') )
                {
                    $motherName = $physicalPerson->name;
                }
                else if ( $kinship->kinshipId == SAGU::getParameter('BASIC', 'FATHER_KINSHIP_ID') )
                {
                    $fatherName = $physicalPerson->name;
                }
                
                $kinship->personId = $data->personId;
                $ok = $business->insertPhysicalPersonKinship($kinship);
                if (!$ok)
                {
                    break;
                }
            }
            
            //
            // Atualiza physicalPerson
            //
            $personData = $busPhysicalPerson->getPhysicalPerson($data->personId);
            if ( strlen($motherName) > 0 )
            {
                $personData->motherName = $motherName;
            }
            if ( strlen($fatherName) > 0 )
            {
                $personData->fatherName = $fatherName;
            }
            $busPhysicalPerson->updatePhysicalPerson( $personData );

            
            return $ok;
        }
        else
        {
            return true;
        }
    }


    public function nextStepButton_click($sender)
    {
        if ($this->validateData())
        {
            parent::nextStepButton_click();
        }
    }


    public function validateData($data = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);;
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        if (!$data)
        {
            $data = $this->getData();
        }
        
        if ( count($data->kinship) == 0 )
        {
            $data->kinship = MSubDetail::getData('kinship');
        }

        $busKinship = new BusinessBasicBusKinship();

        //Check Required kinships
        $listKinshipIds = array();
        if (count($data->kinship) > 0)
        {
            foreach ($data->kinship as $kinship)
            {
                if (!$kinship->removeData)
                {
                    $listKinshipIds[] = $kinship->kinshipId;
                }
            }
        }
        
        $filters = new stdClass();
        $filters->required = DB_TRUE;
        $searchRequired = $busKinship->searchKinship($filters);
        if (count($searchRequired) > 0)
        {
            foreach ($searchRequired as $s)
            {
                list($kinshipId, $description) = $s;

                if (!in_array($kinshipId, $listKinshipIds))
                {
                    $this->AddError( _M('O parentesco do tipo "@1" é obrigatório.', $module, $description) );
                }
            }
        }

        return !$this->HasErrors();
    }
    
    
    public function getTypesData()
    {
        $data = parent::getTypesData();
        
        if (is_object($this->kinship))
        {
            $data->kinship = $this->kinship->getData();
        }

        return $data;
    }
}

