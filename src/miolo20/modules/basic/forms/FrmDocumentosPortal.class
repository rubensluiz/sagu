<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Form to manipulate generic reports
 *
 * @author Leovan Tavares da Silva [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Armando Taffarel Neto [armando@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Luís Felipe Wermann [luis_felipe@solis.com.br]
 *
 * @since
 * Class created on 30/06/2008
 *
 **/

/**
 * Form to create or edit a generic report
 **/
class FrmDocumentosPortal extends SManagementForm
{
    /**
     * Constantes dos radios de escolha do pedagógico.
     */
    const OFERTA_CURSO = 'OFC';
    const OFERTA_TURMA = 'OFT';
    const OFERTA_COMPONENTE = 'OFO';
    
    /**
     * Construtor do formulário.
     */
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $MIOLO->uses('ui/controls/msubdetail.class');
        
        parent::__construct(new BasDocumentosPortal(), array('documentoportalid'), null, _M('Documentos do portal'), $module);
        
        if ( $this->isSubDetailEditMode() && $this->isAjax() )
        {
            MSubDetail::clearData('_atrelamentosAcademic');
            MSubDetail::clearData('_atrelamentosPedagogico');
        }
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {       
        $module   = MIOLO::getCurrentModule();
        $function = MIOLO::_request('function');
        
        if ( in_array($function,array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $documentoportalid = MIOLO::_REQUEST('documentoportalid');
            $fields[] = new MHiddenField('documentoportalid', $documentoportalid);
            $data = new BasDocumentosPortal($documentoportalid);
        }
        
        $fields[] = new MSpacer();
        $tamUploadMax = (ini_get('upload_max_filesize') > ini_get('post_max_size')) ? ini_get('post_max_size') : ini_get('upload_max_filesize');
        $fields[] = MMessage::getStaticMessage('message', "Lembre-se: O tamanho máximo para upload, configurado no servidor é de " . $tamUploadMax, MMessage::TYPE_INFORMATION);
        
        //Campo título
        $fields[] = $titulo = new MTextField('titulo', $this->getFormValue('titulo', $data->titulo), _M('Título',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $titulo->setJsHint(_M('Informe o título do documento',$module));
        $validators[] = new MRequiredValidator('titulo');
        
        //Habilitado
        $fields[] = new MRadioButtonGroup('habilitado', _M('Habilitado'), SAGU::listYesNo(), DB_TRUE, '', 'horizontal');
        
        //Arquivo
        $hint = "";

        if ( $function == SForm::FUNCTION_UPDATE && strlen($data->fileid) > 0 )
        {
            $busFile = new BusinessBasicBusFile();
            $file = $busFile->getFile($data->fileid); // $file->uploadFileName
            $hint = _M("Se selecionado um novo arquivo, sobrescreverá o atual arquivo <strong>{$file->uploadFileName}</strong>.");
        }
        
        $fields[] = new MFileField('uploadFile', null, _M('Arquivo', $module), 40, $hint);
        
        //Aluno
        $controls[] = new MTextLabel('lblBasico', _M('Aluno:'));
        $controls[] = $gestor = new MRadioButtonGroup('disponivel_aluno', _M('Aluno'), SAGU::listYesNo(), SAGU::NVL($this->getFormValue('disponivel_aluno', $data->disponivel_aluno), DB_FALSE), '', 'horizontal');
        $controls[] = new MSpacer();
            
        //Professor
        $controls[] = new MTextLabel('lblBasico', _M('Professor:'));
        $controls[] = $professor = new MRadioButtonGroup('disponivel_professor', _M('Professor'), SAGU::listYesNo(), SAGU::NVL($this->getFormValue('disponivel_professor', $data->disponivel_professor), DB_FALSE), '', 'horizontal');
        $controls[] = new MSpacer();
            
        //Coordenador
        $controls[] = new MTextLabel('lblBasico', _M('Coordenador:'));
        $controls[] = $coordenador = new MRadioButtonGroup('disponivel_coordenador', _M('Coordenador'), SAGU::listYesNo(), SAGU::NVL($this->getFormValue('disponivel_coordenador', $data->disponivel_coordenador), DB_FALSE), '', 'horizontal');
        $controls[] = new MSpacer();
            
        //Gestor
        $controls[] = new MTextLabel('lblBasico', _M('Gestor:'));
        $controls[] = $gestor = new MRadioButtonGroup('disponivel_gestor', _M('Gestor'), SAGU::listYesNo(), SAGU::NVL($this->getFormValue('disponivel_gestor', $data->disponivel_gestor), DB_FALSE), '', 'horizontal');
        $controls[] = new MSpacer();
        
        $fields[] = new MBaseGroup('bgsGrupos', _M('Download disponível para:', $module), $controls, 'vertical');

        //Mensagem
        $msgInfo = MMessage::getStaticMessage('msgInfo', _M("* Caso seja um documento comum a todos os cursos, não cadastre vínculos.<br>* Atrelamentos a turmas ou componentes curriculares são permitidos apenas no módulo pedagógico."), MMessage::TYPE_INFORMATION);
        
        //Tabela de atrelamentos
        $tbgAtrelamentos = new MTabbedBaseGroup('tbgAtrelamentos');
        
        //Academico
        if ( SAGU::getParameter('BASIC', 'MODULE_ACADEMIC_INSTALLED') == 'YES' )
        {
            $tbgAtrelamentos->createTab('selectModuloAcademico', _M("Módulo acadêmico"), $this->obterCamposAcademico());
        }
        
        //Pedagógico
        if ( SAGU::getParameter('BASIC', 'MODULE_PEDAGOGICO_INSTALLED') == 'YES') 
        {
            $tbgAtrelamentos->createTab('selectModuloPedagogico', _M("Módulo pedagógico"), $this->obterCamposPedagogico());
        }
        
        $divAtrelamentos = new MDiv('divAtrelamentos', array($tbgAtrelamentos));
        $divAtrelamentos->addBoxStyle('width', '100%');
        
        $fields[] = new MBaseGroup('bsgAtrelamentos', _M("Vincular documento a curso/turma de um módulo", $module), array($msgInfo, $divAtrelamentos));
        
        parent::defineFields($fields, $validators, $data);
    }
    
    /**
     * Retorna subdetail de atrelamentos do módulo acadêmico.
     * 
     * @return \MSubDetail
     */
    public function obterCamposAcademico()
    {
        $MIOLO = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        $documentoPortalId = MIOLO::_REQUEST('documentoportalid');
        
        // Lookup do curso
        $courseIdLabel = new MLabel(_M("Curso", $module) . ":");
        $courseIdLabel->setClass('m-caption m-caption-required');
        $courseId = new SLookupContainer('courseId', null, array('module' => 'academic', 'item' => 'course'));
        $subFields[] = $hctCourse = new MHContainer('hctCourse', array($courseIdLabel, $courseId));
        
        // Primary key
        $documentosPortalCursoId = new SHiddenField('documentosPortalCursoId');
        $subFields[] = $documentosPortalCursoId;
        
        // Dados da subdetail
        if ( $this->isSubDetailEditMode() )
        {
            $basDocCurso = new BasDocumentosPortalCurso();
            MSubDetail::setData($basDocCurso->obterAtrelamentosAcademic($documentoPortalId), '_atrelamentosAcademic');
        }
        
        // Colunas subdetail
        $subColumns[] = new MGridColumn(_M("Código", $module), 'left', false, null, false, true, 'documentosPortalCursoId');
        $subColumns[] = new MGridColumn(_M("Código do curso", $module), 'left', false, '10%', true, 'courseId');
        $subColumns[] = new MGridColumn(_M("Curso", $module), 'left', false, '90%', true, 'courseIdDescription');
        
        // Subdetail
        $subDetail = new MSubDetail('_atrelamentosAcademic', "Vincular", $subColumns, $subFields, array('remove'));
        
        // Validadores subdetail
        $subValidators[] = new MRequiredValidator('courseId', _M("Curso", $module));
        $subDetail->setValidators($subValidators);
        
        return array($subDetail);
    }
    
    /**
     * Faz verificação se atrelamento é para ser excluído ou adicionado/atualizado.
     * 
     * @param stdClass $data
     * @param int $documentoPortalId
     * @throws Exception
     */
    public function adicionarAtrelamentoAcademic($data, $documentoPortalId)
    {
        if ( strlen($data->removeData) > 0 )
        {
            $this->deletarAtrelamento($data->documentosPortalCursoId);
        }
        else
        {
            $basDocCurso = new BasDocumentosPortalCurso();
            $basDocCurso->courseId = $data->courseId;
            $basDocCurso->idModule = SModules::MODULE_ACADEMIC;
            $basDocCurso->documentoPortalId = $documentoPortalId;
            $basDocCurso->documentosPortalCursoId = $data->documentosPortalCursoId;

            $error = $basDocCurso->validarAtrelamento();
            if ( strlen($error) > 0 )
            {
                throw new Exception(_M($error));
            }

            $basDocCurso->save();
        }
    }
    
    /**
     * Monta os campos da subdetail do pedagógico.
     * 
     * @return array
     */
    public function obterCamposPedagogico($args = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        $documentoPortalId = MIOLO::_REQUEST('documentoportalid');

        // Opções de atrelamento
        $labelVincular = new MLabel(_M('Vincular com', $module) . ':');
        $labelVincular->setClass('m-caption');
        $labelVincular->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        $atrelarOfertaDeCursoLabel = new MLabel(_M('Oferta de Curso', $module));
        $atrelarOfertaDeCurso = new MRadioButton('atrelarPedagogico', self::OFERTA_CURSO, null, true);
        $atrelarOfertaDeCurso->addAttribute('onChange', $this->getAjaxAction('obterEscolhasPedagogico', 'divEscolharPedagogico', false, array('tipoEscolha' => self::OFERTA_CURSO)));
        $hctAtrelarOfertaCurso = new MHContainer('hctAtrelarOfertaCurso', array($atrelarOfertaDeCurso, $atrelarOfertaDeCursoLabel));
        
        $atrelarOfertaDeTurmaLabel = new MLabel(_M('Oferta de Turma', $module));
        $atrelarOfertaDeTurma = new MRadioButton('atrelarPedagogico', self::OFERTA_TURMA, null, false);
        $atrelarOfertaDeTurma->addAttribute('onChange', $this->getAjaxAction('obterEscolhasPedagogico', 'divEscolharPedagogico', false, array('tipoEscolha' => self::OFERTA_TURMA)));
        $hctAtrelarOfertaDeTurma = new MHContainer('hctAtrelarOfertaDeTurma', array($atrelarOfertaDeTurma, $atrelarOfertaDeTurmaLabel));
        
        $atrelarOfertaDeComponenteLabel = new MLabel(_M('Oferta de Componente Curricular', $module));
        $atrelarOfertaDeComponente = new MRadioButton('atrelarPedagogico', self::OFERTA_COMPONENTE, null, false);
        $atrelarOfertaDeComponente->addAttribute('onChange', $this->getAjaxAction('obterEscolhasPedagogico', 'divEscolharPedagogico', false, array('tipoEscolha' => self::OFERTA_COMPONENTE)));
        $hctAtrelarOfertaDeComponente = new MHContainer('hctAtrelarOfertaDeComponente', array($atrelarOfertaDeComponente, $atrelarOfertaDeComponenteLabel));
                
        $subFields[] = new MHContainer('hctEscolhasFinal', array($labelVincular, new MVContainer('vctEscolhas', array($hctAtrelarOfertaCurso, $hctAtrelarOfertaDeTurma, $hctAtrelarOfertaDeComponente))));
        
        //Oferta de curso (SEMPRE carrega, porque está em todas as opções)
        $cursoIdLabel = new MLabel(_M("Oferta de curso", $module) . ":");
        $cursoIdLabel->setClass('m-caption m-caption-required');
        $cursoIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $cursoId = new sEscolha('ofertaCursoId', NULL, NULL, new AcpOfertaCurso());
        $subFields[] = $hctCurso = new MHContainer('hctCurso', array($cursoIdLabel, $cursoId));
        
        // Div para outras escolhas 
        $subFields[] = new MDiv('divEscolharPedagogico', null);
       
        // Hidden fields dos IDs
        $subFields[] = new SHiddenField('documentosPortalCursoId');
        
        // Dados da subdetail
        if ( $this->isSubDetailEditMode() )
        {
            $basDocCurso = new BasDocumentosPortalCurso();
            MSubDetail::setData($basDocCurso->obterAtrelamentosPedagogico($documentoPortalId), '_atrelamentosPedagogico');
        }

        $subColumns[] = new MGridColumn(_M("Código", $module), 'left', false, null, false, 'documentosPortalCursoId');
        $subColumns[] = new MGridColumn(_M("Cód. Oferta de Curso", $module), 'right', false, null, false, 'ofertaCursoId');
        $subColumns[] = new MGridColumn(_M("Oferta de curso", $module), 'left', false, '35%', true, 'ofertaCursoIdDescription');
        $subColumns[] = new MGridColumn(_M("Cód. Oferta de turma", $module), 'right', false, null, false, 'ofertaTurmaId');
        $subColumns[] = new MGridColumn(_M("Oferta de turma", $module), 'left', false, '35%', true, 'ofertaTurmaIdDescription');
        $subColumns[] = new MGridColumn(_M("Cód. Oferta de Componente Curricular", $module), 'right', false, null, false, 'ofertaComponenteCurricularId');
        $subColumns[] = new MGridColumn(_M("Oferta de componente curricular", $module), 'left', false, '30%', true, 'ofertaComponenteCurricularIdDescription');
        
        $subDetail = new MSubDetail('_atrelamentosPedagogico', _M("Vincular", $module), $subColumns, $subFields, array('remove'));
        
        // Validadores da subdetail
        $subValidators[] = new MIntegerValidator('ofertaCursoId', _M("Oferta de Curso", $module), 'required');
        
        $subDetail->setValidators($subValidators, '_atrelamentosPedagogico');

        return array($subDetail);
    }
    
    /**
     * Retorna campos de sEscolha ao mudar o radio na subdetail do peda?ogico.
     * 
     * @param stdClass $args
     * @return \MHContainer
     */
    public function obterEscolhasPedagogico($args = null)
    {
        $module = MIOLO::getCurrentModule();
        $subFields = array();
        
        $subValidators[] = new MIntegerValidator('ofertaCursoId', _M("Oferta de Curso", $module), 'required');
        
        if ( $args->tipoEscolha == self::OFERTA_TURMA || $args->tipoEscolha == self::OFERTA_COMPONENTE )
        {
            //Oferta de turma
            $turmaIdLabel = new MLabel(_M("Oferta de turma", $module) . ":");
            $turmaIdLabel->setClass('m-caption m-caption-required');
            $turmaIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $turmaId = new sEscolha('ofertaTurmaId', NULL, NULL, new AcpOfertaTurma());
            $subFields[] = $hctTurma = new MHContainer('hctTurma', array($turmaIdLabel, $turmaId));
            $subValidators[] = new MIntegerValidator('ofertaTurmaId', _M("Oferta de Turma", $module), 'required');
        }
        
        if ( $args->tipoEscolha == self::OFERTA_COMPONENTE )
        {
            //Oferta de componente curricular
            $ofCompIdLabel = new MLabel(_M("Oferta de componente curricular", $module) . ":");
            $ofCompIdLabel->setClass('m-caption m-caption-required');
            $ofCompIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $ofCompId = new sEscolha('ofertaComponenteCurricularId', NULL, NULL, new AcpOfertaComponenteCurricular());
            $subFields[] = $hctComp = new MHContainer('hctComp', array($ofCompIdLabel, $ofCompId));
            $subValidators[] = new MIntegerValidator('ofertaComponenteCurricularId', _M("Oferta de Componente Curricular", $module), 'required');
        }
        
        MSubDetail::setValidatorsAjax($subValidators, '_atrelamentosPedagogico');
        
        return $subFields;
    }
    
    /**
     * Faz verificação se atrelamento é para ser excluído ou adicionado/atualizado.
     * 
     * @param stdClass $data
     * @param int $documentoPortalId
     * @throws Exception
     */
    public function adicionarAtrelamentoPedagogico($data, $documentoPortalId)
    {
        if ( strlen($data->removeData) > 0 )
        {
            $this->deletarAtrelamento($data->documentosPortalCursoId);
        }
        else
        {
            $basDocCurso = new BasDocumentosPortalCurso();
            $basDocCurso->ofertaCursoId = (strlen($data->ofertaTurmaId) > 0 || strlen($data->ofertaComponenteCurricularId) > 0 ) ? NULL : $data->ofertaCursoId;
            $basDocCurso->ofertaTurmaId = strlen($data->ofertaComponenteCurricularId) > 0 ? NULL : $data->ofertaTurmaId;
            $basDocCurso->ofertaComponenteCurricularId = $data->ofertaComponenteCurricularId;
            $basDocCurso->idModule = SModules::MODULE_PEDAGOGICO;
            $basDocCurso->documentoPortalId = $documentoPortalId;
            $basDocCurso->documentosPortalCursoId = $data->documentosPortalCursoId;
            
            $basDocCurso->validarAtrelamento();

            $basDocCurso->save();
        }
    }
    
    /**
     * Sobrescreve as funções de salvar padrões do SForm.
     * 
     * @return int
     * @throws Exception
     */
    public function salvarDocumento()
    {
        $MIOLO = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        $docPortal = $this->getTypesData();
        
        SDatabase::beginTransaction();
        try
        {   
            if ( count($_FILES) == 0 
              && count($_POST) == 0)
            {
                throw new Exception(_M("Selecione um arquivo que não ultrapasse o tamanho limite."));
            }
            
            if ( $_FILES['uploadFile']['error'] == 0 )
            {
                $fileData = new stdClass();
                $fileData->localPath = $_FILES['uploadFile']['tmp_name'];
                $fileData->fileName = $_FILES['uploadFile']['name'];
                $fileData->fileType = $_FILES['uploadFile']['type'];
                $fileData->size = $_FILES['uploadFile']['size'];
                $fileData->uploadFileName = $fileData->fileName;
                $fileData->contentType = $fileData->fileType;
                
                $busFile = new BusinessBasicBusFile();
                $docPortal->fileid = $busFile->insertFile($fileData, $fileData->localPath);
            }
            
            if ( !(strlen($docPortal->fileid) > 0))
            {
                throw new Exception(_M("Selecione um arquivo."));
            }
            
            $docPortal->save();
            
            // Salvar atrelamentos do acadêmico
            foreach ( (array) MSubDetail::getData('_atrelamentosAcademic') as $academic )
            {
                $this->adicionarAtrelamentoAcademic($academic, $docPortal->documentoportalid);
            }

            // Salvar atrelamentos do pedagógico
            foreach ( (array) MSubDetail::getData('_atrelamentosPedagogico') as $pedagogico )
            {
                $this->adicionarAtrelamentoPedagogico($pedagogico, $docPortal->documentoportalid);
            }
            
            SDatabase::commit();
        }
        catch (Exception $e) 
        {
            SDatabase::rollback();
            $msg = _M('Ocorreu um erro ao salvar o documento:', $module) . '<br/>';
            $msg .= $e->getMessage();
            $MIOLO->error($msg);
        }
        
        return $docPortal->documentoportalid;
    }
    
    /**
     * Remove o atrelamento da base de dados.
     * 
     * @param int $documentosPortalCursoId
     */
    public function deletarAtrelamento($documentosPortalCursoId)
    {
        if ( strlen($documentosPortalCursoId) > 0 )
        {
            $basDocCurso = new BasDocumentosPortalCurso($documentosPortalCursoId);
            $basDocCurso->delete();    
        }
    }
    
    /**
     * Sobrescreve os getTypesData do SForm.
     * 
     * @return \BasDocumentosPortal
     */
    public function getTypesData()
    {
        $data = new BasDocumentosPortal(MIOLO::_REQUEST('documentoportalid'));
        
        $data->documentoportalid = MIOLO::_REQUEST('documentoportalid');
        $data->titulo = MIOLO::_REQUEST('titulo');
        $data->descricao = NULL;
        $data->disponivel_aluno = MIOLO::_REQUEST('disponivel_aluno');
        $data->disponivel_professor = MIOLO::_REQUEST('disponivel_professor');
        $data->disponivel_coordenador = MIOLO::_REQUEST('disponivel_coordenador');
        $data->disponivel_gestor = MIOLO::_REQUEST('disponivel_gestor');
        $data->habilitado = MIOLO::_REQUEST('habilitado');
        
        //Setar usuário básico
        if ( $data->disponivel_aluno == DB_TRUE
          || $data->disponivel_coordenador == DB_TRUE
          || $data->disponivel_professor == DB_TRUE
          || $data->disponivel_gestor == DB_TRUE)
        {
            $data->disponivel_usuario_basico = DB_FALSE;
        }
        else
        {
            $data->disponivel_usuario_basico = DB_TRUE;
        }
        
        return $data;
    }
    
    /**
     * Ação realizada ao clicar no botão salvar na toolbar.
     * 
     * @param type $sender
     */
    public function tbBtnSave_click($sender = NULL)
    {
        try
        {
            $documentportalid = $this->salvarDocumento();
            
            if ( strlen($documentportalid) > 0 )
            {
                $this->confirmInsertUpdate(true);
            }
        }
        catch (Exception $ex) 
        {
            $this->addError($ex->getMessage());
        }
    }
}
?>
