<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Unit form
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 11/08/2005
 *
 **/

/**
 * Form to manipulate a unit
 **/
class FrmUnit extends SManagementForm
{

    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new BasUnit(), array('unitId'), 'BusUnit');
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $function = MIOLO::_REQUEST('function');
        $data = new stdClass();

        if ( in_array($function,array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $unitId = MIOLO::_REQUEST('unitId');
            $fields[] = new MTextLabel('unitId', $unitId, _M('Código',$module));
            $fields[] = new MHiddenField('unitId', $unitId);
            $data = $this->busObject->getUnit($unitId);
        }

        $data->description = $this->getFormValue('description', $data->description);
        $fields[] = $descriptionField = new MTextField('description', $data->description, _M('Descrição',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $descriptionField->setJsHint(_M('Informe o nome da cidade',$module));
        $validators[] = new MRequiredValidator('description');

        if ( SAGU::getParameter('BASIC', 'MODULE_ACCOUNTANCY_INSTALLED') == 'YES' )
        {
            $fields[] = $accountingCode = new MTextField('accountingCode', $this->getFormValue('accountingCode',  $data->accountingCode), _M('Código de contabilização',$module), 5, _M('@1 carateres', $module, 2));
            $accountingCode->setJsHint(_M('Informe o código de contabilização',$module));
            $validators[] = new MRegExpValidator('accountingCode', null, "^[A-Za-z0-9]{2}$", 'optional');
        }
        
        //Field location
        $locationLabel = new MText('locationLabel', _M('Logradouro',$module) . ':');
        $locationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $locationLabel->setClass('m-caption m-caption-required');
        $locationId = new MLookupTextField('locationId', $this->getFormValue('locationId',$data->locationId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'location', $module, 'Location', null, null, true);
        $locationId->setJsHint(_M('Informe o código do logradouro',$module));        
        $validators[] = new MIntegerValidator('locationId', _M('Logradouro',$module), 'required');
        $locationName = new MTextField('location', $this->getFormValue('location', $data->location), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $locationName->setReadOnly(true);        
        $hctLocation = new MHContainer('hctLocation', array($locationLabel, $locationId, $locationName));
        $fields[] = $hctLocation;
        
        // Field person
        $personLabel = new MText('personLabel', _M('Pessoa jurídica',$module) . ':');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personId = new MLookupTextField('personId', $this->getFormValue('personId',$data->personId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'person', 'basic', 'LegalPerson', null, null, true);
        $personId->setJsHint(_M('Informe o código do pessoa jurídica',$module));
        $validators[] = new MIntegerValidator('personId', _M('Pessoa Jurídica',$module));
        $personName = new MTextField('person', $this->getFormValue('person', $data->person), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setReadOnly(true);
        $hctPerson = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
        $fields[] = $hctPerson;

        parent::defineFields($fields, $validators, $data);
    }
}
?>
