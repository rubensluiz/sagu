<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Person form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Cristian Edson Göhl [cristian@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 29/08/2005
 *
 **/

/**
 * Form to manipulate tabbs
 **/

class FrmPerson extends FrmPersonSteps
{
    /**
     * Class constructor
     **/
    public function __construct($steps=null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $function = MIOLO::_REQUEST('function');

        parent::__construct(null, $steps, __CLASS__);

        //Default toolbar buttons
        if (is_object($this->toolbar))
        {
            if ($function == SForm::FUNCTION_INSERT)
            {
            }
            else if ($function == SForm::FUNCTION_UPDATE)
            {
                $this->toolbar->enableButton( MToolBar::BUTTON_DELETE );
            }
            $this->toolbar->disableButton( MToolBar::BUTTON_SAVE ); //People need to be Physical or Legal
        }
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event = MIOLO::_request('event');
        $documents = MIOLO::_request('documents');
        
        //carrega os dados
        $stepData = $this->getStepData();
        $personId = MIOLO::_REQUEST('personId');
        if (!(strlen($personId) > 0))
        {
            $personId = $stepData->personId;
            $contractId = MIOLO::_REQUEST('contractId');
            
            // Se não estiver setado id da pessoa, e tiver código do contrato, tenta buscar pelo contrato.
            if ( !isset($personId) && isset($contractId) )
            {
                if ( !isset($contractId) )
                {
                    $contractId = $stepData->contractId;
                }
                
                $busContract = new BusinessAcademicBusContract();
                $personId = $busContract->getPersonIdByContract($contractId);
            }
        }

        if ( $this->isFirstAccess() )
        {
            if ($function == 'insert')
            {
                if ($stepData->isFromPersonChoose != DB_TRUE)
                {
                    $this->cleanStepData();
                    $personId = null;
                }
            }
            
            if (strlen($personId) > 0)
            {
                if (strpos($action, 'legal'))
                {
                    $business = new BusinessBasicBusLegalPerson();
                    $data = $business->getLegalPerson($personId);
                }
                else
                {
                    $business = new BusinessBasicBusPhysicalPerson();
                    $data = $business->getPhysicalPerson($personId);
                }
            }
            
            $busFile = new BusinessBasicBusFile();
            $path = $busFile->getUrl($data->photoId, array('permission' => true));

            // Update the person photo.
            SPhotoManager::loadPhoto($path);
            
        }
        else
        {
            $data = $stepData;
        }
        
        if (!(strlen($personId) > 0))
        {
            $personId = $data->personId;
        }
        if (!(strlen($data->name) > 0))
        {
            $data->name = $data->personName;
        }
        if (!(strlen($data->locationTypeId) > 0))
        {
            $data->locationTypeId = $data->locationType;
        }
        
        $_SESSION['dadosBancario'] = null;
        $_SESSION['agencia'] = null;
        $_SESSION['digitoAgencia'] = null;
        $_SESSION['conta'] = null;
        $_SESSION['digitoConta'] = null;
        $_SESSION['observacao'] = null;
        $busDadosBancariosDaPessoa = new BusinessFinanceBusDadosBancariosDaPessoa();
        $dadosBancarios = $busDadosBancariosDaPessoa->getDadosBancariosDaPessoa($data);
        
        $fields[] = new Separator();
        $divError = new MDiv('divError', null, null, 'align=center');
        $fields[] = $divError;

        $fields[] = new MHiddenField('personId', $personId);
        //seta os campos da tabela de pessoas fisicas ou juridicas
        $person = new BasPerson();
        $varsPerson = array_keys(get_object_vars($person));
        if ( strstr(strtolower($action), 'physical') )
        {
            $person = new BasPhysicalPerson();
            $pictureDescription = _M('Foto', $module);
        }
        elseif ( strstr(strtolower($action), 'legal') )
        {
            $person = new BasLegalPerson();
            $pictureDescription = _M('Logotipo', $module);
        }
        $vars = array_keys(get_object_vars($person));
        $vars = array_diff($vars, $varsPerson);

        $personId = ( strlen($personId)>0 ) ? $personId : $data->personId;

        //controla os uploads das imagens
        $timeStamp = strlen($this->getFormValue('timeStamp',$data->timeStamp)) > 0 ? $this->getFormValue('timeStamp',$data->timeStamp) : time();
        $fields[] = new MHiddenField('timeStamp', $timeStamp);

        //BaseGroup 1
        if ( (strlen($personId)>0) || (strlen($data->personId)>0) )
        {
            $personIdLabel = new MText('personIdLabel', _M('Código da pessoa',$module) . ':');
            $personIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $personId1 = new MTextLabel('personId', $personId, null);
            $personId2 = new MHiddenField('personId', $personId);
        }

        $flds[] = new MHContainer('contPersonId', array($personIdLabel, $personId1, $personId2));
        
        // Field person title
        if ( strstr(strtolower($action), 'physical') )
        {
            $txtPersonTitleLabel = new MText('txtPersonTitleLabel', _M('Pronome de tratamento', $module) . ':');
            $txtPersonTitleLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

            $busPersonTitle = new BusinessBasicBusPersonTitle();
            $txtPersonTitleId = new MSelection('txtPersonTitleId', $this->getFormValue('txtPersonTitleId', $data->personTitleId), null, $busPersonTitle->listPersonTitle(), false);
            $txtPersonTitleId->setJsHint(_M('Informe pronome de tratamento',$module));
            $flds[] = new MHContainer('hctPersonTitle', array($txtPersonTitleLabel, $txtPersonTitleId));
        }

        // Field person name
        $personLabel = new MText('personLabel', _M('Nome',$module) . ':');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personLabel->setClass('m-caption m-caption-required');
        $personName = new MTextField('personName', $this->getFormValue('personName',$data->name), NULL, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setJsHint(_M('Informe o nome da pessoa',$module));
        $validators[] = new MRequiredValidator('personName', _M('Nome da pessoa', $module));
        $hctPerson = new MHContainer('hctPerson', array($personLabel, $personName));
        $hctPerson->setShowLabel(true);
        $flds[] = $hctPerson;

        // Field short name
        $shortNameLabel = new MText('shortNameLabel', _M('Abreviatura',$module) . ':');
        $shortNameLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $shortNameLabel->setJsHint(_M('Informe a abreviatura do nome da pessoa',$module));
        $shortName = new MTextField('shortName', $this->getFormValue('shortName',$data->shortName), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $shortName->setJsHint(_M('Informe a abreviatura do nome da pessoa',$module));        
        $flds[] = new MHContainer('hctShortName', array($shortNameLabel, $shortName));
        
        $valid = new MRequiredValidator('shortName', _M("Abreviatura"), 30);
        $valid->type = 'optional';
        $validators[] = $valid;
        
        // Field email
        $emailLabel = new MText('emailLabel', _M('E-mail',$module) . ':');
        $emailLabel->setClass('m-caption m-caption-required');
        $emailLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $email = new MTextField('email', $this->getFormValue('email',$data->email), NULL, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $email->setJsHint(_M('Informe o e-mail da pessoa',$module));
        $validators[] = new MEmailValidator('email',_M('E-mail',$module),'required');
       // $validators[] = new MRequiredValidator('email', _M('E-mail', $module));
        $hctEmail = new MHContainer('hctEmail', array($emailLabel, $email));
        $hctEmail->setShowLabel(true);
        $flds[] = $hctEmail;

        // Field email alternative
        $emailAlternativeLabel = new MText('emailAlternativeLabel', _M('E-mail alternativo',$module) . ':');
        $emailAlternativeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $emailAlternative = new MTextField('emailAlternative', $this->getFormValue('emailAlternative',$data->emailAlternative), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $emailAlternative->setJsHint(_M('Informe o e-mail alternativo da pessoa',$module));
        $validators[] = new MEmailValidator('emailAlternative',_M('E-mail alternativo',$module),'optional');
        $flds[] = new MHContainer('hctEmailAlternative', array($emailAlternativeLabel, $emailAlternative));

        // Field URL
        $urlLabel = new MText('urlLabel', _M('URL', $module) . ':');
        $urlLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $url = new MTextField('url', $this->getFormValue('url',$data->url), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $url->setJsHint(_M('Informe a URL da pessoa',$module));
        $flds[] = new MHContainer('hctUrl', array($urlLabel, $url));

        $flds[] = new SHiddenField('mioloUserNameOld', $data->mioloUserName);
        
        // Caso esteja definido como cpf ou cpfnomask não permite edição do campo miolousername
        $loginType = SAGU::getParameter('BASIC', 'AUTOMATIC_LOGIN_GENERATION_SOURCE');
        
        // Field miolo username
        $mioloUserNameLabel = new MText('mioloUserNameLabel', _M('Usuário',$module) . ':');
        $mioloUserNameLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));        
        $mioloUserName = new MTextField('miolo_user_name', $this->getFormValue('miolo_user_name', $data->mioloUserName), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $mioloUserName->AddAttribute('autocomplete', 'off');        
        //Somente um usuário administrador pode alterar o nome de usuário da pessoa
        $isNotAdmin = $function == 'update' && (!$MIOLO->CheckAccess('ADMIN', A_ADMIN, false));
        $syncLdapEnabled = MUtil::getBooleanValue( SAGU::getParameter('BASIC', 'AUTH_LDAP_SYNCHRONIZE_USERS') );
        if ( $isNotAdmin || $syncLdapEnabled )
        {
            $mioloUserName->setReadOnly(true);
        }
        else if ( in_array($loginType, array('CPF', 'CPFNOMASK')) )
        {
            $mioloUserName->setReadOnly(true);
        }
        //$teste = MUtil::getArrayAsCSV(SAGU::getParameter('BASIC', 'AUTOMATIC_LOGIN_GENERATION_SOURCE'))
        //CPF: Utiliza o CPF da pessoa como login.
//CPFNOMASK: Utiliza o CPF da pessoa como login, porém, removendo as máscaras.
//PERSONNAME;
        
        $paramLogin = SAGU::getParameter('BASIC', 'AUTOMATIC_LOGIN_GENERATION_SOURCE');
        if( $paramLogin == 'PERSONID' )
            $ex = '15';
        else if( $paramLogin == 'CPF' )
            $ex = '015.015.015-15';
        else if( $paramLogin == 'CPFNOMASK' )
            $ex = '01501501515';
        else if( $paramLogin == 'PERSONNAME' )
            $ex = 'jamesbond';
        
        $mioloUserName->setJsHint(_M('Caso não for preenchido, será gerado um login automático usando '.$paramLogin.' por padrão. Ex: '.$ex, $module));
        $flds[] = new MHContainer('hctMioloUserName', array($mioloUserNameLabel, $mioloUserName));
        
        if ( SAGU::getParameter('BASIC', 'ENABLE_FIELD_PASSWORD_IN_PHYSICALPERSON_REGISTER') == DB_TRUE  )
        {
            $passwordHint = ($function == SForm::FUNCTION_INSERT) ?
                _M('Caso não informada, será gerada automaticamente', $module) :
                _M('Caso não informada, será mantida a senha atual', $module);
            
            // Field miolo userpassword
            $mioloUserPasswdLabel = new MText('mioloUserPasswdLabel', _M('Senha',$module) . ':');
            $mioloUserPasswdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $mioloUserPasswd = new MPasswordField('miolo_user_passwd', $this->getFormValue('miolo_user_passwd', $data->mioloUserPasswd), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), $passwordHint);
            $mioloUserPasswd->setJsHint(_M('Informe o nome de usuário da pessoa',$module));
            $mioloUserPasswd->AddAttribute('autocomplete', 'off');
            $flds[] = new MHContainer('hctMioloUserName', array($mioloUserPasswdLabel, $mioloUserPasswd));
        }

        // Field allow personal data
        $isAllowPersonalDataLabel = new MText('isAllowPersonalDataLabel', _M('Permitir dados pessoais',$module));
        $isAllowPersonalDataLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $isAllowPersonalDataLabel->setClass('m-caption m-caption-required');
        $isAllowPersonalData = $this->getFormValue('isAllowPersonalData',is_null($data->isAllowPersonalData) ? DB_FALSE : $data->isAllowPersonalData);
        $isAllowPersonalData = new MRadioButtonGroup('isAllowPersonalData', '', SAGU::listYesNo(1), $isAllowPersonalData, null, 'horizontal');
        $isAllowPersonalData->setShowLabel(false);
        $hctIsAllowPersonalData = new MHContainer('hctIsAllowPersonalData', array($isAllowPersonalDataLabel, $isAllowPersonalData));
        $flds[] = $hctIsAllowPersonalData;

        // Field receive email
        $sentEmailLabel = new MText('receiveEmailLabel', _M('Receber email', $module));
        $sentEmailLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $sentEmailLabel->setClass('m-caption m-caption-required');
        $sentEmail = $this->GetFormValue('sentEmail', is_null($data->sentEmail) ? DB_FALSE : $data->sentEmail);
        $sentEmail = new MRadioButtonGroup('sentEmail', '', SAGU::listYesNo(1), $sentEmail, null, 'horizontal');
        $sentEmail->setShowLabel(false);
        $htcSentEmail = new MHContainer('htcSentEmail', array($sentEmailLabel, $sentEmail));
        $flds[] = $htcSentEmail;
        $generalData[] = new MVContainer('mvcGeneralData', $flds);
        $generalData[] = new MVContainer('mvcPhoto', array($personFileBorder) );
        $hContainerGeneralData[] = new MHContainer('mhcGeneralData', $generalData);

        $bsg1 = new BaseGroup('bsg1',_M('Dados gerais',$module), $hContainerGeneralData,'vertical');
        $bsg1->showLabel = true;
        unset($flds);

        //BaseGroup 2
        // Field zip code
        $busUnit      = new BusinessBasicBusUnit();
        $busLocation  = new BusinessBasicBusLocation();
        $busCity      = new BusinessBasicBusCity();
        $busState     = new BusinessBasicBusState();
        
        if( $function == SForm::FUNCTION_UPDATE || $action == 'main:register:contract:contract'  )
        {       
            $zipCodeLabel = new MText('zipCodeLabel', _M('CEP',$module) . ':');
            $zipCodeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $zipCodeLabel->setClass('m-caption m-caption-required');
            $zipCode = new MIntegerField('zipCode', $this->getFormValue('zipCode',$data->zipCode), NULL, SAGU::getParameter('BASIC', 'FIELD_ZIPCODE_SIZE'), _M('Somente números. Ex.: 99999999.',$module));
            $zipCode->setJsHint(_M('Informe o CEP da pessoa',$module));
            $validators[] = new MRequiredValidator('zipCode', _M('CEP da pessoa'));
            $hctZipCode = new MHContainer('hctZipCode', array($zipCodeLabel, $zipCode));
            $hctZipCode->setShowLabel(true);
            $flds[] = $hctZipCode;           
           
            $flds[] = new MDiv('response', $this->changeData($data));
             
        }else
        {
        
        $zipCodeLabel = new MText('zipCodeLabel', _M('CEP',$module) . ':');
        $zipCodeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $zipCodeLabel->setClass('m-caption m-caption-required');
        $zipCode = new MLookupTextField('zipCode', $this->getFormValue('zipCode',$data->zipCode), NULL, SAGU::getParameter('BASIC', 'FIELD_ZIPCODE_SIZE'), _M('Somente números. Ex.: 99999999.',$module), null, 'location, countryId, countryName, stateId, stateName, cityId, cityName, neighborhood, neighborhood', $module, 'LocationZipCode', null, array('stateName' => 'stateName'), true);
        $zipCode->setJsHint(_M('Somente números',$module));
        $validators[] = new MRequiredValidator('zipCode', _M('CEP da pessoa'));
        $hctZipCode = new MHContainer('hctZipCode', array($zipCodeLabel, $zipCode));
        $hctZipCode->setShowLabel(true);
        $flds[] = $hctZipCode;

        // Field city
        $cityLabel = new MText('cityLabel', _M('Cidade',$module) . ':');
        $cityLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $cityLabel->setClass('m-caption m-caption-required');
        $fields[] = new MHiddenField('limbo');
        $fields[] = new MHiddenField('stateId');
        $fields[] = new MHiddenField('countryId');        
        $cityName = new MTextField('cityName', $this->getFormValue('cityName',$data->cityName), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $cityName->setReadOnly(true);
        $cityName->setJsHint(_M('Informe o nome da cidade',$module));
        $flds[] = new MHiddenField('cityId', $this->getFormValue('cityId',$data->cityId));
        $hctCity = new MHContainer('hctCity', array($cityLabel, $cityId, $cityName));
        $hctCity->setShowLabel(true);
        $flds[] = $hctCity;

        $validators[] = new MIntegerValidator('cityId', _M('Cidade', $module), 'required');
        
        // Field state
        $stateLabel = new MText('stateLabel', _M('Estado',$module) . ':');
        $stateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $stateName = new MTextField('stateName', $this->getFormValue('stateName',$data->stateName), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $stateName->setReadOnly(true);
        $stateName->setJsHint(_M('Informe o nome do estado',$module));
        $flds[] = new MHContainer('hctState', array($stateLabel, $stateName));

        // Field country
        $countryLabel = new MText('countryLabel', _M('País',$module) . ':');
        $countryLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $countryName = new MTextField('countryName', $this->getFormValue('countryName',$data->countryName), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $countryName->setReadOnly(true);
        $countryName->setJsHint(_M('Informe o nome do país',$module));
        $flds[] = new MHContainer('hctCountry', array($countryLabel, $countryName));

        }
        
        // Field location type id
        $busLocationType = new BusinessBasicBusLocationType();
        $locationTypeLabel = new MText('locationTypeLabel', _M('Tipo de logradouro',$module) . ':');
        $locationTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $locationTypeLabel->setClass('m-caption m-caption-required');        
        $locationType = new MSelection('locationType', $this->getFormValue('locationType', $data->locationTypeId), '', $busLocationType->listLocationType(), false, '');
        $locationType->setJsHint(_M('Informe o tipo de logradouro da pessoa',$module));
        $hctLocationType = new MHContainer('hctLocationType', array($locationTypeLabel, $locationType));
        $hctLocationType->setShowLabel(true);
        $flds[] = $hctLocationType;
        $validators[] = new MRequiredValidator('locationType', _M('Tipo de logradouro', $module));
        $locationLabel = new MText('locationLabel', _M('Logradouro',$module) . ':');
        $locationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $locationLabel->setClass('m-caption m-caption-required');
        $location = new MTextField('location', $this->getFormValue('location', $data->location), NULL, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $location->setJsHint(_M('Informe o logradouro da pessoa',$module));
        $hctLocation = new MHContainer('hctLocation', array($locationLabel, $location));
        $hctLocation->setShowLabel(true);
        $flds[] = $hctLocation;
        $validators[] = new MRequiredValidator('location', _M('Logradouro', $module));
        
        // Field number
        $numberLabel = new MText('numberLabel', _M('Número',$module) . ':');
        $numberLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $numberLabel->setClass('m-caption m-caption-required');
        $number = new MIntegerField('number', $this->getFormValue('number',$data->number), NULL, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $number->setJsHint(_M('Informe o número do logradouro',$module));
        $hctNumber = new MHContainer('hctNumber', array($numberLabel, $number));
        $hctNumber->setShowLabel(true);
        $flds[] = $hctNumber;
        $validators[] = new MRequiredValidator('number', _M('Número', $module));

        // Field complement
        $complementLabel = new MText('complementLabel', _M('Complemento',$module) . ':');
        $complementLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $complementLabel->setJsHint(_M('Informe o complemento',$module));
        $complement = new MTextField('complement', $this->getFormValue('complement',$data->complement), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $complement->setJsHint(_M('Informe o complemento',$module));
        $flds[] = new MHContainer('hctComplement', array($complementLabel, $complement));

        // Field neighborhood
        $neighborhoodLabel = new MText('neighborhoodLabel', _M('Bairro',$module) . ':');
        $neighborhoodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $neighborhoodLabel->setClass('m-caption m-caption-required');
        $neighborhood = new MTextField('neighborhood', $this->getFormValue('neighborhood',$data->neighborhood), NULL, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $neighborhood->setJsHint(_M('Informe o bairro da pessoa',$module));
        $hctNeighborhood = new MHContainer('hctNeighborhood', array($neighborhoodLabel, $neighborhood));
        $hctNeighborhood->setShowLabel(true);
        $flds[] = $hctNeighborhood;
        $validators[] = new MRequiredValidator('neighborhood', _M('Bairro', $module));       

        $bsg2 = new BaseGroup('bsg2',_M('Endereço',$module), $flds,'vertical');
        $bsg2->showLabel = true;
        unset($flds);
        
        // SPHOTOMANAGER FIELDS
        $flds[] = new SPhotoManager('photoManager');
                
        $bsg3 = new BaseGroup('bsg3', _M('Foto', $module), $flds, 'vertical');
        $bsg3->showLabel = true;
        
        $fields[] = $bsg1;
        $fields[] = $bsg2;
        $fields[] = $bsg3;
        
        $busBank = new BusinessFinanceBusBank();
        $options = $busBank->listBank();
        
        $dadosBancarioLabel = new MText('dadosBancarioLabel', _M('Banco').':');
        $dadosBancarioLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $dadosBancarioLabel->setClass('m-caption m-caption');
        $dadosBancario = new MComboBox('dadosBancario', $this->getFormValue('dadosBancario', strlen($data->dadosBancario) > 0 ? $data->dadosBancario : $dadosBancarios->dadosBancario), null, $options);
        $dadosBancario->addAttribute('onchange', SForm::getAjaxAction('obterCamposAgenciaEConta', 'divDadosBanco', false));
        $hctDadosBancario = new MHContainer('hctDadosBancario', array($dadosBancarioLabel,$dadosBancario));
        
        $observacaoLabel = new MText('observacaoLabel', _M('Observação').':');
        $observacaoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $observacaoLabel->setClass('m-caption m-caption');
        $observacao = new MMultiLineField('observacao', $this->getFormValue('observacao', strlen($data->observacao) > 0 ? $data->observacao : $dadosBancarios->observacao), null, 100, 5, 31);
        $hctObservacao = new MHContainer('hctObservacao', array($observacaoLabel, $observacao));
        
        if( strlen($data->dadosBancario) > 0 )
        {
            $mDiv = new MDiv('divDadosBanco', $this->obterCamposAgenciaEConta($data));
        }
        else if( count($dadosBancarios)> 0 )
        {
            $mDiv = new MDiv('divDadosBanco', $this->obterCamposAgenciaEConta($dadosBancarios));
        }
        else
        {
            $mDiv = new MDiv('divDadosBanco');
        }
        
        $fields[] = new MBaseGroup('bgDadosBancario', _M('Dados bancários'), array($hctDadosBancario, $mDiv, $hctObservacao), null, 'vertical');
        
        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Última modificação',$module));

        }

        $fields[] = new MSeparator();

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        $this->page->onLoad('document.' . $this->name . '.personName.focus()');       
        
        // Realizado validação para limpar os campos de login, caso venham preenchidos pelo navegador, atributo autocomplete=off não funciona corretamente. 
        $login = $MIOLO->GetLogin()->id;
        if ( $login != $data->mioloUserName || SForm::FUNCTION_INSERT == $function )
        {
            $jsCode = " var login = document.getElementById('miolo_user_name').value; 
                
                        if ( login == '{$login}' )
                        {
                            document.getElementById('miolo_user_name').value = '';
                            document.getElementById('miolo_user_passwd').setAttribute('type', 'text');
                            document.getElementById('miolo_user_passwd').value = '';
                            document.getElementById('miolo_user_passwd').setAttribute('type', 'password');
                        }";
                        
            $MIOLO->page->onload($jsCode);
        }
        
    }
    
    public function obterCamposAgenciaEConta($args=null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $data = $this->getTypesData();
        $bankId = $args->phpFunction == 'obterCamposAgenciaEConta' ? $args->dadosBancario_sel : $args->dadosBancario;
                
        if( strlen($bankId) > 0 )
        {               
            $busBank = new BusinessFinanceBusBank();
            $banco = $busBank->getBank($bankId);

            $agenciaDigitoLabel = new MText('agenciaDigitoLabel', _M('Agência/Dígito', $module).':');
            $agenciaDigitoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $agenciaDigitoLabel->setClass('m-caption m-caption');

            $agencia = new MTextField('agencia', $this->getFormValue('agencia', $args->agencia), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $validatorsAgencia = new MRequiredValidator('agencia', _M('Agência'), $banco->tamanhoCampoAgencia);
            $validatorsAgencia->min = $banco->tamanhoCampoAgencia;
            $validatorsAgencia->type = 'optional';
            $validatorsAgencia->mask = $banco->mascaraAgencia;

            $digitoAgencia = new MTextField('digitoAgencia', $this->getFormValue('digitoAgencia', $args->digitoAgencia), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $validatorsDigitoAgencia = new MRequiredValidator('digitoAgencia', _M('Dígito(Agência)'), $banco->tamanhoDvAgencia);
            $validatorsDigitoAgencia->min = $banco->tamanhoDvAgencia;
            $validatorsDigitoAgencia->type = 'optional';

            $validators[] = $validatorsAgencia;
            $validators[] = $validatorsDigitoAgencia;

            $fld[] = $hctAgenciaDigito = new MHContainer('hctAgenciaDigito', array($agenciaDigitoLabel, $agencia, $digitoAgencia));

            $contaDigitoLabel = new MText('contaDigitoLabel', _M('Conta/Dígito', $module).':');
            $contaDigitoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $contaDigitoLabel->setClass('m-caption m-caption');

            $conta = new MTextField('conta', $this->getFormValue('conta', $args->conta), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $validatorsConta = new MRequiredValidator('conta', _M('Conta'), $banco->tamanhoCampoConta);
            $validatorsConta->min = $banco->tamanhoCampoConta;
            $validatorsConta->type = 'optional';
            $validatorsConta->mask = $banco->mascaraConta;

            $digitoConta = new MTextField('digitoConta', $this->getFormValue('digitoConta', $args->digitoConta), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $validatorsDigitoConta = new MRequiredValidator('digitoConta', _M('Dígito(Conta)'), $banco->tamanhoDvConta);
            $validatorsDigitoConta->min = $banco->tamanhoDvConta;
            $validatorsDigitoConta->type = 'optional';

            $validators[] = $validatorsConta;
            $validators[] = $validatorsDigitoConta;

            $fld[] = $hctAgenciaDigito = new MHContainer('hctContaDigito', array($contaDigitoLabel,$conta, $digitoConta));
            
            $this->setFields($fld);
            $this->setValidators($validators);
        }
        
        return strlen($bankId) > 0 ? $fld : null;
    }

    /**
     * Event triggered when user click next
     **/
    public function nextStepButton_click($sender = null)
    {
        //check validators
        if ( $this->checkValidators() == false )
        {
            $MIOLO = MIOLO::getInstance();
            $module = SAGU::getFileModule(__FILE__);
            $action = MIOLO::getCurrentAction();
            $function = MIOLO::_request('function');
            
            $data = $this->getTypesData();
            
            if ( $this->verificaEmail($data->email, $data->personId) )
            {
                $this->error(_M("O E-mail '" . $data->email . "' já está cadastrado para outra pessoa.", $module));
                return;
            }
            
            $this->btnViewImage_click();

            parent::nextStepButton_click();
        }
    }
    
    /**
     * Verifica se o email já está registrado na base.
     * 
     * @param String $email
     * @return boolean
     */
    public function verificaEmail($email, $personId=null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $function = MIOLO::_REQUEST("function");
        $personId = ( $personId ) ? $personId : MIOLO::_REQUEST("personId");
        
        $busPerson = new BusinessBasicBusPerson();
        
        if ( isset($personId) )
        {
            $filters = new stdClass();
            $filters->personId = $personId;
            $persons = $busPerson->searchPerson($filters);
            
            foreach ( $persons as $person )
            {
                if ( $person[13] != $email )
                {
                    $filters = new stdClass();
                    $filters->fullEmail = $email;
                    $exists = $busPerson->searchPerson($filters);
                }
            }
        }
        else
        {
            $filters = new stdClass();
            $filters->fullEmail = $email;
            $exists = $busPerson->searchPerson($filters);
        }
        
        return ( isset($exists) ) ? true : false;
    }

    
    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        SDatabase::beginTransaction();
        
        try
        {
            //Verifica se a pessoa possuí registro na tabela findadosbancarios e o excluí
            $busDadosBancarios = new BusinessFinanceBusDadosBancariosDaPessoa();
            
            $data->personId = $this->personId->value;
            $verificaDadosBancarios = $busDadosBancarios->getDadosBancariosDaPessoa($data);
            
            if( strlen($verificaDadosBancarios->personId) > 0 )
            {
                $busDadosBancarios->deleteDadosBancarios($this->personId->value);
            }
                
            //Verifica vínculos com títulos
            $busReceivableInvoice = new BusinessFinanceBusReceivableInvoice();
            $filters = new stdClass();
            $filters->personId = $this->personId->value;
            $invoices = $busReceivableInvoice->searchInvoice($data);
            
            if ( count($invoices) > 0 )
            {
                throw new Exception(_M("Não é possível deletar pessoa física @1, ela possui vínculos financeiros com a instituição.", $module, $this->personId->value));
            }
            
            if ( strlen($action) == 0 )
            {
                $business = new BusinessBasicBusPerson();
                $ok = $business->deletePerson($this->personId->value);
            }
            elseif ( strstr(strtolower($action), 'professor') )
            {
                $business = new BusinessBasicBusPhysicalPersonProfessor();
                $ok = $business->deletePhysicalPersonProfessor($this->personId->value);
            }
            elseif ( strstr(strtolower($action), 'physical') )
            {
                $busDocument = new BusinessBasicBusDocument();
                $ok = $busDocument->deleteAllDocument($this->personId->value);

                $business = new BusinessBasicBusPhysicalPerson();
                $ok = $business->deletePhysicalPerson($this->personId->value);
            }
            elseif ( strstr(strtolower($action), 'legal') )
            {
                $business = new BusinessBasicBusLegalPerson();
                $ok = $business->deleteLegalPerson($this->personId->value);
            }
            else if  ( strstr(strtolower($action), 'contract') )
            {
                $business = new BusinessAcademicBusContract();
                $ok = $business->deleteContract( MIOLO::_REQUEST('contractId') );
            }
            
            SDatabase::commit();
        }
        catch(Exception $e)
        {
            SDatabase::rollback();
            
            $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
            $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
            $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
            
            $action   = 'main:person:person:physicalPerson';
            $goTo     = $MIOLO->getActionURL($module, $action);
            
            $MIOLO->error($e->getMessage(), $goTo);
        }

        parent::tbBtnDelete_confirm($sender, $ok);
    }


    public function tbBtnDelete_click($sender=NULL, $opts)
    {
        $opts['personId'] = MIOLO::_REQUEST('personId');
        $opts['contractId'] = MIOLO::_REQUEST('contractId');
        parent::tbBtnDelete_click($sender, $opts);
    }


    /**
     * Event triggered when user click save
     **/
    public function btnViewImage_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $busFile = new BusinessBasicBusFile();
        
        // Pega as informações do arquivo de foto temporário.
        $photoInfo = SPhotoManager::getData();
        
        if(count($photoInfo) > 1)
        {
            $tmpFile = 'tmp/' . $photoInfo->tmpName;
        
            list( $width, $height ) = getimagesize($photoInfo->tmpFilePath);

            $new_width = SAGU::getParameter('BASIC', 'PHOTO_WIDTH');
            $new_height = SAGU::getParameter('BASIC', 'PHOTO_HEIGHT');

            $type = explode("/", $photoInfo->type);

            eval('$im = ImageCreateFrom' . $type[1] . '($tmpFile);');
            $im_dest = imagecreatetruecolor ($new_width, $new_height);
            imagealphablending($im_dest, false);
            imagecopyresized($im_dest, $im, 0, 0, 0, 0, $new_width, $new_height, $width, $height);
            imagesavealpha($im_dest, false);

            eval('$ok = image' . strtolower(SAGU::getParameter('BASIC', 'PHOTO_FORMAT')) . '($im_dest, $tmpFile);');
            if ( $ok )
            {
                $this->page->addJsCode('parent.reloadImage();');

            }
            
        }
        
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData($action = NULL)
    {
        $data = $this->getData();
        $data->name = $data->personName;
        $data->personTitleId = $data->txtPersonTitleId;
        $data->locationTypeId = $data->locationType;
        $data->coutryTypeId = $data->countryType;
        $data->stateTypeId = $data->stateType;
        $data->cityTypeId = $data->cityType;
        $data->dadosBancario = $data->dadosBancario;
        $data->agencia = $data->agencia;
        $data->digitoAgencia = $data->digitoAgencia;
        $data->conta = $data->conta;
        $data->digitoConta = $data->digitoConta;
        $data->observacao = $data->observacao;
        
        $_SESSION['dadosBancario'] = MIOLO::_REQUEST('dadosBancario');
        $_SESSION['agencia'] = MIOLO::_REQUEST('agencia');
        $_SESSION['digitoAgencia'] = MIOLO::_REQUEST('digitoAgencia');
        $_SESSION['conta'] = MIOLO::_REQUEST('conta');
        $_SESSION['digitoConta'] = MIOLO::_REQUEST('digitoConta');
        $_SESSION['observacao'] = MIOLO::_REQUEST('observacao');
        
        return $data;
    }


    /**
     * Event triggered when user click save or next button
     **/
    public function checkValidators()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data = $this->getTypesData();
        $stepData = $this->getStepData();

        /* Make sure city exists */
        $bus = new BusinessBasicBusCity();
        $city = $bus->getCity($data->cityId);
        if ( is_null($city->cityId) )
        {
            $this->addError(_M('O código @1 informado não existe.', $module, _M('cidade', $module)));
        }

        if ( strlen($data->mioloUserName) > 0 )
        {
            $authMethod = SAGU::getParameter('BASIC', 'AUTH_METHOD');
            if ( $authMethod != 'SAGU' && $authMethod != 'LDAP' )
            {
                $MIOLO->error(_M('Método de autenticação desconhecido: @1', $module, $authMethod));
            }

            $busPerson = new BusinessBasicBusPerson();
            $person = $busPerson->getPersonByMioloUserName($data->mioloUserName);

            // Is there a person with this login?
            if ( isset($person) )
            {
                if ( $function == 'insert' && !($stepData->isFromPersonChoose && $data->personId) )
                { // yes
                    // Then, raise a "User already taken." error.
                    $this->addError(_M('Nome de usuário @1 já foi usado', $module, $data->mioloUserName). '.');
                }
                else
                { // we're not inserting
                    // Check if the id of the person being updated matches with the id
                    // of the person with this login. If not, then the record can't be updated.
                    if ( $person->personId != $data->personId && !SAGU::isDebugMode() )
                    {
                        $this->addError(_M('Nome de Usuário não pode ser alterado para @1 pois já está em uso por outro usuário', $module, $data->mioloUserName).'.');
                    }
                }
            }
        }

        // deve retornar false para continuar
        return ($this->hasErrors() > 0);
    }


    /**
     * Chamado pelo FrmPersonSteps
     */
    public function saveData()
    {
        return true;
    }
    
    public function changeData($inArgs)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        $busCountry = new BusinessBasicBusCountry();
        $busState = new BusinessBasicBusState();
        $busCity = new BusinessBasicBusCity();   

        // utilizar somente campos úteis.
        $args = new stdClass();
        $args->countryId = strlen($inArgs->countryId) > 0 ? $inArgs->countryId : $busState->getCountryId($inArgs->stateId);
        $args->stateId = $inArgs->stateId;
        $args->cityId = $inArgs->cityId;
        $args->changed = $inArgs->changed;
        
        // se o que mudou foi a cidade
        if ( $args->changed == 'cityId' )
        {
            
            if ( strlen($args->cityId) > 0 )
            {
                $city = $busCity->getCity($args->cityId);

                $args->stateId = $city->stateId;
                $args->countryId = $city->countryId;
            }
        }
        // se o que mudou foi o estado
        elseif ( $args->changed == 'stateId' )
        {
            // limpa todos os campos
            $args->cityId = '';
        }
        // se o que mudou foi o país
        elseif ( $args->changed == 'countryId' )
        {
            
            // limpa todos os campos
            $args->cityId = '';
            $args->stateId = '';
        }
        
        // carregar países
        $filters = new stdClass();
        $filters->name = '%';

        $countries = $busCountry->searchCountry($filters);

        // carregar estados
        $filters = new stdClass();
        $filters->countryId = $args->countryId;

        $states = $busState->searchState($filters);
        // carregar cidades
        if ( strlen($args->stateId) > 0 || count($states) == 0 )
        {
            if ( strlen($args->stateId) > 0 )
            {
                $filters->stateId = $args->stateId;
            }
            $cities = $busCity->searchCity($filters);
        }
            
            $fields = array();

            $lblCountryId = new MLabel(_M('País', $module) . ': ');
            $lblCountryId->setClass('m-caption m-caption-required');
            $lblCountryId->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $txtCountryId = new MSelection('countryId', $args->countryId, null, $countries);
            $txtCountryId->addAttribute('onchange', self::getAjaxAction('countryId'));
            $fields[] = new MHContainer('hctCountry', array($lblCountryId, $txtCountryId));
            
            $lblStateId = new MLabel(_M('Estado', $module) . ': ');
            $lblStateId->setClass('m-caption m-caption-required');
            $lblStateId->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));        
            $txtStateId = new MSelection('stateId', $args->stateId, null, $states);
            $txtStateId->addAttribute('onchange', self::getAjaxAction('stateId'));
            $fields[] = new MHContainer('hctCountry', array($lblStateId, $txtStateId));
            
            $lblCityId = new MLabel(_M('Cidade', $module) . ': ');
            $lblCityId->setClass('m-caption m-caption-required');
            $lblCityId->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $txtCityId = new MSelection('cityId', $args->cityId, null, $cities);
            $fields[] = new MHContainer('hctCountry', array($lblCityId, $txtCityId)); 
            
            return $fields;

    }
    
    public static function getAjaxAction($changed)
    {
        
        return SForm::getAjaxAction('changeData', 'response', false, array('changed' => $changed));
    }
}
