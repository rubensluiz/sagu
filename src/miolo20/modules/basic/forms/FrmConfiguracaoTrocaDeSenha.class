<?php

/**
 * <--- Copyright 2005-2012 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Nataniel Ingor da Silva [nataniel@solis.coop.br]
 *
 * @since
 * Class created on 08/04/2014
 *
 */

class FrmConfiguracaoTrocaDeSenha extends SManagementForm
{
    
    public function __construct() 
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        //parent::__construct(_M('Solicitação de alteração de senha', $module));
        
        parent::__construct(null, array('configuracaoTrocaDeSenhaId'), 'BusConfiguracaoTrocaDeSenha', _M('Solicitação de alteração de senha', $module));
        
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }
    
    public function defineFields() 
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $function = MIOLO::_request('function');
        
        if( $function == SForm::FUNCTION_INSERT )
        {
            $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        }
        
        $configuracaoTrocaDeSenhaId = MIOLO::_REQUEST('configuracaoTrocaDeSenhaId');
        
        $fields[] = new SHiddenField('configuracaoTrocaDeSenhaId', $configuracaoTrocaDeSenhaId);
        
        if( strlen($configuracaoTrocaDeSenhaId) > 0 )
        {
            $busConfiguracaoTrocaDeSenha = new BusinessBasicBusConfiguracaoTrocaDeSenha();
            $data = $busConfiguracaoTrocaDeSenha->getConfiguracaoTrocaDeSenha($configuracaoTrocaDeSenhaId);
        }
        
        $busGroup = new BusinessAdminGroup();
        $groups = $busGroup->listGroups();
                
        //Descrição
        $descricaoLabel = new MText('descricaoLabel', _M('Descrição', $module).':');
        $descricaoLabel->setClass('m-caption m-caption-required');
        $descricaoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $descricao = new MTextField('descricao', $this->getFormValue('descricao', $data->descricao), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $descricao->setJsHint(_M('Informe uma descrição para a solicitação de alteração de senha.'));
        $fields[] = $hctDescricao = new MContainer('hctDescricao', array($descricaoLabel, $descricao));
        $validators[] = new MRequiredValidator('descricao',  _M('Descrição', $module));
        
        //Data inicial
        $dataInicialLabel = new MText('dataInicialLabel', _M('Data de início', $module) . ':');
        $dataInicialLabel->setClass('m-caption m-caption-required');
        $dataInicialLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $dataInicial = new MCalendarField('dataInicial', $data->dataInicial, '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $dataInicial->setJsHint(_M('Informe a data inicial.', $module));
        $dataInicial->setIsRequired(true);
        $fields[] = new MHContainer('hctDataInicial', array( $dataInicialLabel, $dataInicial ));
        $validators[] = new MDateDMYValidator('dataInicial', _M('Data de início', $module));
        
        //Data final
        $dataFinalLabel = new MText('dataFinalLabel', _M('Data de fim', $module) . ':');
        $dataFinalLabel->setClass('m-caption m-caption');
        $dataFinalLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $dataFinal = new MCalendarField('dataFinal', $data->dataFinal, '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $dataFinal->setJsHint(_M('Informe a data final', $module));
        $fields[] = new MHContainer('hctEndDate', array( $dataFinalLabel, $dataFinal ));
        $validators[] = new MDateDMYValidator('dataFinal', _M('Data de fim', $module));
        
        //Mensagem
        $mensagemLabel = new MText('mensagemLabel', _M('Mensagem').':');
        $mensagemLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $mensagemLabel->setClass('m-caption m-caption-required');        
        $mensagem = new MEditor('mensagem', $this->getFormValue('mensagem', $data->mensagem));
        $mensagem->disableElementsPath();
        $mensagem->setWidth( SAGU::getParameter('BASIC', 'FIELD_EDITOR_SIZE') );
        $mensagem->setJsHint(_M('Informe a mensagem que será exibida na interface de alteração de senha.', $module));
        $fields[] = new MHContainer('hctMensagem', array($mensagemLabel, $mensagem));
        
        //Grupos
        $gruposLabel = new MText('mensagemLabel', _M('Grupos').':');
        $gruposLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $gruposLabel->setClass('m-caption m-caption-required');
        $grupos = new MMultiSelection('grupos',  is_array($this->getFormValue('grupos', $data->grupos)) ? $this->getFormValue('grupos', $data->grupos) : array($this->getFormValue('grupos', $data->grupos)), null, $groups, true, null, 10);
        $grupos->setAttribute('style','width:240px');
        $fields[] = new MHContainer('hctGrupos', array($gruposLabel, $grupos));
        $validators[] = new MRequiredValidator('grupos', _M('Grupos', $module), 'required');
        
        //Termos da mensagem
        $concordaComOsTermosLabel = new MText('concordarParaProsseguirLabel', _M('É necessário concordar com os termos da mensagem para prosseguir?', $module));
        $concordaComOsTermosLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $concordaComOsTermosLabel->setClass('m-caption m-caption');
        $concordaComOsTermos = new MCheckBox('concordarParaProsseguir', DB_TRUE, null, $this->getFormValue('concordarParaProsseguir', $data->concordarParaProsseguir) == DB_TRUE);
        $fields[] = new MHContainer('hctConcordaComOsTermos', array($concordaComOsTermosLabel,$concordaComOsTermos), 'horizontal');
        
        parent::defineFields($fields, $validators, $data);
        
    }
    
    public function tbBtnSave_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $function = MIOLO::_request('function');
        $main = MIOLO::getCurrentAction();
        
        $data = $this->getTypesData();
        
        try
        {   
            if ( !strlen($data->mensagem) > 0 )
            {
                throw new Exception(_M('O campo mensagem deve ser informado', $module));
            }
            
            $filters->configuracaoTrocaDeSenhaId = $data->configuracaoTrocaDeSenhaId;
            $filters->dataInicial = $data->dataInicial;
            $filters->dataFinal = $data->dataFinal;
            $busConfiguraçãoTrocaDeSenha = new BusinessBasicBusConfiguracaoTrocaDeSenha();
            $verificaPeriodo = $busConfiguraçãoTrocaDeSenha->verificaOcorrenciaDeDatas($filters);

            //Verifica se já existe uma configuração para o período de datas selecionado.
            if ( $verificaPeriodo == DB_TRUE )
            {
                $msg = _M('Não foi possível cadastrar está solicitação de alteração de senha, pois já existe uma solicitação pra esse período de datas.');
                throw new Exception($msg);
            }
            
            if ( strlen($filters->dataFinal) > 0 )
            {
                if ( SAGU::dateDiff($data->dataInicial, $filters->dataFinal) > 0 )
                {
                    $msg = _M('Não foi possível cadastrar está solicitação de alteração de senha, pois a data inicial não pode ser maior que a data final.');
                    throw new Exception($msg);
                }
            }

            if ( $function == SForm::FUNCTION_INSERT )
            {
                $ok  = $busConfiguraçãoTrocaDeSenha->insertConfiguracaoTrocaDeSenha($data);
            }
            else if ( $function == SForm::FUNCTION_UPDATE )
            {
                $ok  = $busConfiguraçãoTrocaDeSenha->updateConfiguracaoTrocaDeSenha($data);
            }

            $this->confirmInsertUpdate($ok);
            
        }
        catch ( Exception $e )
        {
            $this->addError($e->getMessage());
        }
        
        return $ok;
    }
    
    public function getTypesData()
    {
        $data->configuracaoTrocaDeSenhaId = MIOLO::_REQUEST('configuracaoTrocaDeSenhaId');
        $data->descricao = MIOLO::_REQUEST('descricao');
        $data->dataInicial = MIOLO::_REQUEST('dataInicial');
        $data->dataFinal = MIOLO::_REQUEST('dataFinal');
        $data->mensagem = MIOLO::_REQUEST('mensagem');
        $data->concordarParaProsseguir = MIOLO::_REQUEST('concordarParaProsseguir');
        
        $data->concordarParaProsseguir = !strlen($data->concordarParaProsseguir) > 0 ? 'f' : $data->concordarParaProsseguir;
        
        $data->grupos = MIOLO::_REQUEST('grupos');
        
        return $data;
    }
    
    public function tbBtnDelete_confirm() 
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $goto = $MIOLO->GetActionURL($modules, $action);
        
        try
        {
            $configuracaoTrocaDeSenhaId = MIOLO::_REQUEST('configuracaoTrocaDeSenhaId');
            
            $busConfiguracaoTrocaDeSenha = new BusinessBasicBusConfiguracaoTrocaDeSenha();
            $ok = $busConfiguracaoTrocaDeSenha->deleteConfiguracaoTrocaDeSenha($configuracaoTrocaDeSenhaId);
            
            $url = $MIOLO->getActionURL($module, $action);
            
            $MIOLO->information(_M('Registro excluído com sucesso.', $module), $url);
        }
        catch ( Exception $e )
        {
            $MIOLO->error($e->getMessage(), $goto . '&configuracaoTrocaDeSenhaId=' . $configuracaoTrocaDeSenhaId);
        }
    }
    
}

?>
