<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário para visualização do calendário acadêmico do curso
 *
 * @author Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @since
 * Class created on 22/02/2011
 */

/**
 * Formulário para visualização do calendário acadêmico do curso
 */
class FrmAcademicCalendarView extends SForm
{
    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        parent::__construct(_M('Visualização de calendário acadêmico', $module), null, null);

        // Desabilita alguns botões da toolbar
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        // Field dates
        $year = SAGU::getDatePart(SAGU::getDateNow(), 'YEAR'); // Ano atual
        $fields[] = new MCalendarField('beginDate', $this->getFormValue('beginDate', "01/01/" . $year), _M('Data inicial', $module));
        $validators[] = new MRequiredValidator('beginDate');

        // Field dates
        $fields[] = new MCalendarField('endDate', $this->getFormValue('endDate', "31/12/" . $year), _M('Data final', $module));
        $validators[] = new MRequiredValidator('endDate');

        /*
         * Course occurrence lookup
         */
        $lkpValue = array(
            $this->GetFormValue('courseId', $data->courseId),
            $this->GetFormValue('courseVersion', $data->courseVersion),
            $this->GetFormValue('turnId', $data->turnId),
            $this->GetFormValue('unitId', $data->unitId)
        );
        $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue);
        $fields[] = $courseOccurrenceLookup;

        // Separator
        $fields[] = new MSeparator();

        // Botão localizar
        $fields[] = new MButton('btnSearch', _M('Visualizar o calendário acadêmico', $module));

        // Separator
        $fields[] = new MSeparator();

        // Div onde irá aparecer o calendário
        $fields[] = new MDiv('divCalendar');

        $this->SetFields($fields);
        $this->SetValidators($validators);

        parent::defineFields();
    }

    /**
     * Monta o calendário acadêmico
     *
     * @param array $args
     */
    public function btnSearch_click($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // Pega os dados do form
        $beginDate = MIOLO::_REQUEST('beginDate');
        $endDate = MIOLO::_REQUEST('endDate');
        $opts = array();
        $opts['courseId'] = MIOLO::_REQUEST('courseId');
        $opts['courseVersion'] = MIOLO::_REQUEST('courseVersion');
        $opts['turnId'] = MIOLO::_REQUEST('turnId');
        $opts['unitId'] = MIOLO::_REQUEST('unitId');

        // Monta o calendário acadêmico
        $rows = BasReports::getCalendarEvent($beginDate, $endDate, $opts);
        $total = array();
        $calendar = new MEventCalendar('calendar', htmlentities(_M('Calendário acadêmico')));
        $calendar->setInitialDate($rows[0]->initialYearMonth);
        foreach ( (array)$rows as $row )
        {
            if ( !isset($total[$row->month]) )
            {
                $total[$row->month] = null;
            }

            if ( strlen($row->events) > 0 )
            {
                foreach ( explode("<br>", $row->events) as $event )
                {
                    $total[$row->month] ++;
                    $calendar->defineEvent($row->dateCalendar, htmlentities($event));
                }
            }
        }

        if ( array_sum($total) > 0 )
        {
            // Gera totais
            $array = array();
            $months = SAGU::listMonths();
            foreach ( (array)$months as $month => $name )
            {
                $array[] = $total[$month];
            }
            $label = _M('Total de eventos encontrados: @1', $module, array_sum($total));
            $table = new MTableRaw($label, array($array), array_values($months));
            for ( $i=0; $i < count($months); $i++ )
            {
                $table->setCellAttribute(0, $i, 'align', 'center');
            }

            $fields[] = new MSeparator();
            $fields[] = $table;
            $fields[] = new MSeparator();
            $fields[] = $calendar;
        }
        else
        {
            $this->AddError(_M('Nenhum evento encontrado para o período e curso informado.', $module));
        }

        $this->divCalendar->setInner($fields);
    }
}
?>