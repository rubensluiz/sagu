<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Document Request form
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 06/04/2011
 *
 **/
MIOLO::uses('/ui/controls/msubdetail.class');
/**
 * Form to manipulate a document request
 **/
class FrmTaskConfig extends SManagementForm
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();

        // If is the first access to form, clear subdetail session data
        if ( !$MIOLO->page->isPostBack() )
        {
            MSubDetail::clearData('taskConfigGroup');
        }

        parent::__construct(new BasTaskConfig(), array('taskConfigId'));
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        // Field Document Request Id
        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $pk = $this->getObjectPk();
            $fields[] = new MHiddenField('taskConfigId', $pk->taskConfigId);
            $fields[] = new MTextLabel('', $pk->taskConfigId, _M('Código',$module));
            $data = new BasTaskConfig($pk->taskConfigId);
        }
        else
        {
            //Chama onchange ao carregar formulario, para esconder a div de acordo com o selecionado
            $MIOLO->page->onload("checkDisplay( document.getElementById('taskResponsible_0') )");
        }

        // Campo Descrição
        $fields[] = $description= new MTextField('description', $data->description, _M('Descrição',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $description->setJsHint(_M("Informe a descrição.", $module));
        $validators[] = new MRequiredValidator('description', _M('Descrição', $module));

        if( strlen( $this->GetFormValue('idUser', $data->idUser) ) > 0 )
        {
            $busUser = new BusinessAdminBusUser();
            $user = $busUser->getUser($this->GetFormValue('idUser', $data->idUser))->login;
            
            $taskResponsibleValue =  'user';
            $viewUser = 'block';
            $viewGroup = 'none';
        }
        else
        {
            $taskResponsibleValue =  'group';
            $viewUser = 'none';
            $viewGroup = 'block';
        }
        
        //Campo Responsável pela pendência
        $taskResponsibleLabel = new MText('taskResponsibleLabel', _M('Responsável pela pendência', $module) . ':');
        $taskResponsibleLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $taskResponsibleLabel->setClass('m-caption m-caption-required');        
        $taskResponsible = new MRadioButtonGroup('taskResponsible', '', array(array( _M('Usuário', $module), 'user' ), array( _M('Grupo de usuários', $module), 'group')), $taskResponsibleValue, '', 'vertical');
        $taskResponsible->SetShowLabel(false);
        $taskResponsible->addAttribute('onchange', "checkDisplay(this)");
        $MIOLO->page->addJsCode("function checkDisplay(obj)
        {
            var checkGroup = document.getElementById('taskResponsible_1').checked;
            var checkUser = document.getElementById('taskResponsible_0').checked;

            //Oculta ou exibe div do usuario
            document.getElementById('divUser').style.display = checkUser ? 'block' : 'none';

            //Limpa os valores dos campos do usuario quando a div é oculta
            document.getElementById('user').value = checkUser ? document.getElementById('user').value : '';
            document.getElementById('idUser').value = checkUser ? document.getElementById('idUser').value : '';
            document.getElementById('userName').value = checkUser ? document.getElementById('userName').value : '';

            //Oculta ou exibe div do grupo de usuarios
            document.getElementById('divGroup').style.display = checkGroup ? 'block' : 'none';

            //Limpa os valores dos campos do grupo quando a div é oculta
            document.getElementById('idGroup').value = checkGroup ? document.getElementById('idGroup').value : '';
            document.getElementById('m_group').value = checkGroup ? document.getElementById('m_group').value : '';
        }
        ");

        $hctTaskResponsible = new MHContainer('hctAccompanimentNeeds', array($taskResponsibleLabel, $taskResponsible));
        $fields[] = $hctTaskResponsible;

        // Campo usuário
        $userLabel = new MText( 'userLabel', _M('Usuário', $module ) . ':' );
        $userLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $userLabel->setClass('m-caption m-caption-required');
        $user = new MLookupTextField( 'user', $this->getFormValue( 'user', $user ), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'idUser, limbo, userName', 'admin', 'UserByLogin', null,null, true);
        $user->setJsHint( _M('Informe o usuário que receberá pendências deste tipo.', $module ) );
        $idUser = new MHiddenField('idUser', $this->GetFormValue('idUser', $data->idUser));
        $userName = new MTextField( 'userName', $this->getFormValue( 'userName', $data->username ), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE') );
        $userName->setJsHint(_M('Informe o usuário que receberá pendências deste tipo.', $module));
        $userName->setReadOnly(true);
        $htcUser = new MHContainer('hctUser', array($userLabel, $user, $idUser, $userName));
        $divUser = new MDiv('divUser', $htcUser);
        $divUser->addBoxStyle('display', $viewUser);
        $fields[] = $divUser;

        // Visível apenas para quem está atribuida
        $visibleOnlyToAssigned = $this->getRequestValue('visibleOnlyToAssigned', $data->visibleOnlyToAssigned);
        $fields[] = new MCheckBox('visibleOnlyToAssigned', DB_TRUE, _M('Visibilidade', $module), $visibleOnlyToAssigned == DB_TRUE, _M('Visível apenas para quem está atribuida', $module));
        
        // Campo Grupo de usuários
        $groupLabel = new MText( 'groupLabel', _M('Grupo receptor', $module ) . ':' );
        $groupLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $groupLabel->setClass('m-caption m-caption-required');
        $groupId = new MLookupTextField( 'idGroup', $this->getFormValue( 'idGroup', $data->idGroup ), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'idGroup, m_group', 'admin', 'group', null, null, true );
        $groupId->setJsHint( _M('Informe o grupo de usuários que receberá pendências deste tipo.', $module ) );
        $groupDescription = new MTextField( 'm_group', $this->getFormValue( 'm_group', $data->m_group ), _M('Nome do grupo', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE') );
        $groupDescription->setJsHint(_M('Informe o grupo de usuários receberá pendências deste tipo.', $module));
        $groupDescription->setReadOnly(true);
        $hctGroup = new MHContainer( 'hctCourse', array($groupLabel, $groupId, $groupDescription) );
        $hctGroup->setShowLabel( false );
        $divGroup = new MDiv('divGroup', $hctGroup);
        $divGroup->addBoxStyle('display', $viewGroup);
        $fields[] = $divGroup;

        // Sub
        $busGroup = new BusinessAdminGroup();
        $groups = $busGroup->listAll()->result;
        $groupsAssociated = array();
        foreach ( (array) $groups as $g )
        {
            $groupsAssociated[ $g[0] ] = $g[1];
        }

        $_fields = array();
        $_fields[] = new MSelection('_idGroup', null, _M('Grupo', $module), $groups);
        $_validators[] = new MSubDetailUniqueValidator('_idGroup', _M('Grupo', $module), 'required');

        $columns = array(
            new sSubDetailColumn('_idGroup', array('label' => _M('Grupo', $module), 'replace' => $groupsAssociated)),
        );

        $fields[] = $sub = new MSubDetail('taskConfigGroup', _M('Grupos que podem originar pendências deste tipo', $module), $columns, $_fields);
        $sub->setValidators($_validators);
        if ( (count($data->taskConfigGroup) > 0) && !$MIOLO->page->isPostBack() )
        {
            $sub->setData(SAGU::convertSTypeToSubDetail($columns, $data->taskConfigGroup));
        }

        parent::defineFields($fields, $validators, $data);
    }

    public function  tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        $data = $this->getTypesData();

        if ( (strlen($data->idGroup) > 0) || (strlen($data->idUser) > 0) )
        {
            $taskConfigGroup = array();
            foreach ( (array) MSubDetail::getData('taskConfigGroup') as $row )
            {
                $taskConfigGroup[] = $obj = new BasTaskConfigGroup();
                foreach ( $row as $key => $val )
                {
                    $obj->{$key} = $val;
                }
                $obj->idGroup = $row->_idGroup;
            }

            $documentRequest = new BasTaskConfig($data->taskConfigId);
            $documentRequest->taskConfigId = $data->taskConfigId;
            $documentRequest->idUser = $data->idUser;
            $documentRequest->idGroup = $data->idGroup;
            $documentRequest->description = $data->description;
            $documentRequest->taskConfigGroup = $taskConfigGroup;
            $documentRequest->visibleOnlyToAssigned = $data->visibleOnlyToAssigned;

            $opts = array('taskConfigIdS' => $data->taskConfigId);
            if ( $documentRequest->save() )
            {
                if ( $function == 'update' )
                {
                    $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED');
                    $caption = _M('Informação', $module);
                    SAGU::information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
                }
                else
                {
                    $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED');
                    $goto = SAGU::getStackBackUrl();
                    $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                    $opts['function'] = 'insert';

                    $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                    $caption = _M('Questão',$module);
                    SAGU::question($msg, $gotoYes, $goto);
                }
            }
            else
            {
                $msg = _M('Erro executando a operação solicitada.',$module);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
                $caption = _M('Erro',$module);
                SAGU::error( $msg, $goto, $caption );
            }
        }
        else
        {
            $this->addError(_M('Verifique se o usuário ou grupo foi preenchido corretamente', $module));
        }
    }

    public function getTypesData()
    {
        $data = new stdClass();
        $data->taskConfigId = $this->getFormValue('taskConfigId');
        $data->idUser = $this->getFormValue('idUser');
        $data->idGroup = $this->getFormValue('idGroup');
        $data->description = $this->getFormValue('description');
        $data->visibleOnlyToAssigned = MUtil::NVL($this->getFormValue('visibleOnlyToAssigned'), DB_FALSE);

        return $data;
    }
}
?>
