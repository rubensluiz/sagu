<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Person document form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 05/09/2005
 *
 **/

/**
 * Form to manipulate a document type
 **/
class FrmPersonDocument extends FrmPersonSteps
{
    /**
     * Class constructor
     **/
    public function __construct($steps=null)
    {
        parent::__construct(null, $steps, __CLASS__);
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $value3Url = MIOLO::_request('value3');
        if ( strlen($value3Url) > 0 )
        {
            $fields[] = new MSeparator('');
            $lblMsg1 = new MText('lblMsg1', _M('Estes documentos já foram registrados', $module) . ': ' . '<br>' . $value3Url) ;
            $lblMsg1->color = 'red';
            $div3 = new MDiv('div3', $lblMsg1, null, 'align=center');
            $fields[] = $div3;
            $fields[] = new MSeparator('');
        }

        //carrega dados
        $stepData = $data = $this->getStepData();
        $personId = SAGU::NVL($stepData->personId, MIOLO::_REQUEST('personId'));
        
        if (strlen($personId) > 0 && !(strlen($stepData->firstAccessDocument) > 0))
        {
            $sData = new stdClass();
            $sData->personId = $personId;

            $business = new BusinessBasicBusDocument();
            $_data    = $business->searchDocument($sData);
            if ( count($_data)>0 )
            {
                foreach ( $_data as $row )
                {
                    $data->{'content'.$row[2]} = $row[4];
                    $data->{'cityId'.$row[2]} = $row[7];
                    $data->{'organ'.$row[2]} = $row[9];
                    $data->{'dateExpedition'.$row[2]} = $row[10];
                    $data->{'isDelivered'.$row[2]} = $row[5];
                    $data->{'obs'.$row[2]} = $row[6];
                }
            }

            $fields[] = new MHiddenField('firstAccessDocument', 1);
        }
        else
        {
            $data = $stepData;
        }

        if (!strlen($data->personId) > 0)
        {
            $data->personId = $personId;
        }

        if ( strlen($data->sex) <= 0 )
        {
            $data->sex = $stepData->sex;
        }

        $fields[] = new MHiddenField('personId', $personId);

        $business = new BusinessBasicBusDocumentType();
        $documentType = $business->listDocumentType();

        if ( strstr(strtolower($action), 'physical')  || strstr(strtolower($action), 'contract') )
        {
            $personType = 'P';
            $personSex = $data->sex;
        }
        elseif ( strstr(strtolower($action), 'legal') )
        {
            $personType = 'L';
        }
        else
        {
            $personType = null;
        }

        //document containers
        if ( count($documentType)>0 )
        {
            $businessDocument = new BusinessBasicBusDocument();

            foreach ( $documentType as $row )
            {
                $z++;
                list ( $documentTypeId,
                       $documentTypeName,
                       $documentTypeMask,
                       $documentTypeSex,
                       $documentTypePersonType,
                       $documentTypeMinAge,
                       $documentTypeMaxAge,
                       $documentTypeNeedDeliver,
                       $documentTypeIsBlockEnroll,
                       $documentTypeFillHint,
                       $documentTypePendenciaPortal,
                       $documentTypeLimiteDiasBloq,
                       $documentNacionality) = $row;

                //person type
                if ( strtolower($documentTypePersonType) == strtolower($personType) ||
                     strlen(trim($documentTypePersonType)) == 0 )
                {
                    $busCity = new BusinessBasicBusCity();
                    $city = $busCity->getCity($data->cityId);

                    //nacionalidade typedocument com a pessoa #37635
                    if( ($data->countryId == 'BRA' && $documentNacionality == BasDocumentType::NACIONALIDADE_BRASILEIROS) || ($data->countryId != 'BRA' && 
                        $documentNacionality == BasDocumentType::NACIONALIDADE_ESTRANGEIROS && $city->fronteirico == DB_FALSE) || ($documentNacionality == BasDocumentType::NACIONALIDADE_ESTRANGEIROS_FRONTEIRICOS &&  $city->fronteirico == DB_TRUE)  || $documentNacionality == BasDocumentType::NACIONALIDADE_TODOS
                        ) 
                    {
                        //sex
                        if ( strtolower($personType) != 'p' || ( strtolower($personType) == 'p' && ( strtolower($personSex) == strtolower($documentTypeSex) || strtolower($documentTypeSex) == NULL ) ) )
    //                             strlen(trim($documentTypeSex)) == 0 ) ) )
                        {
                            //age
                            if ( strtolower($personType) != 'p' ||
                                 ( strtolower($personType) == 'p' &&
                                   ( $businessDocument->checkMaxAge($data->personId, $documentTypeId, $data->dateBirth) && $businessDocument->checkMinAge($data->personId, $documentTypeId, $data->dateBirth) )
                                 )
                               )
                               {

                                $data2 = $businessDocument->getDocument($data->personId, $documentTypeId);
                                $flds[] = new MHiddenField('documentTypeId' . $documentTypeId,'true');

                                if ( strlen($documentTypeFillHint) > 0 )
                                {
                                    eval('$divFillHint' . $documentTypeId . ' = new MHContainer(\'divFillHint' . $documentTypeId . '\');');
                                    eval('$divFillHint' . $documentTypeId . '->addControl(new MText(\'txtFillHint' . $documentTypeId . '\', \'' . $documentTypeFillHint . '\'));');
                                    eval('$flds[] = $divFillHint' . $documentTypeId . ';');
                                }

                                $value = $data->{'content'.$documentTypeId};
                                if ( strlen($value) == 0 )
                                {
                                    $value = $data2->content;
                                }

                               # eval('$content' . $documentTypeId . ' = new MTextField(\'content' . $documentTypeId . '\', $value, \'' . _M('Conteúdo', $module) . '\', 20);');
                               # eval('$content' . $documentTypeId . '->setJsHint(\'' . _M('Informe o conteúdo do documento', $module) . '\');');
                               # eval('$flds[] = $content' . $documentTypeId . ';');

                                unset($cnt);
                                unset($cntContainer);
                                $cntLabel = new MTextLabel('cntLabel', _M('Conteúdo:', $module));
                                $cntLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                                $cntLabel->setClass('m-caption');
                                $cnt = new MTextField('content' . $documentTypeId, $value,  null, 40);
                                $cnt->setJsHint( _M('Informe o conteúdo do documento', $module) );
                                $cntContainer = new MHContainer('cntContainer', array($cntLabel, $cnt));
                                $flds[] = $cntContainer;

                                if ( $documentTypeId == SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF') )
                                {
                                    $validators[]  = new MCPFValidator('content' . $documentTypeId, _M('CPF',$module), 'optional');
                                    $cnt->addAttribute('onkeydown', "
                                        var key = event.keyCode? event.keyCode : event.charCode;
                                        if ( key == 86 )
                                        {
                                            return false;
                                        }
                                    ");
                                    $cnt->addAttribute('oncontextmenu', 'return false;');
                                }
                                else if ( strlen($documentTypeMask) > 0 )
                                {
                                    $validators[] = new MMASKValidator('content' . $documentTypeId, $documentTypeName, $documentTypeMask, 'optional');
                                }
                                $documents->content[$documentTypeId] = $value;

                                $value = $data->{'cityId'.$documentTypeId};
                                if ( strlen($value) == 0 )
                                {
                                    $value = $data2->cityId;
                                }

                                $cityLabel = new MTextLabel('cityLabel', _M('Cidade:', $module));
                                $cityLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                                $cityLabel->setClass('m-caption');
                                eval('$cityId' . $documentTypeId . ' = new MLookupTextField(\'cityId' . $documentTypeId . '\', $value, \'' . null . '\', 8, null, null, \'cityName' . $documentTypeId . '\', $module, \'City\', null, null, true);');
                                eval('$cityId' . $documentTypeId . '->setJsHint(\'' . _M('Informe o código da cidade do documento', $module) . '\');');
                                $documents->cityId[$documentTypeId] = $value;
                                $validators[] = new MIntegerValidator('cityId' . $documentTypeId, '', 'optional');

                                eval('$cityName' . $documentTypeId . ' = new MTextField(\'cityName' . $documentTypeId . '\', $this->getFormValue(\'cityName' . $documentTypeId . '\', $data2->cityName), null, 20);');
                                eval('$cityName' . $documentTypeId . '->setReadOnly(true);');

                                eval('$hctCity' . $documentTypeId . ' = new MHContainer(\'hctCity' . $documentTypeId . '\',array($cityLabel, $cityId' . $documentTypeId . ', $cityName' . $documentTypeId . '));');
                                eval('$hctCity' . $documentTypeId . '->showLabel = true;');
                                eval('$flds[] = $hctCity' . $documentTypeId . ';');

                                $value = $data->{'organ'.$documentTypeId};
                                if ( strlen($value) == 0 )
                                {
                                    $value = $data2->organ;
                                }                            
                                $organLabel = new MTextLabel('organLabel', _M('Órgão:', $module));
                                $organLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                                $organLabel->setClass('m-caption');
                                eval('$organ' . $documentTypeId . ' = new MTextField(\'organ' . $documentTypeId . '\', $value, \'' . null . '\', 10);');
                                eval('$organ' . $documentTypeId . '->setJsHint(\'' . _M('Informe o órgão do documento', $module) . '\');');
                                $documents->organ[$documentTypeId] = $value;
                                eval('$organContainer = new MHContainer(\'organContainer\', array($organLabel, $organ' . $documentTypeId . '));');                            
                                eval('$flds[] = $organContainer;');

                                $value = $data->{'dateExpedition'.$documentTypeId};
                                if ( strlen($value) == 0 )
                                {
                                    $value = $data2->dateExpedition;
                                }
                                $dateExpeditionLabel = new MTextLabel('dateExpeditionLabel', _M('Expedição:', $module));                            
                                $dateExpeditionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                                $dateExpeditionLabel->setClass('m-caption');
                                eval('$dateExpedition' . $documentTypeId . ' = new MTextField(\'dateExpedition' . $documentTypeId . '\', $value, \'' . null . '\', 10);');
                                eval('$dateExpedition' . $documentTypeId . '->setJsHint(\'' . _M('Informe a data de expedição do documento', $module) . '\');');
                                $validators[] = new MDateDMYValidator('dateExpedition' . $documentTypeId, '', 'optional');
                                $documents->dateExpedition[$documentTypeId] = $value;

                                eval('$hctExpedition' . $documentTypeId . ' = new MHContainer(\'hctExpedition' . $documentTypeId . '\',array($dateExpeditionLabel, $dateExpedition' . $documentTypeId . '));');
                                eval('$flds[] = $hctExpedition' . $documentTypeId . ';');

                                $value = SAGU::NVL( MIOLO::_REQUEST('isDelivered' . $documentTypeId) , $data->{'isDelivered'.$documentTypeId} );
                                if ( strlen($value) == 0 )
                                {
                                    $value = $data2->isDelivered;
                                }
                                $value = $value ? $value : DB_FALSE;                            
                                $isDeliveredLabel = new MTextLabel('isDeliveredLabel', _M('Foi entregue:',$module));
                                $isDeliveredLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                                $isDeliveredLabel->setClass('m-caption');
                                eval('$isDelivered' . $documentTypeId . ' = new MSelection(\'isDelivered' . $documentTypeId . '\', $value, \'' . null . '\', array(\'t\' => \'' . _M('Sim', $module) . '\',\'f\' => \'' . _M('Não', $module) . '\'));');
                                $documents->isDelivered[$documentTypeId] = $value;
                                $varIsDelivered = '$isDelivered' . $documentTypeId;
                                $validators[] = new MRequiredValidator('isDelivered'. $documentTypeId);
                                eval('$isDeliveredContainer = new MHContainer(\'isDeliveredContainer\', array($isDeliveredLabel, $isDelivered' . $documentTypeId . '));');                            
                                eval('$flds[] = $isDeliveredContainer;');

                                $value = SAGU::NVL( MIOLO::_REQUEST('isExcused' . $documentTypeId), $data->{'isExcused'.$documentTypeId} );
                                if ( strlen($value) == 0 )
                                {
                                    $value = $data2->isExcused;
                                }
                                $value = $value ? $value : DB_FALSE;                            
                                $isExcusedLabel = new MTextLabel('isExcusedLabel', _M('É dispensado:',$module));
                                $isExcusedLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                                $isExcusedLabel->setClass('m-caption');
                                eval('$isExcused' . $documentTypeId . ' = new MSelection(\'isExcused' . $documentTypeId . '\', $value, \'' . null . '\', array(\'t\' => \'' . _M('Sim', $module) . '\',\'f\' => \'' . _M('Não', $module) . '\'));');
                                $documents->isExcused[$documentTypeId] = $value;
                                $validators[] = new MRequiredValidator('isExcused' . $documentTypeId);
                                eval('$isExcusedContainer = new MHContainer(\'isExcusedContainer\', array($isExcusedLabel, $isExcused' . $documentTypeId . '));');                            
                                eval('$flds[] = $isExcusedContainer;');

                                $value = $data->{'obs'.$documentTypeId};
                                if ( strlen($value) == 0 )
                                {
                                    $value = $data2->obs;
                                }

                                $obsLabel = new MTextLabel('obsLabel', _M('Obs:', $module));
                                $obsLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                                $obsLabel->setClass('m-caption');
                                eval('$obs' . $documentTypeId . '= new MMultiLineField(\'obs' . $documentTypeId . '\', $value, \'' . null . '\', 20, 3, 35);');
                                eval('$obs' . $documentTypeId . '->setJsHint(\'' . _M('Se necessário, preencha com alguma observação importante', $module) . '\');');
                                eval('$obsContainer = new MHContainer(\'obsContainer\', array($obsLabel, $obs' . $documentTypeId . '));');
                                eval('$flds[] = $obsContainer;');
                                $documents->obs[$documentTypeId] = $value;

                                eval('$bsg' . $documentTypeId . ' = new BaseGroup(\'bsg' . $documentTypeId . '\', \'' . _M('Documento', $module) . ': ' . $documentTypeName . '\', $flds, \'vertical\');');
                                eval('$bsg' . $documentTypeId . '->showLabel = true;');
                                eval('$bsg' . $documentTypeId . '->width = \'48%\';');

                                $arrayDocuments[] = $documentTypeId;
                                unset($flds);
                            }
                        }
                    }
                }
            }//foreach

            //show document containers
            $x = 1;
            $y = 0;

            if ( count($arrayDocuments)>0 )
            {
                foreach ( $arrayDocuments as $documentTypeId )
                {
                    if ( ($x % 2) == 0 )
                    {
                        eval('$hct' . $y . ' = new MHContainer(\'hct\',array($bsg' . $documentTypeIdOld . ', $bsg' .  $documentTypeId . '));');
                        eval('$hct' . $y . '->showLabel = true;');
                        eval('$fields[] = $hct' . $y . ';');
                        $y++;
                    }
                    else
                    {
                        $documentTypeIdOld = $documentTypeId;
                        if ( count($arrayDocuments) == $x )
                        {
                            eval('$hct' . $y . ' = new MHContainer(\'hct\',array($bsg' . $documentTypeIdOld . '));');
                            eval('$hct' . $y . '->showLabel = true;');
                            eval('$fields[] = $hct' . $y . ';');
                        }
                    }
                    $x++;
                }
            }
            else
            {
                if ( $function == 'insert' )
                {
                    $textMsg = new MText('txtMsg', _M('Não há documentos a inserir para esta pessoa.',$module));
                }
                else
                {
                    $textMsg = new MText('txtMsg', _M('Não há documentos a atualizar para esta pessoa.',$module));
                }
                $textMsg->color = 'blue';
                $divInfo = new MDiv('divInfo', $textMsg, null, 'align=center');
                $fields[] = $divInfo;
            }
        }
        //end Containers

        $fields[] = new MSeparator();
        $div1 = new MDiv('div1', $btn1, null, 'align=center');
        $fields[] = $div1;

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
    }

    public function nextStepButton_click($sender)
    {
        $data = $this->getData();
                
        $this->validaDocumento();
        
        if ($this->fieldsOk($data))
        {
            parent::nextStepButton_click();
        }
    }

    /**
     * Event triggered when user click save
     **/
    public function finalizeButton_click($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        $this->validaDocumento();
        
        $ok = parent::finalizeButton_click($args);
        
        $data->personId = $this->_personId;
        
        $busDadosBancariosDaPessoa = new BusinessFinanceBusDadosBancariosDaPessoa();
        $dados = $busDadosBancariosDaPessoa->getDadosBancariosDaPessoa($data);
        
        $data->agencia = MIOLO::_REQUEST('agencia');
        $data->digitoDaAgencia = MIOLO::_REQUEST('digitoAgencia');
        $data->conta = MIOLO::_REQUEST('conta');
        $data->digitoDaConta = MIOLO::_REQUEST('digitoConta');
        $data->bankId = MIOLO::_REQUEST('dadosBancario');
        $data->observacao = MIOLO::_REQUEST('observacao');
        
        
        if( strlen($dados->personId) > 0 )
        {
            $busDadosBancariosDaPessoa->updateDadosBancariosDaPessoa($data);
        }
        else
        {
            $busDadosBancariosDaPessoa->insertDadosBancariosDaPessoa($data);
        }

        $_SESSION['agencia'] = null;
        $_SESSION['digitoAgencia'] = null;
        $_SESSION['conta'] = null;
        $_SESSION['digitoConta'] = null;
        $_SESSION['dadosBancario'] = null;
        $_SESSION['observacao'] = null;
        
        if ( $ok )
        {
            $opts = array('personIdS' => $this->_personId);
            if ( $function == 'update' )
            {
                $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED');
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                $gotoYes = $MIOLO->getActionURL($module, $action, null, array('function'=>'insert'));
                $gotoNo = $MIOLO->getActionURL($module, $action, null, $opts);

                $msg = _M('Pessoa @1 inserida. Deseja inserir mais pessoas?', $module, $this->_personId);
                $MIOLO->question($msg, $gotoYes, $gotoNo);
            }
        }
        elseif (!$this->HasErrors())
        {
            $this->AddError( _M('Erro executando a operação solicitada.', $module) );
        }
    }

    
    public function saveData($data = null)
    {        
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data = $this->parseData($data);
        
        if (!$this->fieldsOk($data))
        {
            return false;
        }
        
        $busDocument = new BusinessBasicBusDocument();
        
        //Busca os documentos cadastrados
        $filter->personId = $data->personId;
        $documentos = $busDocument->searchDocument($filter);        
        
        $ok = true;
        $documents = $this->getDocuments($data);
        
        try
        {
            if (count($documents) > 0)
            {
                foreach ($documents as $document)
                {   
                    //Faz interação com os documentos já cadastrados, caso algum dos documentos já cadastrados não vier por 
                    //post do formulário assume que o content do documento foi editado para vazio e exluí o registro.
                    foreach($documentos as $doc)
                    {
                        if($document->content == '' && $document->documentTypeId == $doc[2]);
                        {
                            $busDocument->deleteDocument($document->personId, $document->documentTypeId);
                        }
                    }

                    $ok = $busDocument->insertOrUpdateDocument($document);

                    if ( !$ok )
                    {
                        break(1);
                    }
                }
            }
        }
        catch ( Exception $e )
        {
            throw new Exception( $e->getMessage() );
        }
        
        return $ok;
    }
    
    public function getTypesData()
    {
        $data = parent::getTypesData();
        $data->documents = $this->getDocuments($data);
        
        return $data;
    }

    public function getDocuments($data = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        if (!$data)
        {
            $data = $this->getData();
        }

        $busDocument = new BusinessBasicBusDocument();
        $busDocumentType = new BusinessBasicBusDocumentType();
        
        //Prepare documents
        $listDocumentType = $busDocumentType->listDocumentType();
        foreach ($listDocumentType as $d)
        {
            $documentTypes[] = $d[0];
        }

        $documents = array();
        foreach ( $documentTypes as $documentTypeId )
        {
            if ( $documentTypeId == SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF') )
            {
                $varName = 'content' . SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF');
                $contentCPF = $data->$varName;
                $content = $contentCPF;
            }
            else
            {
                $content = $data->{'content'.$documentTypeId};
            }

            $document = new stdClass();
            $document->personId = $data->personId;
            $document->documentTypeId = $documentTypeId;
            $document->isDelivered = $data->{'isDelivered'.$documentTypeId};
            $document->obs = $data->{'obs'.$documentTypeId};
            $document->cityId = $data->{'cityId'.$documentTypeId};
            $document->organ = $data->{'organ'.$documentTypeId};
            $document->dateExpedition = $data->{'dateExpedition'.$documentTypeId};
            $document->isExcused = $data->{'isExcused'.$documentTypeId};
            $document->content = $content;
            if (!$document->isDelivered)
            {
                $document->isDelivered = DB_FALSE;
            }
            if (!$document->isExcused)
            {
                $document->isExcused = DB_FALSE;
            }
            $documents[] = $document;
        }
           
        return $documents;
    }

    /**
     * Method to check the contents of all filled fields
     **/
    public function fieldsOk($data = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        if (!$data)
        {
            $data = $this->getData();
        }
        
        //Validate documents
        $busDocument = new BusinessBasicBusDocument();
        $busDocumentType = new BusinessBasicBusDocumentType();
        $busCity = new BusinessBasicBusCity();

        $documentRegistered = array();
        $documents = $this->getDocuments($data);
        if (count($documents) > 0)
        {
            foreach ($documents as $document)
            {
                if (strlen($document->cityId) > 0)
                {
                    $city = $busCity->getCity($document->cityId);
                    if ( is_null($city->cityId) )
                    {
                        $documentType = $busDocumentType->getDocumentType($document->documentTypeId);
                        $this->addError(_M('O código @1 informado para o documento @2 não existe.', $module, _M('cidade', $module), $documentType->name));
                    }
                }

                unset($searchRegisteredDocument);
                if ( (strlen($document->content) > 0) && (strlen($document->documentTypeId) > 0) && (($document->documentTypeId == SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_RG'))||($document->documentTypeId==SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF'))) )
                {
                    $filters = new stdClass();
                    $filters->content = $document->content;
                    $filters->documentTypeId = $document->documentTypeId;
                    $filters->nonPersonId = $data->personId;

                    $searchRegisteredDocument = $busDocument->searchDocument($filters);
                }

                if ( count($searchRegisteredDocument) > 0 ) //Ja tem cadastrado este documento
                {
                    $documentRegistered[] = $document->documentTypeId;
                }
            }
            
            if (count($documentRegistered) > 0)
            {
                foreach($documentRegistered as $key1 => $value1)
                {
                    $value2 = $busDocumentType->getDocumentType($value1);
                    $value3 .= $value2->name . ', ';
                }

                $value3 = substr($value3, 0, strlen($value3)-2);
                $this->addError(_M('Este documento já está registrado', $module) . ': ' . $value3);
            }
        }

        return ($this->hasErrors() == 0);
    }
    
    /*
     * Verifica se o documento foi marcado como entregue e se foi preenchido o conteúdo.
     */
    public function validaDocumento()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $documentos = $this->getTypesData();  
        $idade = SAGU::obterIdade(MIOLO::_REQUEST('dateBirth'));
        $busDocumentType = new BusinessBasicBusDocumentType();
        foreach( $documentos as $key => $documento )
        {
            if( $key == 'documents' )
            {
                for( $i =0; $i < count($documento); $i++ )
                {
                    $nameDocument = $busDocumentType->getDocumentType($documento[$i]->documentTypeId);
                    
                    //Valida idade em relacao a checagem máxima e mínima, senao nem faz verificacao
                    if ( $idade > $nameDocument->minAge || $idade < $nameDocument->maxAge || (is_null($nameDocument->maxAge) && is_null($nameDocument->minAge)) )
                    {
                        $isDelivered = MIOLO::_REQUEST("isDelivered{$nameDocument->documentTypeId}");
                        $content = MIOLO::_REQUEST("content{$nameDocument->documentTypeId}");
                        
                        if ( $isDelivered == DB_TRUE && ( $content == '' || $content == null ) && $nameDocument->exigePreenchimento == DB_TRUE )
                        {
                            $docs .= $nameDocument->name.', ';
                        }
                    
                        if ( $nameDocument->needDeliver == DB_TRUE && $isDelivered == DB_FALSE && $content !== null)
                        {
                            $nameDocs .= $nameDocument->name.', ';
                        }
                    }
                }
            }
        }
        
        strlen($nameDocs) > 0 ? $msg .= "O(s) documento(s) {$nameDocs} devem ser informados. <br><br>" : null;
        
        strlen($docs) > 0 ?$msg .= "O(s) documento(s) {$docs} foram marcados como entregues porém não possuem conteúdo. "
                                 . "Deve ser informado obrigatoriamente o conteúdo se o documento está entregue." : null;
        
        return strlen($docs) > 0 || strlen($nameDocs) > 0 ?  $this->addError($msg) : null ;
    }
}
