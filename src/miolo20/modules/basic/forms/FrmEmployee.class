<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Employee form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 12/09/2005
 *
 **/
$MIOLO->uses('ui/controls/msubdetailvalidators.class');
$MIOLO->uses('/ui/controls/msubdetail.class');

class FrmEmployee extends SStepByStepForm
{
    private $business;
    private $busObject;

    /**
     * Class constructor
     **/
    public function __construct($steps)
    {
        parent::__construct(_M('Funcionário'), $steps, __CLASS__, null, array('employeeId'));
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $function = MIOLO::_REQUEST('function');
        $event    = MIOLO::_REQUEST('event');
                    
        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $busEmployee = new BusinessBasicBusEmployee();
            
            $data->employeeId = MIOLO::_REQUEST('employeeId');
            $fields[] = new MHiddenField('employeeId', $data->employeeId);

            $data = $busEmployee->getEmployee($data->employeeId);
            
            $count = 0;
            if ( $this->isFirstAccess() && $count == 0 )
            {
                $count++;
                MSubDetail::clearData('historico');
                
                $filters = new stdClass();
                $filters->personId = $data->personId;

                $basHistorico = new BasHistoricoFuncional();
                $dataHist     = $basHistorico->searchGrid($filters, true);
            }
            else 
            {
                $dataHist = MSubDetail::getData('historico');
            }
        }
        else
        {
            $dataHist = null;
        }
                
        $data = MIOLO::_REQUEST('step') ? $this->getStepData() : $data;
        
        $personLabel = new MText('personLabel', _M('Pessoa', $module) . ':');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personLabel->setClass('m-caption m-caption-required');

        $personId = new MLookupTextField('personId', $this->getFormValue('personId', $data->personId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'personName', 'basic', 'PhysicalPerson', null, null, true);
        $personId->setJsHint(_M('Informe o código da pessoa', $module));
        $validators[] = new MIntegerValidator('personId', _M('Código da pessoa', $module), 'required');

        $personName = new MTextField('personName', $this->getFormValue('personName', $data->personName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setJsHint(_M('Nome da pessoa', $module));
        $personName->setReadOnly(true);

        $hctPerson = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
        $hctPerson->setShowLabel(true);
        $fields[] = $hctPerson;

        $sectorLabel = new MText('sectorLabel', _M('Setor', $module) . ':');
        $sectorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $sectorLabel->setClass('m-caption m-caption-required');
        
        $sectorId = new MLookupTextField('sectorId', $this->getFormValue('sectorId', $data->sectorId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'sectorName', 'basic', 'Sector', null, null, true);
        $sectorId->setJsHint(_M('Informe o código do setor', $module));
        $validators[] = new MIntegerValidator('sectorId', _M('Setor', $module), 'required');

        $sectorName = new MTextField('sectorName', $this->getFormValue('sectorName', $data->sectorName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $sectorName->setJsHint(_M('Nome do setor', $module));
        $sectorName->setReadOnly(true);

        $hctSector = new MHContainer('hctSector', array($sectorLabel, $sectorId, $sectorName));
        $hctSector->setShowLabel(true);
        $fields[] = $hctSector;

        $externalId = new MTextField('externalId_certo', $this->getFormValue('externalId_certo', $data->externalId), _M('Código externo', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $externalId->setJsHint(_M('Informe o código externo', $module));
        $fields[] = $externalId;
        $validators[] = new MIntegerValidator('externalId_certo', _M('Código externo', $module), 'optional');

        $salary = new MTextField('salary', $this->getFormValue('salary', $data->salary), _M('Salário', $module), 10, _M('Ex.: 1.00', $module));
        $salary->setJsHint(_M('Informe o salário', $module));
        $validators[] = new MFloatValidator('salary', _M('Salário', $module), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'));
        $fields[] = $salary;

        $isValueHourLabel = new MText('isValueHourLabel', _M('Seu salário é equivalente ao valor hora?', $module));
        $isValueHourLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $valueHour = $this->GetFormValue('valueHour', $data->valueHour);
        $valueHour = new MRadioButtonGroup('valueHour', '', SAGU::listYesNo(1), $valueHour, null, 'horizontal');
        $valueHour->SetShowLabel(false);
        $hctValueHour = new MHContainer('hctIsActiveAccount', array($isValueHourLabel, $valueHour));
        $fields[] = $hctValueHour;

        $weeklyhours = new MTextField('weeklyhours', $this->getFormValue('weeklyhours', $data->weeklyhours), _M('Horas semanais', $module), 10);
        $weeklyhours->setJsHint(_M('Informe a quantidade de horas semanais', $module));
        $fields[] = $weeklyhours;
        $validators[] = new MFloatValidator('weeklyhours', '', SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), 'required');

        $beginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), _M('Data inicial', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $beginDate->setJsHint(_M('Informe a data inicial', $module));
        $validators[] = new MDateDMYValidator('beginDate', '', 'optional');
        $beginDate->setJsHint(_M('Informe a data inicial', $module));
        $fields[] = $beginDate;

        if ( in_array($function, array(SForm::FUNCTION_UPDATE)) )
        {
            $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), _M('Data final', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
            $validators[] = new MDateDMYValidator('endDate', '', 'optional');
            $endDate->setJsHint(_M('Informe a data inicial', $module));
            $fields[] = $endDate;
        }

        $busEmployeeType = new BusinessBasicBusEmployeeType();
        $employeeTypeId = new MSelection('employeeTypeId', $this->getFormValue('employeeTypeId', $data->employeeTypeId), _M('Tipo de funcionário', $module), $busEmployeeType->listEmployeeType());
        $employeeTypeId->setJsHint(_M('Informe o código do tipo de funcionário', $module));
        $fields[] = $employeeTypeId;
        $validators[] = new MRequiredValidator('employeeTypeId');
        
        $bankLabel = new MText('bankLabel', _M('Banco', $module) . ':');
        $bankLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $bankId = new MLookupTextField('bankId', $this->getFormValue('bankId', $data->bankId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'bankDescription', 'finance', 'Bank', null, null, true);
        $bankId->setJsHint(_M('Informe o código do banco', $module));
        $validators[] = new MIntegerValidator('bankId', '', 'requered');
        $bankDescription = new MTextField('bankDescription', $this->getFormValue('bankDescription', $data->bankDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $bankDescription->setJsHint(_M('Nome do banco', $module));
        $bankDescription->setReadOnly(true);
        $hctBankDescription = new MHContainer('hctBankDescription', array($bankLabel, $bankId, $bankDescription));
        $hctBankDescription->setShowLabel(true);
        $fields[] = $hctBankDescription;

        $branchNumberLabel = new MText('sectorLabel', _M('Número da agência', $module) . ':');
        $branchNumberLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        $branchNumber = new MTextField('branchNumber', $this->getFormValue('branchNumber', $data->branchNumber), '', 10);
        $branchNumber->setJsHint(_M('Informe o número do código da agência', $module));
        $validators[] = new MRangeValidator('branchNumber', _M('Número da agência', $module), '0', '9999', 'i');

        $branchNumberDigit = new MTextField('branchNumberDigit', $this->getFormValue('branchNumberDigit', $data->branchNumberDigit), '', 3);
        $branchNumberDigit->setJsHint(_M('Informe o número do dígito da agência', $module));
        $hctbranchNumberDigit = new MHContainer('hctbranchNumberDigit', array($branchNumberLabel, $branchNumber, $branchNumberDigit));
        $hctbranchNumberDigit->setShowLabel(true);
        $fields[] = $hctbranchNumberDigit;

        $accountLabel = new MText('accountLabel', _M('Número da conta', $module) . ':');
        $accountLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $accountNumber = new MTextField('accountNumber', $this->getFormValue('accountNumber', $data->accountNumber), '', 10);
        $accountNumber->setJsHint(_M('Informe o número da conta', $module));
        $validators[] = new MRangeValidator('accountNumber', _M('Número da conta', $module), '1', '9999999999999', 'i');

        $accountNumberDigit = new MTextField('accountNumberDigit', $this->getFormValue('accountNumberDigit', $data->accountNumberDigit), '', 3);
        $accountNumberDigit->setJsHint(_M('Informe o dígito verificador da conta', $module));
        $validators[] = new MRangeValidator('accountNumberDigit', '', 0, 99, 'i');
        $hctaccountNumber = new MHContainer('hctaccountNumber', array($accountLabel, $accountNumber, $accountNumberDigit));
        $hctaccountNumber->setShowLabel(true);
        $fields[] = $hctaccountNumber;

        $isActiveAccountLabel = new MText('isActiveAccount', _M('É uma conta ativa', $module) . '?');
        $isActiveAccountLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));

        if ( !strlen($data->isActiveAccount) > 0 )
        {
            $data->isActiveAccount = DB_FALSE;
        }

        $isActiveAccount = $this->getFormValue('isActiveAccount', $data->isActiveAccount);
        $isActiveAccount = new MRadioButtonGroup('isActiveAccount', '', SAGU::listYesNo(1), $isActiveAccount, null, 'horizontal');
        $isActiveAccount->setShowLabel(false);
        $hctIsActiveAccount = new MHContainer('hctIsActiveAccount', array($isActiveAccountLabel, $isActiveAccount));
        $fields[] = $hctIsActiveAccount;

        $accountType = new MSelection('accountType', $this->getFormValue('accountType', $data->accountType), _M('Tipo de conta', $module), SAGU::listAccountTypes());
        $accountType->setJsHint(_M('Informe o tipo de conta', $module));
        $fields[] = $accountType;

        $clearingHouse = new MIntegerField('clearingHouse', $this->getFormValue('clearingHouse', $data->clearingHouse), _M('Câmera de compensação', $module), 10);
        $clearingHouse->setJsHint(_M('Informe a câmera de compensação', $module));
        $validators[] = new MRequiredValidator('claeringHouse');
        $fields[] = $clearingHouse;                
        
        $especialidade = new MTextField('especialidade', $this->getFormValue('especialidade', $data->especialidade), _M("Especialidade", $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $especialidade->setJsHint(_M('Informe a especialidade', $module));
        $fields[] = $especialidade;
        
        $classe = new MTextField('classe', $this->getFormValue('classe', $data->classe), _M("Classe", $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $classe->setJsHint(_M('Ex.: A, B, C, D, E ou F. Classe é o agrupamento de cargos da mesma denominação, com iguais atribuições, responsabilidades e variação de vencimentos de acordo com os níveis que compreende.', $module));
        $fields[] = $classe;
        
        $nivel = new MTextField('nivel', $this->getFormValue('nivel', $data->nivel), _M("Nível", $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $nivel->setJsHint(_M('Ex.: 1, 2, 3, etc. Nível é a subdivisão interna das classes ao qual se atribui vencimentos próprios fixados em lei.', $module));
        $fields[] = $nivel;        
        
        $business = new BusinessBasicBusUnit();
        $opts =  $business->listUnit();
        $unitId = new MComboBox('unitId', $this->getFormValue('unitId', $data->unitId), _M('Unidade', $module), $opts);
        $unitId->setJsHint(_M('Selecione uma unidade', $module));
        $fields[] = $unitId;
        
        // Subdetail historico funcional       
        $historicoFuncionalId = new SHiddenField('historicoFuncionalId', null);
        $flds[] = $historicoFuncionalId;
                
        $ordinance = new MTextField('ordinance', null, _M('Portaria', $module), 34);        
        $ordinance->setJshint(_M('Informe a portaria', $module));
        $flds[] = $ordinance;
                
        $date = new MCalendarField('date', null, _M('Data', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $date->setJshint(_M('Informe a data do histórico', $module));
        $date->setClass('m-caption-required');
        $flds[] = $date;
        $valids[] = new MDATEDMYValidator('date');
        $valids[] = new MRequiredValidator('date', _M('Data', $module));
                
        $subject = new MMultiLineField('subject', null, _M('Assunto', $module), 40, 3, 30);
        $subject->setJsHint(_M('Informe o assunto do histórico', $module));
        $subject->setClass('m-caption-required');
        $flds[] = $subject;
        $valids[] = new MRequiredValidator('subject', _M('Assunto', $module));
                
        $startDate = new MCalendarField('startDate', null, _M('Data inicial', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $startDate->setJshint(_M('Informe a data de início', $module));
        $startDate->setClass('m-caption-required');
        $flds[] = $startDate;        
        $valids[] = new MDATEDMYValidator('startDate');
        $valids[] = new MRequiredValidator('startDate', _M('Data inicial', $module));
                
        $endDate = new MCalendarField('endDateSub', null, _M('Data final', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $endDate->setJshint(_M('Informe a data final', $module));
        $flds[] = $endDate;
        $valids[] = new MDATEDMYValidator('endDateSub');
                
        $historical = new MMultiLineField('historical', null, _M('Histórico', $module), 40, 5, 30);
        $historical->setJsHint(_M('Informe histórico', $module));
        $historical->setClass('m-caption-required');
        $flds[] = $historical;
        $valids[] = new MRequiredValidator('historical', _M('Histórico', $module));
        
        $cols[] = new MGridColumn(_M('Código do histórico', $module), 'left', true, '', false, 'historicoFuncionalId');
        $cols[] = new MGridColumn(_M('Portaria', $module), 'left', true, '', true, 'ordinance');
        $cols[] = new MGridColumn(_M('Data', $module), 'right', true, '', true, 'date');
        $cols[] = new MGridColumn(_M('Assunto', $module), 'left', true, '', true, 'subject');
        $cols[] = new MGridColumn(_M('Data inicial', $module), 'right', true, '', true, 'startDate');
        $cols[] = new MGridColumn(_M('Data final', $module), 'right', true, '', true, 'endDateSub');
        $cols[] = new MGridColumn(_M('Histórcio', $module), 'left', true, '', true, 'historical');
        
        $fields[] = $sub = new MSubDetail('historico', _M('Histórico funcional', $module), $cols, $flds, true);
        $sub->setValidators($valids);
                        
        if ( $dataHist )
        {
            $sub->setData($dataHist);
        }
        else if ( $event == 'tbBtnNew:click' )
        {
            $sub->clearData();
        }
        
        $this->setFields($fields);
        $this->SetValidators($validators);
        
        //parent::defineFields($fields, $validators, $data);
    }
    
    public function tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $function = MIOLO::_REQUEST('function');

        $data = $this->getTypesData();
        
        $busEmployee = new BusinessBasicBusEmployee();
        
        try
        {
            if($function == SForm::FUNCTION_UPDATE)
            {
                $ok = $busEmployee->updateEmployee($data);
                
                $msg = _M("Dados atualizados com sucesso.", $module);
            }
            else
            {
                $ok = $busEmployee->insertEmployee($data);
                $msg = _M("Dados inseridos com sucesso.", $module);
            }      
            
            if ( $ok )
            { 
                if ( MSubDetail::getData('historico') != null )
                {
                    foreach ( MSubDetail::getData('historico') as $value )
                    {                        
                        $historico = new BasHistoricoFuncional();

                        $historico->historicoFuncionalId = $value->historicoFuncionalId;

                        $historico->personId   = $data->personId;
                        $historico->portaria   = $value->ordinance;
                        $historico->data       = $value->date;
                        $historico->assunto    = $value->subject;
                        $historico->inicio     = $value->startDate;
                        $historico->fim        = $value->endDateSub;
                        $historico->observacao = $value->historical;

                        if ( $value->removeData )
                        {
                            $historico->delete();
                        }
                        else
                        {
                            $historico->save();
                        }                
                    }
                }  
            }
            
            $this->savaCamposCustomizados();
            
            SAGU::information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
        }
        catch ( Exception $e )
        {
            $this->addError($e->getMessage());
        }

    }
    
    public function tbBtnDelete_confirm($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $employeeId = MIOLO::_REQUEST('employeeId');
        
        $this->business = 'BusEmployee';
        $this->busObject = new BusinessBasicBusEmployee();
        
        $this->defaultDisabledButtonsToolbar();
        try
        {
            SDatabase::beginTransaction();
            
            foreach ( $this->pkey as $key )
            {
                $id[] = MIOLO::_REQUEST($key);
            }
            
            if ( MSubDetail::getData('historico') != null )
            {
                foreach ( MSubDetail::getData('historico') as $value )
                {
                    $basHistorico = new BasHistoricoFuncional();   
                                        
                    $basHistorico->historicoFuncionalId = $value->historicoFuncionalId;
                    $basHistorico->delete();
                }
            }
            
            $delete = str_replace('Bus', 'delete', $this->business);
            $ok = $this->busObject->$delete($id);

            //tenta deletar o conteúdo customizado
            if ( $ok && ( count( $this->mioloCustomFields ) > 0 ) )
            {                
                $ok = $this->deleteCustomFieldValues(MIOLO::_REQUEST($this->pkey[0]));
            }
            
            if ( $ok )
            {                
                SDatabase::commit();
                
                $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_DELETED');
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
                $caption = _M('Informação', $module);
                SAGU::information($msg, $goto);
            }
            else
            {
                SDatabase::rollback();
                
                $msg = _M('Erro executando a operação solicitada.', $module);
                $errors = $this->busObject->getErrors();
                for ( $i=0; $i<count($errors); $i++ )
                {
                    $msg .= '<br />' . $errors[$i];
                }
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
                $caption = _M('Erro', $module);
                SAGU::error($msg, $goto, $caption);
            }
        }
        catch( Exception $e )
        {
            SDatabase::rollback();
            
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
            $msg = _M('Existem pendências que impossibilitam a exclusão do item selecionado.');
            $MIOLO->error($msg, $goto);
        }
    }
    
    public function getTypesData()
    {
        $data->personId = MIOLO::_REQUEST('personId');
        $data->externalId = MIOLO::_REQUEST('externalId_certo');
        $data->sectorId = MIOLO::_REQUEST('sectorId');
        $data->salary = MIOLO::_REQUEST('salary');
        $data->valueHour = MIOLO::_REQUEST('valueHour');
        $data->weeklyhours = MIOLO::_REQUEST('weeklyhours');
        $data->beginDate = MIOLO::_REQUEST('beginDate');
        $data->endDate = MIOLO::_REQUEST('endDate');
        $data->employeeTypeId = MIOLO::_REQUEST('employeeTypeId');
        $data->bankId = MIOLO::_REQUEST('bankId');
        $data->branchNumber = MIOLO::_REQUEST('branchNumber');
        $data->branchNumberDigit = MIOLO::_REQUEST('branchNumberDigit');
        $data->accountNumber = MIOLO::_REQUEST('accountNumber');
        $data->accountNumberDigit = MIOLO::_REQUEST('accountNumberDigit');
        $data->accountType = MIOLO::_REQUEST('accountType');
        $data->clearingHouse = MIOLO::_REQUEST('clearingHouse');                       
        $data->especialidade = MIOLO::_REQUEST('especialidade');
        $data->classe = MIOLO::_REQUEST('classe');
        $data->nivel = MIOLO::_REQUEST('nivel');
        $data->unitId = MIOLO::_REQUEST('unitId');
        $data->employeeId = MIOLO::_REQUEST('employeeId');
        
        return $data;
        
    }
    
    public function nextStepButton_click($args = null)
    {
        parent::nextStepButton_click();
        $this->savaCamposCustomizados();
    }
    
    public function getPkeyValue()
    {   
        return MIOLO::_REQUEST('employeeId');
    }
    
    /*
     * Salva os campos customizados
     */
    public function savaCamposCustomizados()
    {
        $data = $this->getTypesData();
        
        $busEmployee = new BusinessBasicBusEmployee();
        $employee = $data->employeeId;

        if( !strlen($employee) > 0 )
        {
            $employee = $busEmployee->getLastInsertId();
        }    

        $_data = (object) $this->getCustomFieldValues();
        $this->saveCustomFields( $employee , $_data, 'FrmEmployee' );
    }
}

?>
