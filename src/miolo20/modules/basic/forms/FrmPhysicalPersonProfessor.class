<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Physical person professor form
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 09/02/2011
 *
 **/

class FrmPhysicalPersonProfessor extends FrmPersonSteps
{
    public function __construct($steps=null)
    {
        parent::__construct(null, $steps, __CLASS__);
    }


    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        //Load data
        $data = $this->getData();
        $allData = $this->getStepData();
        $stepData = $this->getStepDataByForm(__CLASS__);
        
        if ( SAGU::getParameter('SERVICES', 'CONTRATO_PRESTACAO_SERVICO') == DB_TRUE )
        {
            $eTemporarioLabel = new MText('eTemporarioLabel', _M('É temporário?', $module) . ':');
            $eTemporarioLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
            $eTemporarioLabel->setClass('m-caption');
            $eTemporario = new MCheckBox('eTemporario', DB_TRUE, null, ($data->eTemporario == DB_TRUE) ? true : false, null, _M('Marque se o professor é temporário.', $module));
            $eTemporario->setJsHint(_M('Marque se o professor é temporário.', $module));
            $bgFields[] = new MHContainer('eTemporarioHC', array($eTemporarioLabel, $eTemporario));
            
            $fields[] = new MBaseGroup('moreInfo', _M('Mais informações', $module), $bgFields);
        }

        if ( $this->isFirstAccess() )
        {
            MSubDetail::clearData('professorCommitment');

            $filters = new stdClass();
            $filters->personId = $allData->personId;

            $busProfessorCommitment = new BusinessBasicBusProfessorCommitment();
            $stepData->professorCommitment = $busProfessorCommitment->searchProfessorCommitment($filters, true);
        }
        
        //
        // bsg Atuacao
        //
        $bsgAtuacao = $this->obterCheckboxes();

        //
        // bsg Dados do professor
        //
        $controls = array();
        $professor = new BasPhysicalPersonProfessor();        

        $controls[] = $escolaridade = new MSelection('escolaridade', $data->escolaridade, _M('Escolaridade'), $professor->listarEscolaridade());
        
        $controls[] = $posGrad = new MSelection('posGraduacao', $data->posGraduacao, _M('Pós graduação'), $professor->listarPosGraduacao());
        $posGrad->setJsHint(_M('Selecione a opção que correspondente ao mais alto grau de formação do professor'));
        
        $controls[] = $situacao = new MSelection('situacao', $data->situacao, _M('Situação'), $professor->listarSituacao());
        
        $controls[] = $regimeTrabalho = new MSelection('regimeTrabalho', $data->regimeTrabalho, _M('Regime de trabalho'), $professor->listarRegimeTrabalho());
        
        $controls[] = $this->genericFields()->radioButtonGroup('substituto', $data->substituto, _M('Substituto'), SAGU::listYesNo());
        
        $controls[] = $visitante = $this->genericFields()->radioButtonGroup('visitante', $data->visitante, _M('Visitante'), SAGU::listYesNo());
        $visitante->addAttribute('onclick', 'checkVisitante()');
        
        $MIOLO->page->addJsCode("
            function checkVisitante()
            {
                document.getElementById('divTipoVinculo').style.display = document.getElementById('visitante_t').checked ? 'block' : 'none';
            }
            
            checkVisitante();
        ");
        
        $tipoVinculo = new MSelection('tipoVinculo', $data->tipoVinculo, _M('Tipo de vínculo'), $professor->listarTipoVinculo());
        $controls[] = new MDiv('divTipoVinculo', SAGU::alignFields(array($tipoVinculo)));
        
        $controls[] = new MSeparator();
        $controls[] = $bsgAtuacao;
        
        $fields[] = $bsg = new sBaseGroup('bsgDadosProf', _M('Dados do professor'), $controls);
        

        //
        //Comprometimento do professor (subdetail)
        //
        //Data inicial
        $beginDateLabel = new MText('beginDateLabel', _M('Data inicial', $module) . ':');
        $beginDateLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $beginDateLabel->setClass('m-caption m-caption-required');
        $beginDate = new MCalendarField('beginDate', null, null, SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $beginDate->setJsHint(_M('Informe a data inicial do período', $module));
        $beginDate->setClass('m-caption m-caption-required');
        $_validators[] = new MDateDMYValidator('beginDate',  _M('Data inicial', $module), 'required');
        $_fields[] = new MHContainer('beginDateCnt', array($beginDateLabel, $beginDate));

        //Data final
        $endDateLabel = new MText('endDateLabel', _M('Data final', $module) . ':');
        $endDateLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $endDate = new MCalendarField('endDate', null, null, SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $endDate->setJsHint(_M('Informe a data final do período', $module));
        $endDate->setClass('m-caption m-caption-required');
        $_validators[] = new MDateDMYValidator('endDate',  _M('Data final', $module));
        $_fields[] = new MHContainer('endDateCnt', array($endDateLabel, $endDate));
        
        //Campo que corresponde a carga horária do professor no período
        $workLoadLabel = new MText('workLoadLabel', _M('Carga horária total', $module) . ':');
        $workLoadLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $workLoadLabel->setClass('m-caption m-caption-required');
        $workLoad = new MTextField('workLoad', null, null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $workLoad->setJsHint( _M('Informe a carga horária total (número de horas)', $module) );
        $workLoadLabel2 = new MText('workLoadLabel2', _M('horas mensais', $module));
        $_validators[] = new MFloatValidator('workLoad', _M('Carga horária total', $module), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), 'required');
        $_fields[] = new MHContainer('workLoadCnt', array($workLoadLabel, $workLoad, $workLoadLabel2));

        //Campo que corresponde a carga horária de ensino do professor
        $teachWorkLoadLabel = new MText('teachWorkLoadLabel', _M('Carga horária de ensino', $module) . ':');
        $teachWorkLoadLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $teachWorkLoad = new MTextField('teachWorkLoad', null, null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $teachWorkLoad->setJsHint( _M('Informe a carga horária (número de horas)', $module) );
        $teachWorkLoadLabel2 = new MText('teachWorkLoadLabel2', _M('horas mensais', $module));
        $_validators[] = new MFloatValidator('teachWorkLoad', _M('Carga horária', $module), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), 'optional');
        $_fields[] = new MHContainer('teachWorkLoadCnt', array($teachWorkLoadLabel, $teachWorkLoad, $teachWorkLoadLabel2));
        
        //Campo que corresponde ao Cartão ponto do professor
        $timeSheetLabel = new MText('timeSheetLabel', _M('Cartão ponto', $module) . ':');
        $timeSheetLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $timeSheet = new MTextField('timeSheet', null, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $timeSheet->setJsHint( _M('Informe o número do cartão ponto', $module) );        
        $_fields[] = new MHContainer('timeSheetLabelCnt', array($timeSheetLabel, $timeSheet));

        // Unidade
        $busUnit = new BusinessBasicBusUnit();
        $listUnit = $busUnit->listUnit();
        $listUnitAssociative = SAGU::convertListToAssociative($listUnit);
        $unitLabel = new MText('unitLabel', _M('Unidade', $module) . ':');
        $unitLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $unitField = new MSelection('unitId', null, _M('Unidade', $module), $listUnit);
        $_fields[] = new MHContainer('unitHc', array($unitLabel, $unitField));

        // Setor
        $options = array(
            'module' => 'basic',
            'item' => 'Sector',
        );
        $sectorLabel = new MText('sectorLabel', _M('Setor', $module) . ':');
        $sectorLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $sectorField = new SLookupContainer('sectorId', null, $options);
        $_fields[] = new MHContainer('sectorHc', array($sectorLabel, $sectorField));

        //Campo que corresponde aos horários do professor
        $scheduleLabel = new MText('scheduleLabel', _M('Horário', $module) . ':');
        $scheduleLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $schedule = new MMultiLineField('schedule', null, null, 40, 5, 40);
        $schedule->setJsHint(_M('Informe os horários que o professor estará disponível', $module));
        $_fields[] = new MHContainer('scheduleCnt', array($scheduleLabel, $schedule));

        //Campo que corresponde as tarefas que o professor irá desempenhar
        $taskLabel = new MText('tasksLabel', _M('Tarefas', $module) . ':');
        $taskLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $task = new MMultiLineField('tasks', null, null, 40, 5, 40);
        $task->setJsHint(_M('Informe as tarefas que o professor irá desempenhar', $module));
        $_fields[] = new MHContainer('taskCnt', array($taskLabel, $task));

        $_cols[] = new MGridColumn(_M('Data inicial', $module), 'left', true, '', true, 'beginDate');
        $_cols[] = new MGridColumn(_M('Data final', $module), 'left', true, '', true, 'endDate');
        $_cols[] = new MGridColumn(_M('Carga horária total', $module), 'right', true, '', true, 'workLoad');
        $_cols[] = new MGridColumn(_M('Carga horária de ensino', $module), 'right', true, '', true, 'teachWorkLoad');
        $_cols[] = new MGridColumn(_M('Cartão ponto', $module), 'right', true, '', true, 'timeSheet');
        $_cols[] = new sSubDetailColumn('unitId', array('label' => _M('Unidade', $module), 'replace' => $listUnitAssociative));
        $_cols[] = new sSubDetailColumn('sectorIdDescription', array('label' => _M('Setor', $module)));
        $_cols[] = new sSubDetailColumn('sectorId', array('visible' => false));
        $_cols[] = new MGridColumn(_M('Horário', $module), 'right', true, '', true, 'schedule');
        $_cols[] = new MGridColumn(_M('Tarefa', $module), 'right', true, '', true, 'tasks');

        $fields[] = $sub = new MSubDetail('professorCommitment', _M('Carga horária', $module), $_cols);
        $sub->setFields($_fields);
        $sub->setValidators($_validators);

        if ( count($stepData->professorCommitment) > 0 )
        {
            $sub->setData( $stepData->professorCommitment );
        }

        $this->setFields($fields);
        $this->SetValidators($validators);
    }

    public function obterCheckboxes()
    {
        $tipo = new BasTipoAtuacaoProfessor();
        $options = $tipo->findList();
        
        $checkboxes = new sMultiCheckbox('cbox', _M('Atuação'), $options);
        
        if ( !$this->estaEmUmEvento() )
        {
            $checkboxes->setCheckeds( $this->obterTiposDaPessoa() );
        }
        
        return $checkboxes;
    }
    
    public function obterTiposDaPessoa()
    {
        $data = $this->getData();
        $atuacao = new BasAtuacaoProfessor();
        
        return $atuacao->obterTiposPessoa($data->personId);
    }

    public function finalizeButton_click($args)
    {
        $args = new stdClass();
        $args->showInformation = true;
        parent::finalizeButton_click($args);
    }


    public function saveData($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');
        
        $data->eTemporario = ($this->GetFormValue('eTemporario') == DB_TRUE) ? DB_TRUE : DB_FALSE;
        $data->escolaridade = $this->GetFormValue('escolaridade');
        $data->posGraduacao = $this->GetFormValue('posGraduacao');
        $data->situacao = $this->GetFormValue('situacao');
        $data->regimeTrabalho = $this->GetFormValue('regimeTrabalho');
        $data->substituto = $this->GetFormValue('substituto');
        $data->visitante = $this->GetFormValue('visitante');
        $data->tipoVinculo = $this->GetFormValue('tipoVinculo');

        $busPhysicalPersonProfessor = new BusinessBasicBusPhysicalPersonProfessor();
        $busProfessorCommitment = new BusinessBasicBusProfessorCommitment();

        $tiposAtuacaoSelecionados = $this->obterCheckboxes()->getCheckeds();
        
        if ( $function == SForm::FUNCTION_UPDATE )
        {
            $ok = $busPhysicalPersonProfessor->updatePhysicalPersonProfessor($data);
            $tiposAtuacaoBase = $this->obterTiposDaPessoa();
            
            BasAtuacaoProfessor::formAtualizacao($data->personId, $tiposAtuacaoBase, $tiposAtuacaoSelecionados);
        }
        else //INSERT function
        {
            $ok = $busPhysicalPersonProfessor->insertPhysicalPersonProfessor($data);
            $personId = $data->personId ? $data->personId : $busPhysicalPersonProfessor->getLastInsertId();
            
            BasAtuacaoProfessor::formInsercao($personId, $tiposAtuacaoSelecionados);
        }
        
        // Salva campos personalizados
        $personId = $function == SForm::FUNCTION_UPDATE ? $data->personId : $busPhysicalPersonProfessor->getLastInsertId();
        if ( is_numeric($personId) )
        {
            $this->saveCustomFields($personId, $data, $this->getTransaction());
        }

        //Dados da subDetail
        $filters = new stdClass();
        $filters->personId = $data->personId;
        $rows = $busProfessorCommitment->searchProfessorCommitment($filters, true);
        foreach ( (array)$rows as $row )
        {
            $busProfessorCommitment->deleteProfessorCommitment($row->personId, $row->beginDate);
        }

        $data->professorCommitment = MSubDetail::getData('professorCommitment');
           
        // Insere um registro padrão, quando for cadastrado um professor e não for informado a carga horária
        if ( !count($data->professorCommitment) > 0 || strlen($data->professorCommitment[0]->removeData) > 0 )
        {
            $dados = new stdClass();
            $dados->personId = $data->personId;
            $dados->beginDate = date('d-m-Y');
            $dados->workLoad = 0;
            
            $data->professorCommitment[] = $dados;
        }
                
        foreach ( (array)$data->professorCommitment as $row )
        {
            if ( !$row->removeData )
            {
                $row->personId = $data->personId;
                $ok = $busProfessorCommitment->insertProfessorCommitment($row);
            }
        }
        
        //Inserção dados bancários do passo pessoa
        $busDadosBancariosDaPessoa = new BusinessFinanceBusDadosBancariosDaPessoa();
                
        $dados->personId = $data->personId;
        
        $existeDadosBancarios = $busDadosBancariosDaPessoa->getDadosBancariosDaPessoa($dados);
        
        $dados->bankId = $_SESSION['dadosBancario'];
        $dados->agencia = $_SESSION['agencia'];
        $dados->digitoDaAgencia = $_SESSION['digitoAgencia'];
        $dados->conta = $_SESSION['conta'];
        $dados->digitoDaConta = $_SESSION['digitoConta'];
        $dados->observacao = $_SESSION['observacao'];
                
        if( strlen($existeDadosBancarios->personId) > 0 )
        {
            $busDadosBancariosDaPessoa->updateDadosBancariosDaPessoa($dados);
        }
        else
        {
            $busDadosBancariosDaPessoa->insertDadosBancariosDaPessoa($dados);
        }
        
        $_SESSION['dadosBancario'] = null;
        $_SESSION['agencia'] = null;
        $_SESSION['digitoAgencia'] = null;
        $_SESSION['conta'] = null;
        $_SESSION['digitoConta'] = null;
        $_SESSION['observacao'] = null;

        return true;
    }
    
    /**
     * Busca as demais informações do professor.
     * 
     * @return type
     */
    public function getData()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $personId = MIOLO::_REQUEST('personId');
        
        $professor = new stdClass();
        
        if ( strlen($personId) > 0 )
        {
            $busPhysicalPersonProfessor = new BusinessBasicBusPhysicalPersonProfessor();
            $professor = $busPhysicalPersonProfessor->getPhysicalPersonProfessor($personId);
        }
        
        return $professor;
    }
    
}
?>
