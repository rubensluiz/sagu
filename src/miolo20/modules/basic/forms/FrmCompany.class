<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Company form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 01/09/2005
 *
 **/

/**
 * Form to manipulate a company
 **/
class FrmCompany extends SManagementForm
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new BasCompanyConf(), array('companyId'), 'BusCompany');
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        if ( in_array($function,array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $pk = $this->getObjectPk();
            $fields[] = new MTextLabel('', $pk->companyId, _M('Código',$module));
            $fields[] = new MHiddenField('companyId', $pk->companyId);

            $data = $this->busObject->getCompany($pk->companyId);
        }

        $data->companyName = $this->getFormValue('companyName', $data->companyName);
        $companyName = new MTextField('companyName', $data->name, _M('Razão social',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $companyName->setJsHint(_M('Informe o nome da empresa',$module));
        $fields[] = $companyName;
        $validators[] = new MRequiredValidator('companyName');

        $acronym  = new MTextField('acronym', $this->getFormValue('acronym', $data->acronym), _M('Sigla',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), _M('Máximo de 10 caracteres', $module));
        $acronym->setJsHint(_M('Informe a sigla da empresa',$module));
        $fields[] = $acronym;
        $validators[] = new MRegExpValidator('acronym', _M('Sigla',$module), "^[A-Za-z0-9]{1,10}$", 'required');

        $personLabel = new MText('personLabel', _M('Pessoa jurídica',$module) . ':');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personLabel->setClass('m-caption m-caption-required');

        $personId = new MLookupTextField('personId', $this->getFormValue('personId', $data->personId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'personName', 'basic', 'LegalPerson', null, null, true);
        $personId->setJsHint(_M('Informe o código da pessoa jurídica',$module));
        $validators[] = new MIntegerValidator('personId', _M('Pessoa jurídica',$module), 'required');

        $personName = new MTextField('personName', $this->getFormValue('personName', $data->personName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setJsHint(_M('Informe o nome da pessoa jurídica',$module));
        $personName->setReadOnly(true);

        $hctPerson = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
        $hctPerson->setShowLabel(true);
        $fields[] = $hctPerson;

        $companyTypeDescription = new MTextField('companyTypeDescription', $this->getFormValue('companyTypeDescription', $data->companyTypeDescription), _M('Tipo de empresa',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $companyTypeDescription->setJsHint(_M('Informe a descrição do tipo de empresa',$module));
        $fields[] = $companyTypeDescription;

        $responsablePersonLabel = new MText('legalPersonLabel', _M('Pessoa responsável',$module) . ':');
        $responsablePersonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $responsablePersonLabel->setClass('m-caption m-caption-required');

        $legalResponsableId = new MLookupTextField('legalResponsableId', $this->getFormValue('legalResponsableId', $data->legalResponsableId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'legalResponsableName', 'basic', 'PhysicalPerson', null, null, true);
        $legalResponsableId->setJsHint(_M('Informe o código do responsável legal',$module));
        $validators[] = new MIntegerValidator('legalResponsableId', _M('Pessoa responsável',$module), 'required');

        $legalResponsableName = new MTextField('legalResponsableName', $this->getFormValue('legalResponsableName', $data->legalResponsableName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $legalResponsableName->setJsHint(_M('Informe o nome do responsável legal',$module));
        $legalResponsableName->setReadOnly(true);

        $hctPerson2 = new MHContainer('hctPerson', array($responsablePersonLabel, $legalResponsableId, $legalResponsableName));
        $hctPerson2->setShowLabel(true);
        $fields[] = $hctPerson2;

        parent::defineFields($fields, $validators, $data);
    }

    public function getTypesData()
    {
        $data = parent::getTypesData();
        $fieldName = 'companyName';

        if ( strlen(MIOLO::_REQUEST($fieldName)) == 0 )
        {
            $fieldName .= 'S';
        }

        $data->name = MIOLO::_REQUEST($fieldName);

        return $data;
    }
}
?>
