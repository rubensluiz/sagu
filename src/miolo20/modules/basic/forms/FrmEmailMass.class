<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Send Email Webservices form
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Equipe Solis [sagu2@solis.coop.br]
 *
 * @since
 * Class created on 15/02/2011
 */
/**
 * Form to send a Email
 */
ini_set('memory_limit', '10240M');
ini_set('max_execution_time', '0');

class FrmEmailMass extends SForm 
{
    /**
     * Class constructor
     */
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        parent::__construct(_M('Envio de e-mail em lote', $module), null, null);

        // Disable toolbar buttons
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_EXIT);
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        //Barra de progresso
        $fields[] = SProgressBar::getCurrent()->setup();
        
        //Recriar views
        SAGU::recriarView('view_turmas');
        SAGU::recriarView('unit_view_turmas');
        SAGU::recriarView('unit_view_email');
        SAGU::recriarView('view_email');

        $enviarParaLabel = new MText('enviarParaLabel', _M('Enviar para várias turmas') . ':');
        $enviarParaNTurmas = new MRadioButton('enviarPara', DB_TRUE, '', false, _M('Sim'));
        $enviarParaNTurmas->addAttribute('onChange', "javascript:verificaComponenteDeTurma('t');");
        $enviarParaTurma = new MRadioButton('enviarPara', DB_FALSE, '', true, _M('Não'));
        $enviarParaTurma->addAttribute('onChange', "javascript:verificaComponenteDeTurma('f');");
        $hctEnviarPara = new MHContainer('hctEnviarPara', array($enviarParaLabel, $enviarParaNTurmas, $enviarParaTurma));
        $fields[] = $hctEnviarPara;
        
        $fields[] = new MSeparator();
        
        // Para alinhar o label da lookup de turma
        $this->page->onload("document.getElementById('classLabel').style.marginLeft = '72%';");
        
        //Lookup de turma
        $classLabel = new MText('classLabel', _M('Turma', $module) . ':');
        $classLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $lkpFields = 'nameClass, modulo';
        $classId = new MLookupTextField('classId', $this->getFormValue('classId', $this->classId->value), _M('Turma', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE'), null, null, $lkpFields, 'basic', 'Class', null, array('class' => 'classId'), true);
        $modulo = new SHiddenField('modulo');
        $fields[] = $modulo;

        $classId->setJsHint(_M('Informe a Turma', $module));
        $className = new MTextField('nameClass', $this->getFormValue('nameClass', $this->nameClass->value), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $className->setReadOnly(true);
        $cntClass = new MHContainer('cntClass', array($classLabel, $classId, $className));
        $cntClass->setShowLabel(false);
        $fields[] = new MDiv('divTurmaLookup', $cntClass);
        
        $turmas = SAGU::listaTodasAsTurmas();

        //Checkbox das turmas inativas/ativas
        $marcarLbl = new MLabel(_M("Marcar todas as turmas", $module) . ":" );
        $marcarLbl->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $marcarLbl->setClass('m-caption');
        $marcarAtivasLbl = new MLabel(_M("Ativas", $module));
        $marcarAtivas = new MCheckBox('marcarTurmasA', 'A', NULL, false);
        $marcarAtivas->addAttribute('onChange', SForm::getAjaxAction('marcarTurmas', 'divResponse', false, array('marcar' => 'A')));
        $marcarInativasLbl = new MLabel(_M("Inativas", $module));
        $marcarInativas = new MCheckBox('marcarTurmasI', 'I', NULL, false);
        $marcarInativas->addAttribute('onChange', SForm::getAjaxAction('marcarTurmas', 'divResponse', false, array('marcar' => 'I')));
        $hctMarcar = new MHContainer('hctMarcar', array($marcarLbl, $marcarAtivas, $marcarAtivasLbl, $marcarInativas, $marcarInativasLbl));
        
        // Selection de turma
        $turmaLabel = new MText('turmaLabel', _M('Turma').':');
        $turmaLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $turmaLabel->setClass('m-caption m-caption');
        $turma = new MMultiSelection('turmas',  is_array($this->getFormValue('turmas', $data->turmas)) ? $this->getFormValue('turmas', $data->turmas) : array($this->getFormValue('turmas', $data->turmas)), null, $turmas, true, null, 10);
        $turma->setAttribute('style','width:600px');
        $hctTurmas = new MHContainer('hctTurmas', array($turmaLabel, $turma));
        $fields[] = new MDiv('divTurmaSelection', array($hctMarcar, $hctTurmas));

        $this->page->onload("document.getElementById('turmaLabel').style.marginLeft = '72%';");
        
        // Campo vínculo
        $personLinkLabel = new MText('lebelPersonLink', _M('Vínculo') . ':');
        $personLinkLabel->setClass('m-caption m-caption-required');
        $personLinkLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $validators[] = new MRequiredValidator('personLinks', _M('Vínculos', $module));
        $personLink = new MMultiSelection('personLinks', null, null, array(_M('Alunos'), _M('Professores')));
        $fields[] = new MHContainer('ctnPersonLinks', array($personLinkLabel, $personLink));

        // Campo Título
        $titleEmailLabel = new MText('titleLabel', _M('Título', $module) . ':');
        $titleEmailLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $titleEmailLabel->setClass('m-caption m-caption-required');
        $titleEmail = new MTextField('titleEmail', $this->getFormValue('titleEmail', $data->titleEmail), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $titleEmail->setJsHint(_M('Informe o título do email', $module));
        $validators[] = new MRequiredValidator('titleEmail', _M('Título', $module));
        $fields[] = new MHContainer('hctTitleEmail', array($titleEmailLabel, $titleEmail));

        // Campo Mensagem
        $messageEmailLabel = new MText('messageEmailLabel', _M('Mensagem', $module) . ':');
        $messageEmailLabel->setClass('m-caption m-caption-required');
        $messageEmailLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $messageEmail = new MEditor('messageEmail');
        $messageEmail->disableElementsPath();
        $messageEmail->setWidth('680');
        $messageEmail->setJsHint(_M('Informe o conteúdo do e-mail', $module));
        //$validators[] = new MRequiredValidator('messageEmail', _M('Mensagem', $module));
        $fields[] = new MHContainer('hctMessageEmail', array($messageEmailLabel, $messageEmail));

        //Anexos
        $attachments = array();

        for ($i = 0; $i < SAGU::getParameter('BASIC', 'NUMERO_DE_ANEXOS_PARA_EMAIL_EM_LOTE'); $i++)
        {
            $attachLabel = new MText('fileIdLabel', _M('Anexo @1', null, ($i + 1)) . ':');
            $attachLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $attach = new MFileField("attach_{$i}", null, null, 20);
            $htcAttach = new MHContainer("hctAttach", array($attachLabel, $attach));
            $htcAttach->setWidth('600');

            $attachments[] = $htcAttach;
        }

        $bsgAttach = new MBasegroup('bsgAttach', _M('Anexos', $module), $attachments);
        $bsgAttach->setWidth('680');
        $fields[] = $bsgAttach;

        $btnSend = new MButton('tbBtnSend', _M('Enviar', $module));
        $fields[] = new MHContainer('htcButons', array($btnSend));
        
        $fields[] = new MDiv('divResponse', null);
        
        $this->setFields($fields);
        $this->setValidators($validators);
        
        //Javascript do radio de enviar para turmas
        $jsCode = "function verificaComponenteDeTurma(variasTurmas)
                   {
                       if ( variasTurmas == 't' )
                       {
                           document.getElementById('divTurmaLookup').style.display = 'none';
                           document.getElementById('divTurmaSelection').style.display = 'block';
                           document.getElementById('classId').value = '';
                           document.getElementById('nameClass').value = '';
                       }
                       else if ( variasTurmas == 'f' )
                       {
                           document.getElementById('divTurmaSelection').style.display = 'none';
                           document.getElementById('divTurmaLookup').style.display = 'block';
                           
                           var opcoes = document.getElementById('turmas');
                           for ( var o, i = 0; i < opcoes.options.length; i++ )
                           {
                               o = opcoes.options[i];
                               o.selected = false;
                           }
                       }   
                   }
                   verificaComponenteDeTurma('f');
                   ";
        
        $this->AddJsCode($jsCode);

        parent::defineFields();
    }

    public function tbBtnSend_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $data = $this->getTypesData();

        if (strlen($data->messageEmail) == 0)
        {
            $this->page->onLoad("alert('O campo \'Mensagem\' deve ser preenchido.');");

            return false;
        }
        
        // Obtém o usuário da pessoa logada e obtém os dados dela
        $mioloUserName = trim($MIOLO->getLogin()->id);
        $busPerson = new BusinessBasicBusPerson();
        $personData = $busPerson->getPersonByMioloUserName($mioloUserName);
        
        // Se a configuração do servidor de email exige autenticação, utiliza o user cadastrado para autenticação
        $busMailServer = new BusinessBasicBusMailServer();
        $servidorEmail = $busMailServer->getMailServer();
        
        $emailFrom = $personData->email;
        if ( $servidorEmail->enableAuth == DB_TRUE )
        {
            $emailFrom = $servidorEmail->smtpUser;
        }

        $from = $emailFrom; // E-mail do professor
        $fromName = $personData->name; // Nome do professor
        $modulo = MIOLO::_REQUEST('modulo');
        $turmas = MIOLO::_REQUEST('turmas');
        $classId = MIOLO::_REQUEST('classId');

        $busGroup = new BusinessAcademicBusGroup();
        $busEnroll = new BusinessAcademicBusEnroll();
        $busPerson = new BusinessBasicBusPhysicalPerson();
        $acpDiscplina = new AcpComponenteCurricularDisciplina();

        $turma = array();
        $todosEmails = array();
        
        // Verifica se uma turma foi escolhida na lookup ou no componente de selection
        if ( strlen($classId) > 0 )
        {
            $turma[] = $classId;
        }
        else if ( count($turmas) > 0 )
        {
            $turma = $turmas;
        }
        else
        {
            $turma = array('1' => '1');
        }
                
        
        foreach ( $turma as $turmaId )
        {
            $emails = array();
            $filters = new stdClass();
            $filters->isClosed = DB_FALSE;
            
            if ( strlen($classId) > 0 )
            {
                $filters->classId = $turmaId;
            }
            else if ( count($turmas) > 0 )
            {
                $infoTurma = explode(' - ', $turmaId);
                $modulo = ($infoTurma[0] == 'ACADEMICO') ? 'A' : (($infoTurma[0] == 'PEDAGOGICO') ? 'P' : '');
                $filters->classId = $infoTurma[1];
            }
            else
            {
                $modulo = '';
            }

            //Verifica qual é o modulo da turma e obtem e-mails conforme.
            if ( $modulo == 'A' )
            {
                $searchGroup = $busGroup->searchGroup($filters, true);
                if (count($searchGroup) > 0)
                {
                    $emails = $this->obterEmailsAcademico($searchGroup);
                }
                else
                {
                    $this->addError(_M('Nenhuma disciplina em aberto', $module));
                }
            }
            elseif ( $modulo == 'P' )
            {
                $emails = $this->obterEmailsPedadogico($filters->classId);
            }
            elseif ( $modulo == '' )
            {
                $emails = $this->obterTodosEmails();
            }
            
            $emails = is_array($emails) ? $emails : array($emails);
            $todosEmails = array_merge($todosEmails, $emails);
            $todosEmails = is_array($todosEmails) ? $todosEmails : array($todosEmails); 
        }
        
        $subject = $data->titleEmail; // Assunto
        $body = $data->messageEmail; // Corpo da mensagem
        $enviado = true;
        
        //Barra de progresso
        if ( count($todosEmails) > 0 )
        {
            $barraDeProgresso = SProgressBar::getCurrent();
            $barraDeProgresso->show();
            $quantEmail = ceil(count($todosEmails)/50);
            $porcentagemACadaPassada = ceil((100/$quantEmail));
            $percentual = $porcentagemACadaPassada;
            $barraDeProgresso->updateProgress(_M("Os e-mails estão sendo enviados, por favor aguarde, o processo poderá demorar alguns minutos..."), 0);
        }
        
        //Quebrar e-mails de 50 em 50, para tornar o SMTP mais rápido
        $max = 49;
        foreach ( $todosEmails as $key => $email )
        {
            if ( $key <= $max )
            {
                $loteEmail[$max][$key] = $email;
            }
            else
            {
                $max = $max + 50;
            }
        }
        
        //Enviar por lotes de 50
        if (count($todosEmails) > 0)
        {
            foreach ($loteEmail as $lote)
            {
                //Atualiza barra de progresso
                $msgProgresso = _M("Os e-mails estão sendo enviados, por favor aguarde, o processo poderá demorar alguns minutos...");
                $barraDeProgresso->updateProgress($msgProgresso, $percentual);
                $percentual = $percentual + $porcentagemACadaPassada;

                $sendEmail = new sendEmail($from, $fromName, $lote, $subject, $body, $bcc);
                for ($i = 0; $i < SAGU::getParameter('BASIC', 'NUMERO_DE_ANEXOS_PARA_EMAIL_EM_LOTE'); $i++)
                {
                    // Adicionar os anexos se existirem
                    $varName = 'attach_' . $i;
                    $file = $data->$varName;
                    if (strlen($file['tmp_name']) > 0)
                    {
                        $sendEmail->AddAttachment($file['tmp_name'], $file['name']);
                    }
                }

                $enviado = $sendEmail->sendEmail(); // Envia o email

                if (!$enviado)
                {
                    break;
                }
            }
        }
        else
        {
            // Se ocorrer um erro, remove a barra de progresso para exibir a mensagem de erro
            $jsCode = " document.getElementById('SProgressBar').style.display = 'none'; ";
            $MIOLO->page->addAJAXJsCode($jsCode);
            $MIOLO->error(_M("Não foram encontrados e-mails para as turma(s) selecionada(s).", $module));
        }
        
        if ( $enviado )
        {
            if ( count($todosEmails) > 0 )
            {
                $barraDeProgresso->updateProgress(_M("Todos e-mails foram enviados com sucesso."), 100);
            }
            $this->AddInfo(_M("Todos e-mails foram enviados com sucesso."));
        }
        else
        {
            // Se ocorrer um erro, remove a barra de progresso para exibir a mensagem de erro
            $jsCode = " document.getElementById('SProgressBar').style.display = 'none'; ";
            $MIOLO->page->addAJAXJsCode($jsCode);
            $MIOLO->error($sendEmail->getErrors());
        }
    }

    public function getTypesData()
    {
        $data = new stdClass();
        $data->personLinks = $this->getFormValue('personLinks');
        $data->sendSeparately = $this->getFormValue('sendSeparately');
        $data->titleEmail = $this->getFormValue('titleEmail');
        $data->messageEmail = $this->getFormValue('messageEmail');

        for ($i = 0; $i < SAGU::getParameter('BASIC', 'NUMERO_DE_ANEXOS_PARA_EMAIL_EM_LOTE'); $i++)
        {
            $varName = 'attach_' . $i;
            $data->$varName = $_FILES[$varName];
        }

        return $data;
    }

    public function obterEmailsAcademico($searchGroup)
    {
        $busGroup = new BusinessAcademicBusGroup();
        $busPerson = new BusinessBasicBusPhysicalPerson();

        foreach ($searchGroup as $cod => $group) //Percorre as disciplinas em aberto
        {
            //Traz todos os e-mails dos alunos matriculados
            $pupils = $busGroup->getPupilEmailByGroup($group->groupId, 'A');
            foreach ($pupils as $i => $email)
            {
                $pupilsEmail[] = $email[2];
            }

            //Traz todos os e-mails dos professores das disciplinas
            $professors = $busGroup->getProfessorNamesOfGroup($group->groupId);
            
            if (count($professors) > 0)
            {
                foreach ($professors as $personId => $name)
                {
                    $professorData = $busPerson->getPhysicalPerson($personId);
                    if (strlen($professorData->email) > 0)
                    {
                        $professorsEmail[] = $professorData->email;
                    }
                }
            }
        }

        //Lista de e-mails dos vinculos selecionados
        $data = $this->getTypesData();
        $emailsAlunos = array();
        $emailsProf = array();

        if (count($data->personLinks))
        {
            foreach ($data->personLinks as $cod => $link)
            {
                if ($link == 0) //Alunos
                {
                    $emailsAlunos = array_unique($pupilsEmail);
                }
                if ($link == 1) //Professores
                {
                    $emailsProf = array_unique($professorsEmail);
                }
            }
        }

        $emails = array();
        $emails = array_merge($emailsProf, $emailsAlunos);

        return $emails;
    }

    public function obterEmailsPedadogico($codigo_turma)
    {
        //Traz todos os e-mails dos alunos matriculados
        $busGroup = new BusinessAcademicBusGroup();
        $acpComponente = new AcpComponenteCurricular();
        $busPerson = new BusinessBasicBusPhysicalPerson();

        $pupils = $busGroup->getPupilEmailByGroup($codigo_turma, 'P');

        foreach ($pupils as $i => $email)
        {
            $pupilsEmail[] = $email[2];
        }

        //Traz todos os e-mails dos professores das disciplinas
        $professors = $acpComponente->obterIdProfessoresTurma($codigo_turma);

        if (count($professors) > 0)
        {
            foreach ($professors as $u => $name)
            {
                if (count($name[0]) > 0)
                {
                    $professorData = $busPerson->getPhysicalPerson($name[0]);
                    if (strlen($professorData->email) > 0)
                    {
                        $professorsEmail[] = $professorData->email;
                    }
                }
            }
        }

        //Lista de e-mails dos vinculos selecionados
        $emailsAlunos = array();
        $emailsProf = array();
        $data = $this->getTypesData();
        if (count($data->personLinks))
        {
            foreach ($data->personLinks as $cod => $link)
            {
                if ($link == 0) //Alunos
                {
                    $emailsAlunos = array_unique($pupilsEmail);
                }
                if ($link == 1) //Professores
                {
                    $emailsProf = array_unique($professorsEmail);
                }
            }
        }
        $emails = array_merge($emailsProf, $emailsAlunos);

        return $emails;
    }

    public function obterTodosEmails()
    {
        $busGroup = new BusinessAcademicBusGroup();
        $acpComponente = new AcpComponenteCurricular();
        $busPerson = new BusinessBasicBusPhysicalPerson();
        
        //Professores
        $professorsAcp = $acpComponente->obterIdProfessoresTurma();
        $professorsAcd = $busGroup->getProfessorNamesOfGroup();
        
        foreach ($professorsAcd as $cod => $prof) // Acadêmicos
        {
            $professorsAcd[$cod] = $cod;
        }
        
        foreach ($professorsAcp as $cod => $prof) // Pedagógicos
        {
            if ( !is_null($prof[0]) )
            {
                $professorsAcp[$cod] = $prof[0];
            }
            else
            {
                unset($professorsAcp[$cod]);
            }
        }

        //Junta professores do pedagógigo com acadêmico
        is_null($professorsAcd) ? $professorsAcd = array() : null;
        is_null($professorsAcp) ? $professorsAcp = array() : null;
        $professors = array_merge($professorsAcd, $professorsAcp);
        
        if (count($professors) > 0)
        {
            foreach ($professors as $personId => $name)
            {
                $professorData = $busPerson->getPhysicalPerson($name);
                if (strlen($professorData->email) > 0)
                {
                    $professorsEmail[] = $professorData->email;
                }
            }
        }

        //Alunos
        $pupilsEmail = $busGroup->getPupilEmailByGroup();
        
        foreach($pupilsEmail as $cod => $pupil)
        {
            $pupilsEmail[$cod] = $pupil[2];
        }
        
        $data = $this->getTypesData();
        $emailsAlunos = array();
        $emailsProf = array();
        
        if (count($data->personLinks))
        {
            foreach ($data->personLinks as $cod => $link)
            {
                if ($link == 0) //Alunos
                {
                    $emailsAlunos = array_unique($pupilsEmail);
                }
                if ($link == 1) //Professores
                {
                    $emailsProf = array_unique($professorsEmail);
                }
            }
        }

        $emails = array_merge($emailsProf, $emailsAlunos);

        return $emails;
    }
    
    /**
     * 
     * Gera javascript para marcar automaticamente as turmas.
     * 
     * @param (stdClass) $args - Argumentos do formulário.
     */
    public function marcarTurmas($args = null)
    {
        $MIOLO = MIOLO::getInstance();
        
        //Busca as turmas
        $turmas = SAGU::listaTodasAsTurmas();
        
        //Dividir turmas ativas de turmas inativas
        foreach ( $turmas as $key => $turma )
        {
            if ( strpos($turma[1], 'INATIVA') )
            {
                $inativas[$key] = $turma[1];
            }
            else
            {
                $ativas[$key] = $turma[1];
            }
        }
        
        //Pega a lista de turmas correta
        $args->marcar == 'A' ? $lista = $ativas : $lista= $inativas;
        
        $marcar = 'marcarTurmas' . $args->marcar;

        //Se estiver selecionada, vai estar em dois parâmetros do args (marcar e marcarTurmas)
        if ( strlen($args->$marcar) > 0 )
        {
            foreach ( $lista as $key => $turma )
            {
                $jsCode = " document.getElementById('turmas').options[{$key}].selected = true";
                $MIOLO->page->addAJAXJsCode($jsCode);
            }
        }
        else
        {
            foreach ( $lista as $key => $turma )
            {
                $jsCode = " document.getElementById('turmas').options[{$key}].selected = false";
                $MIOLO->page->addAJAXJsCode($jsCode);
            }
        }
    }

}

?>