<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Registro de aluno
 *
 * @author Moises Heberle [moises@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.com.br]
 *
 * @since
 * Class created on 19/11/2013
 *
 **/
class FrmRegistroAluno extends SManagementForm
{
    protected $_personId;
    public $identificador = __CLASS__;

    public function __construct()
    {
        $module = SAGU::getFileModule(__FILE__);
        parent::__construct(new BasPhysicalPerson(), array('personId'), 'BusPhysicalPerson', _M('Registro de pessoa'), $module);

        $this->toolbar->hideButton('tbBtnPrint');
        $this->toolbar->hideButton('tbBtnDelete');
        $this->toolbar->hideButton('tbBtnSave');
        $this->toolbar->hideButton('tbBtnSearch');
        $this->toolbar->hideButton('tbBtnClose');
        $this->toolbar->hideButton('tbBtnNew');
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $fields[] = $logo = new MImage(null, _M('Escola de Saúde Pública do Ceará', 'resmedica'), $MIOLO->getUI()->getImage('resmedica', 'logo_espce_gov.png'));
        $logo->addAttribute("width", 600);
        $logo->addAttribute("height", 90);
        $logo->_addStyle('margin-left', '360px');
        $logo->_addStyle('margin-bottom', '5px');


        if (MIOLO::_REQUEST('__EVENTTARGETVALUE') == 'tbBtnContinuar:click') {

            $data = (object) $_REQUEST;

            $busPerson = new BusinessBasicBusPerson();
            $filters = new stdClass();
            $filters->cpf = $data->cpf;
            $filters->dateBirth = $data->data;
            $person = $busPerson->searchPerson($filters);

            if ($person[0][0] > 0) {
                $bgrFields[] = new MTextLabel('personId', $person[0][0], _M('Código',$module));
                $bgrFields[] = new MHiddenField('personId', $person[0][0]);

                // FIXME Nao permitir editar pessoa que nao seja o usuario logado ,  por seguranca
                $data = $this->busObject->getPhysicalPerson($person[0][0]);
            }
        }

        if ( $person[0][0] == null )
        {
            $fields[] = MMessage::getStaticMessage('msgInfoRedirec', _M("Você ainda não possui cadastro em nossa base de dados, preencha seus dados pessoais para darmos continuidade com o processo."), MMessage::TYPE_INFORMATION);
        } else {
            $fields[] = MMessage::getStaticMessage('msgInfoRedirec', _M("Você já possui cadastro em nossa base de dados, verifique seus dados pessoais para darmos continuidade com o processo."), MMessage::TYPE_INFORMATION);
        }

        /*
         * Dados gerais
         */
        // Nome
        $personNameLabel = new MLabel(_M('Nome', $module) . ':');
        $personNameLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personNameLabel->setClass('m-caption m-caption-required');
        $personName = new MTextField('personName', $data->personName, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setJsHint(_M('Informe o nome', $module));
        $personName->setAttribute('required', true);
        $bgrFields[] = new MHContainer('personNameCnt', array($personNameLabel, $personName));
        $validators[] = new MRequiredValidator('personName', _M('Nome', $module));

        // E-mail
        $emailLabel = new MLabel(_M('E-mail', $module) . ':');
        $emailLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $emailLabel->setClass('m-caption m-caption-required');
        $email = new MTextField('email', trim($data->email), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $email->setJsHint(_M('Informe o e-mail', $module));
        $email->setAttribute('required', true);
        $bgrFields[] = new MHContainer('emailCnt', array($emailLabel, $email));
        $validators[] = new MEmailValidator('email', _M('E-mail', $module), 'required');


        if ( !$this->isUpdateFunction() )
        {
            // Field miolo userpassword
            $mioloUserPasswdLabel = new MText('mioloUserPasswdLabel', _M('Senha',$module) . ':');
            $mioloUserPasswdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $mioloUserPasswdLabel->setClass('m-caption m-caption-required');
            $mioloUserPasswd = new MPasswordField('mioloUserPasswd', $this->getFormValue('mioloUserPasswd'), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), _M("Informe sua senha para acesso às informações do sistema. Guarde sua senha com segurança!"));
            $mioloUserPasswd->setAttribute('required', true);
            $bgrFields[] = new MHContainer('hctMioloUserName', array($mioloUserPasswdLabel, $mioloUserPasswd));
            $validators[] = new MRequiredValidator('mioloUserPasswd', _M('Senha', $module));
        }


        // RG
        $rgLabel = new MLabel(_M('Identidade (RG)', $module) . ':');
        $rgLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $rgLabel->setClass('m-caption m-caption-required');
        $rg = new MTextField('personRg', $data->personRg, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE'));
        $rg->setJsHint(_M('Informe a identidade (RG)', $module));
        $rg->setAttribute('required', true);
        $bgrFields[] = new MHContainer('rgCnt', array($rgLabel, $rg));
        $validators[] = new MRequiredValidator('personRg', _M('Identidade (RG)', $module));

        // Orgao RG
        $rgOrgaoLabel = new MLabel(_M('Órgão expedidor do RG', $module) . ':');
        $rgOrgaoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $rgOrgaoLabel->setClass('m-caption m-caption-required');
        $rgOrgao = new MTextField('rgOrgan', $data->rgOrgan, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE'));
        $rgOrgao->setJsHint(_M('Informe o órgão expedidor do RG', $module));
        $rgOrgao->setAttribute('required', true);
        $bgrFields[] = new MHContainer('rgOrgaoCnt', array($rgOrgaoLabel, $rgOrgao));
        $validators[] = new MRequiredValidator('rgOrgan', _M('Órgão expedidor do RG', $module));

        $cpfValue = $data->cpf;

        // Field cpf
        $cpfLabel = new MText('cpfLabel', _M('CPF',$module) . ':');
        $cpfLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $cpfLabel->setClass('m-caption m-caption-required');
        $cpf = new MTextField('personCpf', SAGU::NVL($cpfValue, MIOLO::_REQUEST('cpf')), NULL, SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'));
        $cpf->setJsHint(_M('Informe seu CPF',$module));
        $cpf->setAttribute('required', true);
        $cpf->setReadOnly(true);

        $validators[]  = new MCPFValidator('personCpf', _M('CPF',$module), 'required');
        $hctCpf = new MHContainer('hctPerson', array($cpfLabel, $cpf));
        $hctCpf->setShowLabel(true);
        $bgrFields[] = $hctCpf;

        if ( $this->isUpdateFunction() )
        {
            $cpf->setReadOnly(true);
        }
        // Pais de nascimento
        $busCountry = new BusinessBasicBusCountry();
        $countryIdBirthLabel = new MText('countryIdBirthLabel', _M('Nacionalidade', $module) . ':');
        $countryIdBirthLabel->setClass('m-caption m-caption-required');
        $countryIdBirthLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $data->countryIdBirth = ( ($function == 'insert') && (!(strlen($data->countryIdBirth) > 0)) ) ? SAGU::getParameter('BASIC', 'DEFAULT_COUNTRY_ID') : $data->countryIdBirth;
        $countryIdBirth = new MSelection('countryIdBirth', SAGU::NVL($data->countryIdBirth, 'BRA'), null, $busCountry->listCountry());
        $countryIdBirth->setJsHint( _M('Informe sua nacionalidade', $module) );
        $countryIdBirth->setAttribute('required', true);
        $validators[] = new MRequiredValidator('countryIdBirth', _M('Nacionalidade', $module));
        $bgrFields[] = new MHContainer('countryIdBirthHct', array($countryIdBirthLabel, $countryIdBirth));

        // Sexo
        $sexLabel = new MText('sexLabel', _M('Sexo',$module) . ':');
        $sexLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $sexLabel->setClass('m-caption m-caption-required');
        $sex = new MSelection('sex', $data->sex, null, SAGU::listSex());
        $sex->setJsHint(_M('Informe o sexo',$module));
        $sex->setAttribute('required', true);
        $validators[] = new MRequiredValidator('sex', _M('Sexo',$module));
        $bgrFields[] = new MHContainer('sexCnt', array($sexLabel, $sex));

        // Data de nascimento
        $dateBirthLabel = new MText('dateBirthLabel', _M('Data de nascimento', $module) . ':');
        $dateBirthLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $dateBirthLabel->setClass('m-caption m-caption-required');
        $dateBirth = new MCalendarField('dateBirth', SAGU::NVL($dateBirthValue, MIOLO::_REQUEST('data')), null, SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $dateBirth->setJsHint(_M('Informe a data de nascimento', $module));
        $dateBirth->setAttribute('required', true);
        $dateBirth->setReadOnly(true);

        $validators[] = new MDateDMYValidator('dateBirth', _M('Data de nascimento', $module), 'required');
        $validators[] = new MRequiredValidator('dateBirth', _M('Data de nascimento', $module));
        $bgrFields[] = new MHContainer('dateBirthCnt', array($dateBirthLabel, $dateBirth));

        // Nome da mae
        $motherNameLabel = new MText('motherNameLabel', _M('Nome da mãe', $module) . ':');
        $motherNameLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $motherNameLabel->setClass('m-caption m-caption-required');
        $motherName = new MTextField('motherName', $data->motherName, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $motherName->setJsHint( _M('Informe o nome da mãe', $module) );
        $motherName->setAttribute('required', true);
        $validators[] = new MRequiredValidator('motherName', _M('Nome da mãe', $module));
        $bgrFields[] = new MHContainer('motherNameCnt', array($motherNameLabel, $motherName));

        // Nome do pai
        $fatherNameLabel = new MText('fatherNameLabel', _M('Nome do pai', $module) . ':');
        $fatherNameLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $fatherNameLabel->setClass('m-caption m-caption-required');
        $fatherName = new MTextField('fatherName', $data->fatherName, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $fatherName->setJsHint( _M('Informe o nome do pai', $module) );
        $fatherName->setAttribute('required', true);
        $validators[] = new MRequiredValidator('fatherName', _M('Nome do pai', $module));
        $bgrFields[] = new MHContainer('fatherNameCnt', array($fatherNameLabel, $fatherName));

        // Telefone residencial
        $residentialPhoneLabel = new MText('Telefone', _M('Telefone', $module) . ':');
        $residentialPhoneLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $residentialPhoneLabel->setClass('m-caption m-caption-required');
        $residentialPhone = new MTextField('residentialPhone', $data->residentialPhone, 'Telefone', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE'));
        $residentialPhone->setAttribute('required', true);
        $residentialPhone->setJsHint(_M('Informe o telefone celular ou residencial', $module));

        $validators[] = new MRequiredValidator('residentialPhone', _M('Telefone', $module));
        $residentialPhone->label = _M('Telefone', $module);
        $bgrFields[] = new MHContainer('residentialPhoneCnt', array($residentialPhoneLabel, $residentialPhone));

        // Telefone comercial
        $workPhoneLabel = new MText('workPhoneLabel', _M('Telefone comercial', $module) . ':');
        $workPhoneLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $workPhoneLabel->setClass('m-caption m-caption-required');
        $workPhone = new MTextField('workPhone', $data->workPhone, 'Telefone comercial', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE'));
        $workPhone->setJsHint(_M('Informe o telefone comercial', $module));
        $workPhone->setAttribute('required', true);
        $validators[] = new MRequiredValidator('workPhone', _M('Telefone comercial', $module));
        $workPhone->label = _M('Telefone comercial', $module);
        $bgrFields[] = new MHContainer('workPhoneCnt', array($workPhoneLabel, $workPhone));

        // Estado civil
        $busMaritalStatus = new BusinessBasicBusMaritalStatus();
        $maritalStatusLabel = new MText('maritalStatusLabel', _M('Estado civil', $module) . ': ');
        $maritalStatusLabel->setClass('m-caption m-caption-required');
        $maritalStatusLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $maritalStatusId = new MSelection('maritalStatusId', $data->maritalStatusId, '', $busMaritalStatus->listMaritalStatus());
        $maritalStatusId->setAttribute('required', true);
        $maritalStatusId->setJsHint(_M('Selecione o estado civil', $module));
        $validators[] = new MRequiredValidator('maritalStatusId', _M('Estado civil', $module));
        $bgrFields[] = new MHContainer('matiralStatusCnt', array($maritalStatusLabel, $maritalStatusId));

        // Origem etnica
        $busEO = new BusinessBasicBusEthnicOrigin();
        $ethnicOriginIdLabel = new MText('ethnicOriginIdLabel', _M('Origem étnica', $module) . ': ');
        $ethnicOriginIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $ethnicOriginIdLabel->setClass('m-caption m-caption-required');
        $ethnicOriginId = new MSelection('ethnicOriginId', $data->ethnicOriginId, '', $busEO->listEthnicOrigin());
        $ethnicOriginId->setAttribute('required', true);
        $validators[] = new MRequiredValidator('ethnicOriginId', _M('Origem étnica', $module), 'required');
        $bgrFields[] = new MHContainer('ethnicOriginCnt', array($ethnicOriginIdLabel, $ethnicOriginId));

        // Necessidade especial
        $busSN = new BusinessBasicBusSpecialNecessity();
        $specialNecessityLabel = new MText('specialNecessityLabel', _M('Necessidade especial', $module) . ' : ');
        $specialNecessityLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $specialNecessityLabel->setClass('m-caption m-caption-required');
        $specialNecessityOption = strlen($data->specialNecessityId) > 0 ? $data->specialNecessityId : SAGU::getParameter('basic', 'NO_SPECIAL_NECESSITY_ID');
        $specialNecessityId = new MSelection('specialNecessityId', $specialNecessityOption, '', $busSN->listSpecialNecessity());
        $specialNecessityId->setAttribute('required', true);
        $validators[] = new MRequiredValidator('specialNecessityId', _M('Necessidade especial', $module), 'required');
        $bgrFields[] = new MHContainer('specialNecessityCnt', array($specialNecessityLabel, $specialNecessityId));

        // Descricao da necessidade especial
        $specialNecessityDescriptionLabel = new MText('specialNecessityDescriptionLabel', _M('Descrição da necessidade especial', $module) . ':');
        $specialNecessityDescriptionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $specialNecessityDescription = new MTextField('specialNecessityDescription', $data->specialNecessityDescription, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $specialNecessityDescription->setJsHint(_M('Informe a descrição da(s) necessidade(s) especial(is)', $module));
        $bgrFields[] = new MHContainer('specialNecessityDescriptionCnt', array($specialNecessityDescriptionLabel, $specialNecessityDescription));

        $fields[] = new MBaseGroup('bgrGeneralData', _M('Dados gerais', $module), $bgrFields, 'vertical');



        $filters = new stdClass();
        $filters->personId = $data->personId;
        $dadosBancariosDaPessoa = new BusinessFinanceBusDadosBancariosDaPessoa();
        $dadosBancariosDaPessoa = $dadosBancariosDaPessoa->getDadosBancariosDaPessoa($filters);

           $busBank = new BusinessFinanceBusBank();
           $options = $busBank->listBank();

           $bancoPadrao = SAGU::getParameter('BASIC', 'DEFAULT_INVOICE_BANK');

           $dadosBancarioLabel = new MText('dadosBancarioLabel', _M('Banco').':');
           $dadosBancarioLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));

           $dadosBancario = new MSelection('dadosBancario', $this->getFormValue('dadosBancario', $dadosBancariosDaPessoa->dadosBancario > 0 ? $dadosBancariosDaPessoa->dadosBancario : null), null, $options);
           $dadosBancario->addAttribute('onchange', SForm::getAjaxAction('obterCamposAgenciaEConta', 'divDadosBanco', false));
           $dadosBancario->setReadOnly($bloquear);

           $hctDadosBancario = new MHContainer('hctDadosBancario', array($dadosBancarioLabel,$dadosBancario));

           $observacaoLabel = new MText('observacaoLabel', _M('Observação').':');
           $observacaoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
           $observacaoLabel->setClass('m-caption m-caption');
           $observacao = new MMultiLineField('observacao', $this->getFormValue('observacao', strlen($dadosBancariosDaPessoa->observacao) > 0 ? $dadosBancariosDaPessoa->observacao : $dadosBancariosDaPessoa->observacao), null, 100, 5, 31);
           $hctObservacao = new MHContainer('hctObservacao', array($observacaoLabel, $observacao));

           $mDiv = new MDiv('divDadosBanco', $this->obterCamposAgenciaEConta($dadosBancariosDaPessoa));


           $fields[] = new MBaseGroup('bgDadosBancario', _M('Dados bancários'), array($hctDadosBancario, $mDiv, $hctObservacao), null, 'vertical');



        /*
         * DADOS DE ENDEREÇO
         */

        if ( strlen($data->cityId) > 0 )
        {
            $data->changed = 'cityId';
        }
        $divGeographicData = new MDiv('divGeographicData', $this->fillGeographicData($data));

        // Bairro
        $neighborhoodLabel = new MLabel(_M('Bairro', $module) . ':');
        $neighborhoodLabel->setClass('m-caption m-caption-required');
        $neighborhoodLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $neighborhood = new MTextField('neighborhood', $data->neighborhood, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $neighborhood->setJsHint(_M('Informe o logradouro.', $module));
        $neighborhood->setAttribute('required', true);
        $neighborhoodCnt = new MHContainer('neighborhoodCnt', array($neighborhoodLabel, $neighborhood));
        $validators[] = new MRequiredValidator('neighborhood', _M('Bairro',$module));

        // Location type
        $busLocationType = new BusinessBasicBusLocationType();
        $locationTypeIdLabel = new MText('locationTypeIdLabel', _M('Tipo de logradouro',$module) . ':');
        $locationTypeIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $locationTypeIdLabel->setClass('m-caption m-caption-required');
        $locationTypeId = new MSelection('locationTypeId', $data->locationTypeId, '', $busLocationType->listLocationType(), false, '');
        $locationTypeId->setAttribute('required', true);
        $locationTypeId->setJsHint(_M('Informe o tipo de logradouro da pessoa', $module));
        $locationTypeCnt = new MHContainer('locationTypeIdCnt', array($locationTypeIdLabel, $locationTypeId));
        $validators[] = new MRequiredValidator('locationTypeId', _M('Tipo de logradouro',$module));

        // Logradouro
        $locationLabel = new MLabel(_M('Logradouro', $module) . ':');
        $locationLabel->setClass('m-caption m-caption-required');
        $locationLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $location = new MTextField('location', $data->location, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $location->setJsHint(_M('Informe o logradouro.', $module));
        $location->setAttribute('required', true);
        $locationCnt = new MHContainer('locationCnt', array($locationLabel, $location));
        $validators[] = new MRequiredValidator('location', _M('Logradouro',$module));

        // Número
        $numberLabel = new MLabel(_M('Número', $module) . ':');
        $numberLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $numberLabel->setClass('m-caption m-caption-required');
        $number = new MTextField('number', $data->number, null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $number->setJsHint(_M('Informe o número', $module));
        $number->setAttribute('required', true);
        $numberCnt = new MHContainer('numberCnt', array($numberLabel, $number));
        $validators[] = new MRequiredValidator('number', _M('Número',$module));

        // Complemento
        $complementLabel = new MLabel(_M('Complemento', $module) . ':');
        $complementLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $complementLabel->setClass('m-caption');
        $complement = new MTextField('complement', $data->complement, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $complement->setJsHint(_M('Informe o complemento, se houver.', $module));
        $complementCnt = new MHContainer('complementCnt', array($complementLabel, $complement));

        // CEP
        $zipCodeLabel = new MLabel(_M('CEP', $module) . ':');
        $zipCodeLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $zipCodeLabel->setClass('m-caption m-caption-required');
        $zipCode = new MTextField('zipCode', strlen($data->zipCode) > 0 ? substr_replace($data->zipCode, '-', 5, 0) : null, null, SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'), _M("Digite um CEP válido. Ex.: 99999-000", $module));
        $zipCode->setJsHint(_M('Informe o CEP', $module));
        $zipCode->setAttribute('required', true);
        $zipCodeCnt = new MHContainer('zipCodeCnt', array($zipCodeLabel, $zipCode));
        $validators[] = new MCEPValidator('zipCode', _M("CEP", $module), 'required');

        $bsg = new MBaseGroup('bsgGeographicData', _M('Endereço', $module), array($divGeographicData, $neighborhoodCnt, $locationTypeCnt, $locationCnt, $numberCnt, $complementCnt, $zipCodeCnt), 'vertical');
        $fields[] = $bsg;

        $destinationmodule = MIOLO::getCurrentModule();
        $documents = $this->obterDocumentos($destinationmodule);

        if( count($documents) > 0 )
        {
            foreach( $documents as $cod=>$documento )
            {
                if( ($documento->nacionalidade == BasDocumentType::NACIONALIDADE_BRASILEIROS)  || $documento->nacionalidade == BasDocumentType::NACIONALIDADE_TODOS )
                {


                    $businessBasicBusDocument = new BusinessBasicBusDocument();
                    $pessoaDocumento = $businessBasicBusDocument->getDocument($data->personId, $documento->documentTypeId);

                    $docLabel = new MLabel(_M($documento->name, $module) . ':');
                    $docLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );

                    $doc = new MTextField('doc_'.$documento->documentTypeId, $pessoaDocumento->content, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
                    $doc->setJsHint(_M($documento->fillHint, $module));

                    $fldsDoc[] = $docCnt = new MHContainer('docCnt', array($docLabel, $doc));
                    $docCnt->_addStyle('margin-top', '10px');

                    if (in_array($documento->documentTypeId, array(4, 6))) {
                        $docLabel->setClass('m-caption m-caption-required');
                        $doc->setAttribute('required', true);
                        $validators[] = new MRequiredValidator('doc_'.$documento->documentTypeId, _M($documento->name,$module));
                    }

                    // validação para habilitar CRM, caso seja residência médica por padrão o CRM é obrigatório
                    if ($_SERVER['REQUEST_URI'] == '/fichacadastral-multiprofissional') {
                        $habilitaCrm = false;
                    } else {
                        $habilitaCrm = true;
                    }

                    if ($documento->documentTypeId == 3 && $habilitaCrm) {
                        $docLabel->setClass('m-caption m-caption-required');
                        $doc->setAttribute('required', true);
                        $validators[] = new MRequiredValidator('doc_'.$documento->documentTypeId, _M($documento->name,$module));
                    }



                    $docLabel = new MLabel(_M('Observações', $module) . ':');
                    $docLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
                    $docLabel->setClass('m-caption');
                    $doc = new MMultiLineField('obs_'.$documento->documentTypeId, $pessoaDocumento->obs, null, 100, 5, 28);
                    $doc->setJsHint(_M($documento->fillHint, $module));
                    $fldsDoc[] = $docCnt = new MHContainer('docCnt', array($docLabel, $doc));


                }
            }
        }

        if(count($fldsDoc) > 0)
        {
            $bsgDoc = new MBaseGroup('bsgDocumentos', _M('Documentos', $module), $fldsDoc, 'vertical');
            $fields[] = $bsgDoc;
        }
        else
        {
            $bsgDoc = new MBaseGroup('bsgDocumentos', _M('Documentos', $module), array(new MLabel('Nenhum documento solicitado', 'doc' )), 'vertical');
            $fields[] = $bsgDoc;
        }
        $fields[] = new MDiv('divLimbo', null);

        //BaseGroup 3
        //Field work at home
        $workAtHome = new MSelection( 'workAtHome', SAGU::NVL($this->getFormValue('workAtHome',$data->workAtHome), DB_FALSE), _M('Trabalha em casa',$module) );
        $workAtHome->options = SAGU::listYesNo();
        $workAtHome->addAttribute('style', 'width:93px');
        $workAtHome->setJsHint(_M('Informe se a pessoa trabalha em casa',$module));
        $bgrFieldsTra[] = $workAtHome;

        // Field work employer name
        $workEmployerName = new MTextField('workEmployerName', $this->getFormValue('workEmployerName',$data->workEmployerName), _M('Nome da instituição',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $workEmployerName->setJsHint(_M('Informe o nome da instituição',$module));
        $bgrFieldsTra[] = $workEmployerName;

        // Field work funcition
        $workFunction = new MTextField('workFunction', $this->getFormValue('workFunction',$data->workFunction), _M('Cargo',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $workFunction->setJsHint(_M('Informe o cargo',$module));
        $bgrFieldsTra[] = $workFunction;

        // Field work start date
        $workStartDate = new MCalendarField('workStartDate', $this->getFormValue('workStartDate',$data->workStartDate), _M('Início',$module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $workStartDate->setJsHint(_M('Informe a data de início',$module));
        $bgrFieldsTra[] = $workStartDate;

        // Field work end date
        $workEndDate = new MCalendarField('workEndDate', $this->getFormValue('workEndDate',$data->workEndDate), _M('Fim',$module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $workEndDate->setJsHint(_M('Informe a data de fim',$module));
        $bgrFieldsTra[] = $workEndDate;

        // CEP
        $zipCodeWork = new MTextField('zipCodeWork', $this->getFormValue('zipCodeWork',$data->zipCodeWork), _M('CEP',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $zipCodeWork->setJsHint(_M('Informe o CEP do local de trabalho',$module));
        $bgrFieldsTra[] = $zipCodeWork;

        $bgrFieldsTra[] = new MDiv('response', $this->changeData($data));


        // Field location type
        $busLocationType = new BusinessBasicBusLocationType();
        $locationType = new MSelection('locationTypeIdWork', $this->getFormValue('locationTypeIdWork', $data->locationTypeIdWork), _M('Tipo de logradouro',$module), $busLocationType->listLocationType(), false, '');
        $locationType->setJsHint(_M('Informe o tipo de logradouro da pessoa',$module));
        $bgrFieldsTra[] = $locationType;

        // Field location work
        $locationWork = new MTextField('locationWork', $this->getFormValue('locationWork',$data->locationWork), _M('Logradouro',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $locationWork->setJsHint(_M('Informe o local de trabalho',$module));
        $bgrFieldsTra[] = $locationWork;

        // Field complement work
        $complementWork = new MTextField('complementWork', $this->getFormValue('complementWork',$data->complementWork), _M('Complemento',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $complementWork->setJsHint(_M('Informe o complemento do logradouro',$module));
        $bgrFieldsTra[] = $complementWork;

        // Field meighborhood work
        $neighborhoodWork = new MTextField('neighborhoodWork', $this->getFormValue('neighborhoodWork',$data->neighborhoodWork), _M('Bairro',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $neighborhoodWork->setJsHint(_M('Informe o bairro de trabalho',$module));
        $bgrFieldsTra[] = $neighborhoodWork;

        $bsg = new SBaseGroup(null, _M('Trabalho', $module), $bgrFieldsTra);

        $fields[] = $bsg;

        $btnSave = new MButton('tbBtnSave', _M('Finalizar cadastro'));
        $fields[] = new MDiv(null, array($btnSave), null, 'align="center"');

        $residentialPhone->label = '';
        $workPhone->label = '';

        $MIOLO->page->onLoad("document.getElementById('personName').focus()");

        // Disable buttons which won't be used in searches
        $this->toolbar->disableButton('tbBtnPrint');

        if ( $function == 'insert' )
        {
            $this->toolbar->disableButton('tbBtnDelete');
        }
        elseif ( $function == 'delete' )
        {
            $this->toolbar->disableButton('tbBtnSave');
        }

        $this->addFields($fields);
        $this->setValidators($validators);

        SForm::defineFields();
    }

    /**
     * Obtém os campos para montar agencia e conta
     * @param type $args
     * @return type
     */
    public function obterCamposAgenciaEConta($args=null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $data = $this->getTypesData();
        $bankId = $args->dadosBancario;


        if( strlen($bankId) > 0 )
        {
            $busBank = new BusinessFinanceBusBank();
            $banco = $busBank->getBank($bankId);

            $agenciaDigitoLabel = new MText('agenciaDigitoLabel', _M('Agência/Dígito', $module).':');
            $agenciaDigitoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $agenciaDigitoLabel->setClass('m-caption m-caption');

            $agencia = new MTextField('agencia', $this->getFormValue('agencia', $args->agencia), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $validatorsAgencia = new MRequiredValidator('agencia', _M('Agência'), $banco->tamanhoCampoAgencia);
            $validatorsAgencia->min = $banco->tamanhoCampoAgencia;
            $validatorsAgencia->type = 'optional';
            $validatorsAgencia->mask = $banco->mascaraAgencia;

            $digitoAgencia = new MTextField('digitoAgencia', $this->getFormValue('digitoAgencia', $args->digitoAgencia), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $validatorsDigitoAgencia = new MRequiredValidator('digitoAgencia', _M('Dígito(Agência)'), $banco->tamanhoDvAgencia);
            $validatorsDigitoAgencia->min = $banco->tamanhoDvAgencia;
            $validatorsDigitoAgencia->type = 'optional';

            $validators[] = $validatorsAgencia;
            $validators[] = $validatorsDigitoAgencia;

            $fld[] = $hctAgenciaDigito = new MHContainer('hctAgenciaDigito', array($agenciaDigitoLabel, $agencia, $digitoAgencia));

            $contaDigitoLabel = new MText('contaDigitoLabel', _M('Conta/Dígito', $module).':');
            $contaDigitoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $contaDigitoLabel->setClass('m-caption m-caption');

            $conta = new MTextField('conta', $this->getFormValue('conta', $args->conta), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $validatorsConta = new MRequiredValidator('conta', _M('Conta'), $banco->tamanhoCampoConta);
            $validatorsConta->min = $banco->tamanhoCampoConta;
            $validatorsConta->type = 'optional';
            $validatorsConta->mask = $banco->mascaraConta;

            $digitoConta = new MTextField('digitoConta', $this->getFormValue('digitoConta', $args->digitoConta), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $validatorsDigitoConta = new MRequiredValidator('digitoConta', _M('Dígito(Conta)'), $banco->tamanhoDvConta);
            $validatorsDigitoConta->min = $banco->tamanhoDvConta;
            $validatorsDigitoConta->type = 'optional';

            $validators[] = $validatorsConta;
            $validators[] = $validatorsDigitoConta;

            $fld[] = $hctAgenciaDigito = new MHContainer('hctContaDigito', array($contaDigitoLabel,$conta, $digitoConta));

            $this->setValidators($validators);
        }

        return strlen($bankId) > 0 ? $fld : null;
    }

    /**
     * Lista documentos de determinado modulo de destino conforme configurado
     * no cadastro de tipos de documento
     * @param type $module
     * @return type
     */
    public function obterDocumentos($module)
    {
        if( strlen($module) > 0 )
        {
            $busdocumenttype = new BusinessBasicBusDocumentType();

            $filters = new stdClass();
            if( $module == 'pedagogico' )
            {
                $filters->registroModuloPedagogico = DB_TRUE;
            }
            if( $module == 'residency' )
            {
                $filters->registroModuloResidency = DB_TRUE;
            }
            if( $module == 'resmedica' )
            {
                $filters->registroModuloResmedica = DB_TRUE;
            }
            $documents = $busdocumenttype->searchDocumentType($filters);
            foreach($documents as $cod=>$document)
            {
                $return[] = $busdocumenttype->getDocumentType($document[0]);
            }
        }

        return $return;
    }


    /**
     * Instancia os campos para seleção de país, Estado e cidade. Aceita como parâmetro
     * um país, um Estado e/ou uma cidade. Para que seja renderizado corretamente, deve
     * ser utilizado também o parâmetro changed, que assume o valor de um dos campos (countryId,
     * stateId ou cityId). Este parâmetro é utilizado para definir quais dados o componente
     * carregará no momento de sua carga.
     *
     * @param (stdClass) $inArgs Vide descrição da função para saber como utilizar.
     * @return MHContainer Retorna um objeto MHContainer com os campos de local que serão instanciados.
     */
    public function fillGeographicData($inArgs)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // utilizar somente campos úteis.
        $args = new stdClass();
        $args->countryId = $inArgs->countryId;
        $args->stateId = $inArgs->stateId;
        $args->cityId = $inArgs->cityId;
        $args->changed = $inArgs->changed;

        $busCountry = new BusinessBasicBusCountry();
        $busState = new BusinessBasicBusState();
        $busCity = new BusinessBasicBusCity();

        // se o que mudou foi a cidade
        if ( $args->changed == 'cityId' )
        {
            if ( strlen($args->cityId) > 0 )
            {
                $city = $busCity->getCity($args->cityId);

                $args->stateId = $city->stateId;
                $args->countryId = $city->countryId;
            }
                $destinationmodule = MIOLO::getCurrentModule();

                $city = $busCity->getCity($args->cityId);

        }
        // se o que mudou foi o estado
        elseif ( $args->changed == 'stateId' )
        {
            // limpa todos os campos
            $args->cityId = '';
        }
        // se o que mudou foi o país
        elseif ( $args->changed == 'countryId' )
        {
            // limpa todos os campos
            $args->cityId = '';
            $args->stateId = '';
        }
        else
        {
            // limpa todos os campos
            $args->cityId = '';
            $args->stateId = '';
            $args->countryId = SAGU::getParameter('BASIC', 'DEFAULT_COUNTRY_ID');
        }

        // carregar países
        $filters = new stdClass();
        $filters->name = '%';

        $countries = $busCountry->searchCountry($filters);

        // carregar estados
        $filters = new stdClass();
        $filters->countryId = $args->countryId;

        $states = $busState->searchState($filters);

        // carregar cidades
        if ( strlen($args->stateId) > 0 || count($states) == 0 )
        {
            if ( strlen($args->stateId) > 0 )
            {
                $filters->stateId = $args->stateId;
            }
            $cities = $busCity->searchCity($filters);
        }

        /*
         * Instanciar todos os campos do componente
         */

        $fields = array();

        $lblCountryId = new MLabel(_M('País', $module) . ': ');
        $lblCountryId->setClass('m-caption m-caption-required');
        $lblCountryId->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $txtCountryId = new MSelection('countryId', SAGU::NVL($args->countryId,'BRA'), null, $countries);
        $txtCountryId->addAttribute('onchange', self::getAjaxAction('fillGeographicData', 'divGeographicData', false, array('changed' => 'countryId')));
        $fields[] = new MHContainer('hctCountry', array($lblCountryId, $txtCountryId));

        $validators[] = new MRequiredValidator('countryId', _M('País', $module));

        $lblStateId = new MLabel(_M('Estado', $module) . ': ');
        $lblStateId->setClass('m-caption m-caption-required');
        $lblStateId->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $txtStateId = new MSelection('stateId', $args->stateId, null, $states);
        $txtStateId->addAttribute('onchange', self::getAjaxAction('fillGeographicData', 'divGeographicData', false, array('changed' => 'stateId')));
        $txtStateId->addAttribute('required', true);
        $fields[] = new MHContainer('hctCountry', array($lblStateId, $txtStateId));

        $validators[] = new MRequiredValidator('stateId', _M('Estado', $module));

        $lblCityId = new MLabel(_M('Cidade', $module) . ': ');
        $lblCityId->setClass('m-caption m-caption-required');
        $lblCityId->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $txtCityId = new MSelection('cityId', $args->cityId, null, $cities);
        $txtCityId->addAttribute('required', true);
        $fields[] = new MHContainer('hctCountry', array($lblCityId, $txtCityId));

        $validators[] = new MRequiredValidator('cityId', _M('Cidade', $module));

        $this->SetValidators($validators);

        return $fields;
    }

    public function getTypesData()
    {
        $data = parent::getTypesData();
        $data->name = $data->personName;
        $data->zipCode = str_replace('-', '', $data->zipCode);

        return $data;
    }

    public function tbBtnSave_click($sender = NULL)
    {
        try
        {
            SDatabase::beginTransaction();

            $ok = $this->saveTypeData();

            SDatabase::commit();

            $this->isUpdateFunction() ? $this->displayMessageUpdate() : $this->displayMessageInsert();
        }
        catch (Exception $e)
        {
            SDatabase::rollback();

            $this->AddError($e->getMessage());
        }
    }

    public function saveTypeData($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $ok = true;

        $data = $this->getTypesData();

        if ( BasPessoa::verificaEmail($data->email, $data->personId) == DB_TRUE )
        {
            throw new Exception(_M("O e-mail {$data->email} já está sendo utilizado por outra pessoa. Favor informe um outro endereço de e-mail ou entre em contato conosco."));
        }

        if ($data->personId == null) {
            $personId = $this->_personId = parent::saveTypeData($sender);
        } else {
            $businessBasicBusPhysicalPerson = new BusinessBasicBusPhysicalPerson();
            $businessBasicBusPhysicalPerson->updatePhysicalPerson($data);

            $personId = $this->_personId = $data->personId;
        }


        //Salva documento
        $destinationmodule = MIOLO::getCurrentModule();
        $documentos = $this->obterDocumentos($destinationmodule);
        if( count($documentos) > 0 )
        {
            $busDocument = new BusinessBasicBusDocument();
            foreach($documentos as $cod=>$documento)
            {
                $data = new stdClass();
                $data->personId = $personId;
                $data->content = MIOLO::_REQUEST('doc_'.$documento->documentTypeId);
                $data->obs = MIOLO::_REQUEST('obs_'.$documento->documentTypeId);
                $data->documentTypeId = $documento->documentTypeId;
                $ok &= $busDocument->insertOrUpdateDocument($data);
            }
        }

        //Salva dados bancários
        $dataBank = new stdClass();
        $dataBank->personId = $data->personId;
        $busDadosBancariosDaPessoa = new BusinessFinanceBusDadosBancariosDaPessoa();
        $dados = $busDadosBancariosDaPessoa->getDadosBancariosDaPessoa($dataBank);

        $dataBank->agencia = MIOLO::_REQUEST('agencia');
        $dataBank->digitoDaAgencia = MIOLO::_REQUEST('digitoAgencia');
        $dataBank->conta = MIOLO::_REQUEST('conta');
        $dataBank->digitoDaConta = MIOLO::_REQUEST('digitoConta');
        $dataBank->bankId = MIOLO::_REQUEST('dadosBancario');
        $dataBank->observacao = MIOLO::_REQUEST('observacao');



        if( $dados->personId > 0 )
        {
            $busDadosBancariosDaPessoa->updateDadosBancariosDaPessoa($dataBank);
        }
        else
        {
            $busDadosBancariosDaPessoa->insertDadosBancariosDaPessoa($dataBank);
        }
        return $ok;
    }

    /**
     *
     * @return basPhysicalPerson
     */
    public function obterPessoaInserida()
    {
        $busPhysical = new BusinessBasicBusPhysicalPerson();

        return $busPhysical->getPhysicalPerson( $this->_personId );
    }

    public function displayMessageInsert()
    {
        $MIOLO = MIOLO::getInstance();
        $module = 'resmedica';

        $this->toolbar->hideButton('tbBtnPrint');
        $this->toolbar->hideButton('tbBtnDelete');
        $this->toolbar->hideButton('tbBtnSave');
        $this->toolbar->hideButton('tbBtnSearch');
        $this->toolbar->hideButton('tbBtnClose');
        $this->toolbar->hideButton('tbBtnNew');

        $msg = _M('Registro efetuado com sucesso.');

        $goto = SForm::getReturnTo();

        $MIOLO->information($msg, $goto);
    }

    public function enviarEmail()
    {
        $busEmail = new BusinessBasicBusEmail();
        $busCompany = new BusinessBasicBusCompany();

        $pessoa = $this->obterPessoaInserida();

//        $dataEmail = $busEmail->getEmail($this->selectiveProcess->subscriptionEmailId);
        $dataCompany = $busCompany->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));

        $busUser = new BusinessAdminBusUser();
        $user = $busUser->getUserByLogin($pessoa->mioloUserName);

        $tags = array(
            '$LOGIN' => $pessoa->mioloUserName,
            '$PASSWORD' => $this->getRequestValue('mioloUserPasswd'),
        );

        // Parameters
        $from = SAGU::getParameter('PEDAGOGICO', 'EMAIL_FROM_DEFAULT');
        $fromName = $dataCompany->acronym;
        $recipient[$pessoa->name] = strtolower($pessoa->email);
        $subject = _M('Confirmação de registro');

        $body = SAGU::getParameter('BASIC', 'EMAIL_INSCRICAO_MENSAGEM');
        $body = strtr($body, $tags);

        if ( true )
        {
            $mail = new sendEmail($from, $fromName, $recipient, $subject, $body, array());
            $emailSent = $mail->sendEmail();
        }
        else // debug mode
        {
            flog($body);
        }
    }


    public function changeData($inArgs)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $busCountry = new BusinessBasicBusCountry();
        $busState = new BusinessBasicBusState();
        $busCity = new BusinessBasicBusCity();

        if (empty($inArgs->stateIdWork)) {
            $city = $busCity->getCity($inArgs->cityIdWork);
            $inArgs->stateIdWork = $city->stateId;
        }

        // utilizar somente campos úteis.
        $args = new stdClass();
        $args->stateIdWork = $inArgs->stateIdWork;
        $args->cityIdWork = $inArgs->cityIdWork;
        $args->changed = $inArgs->changed;

        // se o que mudou foi a cidade
        if ( $args->changed == 'cityIdWork' )
        {
            if ( strlen($args->cityIdWork) > 0 )
            {
                $city = $busCity->getCity($args->cityIdWork);

                $args->stateIdWork = $city->stateId;
            }
        }
        // se o que mudou foi o estado
        elseif ( $args->changed == 'stateIdWork' )
        {
            // limpa todos os campos
            $args->cityIdWork = '';
        }


        // carregar países
        $filters = new stdClass();
        $filters->name = '%';

        $states = $busState->searchState($filters);
        // carregar cidades
        if ( strlen($args->stateIdWork) > 0 || count($states) == 0 )
        {
            if ( strlen($args->stateIdWork) > 0 )
            {
                $filters->stateId = $args->stateIdWork;
            }
            $cities = $busCity->searchCity($filters);
        }


        $lblStateIdWork = new MLabel(_M('Estado', $module) . ': ');
        $lblStateIdWork->setClass('m-caption');
        $lblStateIdWork->setWidth(150);
        $txtStateIdWork = new MSelection('stateIdWork', $args->stateIdWork, null, $states);
        $txtStateIdWork->addAttribute('onchange', self::getAjaxActionWork('stateIdWork'));
        $fields[] = new MHContainer('hctCountry', array($lblStateIdWork, $txtStateIdWork));

        $lblCityIdWork = new MLabel(_M('Cidade', $module) . ': ');
        $lblCityIdWork->setClass('m-caption');
        $lblCityIdWork->setWidth(150);
        $txtCityIdWork = new MSelection('cityIdWork', $args->cityIdWork, null, $cities);
        $fields[] = new MHContainer('hctCountry', array($lblCityIdWork, $txtCityIdWork));

        return $fields;

    }

    public static function getAjaxActionWork($changed)
    {
        return SForm::getAjaxAction('changeData', 'response', false, array('changed' => $changed));
    }
}
?>
