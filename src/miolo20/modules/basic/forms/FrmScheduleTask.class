<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 12/05/2011
 *
 */
class FrmScheduleTask extends SForm
{
    /**
     * Construct
     */
    public function __construct($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        parent::__construct(_M('Tarefas agendadas', $module), null, null);

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event = MIOLO::_request('event');
        
        $result = BasCrontabLog::verificaCrontabLog(1);
        if( !$result )
        {
            $this->AddAlert(_M('Para que os agendamentos funcionem é necessário configurar a crontab (/etc/crontab), inserindo a seguinte linha:<br> 0 0 * * * root php (diretório do sagu)/miolo20/modules/basic/classes/scrontab.php -c <br>
                                    Se você já configurou, espere 1 dia para validar.', $module));            
        }

        if (in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)))
        {
            $systemTaskId = MIOLO::_REQUEST('systemTaskId');
            $fields[] = new MHiddenField('systemTaskId', $systemTaskId);
            $data = $this->busObject->getBasSystemTask($systemTaskId);
        }
        
        //Tabs com módulos cadastrados
        $fields[] = $tab = new MTabbedBaseGroup('modules');

        //Lista de módules
        $listModules = BasSystemTask::listModules();

        //Percorre cada módulo e adiciona as configurações referentes a cada módulo na tab
        foreach ( $listModules as $moduleName )
        {
            //Lista as tarefas para o módulo
            $filters = new stdClass();
            $filters->moduleName = $moduleName;
            $listSystemTaskByModule = BasSystemTask::search($filters);

            //Percorre as tarefas do módulo
            foreach ( $listSystemTaskByModule as $systemTask )
            {
                //Código da configuração da tarefa
                $baseGroupTask[] = new MHiddenField('systemTaskId'.$id, $systemTask->systemTaskId);

                $id = $systemTask->systemTaskId;
                $ids['exibeMetodoId'.$id] = $id;
                
                if ( strlen($systemTask->observation) > 0 )
                {
                    //Observação
                    $gfields = new sGenericFields();
                    $baseGroupTask[] = new MHContainer('observationCnt'.$id, array($gfields->labelDica($systemTask->observation . '  ')), null, true);
                }
                
                //Pendência
                $taskConfigLabel = new MLabel(_M('Configuração de pendência',$module).':');
                $taskConfigLabel->setClass('m-caption m-caption-required');
                $taskConfigLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
                $configId = 'taskConfigId'.$id;
                $taskConfigid = new MLookupTextField('taskConfigId'.$id, $this->getFormValue($configId, $systemTask->taskConfigId), NULL, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), NULL, NULL, 'taskConfigDescription'.$id, $module, 'taskConfig', NULL, NULL, true);
                $taskConfigid->setJsHint(_M('Informe o código da configuração da tarefa', $module));
                $taskConfigidDescription = new MTextField('taskConfigDescription'.$id, '', NULL, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), NULL, true);
                $taskConfigidDescription->setReadOnly(true);
                $taskConfigid = new MHContainer('taskConfigidCnt'.$id, array($taskConfigLabel, $taskConfigid, $taskConfigidDescription), null, true);
                $baseGroupTask[] = $taskConfigid;

                //Tipo de notificação
                $notificationTypeLabel = new MLabel(_M('Tipo de notificação',$module).':');
                $notificationTypeLabel->setClass('m-caption m-caption-required');
                $notificationTypeLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
                $notificationType = new MSelection('notificationMethod'.$id, $systemTask->notificationMethod, null, BasSystemTask::listNotificationType());
                $notificationType->setJsHint(_M('Informe como deseja notificar a tarefa', $module));
                $baseGroupTask[] = new MHContainer('hctNotificationType'.$id, array($notificationTypeLabel, $notificationType));

                //Intervalo de notificação
                $notificationIntervalLabel = new MLabel(_M('Intervalo de notificação',$module).':');
                $notificationIntervalLabel->setClass('m-caption m-caption-required');
                $notificationIntervalLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
                $notificationInterval = new MTextField('notificationInterval'.$id, $systemTask->notificationInterval, null, 10);
                $notificationInterval->setJsHint(_M('Informe o intervalo em que a notificação será enviada ( 0 = Executa toda vez que a crontab for chamada, 1 = Executa uma vez por dia, 2 = Executa a cada dois dias... )', $module));
                $notificationIntervalHint = new MLabel(_M('dias',$module));
                $baseGroupTask[] = new MHContainer('hctNotificationInterval'.$id, array($notificationIntervalLabel, $notificationInterval, $notificationIntervalHint));

                //Chamar metodo
                $callMethodLabel = new MLabel( _M('Chamar método', $module) . ':');
                $callMethodLabel->setClass('m-caption m-caption-required');
                $callMethodLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
                $callMethod = new MTextField('callMethod'.$id, $systemTask->callMethod, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
                $callMethod->setJsHint(_M('Nome da classe e método que será chamado quando esta tarefa de sistema for executada. Sempre estará no formato className::method (sem os parênteses)', $module));
                
                $args->executarAgora = $id;
                $executarAgora = new MButton('executarAgora'.$id, _M('Executar agora', $module), SForm::getAjaxAction('executarMetodo', 'divExecutarMetodo', false, $args));
                
                $baseGroupTask[] = new MHContainer('callMethodCnt'.$id, array($callMethodLabel, $callMethod, $executarAgora));
                
                // Campo Email
                $emailIdLabel = new MLabel( _M('E-mail', $module) . ':');
                $emailIdLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
                $emailId = new SLookupContainer('emailId' . $id, $systemTask->emailId, array(
                    'item' => 'Email',
                    'related' => "emailId{$id}Description",
                    'hint' => _M('E-mail utilizado para notificações', $module),
                ));
                $baseGroupTask[] = new MHContainer('emailCnt' . $id, array($emailIdLabel, $emailId));

                //Esta ativo
                $enabledLabel = new MLabel(_M('Ativo',$module).':');
                $enabledField = 'enabledTask'.$id;
                $enabledLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
                $enabled = new MCheckBox('enabledTask'.$id, DB_TRUE, null, ($systemTask->enabledTask == DB_TRUE));
                $enabled->addAttribute('onchange', SForm::getAjaxAction('exibeExecutarMetodo', 'divValidaMetodo', false, array('exibeMetodoId'.$id => $id)));
                $baseGroupTask[] = new MHContainer('hctEnable'.$id, array($enabledLabel, $enabled));
                                
                //Validadores
                $validators[] = new MRequiredValidator('taskConfigId' . $id, _M('Configuração da tarefa da tarefa ', $module) . $systemTask->description, 'required');
                $validators[] = new MIntegerValidator('notificationInterval' . $id, _M('Intervalo de notificação da tarefa ',$module) . $systemTask->description, 'required');
                $validators[] = new MRequiredValidator('notificationMethod' . $id, _M('Tipo de notificação da tarefa ',$module) . $systemTask->description);
                $validators[] = new MRequiredValidator('callMethod' . $id, _M('Chamar método da tarefa ',$module) . $systemTask->description);
                $validators[] = new MIntegerValidator('emailId' . $id, _M('E-mail da tarefa ', $module) . $systemTask->description );
                
                $fieldsTab[] = new MBaseGroup($systemTask->systemTaskId, $systemTask->description, $baseGroupTask, 'vertical');
                unset($baseGroupTask);
            }

            $tab->createTab('tab'.$moduleName, $moduleName, $fieldsTab);
            unset($fieldsTab);
        }
        
        $fields[] = new MDiv('divExecutarMetodo');
        $fields[] = new MDiv('divValidaMetodo', $this->exibeExecutarMetodo($ids));
        
        $this->SetValidators($validators);
        $this->setFields($fields);
        parent::defineFields();
    }
    
    public function exibeExecutarMetodo($systemTaskIds = array())
    {
        $MIOLO = MIOLO::getInstance();
        
        foreach ( $systemTaskIds as $key => $id )
        {
            if ( $key == 'exibeMetodoId'.$id )
            {
                $enabledTask = 'enabledTask' . $id;
                $executarAgora = 'executarAgora' . $id;
                
                $jsCode = " var ativo = document.getElementById('$enabledTask').checked;
                            if ( ativo == true )
                            {
                                document.getElementById('$executarAgora').style.display = 'block';
                            }
                            else
                            {
                                document.getElementById('$executarAgora').style.display = 'none';
                            }  ";

                if ( $systemTaskIds->phpFunction == 'exibeExecutarMetodo' )
                {
                    $MIOLO->page->addAJAXJsCode($jsCode);
                }
                else
                {
                    $MIOLO->page->onload($jsCode);  
                }
            }
        }
    }
    
    public function executarMetodo($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        $systemTaskId = $args->executarAgora;
                
        $result = BasSystemTask::generateTasks($systemTaskId);
        
        if ( $result )
        {
            $this->addInfo(_M('Tarefa executada com sucesso.', $module));
        }
        else
        {
            $this->addError(_M('A tarefa agendada não pode ser executada.', $module));
            
        }
        
        return '';
    }


    /**
     * Obtém os dados do formulário
     * @return stdClass
     */
    public function  getTypesData()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $data = new stdClass();
        $systemTasks = array();

        //Lista de módules
        $listModules = BasSystemTask::listModules();

        //Percorre cada módulo e adiciona as confurações referêntes a cada módulo na tab
        foreach ( $listModules as $moduleName )
        {
            //Lista as tarefas para o módulo
            $filters = new stdClass();
            $filters->moduleName = $moduleName;
            $listSystemTaskByModule = BasSystemTask::search($filters);

            //Percorre as tarefas do módulo
            foreach ( $listSystemTaskByModule as $systemTask )
            {
                $id = $systemTask->systemTaskId;

                $systemTaskObject = new stdClass();
                $systemTaskObject->systemTaskId = $id;
                $systemTaskObject->taskConfigId = MIOLO::_REQUEST('taskConfigId'.$id);
                $systemTaskObject->notificationMethod = MIOLO::_REQUEST('notificationMethod'.$id);
                $systemTaskObject->notificationInterval = MIOLO::_REQUEST('notificationInterval'.$id);
                $systemTaskObject->enabledTask = MIOLO::_REQUEST('enabledTask'.$id);
                $systemTaskObject->description = $systemTask->description;
                $systemTaskObject->callMethod = MIOLO::_REQUEST('callMethod'.$id);
                $systemTaskObject->emailId = MIOLO::_REQUEST('emailId'.$id);

                $systemTasks[] = $systemTaskObject;
            }
        }
        $data->systemTasks = $systemTasks;

        return $data;
    }

    
    /**
     * Ação do botão salvar
     **/
    public function tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        //Obtém os dados do formuário
        $data = $this->getTypesData();

        try
        {
            SDatabase::beginTransaction();

            //Array das configurações
            $systemTasks = $data->systemTasks;
            foreach ( $systemTasks as $line )
            {
                $systemTask = new BasSystemTask($line->systemTaskId);

                $filters = new stdClass();
                $filters->taskConfigId = $line->taskConfigId;
                $searchTaskConfig = BasTaskConfig::search($filters);

                if ( count($searchTaskConfig) == 0 )
                {
                    $message = _M('Configuração de pendência inválida na tarefa @1',$module, $line->description).'.';
                    throw new Exception($message);
                }

                if ( in_array($line->notificationMethod, array(BasSystemTask::NOTIFICATION_BY_EMAIL, BasSystemTask::NOTIFICATION_BY_EMAIL_AND_TASK)) &&
                       (strlen($line->emailId) <= 0) )
                {
                    throw new Exception( _M('Deve ser preenchido um e-mail para a tarefa @1', $module, $line->description) );
                }

                $systemTask->taskConfigId = $line->taskConfigId;
                $systemTask->notificationMethod = $line->notificationMethod;
                $systemTask->notificationInterval = $line->notificationInterval;
                $systemTask->enabledTask = $line->enabledTask == DB_TRUE ? DB_TRUE : DB_FALSE;
                $systemTask->callMethod = $line->callMethod;
                $systemTask->emailId = $line->emailId;

                //Salva os dados da configuração da tarefa
                $systemTask->save();
            }

            SDatabase::commit();

            $msg = _M('Registros atualizados com sucesso deseja modificar alguma tarefa',$module) . '?';

            $gotoYes = $MIOLO->getActionURL($module, $action, null, array('function'=>'search'));
            $gotoNo = $MIOLO->getActionURL($module, 'main:config');
            SAGU::question($msg, $gotoYes, $gotoNo);
        }
        catch (Exception $e)
        {
            SDatabase::rollback();
            $this->AddError( $e->getMessage() );
        }
    }
}
?>