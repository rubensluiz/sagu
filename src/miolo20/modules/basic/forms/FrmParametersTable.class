<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Parameters table form
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 15/08/2005
 *
 **/
MIOLO::uses('/ui/controls/msubdetail.class');

/**
 * Form to manipulate a config
 **/
class FrmParametersTable extends SManagementForm
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new BasConfig(), array('moduleConfig', 'parameter'), 'BusConfig');
        
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $unitConfig = null;
        $basUnitConfig = new BasUnitConfig();
        $multiUnidade = sMultiUnidade::estaHabilitada() && sMultiUnidade::temUnidadeLogada();
        
        if ( in_array($function,array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $pk = $this->getObjectPk();

            $moduleConfig = $pk->moduleConfig;
            $fields[] = new MTextLabel('moduleConfig', $moduleConfig, _M('Módulo',$module));
            $fields[] = new MHiddenField('moduleConfig', $moduleConfig);

            $parameter = $pk->parameter;
            $fields[] = new MTextLabel('parameter', $parameter, _M('Parâmetro',$module));
            $fields[] = new MHiddenField('parameter', $parameter);

            $business = new BusinessBasicBusConfig();
            $data = $business->getConfig($moduleConfig, $parameter);

            if ( $multiUnidade )
            {
                $unitConfig = BasUnitConfig::findByPks($moduleConfig, $parameter, sMultiUnidade::obterUnidadeLogada());
            }
        }
        else
        {
            // Module Field
            $business = new BusinessBasicBusConfig();
            $moduleConfig = new MComboBox('moduleConfig', $this->moduleConfig->value, _M('Módulo',$module), $business->listModules());
            $moduleConfig->setJsHint(_M('Escolha o módulo',$module));
            $fields[] = $moduleConfig;
            $validators[] = new MRequiredValidator('moduleConfig');

            // Parameter Field
            $parameter = new MTextField('parameter', $this->parameter->value, _M('Parâmetro',$module), 20);
            $parameter->setJsHint(_M('Informe o parâmetro do módulo',$module));
            $fields[] = $parameter;
            $validators[] = new MRequiredValidator('parameter');
        }
        
        // Field Value
        $value = new MMultiLineField('value', $this->getFormValue('value', $data->value), _M('Valor',$module), 20, 5, 40);
        $value->setJsHint(_M('Informe o valor do parâmetro',$module));
        $fields[] = $value;

        // Field Short Description
        $shortDescription = new MTextField('label', $this->getFormValue('label',$data->label), _M('Abreviatura',$module), 60);
        $shortDescription->setJsHint(_M('Informe uma breve descrição do parâmetro',$module));
        $validators[] = new MRequiredValidator('label');
        $fields[] = $shortDescription;

        // Field Description
        $description = new MMultiLineField('description', $this->getFormValue('description',$data->description), _M('Descrição',$module), 40, 5, 40);
        $description->setJsHint(_M('Informe a descrição do parâmetro',$module));
        $validators[] = new MRequiredValidator('description');
        $fields[] = $description;

        // Field Type
        $business = new BusinessBasicBusConfig();
        $type = new MComboBox('type', $this->getFormValue('type',$data->type), _M('Tipo do campo',$module), $business->listTypes());
        $type->setJsHint(_M('Informe o tipo de campo',$module));
        $validators[] = new MRequiredValidator('type');
        $fields[] = $type;
        
        // Field GroupBy
        $groupbyDescription = new MTextField('groupBy', $this->getFormValue('groupBy',$data->groupBy), _M('Agrupar por',$module), 60);
        $groupbyDescription->setJsHint(_M('Informe um agrupamento',$module));
        $groupbyDescription->setReadOnly(true);
        $fields[] = $groupbyDescription;
        
        // Field OrderBy
        $orderbyDescription = new MTextField('orderBy', $this->getFormValue('orderBy',$data->orderBy), _M('Ordenar por',$module), 60);
        $orderbyDescription->setJsHint(_M('Informe uma ordenação',$module));
        $orderbyDescription->setReadOnly(true);
        $fields[] = $orderbyDescription;
        
        // Subdetail parametros por unidade
        if ( $multiUnidade && ( $this->isDeleteFunction() || $this->isUpdateFunction() ) )
        {
            $columns = array();
            
            $sFields[] = new SHiddenField('basunitconfig.unitconfigid');
            
            if (sMultiUnidade::estaHabilitada())
            {
                $unidades = sMultiUnidade::obterUnidades();
                
                $sFields[] = new MSelection('basunitconfig.unitid', null, _M('Unidade'), $unidades);
                $sValidators[] = new MSubDetailUniqueValidator('basunitconfig.unitid', _M('Unidade'), 'required');
                
                $columns[] = new MGridColumn(_M('Unidade', $module), 'left', true, '', true, 'basunitconfig.unitid', null, $unidades);
            }
            
            $columns[] = new MGridColumn(_M('Valor', $module), 'left', true, '', true, 'basunitconfig.value');
            $sValidators[] = new MRequiredValidator('basunitconfig.value', _M('Valor'));
            
            // Default value
            $valor = new MMultiLineField('basunitconfig.value', null, 'Valor', 20, 5, 40);
            $valor->setJsHint(_M('Este é o valor padrão utilizado pelo sistema (não específico da unidade).', $module));
            $sFields[] = $valor;
            
            $fields[] = $sub = new MSubDetail('units', _M('Configuração por Unidade', $module), $columns, $sFields);
            $sub->setValidators($sValidators);

            // Subdetail related
            if ( !$MIOLO->page->isPostBack() && !$this->estaEmUmEvento() )
            {
                MSubDetail::clearData('units');

                $sub->setData( $basUnitConfig->listarPorUnidade($moduleConfig, $parameter) );
            }
        }
        else
        {
            MSubDetail::clearData('units');
        }

        parent::defineFields($fields, $validators, $data);
    }
    
    public function afterSave()
    {
        $basUnitConfig = new BasUnitConfig();
        $configs = (array) MSubDetail::getData('units');
        
        foreach ( $configs as $row )
        {
            $values = (array) $row;
            
            $valorChave = $values['basunitconfig.unitconfigid'];

            if ( $row->removeData )
            {
                if ( strlen($valorChave) > 0 )
                {
                    $uc = new BasUnitConfig($valorChave);
                    $uc->delete();
                }
            }
            else
            {
                $uc = new BasUnitConfig($valorChave);
                $uc->setValuesFromArray($values);
                $uc->save();
            }
        }
        
        parent::afterSave();
    }
}
?>
