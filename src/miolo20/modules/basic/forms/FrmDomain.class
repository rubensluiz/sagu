<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Domain type form
 *
 * @author Jonas Guilherme Dahmer [jonas@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Guilherme Dahmer [jonas@solis.coop.br]
 *
 * @since
 * Class created on 01/08/2012
 *
 **/

/**
 * Form to manipulate a location
 **/
class FrmDomain extends SManagementForm
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new BasDomain(), array('domainId', 'sequence'));
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $domainId = MIOLO::_request('domainId');
        $sequence = MIOLO::_request('sequence');
        
        if( strlen($domainId)>0 && strlen($sequence)>0)
        {
            $data = new BasDomain($domainId, $sequence);
        }
        
        $fields[] = $domainId = new MTextField('domainId', $this->getFormValue('domainId', $data->domainId), _M('Domínio', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $domainId->addAttribute('maxlength', '100');
        $domainId->setJsHint(_M('Informe o domainId', $module));
        
        if($function==SForm::FUNCTION_UPDATE)
        {
            $domainId->setReadOnly(true);
        }
        
        $fields[] = $sequence = new MTextField('sequence', $this->getFormValue('sequence', $data->sequence), _M('Sequencia', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $sequence->setJsHint(_M('Informe o sequence', $module));
        
        if($function==SForm::FUNCTION_UPDATE)
        {
            $sequence->setReadOnly(true);
        }
        
        $fields[] = $key = new MTextField('key', $this->getFormValue('key', $data->key), _M('Chave', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $key->addAttribute('maxlength', '100');
        $key->setJsHint(_M('Informe o key', $module));
        
        $fields[] = $abbreviated = new MTextField('abbreviated', $this->getFormValue('abbreviated', $data->abbreviated), _M('Abreviatura', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $abbreviated->addAttribute('maxlength', '100');
        $abbreviated->setJsHint(_M('Informe o abbreviated', $module));
        
        $fields[] = $label = new MTextField('label', $this->getFormValue('label', $data->label), _M('Etiqueta', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $label->addAttribute('maxlength', '255');
        $label->setJsHint(_M('Informe o label', $module));
        
        $validators[] = new MRequiredValidator('domainId');
        $validators[] = new MIntegerValidator('sequence', '', 'required');
        $validators[] = new MRequiredValidator('key');
        $validators[] = new MRequiredValidator('abbreviated');
        $validators[] = new MRequiredValidator('label');
        
        parent::defineFields($fields, $validators, $data);
    }

}
?>
