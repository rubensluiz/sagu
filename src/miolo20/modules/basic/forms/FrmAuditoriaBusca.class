<?php
/**
 * <--- Copyright 2005-2012 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário de auditoria.
 *
 * @author Nataniel I. da Silva [nataniel@solis.coop.br]
 *
 * @since
 * Class created on 13/01/2014
 * 
 */

$MIOLO->uses('classes/auditoria.class', 'basic');

class FrmAuditoriaBusca extends SForm
{
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $MIOLO->uses('/ui/controls/msubdetail.class');
        
        parent::__construct(_M('Consultar auditorias', $module), null, null);

    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'refresh-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'refresh-disabled-20x20.png');
        
        $url = $MIOLO->getActionUrl(MIOLO::getCurrentModule(), MIOLO::getCurrentAction(), null, array('event' => 'sincronizarDados'));
        
        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->addButton('tbBtnRefresh', _M('Sincronizar dados'), $url, _M('Sincronizar dados'), $disabledImage, $enabledImage);
        $toolBar->hideButton('tbBtnBack');
        $toolBar->hideButton('tbBtnReset');
        
        $fields[] = $toolBar;
        
        //Avisar sobre a sincronização
        $message = MMessage::getStaticMessage('message', 'ATENÇÃO: Os registros auditados a partir da meia noite (00:00) do dia anterior não serão exibidos caso não forem sincronizados.', MMessage::TYPE_INFORMATION);
        $fields[] = $message;
        
        //Data inicial
        $dataInicialLabel = new MText('dataInicialLabel', _M('De', $module) . ':');
        $dataInicialLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $dataInicial = new MCalendarField('dataInicial', $data->dataInicial, '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $dataInicial->setJsHint(_M('Informe a data inicial.', $module));
        //$fields[] = new MHContainer('hctDataInicial', array( $dataInicialLabel, $dataInicial ));
        $validators[] = new MDateDMYValidator('dataInicial');
        
        //Data final
        $dataFinalLabel = new MText('dataFinalLabel', _M('Até', $module) . ':');
        //$dataFinalLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $dataFinal = new MCalendarField('dataFinal', $data->dataFinal, '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $dataFinal->setJsHint(_M('Informe a data final', $module));
        $fields[] = new MHContainer('hctEndDate', array( $dataInicialLabel, $dataInicial, $dataFinalLabel, $dataFinal ));
        $validators[] = new MDateDMYValidator('dataFinal');
        
        //Ação
        $opcoes = array('UPDATE' => 'UPDATE', 'DELETE' => 'DELETE');
        $acaoLabel = new MText('acao', _M('Ação',$module) . ':');
        $acaoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $acaoId = new MSelection('actionId', $this->getFormValue('actionId', $data->actionId), '', $opcoes);
        $acaoId->setJsHint(_M('Selecione uma ação'));
        $fields[] = new MHContainer('hctAcao', array($acaoLabel, $acaoId));
        
        //Usuário
        $label = new MText('userLabel', _M('Quem') . ':');
        $label->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $code = new MLookupTextField('code', null, _M('Usuário', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('user_name', 'limbo', 'nome'), 'admin', 'User', null, array('idUser' => 'code'), true);
        $nome = new MTextField('nome', null, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $login = new MTextField('user_name', null, null, 10, _M('Seleção de usuário'));
        $login->addAttribute('style', 'width:100px!important');
        $container = new MHContainer('hctUsuario', array($label, $code, $nome, $login));
        $container->setShowLabel(false);        
        $fields[] = $container;
        
        //Opções
        $opcoes = auditoria::obtemTabelasComAuditoria();
        
        $table_name = strlen($this->table_name) > 0 ? $this->table_name : $MIOLO->_REQUEST('table_name');
        $table_name = strtolower($table_name);
        
        $registroLabel = new MText('registro', _M('Registro',$module) . ':');
        $registroLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $registroLabel->setClass('m-caption m-caption-required');
        $registroId = new MSelection('table_name', $table_name, '', $opcoes);
        $registroId->setJsHint(_M('Selecione uma tabela'));
        $fields[] = new MHContainer('hctRegistro', array($registroLabel, $registroId));
        $validators[] = new MRequiredValidator('table_name', _M('Registro'));
        
        // Valor original
        $valorOriginalLabel = new MText('valorOriginalLabel', _M('Valor original') . ':');
        $valorOriginalLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $valorOriginal = new MTextField('valorOriginal');
        $valorOriginal->addAttribute('style', 'width:100px!important');
        $hctValorOriginal = new MHContainer('hctValorOriginal', array($valorOriginalLabel, $valorOriginal));
        $hctValorOriginal->setShowLabel(false);        
        $fields[] = $hctValorOriginal;
        
        // Valor novo
        $valorNovoLabel = new MText('valorNovoLabel', _M('Valor novo') . ':');
        $valorNovoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $valorNovo = new MTextField('valorNovo');
        $valorNovo->addAttribute('style', 'width:100px!important');
        $hctValorNovo = new MHContainer('hctValorNovo', array($valorNovoLabel, $valorNovo));
        $hctValorNovo->setShowLabel(false);        
        $fields[] = $hctValorNovo;
        
        $versaoSistemaLabel = new MText('versaoSistemaLabel', _M('Versão do sistema') . ':');
        $versaoSistemaLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $versaoSistema = new MTextField('versaoSistema');
        $versaoSistema->addAttribute('style', 'width:100px!important');
        $hctVersaoSistema = new MHContainer('hctVersaoSistema', array($versaoSistemaLabel, $versaoSistema));
        $hctVersaoSistema->setShowLabel(false);        
        $fields[] = $hctVersaoSistema;
        
        $fields[] = new Separator();
        
        $button = new MButton('localizar', _M('Localizar', $modules));
        $fields[] = $div = new MDiv('divLocalizar', array($button));
        $div->addBoxStyle('margin-left', '40%');
        
        $fields[] = new MDiv('divQuery');
        $fields[] = new MDiv('divDetalhes');
        
        // Salva os filtros de pkey e schema, para filtrar corretamente ao ordenar a grid pelas colunas
        if ( $_GET['event'] == 'localizar_click' )
        {
            foreach ( $_GET as $name => $value )
            {
                if ( !in_array($name, array('module', 'action', 'function', 'event', 'table_name')) )
                {
                    $fields[] = new SHiddenField($name, $value);
                    $campos[] = $name;
                }
            }
            $MIOLO->session->set('GETCampos', $campos);
        }
        
        $this->setFields($fields);
        $this->setValidators($validators);

        $pn_page = MIOLO::_REQUEST('pn_page');
        $orderby = MIOLO::_REQUEST('orderby');
        if ( strlen($pn_page) > 0 || strlen($orderby) > 0 )
        {
            // Salva os filtros de pkey e schema que vieram da url, para filtrar corretamente ao ordenar a grid pelas colunas
            foreach ( $MIOLO->session->get('GETCampos') as $campo )
            {
                // Quando a ação não vier do GET, não salva os filtros 
                if ( !$_POST['__EVENTTARGETVALUE'] )
                {
                    $this->AddField(new SHiddenField($campo, MIOLO::_REQUEST($campo)));
                }
            }
            
            $this->localizar_click();
        }
    }
    
    public function localizar_click()
    {
        static $exec = false;
        
        if ( $exec )
        {
            return;
        }
        
        $exec = true;
        
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $table_name = SAGU::NVL($MIOLO->_REQUEST('table_name', 'POST'), $MIOLO->_REQUEST('table_name', 'GET'));
        $schema_name = $MIOLO->_REQUEST('schema_name');
        
        $filters->dataInicial = $MIOLO->_REQUEST('dataInicial');
        $filters->dataFinal = $MIOLO->_REQUEST('dataFinal');
        $filters->action = $MIOLO->_REQUEST('actionId');
        $filters->user_name = $MIOLO->_REQUEST('user_name');
        $filters->table_name = $table_name;
        $filters->schema_name = $schema_name;
        $filters->versaoSistema = $MIOLO->_REQUEST('versaoSistema');
        
        $filters->originalValue = $MIOLO->_REQUEST('valorOriginal');
        $filters->newValue = $MIOLO->_REQUEST('valorNovo');
        
        // Filtra pelo pkey apenas quando vier os filtros da url
        if ( strlen($schema_name) > 0 && !$_POST['__EVENTTARGETVALUE'] )
        {
            //Obtém as chaves primárias da tabela
            $chavesDaTabela = $this->obtemChavesPrimarias($schema_name, $table_name); 

            //Tenta obter o valor delas da url
            foreach ( $chavesDaTabela as $chaves )
            {
                $chavesPrimarias[$chaves] = $MIOLO->_REQUEST("$chaves");
            }
        }
        else if ( $_POST['__EVENTTARGETVALUE'] )
        {
            // Quando a ação não vier do GET, limpa os filtros 
            $MIOLO->session->set('GETCampos', null);
        }
        
        $filters->chavesPrimarias = $chavesPrimarias;
        
        if( !(strlen(SAGU::getParameter('BASIC', 'MIOLO_AUDIT_DATABASE')) > 0) )
        {
            $MIOLO->error(_M('O parâmetro MIOLO_AUDIT_DATABASE deve estar configurado para o processo de auditoria ocorrer corretamente. Contate o administrador.', $module));
        }

        $grid = $MIOLO->getUI()->getGrid($module, 'GrdAuditoria', $data);
        
        $busUser = new BusinessAdminBusUser();
        $busMioloAudit = new BasMioloAudit();
        $gridData = $busMioloAudit->search($filters, $grid);
        
        foreach($gridData as $data)
        {
            $usuario = $busUser->getUserByLogin($data[3]);

            $line[0] = $data[0]; //id
            $line[1] = $data[3]; //usuario
            $line[2] = $usuario->name;       //nome do usuario
            $line[3] = substr($data[4], 0, 16); //data
            $line[4] = $data[2]; //registro
            $line[5] = $data[5]; //operação
            $line[6] = $data[6]; //query
            $line[7] = $data[7]; //versão do sistema

            $dados[] = $line;
        }

        //$grid->setTitle(_M('Registros auditados', $module));
        $grid->setData($dados, $MIOLO->getConf('auditoria.rowcount'));
        $this->addField($grid);
        $this->addField(new MSeparator());
    }
    
    public function obtemChavesPrimarias($schema, $table)
    {
        $chavesPrimarias = auditoria::arrayDasColunasChavesPrimarias($schema, $table, false);
        
        foreach ( $chavesPrimarias as $key => $value )
        {
            $chaves[] = $value[0];
        }
        
        return $chaves;
    }
    
    public function popupQuery($args = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
                
        $filters = null;
        $filters->audit_id = $args->audit_id;
        
        $busMioloAudit = new BasMioloAudit();
        $registro = $busMioloAudit->search($filters);
                 
        $query = new MMultiLineField('queryData', utf8_decode($registro[0][6]), null, null, 10, 100);
        
        $fields[] = $query;
        
        $this->setFields($fields);
        MPopup::show('popupQuery', $fields, _M('QUERY EXECUTADA - ', $module).strtoupper($registro[0][2]).' - '.$registro[0][5]);
    
    }
    
    public function popupDetalhes($args = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        $filters->audit_id = $args->audit_id;
        
        $busMioloAuditDetail = new BasMioloAuditDetail();
        $data = $busMioloAuditDetail->search($filters);
        
        $busMioloAudit = new BasMioloAudit();
        $registro = $busMioloAudit->search($filters);
        
        $colunas = array( 
            _M('Coluna', $module),
            _M('Registro antigo', $module),
            _M('Registro novo', $module)
        );
        
        for($i = 0; $i < count($data); $i++ )
        {
            $dadosDaTabela[$i] = array(
            utf8_decode($data[$i][1]),
            utf8_decode($data[$i][2]),
            utf8_decode($data[$i][3])
            );
        }
        
        $fields[] = new MTableRaw(null, $dadosDaTabela, $colunas);
                
        $this->setFields($fields);
        MPopup::show('popupDetalhes', $fields, _M('Detalhes da auditoria: ', $module).strtoupper($registro[0][1]).' - '.strtoupper($registro[0][2]).' ('.$registro[0][5].') ');
    }
    
    public function sincronizarDados($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        if ( BasMioloAudit::migrarDadosDeAuditoria(true) )
        {
            $this->addInfo(_M('Auditoria sincronizada com sucesso.', $module));
        }
        else
        {
            $this->addError(_M('Falha na sincronizacaçao de auditoria', $module));
        }
    }
}

?>
