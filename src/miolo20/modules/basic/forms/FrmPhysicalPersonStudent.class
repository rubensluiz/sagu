<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Physical person student form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 09/09/2005
 *
 **/

class FrmPhysicalPersonStudent extends FrmPersonSteps
{

    /**
     * Class constructor
     **/
    public function __construct($steps=null)
    {
        $module = SAGU::getFileModule(__FILE__);

        parent::__construct(null, $steps, __CLASS__);

        //Default toolbar buttons
        if (is_object($this->toolbar))
        {
            $this->toolbar->disableButton('tbBtnPrint');
            $this->toolbar->disableButton('tbBtnBack');
            if ( $function == 'insert' )
            {
                $this->toolbar->disableButton('tbBtnDelete');
                $this->toolbar->disableButton('tbBtnSave');
            }
            elseif ( $function == 'delete' )
            {
                $this->toolbar->disableButton('tbBtnSave');
            }
        }
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $stepData = $this->getStepData();
        $personId = SAGU::NVL($stepData->personId, MIOLO::_REQUEST('personId'));

        if ( strlen($personId)>0 && (strpos($action, 'contract') || $function == SForm::FUNCTION_UPDATE) )
        {
            $business = new BusinessBasicBusPhysicalPersonStudent();
            $data = $business->getPhysicalPersonStudent($personId);
        }
        else
        {
            $data = $stepData;
        }
        
        //Fields of the external course
        $fields[] = new MText('externalCourseInfo', _M('Informe o curso externo que deve aparecer no histórico escolar', $module) . '.');
        $externalCourseLabel = new MText('externalCourseLabel', _M('Curso externo', $module) . ':');
        $externalCourseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $externalCourseIdHs = new MLookupTextField('externalCourseIdHs', $this->getFormValue('externalCourseIdHs', $data->externalCourseIdHs), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'externalCourseHsName', 'academic', 'ExternalCourse', null, null, true);
        $externalCourseIdHs->setJsHint(_M('Informe o código do curso externo', $module));
        $validators[] = new MIntegerValidator('externalCourseIdHs', '', 'optional');
        $externalCourseHsName = new MTextField('externalCourseHsName', $this->externalCourseHsName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $externalCourseHsName->setJsHint(_M('Nome do curso externo', $module));
        $externalCourseHsName->setReadOnly(true);
        $hctExternalCourse = new MHContainer('hctExternalCourse', array($externalCourseLabel, $externalCourseIdHs, $externalCourseHsName));
        $hctExternalCourse->setShowLabel(true);
        $fields[] = $hctExternalCourse;
        
        //Fields of the institution.
        $institutionLabel = new MText('institutionLabel', _M('Instituição', $module) . ':');
        $institutionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $institutionIdHs = new MLookupTextField('institutionIdHs', $this->getFormValue('institutionIdHs', $data->institutionIdHs), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'institutionHsName', 'basic', 'LegalPersonInstitution', null, null, true);
        $institutionIdHs->setJsHint(_M('Informe o código da instituição', $module));
        $validators[] = new MIntegerValidator('institutionIdHs', '', 'optional');
        $institutionHsName = new MTextField('institutionHsName', $this->institutionHsName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $institutionHsName->setJsHint(_M('Nome da instituição', $module));
        $institutionHsName->setReadOnly(true);
        $hctInstitution = new MHContainer('hctInstitution', array($institutionLabel, $institutionIdHs, $institutionHsName));
        $hctInstitution->setShowLabel(true);
        $fields[] = $hctInstitution;
        
        $cityLabel = new MText('cityLabel', _M('Cidade', $module) . ':');
        $cityLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $cityIdHs = new MLookupTextField('cityIdHs', $this->getFormValue('cityIdHs', $data->cityIdHs), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'cityHsName', 'basic', 'City', null, null, true);
        $cityIdHs->setJsHint(_M('Informe o código da cidade', $module));
        $validators[] = new MIntegerValidator('cityIdHs', '', 'optional');
        $cityHsName = new MTextField('cityHsName', $this->cityHsName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $cityHsName->setJsHint(_M('Nome da cidade', $module));
        $cityHsName->setReadOnly(true);
        $hctCity = new MHContainer('hctCity', array($cityLabel, $cityIdHs, $cityHsName));
        $hctCity->setShowLabel(true);
        $fields[] = $hctCity;
        
        $yearHs = new MTextField('yearHs', $this->getFormValue('yearHs', $data->yearHs), _M('Ano', $module), 4);
        $yearHs->setJsHint(_M('Informe o ano', $module));
        $validators[] = new MIntegerValidator('yearHs', '', 'optional');
        $fields[] = $yearHs;
        
        //$passive = new MTextField('passive', $this->getFormValue('passive', $data->passive), _M('Passivo', $module), 4);
        //$passive->setJsHint(_M('Informe o passivo', $module));
        //$fields[] = $passive;
        
        //isInsured
        $isInsuredLabel = new MText('isInsuredLabel', _M('Está segurado', $module) . '?');
        $isInsuredLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $isInsured = $this->GetFormValue('isInsured', $data->isInsured) ? $this->GetFormValue('isInsured', $data->isInsured) : DB_FALSE;
        $isInsured = new MRadioButtonGroup('isInsured', '', SAGU::listYesNo(1), $isInsured, null, 'horizontal');
        $isInsured->SetShowLabel(false);
        $hctIsInsured = new MHContainer('hctIsInsured', array($isInsuredLabel, $isInsured));
        $fields[] = $hctIsInsured;
        
        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
    }
    

    /**
     * Event triggered when user click save
     **/
    public function finalizeButton_click($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $ok = parent::finalizeButton_click($args);

        if ( $ok )
        {
            $opts = array('personIdS' => $this->_personId);
            if ( $function == 'update' )
            {
                $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED');
                $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                $gotoYes = $MIOLO->getActionURL($module, $action, null, array('function'=>'insert'));
                $gotoNo = $MIOLO->getActionURL($module, $action);

                $msg = _M('Aluno @1 inserido. Gostaria de inserir outro?', $module, $this->_personId);
                $MIOLO->question($msg, $gotoYes, $gotoNo);
            }
        }
        elseif (!$this->HasErrors())
        {
            $this->AddError( _M('Erro executando a operação solicitada.', $module) );
        }
    }


    public function saveData($data = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        if(!$data->firstAccessFrmPhysicalPersonStudent)
        {
            $data->firstAccessFrmPhysicalPersonStudent = 1;
            $data->isInsured = 'f';
        }

        if (!$data)
        {
            $data = $this->getData();
        }
        else
        {   
            $data = $this->parseData($data);
        }
        
        $business = new BusinessBasicBusPhysicalPersonStudent();

        $needUpdate = (strlen($data->personId) > 0) && (strlen( $business->getPhysicalPersonStudent($data->personId)->personId ) > 0);

        if ( $function == SForm::FUNCTION_UPDATE || $needUpdate )
        {
            $ok = $business->updatePhysicalPersonStudent($data);
            
            if ( $ok && $function == SForm::FUNCTION_INSERT )
            {
                $ok = $data->personId;
            }
        }
        else //INSERT function
        {
            $ok = $business->insertPhysicalPersonStudent($data);
        }
        
        // Salva campos personalizados
        $personId = $function == SForm::FUNCTION_UPDATE ? $data->personId : $business->getLastInsertId();
        if ( is_numeric($personId) )
        {
            $this->saveCustomFields($personId, $data, $this->getTransaction());
        }
        
        return $ok;
    }

    
    public function tbBtnSave_click($sender=NULL)
    {
        $ok = parent::finalizeButton_click($args);

        parent::tbBtnSave_click($sender, $ok, array('personIdS'=>$this->_personId));
    }
}
?>