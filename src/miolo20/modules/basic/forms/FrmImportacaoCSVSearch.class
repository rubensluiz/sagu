<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * CSV log form
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class Created on 20/05/2013
 *
 **/
class FrmImportacaoCSVSearch extends SSearchForm
{
    /**
     * Class constructor
     */
    public function __construct($data)
    {
        parent::__construct(_M('Localizar', 'basic'), new BasCSVImportation(), array('csvimportationid'));
    }

    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        // Bloqueia caso haja outra importacao
        $csv = new sCSVFileImporter();
        
        if ( $csv->statusFileExists() )
        {
            $fileName = $csv->getStatusFileName();
            $status = $csv->readStatusFile();                

            $msg = _M('Já existe uma outra importação em progresso, ou que foi interrompida. Caso queira ignorá-la, apague o arquivo <b>@1</b> no sistema.<br><br>Status: @2', $module, $fileName, $status);
            
            $this->AddInfo($msg);
        }
        
        $fields[] = new MCalendarField('bascsvimportation.formDateS', null, _M('Data',$module));

        $fields[] = new MTextField('formTimeS', null, _M('Hora',$module));
        $validators[] = new MTIMEValidator('formTimeS', _M('Hora', $module));
        
        $busUnit = new BusinessBasicBusUnit();
        
        $fields[] = new MSelection('bascsvimportation.layoutS', null, _M('Layout', $module), sCSVFileImporter::listarPlanilhas() );
        $fields[] = new MSelection('bascsvimportation.typeS', null, _M('Tipo', $module), BasCSVImportation::listImportationTypes() );
        $fields[] = new MSelection('bascsvimportation.unitIdS', null, _M('Unidade', $module), $busUnit->listUnitAssoc() );
        
        $fields[] = new sMultiLineField('bascsvimportation.observationS', array(
            'label' => _M('Observação', $module)
        ));
        
        $fields[] = new MTextField('bascsvimportation.usernameS', null, _M('Usuário',$module));

        parent::defineFields($fields, $module, 'GrdImportacaoCSVSearch', $validators);
    }
    
    public function baixarArquivoImportado($args = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $csvImportationId = MIOLO::_REQUEST('csvimportationid');
        
        try
        {
            $import = new BasCSVImportation( $csvImportationId );
            
            if ( strlen($import->fileid) == 0 )
            {
                throw new Exception( _M('Não existe um arquivo associado para download desta importacao. Isto pode ocorrer quando a importação é feita via linha de comando (shell) ou o arquivo não existe mais no sistema.', $module) );
            }
            
            $busFile = new BusinessBasicBusFile();
            $busFile->getFileAsDownload($import->fileid);
        }
        catch (Exception $e)
        {
            $this->AddError( $e->getMessage() );
        }
    }
}
?>