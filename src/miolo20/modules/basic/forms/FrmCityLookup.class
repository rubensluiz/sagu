<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * City form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 25/03/2006
 *
 **/

/**
 * Form to manipulate a city lookup
 **/
class FrmCityLookup extends SManagementForm
{

    public function __construct()
    {
        $MIOLO  = MIOLO::getInstance( );
        $module   = 'basic';
        
        parent::__construct( new BasCity(), array('cityId'), 'BusCity', _M('Inserir cidade', $module) );
    }


    /**
     * this method is automatically called by MIOLO
     * and is intended to create the form fields
     */
    public function defineFields()
    {
        $MIOLO            = MIOLO::getInstance();
        $module           = MIOLO::getCurrentModule();
        $action           = MIOLO::getCurrentAction();
        $defaultCountryId = SAGU::getParameter('BASIC', 'DEFAULT_COUNTRY_ID');

        $business  = new BusinessBasicBusCountry();
        $countryId = new MComboBox('countryId', $this->getFormValue('countryId', $defaultCountryId), _M('País',$module), $business->listCountry());
        $countryId->setAutoSubmit(true);
        $fields[]  = $countryId;
        $validators[] = new MRequiredValidator('countryId');

        $actualCountryId = $this->getFormValue('countryId', $defaultCountryId);
        if ( isset($actualCountryId) )
        {
            $business = new BusinessBasicBusState();
            $options = $business->listState($actualCountryId);
            // este if deve permanecer ate que o problema de o $options nao poder ser
            // nulo ser resolivdo pelo MIOLO2.
            if ( count($options) == 0 )
            {
                $options = array();
            }
            $fields[] = new MComboBox('stateId', $this->getFormValue('stateId', $data->stateId) ? $this->getFormValue('stateId', $data->stateId) : SAGU::getParameter('BASIC', 'DEFAULT_STATE_ID'), _M('Código do estado',$module), $options);
            $validators[] = new MRequiredValidator('stateId');
        }

        $data->cityName = $this->getFormValue('cityName', $data->name);
        $fields[]       = new MTextField('cityName', $data->cityName, _M('Nome',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $validators[]   = new MRequiredValidator('cityName');

        $fields[]     = new MTextField('zipCode', $this->getFormValue('zipCode', $data->zipCode), _M('CEP',$module), 10);
        $validators[] = new MRequiredValidator('zipCode');
        
        $this->setFields($fields);
        $this->setValidators( $validators );
        $this->setShowPostButton( false );
        
        $this->disableToolbar();

        $this->addButton( new formButton('tbBtnSave' , _M('Salvar', $module)));
        $this->addButton( new formButton('tbBtnBack' , _M('Voltar', $module), 'history.go(-1)'));       
    }

    public function tbBtnSave_click()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = 'basic';
        $action   = MIOLO::getCurrentAction();
        $name     = MIOLO::_Request('name');

        $data     = $this->getTypesData();
        $business = $this->busObject;
        $cityId = $business->insertCity($data);
        
        if ( $cityId )
        {
            $data = $business->getCity($cityId);

            $this->page->addScript('m_lookup.js');
            $this->page->addJsCode("MIOLO_Deliver('$name', 0, '{$data->cityId}','{$data->name}','','{$data->stateName}','','{$data->countryName}','{$data->zipCode}')" );
            $this->AddInfo(_M('Cidade cadastrada com sucesso.'));
        }
        else
        {
            $this->AddError(_M('Parâmetros inválidos','basic'));
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = parent::getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }
        $data->name           = $this->cityName->value;

        return $data;
    }

}
?>
