<?php
/**
 * <--- Copyright 2005-2012 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário de relatórios dinâmicos.
 *
 * @author Daniel Hartmann [daniel@solis.coop.br]
 *
 * \b Maintainers: \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Daniel Hartmann [daniel@solis.coop.br]
 *
 * @since
 * Class created on 27/02/2012
 * 
 */

class FrmRelatorioDinamico extends SManagementForm
{
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        parent::__construct(NULL, NULL, NULL, _M('Relatório dinâmico', $module));

        $eventosExportar = array(
            'exportGridAsCSV:click',
            'exportGridAsPDF:click',
            'exportGridAsHTML:click',
        );

        if ( !$this->page->isPostBack() && !in_array(MIOLO::_REQUEST('__EVENTTARGETVALUE'), $eventosExportar) )
        {
        }
    }

    /**
     * Método padrão de criação de campos.
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $fields[] = MMessage::getMessageContainer();

        if ( MIOLO::_REQUEST('__EVENTTARGETVALUE') != 'atualizarFiltros' )
        {
            $colunas = MIOLO::_REQUEST('colunas');
            $todasColunas = MIOLO::_REQUEST('todasColunas');
        }

        $visoes = SInfoTabela::buscarVisoes();
        $fields[] = $comboVisao = new MSelection('visao', NULL, _M('Visão', $module), $visoes);

        $action = "_doPostBack('atualizarFiltros', ''); document.{$this->page->name}.submit();";
        $comboVisao->addAttribute('onchange', $action);


        $visao = $this->obterVisaoAtual();
        $colunasOpcoes = array();
        $condicoes = array(
            '' => _M('Selecione', $module),
            '=' => _M('Igual', $module),
            '>=' => _M('Maior igual', $module),
            '<=' => _M('Menor igual',$module),
            '<>' => _M('Diferente', $module),
            'ilike' => _M('Contém', $module),
            'ilike%' => _M('Começa com', $module),
            '%ilike' => _M('Termina com', $module),
            'not ilike' => _M('Não contém', $module),
        );

        if ( $visao )
        {
            $dadosIndexados = array();
            $colunasLaco = array();
            $dadosDasColunas = SInfoTabela::buscarDadosDasColunas($visao, NULL, SInfoTabela::TIPO_VISAO);

            foreach ( $dadosDasColunas as $dadosDaColuna )
            {
                list($id, $label, $tipo) = $dadosDaColuna;
                $dadosIndexados[$id] = $dadosDaColuna;
                $colunasLaco[] = $id;
            }

            $atributosDaTabela = array();
            $i = 0;
            $total = count($dadosDasColunas);

            if ( $todasColunas )
            {
                $colunasLaco = $todasColunas;
            }

            foreach ( $colunasLaco as $coluna )
            {
                list($id, $label, $tipo) = $dadosIndexados[$coluna];
                $filtros = array();


                /*
                 * Estilos das colunas
                 */
                // Posição
                $atributosDaTabela['cell'][$i][0] = "style=\"width:5%;\" align=\"center\" valign=\"top\"";
                // Exibir
                $atributosDaTabela['cell'][$i][1] = "style=\"width:5%;\" align=\"center\" valign=\"top\"";
                // Coluna
                $atributosDaTabela['cell'][$i][2] = "style=\"width:30%;\" align=\"left\" valign=\"top\"";
                // Filtro
                $atributosDaTabela['cell'][$i][3] = "style=\"width:40%;\" align=\"left\" valign=\"top\"";
                // Agrupar
                $atributosDaTabela['cell'][$i][4] = "style=\"width:5%;\" align=\"center\" valign=\"top\"";
                // Função
                $atributosDaTabela['cell'][$i][5] = "style=\"width:15%;\" align=\"center\" valign=\"top\"";


                // Exibir
                $formColunas = $this->getFormValue('colunas');

                if ( (MIOLO::_REQUEST('__EVENTTARGETVALUE') != 'atualizarFiltros') && $formColunas )
                {
                    $marcado = in_array($id, $formColunas);
                }
                else
                {
                    $marcado = TRUE;
                }

                $exibir = new MCheckBox('colunas[]', $id, NULL, $marcado);
                $todasColunas = new MCheckBox('todasColunas[]', $id, NULL, TRUE);
                $todasColunas->addBoxStyle('display', 'none');
                $exibirDiv = new MDiv(NULL, array($exibir, $todasColunas));


                // Posição
                $jsUp = <<<JS
var td = this.parentNode.parentNode;
var tr = td.parentNode;

var prev = tr.previousElementSibling;

var prevData = prev.innerHTML;

prev.innerHTML = tr.innerHTML;
tr.innerHTML = prevData;

posicoes = document.getElementsByClassName('posicaoUp');
for ( i=0; i < posicoes.length; i++ )
{
    posicoes[i].style.display = 'block';
}
posicoes[0].style.display = 'none';

posicoes = document.getElementsByClassName('posicaoDown');
for ( i=0; i < posicoes.length; i++ )
{
    posicoes[i].style.display = 'block';
}
posicoes[i-1].style.display = 'none';
JS;
                $jsDown = <<<JS
var td = this.parentNode.parentNode;
var tr = td.parentNode;

var next = tr.nextElementSibling;

var nextData = next.innerHTML;

next.innerHTML = tr.innerHTML;
tr.innerHTML = nextData;

posicoes = document.getElementsByClassName('posicaoUp');
for ( i=0; i < posicoes.length; i++ )
{
    posicoes[i].style.display = 'block';
}
posicoes[0].style.display = 'none';

posicoes = document.getElementsByClassName('posicaoDown');
for ( i=0; i < posicoes.length; i++ )
{
    posicoes[i].style.display = 'block';
}
posicoes[i-1].style.display = 'none';
JS;

                $setas = array();

                $setas[] = $up = new MImageLink(NULL, NULL, '#', $MIOLO->getUI()->getImage('', 'orderup.png'));
                $up->image->id = "posicaoUp$i";
                $up->image->addAttribute('style', 'display:'. (( $i > 0 ) ? 'block' : 'none'));
                $up->image->setClass('posicaoUp');
                $up->setOnClick($jsUp);

                $setas[] = $down = new MImageLink(NULL, NULL, '#', $MIOLO->getUI()->getImage('', 'orderdown.png'));
                $down->image->id = "posicaoDown$i";
                $down->image->addAttribute('style', 'display:'. (( $i < ($total - 1) ) ? 'block' : 'none'));
                $down->image->setClass('posicaoDown');
                $down->setOnClick($jsDown);

                $posicao = new MDiv("posicao$i", $setas);


                // Filtros
                $idDoFiltro = "filtro{$id}[0]";
                $idDaCondicao = "condicao{$id}[0]";

                $jsAdicionarFiltro = <<<JS
var containerFiltros = document.getElementById('m_containerFiltros$i');
if ( containerFiltros.style.display == 'none' )
{
    containerFiltros.style.display = 'inline';
}
else
{
    var div = document.createElement('div');
    var elements = div.getElementsByClassName('filtros');

    var numFiltros = document.getElementsByClassName('cFiltros$i').length;

    var spacer = document.createElement('div');
    spacer.innerHTML = '&nbsp;';
    spacer.style.cssFloat = 'left';
    spacer.style.width = '14px';
    spacer.style.margin = '4px 0 4px 8px';
    spacer.className = 'spacer';

    div.innerHTML = containerFiltros.innerHTML;
    div.className = 'cFiltros$i';
    containerFiltros.parentNode.appendChild(spacer);
    containerFiltros.parentNode.appendChild(div);

    for ( i=0; i<elements.length; i++ ) {
        if ( elements[i].tagName == 'INPUT' ) {
            elements[i].id = 'filtro{$id}[]';
            elements[i].name = 'filtro{$id}[]';
        } else {
            elements[i].id = 'condicao{$id}[]';
            elements[i].name = 'condicao{$id}[]';
        }

        elements[i].value = '';
    }

    var remover = document.getElementsByClassName('remover{$i}');
    for ( i=0; i<remover.length; i++ ) {
        if ( i != 0 ) {
            remover[i].style.display = 'inline';
            remover[i].onclick = function() {
                var div = this.parentNode;
                var container = div.parentNode;
                container.parentNode.removeChild(container.previousElementSibling);
                container.parentNode.removeChild(container);

                numFiltros = document.getElementsByClassName('cFiltros$i').length;
                if ( numFiltros == 1 ) {
                    remover[0].style.display = 'inline';
                }
            };
        } else {
            if ( numFiltros == 0 ) {
                remover[i].style.display = 'inline';
            } else {
                remover[i].style.display = 'none';
            }
        }
    }
}
JS;

                $filtros[] = $mais = new MImageLink(NULL, NULL, '#', $MIOLO->getUI()->getImage('', 'plus.gif'));
                $mais->setOnClick($jsAdicionarFiltro);
                $mais->addBoxStyle('float', 'left');
                $mais->addBoxStyle('width', '14px');
                $mais->addBoxStyle('margin', '4px 0');

                $filtrosForm = (array) MIOLO::_REQUEST("filtro$id");
                $condicoesForm = (array) MIOLO::_REQUEST("condicao$id");
                $filtrosCorrigidos = array();

                foreach ( $filtrosForm as $index => $filtroForm )
                {
                    if ( strlen($filtroForm) && strlen($condicoesForm[$index]) )
                    {
                        $filtrosCorrigidos[] = array($condicoesForm[$index], $filtroForm);
                    }
                }

                if ( count($filtrosCorrigidos) > 0 )
                {
                    foreach ( $filtrosCorrigidos as $index => $filtroCorrigido )
                    {
                        if ( $index != 0 )
                        {
                            $filtros[] = $spacer = new MDiv(NULL, '&nbsp;');
                            $spacer->addBoxStyle('clear', 'both');
                            $spacer->addBoxStyle('float', 'left');
                            $spacer->addBoxStyle('width', '14px');
                            $spacer->addBoxStyle('margin', '4px 0');
                        }

                        list($valorCondicao, $valorFiltro) = $filtroCorrigido;
                        $filtros[] = $filtrosBase = new MHContainer("containerFiltros$i", $this->gerarFiltros($id, $label, $tipo, $index, $i, $valorCondicao, $valorFiltro));
                        $filtrosBase->setClass("cFiltros$i");
                    }
                }
                else
                {
                    $filtros[] = $filtrosBase = new MHContainer("containerFiltros$i", $this->gerarFiltros($id, $label, $tipo, 0, $i));
                    $filtrosBase->addBoxStyle('display', 'none');
                    $filtrosBase->setClass("cFiltros$i");
                }

                $camposDoFiltro = new MDiv('divCondicoes', new MHContainer(NULL, $filtros));


                // Agrupar
                $agruparForm = MIOLO::_REQUEST('agrupar');

                if ( (MIOLO::_REQUEST('__EVENTTARGETVALUE') != 'atualizarFiltros') && $agruparForm )
                {
                    $marcado = $agruparForm == $id;
                }
                else
                {
                    $marcado = FALSE;
                }

                $js = <<<JS
var marcado = this.checked;
var agrupar = document.getElementsByName('agrupar');
for ( i=0; i<agrupar.length; i++ )
{
    agrupar[i].checked = false;
}
this.checked = marcado;
JS;

                $agrupar = new MCheckBox('agrupar', $id, NULL, $marcado);
                $agrupar->addAttribute('onchange', $js);


                // Função
                $funcaoPadrao = NULL;

                if ( (MIOLO::_REQUEST('__EVENTTARGETVALUE') != 'atualizarFiltros') )
                {
                    $funcaoPadrao = $this->getFormValue("funcao$id");
                }

                switch ( $tipo )
                {
                    case SInfoColuna::TIPO_DATA:
                        $funcoes = array(
                            'COUNT' => _M('Contagem', $module),
                            'MIN' => _M('Mínimo', $module),
                            'MAX' => _M('Máximo', $module),
                        );
                        $filtro = new MSelection("funcao$id", $funcaoPadrao, NULL, $funcoes);
                        break;

                    case SInfoColuna::TIPO_DECIMAL:
                    case SInfoColuna::TIPO_INTEIRO:
                        $funcoes = array(
                            'COUNT' => _M('Contagem', $module),
                            'SUM' => _M('Soma', $module),
                            'AVG' => _M('Média', $module),
                            'MIN' => _M('Mínimo', $module),
                            'MAX' => _M('Máximo', $module),
                        );
                        $filtro = new MSelection("funcao$id", $funcaoPadrao, NULL, $funcoes);
                        break;
                    
                    default:
                        $funcoes = array(
                            'COUNT' => _M('Contagem', $module),
                        );
                        $filtro = new MSelection("funcao$id", $funcaoPadrao, NULL, $funcoes);
                        break;
                }


                $colunasOpcoes[] = array(
                    $posicao,
                    $exibirDiv,
                    $label,
                    $camposDoFiltro,
                    $agrupar,
                    $filtro,
                );

                $i++;
            }
        }

        $titulos = array(
            _M('Posição', $module),
            _M('Exibir', $module),
            _M('Coluna', $module),
            _M('Filtro', $module),
            _M('Agrupar', $module),
            _M('Função', $module),
        );
        $tabelaColunas = new MTableRaw(NULL, $colunasOpcoes, $titulos);
        $tabelaColunas->setAlternate(TRUE);
        $tabelaColunas->attributes = $atributosDaTabela;

        if ( $visao )
        {
            $fields[] = $tabelaColunas;
        }


        $validators[] = new MRequiredValidator('visao');

        $fields[] = new MButton('botaoGerar', _M('Gerar', $module));

        if ( $visao && $colunas )
        {
            $dadosIndexados = array();

            foreach ( $dadosDasColunas as $dadosDaColuna )
            {
                list($id, $label, $tipo) = $dadosDaColuna;
                $dadosIndexados[$id] = $label;
            }

            foreach ( $colunas as $coluna )
            {
                $label = $dadosIndexados[$coluna];

                $colunasGrid[] = new MGridColumn(_M(ucfirst($label), $module), 'left', TRUE, NULL, TRUE, NULL, TRUE);
            }

            $fields[] = $this->grid = new SGrid(NULL, $colunasGrid, 'grdRelatorioDinamico', NULL, NULL, NULL, $dados);

            // Popula a grid novamente para funcionar a exportação
            if ( MIOLO::_REQUEST('__EVENTTARGETVALUE') != 'atualizarFiltros' )
            {
                $this->botaoGerar_click();
            }

            $this->grid->clearActions();
        }

        parent::defineFields($fields, $validators, $data);
    }

    /**
     * Obtém os validadores da subdetail de filtros.
     *
     * @return array Vetor com componentes MValidator.
     */
    public function obterValidadoresDosFiltros()
    {
        $validators['condicao'] = new MRequiredValidator('condicao', _M('Condição', $module));
        $validators['filtro'] = new MRequiredValidator('filtro', _M('Filtro', $module));

        return $validators;
    }

    /**
     * Método que gera os campos de filtro de acordo com o tipo da coluna.
     *
     * @param string $id Id da coluna.
     * @param string $label Label da coluna.
     * @param string $tipo Tipo da coluna.
     * @param integer $index Indíce do filtro na linha.
     * @param integer $indexLinha Indíce da linha (referente à coluna).
     * @return array Campos de condição e filtro.
     */
    public function gerarFiltros($id, $label, $tipo, $index, $indexLinha, $valorCondicao=NULL, $valorFiltro=NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $condicoes = array(
            '' => _M('-- Condição --', $module),
            '=' => _M('Igual', $module),
            '>=' => _M('Maior igual', $module),
            '<=' => _M('Menor igual',$module),
            '<>' => _M('Diferente', $module),
            'ilike' => _M('Contém', $module),
            'ilike%' => _M('Começa com', $module),
            '%ilike' => _M('Termina com', $module),
            'not ilike' => _M('Não contém', $module),
        );

        $validators = $this->obterValidadoresDosFiltros();

        $idDoFiltro = "filtro{$id}[$index]";
        $idDaCondicao = "condicao{$id}[$index]";

        if ( strlen($valorFiltro) )
        {
            $filtroPadrao = $valorFiltro;
        }
        else
        {
            $filtrosDoForm = $this->getFormValue("filtro{$id}");
            $filtroPadrao = strlen($filtrosDoForm[$index]) ? $filtrosDoForm[$index] : NULL;
        }

        if ( strlen($valorCondicao) )
        {
            $condicaoPadrao = $valorCondicao;
        }
        else
        {
            $condicoesDoForm = $this->getFormValue("condicao{$id}");
            $condicaoPadrao = strlen($condicoesDoForm[$index]) ? $condicoesDoForm[$index] : NULL;
        }

        switch ( $tipo )
        {
            case SInfoColuna::TIPO_INTEIRO:
                unset($condicoes['ilike']);
                unset($condicoes['ilike%']);
                unset($condicoes['%ilike']);
                unset($condicoes['not ilike']);
                $filtro = new MTextField($idDoFiltro, $filtroPadrao, NULL, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
                //$validators['filtro'] = new MIntegerValidator('filtro', _M('Filtro da coluna @1', $module, $label), 'required');
                break;

            case SInfoColuna::TIPO_DECIMAL:
                unset($condicoes['ilike']);
                unset($condicoes['ilike%']);
                unset($condicoes['%ilike']);
                unset($condicoes['not ilike']);
                $filtro = new MFloatField($idDoFiltro, $filtroPadrao, NULL, SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'));
                break;

            case SInfoColuna::TIPO_DATA:
                unset($condicoes['ilike']);
                unset($condicoes['ilike%']);
                unset($condicoes['%ilike']);
                unset($condicoes['not ilike']);
                $filtro = new MCalendarField($idDoFiltro, $filtroPadrao, NULL, SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
                break;

            case SInfoColuna::TIPO_BOOLEAN:
                unset($condicoes['>=']);
                unset($condicoes['<=']);
                unset($condicoes['ilike']);
                unset($condicoes['ilike%']);
                unset($condicoes['%ilike']);
                unset($condicoes['not ilike']);

                $listaNaoSim = array(
                    'f' => _M('Não', $module),
                    't' => _M('Sim', $module),
                );
                $filtro = new MSelection($idDoFiltro, $filtroPadrao, NULL, $listaNaoSim);
                break;

            case SInfoColuna::TIPO_TEXTO:
            case SInfoColuna::TIPO_TEXTO_LONGO:
            default:
                unset($condicoes['>=']);
                unset($condicoes['<=']);

                $filtro = new MTextField($idDoFiltro, $filtroPadrao, NULL, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
                break;
        }

        //$this->setValidators($validators);

        $comboCondicao = new MSelection($idDaCondicao, $condicaoPadrao, NULL, $condicoes);
        $comboCondicao->options = $condicoes;

        $comboCondicao->setClass('m-combo filtros');
        $filtro->setClass('m-text-field filtros');

        if ( $index == 0 )
        {
            $jsRemoverFiltro = <<<JS
var div = this.parentNode.parentNode;
div.style.display = 'none';
JS;
        }
        else
        {
            $jsRemoverFiltro = <<<JS
var div = this.parentNode.parentNode;
div.parentNode.removeChild(div);
JS;
        }

        $menos = new MImageLink(NULL, NULL, '#', $MIOLO->getUI()->getImage('', 'minus.gif'));
        $menos->setOnClick($jsRemoverFiltro);
        $menos->addBoxStyle('float', 'left');
        $menos->addBoxStyle('width', '14px');
        $menos->addBoxStyle('margin', '4px 0');
        $menos->setClass("remover$indexLinha");

        return array( $comboCondicao, $filtro, $menos );
    }

    /**
     * Limpa os filtros ao trocar de visão.
     */
    public function atualizarFiltros()
    {
    }

    /**
     * @return string Obtém do _REQUEST a visão selecionada.
     */
    public function obterVisaoAtual()
    {
        return MIOLO::_REQUEST('visao');
    }

    /**
     * Executa a visão com os dados dos filtros.
     */
    public function botaoGerar_click($args=NULL)
    {
        $filtros = array();
        $visao = $this->obterVisaoAtual();
        $colunas = MIOLO::_REQUEST('colunas');
        $todasColunas = MIOLO::_REQUEST('todasColunas');
        $agrupar = MIOLO::_REQUEST('agrupar');

        // Se $args existe, a função foi chamada pela ação do botão Gerar e não diretamente
        if ( $args )
        {
            if ( !$colunas )
            {
                new MMessageWarning(_M('Você precisa escolher pelo menos uma coluna para ser exibida', $module));
                return;
            }
        }

        foreach ( (array) $todasColunas as $coluna )
        {
            $filtrosDaColuna = $_REQUEST["filtro$coluna"];
            $condicoes = MIOLO::_REQUEST("condicao$coluna");

            foreach ( (array) $filtrosDaColuna as $index => $filtro )
            {
                if ( (strlen($condicoes[$index])) && (strlen($filtro)) )
                $filtros[] = array(
                    'coluna' => $coluna,
                    'condicao' => $condicoes[$index],
                    'valor' => $filtro
                );
            }
        }

        if ( $visao && $colunas )
        {
            $dados = SInfoTabela::consultarVisao($visao, $colunas, $filtros, $agrupar);
        }

        if ( $this->grid )
        {
            $aplicarFuncao = array();

            foreach ( $colunas as $chave => $coluna )
            {
                $funcao = MIOLO::_REQUEST("funcao$coluna");

                if ( strlen($funcao) )
                {
                    $aplicarFuncao[$chave] = $funcao;
                }
            }


            if ( strlen($agrupar) )
            {
                $novosDados = array();
                $ultimoGrupo = 'x';
                $valoresFuncao = array();
                $ultimaLinha = array();

                foreach ( $dados as $key => $linha )
                {
                    $indiceGrupo = count($linha)-1;

                    // Verifica se mudou de grupo
                    if ( $ultimoGrupo != $linha[$indiceGrupo] )
                    {
                        // Se há função, aqui deve ser adicionado o resultado
                        if ( count($valoresFuncao[$ultimoGrupo]) > 0 )
                        {
                            foreach ( $valoresFuncao[$ultimoGrupo] as $chave => $valoresPorColuna )
                            {
                                $funcao = $aplicarFuncao[$chave];

                                $valor = $this->aplicarFuncao($funcao, $valoresPorColuna);

                                if ( $valor !== NULL )
                                {
                                    $ultimaLinha = array_fill(0, count($linha), '');
                                    $ultimaLinha[$chave] = $this->obterTextoDeFuncao($funcao, $valor);
                                }
                            }
                        }

                        if ( count($ultimaLinha) > 0 )
                        {
                            $novosDados[] = $ultimaLinha;
                            $ultimaLinha = array();
                        }

                        // Adiciona o título do novo grupo
                        $novosDados[] = array( "<span class=\"tituloDaTabela\">{$linha[$indiceGrupo]}</span>" );

                        // Armazena o grupo atual
                        $ultimoGrupo = $linha[$indiceGrupo];
                    }
                    
                    // Para cada coluna que deve ser aplicada uma função, armazena em um vetor seus valores
                    foreach ( $aplicarFuncao as $chave => $funcao )
                    {
                        $valoresFuncao[$ultimoGrupo][$chave][] = $linha[$chave];
                    }

                    // Remove coluna adicionada especialmente para controle dos grupos
                    unset($linha[$indiceGrupo]);

                    // Adiciona linha antiga aos novos dados
                    $novosDados[] = $linha;
                }

                // Se há função, aqui deve ser adicionado o resultado
                if ( count($valoresFuncao[$ultimoGrupo]) > 0 )
                {
                    foreach ( $valoresFuncao[$ultimoGrupo] as $chave => $valoresPorColuna )
                    {
                        $funcao = $aplicarFuncao[$chave];

                        $valor = $this->aplicarFuncao($funcao, $valoresPorColuna);

                        if ( $valor !== NULL )
                        {
                            $ultimaLinha[$chave] = $this->obterTextoDeFuncao($funcao, $valor);
                        }
                    }

                    $novosDados[] = $ultimaLinha;
                }

                $dados = $novosDados;
                $total = count($linha);
                
                $js = <<<JS
function corrigirTitulos() {
    var titulos = document.getElementsByClassName('tituloDaTabela');

    for ( i=0; i<titulos.length; i++ ) {

        var td = titulos[i].parentNode;
        if ( td.tagName != 'TD' )
        {
            td = td.parentNode;
        }

        while ( td.nextElementSibling ) {
            td.parentNode.removeChild(td.nextElementSibling);
        }

        td.colSpan = $total;
        td.style.paddingLeft = '5px';
        td.style.backgroundColor = '#fff';
        td.style.border = '0';
        td.style.borderBottom = '1px solid #CCC';
        td.style.padding = '20px 0 5px 2px';
        titulos[i].style.fontWeight = 'bold';
    }
}

if (window.addEventListener) {
    window.addEventListener('load', corrigirTitulos, false);
} else if (window.attachEvent) {
    window.attachEvent('onload', corrigirTitulos);
}
JS;

                $dados[0][0] = "<script type=\"text/javascript\">\n$js\n</script>\n" . $dados[0][0];
                $this->page->onload("$js corrigirTitulos();");
            }
            elseif ( count($aplicarFuncao) > 0 )
            {
                $valoresFuncao = array();

                foreach ( $dados as $linha )
                {
                    foreach ( $aplicarFuncao as $chave => $funcao )
                    {
                        $valoresFuncao[$chave][] = $linha[$chave];
                    }
                }

                if ( count($valoresFuncao) > 0 )
                {
                    $ultimaLinha = array();
                    foreach ( $valoresFuncao as $chave => $valoresPorColuna )
                    {
                        $funcao = $aplicarFuncao[$chave];

                        $valor = $this->aplicarFuncao($funcao, $valoresPorColuna);

                        if ( $valor !== NULL )
                        {
                            $ultimaLinha[$chave] = $this->obterTextoDeFuncao($funcao, $valor);
                        }
                    }
                    
                    $dados[] = $ultimaLinha;
                }
            }

            $this->grid->setData($dados);
        }
    }

    /**
     * Aplica a função no vetor de valores.
     *
     * @param string $funcao Função a ser aplicada.
     * @param array $valores Valores;
     * @return int Resultado da função.
     */
    public function aplicarFuncao($funcao, $valores)
    {
        $valor = NULL;

        switch ( $funcao )
        {
            case 'AVG':
                $valor = array_sum($valores)/count($valores);
                break;

            case 'MAX':
                rsort($valores, SORT_NUMERIC);
                $valor = $valores[0];
                break;

            case 'MIN':
                sort($valores, SORT_NUMERIC);
                $valor = $valores[0];
                break;

            case 'SUM':
                $valor = array_sum($valores);
                break;

            case 'COUNT':
                $valor = count($valores);
                break;
        }

        return $valor;
    }

    /**
     * Obtém o texto para ser exibido no final de cada grupo com o valor do resultado da função.
     *
     * @param string $funcao Função aplicada.
     * @param string $valor Valor retornado pela função.
     * @return string Texto para ser exibido ao usuário.
     */
    public function obterTextoDeFuncao($funcao, $valor)
    {
        $module = MIOLO::getCurrentModule();

        $funcoes = array(
            'SUM' => _M('Soma', $module),
            'AVG' => _M('Média', $module),
            'MIN' => _M('Mínimo', $module),
            'MAX' => _M('Máximo', $module),
            'COUNT' => _M('Contagem', $module),
        );

        return "$funcoes[$funcao]: $valor";
    }
}

?>