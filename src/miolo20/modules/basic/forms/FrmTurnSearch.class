<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for basTurn table
 *
 * @author Hélio H. R. Guimarães [helio@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Mauricio de Castro [mcastro@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 10/08/2005
 *
 **/

/**
 * Form to search the basTurn table
 */
class FrmTurnSearch extends SSearchForm
{
    /**
     * Class constructor
     */
    public function __construct($data)
    {
        parent::__construct(_M('Localizar', 'basic'), new BasTurn(), array('turnId'), 'BusTurn');
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        // TunId Field
        $turnIdS = new MTextField('turnIdS', $this->turnIdS->value, _M('Código',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $turnIdS->setJsHint(_M('Informe o código do turno',$module));
        $fields[] = $turnIdS;
        $validators[] = new MIntegerValidator('turnIdS', '', 'optional');

        // Description Field
        $descriptionS = new MTextField('descriptionS', $this->descriptionS->value, _M('Descrição',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $descriptionS->setJsHint(_M('Informe a descrição do turno',$module));
        $fields[] = $descriptionS;

        // Short Description Field
        $shortDescriptionS = new MTextField('shortDescriptionS', $this->shortDescriptionS->value, _M('Abreviatura',$module), 6);
        $shortDescriptionS->setJsHint(_M('Informe a abreviatura do turno',$module));
        $fields[] = $shortDescriptionS;

        // Begin Hour Field
        $beginHourS = new MTextField('beginHourS', $this->beginHourS->value, _M('Hora de início',$module), SAGU::getParameter('BASIC', 'FIELD_TIME_SIZE'), 'hh:mm');
        $beginHourS->setJsHint(_M('Informe o horário de início do turno',$module));
        $validators[] = new MTimeValidator('beginHourS','','optional');
        $fields[] = $beginHourS;

        // End Hour Field
        $endHourS = new MTextField('endHourS', $this->endHourS->value, _M('Hora de fim',$module), SAGU::getParameter('BASIC', 'FIELD_TIME_SIZE'), 'hh:mm');
        $endHourS->setJsHint(_M('Informe a hora de término do turno',$module));
        $validators[] = new MTimeValidator('endHourS','','optional');
        $fields[] = $endHourS;

        // Group Field
        $charIdS = new MTextField('charIdS', $this->charIdS->value, _M('Grupo',$module), 1);
        $charIdS->setJsHint(_M('Informe o caracter de grupo',$module));
        $fields[] = $charIdS;

        parent::defineFields($fields, $module, 'GrdTurnSearch', $validators);
    }
}
?>
