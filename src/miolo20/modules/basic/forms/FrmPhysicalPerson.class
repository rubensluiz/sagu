<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Physical person form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 29/08/2005
 *
 **/

/**
 * Form to manipulate tabbs
 **/

class FrmPhysicalPerson extends FrmPersonSteps
{
    /**
     * Class constructor
     **/
    public function __construct($steps=null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        parent::__construct(null, $steps, __CLASS__);
        
        if (is_object($this->toolbar))
        {
            if ($function == SForm::FUNCTION_INSERT)
            {
            }
            else if ($function == SForm::FUNCTION_UPDATE)
            {
                $this->toolbar->enableButton( MToolBar::BUTTON_DELETE );
            }
            $this->toolbar->disableButton( MToolBar::BUTTON_SAVE ); //People need to be Physical or Legal
        }
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        //carrega os dados
        $stepData = $this->getStepData();
        $personId = SAGU::NVL($stepData->personId, MIOLO::_REQUEST('personId'));

        if ( strlen($personId)>0 && $this->isFirstAccess() )
        {
            $business = new BusinessBasicBusPhysicalPerson();
            $data = $business->getPhysicalPerson($personId);
        }
        else
        {
            $data = $stepData;
        }

        $fields[] = new MHiddenField('limbo');

        //BaseGroup 1
        // Field sex
        $sex = new MSelection('sex', $this->getFormValue('sex', $data->sex), _M('Sexo',$module), SAGU::listSex());
        $sex->setJsHint(_M('Informe o sexo',$module));
        $bgrFields[] = $sex;
        $validators[] = new MRequiredValidator('sex', _M('Sexo',$module));

        // Field marital status
        $business = new BusinessBasicBusMaritalStatus();
        $maritalStatusId = new MComboBox('maritalStatusId', $this->getFormValue('maritalStatusId', $data->maritalStatusId), _M('Estado civil',$module), $business->listMaritalStatus());
        $maritalStatusId->setJsHint(_M('Informe o estado civil',$module));
        $maritalStatusId->setIsRequired(true);
        $bgrFields[] = $maritalStatusId;

        // Field date birth
        $dateBirth = new MCalendarField('dateBirth', $this->getFormValue('dateBirth',$data->dateBirth), _M('Data de nascimento',$module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $dateBirth->setJsHint(_M('Informe a data de nascimento',$module));
        $dateBirth->setIsRequired(true);
        $bgrFields[] = $dateBirth;

        // Field city birth
        $bgrFields[] = $cityId = new SLookupContainer('cityIdBirth', $this->getFormValue('cityIdBirth', $data->cityIdBirth), array(
            'label' => _M('Cidade natal',$module),
            'module' => 'basic',
            'item' => 'City',
        ));

        // Field city birth
        $businessCountry = new BusinessBasicBusCountry();
        $countryIdBirth = new MComboBox('countryIdBirth', $this->getFormValue('countryIdBirth', $data->countryIdBirth), _M('Nacionalidade', $module), $businessCountry->listNationality());
        $countryIdBirth->setJsHint(_M('Informe a nacionalidade',$module));
        $bgrFields[] = $countryIdBirth;

        //campo utilizado para passar um parametro para lookup de pessoal fisica
        $fields[] = new SHiddenField('source', 'responsableLegal');

        // Field responsable legal
        $bgrFields[] = $responsableLegalId = new SLookupContainer('responsableLegalId', $this->getFormValue('responsableLegalId', $data->responsableLegalId), array(
            'label' => _M('Responsável', $module),
            'module' => 'basic',
            'item' => 'PhysicalPerson',
            'filter' => array('source' => 'source'),
        ));
        $responsableLegalId->setJsHint(_M('Informe o código do responsável legal',$module));
        $validators[] = new MIntegerValidator('responsableLegalId', _M('Responsável',$module), 'optional');

        // Field car plate
        $carPlate = new MTextField('carPlate', $this->getFormValue('carPlate',$data->carPlate), _M('Placa do carro',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $carPlate->setJsHint(_M('Informe a placa do carro',$module));
        $bgrFields[] = $carPlate;

        // Field ethnic origin
        $business = new BusinessBasicBusEthnicOrigin();
        $ethnicOriginId = new MComboBox('ethnicOriginId', $this->getFormValue('ethnicOriginId', $data->ethnicOriginId), _M('Origem étnica',$module), $business->listEthnicOrigin());
        $ethnicOriginId->setJsHint(_M('Informe a origem étnica',$module));
        $validators[] = new MIntegerValidator('ethnicOriginId', _M('Origem étnica',$module), 'optional');
        $bgrFields[] = $ethnicOriginId;

        // Field special nescessity
        $business = new BusinessBasicBusSpecialNecessity();
        $specialNecessityId = new MComboBox('specialNecessityId', $this->getFormValue('specialNecessityId', $data->specialNecessityId), _M('Necessidade especial',$module), $business->listSpecialNecessity());
        $specialNecessityId->setJsHint(_M('Informe a nescessidade especial',$module));
        $validators[] = new MIntegerValidator('specialNecessityId', _M('Necessidade especial',$module), 'optional');
        $bgrFields[] = $specialNecessityId;

        // Field special nescessity description
        $specialNecessityDescription = new MTextField('specialNecessityDescription', $this->getFormValue('specialNecessityDescription',$data->specialNecessityDescription), _M('Necessidade especial',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $specialNecessityDescription->setJsHint(_M('Informe a descrição da necessidade especial da pessoa',$module));
        $bgrFields[] = $specialNecessityDescription;
        
        // Field pis
        $pisDescription = new MTextField('pis', $this->getFormValue('pis',$data->pis), _M('Número do PIS',$module), 12);
        $pisDescription->setJsHint(_M('Informe o número do PIS da pessoa',$module));
        $bgrFields[] = $pisDescription;
        $validators[] = new MIntegerValidator('pis', _M('Número do PIS',$module), 'optional');
        
        if ( $function == 'update' )
        {
            $dateDeath = new MCalendarField('dateDeath', $this->getFormValue('dateDeath',$data->dateDeath), _M('Data do óbito',$module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
            $dateDeath->setJsHint(_M('Informe a data de falecimento',$module));
            $validators[] = new MDateDMYValidator('dateDeath', _M('Data do óbito',$module), 'optional');
            $bgrFields[] = $dateDeath;
        }
        
        $bsg = new SBaseGroup(null, _M('Dados gerais',$module), $bgrFields);
        $bsg->showLabel = true;
        $bsg->width = '99%';
        $fields[] = $bsg;
        unset($bgrFields);

        //BaseGroup 1
        // Field residential phone        
        $residentialPhone = new MTextField('residentialPhone', $this->getFormValue('residentialPhone',$data->residentialPhone), _M('Residencial',$module), 20);
        $residentialPhone->setJsHint(_M('Informe o fone residencial',$module));
        $residentialPhone->addAttribute('maxlength', '20');
        $bgrFields[] = $residentialPhone;
        
        // Field work phone
        $workPhone = new MTextField('workPhone', $this->getFormValue('workPhone',$data->workPhone), _M('Trabalho',$module), 20);
        $workPhone->setJsHint(_M('Informe o fone comercial',$module));
        $workPhone->addAttribute('maxlength', '20');
        $bgrFields[] = $workPhone;
        
        // Field cell phone
        $cellPhone = new MTextField('cellPhone', $this->getFormValue('cellPhone',$data->cellPhone), _M('Celular',$module), 20);
        $cellPhone->setJsHint(_M('Informe o fone celular',$module));
        $cellPhone->addAttribute('maxlength', '20');
        $bgrFields[] = $cellPhone;

        // Field message phone
        $messagePhone = new MMultiLineField('messagePhone', $this->getFormValue('messagePhone',$data->messagePhone), _M('Mensagem',$module), 50, 5, 33);
        $messagePhone->setJsHint(_M('Informe o fone para recados',$module));
        $bgrFields[] = $messagePhone;
        
        $bsg = new SBaseGroup(null, _M('Fones',$module), $bgrFields);
        $bsg->showLabel = true;
        $bsg->width = '99%';
        $fields[] = $bsg;
        unset($bgrFields);
        
        //BaseGroup 3
        //Field work at home
        $workAtHome = new MSelection( 'workAtHome', SAGU::NVL($this->getFormValue('workAtHome',$data->workAtHome), DB_FALSE), _M('Trabalha em casa',$module) );
        $workAtHome->options = SAGU::listYesNo();
        $workAtHome->addAttribute('style', 'width:93px');
        $workAtHome->setJsHint(_M('Informe se a pessoa trabalha em casa',$module));        
        $bgrFields[] = $workAtHome;

        // Field work employer name
        $workEmployerName = new MTextField('workEmployerName', $this->getFormValue('workEmployerName',$data->workEmployerName), _M('Nome da instituição',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $workEmployerName->setJsHint(_M('Informe o nome da instituição',$module));
        $bgrFields[] = $workEmployerName;

        // Field work funcition
        $workFunction = new MTextField('workFunction', $this->getFormValue('workFunction',$data->workFunction), _M('Cargo',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $workFunction->setJsHint(_M('Informe o cargo',$module));
        $bgrFields[] = $workFunction;
        
        // Field work start date
        $workStartDate = new MCalendarField('workStartDate', $this->getFormValue('workStartDate',$data->workStartDate), _M('Início',$module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $workStartDate->setJsHint(_M('Informe a data de início',$module));
        $bgrFields[] = $workStartDate;

        // Field work end date
        $workEndDate = new MCalendarField('workEndDate', $this->getFormValue('workEndDate',$data->workEndDate), _M('Fim',$module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $workEndDate->setJsHint(_M('Informe a data de fim',$module));
        $bgrFields[] = $workEndDate;



        $zipCodeLabel = new MText('zipCodeWorkText', _M('CEP',$module) . ':');
        $zipCodeLabel->setWidth(150);
        $zipCodeLabel->setClass('m-caption');
        $zipCode = new MIntegerField('zipCodeWork', $this->getFormValue('zipCodeWork',$data->zipCodeWork), NULL, SAGU::getParameter('BASIC', 'FIELD_ZIPCODE_SIZE'), _M('Somente números. Ex.: 99999999.',$module));
        $zipCode->setJsHint(_M('Informe o CEP do local de trabalho',$module));
        $hctZipCode = new MHContainer('hctZipCode', array($zipCodeLabel, $zipCode));
        $hctZipCode->setShowLabel(true);
        $bgrFields[] = $hctZipCode;


        $bgrFields[] = new MDiv('response', $this->changeData($data));

        // Field country name work
        $countryNameWork = new MTextField('countryNameWork', $this->getFormValue('countryNameWork', 'BRASIL'), _M('País', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $countryNameWork->setReadOnly(true);
        $countryNameWork->setJsHint(_M('Informe o nome do país de trabalho',$module));
        $bgrFields[] = $countryNameWork;

        /*
        // Field city work
        $cityNameWork = new MTextField('cityNameWork', $this->getFormValue('cityNameWork',$data->cityNameWork), _M('Cidade',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $cityNameWork->setReadOnly(true);
        $cityNameWork->setJsHint(_M('Informe o nome da cidade de trabalho',$module));
        $bgrFields[] = $cityNameWork;

        // Field state name work
        $stateNameWork = new MTextField('stateNameWork', $this->getFormValue('stateNameWork',$data->stateNameWork), _M('Estado', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $stateNameWork->setJsHint(_M('Informe o nome do estado de trabalho',$module));
        $stateNameWork->setReadOnly(true);
        $bgrFields[] = $stateNameWork;
        */

        // Field location type
        $busLocationType = new BusinessBasicBusLocationType();
        $locationType = new MSelection('locationTypeWork', $this->getFormValue('locationTypeWork', $data->locationTypeIdWork), _M('Tipo de logradouro',$module), $busLocationType->listLocationType(), false, '');
        $locationType->setJsHint(_M('Informe o tipo de logradouro da pessoa',$module));
        $bgrFields[] = $locationType;

        // Field location work
        $locationWork = new MTextField('locationWork', $this->getFormValue('locationWork',$data->locationWork), _M('Logradouro',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $locationWork->setJsHint(_M('Informe o local de trabalho',$module));
        $bgrFields[] = $locationWork;

        // Field complement work
        $complementWork = new MTextField('complementWork', $this->getFormValue('complementWork',$data->complementWork), _M('Complemento',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $complementWork->setJsHint(_M('Informe o complemento do logradouro',$module));
        $bgrFields[] = $complementWork;

        // Field meighborhood work
        $neighborhoodWork = new MTextField('neighborhoodWork', $this->getFormValue('neighborhoodWork',$data->neighborhoodWork), _M('Bairro',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $neighborhoodWork->setJsHint(_M('Informe o bairro de trabalho',$module));
        $bgrFields[] = $neighborhoodWork;

        $bsg = new SBaseGroup(null, _M('Trabalho', $module), $bgrFields);
        $bsg->showLabel = true;
        $bsg->width = '99%';
        $fields[] = $bsg;
        unset($bgrFields);

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
    }

    /**
     * Event triggered when user click next
     **/
    public function nextStepButton_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        if ( $this->fieldsOk() )
        {
            if ( $this->GetFormValue('dateBirth') )
            {
                parent::nextStepButton_click();
            }
            else
            {
                $this->AddError(_M('O campo "Data de nascimento" deve ser informado.', $module));
            }
        }
    }

    public function fieldsOk()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data = $this->getTypesData($action);

        if ( strlen($data->maritalStatusId) > 0 )
        {
            $bus = new BusinessBasicBusMaritalStatus();
            $maritalStatus = $bus->getMaritalStatus($data->maritalStatusId);
            if ( is_null($maritalStatus->maritalStatusId) )
            {
                $this->addError(_M('O código @1 informado não existe.', $module, _M('estado civil', $module)));
            }
        }
        if ( strlen($data->cityIdBirth) > 0 )
        {
            $bus = new BusinessBasicBusCity();
            $city = $bus->getCity($data->cityIdBirth);
            if ( is_null($city->cityId) )
            {
                $this->addError(_M('O código @1 informado não existe.', $module, _M('cidade natal', $module)));
            }
        }
        if ( strlen($data->responsableLegalId) > 0 )
        {
            $bus = new BusinessBasicBusPerson();
            $person = $bus->getPerson($data->responsableLegalId);
            if ( is_null($person->personId) )
            {
                $this->addError(_M('O código @1 informado não existe.', $module, _M('responsável legal', $module)));
            }
        }
        if ( strlen($data->specialNecessityId) > 0 )
        {
            $bus = new BusinessBasicBusSpecialNecessity();
            $specialNecessity = $bus->getSpecialNecessity($data->specialNecessityId);
            if ( is_null($specialNecessity->specialNecessityId) )
            {
                $this->addError(_M('O código @1 informado não existe.', $module, _M('necessidade especial', $module)));
            }
        }
        if ( strlen($data->ethnicOriginId) > 0 )
        {
            $bus = new BusinessBasicBusEthnicOrigin();
            $ethnicOrigin = $bus->getEthnicOrigin($data->ethnicOriginId);
            if ( is_null($ethnicOrigin->ethnicOriginId) )
            {
                $this->addError(_M('O código @1 informado não existe.', $module, _M('origem étnica', $module)));
            }
        }
        if ( strlen($data->cityIdWork) > 0 )
        {
            $bus = new BusinessBasicBusCity();
            $city = $bus->getCity($data->cityIdWork);
            if ( is_null($city->cityId) )
            {
                $this->addError(_M('O código @1 informado não existe.', $module, _M('cidade do trabalho', $module)));
            }
        }
        if ( strlen($data->dateBirth) > 0 )
        {
            if ( SAGU::getParameter('basic', 'MINORS_NEED_RESPONSIBLE') == 'YES' )
            {
                if ( SAGU::dateDiff(date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')), $data->dateBirth) / 365 < SAGU::getParameter('BASIC', 'MAJORITY_AGE') )
                {
                    if ( strlen($data->responsableLegalId) == 0 )
                    {
                        $this->addError(_M('De acordo com a data de aniversário informada, esta pessoa tem menos de @1 anos de idade e ainda não atingiu a maioridade. Por favor, indique um responsável legal para prosseguir.', $module, SAGU::getParameter('BASIC', 'MAJORITY_AGE')));
                    }
                }
            }
        }

        return ($this->hasErrors() == 0);
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData($action = NULL)
    {
        $data = (array)$this->getStepData() + (array)$this->getData();
        $data = (object)$data;
        return $this->parseData($data);
    }
    
    public function parseData($data)		
    {
        $data->name = $data->personName; //FrmPerson
        $data->locationTypeId = $data->locationType; //FrmPerson
        $data->personTitleId  = $data->txtPersonTitleId; //FrmPerson
        $data->locationTypeIdWork = $data->locationTypeWork;
        return $data;		
    }

    public function saveData($data = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        if ( !$this->fieldsOk() )
        {
            return false;
        }

        if (!$data)
        {
            $data = $this->getTypesData($action);
        }
        else
        {
            $data = $this->parseData($data);
        }
        
        // Pega os dados da foto.
        $photoInfo = SPhotoManager::getData('photoManager');
                
        if(!is_null($photoInfo))
        {
            $data->_uploadFile = $photoInfo->tmpFilePath;
                        
        }
        
        $business = new BusinessBasicBusPhysicalPerson();
        $busUser = new BusinessAdminUser();

        //PERSON e PHYSICAL PERSON
        $needUpdate = (strlen($data->personId) > 0) && ( strlen($business->getPhysicalPerson($data->personId)->personId) > 0 );

        if ( $function == 'update' || $needUpdate )
        {
            //Atualiza pessoa
            $ok = $business->updatePhysicalPerson($data, true, true);

            if ($ok && $function == 'insert') //Return personId if is insert
            {
                $ok = $data->personId;
            }
            else
            {
                $ok = $data->personId;
            }
        }
        //Função inserir
        else if ( $function == 'insert' )
        {
            //Insere pessoa
            $ok = $business->insertPhysicalPerson($data);
        }

        // Salva campos personalizados
        if ( is_numeric($ok) )
        {
            $this->saveCustomFields($ok, $data, $this->getTransaction());
        }

        return $ok;
    }

    public function changeData($inArgs)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $busCountry = new BusinessBasicBusCountry();
        $busState = new BusinessBasicBusState();
        $busCity = new BusinessBasicBusCity();

        if (empty($inArgs->stateIdWork)) {
            $city = $busCity->getCity($inArgs->cityIdWork);
            $inArgs->stateIdWork = $city->stateId;
        }

        // utilizar somente campos úteis.
        $args = new stdClass();
        $args->stateIdWork = $inArgs->stateIdWork;
        $args->cityIdWork = $inArgs->cityIdWork;
        $args->changed = $inArgs->changed;

        // se o que mudou foi a cidade
        if ( $args->changed == 'cityIdWork' )
        {
            if ( strlen($args->cityIdWork) > 0 )
            {
                $city = $busCity->getCity($args->cityIdWork);

                $args->stateIdWork = $city->stateId;
            }
        }
        // se o que mudou foi o estado
        elseif ( $args->changed == 'stateIdWork' )
        {
            // limpa todos os campos
            $args->cityIdWork = '';
        }


        // carregar países
        $filters = new stdClass();
        $filters->name = '%';

        $states = $busState->searchState($filters);
        // carregar cidades
        if ( strlen($args->stateIdWork) > 0 || count($states) == 0 )
        {
            if ( strlen($args->stateIdWork) > 0 )
            {
                $filters->stateId = $args->stateIdWork;
            }
            $cities = $busCity->searchCity($filters);
        }


        $lblStateIdWork = new MLabel(_M('Estado', $module) . ': ');
        $lblStateIdWork->setClass('m-caption');
        $lblStateIdWork->setWidth(150);
        $txtStateIdWork = new MSelection('stateIdWork', $args->stateIdWork, null, $states);
        $txtStateIdWork->addAttribute('onchange', self::getAjaxAction('stateIdWork'));
        $fields[] = new MHContainer('hctCountry', array($lblStateIdWork, $txtStateIdWork));

        $lblCityIdWork = new MLabel(_M('Cidade', $module) . ': ');
        $lblCityIdWork->setClass('m-caption');
        $lblCityIdWork->setWidth(150);
        $txtCityIdWork = new MSelection('cityIdWork', $args->cityIdWork, null, $cities);
        $fields[] = new MHContainer('hctCountry', array($lblCityIdWork, $txtCityIdWork));

        return $fields;

    }

    public static function getAjaxAction($changed)
    {
        return SForm::getAjaxAction('changeData', 'response', false, array('changed' => $changed));
    }
}
