<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Jonas Guilherme Dahmer [jonas@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Jonas Guilherme Dahmer [jonas@solis.coop.br]
 *
 * @since
 * Class created on 06/01/2012
 *
 */
$MIOLO->uses('ui/controls/msubdetailvalidators.class');
$MIOLO->uses('/ui/controls/msubdetail.class');

class FrmManagerReport extends SForm
{
    public $MIOLO, $module, $action, $busTransaction, $list;
    
    /**
     * Construct
     */
    public function __construct($data)
    {
        $this->MIOLO = MIOLO::getInstance();
        $this->module = MIOLO::getCurrentModule();
        $this->action = MIOLO::getCurrentAction();
                
        $this->busTransaction = new BusinessAdminTransaction();
        
        parent::__construct(_M('Gerenciador de relatórios', $this->module), null, null);

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }

    public function defineFields()
    {   
        $MIOLO = MIOLO::getInstance();
        $this->MIOLO->getRequiredJS4Ajax();
        
        if(MIOLO::_REQUEST('function')=='delete')
        {
            $this->delete();
        }
        elseif(MIOLO::_REQUEST('function')=='update')
        {
            $modulo = MIOLO::_REQUEST('modulo');
            $sreport = new SReport(array('reportName'=>MIOLO::_REQUEST('report'),'module'=>MIOLO::_REQUEST('modulo')));
            $info = $sreport->getReportInfoCurrent();
            
            $basUploadReportInfo = new BasUploadReportInfo();
            $report = MIOLO::_REQUEST('report');
            $filters->report = $report;
            $reportInfo = $basUploadReportInfo->search($filters);
            
            count($reportInfo->uploadReportInfoId) > 0 ? $opt = $reportInfo->authenticationRequired : DB_FALSE;
                        
            $fields[] = new MCheckBox('autenticacao', DB_TRUE, _M('Permitir geração sem autenticação no Sagu',$this->module), $this->getFormValue('autenticacao', $opt) == DB_TRUE, _M('Sim',$this->module));
            
            $fields[] = new MTextField('titulo', $sreport->getTitle(), _M('Título',$this->module), 40);
            $fields[] = new MTextField('descricao', $sreport->getHelp(), _M('Descrição',$this->module), 40);
            
            $fields[] = new MSelection('permissao', $sreport->getAccess(), _M('Permissão', $this->module), $this->busTransaction->getListTransactions(34));
            
            $fields[] = new MSelection('tipo', $sreport->getType(), _M('Tipo', $this->module), $sreport->listTypes());
            
            // multiselection com modulos
            $modulos = (array) explode(',', $info['show_into_modules']);
            
            $lista = $this->obterListaModulos();
            $moduloFora = $lista[$modulo];
            unset($lista[$modulo]);
            
            $fields[] = $combo = $this->obterComboModulos($lista, $modulos);
            
            $fields[] = new MSeparator();
            $fields[] = $this->genericFields()->labelDica(_M('O módulo <b>@1</b> não aparece na lista porque é o módulo de origem do relatório, e, sendo assim, não pode ser editado.', null, $moduloFora));

            $fields[] = new MButton('btnSave', _M('Salvar', $this->module));
        }
        else if ( MIOLO::_REQUEST('function') == 'deleteImage' )
        {
            $this->deleteImage();
        }
        else
        {
            $sreport = new SReport();
        
            $fields[] = new MFileField('file', '', _M('Arquivo JRXML ou JASPER',$this->module), 40);
            $fields[] = new MSeparator();

            $fields[] = $this->obterComboModulos();
            $fields[] = new MDiv('divPerfil');

            $fields[] = new MButton('btnUpload', _M('Enviar', $this->module));

            $grid = $this->grid = $this->MIOLO->getUI()->getGrid($this->module, 'GrdReports');
            $reports = $sreport->listAllReports(SReport::TYPE_ALL, null, 'gerenciador');
            
            foreach ( $reports as $report )
            {
                $data[] = array($report['name'],utf8_decode($report['title']),utf8_decode($report['help']),_M($report['module'],$this->module),$report['access'],$report['type'],$report['source'],$report['filename']);
            }

            $grid->setData($data);

            $fields[] = $grid;
            $fields[] = new MSeparator();
        
            $fields[] = new MFileField('image', '', _M('Imagem',$this->module), 40);
            $fields[] = new MSeparator();

            $fields[] = new MSelection('img_modulo', '', _M('Módulo', $this->module), SModules::getList());
            $fields[] = new MButton('btnUploadImage', _M('Enviar', $this->module));
            $fields[] = new MSeparator();
            
            $fields[] = new MLabel("<b>Para utilizar uma das imagens abaixo em um relatório informe o seguinte caminho relativo nas propriedades do componente de imagens ../images/nome_imagem.xxx</b>");
            $fields[] = $gridImages = $this->MIOLO->getUI()->getGrid($this->module, 'GrdImages');
            $gridImages->setData($this->getImages());
            
            $fields[] = new MSeparator();
            $fields[] = new MFileField('logo_padrao', '', _M('Logo padrão',$this->module), 40);
            $fields[] = new MButton('btnUploadLogo', _M('Enviar logo padrão', $this->module));
            $fields[] = new MSeparator();
            $fields[] = new MFileField('banner_padrao', '', _M('Banner padrão',$this->module), 40);
            $fields[] = new MButton('btnUploadBanner', _M('Enviar banner padrão', $this->module));
            $fields[] = new MSeparator();
        }
        
        
        $this->setFields($fields);
        $this->setValidators($validators);
        parent::defineFields();
        
    }
    
    /**
     * Obtem a combo para selecionar os modulos do relatorio
     * 
     * @return MMultiSelection
     */
    public function obterComboModulos($lista = array(), $values = array())
    {
        if ( !$lista )
        {
            $lista = $this->obterListaModulos();
        }
        
        return new MMultiSelection('modulos', $values, _M('Módulos'), $lista, false, '', 20);
    }
    
    /**
     * Obtem os modulos para o relatorio
     * 
     * @return array
     */
    public function obterListaModulos()
    {
        $modulos = SModules::getList();
        
        unset($modulos['portal']);
        unset($modulos['base']);
        unset($modulos['avinst']);
        
        asort($modulos);
        
        return $modulos;
    }
    
    public function moduloChange($args)
    {
        if ( $args->modulo == 'portal' )
        {
            $fields[] = new MSelection('perfil', '', _M('Perfil no portal', $module), array(
                'aluno' => 'Aluno',
                'professor' => 'Professor',
                'coordenador' => 'Coordenador'
            ));
            
            $fields[] = new MLabel("<b>Quando o relatório contiver apenas um destes parâmetros 'groupid', 'personid', 'contractId' ou 'inscricaoId', 
                o relatório será gerado automaticamente para a disciplina selecionada ou a pessoa logada, ou o contrato da pessoa logada, ou a inscrição da pessoa logada no portal, respectivamente.</b>");
        }
        else
        {
            $fields[] = new MDiv('divPerfil');
        }
        
        return SAGU::alignFields($fields);
    }
    
    public function btnUploadLogo_click()
    {
        $data = $this->getData();
        if ( $_FILES['logo_padrao']['type'] == 'image/png' )
        {
            $file = $this->MIOLO->getConf('home.miolo') . '/modules/basic/reports/logo.png';
            if ( move_uploaded_file($_FILES['logo_padrao']['tmp_name'], $file) )
            {
                $msg = _M('Logo padrão enviado com sucesso.',$this->module);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto)>0 ? $goto : $this->MIOLO->getActionURL($this->module, $this->action);
                $caption = _M('Informação',$this->module);
                $this->MIOLO->information($msg, $goto);
            }
            else
            {
                $msg = _M('Erro ao enviar imagem.<br>Verifique se o servidor possui permissão de escrita no diretório '.$dir,$this->module);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto)>0 ? $goto : $this->MIOLO->getActionURL($this->module, $this->action);
                $caption = _M('Erro',$this->module);
                $this->MIOLO->error( $msg, $goto, $caption );
            }
        }
        else
        {
            $msg = _M('A imagem do logo padrão deve ser do tipo PNG.', $this->module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $this->MIOLO->getActionURL($this->module, $this->action);
            $caption = _M('Informação',$this->module);
            $this->MIOLO->information($msg, $goto);
        }
    }
    
    public function btnUploadBanner_click()
    {
        $data = $this->getData();               
        if ( $_FILES['banner_padrao']['type'] == 'image/png' )
        {
            $file = $this->MIOLO->getConf('home.miolo') . '/modules/basic/reports/banner.png';
            if ( move_uploaded_file($_FILES['banner_padrao']['tmp_name'], $file) )
            {
                $msg = _M('Banner padrão enviado com sucesso.',$this->module);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto)>0 ? $goto : $this->MIOLO->getActionURL($this->module, $this->action);
                $caption = _M('Informação',$this->module);
                $this->MIOLO->information($msg, $goto);
            }
            else
            {
                $msg = _M('Erro ao enviar imagem.<br>Verifique se o servidor possui permissão de escrita no diretório '.$dir,$this->module);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto)>0 ? $goto : $this->MIOLO->getActionURL($this->module, $this->action);
                $caption = _M('Erro',$this->module);
                $this->MIOLO->error( $msg, $goto, $caption );
            }
        }
        else
        {
            $msg = _M('A imagem do banner padrão deve ser do tipo PNG.', $this->module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $this->MIOLO->getActionURL($this->module, $this->action);
            $caption = _M('Informação',$this->module);
            $this->MIOLO->information($msg, $goto);
        }
    }
    
    public function btnUploadImage_click()
    {
        $data = $this->getData();
        
        if ( !$data->img_modulo )
        {
            $msg = _M('É necessário informar o módulo da imagem.',$this->module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $this->MIOLO->getActionURL($this->module, $this->action);
            $caption = _M('Informação',$this->module);
            $this->MIOLO->information($msg, $goto);
        }
        else
        {
            // Se o diretorio nao estiver configurado no conf, utiliza o padrao.
            $dir = $this->MIOLO->getConf('options.reportsdir');
            if ( $dir )
            {
                $dir .= $data->img_modulo . '/images/';
            }
            else
            {
                $dir = $this->MIOLO->getConf('home.miolo') . '/cliente/iReport/' . $data->img_modulo . '/images/';
            }

            if ( !is_dir($dir) )
            {
                mkdir($dir, 0777, true);
            }

            $path = $dir.$_FILES['image']['name'];        
            unlink($path); //caso exista o arquivo, apaga para sobrescrever
            if ( move_uploaded_file($_FILES['image']['tmp_name'],$path) )
            {
                $msg = _M('Imagem enviada com sucesso.',$this->module);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto)>0 ? $goto : $this->MIOLO->getActionURL($this->module, $this->action);
                $caption = _M('Informação',$this->module);
                $this->MIOLO->information($msg, $goto);
            }
            else
            {
                $msg = _M('Erro ao enviar imagem.<br>Verifique se o servidor possui permissão de escrita no diretório '.$dir,$this->module);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto)>0 ? $goto : $this->MIOLO->getActionURL($this->module, $this->action);
                $caption = _M('Erro',$this->module);
                $this->MIOLO->error( $msg, $goto, $caption );
            }
        }
    }
    
    public function btnUpload_click()
    {
        $data = $this->getData();        
        $modulos = (array) $data->modulos;

        if ( count($modulos) == 0 )
        {
            $msg = _M('É necessário informar um ou mais módulos do relatório.',$this->module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $this->MIOLO->getActionURL($this->module, $this->action);
            $caption = _M('Informação',$this->module);
            $this->MIOLO->information($msg, $goto);
        }
        else
        {
            $rootModule = current($modulos);

            // Se o diretorio nao estiver configurado no conf, utiliza o padrao.
            $dir = $this->MIOLO->getConf('options.reportsdir');
            if ( $dir )
            {
                $dir .= $rootModule . '/reports/';
            }
            else
            {
                $dir = $this->MIOLO->getConf('home.miolo') . '/cliente/iReport/' . $rootModule . '/reports/';
            }
            
            if ( !(substr($_FILES['file']['name'], -5) == 'jrxml') && !(substr($_FILES['file']['name'], -6) == 'jasper') )
            {
                $msg = _M('O arquivo deve ser do tipo JRXML ou JASPER.', $this->module);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto)>0 ? $goto : $this->MIOLO->getActionURL($this->module, $this->action);
                $caption = _M('Informação',$this->module);
                $this->MIOLO->information($msg, $goto);
            }

            //
            // rotina relativa ao PORTAL adaptada
            //
            $subPortalModules = array(
                'portal-coordinator',
                'portal-professor',
                'portal-pupil'
            );
            
            foreach ( $subPortalModules as $modulo )
            {
                if ( in_array($modulo, $modulos) )
                {
                    $pdir = $this->MIOLO->getConf('options.reportsdir');

                    if ( $pdir )
                    {
                        if ( $modulo == 'portal-pupil' )
                        {
                            $pdir .= 'portal/reports/aluno/';
                        }
                        elseif ( $modulo == 'portal-professor' )
                        {
                            $pdir .= 'portal/reports/professor/';
                        }
                        elseif ( $modulo == 'portal-coordinator' )
                        {
                            $pdir .= 'portal/reports/coordenador/';
                        }
                        else
                        {
                            $pdir .= $modulo . '/reports/';
                        }
                    }
                    else
                    {
                        if ( $modulo == 'portal-pupil' )
                        {
                            $pdir = $this->MIOLO->getConf('home.miolo') . '/cliente/iReport/portal/reports/aluno/';
                        }
                        elseif ( $modulo == 'portal-professor' )
                        {
                            $pdir = $this->MIOLO->getConf('home.miolo') . '/cliente/iReport/portal/reports/professor/';
                        }
                        elseif ( $modulo == 'portal-coordinator' )
                        {
                            $pdir = $this->MIOLO->getConf('home.miolo') . '/cliente/iReport/portal/reports/coordenador/';
                        }
                    }
                    
                    if ( !is_dir($pdir) )
                    {
                        mkdir($pdir, 0777, true);
                    }
                    
                    $ppath = $pdir . $_FILES['file']['name'];
                    copy($_FILES['file']['tmp_name'], $ppath);
                }
            }
            // fim rotina PORTAL

            if ( !in_array($rootModule, $subPortalModules) )
            {
                if ( !is_dir($dir) )
                {
                    mkdir($dir, 0777, true);
                }
                
                $path = $dir.$_FILES['file']['name'];        
                unlink($path); //caso exista o arquivo, apaga para sobrescrever
                
                if ( move_uploaded_file($_FILES['file']['tmp_name'],$path) )
                {
                    //Só faz o update do show into modules caso seja jrxml
                    if ( substr($_FILES['file']['name'], -5) == 'jrxml' )
                    {
                        SReport::updateShowIntoModules($path, $modulos);
                    }
                    
                    // Sincroniza menu
                    $sreport = new SReport();
                    try
                    {
                        $sreport->synchronizeWithMenu();

                        $msg = _M('Relatório enviado com sucesso.',$this->module);
                        $goto = SAGU::getStackBackUrl();
                        $goto = strlen($goto)>0 ? $goto : $this->MIOLO->getActionURL($this->module, $this->action);
                        $caption = _M('Informação',$this->module);
                        $this->MIOLO->information($msg, $goto);
                    }
                    catch( Exception $e )
                    {
                        $msg = $e->getMessage();
                        if ( $e->getCode() == 1001 )
                        {
                            $msg .= "<br>Por favor, verifique o valor do parâmetro 'show_into_modules' deste relatório. ";
                        }
                        $goto = SAGU::getStackBackUrl();
                        $goto = strlen($goto)>0 ? $goto : $this->MIOLO->getActionURL($this->module, $this->action);
                        $caption = _M('Erro',$this->module);
                        $this->MIOLO->error( $msg, $goto, $caption );
                    }
                }
                else
                {
                    $msg = _M('Erro ao enviar relatório.<br>Verifique se o servidor possui permissão de escrita no diretório '.$dir,$this->module);
                    $goto = SAGU::getStackBackUrl();
                    $goto = strlen($goto)>0 ? $goto : $this->MIOLO->getActionURL($this->module, $this->action);
                    $caption = _M('Erro',$this->module);
                    $this->MIOLO->error( $msg, $goto, $caption );
                }
            }
            else
            {
                $msg = _M('Relatório enviado com sucesso.',$this->module);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto)>0 ? $goto : $this->MIOLO->getActionURL($this->module, $this->action);
                $caption = _M('Informação',$this->module);
                $this->MIOLO->information($msg, $goto);
            }
        }
    }
    
    public function btnSave_click()
    {
        $data = $this->getData();
        
        $basUploadReportInfo = new BasUploadReportInfo();
        $report = MIOLO::_REQUEST('report');
        $rmodulo = MIOLO::_REQUEST('modulo');
        
        $filters->report = $report;
        $reportInfo = $basUploadReportInfo->search($filters);

        count($reportInfo->uploadReportInfoId) > 0 ? $basUploadReportInfo->uploadReportInfoId = $reportInfo->uploadReportInfoId : null;
        $basUploadReportInfo->report = $report;
        $data->autenticacao ? $basUploadReportInfo->authenticationRequired = $data->autenticacao : $basUploadReportInfo->authenticationRequired = DB_FALSE;

        $sreport = new SReport(array('reportName'=>MIOLO::_REQUEST('report'),'module'=>MIOLO::_REQUEST('modulo')));
        $sreport->setTitle(utf8_encode($data->titulo));
        $sreport->setHelp(utf8_encode($data->descricao));
        $sreport->setAccess($data->permissao);
        $sreport->setType($data->tipo);
        
        foreach ( (array) $data->modulos as $modulo )
        {
            // Se o diretorio nao estiver configurado no conf, utiliza o padrao.
            $dir = $this->MIOLO->getConf('options.reportsdir');
            if ( $dir )
            {
                if ( $modulo == 'portal-pupil' )
                {
                    $dir .= 'portal/reports/aluno/';
                }
                elseif ( $modulo == 'portal-professor' )
                {
                    $dir .= 'portal/reports/professor/';
                }
                elseif ( $modulo == 'portal-coordinator' )
                {
                    $dir .= 'portal/reports/coordenador/';
                }
                else
                {
                    $dir .= $modulo . '/reports/';
                }
            }
            else
            {
                if ( $modulo == 'portal-pupil' )
                {
                    $dir = $this->MIOLO->getConf('home.miolo') . '/cliente/iReport/portal/reports/aluno/';
                }
                elseif ( $modulo == 'portal-professor' )
                {
                    $dir = $this->MIOLO->getConf('home.miolo') . '/cliente/iReport/portal/reports/professor/';
                }
                elseif ( $modulo == 'portal-coordinator' )
                {
                    $dir = $this->MIOLO->getConf('home.miolo') . '/cliente/iReport/portal/reports/coordenador/';
                }
                else
                {
                    $dir = $this->MIOLO->getConf('home.miolo') . '/cliente/iReport/' . $modulo . '/reports/';
                }
            }
            
            if ( !is_dir($dir) )
            {
                mkdir($dir, 0777, true);
            }
            
            copy($reportFile, $dir . basename($reportFile));
        }
        
        if ( $sreport->saveReport() )
        {
            // atualiza parametro show_into_modules
            $reportFile = $sreport->findCurrentReport();
            $modulos = array_merge(array($rmodulo), (array) $data->modulos);
            
            SReport::updateShowIntoModules($reportFile, $modulos);
            
            if( $report && $data->autenticacao )
            {
                $basUploadReportInfo->save();
            }
            else if( $report && !$data->autenticacao && count($reportInfo->uploadReportInfoId) > 0 )
            {
                $basUploadReportInfo->save();
            }
            
            $sreport->synchronizeWithMenu();
            $msg = _M('Relatório atualizado com sucesso.',$this->module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $this->MIOLO->getActionURL($this->module, $this->action);
            $caption = _M('Informação',$this->module);
            $this->MIOLO->information($msg, $goto);
        }
        else
        {
            $msg = _M('Erro ao atualizar relatório.',$this->module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $this->MIOLO->getActionURL($this->module, $this->action);
            $caption = _M('Erro',$this->module);
            $this->MIOLO->error( $msg, $goto, $caption );
        }
    }
    
    public function delete()
    {
        $sreport = new SReport(array('reportName'=>MIOLO::_REQUEST('report'),'module'=>MIOLO::_REQUEST('modulo')));
        $opts = array('event' => 'deleteConfirm',
                      'function' => 'deleteConfirm',
                      'report' => MIOLO::_request('report'),
                      'modulo' => MIOLO::_request('modulo'));
        
        $gotoYes = $this->MIOLO->getActionURL( $this->module, $this->action, null, $opts );
        $goto = SAGU::getStackBackUrl();
        $gotoNo  = strlen($goto)>0 ? $goto : $this->MIOLO->getActionURL($this->module, $this->action);
        $msg = 'Deseja mesmo remover o relatório de '.  $sreport->getTitle().' do módulo '.MIOLO::_request('modulo').'?';
        $caption = _M('Questão',$this->module);
        $this->MIOLO->question($msg, $gotoYes, $gotoNo);
    }
    
    public function deleteImage()
    {
        $opts = array('event' => 'deleteImageConfirm',
                      'function' => 'deleteImageConfirm',
                      'image' => MIOLO::_REQUEST('image'));

        $gotoYes = $this->MIOLO->getActionURL( $this->module, $this->action, null, $opts );
        $goto = SAGU::getStackBackUrl();
        $gotoNo  = strlen($goto)>0 ? $goto : $this->MIOLO->getActionURL($this->module, $this->action);
        $msg = 'Deseja mesmo remover esta imagem?';
        $caption = _M('Questão',$this->module);
        $this->MIOLO->question($msg, $gotoYes, $gotoNo);
    }
    
    public function deleteImageConfirm()
    {                
        if ( unlink(MIOLO::_REQUEST('image')) )
        {
            $msg = _M('Imagem removida com sucesso.',$this->module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $this->MIOLO->getActionURL($this->module, $this->action);
            $caption = _M('Informação',$this->module);
            $this->MIOLO->information($msg, $goto);
        }
        else
        {
            $msg = _M('Não foi possível remover o arquivo da imagem. Verifique a permissão no arquivo a ser removido.',$this->module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $this->MIOLO->getActionURL($this->module, $this->action);
            $caption = _M('Erro',$this->module);
            $this->MIOLO->error( $msg, $goto, $caption );
        }
    }

    public function deleteConfirm()
    {
        $sreport = new SReport(array('reportName'=>MIOLO::_REQUEST('report'),'module'=>MIOLO::_REQUEST('modulo')));
        if ( $sreport->deleteReport() )
        {   
            $sreport->synchronizeWithMenu();
            $basUploadReportInfo = new BasUploadReportInfo();
            $filters->report = MIOLO::_REQUEST('report');
            $reportInfo = $basUploadReportInfo->search($filters);
            $basUploadReportInfo->uploadReportInfoId = $reportInfo->uploadReportInfoId;
            strlen($reportInfo->uploadReportInfoId) > 0 ? $basUploadReportInfo->delete() : null;
                        
            $msg = _M('Relatório removido com sucesso.',$this->module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $this->MIOLO->getActionURL($this->module, $this->action);
            $caption = _M('Informação',$this->module);
            $this->MIOLO->information($msg, $goto);
        }
        else
        {
            $msg = _M('Não foi possível remover o arquivo. Verifique a permissão no arquivo a ser removido.',$this->module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $this->MIOLO->getActionURL($this->module, $this->action);
            $caption = _M('Erro',$this->module);
            $this->MIOLO->error( $msg, $goto, $caption );
        }
    }
    
    public function getImages()
    {
        $images = array();
        $count = 0;
        
        $modules = SModules::getList();
        foreach( $modules as $key => $module )
        {
            $dir = $this->MIOLO->getConf('options.reportsdir');
            if ( $dir )
            {
                $dir .= $key . '/images/';
            }
            else
            {
                $dir = $this->MIOLO->getConf('home.miolo') . '/cliente/iReport/' . $key . '/images/';
            }

            if ( is_dir($dir) )
            {
                $directory = dir($dir);
                while ( $file = $directory->read() )
                {
                    $fileInfo = pathinfo($dir.$file);
                    
                    if ( in_array($fileInfo['extension'], array('png', 'gif', 'jpg', 'jpeg', 'bmp')) )
                    {
                        $urlImg = $this->MIOLO->getConf('home.url');
                        $urlImg = str_replace('html', '', $urlImg);
                        $urlImg .= '/cliente/iReport/' . $key . '/images/' . $file;                        
                        
                        $images[$count][] = $dir . $file;
                        $images[$count][] = "<center><img height=\"64px\" width=\"64px\" border=\"0\" src=\"$urlImg\" id=\"img_$count\" ></center>";
                        $images[$count][] = $file;
                        $images[$count][] = $key;
                        $images[$count][] = $dir . $file;
                        $images[$count][] = $fileInfo['extension'];

                        $count++;
                    }
                }
                $directory->close();
            }
        }
        
        return $images;        
    }
   
}
?>
