<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Parameters table form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 27/07/2006
 *
 **/

/**
 * Form to manipulate parameters table
 **/
class FrmParametersTable2 extends SForm
{

    /**
     * Class constructor
     **/
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();
        parent::__construct( _M('Tabela de parâmetros', 'basic'), NULL, NULL );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        $fields[] = new MDiv('promptMsg', null);

        $filters->moduleConfig = $module;
        $business = new BusinessBasicBusConfig();
        $data     = $business->searchConfig($filters);

        if ( count($data)>0 )
        {
            $basConfig = new BasConfig();
            foreach ( $data as $row )
            {
                list ( $basConfig->moduleConfig,
                        $basConfig->parameter,
                        $basConfig->value,
                        $basConfig->shortDescription,
                        $basConfig->description,
                        $basConfig->type ) = $row;

                $field         = new MTextField($basConfig->parameter, $this->getFormValue($basConfig->parameter, $basConfig->value), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
                $field->setJsHint($basConfig->description);
                //$validators[] = new MRequiredValidator($basConfig->parameter);

                $field2 = new MText('txt' . $basConfig->parameter, $basConfig->parameter, 'red');


                $field3 = new MText('txt', ' - ' . $basConfig->shortDescription);


                $hct1            = new MHContainer('hct1', array($field, $field2, $field3));
                $hct1->width     = '100%';
                $hct1->showLabel = false;

                $fields[] = $hct1;
            }
        }

        $fields[] = new Separator('');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $business = new BusinessBasicBusConfig();
        $data      = $this->getTypesData();

        try
        {
            if ( count($data)>0 )
            {
                $basConfig = new BasConfig();
                $business->beginTransaction();
                foreach ( $data as $parameter => $row )
                {
                    $basConfig->moduleConfig = $module;
                    $basConfig->parameter    = $parameter;
                    $basConfig->value        = $row;

                    $business->updateConfigValue($basConfig);
                }
                $business->commitTransaction();
            }
            $msg      = SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED');
            $caption = _M('Informação', $module);
            $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
        }
        catch( Exception $e )
        {
            $msg  = _M('Erro executando a operação solicitada.',$module) . $e->getMessage();
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro',$module);
            $this->addError($msg);
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $filters->moduleConfig = $module;
        $business = new BusinessBasicBusConfig();
        $data      = $business->searchConfig($filters);

        if ( count($data)>0 )
        {
            $basConfig = new BasConfig();
            foreach ( $data as $row )
            {
                list ( $basConfig->moduleConfig,
                        $basConfig->parameter,
                        $basConfig->value,
                        $basConfig->description,
                        $basConfig->type ) = $row;

                eval('$data2[\'' . $basConfig->parameter . '\'] = $this->' . $basConfig->parameter . '->value;');
            }
        }

        return $data2;
    }
}

?>
