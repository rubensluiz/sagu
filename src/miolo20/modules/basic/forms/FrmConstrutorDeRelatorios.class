<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Luís Augusto Weber Mercado [luis_augusto@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Luís Augusto Weber Mercado [luis_augusto@solis.com.br]
 * 
 * @since
 * Class created on 09/09/2014
 *
 **/
$MIOLO = MIOLO::getInstance();
$MIOLO->page->addScript("construtorRelatorios.js", "basic");
$MIOLO->page->addScript('m_validate.js');
$MIOLO->page->addScript('datepicker/calendar.js');
$MIOLO->page->addScript('datepicker/lang/calendar-pt-br.js');
$MIOLO->page->addScript('datepicker/calendar-setup.js');
$MIOLO->page->addStyleURL($MIOLO->getAbsoluteURL('scripts/datepicker/css/calendar-win2k-1.css'));

class FrmConstrutorDeRelatorios extends SManagementForm
{
    private $sql;
    private $sqlFiltrado;
    private $views = array();
    private $funcoes = array();
    private $selecionado;
    private $grid;
    private $reportInfo;
    const DEFAULT_GRID_SIZE = 15;
        
    /**
     * Construtor da classe
     * 
     */
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();
                
        $this->views = BasConstrutorDeRelatorios::listaVisoes();
        $this->funcoes = BasConstrutorDeRelatorios::listaFuncoes();
        $this->reportInfo = array();
        
        parent::__construct(new BasConstrutorDeRelatorios(), array("relatorioid"), null, _M("Construtor de relatórios", $module));
        
        $this->disableToolbar();
        
        $this->addStyleFile('construtorRelatorios.css');
        $this->addStyleFile('m_grids.css');
                        
    }
    
    /**
     * Método para definir os fields
     * 
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request("function");

        $fields = array();
        $validators = array();
        
        switch($function)
        {
            case SForm::FUNCTION_INSERT:
            case SForm::FUNCTION_UPDATE:
                $id = $_REQUEST["relatorioid"];
                $jsCompl = "";
                
                if( $_REQUEST["primeiroacesso"] == "" )
                {
                    $this->removeInformacaoSecao();
                    
                }
                
                if( $id )
                {
                    $this->getObject()->relatorioid = $id;
                    
                    $savedData = $this->getTypeObjectPopulated()->dados;
                              
                    $this->adicionaInformacaoSecao(array("id" => $id, "nome" => $this->getTypeObjectPopulated()->nome));
                    
                    $savedInfo = new stdClass();
                    
                    $savedInfo->viewName = $this->getTypeObjectPopulated()->viewbaseada;
                    $savedInfo->savedData = $savedData;
                                        
                    $jsCompl = $this->reload($savedInfo);
                                                            
                }
                
                $gfields = new sGenericFields();
                $fields[] = $gfields->labelDica(_M("Ao selecionar uma visão, as informações desta estarão disponíveis para consulta"));
                $fields[] = $gfields->labelDica(_M("Para impressão do relatório, você deverá conceder as permissões aos grupos desejados em Administração::Grupos. A permissão localiza-se no MODULO DE DESTINO/RELATÓRIOS ou MODULO DE DESTINO/DOCUMENTOS"));
                $fields[] = new MHiddenField("primeiroacesso", MIOLO::_REQUEST("primeiroacesso"));
                
                $rmFields = array();
                $rmButtons = array();
                
                $label = new MLabel(_M("Dados do relatório"));
                $label->setClass("m-label repmaker-title");
                
                $fields[] = new MDiv("divRMOpcoesRelatorio", array(new MDiv("divResultado", "", "repmaker-opcoes"),$label), "repmaker-parent");
                                
                $fields[] = new MTextField("txtNomeRelatorio", $this->getCurrentId() ? $this->getTypeObjectPopulated()->nome : "", _M("Título", $module), 38);
                $validators[] = new MRequiredValidator("txtNomeRelatorio", _M("Título", $module), 80);
                
                $fields[] = new MMultiLineField("txtDescricaoRelatorio", $this->getCurrentId() ? $this->getTypeObjectPopulated()->descricao : "", _M("Descrição", $module), null, 5, 38);
                
                $valores = array_merge($this->views, $this->funcoes);
                // Reordena o array recém criado
                asort($valores);
                $fields[] = new MSelection("cbRMView", null, _M("Visão"), $valores, false);
                $validators[] = new MRequiredValidator("cbRMView", _M("Visão", $module), "required");
                
                $fields[] = new MRadioButtonGroupFixed("rbgHabilitado", $this->getCurrentId() ? $this->getTypeObjectPopulated()->publicado : "f", _M("Habilitar relatório"), array("t" => "Sim", "f" => "Não"), "", "horizontal");
                
                $fields[] = new MRadioButtonGroupFixed("rbgModoRelatorio", "", _M("Modo sintético (informações resumidas)"), array("1" => "Sim", "0" => "Não"), "", "horizontal");
                
                $fields[] = new MDiv("", "", "repmaker-clear");
                                
                $labelCampos = new MLabel(_M("Campos", $module));
                $labelCampos->SetClass("m-label repmaker-title");

                $labelGrupo = new MLabel(_M("Separar e totalizar baseando-se nos campos...", $module));
                $labelGrupo->SetClass("m-label repmaker-title");

                $labelOrdem = new MLabel(_M("Ordenar por...", $module));
                $labelOrdem->SetClass("m-label repmaker-title");

                $labelParametros = new MLabel(_M("Parâmetros", $module));
                $labelParametros->SetClass("m-label repmaker-title");

                // Containers
                $rmFields[] = new MDiv("divRMParametrosParent", array( new MDiv("divLabelParametros", $labelParametros, "repmaker-div-label"), new MDiv("divRMParametros", "", "repmaker-container") ), "repmaker-sel");
                $rmFields[] = new MDiv("divRMCamposParent", array( new MDiv("divLabelCampos", $labelCampos, "repmaker-div-label"), new MDiv("divRMCampos", "", "repmaker-container") ), "repmaker-sel");
                $rmFields[] = new MDiv("divRMOrdemParent", array( new MDiv("divLabelOrdem", $labelOrdem, "repmaker-div-label"), new MDiv("divRMOrdem", "", "repmaker-container") ), "repmaker-sel");
                $rmFields[] = new MDiv("divRMGruposParent", array( new MDiv("divLabelGrupos", $labelGrupo, "repmaker-div-label"), new MDiv("divRMGrupos", "", "repmaker-container") ), "repmaker-sel");
                $action = $MIOLO->GetActionURL("basic", "main:report:construtorRelatorios");
                
                // Botões
                $rmButtons[] = $buttonSave = new MDiv("btnRMSalvar", "", "m-button repmaker-op-button");
                $rmButtons[] = $buttonSaveAs = new MDiv("btnRMSalvarComo", "", "m-button repmaker-op-button");;
                $rmButtons[] = $buttonLink = new MLink("btnRMSearch", null, $action);
                $buttonLink->SetClass("m-button repmaker-op-button repmaker-menubtn-search");
                $rmButtons[] = $buttonSQL = new MDiv("btnRMVerSQL", "", "m-button repmaker-op-button");
                $rmButtons[] = $buttonGerar = new MDiv("btnRMGerar", "", "m-button repmaker-op-button repmaker-menubtn-generate");
                
                $rmFields[] = new MDiv("divRMControles", $rmButtons, "repmaker-controls");

                $divRM = new MDiv("divReportMaker", $rmFields, "repmaker-parent");
                $divRM->addBoxStyle("display", "none");
                $fields[] = $divRM;
                 
                $fields[] = new MDiv("divRMAjaxResponse");

                $actionConfirmarSelecaoView = SForm::getAjaxAction("confirmaMudancaView", "divRMAjaxResponse", false);
                
                // Corrige as posições e seta os listener personalizados
                $js = "
                    ConstRel.reset();

                    (function atribuiEventos() {
                        var content = document.getElementById('extContent');

                        if( content !== null )
                        {
                            content.style.marginTop = '-10px';

                            var comboBox = document.getElementById('cbRMView');
                            
                            comboBox.selectedIndex = 0;

                            comboBox.onfocus = function()
                            {
                                ConstRel.previousSelectedItem = comboBox.selectedIndex;

                            };

                            comboBox.onchange = function()
                            {
                                if( this.selectedIndex !== 0 )
                                {
                                    {$actionConfirmarSelecaoView}
                                        
                                }
                                                                
                            };
                            
                            var txtNomeRelatorio = document.getElementById('txtNomeRelatorio');

                            txtNomeRelatorio.required = true;

                            var btnGerar = document.getElementById('btnRMGerar');
                            btnGerar.title = 'Gerar relatório';

                            var btnSalvar = document.getElementById('btnRMSalvar');
                            btnSalvar.title = 'Salvar relatório';

                            var btnSalvarComo = document.getElementById('btnRMSalvarComo');
                            btnSalvarComo.title = 'Salvar como...';

                            var btnVerSQL = document.getElementById('btnRMVerSQL');

                            btnGerar.onclick = function()
                            {
                                saguDoAjax('salvaRelatorio', 'divResultado', true, '&generateReport=yes&data=' + JSON.stringify(ConstRel.getSave())); return false;
                                    
                            };

                            btnSalvar.onclick = function()
                            {
                                saguDoAjax('salvaRelatorio', 'divRMAjaxResponse', true, '&data=' + JSON.stringify(ConstRel.getSave())); return false;

                            };
                            
                            btnSalvarComo.onclick = function()
                            {
                                saguDoAjax('salvaRelatorio','divRMAjaxResponse',true,'&salvarComo=\'sim\'&data=' + JSON.stringify(ConstRel.getSave())); return false;

                            };

                            btnVerSQL.onclick = function()
                            {
                                saguDoAjax('mostraSQL','divRMAjaxResponse',true,'&data=' + JSON.stringify(ConstRel.getSave())); return false;

                            };

                            btnVerSQL.title = 'Ver consulta que gera o relatório';
                                                        
                            {$jsCompl}

                            var divs = document.querySelectorAll('div.repmaker-div-label');;
                            
                            for( var i = 0; i < divs.length; i++ )
                            {
                                divs[i].addEventListener('click', ConstRel.handlerHide);
                                
                            }
                            
                        }
                        else
                        {
                            setTimeout(atribuiEventos, 10);

                        }

                    })();
                    
                    window.addEventListener('beforeunload', ConstRel.handlerBeforeUnload);
                                        
                ";
                            
                $this->page->onload($js);
                
            break;
        
        }
        
        parent::defineFields($fields, $validators, null);
        
    }
    
    public function getCurrentId()
    {
        $MIOLO = MIOLO::getInstance();
        $info = $MIOLO->session->getValue("relatorioid");
                
        return !is_null($_REQUEST["relatorioid"]) ? $_REQUEST["relatorioid"] : $info;
        
    }
    
    /**
     * 
     * @param type $savedInfo
     */
    public function reload($savedInfo)
    {
        $obj = $this->getCampos($savedInfo->viewName);
        
        if( $this->verificaPermissaoUsuario($obj->nomeView) )
        {
            $data = json_encode($obj);
        
            $js = "
                ConstRel.setup({$data}, {$savedInfo->savedData});

            ";

            return $js;
            
        }
        else
        {
            return null;
            
        }
                
    }
    
    /**
     * Verifica se o usuário possui permissões no relatório sendo aberto
     * 
     */
    public function verificaPermissaoUsuario($nomeView)
    {
        $MIOLO = MIOLO::getInstance();
        
        $keys = array_keys(array_merge($this->views, $this->funcoes));
        
        $valid = in_array($nomeView, $keys);
        
        if( !$valid )
        {
            $action = $MIOLO->GetActionURL("basic", "main:report:construtorRelatorios");

            $MIOLO->error(_M("Você não possui permissão para editar, remover ou visualizar esse relatório!"), $action);
        
            return $valid;
            
        }
        
        return $valid;
        
    }
    
    /**
     * Gera a consulta SQL
     * 
     * @param {Object} $args Argumentos passados via AJAX
     * @return {String} Consulta usada no relatório
     */
    public function geraSQL($args)
    {
        // Converte as informações recebidas para um objeto
        $data = json_decode($args->data);
        
        $info = $args->cbRMView;
        
        $this->selecionado = $info;
        
        $explode = explode(";", $info);
        
        $isFuncao = $explode[1] === BasConstrutorDeRelatorios::SUFIXO_FUNCAO;        
        
        if( $isFuncao )
        {
            for( $i = 0; $i < count($data->parametros); $i++ )
            {
                $this->adicionaInformacaoRelatorio($data->parametros[$i]->nome, $data->parametrosValor[$i]);
                
            }
            
        }
        
        // Navega entre os campos
        for( $i = 0; $i < $data->countCampo; $i++ )
        {
            $tipo = $data->ordemCampo[$i]->tipo;
            $nome = $data->ordemCampo[$i]->nome;
            
            $filtro = !is_null($data->filtrosCampo[$i]) ? $data->filtrosCampo[$i] : false;
            
            // Garante que o filtro no caso do campo númerico seja mesmo um número
            if ( in_array($tipo, array("numeric", "integer")) )
            {
                $filtro = is_numeric($filtro) ? $filtro : false;
                
            }
            
            $coluna = $nome;
            
            $apelido = $data->apelidosCampo[$i] ? utf8_decode($data->apelidosCampo[$i]) : $coluna;
            
            if( $filtro )
            {
                // Se for um array, estamos tratando de datas
                if( is_array($filtro) )
                {
                    $dti = $this->corrigeData($filtro[0]);
                    $dtf = null;
                    $operador = "";
                    
                    // Se o campo Até foi informado
                    if( $filtro[1] )
                    {
                        $dtf = $this->corrigeData($filtro[1]);
                        
                        $operador = "dataestanointervalo({$nome}::date, '{$dti}'::date, '{$dtf}'::date) = TRUE";
                        
                    }
                    else
                    {
                        $operador = "{$nome}::date = '{$dti}'::date";
                        
                    }
                    
                    
                    $filtros[] = $operador;
                    
                    $this->adicionaInformacaoRelatorio($apelido, "{$filtro[0]}" . (!is_null($dtf) ? " até {$filtro[1]}" : "") );
                    
                }
                else
                {
                    $filtro = utf8_decode($filtro);
                    
                    $operador = $tipo === "text" ? " ILIKE '%{$filtro}%'" : " = '{$filtro}'";

                    $filtros[] = $nome . $operador;
                
                    $this->adicionaInformacaoRelatorio($apelido, $filtro);
                    
                }
                                
            }
                                    
        }
        
        return BasConstrutorDeRelatorios::geraSQL($data);
                        
    }
    
    public function adicionaInformacaoRelatorio($identificador, $valor)
    {
        $this->reportInfo[$identificador] = $valor;
        
        MIOLO::getInstance()->session->setValue("crReportInfo", $this->reportInfo);
        
    }
    
    public function corrigeData($data)
    {
        $explode = explode("/", $data);
        
        return implode("-", array_reverse($explode));
        
    }
    
    /**
     * Faz a consulta do SQL filtrado na base
     * 
     * @return {Array} Resultado da consulta do SQL filtrado
     */
    public function getQueryData()
    {
        try
        {
            $msql = new MSql();
                     
            $msql->createFrom($this->sqlFiltrado . " LIMIT 75");
            
            $msql->where = sRelatorioPDF::retiraValoresNulos($msql->where);

            $business =  new BusinessBasicBusGenericReports();

            $query = $business->getDatabase()->getQuery($msql);
            
            return $query;
            
        }
        catch (Exception $e)
        {
            $this->addError($e->getMessage());
            
        }
        
    }
    
    /**
     * Ação carregada quando o usuário tenta mudar de visão
     *
     * @param {Object} $args Argumentos via AJAX
     */
    public function confirmaMudancaView($args)
    {
        $MIOLO = MIOLO::getInstance();
        
        $data = json_decode($args->data);
        
        if( $data->countCampo > 0 )
        {
            $action = SForm::getAjaxAction("carregaCamposView", "divRMAjaxResponse");
            $nope = "document.getElementById('cbRMView').selectedIndex = ConstRel.previousSelectedItem; ConstRel.reset(); mpopup.remove();";

            $msg = _M("Desejas realmente mudar de visão? As operações realizadas até agora serão perdidas.");

            MPopup::confirm(NULL, $msg, $action, $nope);
            
        }
        else
        {
            $MIOLO->page->addAJAXJsCode("ConstRel.reset();");
            $this->carregaCamposView($args);
            
        }
        
        return array();
        
    }
    
    /**
     * Chama a função do script que é responsável por carregar os campos
     * conforme a view informada
     * 
     * @param {Object} $args Argumentos via AJAX
     */
    public function carregaCamposView($args)
    {
        $MIOLO = MIOLO::getInstance();
        
        $data = json_encode( $this->getCampos($args->cbRMView) );
        
        $js = "
            ConstRel.setup({$data});

        ";
        
        $MIOLO->page->addAJAXJsCode($js);
                
        return array();
        
    }
    
    public function getCampos($nome)
    {
        $obj = new stdClass();
        
        $info = explode(";", $nome);
        $campos = null;
        $parametros = array();
        
        $suf = "";
        
        // $info[1] tem a informação se é função ou não
        switch( $info[1] )
        {
            case BasConstrutorDeRelatorios::SUFIXO_FUNCAO:
                $retorno = BasConstrutorDeRelatorios::listaCamposFuncao($info[0]);
                
                $campos = $retorno[0];
                $parametros = $retorno[1];
                
                break;
            
            case BasConstrutorDeRelatorios::SUFIXO_VISAO:
                $campos = BasConstrutorDeRelatorios::listaCamposView($info[0]);
                
                break;
            
            default:
                $campos = BasConstrutorDeRelatorios::listaCamposView($info[0]);
                $suf = ";" . BasConstrutorDeRelatorios::SUFIXO_VISAO;
                
                break;
            
        }
        
        $obj->nomeView = $nome . $suf; // Para os outros relatórios manterem o funcionamento
        $obj->campos = $campos;
        $obj->parametros = $parametros;
        
        return $obj;
        
    }
    
    private function getInformacaoParentTransaction($origem)
    {
        $matches = array();
        $retorno = new stdClass();
        
        preg_match("/(?<=(cr_)).*?(?=_)/", $origem, $matches);
        
        $sigla = $matches[0];
        
        $keys = array_keys(BasConstrutorDeRelatorios::$SIGLAS, $sigla);
            
        $pai = BasConstrutorDeRelatorios::getParentTransactionPeloModulo($keys[0]);
        
        $retorno->idmodule = $keys[0];
        $retorno->parent = $pai;
        
        return $retorno;
        
    }
    
    /**
     * Evento AJAX responsável pela publicação do relatório no menu
     * 
     */
    public function publicarRelatorio($publicar)
    {
        // Se está publicado
        if( $publicar === DB_TRUE )
        {
            if( $this->fazPublicacao() )
            {
                $this->addInfo(_M("Relatório habilitado"));
                
            }

        }
        else if( $publicar === DB_FALSE )
        {
            if( $this->desfazPublicacao() )
            {
                $this->addInfo(_M("Relatório desabilitado"));
                
            }
            
        }
                
    }
    
    /**
     * Mostra a mensagem e redireciona para uma dada url
     * 
     * @param String $mensagem Mensagem a ser mostrada
     * @param Array $argumentos Argumentos da url
     */
    private function redireciona($mensagem, $argumentos = array())
    {
        $MIOLO = MIOLO::getInstance();
        
        $url = $MIOLO->GetActionURL("basic", "main:report:construtorRelatorios", "", $argumentos);

        $MIOLO->information($mensagem, $url);
        
    }
        
    /**
     * Realiza a publicação do relatório
     * 
     * @return Boolean True se a publicação foi um sucesso, False caso contrário
     */
    private function fazPublicacao()
    {
        $id = $this->getCurrentId();
        
        $reportInfo = $this->getTransacaoInfoPorId($id);

        $transaction = new AdmMioloTransaction();
        $filters = new stdClass();
        $filters->m_transaction = $reportInfo->id;
        $pesquisa = $transaction->search($filters); 
        
        // Se estiver publicado, atualiza as informações
        $transacao = count($pesquisa) > 0 ? $pesquisa[0] : $transaction;
            
        $transacao->mTransaction = $reportInfo->id;
        $transacao->nameTransaction = $reportInfo->nome;
        $transacao->action = $reportInfo->acao;
        $transacao->idModule = $reportInfo->modulo;
        $transacao->parentTransaction = $reportInfo->parent;
                
        if( $transacao->save() )
        {
            $this->getTypeObjectPopulated()->publicado = "t";
            $this->getTypeObjectPopulated()->save();
            return true;
            
        }
        
        return false;
        
    }
    
    /**
     * Despublica o relatório
     * 
     * @param Boolean $isDeleting Caso o relatório esteja sendo excluido, não atualiza
     * o status deste
     * 
     * @return Boolean True se a despublicação foi um sucesso, False caso contrário
     */
    private function desfazPublicacao($isDeleting = false)
    {
        $id = $this->getCurrentId();
        
        $reportInfo = $this->getTransacaoInfoPorId($id);

        $transaction = new AdmMioloTransaction();
        $filters = new stdClass();
        $filters->m_transaction = $reportInfo->id;
        $pesquisa = $transaction->search($filters); 
        
        // Se estiver publicado, atualiza as informações
        $transacao = count($pesquisa) > 0 ? $pesquisa[0] : null;
        
        if( !$isDeleting )
        {
            $this->getTypeObjectPopulated()->publicado = "f";
            $this->getTypeObjectPopulated()->save();
            
        }
        
        return is_null($transacao) ? null : $transacao->delete();
        
    }
    
    private function getTransacaoInfoPorId($id)
    {
        $parentInfo = $this->getInformacaoParentTransaction($this->getTypeObjectPopulated()->viewbaseada);
        
        // Se o parent for uma transação de documento, muda o handler base para apontar para o handler do documento
        $handler = "main:" . (stripos($parentInfo->parent, "DOCUMENT") !== false ? "document" : "report");
        
        if( !is_null($parentInfo) )
        {
            $obj = new stdClass();

            $obj->nome = "- {$this->getTypeObjectPopulated()->nome}";
            $obj->id = "crRelatorio{$id}";
            $obj->acao = "{$handler}:geraRelatorio&relatorioid={$id}";
            $obj->parent = $parentInfo->parent;
            $obj->modulo = $parentInfo->idmodule;

            if( $obj->nome )
            {
                return $obj;

            }
            
        }
                
    }
    
    /**
     * Monta a consulta SQL e retorna a prévia do resultado numa grid
     * 
     * @param {Object} $args Argumentos via AJAX
     * @return {MDiv} Campos a serem adicionados ao formulário
     */
    public function geraConsulta($args)
    {
        $data = json_decode($args->data);
        
        if( $data->validado )
        {
            if( ($data->countCampo > 0) )
            {
                $MIOLO = MIOLO::getInstance();
                $module = $MIOLO->getCurrentModule();

                $this->sql = $sql = $this->geraSQL($args);
                
                // Filta o sql
                $this->sqlFiltrado = SExportacaoPDF::filtraSQL($sql);
                
                // Busca os dados
                $dados = $this->getQueryData();
                $gridData = $dados->result;
                                
                // Gera a grid dinamicamente
                if (count($gridData) == 0)
                {
                    $this->addError(_M("A busca com os valores selecionados não retornou dados.", $module));

                }
                else
                {
                    // Cria grid dinamica com dados
                    $columns = array();
                    $columnsName = array();

                    $colTypes = array();
                    foreach ( $data->ordemCampo as $keyCampos => $valCampos )
                    {
                        $colTypes[$keyCampos] = $valCampos->tipo;
                    }
                    
                    foreach ( $dados->getColumnNames() as $keyCol => $colName )
                    {
                        $align = "left";
                        
                        if ( in_array($colTypes[$keyCol], array('float8', 'decimal', 'numeric', 'integer')) )
                        {
                            $align = "right";
                        }
                        elseif ( in_array($colTypes[$keyCol], array('date', 'timestamptz', 'timestamp')) )
                        {
                            $align = "center";
                        }
                                                
                        $columns[] = new MGridColumn($colName, $align, false, null, true, null, true);
                        $columnsName[] = $colName;
                    }
                    
                    // formata valores (caso comecar a ficar muito lento, deve ser feito alternativas,
                    //     como gerar a grid pelo jasperreport ou paginacao (perigoso pois pode quebrar o sql))

                    // o if abaixo apesar de deixar o codigo mais duplicado, evita desperdicio de processamento
                    if ( in_array('float8', $colTypes) ||
                         in_array('decimal', $colTypes) ||
                         in_array('numeric', $colTypes) ||
                         in_array('date', $colTypes) ||
                         in_array('timestamp', $colTypes) ||
                         in_array('boolean', $colTypes) ||
                         in_array('timestamptz', $colTypes) )
                    {
                        foreach ( (array) $gridData as $k => $row )
                        {
                            foreach ( $row as $n => $val )
                            {
                                if ( in_array($colTypes[$n], array('float8', 'decimal', 'numeric')) )
                                {
                                    $gridData[$k][$n] = number_format($val, 2, ',', '.');
                                }
                                else if ( $colTypes[$n] == 'date' )
                                {
                                    //Se nao for data padrao brasileiro tenta formatar por padrao
                                    if (!SAGU::validaData($val))
                                    {
                                        $gridData[$k][$n] = date('d/m/Y', strtotime($val));
                                    }
                                    else
                                    {
                                        $gridData[$k][$n] = $val;
                                    }
                                }
                                else if ( $colTypes[$n] == 'timestamptz' || $colTypes[$n] == 'timestamp' )
                                {
                                    $gridData[$k][$n] = date('d/m/Y H:i', strtotime($val));
                                }
                                else if ( $colTypes[$n] == 'boolean' )
                                {
                                    $gridData[$k][$n] = SAGU::getYesNo($val);
                                }
                            }
                        }
                    }
                                        
                    $gridTotalPageNumber = ceil(count($gridData) / self::DEFAULT_GRID_SIZE);

                    // Necessário para as exportações da grid
                    $MIOLO->session->setValue("crGridColumns", $columnsName);
                    $MIOLO->session->setValue("crGridColTypes", $colTypes);
                    $MIOLO->session->setValue("crGridData", $gridData);
                    $MIOLO->session->setValue("crTotalDados", BasConstrutorDeRelatorios::getTotalDados($this->sqlFiltrado));
                    $MIOLO->session->setValue("crGridTotalPageNumber", $gridTotalPageNumber);
                    $MIOLO->session->setValue("crSql", $this->sql);
                    $MIOLO->session->setValue("crSqlFiltrado", $this->sqlFiltrado);
                    // Armazena na sessão se o relatório precisa ser do modo sintético
                    $MIOLO->session->setValue("crSintetico", $data->sintetico);

                    $MIOLO->page->addAJAXJsCode("
                        var valInterval = setInterval(function()
                        {
                            var div = document.getElementById('divHandlerResultado');
                            
                            if( div !== null )
                            {
                                div.addEventListener('click', ConstRel.handlerHide);
                                document.getElementById('divResultado').style.display = 'block';

                                ConstRel.doSmoothScroll('divHandlerResultado', 200, 38);

                                document.getElementById('primeiroacesso').value = 'nope';

                                clearInterval(valInterval);

                            }

                        }, 100);


                    ");

                    $this->grid = $this->corrigeGrid($gridTotalPageNumber);

                    $fields = array();
                    $mLabel = new MLabel(_M("Prévia do resultado"));
                    $mLabel->SetClass("m-label repmaker-title");

                    $fields[] = new MDiv("divHandlerResultado", $mLabel, "repmaker-div-label");
                    $fields[] = new MDiv("divGridResultado", $this->grid);

                    return $fields;

                }

            }
            else
            {
                $this->AddError(_M("Nenhum campo selecionado. Por favor, selecione algum campo para consultar."));

            }
            
        }
        else
        {
            $this->AddError(_M("Os filtros/apelidos dos campos/parâmetros não estão corretos. Por favor, verifique-os."));

        }
        
        return array();
        
    }
    
    public function isFuncao($info)
    {
        $explode = explode(";", $info);
        
        return $explode[1] === BasConstrutorDeRelatorios::SUFIXO_FUNCAO;
        
    }
    
    /**
     * Evento AJAX que mostra a consulta que gera o relatório
     * 
     * @param {Object} $args Argumentos via AJAX
     */
    public function mostraSQL($args)
    {
        $data = json_decode($args->data);
        
        if( $data->validado )
        {
            if( ($data->countCampo > 0) )
            {
                $this->AddInfo($this->geraSQL($args));

            }
            else
            {
                $this->AddError(_M("Nenhum campo selecionado para gerar alguma consulta"));

            }
        
        }
        else
        {
            $this->AddError(_M("Os filtros/apelidos dos campos/parâmetros não estão corretos. Por favor, verifique-os."));

        }
        
        return array();
        
    }
    
    /**
     * Salva o relatório (se novo ou editado)
     * 
     * @param {Object} $args Argumentos enviados via AJAX
     */
    public function salvaRelatorio($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        $salvarComo = !is_null($args->salvarComo);
        $sql = $this->geraSQL($args);
        $view = $this->selecionado;
        $id = $this->getCurrentId();
                
        $nome = $args->txtNomeRelatorio;
        $descricao = $args->txtDescricaoRelatorio;
        
        $data = json_decode(utf8_encode($args->data));
        
        if( $data->validado )
        {
            if( $data->countCampo > 0 )
            {
                // Se o relatório está sendo editado
                if( !is_null($id) && !$salvarComo)
                {
                    $this->getTypeObjectPopulated()->nome = $nome;
                    $this->getTypeObjectPopulated()->dados = utf8_decode($args->data);
                    $this->getTypeObjectPopulated()->consulta = $sql;
                    $this->getTypeObjectPopulated()->viewbaseada = $view;
                    $this->getTypeObjectPopulated()->descricao = $descricao;

                    $resultado = $this->getTypeObjectPopulated()->save();

                    if( !$resultado )
                    {
                        $this->AddError(_M("Ocorreu um erro ao salvar o relatório"));

                    }
                    else if( $resultado && $args->generateReport !== "yes" )
                    {
                        $this->adicionaInformacaoSecao(array("id" => $this->getTypeObjectPopulated()->relatorioid, "nome" => $nome));
                        
                        // Atualiza somente se o relatório já foi publicado
                        $this->publicarRelatorio($data->habilitado);
                                                
                        $this->AddInfo(_M("Relatório salvo com sucesso"));

                    }

                    $MIOLO->page->addAJAXJsCode("ConstRel.Vars.saved = true;");

                }
                else
                {
                    // Se o nome é válido
                    if( strlen($nome) > 0 )
                    {
                        $registro = new BasConstrutorDeRelatorios();

                        $registro->nome = $nome;
                        $registro->dados = utf8_decode($args->data);
                        $registro->consulta = $sql;
                        $registro->viewbaseada = $view;
                        $registro->descricao = $descricao;
                        $registro->publicado = DB_FALSE;
                        
                        $resultado = $registro->save();
                        
                        $this->setObject($registro);
                        
                        if( $resultado !== false )
                        {
                            if( !$salvarComo )
                            {
                                $this->adicionaInformacaoSecao(array("id" => $registro->relatorioid, "nome" => $nome));
                                $MIOLO->page->addAJAXJsCode("ConstRel.Vars.saved = true;");

                            }
                            else
                            {
                                $this->redireciona(_M("Relatório salvo com sucesso", $module), array(
                                    "function" => "update",
                                    "relatorioid" => $registro->relatorioid
                                ));
                                
                            }
                            
                            $this->publicarRelatorio($data->habilitado);
                            
                            $this->AddInfo(_M("Relatório salvo com sucesso", $module));
                            
                        }

                    }
                    else
                    {
                        $this->AddError(_M("Informe o nome do relatório", $module));

                        return array();

                    }

                }
        
            }
            else
            {
                $this->AddError(_M("Nenhum campo selecionado. Por favor, selecione algum campo."));
                
            }
        
        }
        else
        {
            $this->AddError(_M("Os filtros/apelidos dos campos/parâmetros não estão corretos. Por favor, verifique-os."));
            
        }
        
        if( $args->generateReport === "yes" )
        {
            return $this->geraConsulta($args);

        }
        
        return array();
        
    }
 
    /**
     * Seta as informações do relatório usado na sessão
     * 
     * @param {Array} Informações (nome e id) do relatório
     */
    public function adicionaInformacaoSecao($info)
    {
        $MIOLO = MIOLO::getInstance();
        
        $MIOLO->session->setValue("relatorioid", $info["id"]);
        $MIOLO->session->setValue("relatorionome", $info["nome"]);
                
    }
    
    /**
     * Remove as informações salvas na sessão
     * 
     * @see Usado no evento "onunload" do navegador
     */
    public function removeInformacaoSecao()
    {
        $MIOLO = MIOLO::getInstance();
        
        $MIOLO->session->setValue("relatorioid", null);       
        $MIOLO->session->setValue("relatorionome", null);       
        
    }
    
    /**
     * 
     * @param {Integer} $numTotalPaginas Número total de páginas
     * @param {Integer} $numPagina Número da página desejada
     * @return {SGrid} Grid com os dados e informações corretas
     */
    public function corrigeGrid($numTotalPaginas, $numPagina = 1)
    {
        $MIOLO = MIOLO::getInstance();
        
        $gridColumns = $MIOLO->session->getValue("crGridColumns");
        $colTypes = $MIOLO->session->getValue("crGridColTypes");
        
        foreach ( $gridColumns as $keyCol => $colName )
        {
            $align = "left";

            if ( in_array($colTypes[$keyCol], array('float8', 'decimal', 'numeric', 'integer')) )
            {
                $align = "right";
            }
            elseif ( in_array($colTypes[$keyCol], array('date', 'timestamptz', 'timestamp')) )
            {
                $align = "center";
            }

            $columns[] = new MGridColumn($colName, $align, false, null, true, null, true);
        }
        
        $info = $this->geraInformacaoGridPorPagina($numPagina);
        
        $grid = new SGrid(null, $columns, null);
        $grid->setData($info->dados);
        $grid->setPageLength(self::DEFAULT_GRID_SIZE);
                
        $js = "
            var gridValInterval = setInterval(function()
            {
                var gridNavigationParent = document.querySelectorAll('div.m-grid-navigation');
                var gridNavigation = document.querySelectorAll('div.m-grid-navigation > div:not\(.m-grid-export-div\)');
                
                if( gridNavigation !== null )
                {
                    gridNavigation[0].innerHTML = '';
                    gridNavigation[1].innerHTML = '{$info->status}';
                    gridNavigation[2].innerHTML = '';
                    gridNavigation[3].innerHTML = '{$info->status}';

                    gridNavigation[1].style.marginRight = '5px';
                    gridNavigation[3].style.marginRight = '5px';

                    var label = document.createElement('span');
                    label.innerHTML = 'Página: ';
                    label.style.float = 'left';
                    label.style.paddingLeft = '5px';
                    label.className = 'm-pagenavigator-text';

                    var anotherLabel = label.cloneNode(true);

                    gridNavigation[0].appendChild(label);
                    gridNavigation[2].appendChild(anotherLabel);
                    for(var i = 1; i <= {$numTotalPaginas}; i++)
                    {
                        var spanFuction = function()
                        {
                            saguDoAjax('trocaPaginaGrid', 'divGridResultado', true, '&gridpagenumber=' + this.innerHTML); return false;

                        };
                        
                        var span = document.createElement('span');
                        span.innerHTML = i;
                        
                        if( i === {$numPagina} )
                        {
                            span.className = 'm-pagenavigator-selected repmaker-span-action';
                        }
                        else
                        {
                            span.className = 'm-pagenavigator-link repmaker-span-action';
                            
                        }
                        
                        span.addEventListener('click', spanFuction);
                        
                        var anotherSpan = span.cloneNode(true);
                        
                        anotherSpan.addEventListener('click', spanFuction);

                        gridNavigation[0].appendChild(span);
                        gridNavigation[2].appendChild(anotherSpan);

                    }
                    
                    var exportBtns = document.querySelectorAll('div.m-grid-export-div > a');
                    
                    for( var i = 0; i < exportBtns.length; i++ )
                    {
                        var href = exportBtns[i].href;
                        
                        var url = href.match(/http:\/.*?(?=\')/)[0] + '&relatorioid=' + '{$this->getCurrentId()}';
                        
                        href = href.replace(/http:\/.*?(?=\')/, url);
                        href = href.replace('_self', '_blank');
                        
                        exportBtns[i].href = href;
                    }
                    
                    var linksOrder = document.querySelectorAll('a.m-grid-column-order');
                    
                    for( var i = 0; i < linksOrder.length; i++ )
                    {
                        linksOrder[i].href = '#';
                        linksOrder[i].style.textDecoration = 'none';
                        linksOrder[i].style.cursor = 'default';

                    }

                    clearInterval(gridValInterval);

                }

            }, 100);

        ";
        
        $MIOLO->page->addAJAXJsCode($js);
        
        return $grid;
                
    }
    
    /**
     * Evento responsável por trocar de página na grid
     * 
     * @param {Object} $args Argumentos enviados via AJAX
     * @return {SGrid} Grid com os dados referentes a página
     */
    public function trocaPaginaGrid($args)
    {
        $MIOLO = MIOLO::getInstance();
        
        $numTotalPaginas = $MIOLO->session->getValue("crGridTotalPageNumber");
        $numPagina = $args->gridpagenumber;
        
        return $this->corrigeGrid($numTotalPaginas, $numPagina);
        
    }
    
    /**
     * Gera as informações da grid baseada no número da página da mesma
     * 
     * @param {Integer} $numpagina
     * @return {Object} Objeto contendo o status ($ob->status) e as informações
     * necessárias a grid ($ob->dados)
     */
    public function geraInformacaoGridPorPagina($numpagina)
    {
        $MIOLO = MIOLO::getInstance();
        
        $total = $MIOLO->session->getValue("crTotalDados");
        $gridData = $MIOLO->session->getValue("crGridData");
        $countGridData = count($gridData);
        $data = array();
        
        /* Desde onde deve-se começar armazenar as informações da grid relativo
        ao número da página */
        $start = ($numpagina * self::DEFAULT_GRID_SIZE) - self::DEFAULT_GRID_SIZE;
        
        $last = ($start + 15) > $countGridData ? $countGridData : ($start + 15);
        
        // Copia os valores para um array auxiliar
        for( $i = $start; $i < $last ; $i++ )
        {
            $data[] = $gridData[$i];
            
        }
        
        // Até quantos dados estão sendo mostrados
        $start++;
        
        $compl = "";
        $compl2 = "";
        
        if( $total > 75 )
        {
            $compl = " <span class=\"repmaker-bolder\">resumidos</span>";
            $compl2 = ", de um total de <span class=\"repmaker-bolder\">{$total}</span>.";
            
        }
        
        $status = "Mostrando dados{$compl}: [{$start}...{$last}] de {$countGridData} registros{$compl2}";
        
        $ob = new stdClass();
        
        $ob->dados = $data;
        $ob->status = $status;
        
        return $ob;
        
    }
    
    /**
     * Evento de clique da ação da grid
     * 
     */
    public function geraRelatorio_click()
    {
        $MIOLO = MIOLO::getInstance();
        
        $js = "
            var intervalResult = setInterval(function()
            {
                var loaded = ConstRel.Vars.loaded;
                
                if( loaded )
                {
                    var btnGerar = document.getElementById('btnRMGerar');

                    var click = new Event('click');

                    btnGerar.dispatchEvent(click);

                    clearInterval(intervalResult);
                
                }

            }, 100);

        ";
        
        $MIOLO->page->onload($js);
                    
    }
    
    public function tbBtnDelete_click($sender = NULL) {
        if( $this->verificaPermissaoUsuario($this->getTypeObjectPopulated()->viewbaseada) )
        {
            // Despublica o relatório se necessário
            if( $this->getTypeObjectPopulated()->publicado === DB_TRUE )
            {
                $this->desfazPublicacao(true);
                
            }
                
            parent::tbBtnDelete_click($sender);
                                    
        }
                
    }
    
    /**
     * Ajusta os dados da grid para as exportações
     * 
     * @param Object $grid
     * @return Array
     */
    public function getGridData($data, $titles)
    {        
        if ( !$data )
        {
            return;
        }

        $titleCount = count($titles);
        $visibleData = array();
        foreach ( $data as $line )
        {            
            $newLine = array_values(array_slice($line, 0, $titleCount));
            $visibleData[] = $newLine;
        }

        $titles = array_values( $titles );
        
        return array_merge( array($titles), $visibleData );
        
    }
    
    /**
     * Retorna conteudo da grid
     *
     * @return Array
     */
    public function getGridDataSession()
    {
        $MIOLO = MIOLO::getInstance();
        
        $gridData = $MIOLO->session->getValue("crGridData");
        $gridColumns = $MIOLO->session->getValue("crGridColumns");
        $data = $this->getGridData($gridData, $gridColumns);
        
        return $data;
        
    }
    
    /**
     * Exporta os dados da grid em HTML
     * 
     */
    public function exportGridAsHTML_click()
    {
        try
        {
            $MIOLO = MIOLO::getInstance();

            $nome = $MIOLO->session->getValue("relatorionome");
            $sqlFiltrado = $MIOLO->session->getValue("crSqlFiltrado");

            $exportacao = new SExportacao($nome, SExportacao::TIPO_HTML, $sqlFiltrado);
            $exportacao->exporta(SExportacao::DISPLAY_BROWSER);
                
        }
        catch(Exception $e)
        {
            $this->AddError($e->getMessage());
            
        }
        
    }
    
    /**
     * Exporta os dados da grid para uma planilha CSV
     * 
     */
    public function exportGridAsCSV_click()
    {
        try
        {
            $exportacao = new SExportacao("Construtor de relatórios", SExportacao::TIPO_CSV, MIOLO::getInstance()->session->getValue("crSqlFiltrado"));
            $exportacao->exporta();
            
        }
        catch(Exception $e)
        {
            $this->AddError($e->getMessage());
            
        }
        
    }
    
    /**
     * Gera um arquivo PDF com os dados da grid
     * 
     */
    public function exportGridAsPDF_click()
    {
        try
        {
            $MIOLO = MIOLO::getInstance();

            $nome = $MIOLO->session->getValue("relatorionome");
            $sql = $MIOLO->session->getValue("crSql");
            $reportInfo = MIOLO::getInstance()->session->getValue("crReportInfo") ? MIOLO::getInstance()->session->getValue("crReportInfo") : array();
            
            $dadosRelatorio = new stdClass();
            $dadosRelatorio->reportInfo = $reportInfo;
            $dadosRelatorio->sintetico = MIOLO::_REQUEST('crSintetico') == DB_TRUE;
            
            $exportacao = new SExportacao($nome, SExportacao::TIPO_PDF, $sql);
            $exportacao->exporta(SExportacao::DISPLAY_DOWNLOAD, $dadosRelatorio);
        
        }
        catch(Exception $e)
        {
            $this->AddError($e->getMessage());
            
        }
        
    }
    
    /**
     * Gera um arquivo JRXML com os dados da grid
     * 
     */
    public function exportGridAsJRXML_click()
    {
        try
        {
            $MIOLO = MIOLO::getInstance();

            $nome = $MIOLO->session->getValue("relatorionome");
            $sql = $MIOLO->session->getValue("crSql");

            $dadosRelatorio = new stdClass();
            $dadosRelatorio->sintetico = MIOLO::_REQUEST('crSintetico') == DB_TRUE;
            
            $exportacao = new SExportacao($nome, SExportacao::TIPO_JRXML, $sql);
            $exportacao->exporta(SExportacao::DISPLAY_DOWNLOAD, $dadosRelatorio);
        
        }
        catch(Exception $e)
        {
            $this->AddError($e->getMessage());
            
        }
        
    }
    
    /**
     * Exporta os dados da grid para uma planilha XLS
     * 
     */
    public function exportGridAsXLS_click()
    {
        try
        {
            $MIOLO = MIOLO::getInstance();

            $nome = $MIOLO->session->getValue("relatorionome");
            $sqlFiltrado = $MIOLO->session->getValue("crSqlFiltrado");

            $exportacao = new SExportacao($nome, SExportacao::TIPO_XLS, $sqlFiltrado);
            $exportacao->exporta();

        }
        catch(Exception $e)
        {
            $this->AddError($e->getMessage());
            
        }
        
    }
    
}
?>