<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário para visualização do calendário acadêmico do curso
 *
 * @author Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 27/06/2011
 */
class FrmPersonalAgenda extends SForm
{
    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $module = SAGU::getFileModule(__FILE__);

        parent::__construct(_M('Visualização da agenda pessoal', $module), null, null);

        //Acessado pelo módulo de serviços
        if ( SAGU::userIsFromServices() )
        {
            // Desabilita a Toolbar
            $this->disableToolbar();
        }
        else
        {
            // Desabilita alguns botões da toolbar
            $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
            $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
            $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
            $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
            $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
            
            
        }
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // Instancia os business
        $busContract = new BusinessAcademicBusContract();
        $busPerson = new BusinessBasicBusPerson();

        //Acessado pelo módulo de serviços
        if ( SAGU::userIsFromServices() )
        {
            // Obtém os dados da pessoa
            $person = $busPerson->getPersonByMioloUserName(trim($MIOLO->getLogin()->id));
            $fields[] = new SHiddenField('personId', $person->personId);
        }
        else
        {
            // Field physical person
            $physicalPerson = new SLookupContainer('personId', $this->getFormValue('personId', $personData->personId), array(
                'module' => 'basic',
                'item' => 'PhysicalPerson',
                'label' => _M('Pessoa', $module),
                'filter' => array('personId' => 'personId'),
                'hint' => _M('Informe o código da pessoa', $module),
                'descriptionHint' => _M('Nome da pessoa', $module)
            ));
            $fields[] = $physicalPerson;
        }

        // Campo intervalo de datas
        $anoAtual = SAGU::getDatePart(SAGU::getDateNow(), 'YEAR');
        $dtInicial = '01/01/' . $anoAtual;
        $dtFinal = '31/12/' . $anoAtual;
        $options = array(
            'title' => _M('Intervalo de datas', $module),
            'required' => true,
            'begin' => array(
                'dateValue' => $this->GetFormValue('beginDate', $dtInicial),
                'dateHint' => _M('Informe a data de início', $module),
            ),
            'end' => array(
                'dateValue' => $this->GetFormValue('endDate', $dtFinal),
                'dateHint' => _M('Informe a data de fim', $module),
            )
        );
        $fields[] = new SBeginEndPeriod($options);
        $validators[] = new MDATEDMYValidator('beginDate', _M('Data de início', $module), 'required');
        $validators[] = new MDATEDMYValidator('endDate', _M('Data de fim', $module), 'required');

        // Separator
        $fields[] = new MSeparator();

        // Botão localizar
        $buttons[] = new MButton('btnSearch', _M('Visualizar a agenda pessoal', $module));

        //Se for chamado pelo módulo de serviços exibe botão voltar
        if( SAGU::userIsFromServices() )
        {
            $buttons[] = new MButton('btnBack', _M('Voltar', $module), $this->getPreviousURL());
        }

        $fields[] = new MHContainer('divButtonsForm', $buttons);

        // Separator
        $fields[] = new MSeparator();

        // Div onde irá aparecer o calendário
        $fields[] = new MDiv('divCalendar');

        $this->SetFields($fields);
        $this->SetValidators($validators);

        parent::defineFields();
    }

    /**
     * Monta o calendário acadêmico
     *
     * @param array $args
     */
    public function btnSearch_click($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // Obtém os dados do form
        $personId = MIOLO::_REQUEST('personId');
        $beginDate = MIOLO::_REQUEST('beginDate');
        $endDate = MIOLO::_REQUEST('endDate');

        try
        {
            // Verifica as datas
            if ( !(strlen($beginDate) > 0) )
            {
                $this->AddAlert(_M('Você deve informar uma data inicial.', $module));
            }
            elseif ( !(strlen($endDate) > 0) )
            {
                $this->AddAlert(_M('Você deve informar uma data final.', $module));
            }
            else
            {
                // Instancia os business
                $busPhysicalPerson = new BusinessBasicBusPhysicalPerson();
                // Obtém os dados da pessoa
                $person = $busPhysicalPerson->getPhysicalPerson($personId);

                // Parâmetros para fazer a filtragem de eventos
                $opts = array();
                $opts['personId'] = $personId;
                $opts['showScheduledActivity'] = DB_TRUE;

                // Monta o calendário acadêmico
                $rows = BasReports::getCalendarEvent($beginDate, $endDate, $opts);
                $total = array();
                $calendar = new MEventCalendar('calendar', htmlentities(_M('Agenda pessoal de @1', $module, $person->name)));
                $calendar->setInitialDate($rows[0]->initialYearMonth);
                foreach ( (array)$rows as $row )
                {
                    if ( !isset($total[$row->month]) )
                    {
                        $total[$row->month] = 0;
                    }

                    if ( strlen($row->events) > 0 )
                    {
                        foreach ( explode("\n", $row->events) as $event )
                        {
                            $total[$row->month]++;
                            $calendar->defineEvent($row->dateCalendar, htmlentities($event));
                        }
                    }
                }

                if ( array_sum($total) > 0 )
                {
                    // Gera totais
                    $array = array();
                    $months = SAGU::listMonths();
                    foreach ( (array)$months as $month => $name )
                    {
                        $array[] = $total[$month];
                    }
                    $label = _M('Total de eventos encontrados: @1', $module, array_sum($total));
                    $table = new MTableRaw($label, array($array), array_values($months));
                    for ( $i = 0; $i < count($months); $i++ )
                    {
                        $table->setCellAttribute(0, $i, 'align', 'center');
                    }

                    $fields[] = new MSeparator();
                    $fields[] = $table;
                    $fields[] = new MSeparator();
                    $fields[] = $calendar;
                }
                else
                {
                    $this->AddAlert(_M('Nenhum evento encontrado para o período e curso informado.', $module));
                }

                $this->divCalendar->setInner($fields);
            }
        }
        catch (Exception $e)
        {
            $this->AddError($e->getMessage());
        }
    }
}
?>