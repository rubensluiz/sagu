<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Augusto A. Silva [augusto@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Augusto A. Silva
 *
 * @since
 * Class created on 28/10/2013
 *
 **/

class FrmUnificarPessoa extends SForm
{    
    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(_M('Unificar pessoa'), null, null);
        
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        $stayPerson = new SLookupContainer('pessoaQueFica', null, array(
            'module' => 'basic',
            'item' => 'Person',
            'label' => _M('Pessoa que permanece', $module),
            'descriptionHint' => _M('Nome da pessoa que ira permanecer no sistema', $module),
            'hint' => _M('Informe a pessoa que irá permanecer do sistema', $module)
        ));

        $outPerson = new SLookupContainer('pessoaQueSai', null , array(
            'module' => 'basic',
            'item' => 'Person',
            'label' => _M('Pessoa que sai', $module),
            'descriptionHint' => _M('Nome da pessoa que ira sair do sistema', $module),
            'hint' => _M('Informe a pessoa que irá sair do sistema', $module)
        ));

        $fields[] = $stayPerson;
        $fields[] = $outPerson;
        $fields[] = new MSeparator();

        $button = new MButton('btnConfirmar', _M('Confirmar'));
        $divButton = new Mdiv('', $button);
        $fields[] = $divButton;
        
        //Validadores
        $validators[] = new MRequiredValidator('pessoaQueFica', _M('Pessoa que irá permanecer no sistema'));
        $validators[] = new MRequiredValidator('pessoaQueSai', _M('Pessoa que irá sair do sistema'));
        
        parent::defineFields(array('fields' => $fields, 'validators' => $validators));
    }
    
    /**
     * Ação de unificação da pessoa.
     * 
     * @param sdtClass $args
     * @return boolean
     */
    public function btnConfirmar_click($args = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        try
        {
            SDatabase::beginTransaction();
            
            $nomeDaPessoa  = $this->getFormValue('pessoaQueFicaDescription');
            $pessoaQueFica = $this->getFormValue('pessoaQueFica');
            $pessoaQueSai  = $this->getFormValue('pessoaQueSai');
            $busPerson = new BusinessBasicBusPerson();

            if ( $busPerson->unificarPessoa($pessoaQueSai, $pessoaQueFica) )
            {
                SDatabase::commit();
            }
            
            $MIOLO->information(_M("Pessoa unificada com sucesso: {$pessoaQueFica} - {$nomeDaPessoa}.", $module));
        }
        catch ( Exception $err )
        {
            SDatabase::rollback();
            $MIOLO->error( $err->getMessage() );
        }
    }
}
?>
