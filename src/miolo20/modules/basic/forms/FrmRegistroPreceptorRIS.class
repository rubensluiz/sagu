<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Registro de aluno
 *
 * @author Moises Heberle [moises@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.com.br]
 *
 * @since
 * Class created on 19/11/2013
 *
 **/
class FrmRegistroPreceptorRIS extends SManagementForm
{
    protected $_personId;
    public $identificador = __CLASS__;

    public function __construct()
    {
        $module = SAGU::getFileModule(__FILE__);
        parent::__construct(new BasPhysicalPerson(), array('personId'), 'BusPhysicalPerson', _M('Registro de preceptor'), $module);

        $this->toolbar->hideButton('tbBtnPrint');
        $this->toolbar->hideButton('tbBtnDelete');
        $this->toolbar->hideButton('tbBtnSave');
        $this->toolbar->hideButton('tbBtnSearch');
        $this->toolbar->hideButton('tbBtnClose');
        $this->toolbar->hideButton('tbBtnNew');
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $fields[] = $logo = new MImage(null, _M('Escola de Saúde Pública do Ceará', 'residency'), $MIOLO->getUI()->getImage('residency', 'logo_espce_gov.png'));
        $logo->addAttribute("width", 600);
        $logo->addAttribute("height", 90);
        $logo->_addStyle('margin-left', '360px');
        $logo->_addStyle('margin-bottom', '5px');


        if (MIOLO::_REQUEST('__EVENTTARGETVALUE') == 'tbBtnContinuar:click') {

            $data = (object) $_REQUEST;

            $busPerson = new BusinessBasicBusPerson();
            $filters = new stdClass();
            $filters->cpf = $data->cpf;
            $filters->dateBirth = $data->data;
            $person = $busPerson->searchPerson($filters);

            if ($person[0][0] > 0) {
                $bgrFields[] = new MTextLabel('personId', $person[0][0], _M('Código',$module));
                $bgrFields[] = new MHiddenField('personId', $person[0][0]);

                // FIXME Nao permitir editar pessoa que nao seja o usuario logado ,  por seguranca
                $data = $this->busObject->getPhysicalPerson($person[0][0]);
            }
        }

        if ( $person[0][0] == null )
        {
            $fields[] = MMessage::getStaticMessage('msgInfoRedirec', _M("Você ainda não possui cadastro em nossa base de dados, preencha seus dados pessoais para darmos continuidade com o processo."), MMessage::TYPE_INFORMATION);
        } else {
            $fields[] = MMessage::getStaticMessage('msgInfoRedirec', _M("Você já possui cadastro em nossa base de dados, verifique seus dados pessoais para darmos continuidade com o processo."), MMessage::TYPE_INFORMATION);
        }

        /*
         * Dados gerais
         */
        // Nome
        $personNameLabel = new MLabel(_M('Nome', $module) . ':');
        $personNameLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personNameLabel->setClass('m-caption m-caption-required');
        $personName = new MTextField('personName', $data->personName, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setJsHint(_M('Informe o nome', $module));
        $personName->setAttribute('required', true);
        $bgrFields[] = new MHContainer('personNameCnt', array($personNameLabel, $personName));
        $validators[] = new MRequiredValidator('personName', _M('Nome', $module));

        // E-mail
        $emailLabel = new MLabel(_M('E-mail', $module) . ':');
        $emailLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $emailLabel->setClass('m-caption m-caption-required');
        $email = new MTextField('email', trim($data->email), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $email->setJsHint(_M('Informe o e-mail', $module));
        $email->setAttribute('required', true);
        $bgrFields[] = new MHContainer('emailCnt', array($emailLabel, $email));
        $validators[] = new MEmailValidator('email', _M('E-mail', $module), 'required');

        // RG
        $rgLabel = new MLabel(_M('Identidade (RG)', $module) . ':');
        $rgLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $rgLabel->setClass('m-caption m-caption-required');
        $rg = new MTextField('personRg', $data->personRg, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE'));
        $rg->setJsHint(_M('Informe a identidade (RG)', $module));
        $rg->setAttribute('required', true);
        $bgrFields[] = new MHContainer('rgCnt', array($rgLabel, $rg));
        $validators[] = new MRequiredValidator('personRg', _M('Identidade (RG)', $module));

        $cpfValue = $data->cpf;

        // Field cpf
        $cpfLabel = new MText('cpfLabel', _M('CPF',$module) . ':');
        $cpfLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $cpfLabel->setClass('m-caption m-caption-required');
        $cpf = new MTextField('personCpf', SAGU::NVL($cpfValue, MIOLO::_REQUEST('cpf')), NULL, SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'));
        $cpf->setJsHint(_M('Informe seu CPF',$module));
        $cpf->setAttribute('required', true);
        $cpf->setReadOnly(true);

        $validators[]  = new MCPFValidator('personCpf', _M('CPF',$module), 'required');
        $hctCpf = new MHContainer('hctPerson', array($cpfLabel, $cpf));
        $hctCpf->setShowLabel(true);
        $bgrFields[] = $hctCpf;

        if ( $this->isUpdateFunction() )
        {
            $cpf->setReadOnly(true);
        }
        // Pais de nascimento
        $busCountry = new BusinessBasicBusCountry();
        $countryIdBirthLabel = new MText('countryIdBirthLabel', _M('Nacionalidade', $module) . ':');
        $countryIdBirthLabel->setClass('m-caption m-caption-required');
        $countryIdBirthLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $data->countryIdBirth = ( ($function == 'insert') && (!(strlen($data->countryIdBirth) > 0)) ) ? SAGU::getParameter('BASIC', 'DEFAULT_COUNTRY_ID') : $data->countryIdBirth;
        $countryIdBirth = new MSelection('countryIdBirth', SAGU::NVL($data->countryIdBirth, 'BRA'), null, $busCountry->listCountry());
        $countryIdBirth->setJsHint( _M('Informe sua nacionalidade', $module) );
        $countryIdBirth->setAttribute('required', true);
        $validators[] = new MRequiredValidator('countryIdBirth', _M('Nacionalidade', $module));
        $bgrFields[] = new MHContainer('countryIdBirthHct', array($countryIdBirthLabel, $countryIdBirth));

        // Sexo
        $sexLabel = new MText('sexLabel', _M('Sexo',$module) . ':');
        $sexLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $sexLabel->setClass('m-caption m-caption-required');
        $sex = new MSelection('sex', $data->sex, null, SAGU::listSex());
        $sex->setJsHint(_M('Informe o sexo',$module));
        $sex->setAttribute('required', true);
        $validators[] = new MRequiredValidator('sex', _M('Sexo',$module));
        $bgrFields[] = new MHContainer('sexCnt', array($sexLabel, $sex));

        // Data de nascimento
        $dateBirthLabel = new MText('dateBirthLabel', _M('Data de nascimento', $module) . ':');
        $dateBirthLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $dateBirthLabel->setClass('m-caption m-caption-required');
        $dateBirth = new MCalendarField('dateBirth', SAGU::NVL($dateBirthValue, MIOLO::_REQUEST('data')), null, SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $dateBirth->setJsHint(_M('Informe a data de nascimento', $module));
        $dateBirth->setAttribute('required', true);
        $dateBirth->setReadOnly(true);

        $validators[] = new MDateDMYValidator('dateBirth', _M('Data de nascimento', $module), 'required');
        $validators[] = new MRequiredValidator('dateBirth', _M('Data de nascimento', $module));
        $bgrFields[] = new MHContainer('dateBirthCnt', array($dateBirthLabel, $dateBirth));

        // Telefone residencial
        $residentialPhoneLabel = new MText('Telefone', _M('Telefone', $module) . ':');
        $residentialPhoneLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $residentialPhoneLabel->setClass('m-caption m-caption-required');
        $residentialPhone = new MTextField('cellPhone', $data->cellPhone, 'Telefone', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE'));
        $residentialPhone->setAttribute('required', true);
        $residentialPhone->setJsHint(_M('Informe o telefone celular ou residencial', $module));

        $validators[] = new MRequiredValidator('cellPhone', _M('Telefone', $module));
        $residentialPhone->label = _M('Telefone', $module);
        $bgrFields[] = new MHContainer('residentialPhoneCnt', array($residentialPhoneLabel, $residentialPhone));

        // Estado civil
        $busMaritalStatus = new BusinessBasicBusMaritalStatus();
        $maritalStatusLabel = new MText('maritalStatusLabel', _M('Estado civil', $module) . ': ');
        $maritalStatusLabel->setClass('m-caption m-caption-required');
        $maritalStatusLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $maritalStatusId = new MSelection('maritalStatusId', $data->maritalStatusId, '', $busMaritalStatus->listMaritalStatus());
        $maritalStatusId->setAttribute('required', true);
        $maritalStatusId->setJsHint(_M('Selecione o estado civil', $module));
        $validators[] = new MRequiredValidator('maritalStatusId', _M('Estado civil', $module));
        $bgrFields[] = new MHContainer('matiralStatusCnt', array($maritalStatusLabel, $maritalStatusId));

        $fields[] = new MBaseGroup('bgrGeneralData', _M('Dados gerais', $module), $bgrFields, 'vertical');


        /*
         * DADOS DE ENDEREÇO
         */

        if ( strlen($data->cityId) > 0 )
        {
            $data->changed = 'cityId';
        }
        $divGeographicData = new MDiv('divGeographicData', $this->fillGeographicData($data));

        // Bairro
        $neighborhoodLabel = new MLabel(_M('Bairro', $module) . ':');
        $neighborhoodLabel->setClass('m-caption m-caption-required');
        $neighborhoodLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $neighborhood = new MTextField('neighborhood', $data->neighborhood, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $neighborhood->setJsHint(_M('Informe o logradouro.', $module));
        $neighborhood->setAttribute('required', true);
        $neighborhoodCnt = new MHContainer('neighborhoodCnt', array($neighborhoodLabel, $neighborhood));
        $validators[] = new MRequiredValidator('neighborhood', _M('Bairro',$module));

        // Location type
        $busLocationType = new BusinessBasicBusLocationType();
        $locationTypeIdLabel = new MText('locationTypeIdLabel', _M('Tipo de logradouro',$module) . ':');
        $locationTypeIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $locationTypeIdLabel->setClass('m-caption m-caption-required');
        $locationTypeId = new MSelection('locationTypeId', $data->locationTypeId, '', $busLocationType->listLocationType(), false, '');
        $locationTypeId->setAttribute('required', true);
        $locationTypeId->setJsHint(_M('Informe o tipo de logradouro da pessoa', $module));
        $locationTypeCnt = new MHContainer('locationTypeIdCnt', array($locationTypeIdLabel, $locationTypeId));
        $validators[] = new MRequiredValidator('locationTypeId', _M('Tipo de logradouro',$module));

        // Logradouro
        $locationLabel = new MLabel(_M('Logradouro', $module) . ':');
        $locationLabel->setClass('m-caption m-caption-required');
        $locationLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $location = new MTextField('location', $data->location, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $location->setJsHint(_M('Informe o logradouro.', $module));
        $location->setAttribute('required', true);
        $locationCnt = new MHContainer('locationCnt', array($locationLabel, $location));
        $validators[] = new MRequiredValidator('location', _M('Logradouro',$module));

        // Número
        $numberLabel = new MLabel(_M('Número', $module) . ':');
        $numberLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $numberLabel->setClass('m-caption m-caption-required');
        $number = new MTextField('number', $data->number, null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $number->setJsHint(_M('Informe o número', $module));
        $number->setAttribute('required', true);
        $numberCnt = new MHContainer('numberCnt', array($numberLabel, $number));
        $validators[] = new MRequiredValidator('number', _M('Número',$module));

        // Complemento
        $complementLabel = new MLabel(_M('Complemento', $module) . ':');
        $complementLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $complementLabel->setClass('m-caption');
        $complement = new MTextField('complement', $data->complement, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $complement->setJsHint(_M('Informe o complemento, se houver.', $module));
        $complementCnt = new MHContainer('complementCnt', array($complementLabel, $complement));

        // CEP
        $zipCodeLabel = new MLabel(_M('CEP', $module) . ':');
        $zipCodeLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $zipCodeLabel->setClass('m-caption m-caption-required');
        $zipCode = new MTextField('zipCode', strlen($data->zipCode) > 0 ? substr_replace($data->zipCode, '-', 5, 0) : null, null, SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'), _M("Digite um CEP válido. Ex.: 99999-000", $module));
        $zipCode->setJsHint(_M('Informe o CEP', $module));
        $zipCode->setAttribute('required', true);
        $zipCodeCnt = new MHContainer('zipCodeCnt', array($zipCodeLabel, $zipCode));
        $validators[] = new MCEPValidator('zipCode', _M("CEP", $module), 'required');

        $bsg = new MBaseGroup('bsgGeographicData', _M('Endereço', $module), array($divGeographicData, $neighborhoodCnt, $locationTypeCnt, $locationCnt, $numberCnt, $complementCnt, $zipCodeCnt), 'vertical');
        $fields[] = $bsg;


        if ($data->personId > 0) {
            $preceptorS = ResPreceptoria::search(array('personid' => $data->personId));
            $preceptorS = $preceptorS[0];


            if ($preceptorS->preceptorId > 0) {
                $preceptor = new ResPreceptoria($preceptorS->preceptorId);
            } else {
                $preceptor = new ResPreceptoria();
            }
        } else {
            $preceptor = new ResPreceptoria();
        }



        //turma
        $turmasDoPreceptor = ResPreceptoriaTurmas::obterPorPreceptor($preceptor->preceptorId);
        $turmas = array();
        foreach ($turmasDoPreceptor as $turmaDoPreceptor) {
            $turmas[] = $turmaDoPreceptor->turmaId;
        }
        $turmaLabel = new MText('turmaLabel', _M('Turma(s)',$module) . ':');
        $turmaLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $turmaLabel->setClass('m-caption m-caption-required');
        $turma = new MMultiSelection('turmas', $turmas, '', ResTurma::retornaTurmas(), false, _M('Para selecionar mais de um item, é necessário pressionar a tecla CTRL e clicar no item desejado.'), 8);
        $turma->setAttribute('size', 15);
        $turma->setJsHint(_M('Informe a(s) turma(s)'));
        $turma->setAttribute('required', true);
        $turmaCnt = new MHContainer('turmaCnt', array($turmaLabel, $turma));
        $validators[] = new MRequiredValidator('turmas', _M('Turma(s)',$module));


        $busLegalPerson = new BusinessBasicBusLegalPerson();
        $instituicoes = $busLegalPerson->listLegalPerson();
        $instituicaoExecutoraLabel = new MText('instituicaoExecutoraLabel', _M('Lotação (instituição)',$module) . ':');
        $instituicaoExecutoraLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $instituicaoExecutoraLabel->setClass('m-caption m-caption-required');
        $instituicaoExecutora = new MSelection('instituicaoExecutora', $preceptor->instituicaoExecutora, '', $instituicoes, false, '');
        $instituicaoExecutora->setAttribute('required', true);
        $instituicaoExecutoraCnt = new MHContainer('instituicaoExecutoraCnt', array($instituicaoExecutoraLabel, $instituicaoExecutora));
        $validators[] = new MRequiredValidator('instituicaoExecutora', _M('Lotação (instituição)',$module));


        $vinculoLabel = new MText('vinculoLabel', _M('Vínculo empregatício',$module) . ':');
        $vinculoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $vinculoLabel->setClass('m-caption m-caption-required');
        $vinculo = new MSelection('vinculo', $preceptor->vinculo, '', ResPreceptoria::retornaVinculos(), false, '');
        $vinculo->setAttribute('required', true);
        $vinculoCnt = new MHContainer('vinculoCnt', array($vinculoLabel, $vinculo));
        $validators[] = new MRequiredValidator('vinculo', _M('Vínculo empregaticio',$module));

        $funcaoLabel = new MLabel(_M('Função', $module) . ':');
        $funcaoLabel->setClass('m-caption m-caption-required');
        $funcaoLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $funcao = new MTextField('funcao', $preceptor->funcao, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $funcao->setAttribute('required', true);
        $funcaoCnt = new MHContainer('funcaoCnt', array($funcaoLabel, $funcao));
        $validators[] = new MRequiredValidator('funcao', _M('Função',$module));

        $cargaHorariaMunicipioLabel = new MLabel(_M('Carga Horária município (horas)', $module) . ':');
        $cargaHorariaMunicipioLabel->setClass('m-caption m-caption-required');
        $cargaHorariaMunicipioLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $cargaHorariaMunicipio = new MTextField('cargaHorariaMunicipio', $preceptor->cargaHorariaMunicipio, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), 'SOMENTE NÚMEROS! Ex:. 20 (Não usar letras ou caracteres especiais)');
        $cargaHorariaMunicipio->setAttribute('required', true);
        $cargaHorariaMunicipioCnt = new MHContainer('cargaHorariaMunicipioCnt', array($cargaHorariaMunicipioLabel, $cargaHorariaMunicipio));
        $validators[] = new mFloatValidator('cargaHorariaMunicipio', _M('Carga Horária município',$module));

        $cargaHorariaRISLabel = new MText('cargaHorariaRISLabel', _M('Carga Horária na RIS (horas)',$module) . ':');
        $cargaHorariaRISLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $cargaHorariaRISLabel->setClass('m-caption m-caption-required');
        $cargaHorariaRIS = new MSelection('cargaHorariaRIS', $preceptor->cargaHorariaRIS, '', array(12 => 12, 20 => 20), false, '');
        $cargaHorariaRIS->setAttribute('required', true);
        $cargaHorariaRISCnt = new MHContainer('cargaHorariaRISCnt', array($cargaHorariaRISLabel, $cargaHorariaRIS));
        $validators[] = new MRequiredValidator('cargaHorariaRIS', _M('Carga Horária na RIS',$module));

        $graduacaoLabel = new MLabel(_M('Graduação', $module) . ':');
        $graduacaoLabel->setClass('m-caption m-caption-required');
        $graduacaoLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $graduacao = new MTextField('graduacao', $preceptor->graduacao, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $graduacao->setAttribute('required', true);
        $graduacaoCnt = new MHContainer('graduacaoCnt', array($graduacaoLabel, $graduacao));
        $validators[] = new MRequiredValidator('graduacao', _M('Graduação',$module));

        $posgraduacaoLabel = new MLabel(_M('Pós Graduação', $module) . ':');
        $posgraduacaoLabel->setClass('m-caption m-caption-required');
        $posgraduacaoLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $posgraduacao = new MTextField('posGraduacao', $preceptor->posGraduacao, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $posgraduacao->setAttribute('required', true);
        $posgraduacaoCnt = new MHContainer('posgraduacaoCnt', array($posgraduacaoLabel, $posgraduacao));
        $validators[] = new MRequiredValidator('posGraduacao', _M('Pós Graduação',$module));

        $inicioLabel = new MLabel(_M('Início da preceptoria', $module) . ':');
        $inicioLabel->setClass('m-caption m-caption-required');
        $inicioLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $inicio = new MCalendarField('inicio', $preceptor->inicio, null, SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $inicio->setAttribute('required', true);
        $inicioCnt = new MHContainer('inicioCnt', array($inicioLabel, $inicio));
        $validators[] = new MRequiredValidator('inicio', _M('Início da preceptoria',$module));
        $validators[] = new MDateDMYValidator('inicio', _M('Início', $module), 'required');



        $saidaLabel = new MLabel(_M('Saída da preceptoria', $module) . ':');
        $saidaLabel->setClass('m-caption');
        $saidaLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $saida = new MCalendarField('saida', $preceptor->fim, null, SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $saidaCnt = new MHContainer('inicioCnt', array($saidaLabel, $saida));
        $validators[] = new MDateDMYValidator('saida', _M('Saída', $module), 'required');


        $nucleoLabel = new MText('nucleoLabel', _M('Núcleo profissional', $module) . ':');
        $nucleoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $nucleoLabel->setClass('m-caption m-caption-required');
        $nucleo = new MSelection('nucleo', $preceptor->nucleoProfissionalId, '', ResNucleoProfissional::listRecords(), false, '');
        $nucleo->setAttribute('required', true);
        $nucleoCnt = new MHContainer('enfaseCnt', array($nucleoLabel, $nucleo));
        $validators[] = new MRequiredValidator('nucleo', _M('Núcleo profissional',$module));

        $enfaseLabel = new MText('enfaseLabel', _M('Componente/ênfase',$module) . ':');
        $enfaseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $enfaseLabel->setClass('m-caption m-caption-required');
        $nfasesDoPreceptor = ResPreceptoriaEnfases::obterPorPreceptor($preceptor->preceptorId);
        $enfases = array();
        foreach ($nfasesDoPreceptor as $enfaseDoPreceptor) {
            $enfases[] = $enfaseDoPreceptor->enfaseId;
        }
        $enfase = new MSelection('enfase', $enfases, '', ResEnfase::listRecords(), false, '');
        $enfase->setAttribute('required', true);
        $enfaseCnt = new MHContainer('enfaseCnt', array($enfaseLabel, $enfase));
        $validators[] = new MRequiredValidator('enfase', _M('Componente/ênfase',$module));

        $tipoLabel = new MText('tipoLabel', _M('Tipo preceptor',$module) . ':');
        $tipoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $tipoLabel->setClass('m-caption m-caption-required');
        $tipoPreceptor = new MSelection('tipoPreceptor', $preceptor->tipoPreceptor, '', ResPreceptoria::retornaTiposPreceptores(), false, '');
        $tipoPreceptor->setAttribute('required', true);
        $tipoPreceptorCnt = new MHContainer('tipoPreceptorCnt', array($tipoLabel, $tipoPreceptor));
        $validators[] = new MRequiredValidator('tipoPreceptor', _M('Tipo preceptor',$module));


        $tempoExeperienciaLabel = new MLabel(_M('Tempo de experiência no campo de atuação? (meses)', $module) . ':');
        $tempoExeperienciaLabel->setClass('m-caption m-caption-required');
        $tempoExeperienciaLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $tempoExperienciaMeses = new MTextField('tempoExperienciaMeses', $preceptor->tempoExperienciaMeses, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), 'SOMENTE NÚMEROS! Ex:. 20 (Não usar letras ou caracteres especiais)');
        $tempoExperienciaMeses->setAttribute('required', true);
        $tempoExperienciaMesesCnt = new MHContainer('tempoExperienciaMesesCnt', array($tempoExeperienciaLabel, $tempoExperienciaMeses));
        $validators[] = new mFloatValidator('tempoExperienciaMeses', _M('Tempo de experiência no campo de atuação',$module));


        $egressoLabel = new MText('egressoLabel', _M('Egresso da Residência Integrada/Residências Multiprofissional em Saúde?',$module) . ':');
        $egressoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $egressoLabel->setClass('m-caption m-caption-required');
        $egresso = new MSelection('egresso', $preceptor->egresso, '', array('S' => 'Sim', 'N' => 'Não'), false, '');
        $egresso->setAttribute('required', true);
        $egressoCnt = new MHContainer('egressoCnt', array($egressoLabel, $egresso));
        $validators[] = new MRequiredValidator('egresso', _M('Egresso da Residência Integrada/Residências Multiprofissional em Saúde?',$module));


        $recebeValorizacaoFinanceiraLabel = new MLabel(_M('Recebe valorização social/financeira?', $module) . ':');
        $recebeValorizacaoFinanceiraLabel->setClass('m-caption m-caption-required');
        $recebeValorizacaoFinanceiraLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        //$recebeValorizacaoFinanceira = new MTextField('recebeValorizacaoFinanceira', $preceptor->recebeValorizacaoFinanceira, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $recebeValorizacaoFinanceira = new sMultiLineField('recebeValorizacaoFinanceira', array('value' => $preceptor->recebeValorizacaoFinanceira,));


        $recebeValorizacaoFinanceira->setAttribute('required', true);
        $recebeValorizacaoFinanceiraCnt = new MHContainer('recebeValorizacaoFinanceiraCnt', array($recebeValorizacaoFinanceiraLabel, $recebeValorizacaoFinanceira));
        $validators[] = new MRequiredValidator('recebeValorizacaoFinanceira', _M('Recebe valorização social/financeira?',$module));


        $fields[] = new SHiddenField('preceptorId', $preceptor->preceptorId);

        $fields[] = new MBaseGroup('bgrDadosProfissionais', _M('Dados profissionais', $module), array($turmaCnt, $instituicaoExecutoraCnt, $funcaoCnt, $cargaHorariaMunicipioCnt, $cargaHorariaRISCnt, $graduacaoCnt, $posgraduacaoCnt, $inicioCnt, $saidaCnt, $nucleoCnt, $enfaseCnt, $tipoPreceptorCnt, $tempoExperienciaMesesCnt, $recebeValorizacaoFinanceiraCnt, $vinculoCnt, $egressoCnt), 'vertical');

        $btnSave = new MButton('tbBtnSave', _M('Finalizar cadastro'));
        $fields[] = new MDiv(null, array($btnSave), null, 'align="center"');

        $residentialPhone->label = '';
        $workPhone->label = '';

        $MIOLO->page->onLoad("document.getElementById('personName').focus()");

        // Disable buttons which won't be used in searches
        $this->toolbar->disableButton('tbBtnPrint');

        if ( $function == 'insert' )
        {
            $this->toolbar->disableButton('tbBtnDelete');
        }
        elseif ( $function == 'delete' )
        {
            $this->toolbar->disableButton('tbBtnSave');
        }

        $this->addFields($fields);
        $this->setValidators($validators);

        SForm::defineFields();
    }

    /**
     * Instancia os campos para seleção de país, Estado e cidade. Aceita como parâmetro
     * um país, um Estado e/ou uma cidade. Para que seja renderizado corretamente, deve
     * ser utilizado também o parâmetro changed, que assume o valor de um dos campos (countryId,
     * stateId ou cityId). Este parâmetro é utilizado para definir quais dados o componente
     * carregará no momento de sua carga.
     *
     * @param (stdClass) $inArgs Vide descrição da função para saber como utilizar.
     * @return MHContainer Retorna um objeto MHContainer com os campos de local que serão instanciados.
     */
    public function fillGeographicData($inArgs)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // utilizar somente campos úteis.
        $args = new stdClass();
        $args->countryId = $inArgs->countryId;
        $args->stateId = $inArgs->stateId;
        $args->cityId = $inArgs->cityId;
        $args->changed = $inArgs->changed;

        $busCountry = new BusinessBasicBusCountry();
        $busState = new BusinessBasicBusState();
        $busCity = new BusinessBasicBusCity();

        // se o que mudou foi a cidade
        if ( $args->changed == 'cityId' )
        {
            if ( strlen($args->cityId) > 0 )
            {
                $city = $busCity->getCity($args->cityId);

                $args->stateId = $city->stateId;
                $args->countryId = $city->countryId;
            }
            $destinationmodule = MIOLO::getCurrentModule();

            $city = $busCity->getCity($args->cityId);

        }
        // se o que mudou foi o estado
        elseif ( $args->changed == 'stateId' )
        {
            // limpa todos os campos
            $args->cityId = '';
        }
        // se o que mudou foi o país
        elseif ( $args->changed == 'countryId' )
        {
            // limpa todos os campos
            $args->cityId = '';
            $args->stateId = '';
        }
        else
        {
            // limpa todos os campos
            $args->cityId = '';
            $args->stateId = '';
            $args->countryId = SAGU::getParameter('BASIC', 'DEFAULT_COUNTRY_ID');
        }

        // carregar países
        $filters = new stdClass();
        $filters->name = '%';

        $countries = $busCountry->searchCountry($filters);

        // carregar estados
        $filters = new stdClass();
        $filters->countryId = $args->countryId;

        $states = $busState->searchState($filters);

        // carregar cidades
        if ( strlen($args->stateId) > 0 || count($states) == 0 )
        {
            if ( strlen($args->stateId) > 0 )
            {
                $filters->stateId = $args->stateId;
            }
            $cities = $busCity->searchCity($filters);
        }

        /*
         * Instanciar todos os campos do componente
         */

        $fields = array();

        $lblCountryId = new MLabel(_M('País', $module) . ': ');
        $lblCountryId->setClass('m-caption m-caption-required');
        $lblCountryId->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $txtCountryId = new MSelection('countryId', SAGU::NVL($args->countryId,'BRA'), null, $countries);
        $txtCountryId->addAttribute('onchange', self::getAjaxAction('fillGeographicData', 'divGeographicData', false, array('changed' => 'countryId')));
        $fields[] = new MHContainer('hctCountry', array($lblCountryId, $txtCountryId));

        $validators[] = new MRequiredValidator('countryId', _M('País', $module));

        $lblStateId = new MLabel(_M('Estado', $module) . ': ');
        $lblStateId->setClass('m-caption m-caption-required');
        $lblStateId->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $txtStateId = new MSelection('stateId', $args->stateId, null, $states);
        $txtStateId->addAttribute('onchange', self::getAjaxAction('fillGeographicData', 'divGeographicData', false, array('changed' => 'stateId')));
        $txtStateId->addAttribute('required', true);
        $fields[] = new MHContainer('hctCountry', array($lblStateId, $txtStateId));

        $validators[] = new MRequiredValidator('stateId', _M('Estado', $module));

        $lblCityId = new MLabel(_M('Cidade', $module) . ': ');
        $lblCityId->setClass('m-caption m-caption-required');
        $lblCityId->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $txtCityId = new MSelection('cityId', $args->cityId, null, $cities);
        $txtCityId->addAttribute('required', true);
        $fields[] = new MHContainer('hctCountry', array($lblCityId, $txtCityId));

        $validators[] = new MRequiredValidator('cityId', _M('Cidade', $module));

        $this->SetValidators($validators);

        return $fields;
    }

    public function getTypesData()
    {
        $data = parent::getTypesData();
        $data->name = $data->personName;
        $data->zipCode = str_replace('-', '', $data->zipCode);

        return $data;
    }

    public function tbBtnSave_click($sender = NULL)
    {
        try
        {
            SDatabase::beginTransaction();

            $ok = $this->saveTypeData();

            SDatabase::commit();

            $this->isUpdateFunction() ? $this->displayMessageUpdate() : $this->displayMessageInsert();
        }
        catch (Exception $e)
        {
            SDatabase::rollback();

            $this->AddError($e->getMessage());
        }
    }

    public function saveTypeData($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $ok = true;

        $data = $this->getTypesData();

        if ( BasPessoa::verificaEmail($data->email, $data->personId) == DB_TRUE )
        {
            throw new Exception(_M("O e-mail {$data->email} já está sendo utilizado por outra pessoa. Favor informe um outro endereço de e-mail ou entre em contato conosco."));
        }


        if ($data->personId == null) {
            $personId = $this->_personId = parent::saveTypeData($sender);
        } else {
            $businessBasicBusPhysicalPerson = new BusinessBasicBusPhysicalPerson();
            $businessBasicBusPhysicalPerson->updatePhysicalPerson($data);

            $personId = $this->_personId = $data->personId;
        }



        // salvando documentos
        $busDocumentCpf = new BusinessBasicBusDocument();
        $data = new stdClass();
        $data->personId = $personId;
        $data->content = $_POST['personCpf'];
        $data->isdelivered = 't';
        $data->documentTypeId = 2;
        $busDocumentCpf->insertOrUpdateDocument($data);

        $busDocumentRG = new BusinessBasicBusDocument();
        $data = new stdClass();
        $data->personId = $personId;
        $data->content = $_POST['personRg'];
        $data->isdelivered = 't';
        $data->documentTypeId = 1;
        $busDocumentRG->insertOrUpdateDocument($data);

        $preceptorId = $_POST['preceptorId'];
        $instituicaoExecutoraId = $_POST['instituicaoExecutora'];
        $funcao = $_POST['funcao'];
        $cargahorariaMunicio = $_POST['cargaHorariaMunicipio'];
        $cargaHorariaRIS = $_POST['cargaHorariaRIS'];
        $graduacao = $_POST['graduacao'];
        $posGraduacao = $_POST['posGraduacao'];
        $inicio = $_POST['inicio'];
        $fim = $_POST['saida'];
        $nucleo = $_POST['nucleo'];
        $enfase = array($_POST['enfase']);
        $tipoPreceptor = $_POST['tipoPreceptor'];
        $tempoExperienciaMeses = $_POST['tempoExperienciaMeses'];
        $recebeValorizacaoFinanceira = $_POST['recebeValorizacaoFinanceira'];
        $vinculo = $_POST['vinculo'];
        $egresso = $_POST['egresso'];
        $turmas = $_POST['turmas'];

        if ($preceptorId > 0) {
            $preceptor = new ResPreceptoria($preceptorId);
        } else {
            $preceptor = new ResPreceptoria();
        }

        $preceptor->personId = $personId;
        $preceptor->nucleoProfissionalId = $nucleo;
        $preceptor->inicio = $inicio;
        $preceptor->fim = $fim;
        $preceptor->responsavel = 't';
        $preceptor->instituicaoExecutora = $instituicaoExecutoraId;
        $preceptor->funcao = $funcao;
        $preceptor->cargaHorariaMunicipio = $cargahorariaMunicio;
        $preceptor->cargaHorariaRIS = $cargaHorariaRIS;
        $preceptor->graduacao = $graduacao;
        $preceptor->posGraduacao = $posGraduacao;
        $preceptor->tipoPreceptor = $tipoPreceptor;
        $preceptor->tempoExperienciaMeses = $tempoExperienciaMeses;
        $preceptor->egresso = $egresso;
        $preceptor->recebeValorizacaoFinanceira = $recebeValorizacaoFinanceira;
        $preceptor->vinculo = $vinculo;
        $preceptor->enfases = $enfase;
        $preceptor->turmas = $turmas;

        $preceptor->save();


        return $ok;
    }

    /**
     *
     * @return basPhysicalPerson
     */
    public function obterPessoaInserida()
    {
        $busPhysical = new BusinessBasicBusPhysicalPerson();

        return $busPhysical->getPhysicalPerson( $this->_personId );
    }

    public function displayMessageInsert()
    {
        $MIOLO = MIOLO::getInstance();
        $module = 'residency';

        $this->toolbar->hideButton('tbBtnPrint');
        $this->toolbar->hideButton('tbBtnDelete');
        $this->toolbar->hideButton('tbBtnSave');
        $this->toolbar->hideButton('tbBtnSearch');
        $this->toolbar->hideButton('tbBtnClose');
        $this->toolbar->hideButton('tbBtnNew');

        $msg = _M('Registro efetuado com sucesso.');

        $goto = SForm::getReturnTo();

        $MIOLO->information($msg, $goto);
    }



    public function changeData($inArgs)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $busCountry = new BusinessBasicBusCountry();
        $busState = new BusinessBasicBusState();
        $busCity = new BusinessBasicBusCity();

        if (empty($inArgs->stateIdWork)) {
            $city = $busCity->getCity($inArgs->cityIdWork);
            $inArgs->stateIdWork = $city->stateId;
        }

        // utilizar somente campos úteis.
        $args = new stdClass();
        $args->stateIdWork = $inArgs->stateIdWork;
        $args->cityIdWork = $inArgs->cityIdWork;
        $args->changed = $inArgs->changed;

        // se o que mudou foi a cidade
        if ( $args->changed == 'cityIdWork' )
        {
            if ( strlen($args->cityIdWork) > 0 )
            {
                $city = $busCity->getCity($args->cityIdWork);

                $args->stateIdWork = $city->stateId;
            }
        }
        // se o que mudou foi o estado
        elseif ( $args->changed == 'stateIdWork' )
        {
            // limpa todos os campos
            $args->cityIdWork = '';
        }


        // carregar países
        $filters = new stdClass();
        $filters->name = '%';

        $states = $busState->searchState($filters);
        // carregar cidades
        if ( strlen($args->stateIdWork) > 0 || count($states) == 0 )
        {
            if ( strlen($args->stateIdWork) > 0 )
            {
                $filters->stateId = $args->stateIdWork;
            }
            $cities = $busCity->searchCity($filters);
        }


        $lblStateIdWork = new MLabel(_M('Estado', $module) . ': ');
        $lblStateIdWork->setClass('m-caption');
        $lblStateIdWork->setWidth(150);
        $txtStateIdWork = new MSelection('stateIdWork', $args->stateIdWork, null, $states);
        $txtStateIdWork->addAttribute('onchange', self::getAjaxActionWork('stateIdWork'));
        $fields[] = new MHContainer('hctCountry', array($lblStateIdWork, $txtStateIdWork));

        $lblCityIdWork = new MLabel(_M('Cidade', $module) . ': ');
        $lblCityIdWork->setClass('m-caption');
        $lblCityIdWork->setWidth(150);
        $txtCityIdWork = new MSelection('cityIdWork', $args->cityIdWork, null, $cities);
        $fields[] = new MHContainer('hctCountry', array($lblCityIdWork, $txtCityIdWork));

        return $fields;

    }

    public static function getAjaxActionWork($changed)
    {
        return SForm::getAjaxAction('changeData', 'response', false, array('changed' => $changed));
    }
}
?>
