<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Tabela de parametros que considera unidade do usuario
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 * Joao Francisco Padilha Souza [joao@solis.com.br]
 *
 * @since
 * Class Created on 18/01/2013
 */
/**
 * @access public
 * @package Basic
 */
class BasCustomField extends SType
{
    protected $_utilizaNovoPadrao = true;
    
    protected $_descriptionColumn = 'label';
    
    protected $_defaultOrder = 'identifier';

    protected $_tableName = 'miolo_custom_field';
    
    protected $_virtualColumns = array(
        '_humanidentifier' => 'identifier || \' (\' || COALESCE((SELECT nametransaction FROM miolo_transaction WHERE m_transaction = identifier), \'-\') || \')\'',
    );
    
    public $_humanidentifier;
    
    public $id;
    public $identifier;
    public $label;
    public $name;
    public $field_format;
    public $possible_values;
    public $regexp;
    public $min_length;
    public $max_length;
    public $required;
    public $position;
    public $default_value;
    public $editable;
    public $visible;
    public $possible_parameters;
    public $filtrorelatoriogenerico;


    public function __construct($name = NULL)
    {
        if ( (strlen($name)  >  0) )
        {
            $this->name = $name;
            $this->populate($name);
        }
    }
    
        public function populate($name = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT id,
                     identifier,
                     MAX(name),
                     field_format,        
                     possible_values,
                     regexp,
                     min_length,
                     max_length,
                     required,
                     position,
                     default_value,
                     editable,
                     visible,
                     label,
                     possible_parameters,
                     tabela,
                     coluna,
                     filtrorelatoriogenerico
                      FROM miolo_custom_field
                      WHERE name = \''.$name.'\' GROUP BY id';
        $result = SDatabase::query($sql);


        list($this->id,
                $this->identifier,
                $this->name,
                $this->field_format,
                $this->possible_values,
                $this->regexp,
                $this->min_length,
                $this->max_length,
                $this->required,
                $this->position,
                $this->default_value,
                $this->editable,
                $this->visible,
                $this->label,
                $this->possible_parameters,
                $this->tabela,
                $this->coluna,
                $this->filtrorelatoriogenerico
                ) = $result[0];
    }
    
    public function searchGrid($filters)
    {
        $cols[] = 'bascustomfield.name';
        $cols[] = 'bascustomfield.label';
        $cols[] = 'bascustomfield.field_format';
        $cols[] = 'bascustomfield.tabela';
        $cols[] = 'bascustomfield.coluna';
        $cols[] = 'bascustomfield.formulario';
        $cols[] = 'bascustomfield.filtrorelatoriogenerico';
        
        $sql = "SELECT A.name,A.label,A.field_format,A.tabela, A.coluna,
                (select array_to_string(array_agg(B.identifier || '(' || (SELECT nametransaction from miolo_transaction C where C.m_transaction = B.identifier) || ')' ) , ', ') 
                from miolo_custom_field B where B.name = A.name) as formulario, A.filtrorelatoriogenerico
                from miolo_custom_field A GROUP BY A.name,A.label,A.field_format,A.tabela, A.coluna, A.filtrorelatoriogenerico";
        
        $result = SAGU::resultToArray(SDatabase::query($sql), $cols);

        return $result;
    }
    /**
     *
     * @return boolean
     */
    public function delete()
    {
        // Exclui os registros vazios
        // Isto foi feito inicialmente para o teste automatizado conseguir excluir corretamente os valores, mas nao ha problema de momento a nivel de producao que isto seja limpo.
        SDatabase::execute("DELETE FROM miolo_custom_value WHERE value = ''");
                
        return parent::delete();
    }
    
    /**
     * Utilizado para testes 
     */
    public static function addTempRecord()
    {
        $row = new BasCustomField();
        $row->identifier = 'FrmCity';
        $row->name = 'meu_campo_teste';
        $row->label = 'Meu campo teste';
        $row->field_format = 'text';
        $row->required = DB_FALSE;
        $row->save();
    }
    
    /**
     * Utilizado para testes 
     */
    public static function delTempRecord()
    {
        $tmp = new BasCustomField();
        $row = $tmp->findOne( $tmp->msql()->addEqualCondition('bascustomfield.label', 'Meu campo teste') );
                
        if ( $row instanceof BasCustomField )
        {
            $row->delete();
        }
    }
    
    /*
     * Obtém a valor de um campo configurável
     * 
     * @param $fieldName - nome do campo
     *        $customizedId - id que o campo referência (Ex.: personid)
     * 
     * @return Valor do campo configurável
     */
    public function getCustomValue($fieldName, $customizedId)
    {
        
        $result = SDatabase::query("SELECT getcustomvalue('{$fieldName}','{$customizedId}')");
        
        return $result[0][0];
    }
    
    /*
     * Obtém o id de um campo configurável
     * 
     * @param $formName - nome do form que o campo se encontra
     *        $fieldName - id que o campo referência (Ex.: personid)
     * 
     * @return Valor o id do campo configurável
     */
    public function getCustomFieldId($formName, $fieldName)
    {        
        $sql = " SELECT id 
                   FROM miolo_custom_field 
                  WHERE identifier = ?
                    AND name = ? ";
        
        $args[] = $formName;
        $args[] = $fieldName;
        
        $id = SDatabase::query($sql, $args, false);
        
        return $id[0][0];
    }
    
    public static function existeCamposCustomizados()
    {
        $sql = "SELECT COUNT(*) FROM miolo_custom_field WHERE identifier='FrmSubject'";
        $rows = SDatabase::query($sql);
        
        return $rows[0][0] > 0;
    }
    
    /**
     * @return array
     */
    public static function searchForGrid($subjectId = null)
    {
        // sql principal
        $sql = "SELECT id,
                       label,
                       name,
                       field_format,
                       possible_values,
                       required,
                       (CASE WHEN CCA.campocustomizaveldoassuntoid IS NOT NULL THEN TRUE ELSE FALSE END) AS gridselected
                  FROM miolo_custom_field";

        // filtra subjectId, caso existir
        $sql .= " LEFT JOIN ptccampocustomizaveldoassunto CCA
                         ON campocustomizavelid = id
                        AND subjectid = ? ";
        $args[] = SAGU::NVL($subjectId, -1);
        
        $sql .= ' WHERE miolo_custom_field.identifier = \'FrmSubject\' ';
        
        // order
        $sql .= " ORDER BY label ";
        
        $rows = SDatabase::query($sql, $args);
        
        return $rows;
    }
    
    /**
     * @return \stdClass
     */
    public static function getFieldValuesById($customFieldIds = array(), $customizedId)
    {
        $sql = new MSQL();
        $sql->setTables('miolo_custom_value v');
        $sql->setColumns('f.id,
                          v.value,
                          f.identifier');
        $sql->addLeftJoin('miolo_custom_field f', 'f.id = v.custom_field_id');
        $sql->addEqualCondition('v.customized_id', $customizedId);
        
        if ( $customFieldIds )
        {
            $sql->addWhereIn('f.id', $customFieldIds);
        }
 
        $rows = SDatabase::query($sql->select());
        $values = new stdClass();

        foreach ( $rows as $row )
        {
            list($id, $value, $identifier) = $row;
            $inputId = MCustomField::generateInputId($identifier, $id);

            $values->{$inputId} = $value;
        }

        return $values;
    }
    
    /**
     * @return array
     */
    public static function getLabelAndValues($customFieldIds = array(), $customizedId)
    {
        $sql = new MSQL();
        $sql->setTables('miolo_custom_value v');
        $sql->setColumns('f.label,
                          v.value');
        $sql->addLeftJoin('miolo_custom_field f', 'f.id = v.custom_field_id');
        $sql->addEqualCondition('v.customized_id', $customizedId);
        $sql->setOrderBy('f.label');
        
        if ( $customFieldIds )
        {
            $sql->addWhereIn('f.id', $customFieldIds);
        }
 
        $rows = SDatabase::query($sql->select());
        $list = array();

        foreach ( $rows as $row )
        {
            $list[ $row[0] ] = $row[1];
        }

        return $list;
    }
    
    /**
     * List the custom fields with the given identifier.
     *
     * @param string $identifier The identifier of the field, usually a table or form name.
     * @return array Array of MCustomField instances.
     */
    public static function listByCustomFieldIds($customFieldIds = array())
    {
        if ( !$customFieldIds )
        {
            return array();
        }
        
        $sql = new MSQL();
        $sql->setColumns('id, identifier, name, label, field_format, possible_values, regexp, min_length, max_length, required, position, default_value, editable, visible, possible_parameters, filtrorelatoriogenerico');
        $sql->setTables('miolo_custom_field');
        $sql->setWhere('id::int IN ( ' . implode(',', $customFieldIds) . ')');
        $sql->setOrderBy('position, name');

        $query = SDatabase::query($sql->select());
        $list = array();

        foreach ( $query as $row )
        {
            $cf = new MCustomField();

            list(
                $cf->id,
                $cf->identifier,
                $cf->name,
                $cf->label,
                $cf->fieldFormat,
                $cf->possibleValues,
                $cf->regexp,
                $cf->minLength,
                $cf->maxLength,
                $cf->required,
                $cf->position,
                $cf->defaultValue,
                $cf->editable,
                $cf->visible,
                $cf->possibleParameters,
                $cf->filtrorelatoriogenerico
            ) = $row;

            $list[] = $cf;
        }

        return $list;
    }
    
    /**
     * @return array
     */
    public static function getCustomFieldIdsBySubject($subjectId)
    {
        // sql principal
        $sql = "SELECT F.id
                  FROM miolo_custom_field F
             LEFT JOIN ptccampocustomizaveldoassunto CCA
                    ON CCA.campocustomizavelid = F.id
                 WHERE 1=1";
        
        $sql .= ' AND CCA.subjectid = ?';
        $args[] = $subjectId;
        
        $rows = SDatabase::query($sql, $args);
        $list = array();
        
        foreach ( $rows as $row )
        {
            $list[] = $row[0];
        }
        
        return $list;
    }
    
    /**
     * Registra o valor dos campos customizados para uma nova ocorrência a partir de uma já existente. 
     * 
     * @param type $data
     * @return type
     */
    public function registraCustomValues($data)
    {
        $result = false;
        if ( strlen($data->novoCustomized_id) > 0 && strlen($data->customized_id) > 0 && strlen($data->identifier) > 0 )
        {
            $sql = " INSERT INTO miolo_custom_value
                                 (customized_id, 
                                 custom_field_id, 
                                 value) 
                          SELECT '$data->novoCustomized_id',
                                 B.id,
                                 A.value
                            FROM miolo_custom_value A
                      INNER JOIN miolo_custom_field B
                              ON (A.custom_field_id = B.id)
                           WHERE identifier = '$data->identifier' 
                             AND A.customized_id = '$data->customized_id' ";

            $sDataBase = SDatabase::getInstance();
            $result = $sDataBase->execute($sql);
        }
        
        return $result;
    }
    
    /**
     * Registra formularios em campos customizados. 
     * 
     * @param type $data
     * @return sql
     */
     public function insertCampos($data)
    {
        $MIOLO = MIOLO::getInstance();
        $sqlPK = "SELECT nextval('miolo_custom_field_id_seq'::regclass)";
        $result = SDatabase::query($sqlPK);
        $id = $result[0][0];
        
        $args = array(
            $id,
            $data->identifier,
            $data->name,
            $data->field_format,
            $data->possible_values,
            $data->regexp,
            $data->min_length,
            $data->max_length,
            $data->required,    
            $data->position,    
            $data->default_value,    
            $data->editable,    
            $data->visible,    
            $data->label,    
            $data->possible_parameters,    
            $data->tabela,    
            $data->coluna,
            $data->filtrorelatoriogenerico
        );        
         $sql = 'INSERT INTO miolo_custom_field
            (
             id,
             identifier,
             name,
             field_format,        
             possible_values,
             regexp,
             min_length,
             max_length,
             required,
             position,
             default_value,
             editable,
             visible,
             label,
             possible_parameters,
             tabela,
             coluna,
             filtrorelatoriogenerico)
             VALUES
             ('.$id.',\''.
            SAGU::NVL($data->identifier,null).'\',\''.
            $data->name.'\',\''.
            $data->field_format.'\',\''.
            SAGU::NVL($data->possible_values,null).'\',\''.
            SAGU::NVL($data->regexp,null).'\','.
            SAGU::NVL($data->min_length,0).','.
            SAGU::NVL($data->max_length,0).',\''.
            SAGU::NVL($data->required,'f').'\',\''.   
            SAGU::NVL($data->position,1).'\',\''.    
            SAGU::NVL($data->default_value,null).'\',\''.    
            SAGU::NVL($data->editable,'t').'\',\''.    
            SAGU::NVL($data->visible,'f').'\',\''.    
            SAGU::NVL($data->label,null).'\',\''.    
            SAGU::NVL($data->possible_parameters,null).'\',\''.    
            SAGU::NVL($data->tabela,null).'\',\''.    
            SAGU::NVL($data->coluna,null).'\',\''.    
            SAGU::NVL($data->filtrorelatoriogenerico,null).'\')';

         $result = $MIOLO->GetDatabase()->execute($sql);

        if ( $result )
        {
            $this->id = $id;
        }
        if(!$data->first)
        {
            //apaga registro sem form caso for inserido antes.
            $sql = 'DELETE FROM miolo_custom_field
                WHERE identifier =\'\' AND name = \'' . $data->name . '\'';

            $resultDrop = $MIOLO->GetDatabase()->execute($sql);
        }
        
        return $result;
    }
    
         /* Delete a record
     *
     * @param $conceptId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteCampos($id)
    {
        $MIOLO = MIOLO::getInstance();

        $sql = 'DELETE FROM miolo_custom_field
                      WHERE id =\''.$id.'\'';

        $result = $MIOLO->GetDatabase()->execute($sql);

        return $result;
    }
    
             /* Delete a record
     *
     * @param $conceptId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteAllForms($name)
    {
        $MIOLO = MIOLO::getInstance();

        $sql = 'DELETE FROM miolo_custom_field
                      WHERE name = \''.$name.'\'';
        
        $result = $MIOLO->GetDatabase()->execute($sql);
        return $result;
    }
    
    
    /**
     * Obtem formularios em campos customizados. 
     * 
     * @param type $name
     * @return object
     */       
    public function getCamposAsObject($name)
    {
        $fields = array( 'ident',
                     'identifier',
                     'name',
                     'field_format',        
                     'possible_values',
                     'regexp',
                     'min_length',
                     'max_length',
                     'required',
                     'position',
                     'default_value',
                     'editable',
                     'visible',
                     'label',
                     'possible_parameters',
                     'tabela',
                     'coluna',
                     'filtrorelatoriogenerico');

        return SAGU::resultToObject(BasCustomField::obterCampos($name), $fields);
    }
    
    /**
     * Obtem formularios em campos customizados. 
     * 
     * @param type $name
     * @return array
     */ 
    public function obterCampos($name)
    {
        $MIOLO = MIOLO::getInstance();

        $sql = 'SELECT id,
                     identifier,
                     MAX(name),
                     field_format,        
                     possible_values,
                     regexp,
                     min_length,
                     max_length,
                     required,
                     position,
                     default_value,
                     editable,
                     visible,
                     label,
                     possible_parameters,
                     tabela,
                     coluna,
                     filtrorelatoriogenerico
                      FROM miolo_custom_field
                      WHERE name = \''.$name.'\' GROUP BY id';
        
        $result = SDatabase::query( $sql );

        return $result;
    }
    
    public function obterFormulario($id)
    {
        $MIOLO = MIOLO::getInstance();

        $sql = 'SELECT id,
                     identifier,
                     MAX(name),
                     field_format,        
                     possible_values,
                     regexp,
                     min_length,
                     max_length,
                     required,
                     position,
                     default_value,
                     editable,
                     visible,
                     label,
                     possible_parameters,
                     tabela,
                     coluna,
                     filtrorelatoriogenerico
                      FROM miolo_custom_field
                      WHERE id = \''.$id.'\' GROUP BY id';
        
        $result = SDatabase::query( $sql );
        
        $fields = array( 'ident',
             'identifier',
             'name',
             'field_format',        
             'possible_values',
             'regexp',
             'min_length',
             'max_length',
             'required',
             'position',
             'default_value',
             'editable',
             'visible',
             'label',
             'possible_parameters',
             'tabela',
             'coluna',
            'filtrorelatoriogenerico');

        $resultObject = SAGU::resultToObject($result, $fields);

        return $resultObject;
    }
    
            /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateFormulario($data)
    {
        $MIOLO = MIOLO::getInstance();

        $sql = 'UPDATE miolo_custom_field
                   SET identifier = \''.$data->identifier.'\',
                       required = \''.$data->required.'\',
                       editable = \''.$data->editable.'\',
                       position ='.$data->position.',
                       visible =\''.$data->visible.'\'    
                 WHERE id = \''.$data->ident.'\'';

        $result = $MIOLO->GetDatabase()->execute($sql);
        return $result;
    }    
    
    /**
     * A partir de valores definidos nos filtros, faz a pesquisa por um campo
     * 
     * @param stdClass $filtros Filtros da pesquisa (name, coluna ou tabela)
     * @return Array Lista com as linhas (de forma associativa) do resultado da pesquisa
     */
    public function procurarCampoParaDicionarioDeCampos($filtros)
    {
        $sql = "
            SELECT *
              FROM miolo_custom_field
        ";
        
        $msql = new MSQL();
        $msql->createFrom($sql);
        
        if( strlen($filtros->tabela) > 0 )
        {
            $msql->addEqualCondition("tabela", $filtros->tabela);
        }
        
        if( strlen($filtros->coluna) > 0 )
        {
            $msql->addEqualCondition("coluna", $filtros->coluna);
        }
        
        if( strlen($filtros->name) > 0 )
        {
            $msql->addEqualCondition("name", $filtros->name);
        }
        
        $resultado = SDatabase::queryAssociative($msql);
        
        return $resultado;
        
    }
    
    /**
     * A partir de valores definidos nos filtros, faz a pesquisa por um campo personalizado
     * 
     * @return Array Lista com as linhas (de forma associativa) do resultado da pesquisa
     */
    public static function listarCamposPersonalizadosDisponiveisParaRelatorio()
    {
        $sql = "
            SELECT name, label
              FROM miolo_custom_field
             WHERE label IS NOT NULL
               AND filtrorelatoriogenerico = 't'
        ";
        
        $msql = new MSQL();
        $msql->createFrom($sql);
        $resultado = SDatabase::queryAssociative($msql);
        
        return $resultado;
        
    }
}
?>