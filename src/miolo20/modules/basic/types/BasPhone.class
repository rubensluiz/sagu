 <?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Name [name@solis.coop.br]
 *
 * \b Maintainers: \n
 * Name [name@solis.coop.br]
 *
 * @since
 * Class created on 27/08/2012
 *
 */
class BasPhone extends SType
{
    /**
     * @AttributeType integer
     * 
     */
    public $phoneId;
    /**
     * @AttributeType bigint
     * 
     */
    public $personId;
    /**
     * @AttributeType character varying
     * 
     */
    public $type;
    /**
     * @AttributeType character varying
     * 
     */
    public $phone;
    
    public function __construct()
    {
        if ( !$this->phoneId )
        {
            $this->populate();
        }
    }

    public static function search($filters)
    {
        $sql = 'SELECT 
                  FROM basphone';
        $where = '';

        foreach ( $filters  as  $key => $value )
        {
            if ( (is_scalar($value))  &&  (strlen($value)  >  0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY  ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ( $i = 0;  $i  <  count($result);  $i++ )
        {
            $retVal[] = new BasPhone($result[$i][0]);
        }

        return $retVal;
    }
    
    public static function getPhone($personId, $type)
    {
        $sql = ' SELECT phone FROM basphone WHERE personid = ' . $personId . ' AND type = \'' . $type . '\'';
        $result = SDatabase::query($sql);
        
        return $result[0][0];
    }
    
    public static function updatePhone($phoneData)
    {
        $sql = ' UPDATE basphone SET phone = \'' . $phoneData->phone . '\' WHERE personid = ' . $phoneData->personId . ' AND type = \'' . $phoneData->type . '\'';
        $result = SDatabase::execute($sql);
        
        return $result;
    }

    public static function insertPhone($phoneData)
    {
        $sql = " INSERT INTO basphone (phone, personid, type) VALUES ('{$phoneData->phone}','{$phoneData->personId}', '{$phoneData->type}') ";
        $result = SDatabase::execute($sql);
        
        return $result;
    }
    
    public static function searchGrid($filters  =  null)
    {
        $sql = 'SELECT phoneid,
                       personid,
                       type,
                       phone
                  FROM basphone';
        $params = array();

        if ( strlen($filters->phoneId)  >  0 )
        {
            $where.=' AND phoneid = ?';
            $params[] = $filters->phoneId;
        }

        if ( strlen($filters->personId)  >  0 )
        {
            $where.=' AND personid = ?';
            $params[] = $filters->personId;
        }

        if ( strlen($filters->type)  >  0 )
        {
            $where.=' AND UNACCENT(type) ILIKE UNACCENT(?) ';
            $params[] = $filters->type.'%';
        }

        if ( strlen($filters->phone)  >  0 )
        {
            $where.=' AND UNACCENT(phone) ILIKE UNACCENT(?) ';
            $params[] = $filters->phone.'%';
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 4).'
                   ORDER BY ';
            $result = SDatabase::query(SAGU::prepare($sql, $params));
        }

        return $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT username,
                       TO_CHAR(datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       ipaddress,
                       phoneid,
                       personid,
                       type,
                       phone
                  FROM basphone
                 WHERE phoneid = ?';
        $result = SDatabase::query($sql, array($this->phoneId));

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list($this->userName, $this->dateTime, $this->ipAddress, $this->phoneId, $this->personId, $this->type, $this->phone) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if ( !$this->phoneId )
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = 'INSERT INTO basphone 
                            (username, datetime, ipaddress, personid, type, phone)
                     VALUES (?, ?, ?, ?, ?, ?)';
        $params = array($this->userName, $this->dateTime, $this->ipAddress, $this->phoneId, $this->personId, $this->type, $this->phone);
        $result = SDatabase::execute($sql, $params);
        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE basphone
                   SET phoneid = ?,
                       personid = ?,
                       type = ?,
                       phone = ?
                 WHERE  = ?';
        $params = array($this->userName, $this->dateTime, $this->ipAddress, $this->phoneId, $this->personId, $this->type, $this->phone, );
        return SDatabase::execute($sql, $params);
    }

    public function delete()
    {
        if ( !$this->phoneId )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM basphone
                      WHERE phoneid = ?';
        $params = array($this->phoneId);
        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
        }

        return $result;
    }
}


?> 