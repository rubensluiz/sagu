<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Esta classe contém as alterações de banco de dados das pendências
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @since
 * Class created on 10/03/2011
 */
/**
 * @access public
 * @package Basic
 */
class BasTask extends SType
{
    /**
     * Table fields
     */

    /**
     * @var (integer) Identificador único das pendências
     */
    public $taskId;
    /**
     * @var (string) Usuário criador da pendência
     */
    public $creatorIdUser;
    /**
     * @var (string) Atribuido para
     */
    public $assignedTo;
    /**
     * @var (integer) Código do status
     */
    public $taskStatusId;
    /**
     * @var (string) Objeto do status
     */
    public $taskStatus;
    /**
     * @var (integer) Código do grupo
     */
    public $taskConfigId;

    /**
     * @var (string) Detalhes
     */
    public $details;
    /**
     * @var (date) Data de criação
     */
    public $creationDate;
    /**
     * @var (string) Usuário
     */
    public $updatedBy;
    /**
     * @var (string) Observações para alteração
     */
    public $observation;
    /**
     * @var (string) Observações para alteração
     */
    public $taskHistory;
    

    /**
     * Construtor da classe
     *
     * @param (integer) $taskId Chave primária da tabela
     */
    public function __construct($taskId = null)
    {
        if ( strlen($taskId) > 0 )
        {
            $this->taskId = $taskId;
            $this->populate();
        }
    }

    /**
     * Data logic
     */
    public function __get($name)
    {
        return $this->$name;
    }

    public function __set($name, $value)
    {
        $this->$name = $value;
    }

    /**
     * Private methods
     */

    /**
     * Chamado pelo construtor, quando este recebe os dados de chave primária
     */
    private function populate()
    {
        $cols = array( 'taskid',
                       'creatorIdUser',
                       'assignedTo',
                       'taskstatusid',
                       'taskConfigId',
                       'details',
                       "TO_CHAR(creationdate,'".SAGU::getParameter('BASIC', 'MASK_TIMESTAMP')."')",
                       'datetime',
                       'userName',
                       "TO_CHAR(dateTime,'".SAGU::getParameter('BASIC', 'MASK_TIMESTAMP')."')",
                       'ipAddress');

        $sql = new MSQL( implode(',', $cols), 'bas.task');
        $sql->SetWhere('taskid = ? ');
        $sql->addParameter($this->taskId);

        $result = SDatabase::query($sql->Select());

        if ( count($result) == 0 )
        {
            $module = SAGU::getFileModule(__FILE__);
            throw new Exception(_M('Pendência @1 inesistente.', $module, $this->taskId));
        }

        list( $this->taskId,
              $this->creatorIdUser,
              $this->assignedTo,
              $this->taskStatusId,
              $this->taskConfigId,
              $this->details,
              $this->creationDate,
              $this->userName,
              $this->dateTime,
              $this->ipAddress) = $result[0];

        $this->taskStatus = new BasTaskStatus($this->taskStatusId);
    }

    /**
     * Common methods
     */

    /**
     * Exclui da base de dados o objeto atual
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function delete()
    {
        $sql = 'DELETE FROM bas.task
                      WHERE taskid = ?';

        $result = SDatabase::execute($sql, array($this->taskId));

        if ( $result )
        {
            $this->taskId = null;
        }

        return $result;
    }

    /**
     * Detecta se o salvar deve inserir um novo (no caso de chave primária não definida)
     * ou se deve apenas atualizar um registro já existente (no caso de chave primária já definida)
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function save()
    {
        $module = SAGU::getFileModule(__FILE__);
        $maskTimestamp = SAGU::getParameter('BASIC', 'MASK_TIMESTAMP');

        if ( !$this->creationDate )
        {
            $this->creationDate = SAGU::getDateNow( SAGU::getParameter('BASIC', 'MASK_DATE_PHP') . ' ' . SAGU::getParameter('BASIC', 'MASK_TIME_PHP') );
        }

        if ( ! strlen($this->taskId) > 0 )
        {
            $data = array( 'creatorIdUser' => $this->creatorIdUser,
                           'assignedTo' => strlen($this->assignedTo) > 0 ? $this->assignedTo : null,
                           'taskstatusid' => $this->taskStatusId,
                           'taskConfigId' => $this->taskConfigId,
                           'details' => $this->details,
                           'creationdate' => ":TO_TIMESTAMP('{$this->creationDate}', '{$maskTimestamp}')" );
            $sql = new MSQL( implode(',', array_keys($data)), 'bas.task' );
            $sql->SetParameters( array_values($data) );

            $sqlCmd = $sql->insert();
            $retVal = SDatabase::execute($sqlCmd);
        }
        else
        {
            $data = array( 'taskid' => $this->taskId,
                           'creatorIdUser' => $this->creatorIdUser,
                           'assignedTo' => strlen($this->assignedTo) > 0 ? $this->assignedTo : null,
                           'taskstatusid' => $this->taskStatusId,
                           'details' => $this->details,
                           'taskConfigId' => $this->taskConfigId,
                           'creationdate' => ":TO_TIMESTAMP('{$this->creationDate}', '{$maskTimestamp}')" );

            $sql = new MSQL( implode(',', array_keys($data)), 'bas.task' );
            $sql->SetParameters( array_values($data) );

            $sql->setWhere('taskid = ?');
            $sql->addParameter($this->taskId);

            $sqlCmd = $sql->update();
            $retVal = SDatabase::execute($sqlCmd);

            //Inerir no Histórico de alterações
            $basTaskHistory = new BasTaskHistory();
            $basTaskHistory->taskId = $this->taskId;
            $basTaskHistory->taskStatusId = $this->taskStatusId;
            $basTaskHistory->updatedBy = $this->updatedBy;
            $basTaskHistory->obs = $this->observation;
            $basTaskHistory->save();            
        }

        return $retVal;
    }

    /**
     * Busca por pendências
     *
     * Retorna uma lista de objetos do tipo desta classe com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public function search($filters)
    {
        $sql = 'SELECT taskid
                  FROM bas.task';

        $where = '';
        foreach ( $filters as $key => $value )
        {
            if ( strlen($value) > 0 )
            {
                $where .= ' AND ' . $key . ' = ' . $value;
            }
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }
        
        $results = SDatabase::query($sql);

        $retVal = array();
        foreach ( (array)$results as $result )
        {
            $retVal[] = new BasTask($result[0]);
        }

        return $retVal;
    }

    /**
     * Busca pendências
     * 
     * Retorna array com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public function searchGrid($filters)
    {
        //Incluir registros onde BasTaskStatus.closesTask = TRUE
        $filters->onlyClosesTask = isset($filters->onlyClosesTask) ? $filters->onlyClosesTask : true;

        $sql = "SELECT A.taskid,
                   A.creatorIdUser,
                   (CASE WHEN B.idUser IS NULL THEN '[SISTEMA]' ELSE B.name END) AS creatorName,
                   A.assignedTo,
                   D.name AS assignedTo,
                   A.taskstatusid,
                   C.description,
                   
                   CASE WHEN E.idUser IS NOT NULL THEN
                        'Usuário ' || (SELECT login FROM miolo_user WHERE iduser = E.idUser)
                        ELSE 'Grupo ' || (SELECT m_group FROM miolo_group WHERE idgroup = E.idGroup) END,

                   REPLACE(A.details, '\n', '<br>'),
                   TO_CHAR(A.creationdate, '" . SAGU::getParameter('BASIC', 'MASK_DATE') . "')
                FROM bas.task A
           LEFT JOIN miolo_user B
                  ON (B.iduser = A.creatorIdUser)
          INNER JOIN bastaskstatus C
                  ON (A.taskstatusid = C.taskstatusid)
           LEFT JOIN miolo_user D
                  ON (D.iduser = A.assignedTo)
          INNER JOIN bas.taskConfig E
                  ON (A.taskConfigId = E.taskConfigId) ";

        if ( strlen($filters->userOfGroups) > 0 )
        {
            $where .= ' AND (
                CASE WHEN E.visibleonlytoassigned IS TRUE
                THEN
                    ( A.assignedTo = ? )
                ELSE
                    ((E.idgroup IN ( SELECT idgroup FROM miolo_groupuser WHERE iduser = ? )
                    OR E.idUser = ?)
                    OR (A.assignedTo = ?))
                END )';
            $args[] = $filters->userOfGroups;
            $args[] = $filters->userOfGroups;
            $args[] = $filters->userOfGroups;
            $args[] = $filters->userOfGroups;
        }

        if ( strlen($filters->taskStatusId) > 0 )
        {
            $where .= ' AND A.taskStatusId = ?';
            $args[] = $filters->taskStatusId;
        }
        else if ( $filters->onlyClosesTask )
        {
            $where .= ' AND C.closestask = ?';
            $args[] = DB_FALSE;
        }

        if ( strlen($filters->taskId) > 0 )
        {
            $where .= ' AND A.taskId = ?';
            $args[] = $filters->taskId;
        }

        if ( strlen($filters->creatorIdUser) > 0 )
        {
            $where .= ' AND A.creatorIdUser = ?';
            $args[] = $filters->creatorIdUser;
        }

        if ( strlen($filters->assignedTo) > 0 )
        {
            $where .= ' AND A.assignedTo = ?';
            $args[] = $filters->assignedTo;
        }
        
        if ( strlen($filters->details) > 0 )
        {
            $where .= ' AND UNACCENT(A.details) ILIKE UNACCENT(?)';
            $args[] = $filters->details;
        }

        if ( strlen($filters->creationDate) > 0 )
        {
            $where .= ' AND A.creationDate = ?';
            $args[] = $filters->creationDate;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4);

            //Ordena nesta ordem: Abertas, Andamento, Fechadas. (ticket #8940)
            $sql .= 'ORDER BY A.taskStatusId = ' . BasTaskStatus::STATUS_NEW . ' DESC,
                         A.taskStatusId = ' . BasTaskStatus::STATUS_ASSIGNED . ' DESC,
                         A.taskStatusId = ' . BasTaskStatus::STATUS_RESOLVED . ' DESC';

            $result = SDatabase::query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Duplica o registro atual.
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function duplicate()
    {
        // Not implemented
    }
}
?>