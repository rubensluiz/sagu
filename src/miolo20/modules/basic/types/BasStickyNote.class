<?php

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Description of BasStickyNote
 *
 * @author augusto
 */
class BasStickyNote extends SType
{
    protected $gravarMaiusculo = false;
    
    // Constantes dos tipos de stickynotes referentes ao fluxo de aprovações.
    const PENDENCIA_DE_FLUXO   = 'PENDENCIA_DE_FLUXO';
    const SOLICITACAO_AVALIADA = 'SOLICITACAO_AVALIADA';
    
    /**
     *
     * @var int
     */
    public $stickyNoteId;
    
    /**
     *
     * @var String DB_BOOLEAN
     */
    public $isGroup;
    
    /**
     *
     * @var int
     */
    public $code;
    
    /**
     *
     * @var String
     */
    public $description;
    
    /**
     *
     * @var int
     */
    public $positionX;
    
    /**
     *
     * @var int
     */
    public $positionY;
    
    /**
     *
     * @var String
     */
    public $stickyNoteType;
    
    /**
     *
     * @var text
     */
    public $link;
    
    public $pendencyType;

    /**
     * Obtém todos os lembretes do usuário logado.
     * 
     * @return array
     */
    public function obterStickyNotesDoUsuarioLogado()
    {
       $MIOLO     = MIOLO::getInstance();
       $loginUser = $MIOLO->GetLogin();
       
       if ( strlen($loginUser->idkey) > 0 )
       {
           $groupUser   = new BusinessAdminUser();        
           $grupos      = $groupUser->listGroupsByUser($loginUser->idkey);
           $stickyNotes = array();
           
           foreach ( $grupos as $grupo )
           {
               $this->isGroup   = DB_TRUE;
               $this->code      = $grupo[0];
               $stickyNoteGroup = $this->busca();
               
               $stickyNotes = $this->unirArray($stickyNoteGroup, $stickyNotes);
           }
           
           $this->isGroup  = DB_FALSE;
           $this->code     = $loginUser->idkey;
           $stickyNoteUser = $this->busca();
           
           $stickyNotes = $this->unirArray($stickyNoteUser, $stickyNotes);
           
           return $stickyNotes;
       }
       else
       {
           return;
       }
    }
    
    /**
     * Unifica duas arrays em uma só, não substiuíndo valores.
     * Não consegui encontrar nenhum recurso do php que faça este processo,
     * caso souber ou encontrar, favor substituir as chamadas deste método pelo mesmo.
     * 
     * @param array $arrayOrigem
     * @param array $arrayDestino
     * @return array
     */
    private function unirArray($arrayOrigem, $arrayDestino)
    {
        if ( !is_null($arrayOrigem) )
        {
            foreach ( $arrayOrigem as $ao )
            {
                $arrayDestino[] = $ao;
            }
        }
        
        return $arrayDestino;
    }
    
    /**
     * Busca por lembretes.
     * 
     * @return array
     */
    public function busca()
    {
        $msql = new MSQL();
        $msql->setColumns("stickynoteid, isgroup, code, description, positionx, positiony, stickynotetype, link")
             ->setTables("basstickynote");
        
        $params = array();
        
        if ( strlen($this->isGroup) > 0 )
        {
            $msql->setWhereAnd('isGroup = ?');
            $params[] = $this->isGroup;
        }
        else
        {
            $msql->setWhereAnd('isGroup = FALSE');
        }
        
        if ( strlen($this->code) > 0 )
        {
            $msql->setWhereAnd('code = ?');
            $params[] = $this->code;
        }
        
        if ( strlen($this->stickyNoteType) > 0 )
        {
            $msql->setWhereAnd('stickynotetype = ?');
            $params[] = $this->stickyNoteType;
        }
        
        $cols = array(
            'stickyNoteId',
            'isGroup',
            'code',
            'description',
            'positionX',
            'positionY',
            'stickynotetype',
            'link'
        );
        
        $result = SDatabase::query($msql->select(), $params);
        
        return SAGU::resultToObject($result, $cols);
    }
    
    public function verificaSeUsuarioTemPendencias()
    {
        $temPendencias = FALSE;
        
        $stickyNotesUser = $this->obterStickyNotesDoUsuarioLogado();
        
        if ( count($stickyNotesUser) > 0 )
        {
            foreach ($stickyNotesUser as $sn )
            {
                if ( $sn->stickynotetype == 'P' )
                {
                    $temPendencias = TRUE;
                    break;
                }
            }        
        }
        
        return $temPendencias;
    }
    
    public function deletePendencyType($pendencyType)
    {
        $sql = " DELETE FROM basstickynote WHERE pendencytype = '{$pendencyType}' ";
        
        return SDatabase::execute($sql);
    }
}

?>
