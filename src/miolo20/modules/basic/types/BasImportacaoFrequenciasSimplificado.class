<?php

class BasImportacaoFrequenciasSimplificado extends BasImportacaoFrequencias
{
    
    private $importouFrequencia = FALSE;
    
    /**
     * Processa Arquivo Simplificado (Arquivo de fonte de dados).
     * @param type $fileId
     */
    public function processarArquivo($fileId)
    {
        $busFile = new BusinessBasicBusFile();
        $arrayData = $busFile->getFileAsString($fileId, true);

        $ok = true;
        
        foreach( $arrayData as $cod => $linha)
        {
            if( $this->modulodestino == self::MODULO_DESTINO_PEDAGOGICO )
            {
                if ( !$this->importouFrequencia)
                {
                    //Insere o registro BasImportacaoFrequencia
                    $this->importacaofrequenciaid = $this->inserirImportacaoFrequencia($fileId, $this->modulodestino, $this->datainicialregistros, $this->datafinalregistros, $this->datageracaoarquivo, $this->horariogeracaoarquivo);
                    $this->importouFrequencia = TRUE;
                }
            }

            if( $this->modulodestino == self::MODULO_DESTINO_PEDAGOGICO )
            {
                $v_linha = $this->processarLinha($linha); //Obtém dados da linha

                //Processa informações de frequencia da movimentação
                $ok &= $this->processarFrequenciaPedagogico($v_linha, BasImportacaoFrequencias::MODELO_SIMPLIFICADO);
            }
        }
        
        //Define falta para todos horários não registrados dentro do intervalo de datas do arquivo importado
        if( $this->modulodestino == self::MODULO_DESTINO_PEDAGOGICO )
        {
            $ok &= $this->processarFaltasPedagogico();
        }
        
        return $ok;
    }
    
    protected function processarLinha($linha)
    {
        $vlinha["nsr"] = substr($linha, 0, 3);
        
        // Obtém as datas, para posteriormente marcar falta
        $data = str_replace('/' , '', substr($linha, 4, 8));
        $data = substr($data, 0, 4).'20'.substr($data, 4, 2);
        
        if ( SAGU::compareTimestamp($data, '>', $this->datafinalregistros, 'ddmmyyyy') || !(strlen($this->maxDate) > 0) )
        {
            $this->datafinalregistros = $data;
        }

        if ( SAGU::compareTimestamp($data, '<', $this->datainicialregistros, 'ddmmyyyy') || !(strlen($this->minDate) > 0) )
        {
            $this->datainicialregistros = $data;
        }
        
        $vlinha["data"] = $data;
        $vlinha["hora"] = str_replace(':', '', substr($linha, 13, 5));
        $vlinha["pis"] = substr($linha, 19, 16);

        //Obtém o código da pessoa
        $pis = $vlinha["pis"];
        $sql_pis = "SELECT personid FROM ONLY basphysicalperson WHERE lpad(personid::varchar, 16, '0') = ?";

        $result_pis = SDatabase::query($sql_pis, array($pis));
        $vlinha["personid"] = $result_pis[0][0];

        return $vlinha;
    }
    
}
?>
