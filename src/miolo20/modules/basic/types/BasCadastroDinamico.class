<?php

/**
 * <--- Copyright 2005-2012 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Classe que representa a tabela de cadastro dinâmico.
 *
 * @author Daniel Hartmann [daniel@solis.coop.br]
 *
 * \b Maintainers: \n
 * Daniel Hartmann [daniel@solis.coop.br]
 *
 * @since
 * Class created on 14/05/2012
 *
 */
class BasCadastroDinamico extends SType
{
    /**
     * @AttributeType integer
     */
    protected $codigo;

    /**
     * @AttributeType character varying
     */
    protected $identificador;

    /**
     * @AttributeType character varying
     */
    protected $referencia;

    /**
     * @AttributeType character varying
     */
    protected $modulo;

    public function __construct($codigo=NULL)
    {
        if ( strlen($codigo) > 0 )
        {
            $this->codigo = $codigo;
            $this->populate();
        }
    }

    public static function search($filters)
    {
        $sql = 'SELECT codigo, identificador, referencia, modulo
                  FROM bascadastrodinamico';
        $where = '';

        foreach ( $filters as $key => $value )
        {
            if ( (is_scalar($value)) && (strlen($value) > 0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where) > 0 )
        {
            $sql.=' WHERE ' . substr($where, 5);
        }

        $sql.=' ORDER BY codigo ';
        $result = SDatabase::query($sql);
        $retVal = array( );

        for ( $i = 0; $i < count($result); $i++ )
        {
            $retVal[] = new bascadastrodinamico($result[$i][0]);
        }

        return $retVal;
    }

    public static function searchGrid($filters=NULL)
    {
        $sql = 'SELECT codigo,
                       identificador,
                       referencia,
                       modulo
                  FROM bascadastrodinamico';
        $params = array();

        if ( strlen($filters->codigo) > 0 )
        {
            $where.=' AND codigo = ? ';
            $params[] = $filters->codigo;
        }

        if ( strlen($filters->identificador) > 0 )
        {
            $where.=' AND UNACCENT(identificador) ILIKE UNACCENT(?) ';
            $params[] = $filters->identificador . '%';
        }

        if ( strlen($filters->referencia) > 0 )
        {
            $where.=' AND UNACCENT(referencia) ILIKE UNACCENT(?) ';
            $params[] = $filters->referencia . '%';
        }

        if ( strlen($filters->modulo) > 0 )
        {
            $where.=' AND UNACCENT(modulo) ILIKE UNACCENT(?) ';
            $params[] = $filters->modulo . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql.=' WHERE ' . substr($where, 4) . '
                   ORDER BY codigo';
            $result = SDatabase::query(SAGU::prepare($sql, $params, FALSE));
        }

        return $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT codigo,
                       identificador,
                       referencia,
                       modulo,
                       userName,
                       ipAddress,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\')
                  FROM bascadastrodinamico
                 WHERE codigo = ?';
        $result = SDatabase::query($sql, array( $this->codigo ), FALSE);

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list(
            $this->codigo,
            $this->identificador,
            $this->referencia,
            $this->modulo,
            $this->userName,
            $this->ipAddress,
            $this->dateTime ) = $result[0];
    }

    /**
     * Popula o type pelo módulo e pelo identificador informados.
     *
     * @param string $modulo Módulo.
     * @param string $identificador Identificador.
     * @throws Exception Gera exceção em caso de não existir nenhum registro.
     */
    public function popularPorIdentificador($modulo, $identificador)
    {
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT codigo,
                       identificador,
                       referencia,
                       modulo,
                       userName,
                       ipAddress,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\')
                  FROM bascadastrodinamico
                 WHERE modulo = ?
                   AND identificador = ? ';
        $result = SDatabase::query($sql, array( $modulo, $identificador ), FALSE);

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list(
            $this->codigo,
            $this->identificador,
            $this->referencia,
            $this->modulo,
            $this->userName,
            $this->ipAddress,
            $this->dateTime ) = $result[0];
    }

    public function save()
    {
        if ( strlen($this->codigo) == 0 )
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = 'SELECT nextval(\'bascadastrodinamico_codigo_seq\')';
        $result = SDatabase::query($sql);
        $newId = $result[0][0];

        $sql = 'INSERT INTO bascadastrodinamico (codigo, identificador, referencia, modulo) VALUES (?, ?, ?, ?)';
        $params = array( $newId, $this->identificador, $this->referencia, $this->modulo );
        $result = SDatabase::execute($sql, $params, FALSE);

        if ( $result )
        {
            $this->codigo = $newId;
        }

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE bascadastrodinamico
                   SET identificador = ?,
                       referencia = ?,
                       modulo = ?
                 WHERE codigo = ?';
        $params = array(
            $this->identificador,
            $this->referencia,
            $this->modulo,
            $this->codigo
        );
        return SDatabase::execute($sql, $params, FALSE);
    }

    public function delete()
    {
        if ( strlen($this->codigo) == 0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM bascadastrodinamico
                      WHERE codigo = ?';
        $params = array( $this->codigo );
        $result = SDatabase::execute($sql, $params, FALSE);

        if ( $result )
        {
            $this->codigo = null;
        }

        return $result;
    }

    /**
     * Obtém os dados das colunas a serem utilizadas pelo cadastro dinâmico.
     *
     * @param string $modulo Módulo.
     * @param string $identificador Identificador.
     * @return array Vetor com objetos do tipo SInfoColuna.
     */
    public static function buscarDadosDasColunas($modulo, $identificador)
    {
        $sql = "SELECT pg_attribute.attname AS id,
                       format_type(pg_type.oid, NULL) AS tipo,
                       CASE
                           WHEN pg_description.description IS NULL THEN initcap(pg_attribute.attname)
                           ELSE pg_description.description 
                       END AS titulo,
                       pg_attribute.attnotnull AS obrigatorio,
                       CASE
                           WHEN pg_get_expr(pg_attrdef.adbin, pg_attrdef.adrelid) = 'false' THEN 'f'
                           WHEN pg_get_expr(pg_attrdef.adbin, pg_attrdef.adrelid) = 'true' THEN 't'
                           ELSE pg_get_expr(pg_attrdef.adbin, pg_attrdef.adrelid) 
                       END AS valorPadrao, 
                       CASE WHEN pg_attribute.atttypmod > 4 THEN ( pg_attribute.atttypmod - 4 ) ELSE NULL END AS tamanho,
                       pg_constraint.contype AS restricao,
                       toSchema.nspname AS fkEsquema,
                       toTable.relname AS fkTabela,
                       toColumn.attname AS fkColuna,
                       pg_namespace.nspname AS esquema,
                       pg_class.relname AS tabela,
                       pg_namespace.nspname || '__' || pg_class.relname || '__' || pg_attribute.attname AS campo
                  FROM pg_attribute 
            INNER JOIN pg_class 
                    ON pg_class.oid = pg_attribute.attrelid
                   AND pg_class.relkind = 'r'
            INNER JOIN pg_namespace
                    ON pg_namespace.oid = pg_class.relnamespace
            INNER JOIN bascadastrodinamico
                    ON pg_namespace.nspname = split_part(bascadastrodinamico.referencia, '.', 1)
                   AND pg_class.relname = split_part(bascadastrodinamico.referencia, '.', 2)
-- TYPE
            INNER JOIN pg_type
                    ON pg_type.oid = pg_attribute.atttypid 
                   AND pg_type.typname NOT IN ('oid', 'tid', 'xid', 'cid')
-- DEFAULT VALUE
             LEFT JOIN pg_attrdef 
                    ON pg_attrdef.adrelid = pg_attribute.attrelid 
                   AND pg_attrdef.adnum = pg_attribute.attnum

-- FKS
             LEFT JOIN pg_constraint
                    ON pg_constraint.conrelid = pg_attribute.attrelid
                   AND pg_attribute.attnum = ANY(pg_constraint.conkey)
             LEFT JOIN pg_class AS toTable
                    ON toTable.oid = pg_constraint.confrelid
             LEFT JOIN pg_namespace AS toSchema
                    ON toSchema.oid = toTable.relnamespace
             LEFT JOIN pg_attribute AS toColumn
                    ON toColumn.attrelid = toTable.oid 
                   AND conkey @> ARRAY[ pg_attribute.attnum ]
                   AND position(toColumn.attnum::text IN array_to_string(confkey, ' ')) <> 0

-- COMMENT
             LEFT JOIN pg_description
                    ON pg_description.objoid = pg_class.oid
                   AND pg_description.objsubid = pg_attribute.attnum

                 WHERE bascadastrodinamico.modulo = ?
                   AND bascadastrodinamico.identificador = ?
                   AND pg_attribute.attname NOT IN (SELECT column_name FROM information_schema.columns WHERE table_name = 'baslog')
        ";

        $params = array( $modulo, $identificador );

        $resultado = SDatabase::query(SAGU::prepare($sql, $params, FALSE));

        $colunas = array();
        
        foreach ( $resultado as $linha )
        {
            $coluna = new SInfoColuna();
            list(
                $coluna->nome,
                $coluna->tipo,
                $coluna->titulo,
                $coluna->obrigatorio,
                $coluna->valorPadrao,
                $coluna->tamanho,
                $coluna->restricao,
                $coluna->fkEsquema,
                $coluna->fkTabela,
                $coluna->fkColuna,
                $coluna->esquema,
                $coluna->tabela,
                $coluna->campo
            ) = $linha;

            $chave = "$coluna->esquema.$coluna->tabela.$coluna->nome";
            $colunas[$chave] = $coluna;
        }

        return $colunas;
    }

    /**
     * Verifica se identificador existe na base.
     *
     * @param type $identificador 
     * @return boolean 
     */
    public static function verificarIdentificador($modulo, $identificador)
    {
        $sql = "SELECT identificador, codigo
                  FROM bascadastrodinamico
                 WHERE identificador = '$identificador'
                   AND modulo = '$modulo'";

        return count(SDatabase::query($sql)) > 0;
    }

    /**
     * Busca identificadores nas tabelas de cadastro e busca dinâmica.
     *
     * @param object $filters Filtros da consulta.
     * @return array Resultado da busca em forma de matriz.
     */
    public static function buscarIdentificadores($filters=NULL)
    {
        $sql = 'SELECT * FROM (
                 SELECT modulo,
                       identificador
                  FROM bascadastrodinamico
                 UNION
                SELECT modulo,
                       identificador
                  FROM basbuscadinamica ) AS formulariosDinamicos ';

        $params = array();

        if ( strlen($filters->modulo) > 0 )
        {
            $where.=' AND UNACCENT(modulo) ILIKE UNACCENT(?) ';
            $params[] = $filters->modulo . '%';
        }

        if ( strlen($filters->identificador) > 0 )
        {
            $where.=' AND UNACCENT(identificador) ILIKE UNACCENT(?) ';
            $params[] = $filters->identificador . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql.=' WHERE ' . substr($where, 4) . '
                   ORDER BY modulo, identificador';
            $result = SDatabase::query(SAGU::prepare($sql, $params, FALSE));
        }

        return $result;
    }
}

?>