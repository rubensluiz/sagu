<?php
/**
 * <--- Copyright 2005-2012 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário de auditoria.
 *
 * @author Nataniel I. da Silva [nataniel@solis.coop.br]
 *
 * @since
 * Class created on 13/01/2014
 * 
 */

class BasRegistroAuditoria extends SType
{
    /*
     * Atributo integer
     */
    public $etiquetaDaTabelaId;
    
    /*
     * Atributo character varying
     */
    public $tabela;
    
    /*
     * Atributo character varying
     */
    public $esquema;
    
    /*
     * Atributo character varying
     */
    public $etiqueta;
   
    /*
     * String de conexão
     * 
     */
    public $stringConexao;
    
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        
        $stringConexao = SAGU::getParameter('BASIC', 'MIOLO_AUDIT_DATABASE');
        $databaseName = $MIOLO->getConf('db.basic.name');
        
        $this->stringConexao = 'dbname='.$databaseName.'_auditoria '.$stringConexao;
        
    }
    
    /*
     * Lista a etiqueta das tabelas que foram auditadas e que foram anteriormente 
     * cadastradas na basEtiquetaDaTabela
     */
    public function listaEtiquetaTabelasAuditadas()
    {
        $tabelasAuditadas = $this->listaTabelasAuditadas();
        
        if($tabelasAuditadas && $tabelasAuditadas != false)
        {
            $sql = "SELECT tabela, 
                           etiqueta || ' - ' || tabela
                      FROM basEtiquetaDaTabela";

            $tabelas = SDatabase::query(SAGU::prepare($sql, $args));

            foreach($tabelas as $tabela)
            {
                foreach($tabelasAuditadas as $tabelaAuditada)
                {
                    if($tabela[0] == $tabelaAuditada)
                    {
                        $listaDeTabelas[] = $tabela;
                    }
                }
            }

            return $listaDeTabelas;  
        }
        else
        {
            return false;
        }   
    }
    
    /*
     * Lista o nome de todas as tabelas que foram auditadas.
     */
    public function listaTabelasAuditadas()
    {
        
        $conn = pg_pconnect($this->stringConexao);
        if (!$conn) 
        {   
            //Ocorreu um erro ao se conectar com a base
            return false;
        }

        $result = pg_query($conn, "SELECT DISTINCT table_name FROM miolo_audit");
        if (!$result) 
        {
            //Ocorreu um erro ao fazer a consulta
            return false;
        }

        while ($row=pg_fetch_row($result,$i)) 
        {
          for($j=0; $j < count($row); $j++) 
          {  
             $return[] = $row[$j];
          }

        }
        
        return $return;
    }
    
    /*
     * Retorna a etiqueta da tabela
     * 
     * @params Recebe como parâmetro o nome da tabela. Ex.: bascity
     */
    public function getTableName($tableName)
    {
        $sql = " SELECT etiqueta || ' - ' || tabela
                   FROM basEtiquetaDaTabela 
                  WHERE tabela = ? ";
                
        $return = SDatabase::query(SAGU::prepare($sql, $tableName, false));
        
        return $return[0][0];
    }
}



?>
