<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Augusto [augusto@solis.coop.br]
 *
 * \b Maintainers: \n
 * Augusto [augusto@solis.coop.br]
 *
 * @since
 * Class created on 07/08/2012
 *
 */
class BasHistoricoFuncional extends SType
{
    /**
     * @AttributeType integer
     * 
     */
    protected $historicoFuncionalId;
    /**
     * @AttributeType character varying
     * 
     */
    protected $personId;
    /**
     * @AttributeType integer
     * 
     */
    protected $portaria;
    /**
     * @AttributeType date
     * 
     */
    protected $data;
    /**
     * @AttributeType text
     * 
     */
    protected $assunto;
    /**
     * @AttributeType date
     * 
     */
    protected $inicio;
    /**
     * @AttributeType date
     * 
     */
    protected $fim;
    /**
     * @AttributeType text
     * 
     */
    protected $observacao;
    
    public function __construct($historicoFuncionalId = NULL)
    {
        if ( (strlen($historicoFuncionalId)  >  0) )
        {
            $this->historicoFuncionalId = $historicoFuncionalId;
            $this->populate();
        }
    }
    
    public function setData($data)
    {
        $this->personId = $data->personId;
        $this->portaria = $data->portaria;
        $this->data = $data->data;
        $this->assunto = $data->assunto;
        $this->inicio = $data->inicio;
        $this->fim = $data->fim;
        $this->observacao = $data->observacao;
    }

    public static function search($filters)
    {
        $sql = 'SELECT historicofuncionalid
                  FROM bashistoricofuncional';
        $where = '';

        foreach ( $filters  as  $key => $value )
        {
            if ( (is_scalar($value))  &&  (strlen($value)  >  0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY historicofuncionalid ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ( $i = 0;  $i  <  count($result);  $i++ )
        {
            $retVal[] = new PublicBasHistoricoFuncional($result[$i][0]);
        }

        return $retVal;
    }

    public static function searchGrid($filters, $returnAsObject = false)
    {
        $sql = 'SELECT historicofuncionalid,
                       personId,
                       portaria,
                       TO_CHAR(data, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       assunto,
                       TO_CHAR(inicio, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       TO_CHAR(fim, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       observacao
                  FROM bashistoricofuncional';
        $params = array();
        
        $cols[] = 'historicoFuncionalId';
        $cols[] = 'personId';
        $cols[] = 'ordinance';
        $cols[] = 'date';
        $cols[] = 'subject';
        $cols[] = 'startDate';
        $cols[] = 'endDateSub';
        $cols[] = 'historical';

        if ( strlen($filters->historicoFuncionalId)  >  0 )
        {
            $where.=' AND historicofuncionalid = ?';
            $params[] = $filters->historicoFuncionalId;
        }
        
        if ( strlen($filters->personId)  >  0 )
        {
            $where.=' AND personId = ?';
            $params[] = $filters->personId;
        }

        if ( strlen($filters->portaria)  >  0 )
        {
            $where.=' AND TO_ASCII(portaria) ILIKE TO_ASCII(?) ';
            $params[] = $filters->portaria.'%';
        }

        if ( strlen($filters->data)  >  0 )
        {
            $where.=' AND data = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $params[] = $filters->data;
        }

        if ( strlen($filters->assunto)  >  0 )
        {
            $where.=' AND TO_ASCII(assunto) ILIKE TO_ASCII(?) ';
            $params[] = $filters->assunto.'%';
        }

        if ( strlen($filters->inicio)  >  0 )
        {
            $where.=' AND inicio = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $params[] = $filters->inicio;
        }

        if ( strlen($filters->fim)  >  0 )
        {
            $where.=' AND fim = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $params[] = $filters->fim;
        }

        if ( strlen($filters->observacao)  >  0 )
        {
            $where.=' AND TO_ASCII(observacao) ILIKE TO_ASCII(?) ';
            $params[] = $filters->observacao.'%';
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 4).'
                   ORDER BY historicofuncionalid';
            $result = SDatabase::query(SAGU::prepare($sql, $params));
        }

        return $returnAsObject ? SAGU::resultToObject($result, $cols) : $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT username,
                       TO_CHAR(datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       ipaddress,
                       historicofuncionalid,
                       personId,
                       portaria,
                       TO_CHAR(data, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       assunto,
                       TO_CHAR(inicio, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       TO_CHAR(fim, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       observacao
                  FROM bashistoricofuncional
                 WHERE historicofuncionalid = ?';
        $result = SDatabase::query($sql, array($this->historicoFuncionalId));

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list( $this->userName, 
              $this->dateTime, 
              $this->ipAddress, 
              $this->historicoFuncionalId, 
              $this->personId,
              $this->portaria, 
              $this->data, 
              $this->assunto, 
              $this->inicio, 
              $this->fim, 
              $this->observacao ) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if ( strlen($this->historicoFuncionalId)  ==  0 )
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = 'INSERT INTO bashistoricofuncional 
                            ( personId,
                              portaria, 
                              data, 
                              assunto, 
                              inicio, 
                              fim, 
                              observacao )
                     VALUES ( ?,
                              ?, 
                              TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'), 
                              ?, 
                              TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'), 
                              TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'), 
                              ? )';
        $sqlPK = "SELECT nextval('bashistoricofuncional_historicofuncionalid_seq'::regclass)";
        $result = SDatabase::query($sqlPK);
        $historicoFuncionalId = $result[0][0];
        
        $params = array(
            $this->personId,
            $this->portaria, 
            $this->data, 
            $this->assunto, 
            $this->inicio, 
            $this->fim, 
            $this->observacao
        );
        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->historicoFuncionalId = $historicoFuncionalId;
        }

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE bashistoricofuncional
                   SET personId   = ?,
                       portaria   = ?,
                       data       = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       assunto    = ?,
                       inicio     = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       fim        = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       observacao = ?
                 WHERE historicofuncionalid = ?';
        
        $params = array(
            $this->personId,
            $this->portaria, 
            $this->data, 
            $this->assunto, 
            $this->inicio, 
            $this->fim, 
            $this->observacao, 
            $this->historicoFuncionalId
        );
        return SDatabase::execute($sql, $params);
    }

    public function delete()
    {
        if ( strlen($this->historicoFuncionalId) == 0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM bashistoricofuncional
                      WHERE historicofuncionalid = ?';
        $params = array($this->historicoFuncionalId);
        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->historicoFuncionalId = null;
        }

        return $result;
    }
}

?> 