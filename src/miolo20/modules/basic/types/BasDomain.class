 <?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Esta classe contém as alterações de banco de dados das pendências
 *
 * @author Jonas Guilherme Dahmer [jonas@solis.coop.br]
 *
 * \b Maintainers: \n
 * Jonas Guilherme Dahmer [jonas@solis.coop.br]
 *
 * @since
 * Class created on 21/08/2012
 *
 */
class BasDomain extends SType
{
    /**
     * @AttributeType character varying
     * 
     */
    public $domainId;
    /**
     * @AttributeType integer
     * 
     */
    public $sequence;
    /**
     * @AttributeType character varying
     * 
     */
    public $key;
    /**
     * @AttributeType character varying
     * 
     */
    public $abbreviated;
    /**
     * @AttributeType character varying
     * 
     */
    protected $label;
    
    public function __construct($domainId=null, $sequence=null)
    {
        if ( strlen($domainId)>0 &&  strlen($sequence)>0)
        {
            $this->domainId = $domainId;
            $this->sequence = $sequence;
            $this->populate();
        }
    }

    public static function search($filters)
    {
        $sql = 'SELECT domainId, sequence
                  FROM basdomain';
        
        $where = '';

        foreach ( $filters  as  $key => $value )
        {
            if ( (is_scalar($value))  &&  (strlen($value)  >  0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY domainId';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ( $i = 0;  $i  <  count($result);  $i++ )
        {
            $retVal[] = new BasDomain($result[$i][0], $result[$i][1]);
        }

        return $retVal;
    }

    public static function searchGrid($filters  =  null)
    {
        $sql = 'SELECT domainid,
                       sequence,
                       key,
                       abbreviated,
                       label
                  FROM basdomain';
        $params = array();

        if ( strlen($filters->domainId)  >  0 )
        {
            $where.=' AND UNACCENT(domainid) ILIKE UNACCENT(?) ';
            $params[] = $filters->domainId.'%';
        }

        if ( strlen($filters->sequence)  >  0 )
        {
            $where.=' AND sequence = ?';
            $params[] = $filters->sequence;
        }

        if ( strlen($filters->key)  >  0 )
        {
            $where.=' AND UNACCENT(key) ILIKE UNACCENT(?) ';
            $params[] = $filters->key.'%';
        }

        if ( strlen($filters->abbreviated)  >  0 )
        {
            $where.=' AND UNACCENT(abbreviated) ILIKE UNACCENT(?) ';
            $params[] = $filters->abbreviated.'%';
        }

        if ( strlen($filters->label)  >  0 )
        {
            $where.=' AND UNACCENT(label) ILIKE UNACCENT(?) ';
            $params[] = $filters->label.'%';
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 4).'
                   ORDER BY domainId';
            $result = SDatabase::query(SAGU::prepare($sql, $params));
        }

        return $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT domainid,
                       sequence,
                       key,
                       abbreviated,
                       label
                  FROM basdomain
                 WHERE domainid = ? and sequence = ?';
        $result = SDatabase::query($sql, array($this->domainId, $this->sequence));

        list($this->domainId, $this->sequence, $this->key, $this->abbreviated, $this->label) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $filters = new stdClass();
        $filters->domainId = $this->domainId;
        $filters->sequence = $this->sequence;
        
        if ( self::search($filters)  )
        {
            $retVal = $this->update();
        }
        else
        {
            $retVal = $this->insert();
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = 'INSERT INTO basdomain 
                            (domainid, sequence, key, abbreviated, label)
                     VALUES (?, ?, ?, ?, ?)';
        $params = array($this->domainId, $this->sequence, $this->key, $this->abbreviated, $this->label);
        $result = SDatabase::execute($sql, $params);
        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE basdomain
                   SET key = ?,
                       abbreviated = ?,
                       label = ?
                 WHERE domainid = ? and sequence = ?';
        $params = array($this->key, $this->abbreviated, $this->label, $this->domainId, $this->sequence );
        return SDatabase::execute($sql, $params);
    }

    public function delete()
    {
        if ( strlen($this->domainId)<0 && strlen($this->sequence)<0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM basdomain
                      WHERE domainid = ? and sequence = ?';
        $params = array($this->domainId, $this->sequence);
        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->domainId = null;
        }

        return $result;
    }
}


?> 
