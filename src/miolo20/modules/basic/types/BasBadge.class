<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @since
 * Class created on 14/03/2011
 */
/**
 * Types do cadastro de crachá
 */
class BasBadge extends SType
{
    /*
     * Table fields
     */
    
    /**
     * Código do crachá
     */
    private $badgeId;

    /**
     * Descrição do crachá
     */
    private $description;

    /**
     * Código do estado do crachá
     */
    private $badgeStatusId;

    /**
     * Construtor da classe
     *
     * @param (integer) $badgeId Chave primária da tabela
     */
    public function __construct($badgeId = null)
    {
        if ( !is_null($badgeId) )
        {
            $this->badgeId = $badgeId;
            $this->populate();
        }
    }

    /**
     * Data logic
     */
    public function __get($name)
    {
        return $this->$name;
    }

    public function __set($name, $value)
    {
        $this->$name = $value;
    }


    /*
     * Common methods
     */

    /**
     * Detecta se o salvar deve inserir um novo (no caso de chave primária não definida)
     * ou se deve apenas atualizar um registro já existente (no caso de chave primária já definida)
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function save()
    {
        // Se chave primária não está definida, assume que deva ser feito insert
        $filters = new stdClass();
        $filters->badgeId = $this->badgeId;
        if ( !(count(BasBadge::searchGrid($filters)) > 0) )
        {
            $retVal = $this->insert();
        }
        // Se chave primária definida, assume que deva ser feito update
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    /**
     * Exclui da base de dados o objeto atual
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function delete()
    {
        $sql = 'DELETE FROM basBadge
                      WHERE badgeId = ?';

        $args[] = $this->badgeId;

        $result = SDatabase::execute($sql, $args);
        
        if ( $result)
        {
            $this->badgeId = null;
        }

        return $result;
    }

    /**
     * Duplica o registro atual.
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function duplicate()
    {
        $badge = clone($this);
        $badge->badgeId = null;

        return $badge;
    }

    /**
     * Retorna uma lista de objetos do tipo desta classe com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public function search($filters)
    {
        $sql = 'SELECT A.badgeId,
                       A.description,
                       A.badgeStatusId,
                       B.description AS badgeStatusDescription
                  FROM basBadge A
            INNER JOIN basBadgeStatus B
                    ON (A.badgeStatusId = B.badgeStatusId)';

        $where = '';
        if ( $filters->badgeId )
        {
            $where .= ' AND A.badgeId = ?';
            $args[] = $filters->badgeId;
        }
        elseif ( $filters->description )
        {
            $where .= ' AND A.description ILIKE UNACCENT(?)';
            $args[] = $filters->description . '%';
        }

        if ( $filters->badgeStatusId )
        {
            $where .= ' AND B.badgeStatusId = ?';
            $args[] = $filters->badgeStatusId;
        }
        elseif ( $filters->badgeStatusDescription )
        {
            $where .= ' AND B.badgeStatusDescription ILIKE UNACCENT(?)';
            $args[] = $filters->badgeStatusDescription . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $result = SDatabase::query($sql, $args);
        $retVal = array();

        for ( $i=0; $i<count($result); $i++ )
        {
            $retVal[] = new BasBadge($result[$i][0]);
        }

        return $retVal;
    }

    /**
     * Retorna um array com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public function searchGrid($filters)
    {
        if ( !is_null($filters) )
        {
            $sql = 'SELECT A.badgeId,
                           A.description,
                           A.badgeStatusId,
                           B.description AS badgeStatusDescription
                      FROM basBadge A
                INNER JOIN basBadgeStatus B
                        ON (A.badgeStatusId = B.badgeStatusId)';

            $where = '';
            if ( $filters->badgeId )
            {
                $where .= ' AND A.badgeId ILIKE UNACCENT(?)';
                $args[] = $filters->badgeId . '%';

            }
            elseif ( $filters->description )
            {
                $where .= ' AND A.description ILIKE UNACCENT(?)';
                $args[] = $filters->description . '%';
            }

            if ( $filters->badgeStatusId )
            {
                $where .= ' AND B.badgeStatusId = ?';
                $args[] = $filters->badgeStatusId;
            }
            elseif ( $filters->badgeStatusDescription )
            {
                $where .= ' AND B.badgeStatusDescription ILIKE UNACCENT(?)';
                $args[] = $filters->badgeStatusDescription . '%';
            }

            if ( strlen($where) > 0 )
            {
                $sql .= ' WHERE ' . substr($where, 5);
            }

            $result = SDatabase::query($sql, $args);
        }

        return $result;
    }

    /*
     * Private methods
     */

    /**
     * Chamado pelo construtor, quando este recebe os dados de chave primária
     */
    private function populate()
    {
        $sql = 'SELECT badgeId,
                       description,
                       username,
                       TO_CHAR(datetime, \'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipaddress,
                       badgeStatusId
                  FROM basBadge
                 WHERE badgeId = ?';

        $args[] = $this->badgeId;

        $result = SDatabase::query($sql, $args);

        if ( strlen($result[0][0]) <= 0 )
        {
            $module = SAGU::getFileModule(__FILE__);
            throw new Exception(_M('Crachá @1 inexistente.', $module, $this->badgeId));
        }

        list ( $this->badgeId,
               $this->description,
               $this->userName,
               $this->dateTime,
               $this->ipAddress,
               $this->badgeStatusId ) = $result[0];
    }

    /**
     * Insere um novo registro com base nas informações da classe
     */
    private function insert()
    {
        $sql = 'INSERT INTO basBadge
                            ( badgeId,
                              description,
                              badgeStatusId )
                     VALUES ( ?,
                              ?,
                              ? )';

        $args[] = $this->badgeId;
        $args[] = $this->description;
        $args[] = $this->badgeStatusId;

        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $result = $this->badgeId;
        }
        
        return $result;
    }

    /**
     * Atualiza um registro existente com base nas informações da classe
     */
    private function update()
    {
        $sql = 'UPDATE basBadge
                   SET description = ?,
                       badgeStatusId = ?
                 WHERE badgeId = ?';

        $args[] = $this->description;
        $args[] = $this->badgeStatusId;
        $args[] = $this->badgeId;

        return SDatabase::execute($sql, $args);
    }
}
?>