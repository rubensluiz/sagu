<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 17/05/2011
 *
 */
class BasTaskConfigGroup extends SType
{
    /**
     * @AttributeType integer
     *
     */
    protected $taskConfigGroupId;
    /**
     * @AttributeType integer
     *
     */
    protected $taskConfigId;
    /**
     * @AttributeType integer
     *
     */
    protected $idGroup;

    /**
     * Campo virtual equivalente ao ->idGroup
     */
    protected $_idGroup;


    public function __construct($taskConfigGroupId = NULL)
    {
        if ( strlen($taskConfigGroupId) > 0 )
        {
            $this->taskConfigGroupId = $taskConfigGroupId;
            $this->populate();
        }
    }

    public static function search($filters)
    {
        $sql = 'SELECT taskconfiggroupid
                  FROM bas.taskconfiggroup';
        $where = '';

        foreach ( $filters as $key => $value )
        {
            if ( (is_scalar($value)) && (strlen($value) > 0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where) > 0 )
        {
            $sql.=' WHERE ' . substr($where, 5);
        }

        $sql.=' ORDER BY taskconfiggroupid ';
        $result = SDatabase::query($sql);
        $retVal = array( );

        for ( $i = 0; $i < count($result); $i++ )
        {
            $retVal[] = new BasTaskConfigGroup($result[$i][0]);
        }

        return $retVal;
    }

    public static function searchGrid($filters = null)
    {
        $sql = 'SELECT A.username,
                       TO_CHAR(A.datetime, \'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipaddress,
                       A.taskconfiggroupid,
                       A.taskconfigid,
                       A.idgroup
                  FROM bas.taskconfiggroup';
        $args = array( );

        if ( strlen($filters->userName) > 0 )
        {
            $where.=' AND UNACCENT(A.username) ILIKE UNACCENT(?) ';
            $args[] = $filters->userName . '%';
        }

        if ( strlen($filters->dateTime) > 0 )
        {
            $where.=' AND A.datetime = TO_TIMESTAMP(?, \'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\')';
            $args[] = $filters->dateTime;
        }

        if ( strlen($filters->ipAddress) > 0 )
        {
            $where.=' AND A.ipaddress = ?';
            $args[] = $filters->ipAddress;
        }

        if ( strlen($filters->taskConfigGroupId) > 0 )
        {
            $where.=' AND A.taskconfiggroupid = ?';
            $args[] = $filters->taskConfigGroupId;
        }

        if ( strlen($filters->taskConfigId) > 0 )
        {
            $where.=' AND A.taskconfigid = ?';
            $args[] = $filters->taskConfigId;
        }

        if ( strlen($filters->idGroup) > 0 )
        {
            $where.=' AND A.idgroup = ?';
            $args[] = $filters->idGroup;
        }

        if ( strlen($where) > 0 )
        {
            $sql.=' WHERE ' . substr($where, 4) . '
                   ORDER BY A.taskconfiggroupid';
            $result = SDatabase::query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT username,
                       TO_CHAR(datetime, \'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipaddress,
                       taskconfiggroupid,
                       taskconfigid,
                       idgroup
                  FROM bas.taskconfiggroup
                 WHERE taskconfiggroupid = ?';
        $result = SDatabase::query($sql, array( $this->taskConfigGroupId ));

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente. (@1)', $module, __CLASS__));
        }

        list($this->userName, 
                $this->dateTime,
                $this->ipAddress,
                $this->taskConfigGroupId,
                $this->taskConfigId,
                $this->idGroup) = $result[0];

        $this->_idGroup = $this->idGroup;
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if ( $this->removeData )
        {
            return;
        }

        if ( strlen($this->taskConfigGroupId) == 0 )
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    private function insert()
    {
        $taskConfigGroupId = current(current(SDatabase::query("SELECT nextval('bas.taskconfiggroup_taskconfiggroupid_seq'::regclass)")));

        $sql = 'INSERT INTO bas.taskconfiggroup
                            (taskconfiggroupid, taskconfigid, idgroup)
                     VALUES (?, ?, ?)';
                
        $args = array( $taskConfigGroupId, $this->taskConfigId, $this->idGroup );
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->taskConfigGroupId = $taskConfigGroupId;
        }

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE bas.taskconfiggroup
                   SET taskconfigid = ?,
                       idgroup = ?
                 WHERE taskconfiggroupid = ?';
        $args = array( $this->taskConfigId, $this->idGroup, $this->taskConfigGroupId );
        return SDatabase::execute($sql, $args);
    }

    public function delete()
    {
        if ( strlen($this->taskConfigGroupId) == 0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo. (@1)', $module, __CLASS__));
        }

        $sql = 'DELETE FROM bas.taskconfiggroup
                  WHERE taskconfiggroupid = ?';
        $args = array( $this->taskConfigGroupId );
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->taskConfigGroupId = null;
        }

        return $result;
    }
}

?>