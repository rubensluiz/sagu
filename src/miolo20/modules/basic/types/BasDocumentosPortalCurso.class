<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Luís Felipe Wermann [luis_felipe@solis.com.br]
 *
 * \b Maintainers: \n
 * Luís Felipe Wermann [luis_felipe@solis.com.br]
 *
 * @since
 * Class created on 21/11/2014
 *
 */

class BasDocumentosPortalCurso extends SType
{
    protected $_utilizaNovoPadrao = true;
    
    public $documentosPortalCursoId;
    public $documentoPortalId;
    public $idModule;
    public $ofertaCursoId;
    public $courseId;
    public $ofertaTurmaId;
    public $ofertaComponenteCurricularId;
    
    /**
     * Retorna vetor com todos os atrelamentos acadêmicos cadastrados para o documento.
     * 
     * @param int $documentoportalid
     * @return Array
     */
    public function obterAtrelamentosAcademic($documentoportalid)
    {
        $sql = "SELECT documentosPortalCursoId,
                       courseId,
                       getCourseName(courseId)
                  FROM basDocumentosPortalCurso
                 WHERE idModule = LOWER(?)
                   AND documentoPortalId = ?
              ORDER BY courseId";
        
        $args[] = SModules::MODULE_ACADEMIC;
        $args[] = $documentoportalid;
        
        $result = SDatabase::query($sql, $args);
        
        $return = array();
        foreach ( $result as $item )
        {
            $return[] = (object) array(
                'documentosPortalCursoId' => $item[0],
                'courseId' => $item[1],
                'courseIdDescription' => $item[2]
            );
        }
        
        return $return;
    }
    
    /**
     * Retorna atrelamentos do documetno do portal ao pedagógico.
     * 
     * @param int $documentoportalid
     * @return array
     */
    public function obterAtrelamentosPedagogico($documentoportalid)
    {
        $sql = " SELECT A.documentosPortalCursoId,
                        COALESCE(A.ofertaCursoId, C.ofertaCursoId),
                        B.descricao,
                        COALESCE(A.ofertaTurmaId, C.ofertaTurmaId),
                        C.descricao,
                        A.ofertaComponenteCurricularId,
                        F.nome
                   FROM basDocumentosPortalCurso A
              LEFT JOIN acpOfertaComponenteCurricular D
                     ON (A.ofertaComponenteCurricularId = D.ofertaComponenteCurricularId)
              LEFT JOIN acpComponenteCurricularMatriz E
                     ON (D.componenteCurricularMatrizId = E.componenteCurricularMatrizId)
              LEFT JOIN acpComponenteCurricular F
                     ON (F.componenteCurricularId = E.componenteCurricularId)
              LEFT JOIN acpOfertaTurma C
                     ON (COALESCE(A.ofertaTurmaId, D.ofertaTurmaId) = C.ofertaTurmaId)
              LEFT JOIN acpOfertaCurso B
                     ON (COALESCE(A.ofertaCursoId, C.ofertaCursoId) = B.ofertaCursoId)
                  WHERE idModule = LOWER(?)  
                    AND documentoPortalId = ?";
        
        $args[] = SModules::MODULE_PEDAGOGICO;
        $args[] = $documentoportalid;
        
        $result = SDatabase::query($sql, $args);
        
        $return = array();
        foreach ( $result as $item )
        {
            $return[] = (object) array(
                'documentosPortalCursoId' => $item[0],
                'ofertaCursoId' => $item[1],
                'ofertaCursoIdDescription' => $item[2],
                'ofertaTurmaId' => $item[3],
                'ofertaTurmaIdDescription' => $item[4],
                'ofertaComponenteCurricularId' => $item[5],
                'ofertaComponenteCurricularIdDescription' => $item[6]
            );
        }
        
        return $return;
    }
    
    public function validarAtrelamento()
    {
        //ACADÊMICO
        if ( $this->idModule == SModules::MODULE_ACADEMIC )
        {
            if ( $this->validarCursoAcademico($this->courseId) )
            {
                throw new Exception("Curso {$this->courseId} já está atrelado ao documento.");
            }
        }
        
        //PEDAGÓGICO
        if ( $this->idModule == SModules::MODULE_PEDAGOGICO )
        {
            //Oferta de curso
            if ( strlen($this->ofertaCursoId) > 0 )
            {
                if ( $this->validarOfertaDeCurso($this->ofertaCursoId) )
                {
                    throw new Exception("Esta oferta de curso já está atrelada ao documento.");
                }
            }//Oferta de turma
            elseif ( strlen($this->ofertaTurmaId) > 0 )
            {
                if ( $this->validarOfertaDeTurma($this->ofertaTurmaId) )
                {
                    throw new Exception("Esta oferta de turma já está atrelada ao documento.");
                }
                else
                {
                    $ofertaTurma = new AcpOfertaTurma($this->ofertaTurmaId);

                    if ( $this->validarOfertaDeCurso($ofertaTurma->ofertacursoid) )
                    {
                        throw new Exception("A oferta de curso {$ofertaTurma->ofertacurso->descricao} já está atrelada ao documento, e a oferta de turma {$ofertaTurma->descricao} é oriunda da mesma, portanto seria um cadastro redundante.");
                    }
                }
            }//Oferta de comp. curricular
            elseif ( strlen($this->ofertaComponenteCurricularId) > 0 )
            {
                if ( $this->validarOfertaDeComponenteCurricular($ofertaDeComponenteCurricularId) )
                {
                    throw new Exception("Esta oferta de componente curricular já está atrelada ao documento.");
                }
                else
                {
                    
                    $ofertaComp = new AcpOfertaComponenteCurricular($this->ofertaComponenteCurricularId);
                    
                    if ( $this->validarOfertaDeTurma($ofertaComp->ofertaTurmaId) )
                    {
                        throw new Exception("A oferta de turma {$ofertaComp->ofertaturma->descricao} já está atrelada ao documento, e a oferta de componente curricular {$ofertaComp->componentecurricularmatriz->componentecurricular->nome} é oriundo da mesma, portanto seria um cadastro redudante.");
                    }
                    elseif ( $this->validarOfertaDeCurso($ofertaComp->ofertaturma->ofertacursoid) )
                    {
                        throw new Exception("A oferta de curso {$ofertaComp->ofertaturma->ofertacurso->descricao} já está aterlada ao documento, e a oferta de componente curricular {$ofertaComp->componentecurricularmatriz->componentecurricular->nome} é oriunda da mesma, portanto seria um cadastro redundante.");
                    }
                }
            }
        }
    }
    
    public function validarOfertaDeCurso($ofertaCursoId)
    {
        $sql = "SELECT ofertaCursoId
                  FROM basDocumentosPortalCurso
                 WHERE ofertaCursoId = ?
                   AND documentoPortalId = ?
                   AND documentosPortalCursoId <> ? ";
        
        $return = SDatabase::query($sql, array($ofertaCursoId, $this->documentoPortalId, $this->documentosPortalCursoId));

        return (strlen($return[0][0]) > 0);
    }
    
    public function validarOfertaDeTurma($ofertaTurmaId)
    {
        $sql = " SELECT ofertaTurmaId
                   FROM basDocumentosPortalCurso
                  WHERE documentoPortalId = ?
                    AND ofertaTurmaId = ?
                    AND documentosPortalCursoId <> ? ";
        $return = SDatabase::query($sql, array($ofertaTurmaId, $this->documentoPortalId, $this->documentosPortalCursoId));

        return (strlen($return[0][0]) > 0);
    }

    public function validarCursoAcademico($courseId)
    {
        $sql = " SELECT courseId                       
                  FROM basDocumentosPortalCurso
                 WHERE courseId = ?
                   AND documentoPortalId = ?
                   AND documentosPortalCursoId <> ? ";

        $return = SDatabase::query($sql, array($courseId, $this->documentoPortalId, $this->documentosPortalCursoId));

        return ( strlen($return[0][0]) > 0 );
    }
    
    public function validarOfertaDeComponenteCurricular($ofertaComponenteCurricularId)
    {
        $sql = "SELECT ofertaComponenteCurricularId
                  FROM basDocumentosPortalCurso
                 WHERE ofertaComponenteCurricularId = ?
                   AND documentoPortalId = ?
                   AND documentosPortalCursoId <> ? ";
        
        $return = SDatabase::query($sql, array($ofertaComponenteCurricularId, $this->documentoPortalId, $this->documentosPortalCursoId));
        
        return ( strlen($return[0][0]) > 0 );
    }
}

?>