<?xml version="1.0" encoding="ISO-8859-1"?>

<basReport>
    <locate>reportid</locate>
    <item>
        <reportid>10001</reportid>
        <name>ENADE - exportar CONCLUINTES</name>
        <modules>{ACADEMIC}</modules>
        <enabled>t</enabled>
        <description><![CDATA[ Arquivo para importar concluintes no sistema Enade:
- estão com contrato ABERTO ou TRANCADO;
- CH aprovada + aproveitada maior ou igual a 80% da carga horária mínima do curso (cadastrado na versão)
<b>Obs.: Para gerar este relatório é necessário preencher o campo 'Horas requeridas', no cadastro de versão de curso, para que seja possível verificar o percentual de conclusão do aluno no curso.]]>
        </description>
        <sql><![CDATA[ SELECT coc.idcursoinep AS COD_INSTITUICAO,
               '' AS COD_CURSO,
               'C' AS COND_ESTUDANTE,
               lpad( regexp_replace(d.content, '[^0-9]', '', 'gi'),  11, '0') AS CPF,
               trim(p.name) AS NOME,
               substring(regexp_replace(drg.content, '[^0-9]', '', 'gi'), 1, 20) AS RG,
               '0' AS ESPECIAL_FISICO,
               '0' AS ESPECIAL_VISUAL,
               '0' AS ESPECIAL_AUDITIVO,
               substring(p.zipcode, 1, 8) AS CEP,
               substring(lt.name||' '||p.location, 1, 60) AS LOGRADOURO,
               p.number AS NUMERO,
               p.complement AS COMPLEMENTO,
               substring(p.neighborhood, 1, 30) AS BAIRRO,
               cy.stateid AS UF,
               substring(unaccent(cy.name), 1, 60) AS MUNICIPIO,
               '' AS TELEFONE,
               p.yearhs AS ANO_EM,
               TO_CHAR(getcontractactivationdate(c.contractid), 'YYYY') AS ANO_GRAD,
               '' AS CEP_POLO,
               CASE WHEN c.turnid in (1,2) THEN 1 ELSE 0 END AS MATUTINO,
               CASE WHEN c.turnid in (4,2) THEN 1 ELSE 0 END AS VESPERTINO,
               CASE WHEN c.turnid = 3 THEN 1 ELSE 0 END AS NOTURNO
          FROM acdcontract c
    INNER JOIN ONLY basphysicalpersonstudent p USING (personid)
    INNER JOIN acdcourseversion cv ON (cv.courseid = c.courseid AND cv.courseversion = c.courseversion)
    INNER JOIN acdcourseoccurrence coc ON (coc.courseid = c.courseid AND coc.courseversion = c.courseversion AND coc.turnid = c.turnid AND coc.unitid = c.unitid)
    INNER JOIN acdenroll e USING (contractid)
    INNER JOIN acdcurriculum cur USING (curriculumid)
    INNER JOIN acdcurricularcomponent cc ON (cc.curricularcomponentid = cur.curricularcomponentid AND cc.curricularcomponentversion = cur.curricularcomponentversion)
     LEFT JOIN acdgroup g ON (g.groupid = e.groupid)
     LEFT JOIN acdlearningperiod lp ON (lp.learningperiodid = g.learningperiodid)
     LEFT JOIN basdocument d ON (d.personid = c.personid AND d.documenttypeid = getparameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF')::int)
     LEFT JOIN basdocument drg ON (drg.personid = c.personid AND drg.documenttypeid = getparameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_RG')::int)
     LEFT JOIN baslocationtype lt ON (lt.locationtypeid = p.locationtypeid)
     LEFT JOIN bascity cy ON (cy.cityid = p.cityid)
     LEFT JOIN basstate uf ON (uf.stateid = cy.stateid)
     LEFT JOIN bascountry co ON (co.countryid = uf.countryid)
     LEFT JOIN basphysicalpersonkinship kpai ON (kpai.personid = p.personid AND kpai.kinshipid = getparameter('basic','FATHER_KINSHIP_ID')::int)
     LEFT JOIN ONLY basperson pai ON (pai.personid = kpai.relativepersonid)
     LEFT JOIN basphysicalpersonkinship kmae ON (kmae.personid = p.personid AND kmae.kinshipid = getparameter('basic','MOTHER_KINSHIP_ID')::int)
     LEFT JOIN ONLY basperson mae ON (mae.personid = kmae.relativepersonid)
         WHERE ((not iscontractclosed(c.contractid)) or getcontractstate(c.contractid) = getparameter('ACADEMIC', 'STATE_CONTRACT_ID_LOCKED')::int)
           AND c.courseid = ?
           AND e.statusid in (getparameter('ACADEMIC', 'ENROLL_STATUS_APPROVED')::int, getparameter('ACADEMIC', 'ENROLL_STATUS_EXCUSED')::int)
      group by COD_INSTITUICAO, COD_CURSO, COND_ESTUDANTE, CPF, NOME, RG, ESPECIAL_FISICO, ESPECIAL_VISUAL, ESPECIAL_AUDITIVO, CEP, LOGRADOURO, NUMERO, COMPLEMENTO, BAIRRO, UF, MUNICIPIO, TELEFONE, ANO_EM, ANO_GRAD, CEP_POLO, MATUTINO, VESPERTINO, NOTURNO,cv.hourrequired
        having (cv.hourrequired * 0.80) <= sum(cc.academicnumberhours)
      ORDER BY NOME ]]>
        </sql>
        <hasgrouping>t</hasgrouping>
        <basReportParameter>
            <locate>reportid</locate>
            <locate>parameternumber</locate>
            <item>
                <reportparameterid>10006</reportparameterid>
                <reportid>10001</reportid>
                <label>Curso</label>
                <parameternumber>1</parameternumber>
                <fieldtype>SELECTION</fieldtype>
                <fixedoptions>f</fixedoptions>
                <options>select distinct o.courseid, u.description || ' - ' || c.name from acdcourseoccurrence o left join acdcourse c using(courseid) left join basunit u using(unitid) order by 2 asc</options>
            </item>
        </basReportParameter>
    </item>
    <item>
        <reportid>10002</reportid>
        <name>ENADE - exportar INGRESSANTES</name>
        <modules>{ACADEMIC}</modules>
        <description><![CDATA[ Arquivo para importar concluintes no sistema Enade:
- estão com contrato ABERTO ou TRANCADO;
- CH aprovada + aproveitada menor ou igual a 25% da carga horária mínima do curso (cadastrado na versão) 
<b>Obs.: Para gerar este relatório é necessário preencher o campo 'Horas requeridas', no cadastro de versão de curso, para que seja possível verificar o percentual de conclusão do aluno no curso.]]>
        </description>
        <enabled>t</enabled>
        <sql><![CDATA[ SELECT coc.idcursoinep AS COD_INSTITUICAO,
           '' AS COD_CURSO,
           'I' AS COND_ESTUDANTE,
           lpad( regexp_replace(d.content, '[^0-9]', '', 'gi'),  11, '0') AS CPF,
           trim(p.name) AS NOME,
           substring(regexp_replace(drg.content, '[^0-9]', '', 'gi'), 1, 20) AS RG,
           '0' AS ESPECIAL_FISICO,
           '0' AS ESPECIAL_VISUAL,
           '0' AS ESPECIAL_AUDITIVO,
           substring(p.zipcode, 1, 8) AS CEP,
           substring(lt.name||' '||p.location, 1, 60) AS LOGRADOURO,
           p.number AS NUMERO,
           p.complement AS COMPLEMENTO,
           substring(p.neighborhood, 1, 30) AS BAIRRO,
           cy.stateid AS UF,
           substring(unaccent(cy.name), 1, 60) AS MUNICIPIO,
           '' AS TELEFONE,
           p.yearhs AS ANO_EM,
           '' AS ANO_GRAD,
           '' AS CEP_POLO,
           CASE WHEN c.turnid in (1,2) THEN 1 ELSE 0 END AS MATUTINO,
           CASE WHEN c.turnid in (4,2) THEN 1 ELSE 0 END AS VESPERTINO,
           CASE WHEN c.turnid = 3 THEN 1 ELSE 0 END AS NOTURNO
      FROM acdcontract c
INNER JOIN ONLY basphysicalpersonstudent p USING (personid)
INNER JOIN acdcourseversion cv ON (cv.courseid = c.courseid AND cv.courseversion = c.courseversion)
INNER JOIN acdcourseoccurrence coc ON (coc.courseid = c.courseid AND coc.courseversion = c.courseversion AND coc.turnid = c.turnid AND coc.unitid = c.unitid)
INNER JOIN acdenroll e USING (contractid)
INNER JOIN acdcurriculum cur USING (curriculumid)
INNER JOIN acdcurricularcomponent cc ON (cc.curricularcomponentid = cur.curricularcomponentid AND cc.curricularcomponentversion = cur.curricularcomponentversion)
 LEFT JOIN acdgroup g ON (g.groupid = e.groupid)
 LEFT JOIN acdlearningperiod lp ON (lp.learningperiodid = g.learningperiodid)
 LEFT JOIN basdocument d ON (d.personid = c.personid AND d.documenttypeid = getparameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF')::int)
 LEFT JOIN basdocument drg ON (drg.personid = c.personid AND drg.documenttypeid = getparameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_RG')::int)
 LEFT JOIN baslocationtype lt ON (lt.locationtypeid = p.locationtypeid)
 LEFT JOIN bascity cy ON (cy.cityid = p.cityid)
 LEFT JOIN basstate uf ON (uf.stateid = cy.stateid)
 LEFT JOIN bascountry co ON (co.countryid = uf.countryid)
 LEFT JOIN basphysicalpersonkinship kpai ON (kpai.personid = p.personid AND kpai.kinshipid = getparameter('basic','FATHER_KINSHIP_ID')::int)
 LEFT JOIN ONLY basperson pai ON (pai.personid = kpai.relativepersonid)
 LEFT JOIN basphysicalpersonkinship kmae ON (kmae.personid = p.personid AND kmae.kinshipid = getparameter('basic','MOTHER_KINSHIP_ID')::int)
 LEFT JOIN ONLY basperson mae ON (mae.personid = kmae.relativepersonid)
     WHERE (not iscontractclosed(c.contractid) or getcontractstate(c.contractid) = getparameter('ACADEMIC', 'STATE_CONTRACT_ID_LOCKED')::int)
       AND (select TO_CHAR(pm.statetime, 'YYYY')
              FROM acdmovementcontract pm
             WHERE pm.contractid = e.contractid
               AND pm.statecontractid = getparameter('BASIC', 'STATE_CONTRACT_ID_ENROLLED')::int
             ORDER BY pm.statetime asc
             LIMIT 1) = ? 
       AND c.courseid = ?
       AND e.statusid in (getparameter('ACADEMIC', 'ENROLL_STATUS_APPROVED')::int, getparameter('ACADEMIC', 'ENROLL_STATUS_EXCUSED')::int, getparameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED')::int) 
  group by COD_INSTITUICAO, COD_CURSO, COND_ESTUDANTE, CPF, NOME, RG, ESPECIAL_FISICO, ESPECIAL_VISUAL, ESPECIAL_AUDITIVO, CEP, LOGRADOURO, NUMERO, COMPLEMENTO, BAIRRO, UF, MUNICIPIO, TELEFONE, ANO_EM, ANO_GRAD, CEP_POLO, MATUTINO, VESPERTINO, NOTURNO,cv.hourrequired
  having (cv.hourrequired * 0.25) >= sum(CASE WHEN e.statusid = getparameter('ACADEMIC', 'ENROLL_STATUS_CANCELLED')::int THEN 0 ELSE cc.academicnumberhours END)
  ORDER BY NOME ]]>
        </sql>
        <hasgrouping>t</hasgrouping>
        <basReportParameter>
            <locate>reportid</locate>
            <locate>parameternumber</locate>
            <item>
                <reportparameterid>10007</reportparameterid>
                <reportid>10002</reportid>
                <label>Ano de entrada</label>
                <parameternumber>1</parameternumber>
                <fieldtype>TEXTFIELD</fieldtype>
                <size>5</size>
            </item>
            <item>
                <reportparameterid>10008</reportparameterid>
                <reportid>10002</reportid>
                <label>Curso</label>
                <parameternumber>2</parameternumber>
                <fieldtype>SELECTION</fieldtype>
                <fixedoptions>f</fixedoptions>
                <options>select distinct o.courseid, u.description || ' - ' || c.name from acdcourseoccurrence o left join acdcourse c using(courseid) left join basunit u using(unitid) order by 2 asc</options>
            </item>
        </basReportParameter>
    </item>
    <item>
        <reportid>10003</reportid>
        <name>ENADE - lista de alunos CONCLUINTES</name>
        <modules>{ACADEMIC}</modules>
        <description><![CDATA[ Lista alunos que:
- estão com contrato ABERTO;
- CH aprovada + matriculada no Periodo maior ou igual a 80% da carga horária mínima do curso (cadastrado na versão) 
<b>Obs.: Para gerar este relatório é necessário preencher o campo 'Horas requeridas', no cadastro de versão de curso, para que seja possível verificar o percentual de conclusão do aluno no curso.]]>
        </description>
        <enabled>t</enabled>
        <sql><![CDATA[ SELECT c.personid AS cod_pessoa,
           p.name AS nome,
           d.content AS cpf,
           drg.content AS rg,
           p.residentialphone AS telefone_residencial,
           p.workphone AS telefone_comercial,
           p.cellphone AS celular,
           lt.name AS tipo,
           p.location AS logradouro,
           p.number AS numero,
           p.complement AS complemento,
           p.neighborhood AS bairro,
           cy.name AS cidade,
           cy.stateid AS uf,
           co.name AS pais,
           p.zipcode AS cep,
           coalesce(pai.name, p.fathername) AS pai,
           coalesce(mae.name, p.mothername) AS mae,
           p.yearhs AS ano_em,
           c.contractid AS cod_contrato,
           c.courseversion AS versao_curso,
           cv.hourrequired AS horas_minimo_curso,
           cv.hourrequired * 0.80 AS horas_curso_80,
           sum(cc.academicnumberhours) AS horas_cursadas
      FROM acdcontract c
INNER JOIN ONLY basphysicalpersonstudent p USING (personid)
INNER JOIN acdcourseversion cv ON (cv.courseid = c.courseid AND cv.courseversion = c.courseversion)
INNER JOIN acdenroll e USING (contractid)
INNER JOIN acdcurriculum cur USING (curriculumid)
INNER JOIN acdcurricularcomponent cc ON (cc.curricularcomponentid = cur.curricularcomponentid AND cc.curricularcomponentversion = cur.curricularcomponentversion)
 LEFT JOIN acdgroup g ON (g.groupid = e.groupid)
 LEFT JOIN acdlearningperiod lp ON (lp.learningperiodid = g.learningperiodid)
 LEFT JOIN basdocument d ON (d.personid = c.personid AND d.documenttypeid = getparameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF')::int)
 LEFT JOIN basdocument drg ON (drg.personid = c.personid AND drg.documenttypeid = getparameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_RG')::int)
 LEFT JOIN baslocationtype lt ON (lt.locationtypeid = p.locationtypeid)
 LEFT JOIN bascity cy ON (cy.cityid = p.cityid)
 LEFT JOIN basstate uf ON (uf.stateid = cy.stateid)
 LEFT JOIN bascountry co ON (co.countryid = uf.countryid)
 LEFT JOIN basphysicalpersonkinship kpai ON (kpai.personid = p.personid AND kpai.kinshipid = getparameter('basic','FATHER_KINSHIP_ID')::int)
 LEFT JOIN ONLY basperson pai ON (pai.personid = kpai.relativepersonid)
 LEFT JOIN basphysicalpersonkinship kmae ON (kmae.personid = p.personid AND kmae.kinshipid = getparameter('basic','MOTHER_KINSHIP_ID')::int)
 LEFT JOIN ONLY basperson mae ON (mae.personid = kmae.relativepersonid)
     WHERE NOT iscontractclosed(c.contractid)
       AND c.courseid = ?
       AND c.courseversion = ?
       AND c.turnid = ?
       AND c.unitid = ? 
       AND (e.statusid in (getparameter('ACADEMIC', 'ENROLL_STATUS_APPROVED')::int, getparameter('ACADEMIC', 'ENROLL_STATUS_EXCUSED')::int) or (e.statusid = getparameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED')::int AND lp.periodid = ?))
  group by cod_pessoa, nome, cpf, rg, telefone_residencial, telefone_comercial, celular, cod_contrato, versao_curso, horas_minimo_curso, tipo, p.location, p.number, p.complement, p.neighborhood, cy.name, cy.stateid, co.name, p.zipcode, pai, mae, ano_em
  having (cv.hourrequired * 0.80) <= sum(cc.academicnumberhours)
  ORDER BY p.name ]]>
        </sql>
        <hasgrouping>t</hasgrouping>
        <basReportParameter>
            <locate>reportid</locate>
            <locate>parameternumber</locate>
            <item>
                <reportparameterid>10009</reportparameterid>
                <reportid>10003</reportid>
                <label>Curso</label>
                <parameternumber>1</parameternumber>
                <fieldtype>SELECTION</fieldtype>
                <fixedoptions>f</fixedoptions>
                <options>select distinct o.courseid, c.name from acdcourseoccurrence o left join acdcourse c using(courseid) order by 2 asc</options>
            </item>
            <item>
                <reportparameterid>-27</reportparameterid>
                <reportid>10003</reportid>
                <label>Versão do curso</label>
                <parameternumber>2</parameternumber>
                <fieldtype>TEXTFIELD</fieldtype>
                <size>30</size>
            </item>
            <item>
                <reportparameterid>-28</reportparameterid>
                <reportid>10003</reportid>
                <label>Turno</label>
                <parameternumber>3</parameternumber>
                <fieldtype>SELECTION</fieldtype>
                <fixedoptions>f</fixedoptions>
                <options>select turnid, description from basturn order by 2 asc</options>
            </item>
            <item>
                <reportparameterid>-29</reportparameterid>
                <reportid>10003</reportid>
                <label>Unidade</label>
                <parameternumber>4</parameternumber>
                <fieldtype>SELECTION</fieldtype>
                <fixedoptions>f</fixedoptions>
                <options>select unitid, description from basunit order by 2 asc</options>
            </item>
            <item>
                <reportparameterid>10010</reportparameterid>
                <reportid>10003</reportid>
                <label>Periodo</label>
                <parameternumber>5</parameternumber>
                <fieldtype>SELECTION</fieldtype>
                <fixedoptions>f</fixedoptions>
                <options>select periodid, periodid from acdperiod order by periodid desc</options>
            </item>
        </basReportParameter>
    </item>
    <item>
        <reportid>10004</reportid>
        <name>ENADE - lista de alunos INGRESSANTES</name>
        <modules>{ACADEMIC}</modules>
        <description><![CDATA[ Lista alunos que:
- estão com contrato ABERTO;
- CH aprovada + matriculada no Periodo menor ou igual a 25% da carga horária mínima do curso (cadastrado na versão)
- não tem registro "É dispensado" nem "Está presente" na "Avaliação dos alunos" tipo "ENADE". 
<b>Obs.: Para gerar este relatório é necessário preencher o campo 'Horas requeridas', no cadastro de versão de curso, para que seja possível verificar o percentual de conclusão do aluno no curso.]]>
        </description>
        <enabled>t</enabled>
        <sql><![CDATA[ SELECT c.personid AS cod_pessoa,
           p.name AS nome,
           d.content AS cpf,
           drg.content AS rg,
           p.residentialphone AS telefone_residencial,
           p.workphone AS telefone_comercial,
           p.cellphone AS celular,
           lt.name AS tipo,
           p.location AS logradouro,
           p.number AS numero,
           p.complement AS complemento,
           p.neighborhood AS bairro,
           cy.name AS cidade,
           cy.stateid AS uf,
           co.name AS pais,
           p.zipcode AS cep,
           coalesce(pai.name, p.fathername) AS pai,
           coalesce(mae.name, p.mothername) AS mae,
           p.yearhs AS ano_em,
           c.contractid AS cod_contrato,
           c.courseversion AS versao_curso,
           cv.hourrequired AS horas_minimo_curso,
           cv.hourrequired * 0.25 AS horas_curso_25,
           sum(cc.academicnumberhours) AS horas_cursadas
      FROM acdcontract c
INNER JOIN ONLY basphysicalpersonstudent p USING (personid)
INNER JOIN acdcourseversion cv ON (cv.courseid = c.courseid AND cv.courseversion = c.courseversion)
INNER JOIN acdenroll e USING (contractid)
INNER JOIN acdcurriculum cur USING (curriculumid)
INNER JOIN acdcurricularcomponent cc ON (cc.curricularcomponentid = cur.curricularcomponentid AND cc.curricularcomponentversion = cur.curricularcomponentversion)
 LEFT JOIN acdgroup g ON (g.groupid = e.groupid)
 LEFT JOIN acdlearningperiod lp ON (lp.learningperiodid = g.learningperiodid) 
 LEFT JOIN basdocument d ON (d.personid = c.personid AND d.documenttypeid = getparameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF')::int)
 LEFT JOIN basdocument drg ON (drg.personid = c.personid AND drg.documenttypeid = getparameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_RG')::int)
 LEFT JOIN acdtestendcoursecontract av ON (av.contractid = c.contractid AND testendcoursetypeid = 2)
 LEFT JOIN baslocationtype lt ON (lt.locationtypeid = p.locationtypeid)
 LEFT JOIN bascity cy ON (cy.cityid = p.cityid)
 LEFT JOIN basstate uf ON (uf.stateid = cy.stateid)
 LEFT JOIN bascountry co ON (co.countryid = uf.countryid)
 LEFT JOIN basphysicalpersonkinship kpai ON (kpai.personid = p.personid AND kpai.kinshipid = getparameter('basic','FATHER_KINSHIP_ID')::int)
 LEFT JOIN ONLY basperson pai ON (pai.personid = kpai.relativepersonid)
 LEFT JOIN basphysicalpersonkinship kmae ON (kmae.personid = p.personid AND kmae.kinshipid = getparameter('basic','MOTHER_KINSHIP_ID')::int)
 LEFT JOIN ONLY basperson mae ON (mae.personid = kmae.relativepersonid)
     WHERE NOT iscontractclosed(c.contractid)
       AND c.courseid = ?
       AND (e.statusid in (getparameter('ACADEMIC', 'ENROLL_STATUS_APPROVED')::int, getparameter('ACADEMIC', 'ENROLL_STATUS_EXCUSED')::int) or (e.statusid = getparameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED')::int AND lp.periodid = ?))
       AND (av.ispresent IS NULL  or NOT av.ispresent) AND (av.excused IS NULL  or NOT av.excused)
  group by cod_pessoa, nome, cpf, rg, telefone_residencial, telefone_comercial, celular, cod_contrato, versao_curso, horas_minimo_curso, tipo, p.location, p.number, p.complement, p.neighborhood, cy.name, cy.stateid, co.name, p.zipcode, pai, mae, ano_em
  having (cv.hourrequired * 0.25) >= sum(cc.academicnumberhours)
  ORDER BY p.name ]]>
        </sql>
        <hasgrouping>t</hasgrouping>
        <basReportParameter>
            <locate>reportid</locate>
            <locate>parameternumber</locate>
            <item>
                <reportparameterid>10011</reportparameterid>
                <reportid>10004</reportid>
                <label>Curso</label>
                <parameternumber>1</parameternumber>
                <fieldtype>SELECTION</fieldtype>
                <fixedoptions>f</fixedoptions>
                <options>select distinct o.courseid, u.description || ' - ' || c.name from acdcourseoccurrence o left join acdcourse c using(courseid) left join basunit u using(unitid) order by 2 asc</options>
            </item>
            <item>
                <reportparameterid>10012</reportparameterid>
                <reportid>10004</reportid>
                <label>Periodo</label>
                <parameternumber>2</parameternumber>
                <fieldtype>SELECTION</fieldtype>
                <fixedoptions>f</fixedoptions>
                <options>select periodid, periodid from acdperiod order by periodid desc</options>
            </item>
        </basReportParameter>
    </item>
    <item>
        <reportid>10005</reportid>
        <name>Média global dos alunos formandos</name>
        <modules>{ACADEMIC}</modules>
        <description><![CDATA[Relatório com a média global dos alunos formandos]]></description>
        <enabled>f</enabled>
        <sql><![CDATA[SELECT row_number() OVER () || 'º' AS ordem,
         ROUND(B.globalAverage::NUMERIC, getParameter('BASIC', 'REAL_ROUND_VALUE')::INT) AS media_global,
         B.personId AS codigo_aluno,
         B.contractId AS codigo_contrato,
         P.name AS nome_aluno,
         TO_CHAR(P.datebirth, getParameter('BASIC', 'MASK_DATE')) AS data_nascimento_aluno
      FROM acdEnroll A
INNER JOIN acdContract B
        ON (B.contractId = A.contractId)
INNER JOIN ONLY basphysicalperson P
        ON (B.personId = P.personId)
INNER JOIN acdMovementContract C
        ON (C.contractId = B.contractId
       AND C.stateContractId = getParameter('ACADEMIC', 'STATE_CONTRACT_ID_CONCLUSION_ALL_CURRICULAR_COMPONENT')::INT)
INNER JOIN acdlearningperiod L
        ON (C.learningperiodid = L.learningperiodid)
INNER JOIN acdclasspupil CP
        ON (CP.contractid = B.contractid)        
     WHERE A.statusId IN ( getParameter('ACADEMIC', 'ENROLL_STATUS_EXCUSED')::int, getParameter('ACADEMIC', 'ENROLL_STATUS_APPROVED')::int ) 
       AND L.periodId = ?
       AND B.courseId = ?
       AND CP.classId = ?
       GROUP BY B.globalAverage,B.personId,B.contractId,P.name,P.datebirth
       ORDER BY B.globalAverage DESC, P.datebirth ASC]]></sql>
        <hasgrouping>t</hasgrouping>
        <basReportParameter>
            <locate>reportid</locate>
            <locate>parameternumber</locate>
            <item>
                <reportparameterid>10013</reportparameterid>
                <reportid>10005</reportid>
                <label>Periodo</label>
                <parameternumber>1</parameternumber>
                <fieldtype>SELECTION</fieldtype>
                <fixedoptions>f</fixedoptions>
                <options>select periodid, periodid from acdperiod order by periodid desc</options>
            </item>
            <item>
                <reportparameterid>10014</reportparameterid>
                <reportid>10005</reportid>
                <label>Curso</label>
                <parameternumber>2</parameternumber>
                <fieldtype>SELECTION</fieldtype>
                <fixedoptions>f</fixedoptions>
                <options>SELECT DISTINCT courseid, name FROM acdcourse ORDER BY 2 ASC</options>
            </item>
            <item>
                <reportparameterid>10015</reportparameterid>
                <reportid>10005</reportid>
                <label>Turma</label>
                <parameternumber>3</parameternumber>
                <fieldtype>SELECTION</fieldtype>
                <fixedoptions>f</fixedoptions>
                <options>SELECT DISTINCT classid, name FROM acdclass ORDER BY 2 ASC</options>
            </item>
        </basReportParameter>
    </item>
    <item>
        <reportid>10006</reportid>
        <name> Listagem de inscritos realizadores ou não de provas e matrículas</name>
        <modules>{SELECTIVEPROCESS}</modules>
        <description><![CDATA[Listagem de inscritos realizadores ou não de provas e matrículas]]></description>
        <enabled>t</enabled>
        <sql><![CDATA[ 	SELECT getunitdescription(F.unitid) AS "UNIDADE@GROUP1" ,
	       getcoursename(F.courseid) AS "CURSO@GROUP2",
	       A.subscriptionid AS INSCRICAO,
	       A.personId AS COD_PESSOA, 
	       D.name AS PESSOA,
	       'ETAPA: ' || B.description AS "ETAPA@GROUP3", 
	       ( CASE WHEN ( SELECT COUNT(E.enrollId) > 0
		               FROM acdEnroll E
		         INNER JOIN acdContract CO
			         ON CO.contractId = E.contractId
			      WHERE dateenroll > A.subscriptiondate
			        AND CO.personId = A.personId )
		       THEN 
		           'SIM'
		       ELSE
		           'NÃO'
		END ) AS "MATRICULADOS@GROUP4",
		( CASE WHEN (SELECT COUNT(*) > 0
                               FROM spr.EvaluationPoints
                              WHERE subscriptionId = A.subscriptionId
                                AND (totalPoints = 0 OR totalPoints IS NULL)) IS TRUE
		       THEN
		           'NÃO'
		       ELSE
		           'SIM'
		  END ) AS "FEZ_AVALIACAO@GROUP5" 

		   FROM spr.subscription A
	     INNER JOIN spr.step B
		     ON B.selectiveProcessId = A.selectiveProcessId
	INNER JOIN ONLY basphysicalperson D
		     ON A.personid = D.personid
	     INNER JOIN spr.subscriptionoption E
	             ON A.subscriptionid = E.subscriptionid 
	            AND E.optionnumber = 1
	     INNER JOIN spr.optioncourse F
	             ON E.optionid = F.optionid
              LEFT JOIN spr.evaluation C
		     ON C.stepId = B.stepId
	        WHERE A.selectiveProcessId = ?
		  AND ( CASE ?::TEXT
		            WHEN 'A' THEN 
			        ( SELECT COUNT(*) = 0
                                    FROM spr.EvaluationPoints
                                   WHERE subscriptionId = A.subscriptionId
                                     AND (totalPoints = 0 OR totalPoints IS NULL) ) 
			    WHEN 'B' THEN
			        ( SELECT COUNT(*) > 0
                                    FROM spr.EvaluationPoints
                                   WHERE subscriptionId = A.subscriptionId
                                     AND (totalPoints = 0 OR totalPoints IS NULL) )
			    WHEN 'C' THEN
			        ( SELECT COUNT(E.enrollId) > 0
			            FROM acdEnroll E
		              INNER JOIN acdContract CO
			              ON CO.contractId = E.contractId
			           WHERE dateenroll > A.subscriptiondate
			             AND CO.personId = A.personId )
		            WHEN 'D' THEN
			        ( SELECT COUNT(E.enrollId) = 0
				    FROM acdEnroll E
			      INNER JOIN acdContract CO
				      ON CO.contractId = E.contractId
			           WHERE dateenroll > A.subscriptiondate
			             AND CO.personId = A.personId )
		            WHEN 'E' THEN
			        TRUE
		       END )
               GROUP BY 1, 2, 3, 4, 5, 6, 7, 8
	       ORDER BY 1, 2, 6, 7, 8, 5  ]]></sql>
        <hasgrouping>t</hasgrouping>
        <basReportParameter>
            <locate>reportid</locate>
            <locate>parameternumber</locate>
            <item>
                <reportparameterid>10016</reportparameterid>
                <reportid>10006</reportid>
                <label>Processo seletivo</label>
                <parameternumber>1</parameternumber>
                <fieldtype>SELECTION</fieldtype>
                <fixedoptions>f</fixedoptions>
                <options>SELECT DISTINCT selectiveprocessid, selectiveprocessid || ' - ' || description FROM spr.selectiveprocess ORDER BY 1 ASC</options>
            </item>
            <item>
                <reportparameterid>10017</reportparameterid>
                <reportid>10006</reportid>
                <label>Grupo de escolha</label>
                <parameternumber>2</parameternumber>
                <fieldtype>SELECTION</fieldtype>
                <fixedoptions>t</fixedoptions>
                <options>A => A - Inscritos que fizeram as provas,B => B - Inscritos que não fizeram as provas,C => C - Inscritos que fizeram as matrículas,D => D - Inscritos que não fizeram as matrículas,E => E - Todos</options>
            </item>
        </basReportParameter>   
    </item>
    <item>
        <reportid>10007</reportid>
        <name>Remessas pendente de retorno</name>
        <modules>{FINANCE}</modules>
        <enabled>t</enabled>
        <sql>SELECT A.invoiceid AS TITULO, 
            TO_CHAR(A.datageracao::date, 'DD/MM/YYYY') AS DATA_GERACAO_REMESSA,
            getpersonname(I.personid) AS PESSOA, 
            TO_CHAR(I.maturitydate, 'DD/MM/YYYY') AS DATA_VENCIMENTO, 
            I.balance AS VALOR
            FROM finhistoricoremessa A
            LEFT JOIN fininvoice I ON (A.invoiceid = I.invoiceid)
            WHERE A.datetime >= ?::date
            AND A.invoiceid NOT IN (SELECT B.invoiceid 
            FROM fin.bankmovement B
            WHERE B.invoiceid = A.invoiceid)
        </sql>
        <hasgrouping>f</hasgrouping>
        <basReportParameter>
            <locate>reportid</locate>
            <locate>parameternumber</locate>
            <item>
                <reportparameterid>10018</reportparameterid>
                <reportid>10007</reportid>
                <label>Data inicial</label>
                <parameternumber>1</parameternumber>
                <fieldtype>CALENDAR</fieldtype>
            </item>
        </basReportParameter>
    </item>
    <item>
        <reportid>10008</reportid>
        <name>Retornos não processados</name>
        <modules>{FINANCE}</modules>
        <enabled>t</enabled>
        <sql>SELECT DISTINCT A.invoiceid AS TITULO, 
            A.ournumber AS NOSSO_NUMERO, 
            getpersonname(I.personid) AS PESSOA, 
            TO_CHAR(I.maturitydate, 'DD/MM/YYYY') AS DATA_VENCIMENTO, 
            I.balance AS VALOR
            FROM fin.bankmovement A 
            LEFT JOIN finhistoricoremessa B ON (A.invoiceid = B.invoiceid) 
            LEFT JOIN fininvoice I ON (A.invoiceid = I.invoiceid)
            WHERE A.occurrence NOT IN ('06', '07', '15', '17') 
            AND A.invoiceid IS NOT NULL
        </sql>
        <hasgrouping>f</hasgrouping>
    </item>
    <item>
        <reportid>10010</reportid>
        <name>Previsão de receita</name>
        <modules>{FINANCE}</modules>
        <enabled>t</enabled>
        <sql>
            <![CDATA[SELECT COALESCE((SELECT H.description 
                                        FROM finEntry F 
                                   LEFT JOIN acdContract G 
                                       USING (contractid) 
                                   LEFT JOIN basUnit H 
                                       USING (unitid)  
                                       WHERE invoiceid = A.invoiceid 
                                         AND contractid IS NOT NULL 
                                    ORDER BY value DESC 
                                       LIMIT 1 ), 
                                     (SELECT H.description 
                                        FROM finEntry F 
                                   LEFT JOIN prctituloinscricao G 
                                       USING (invoiceid) 
                                   LEFT JOIN acpinscricao GG 
                                       USING (inscricaoid) 
                                   LEFT JOIN acpofertacurso OC 
                                       USING (ofertacursoid) 
                                   LEFT JOIN acpocorrenciacurso OCR 
                                       USING (ocorrenciacursoid) 
                                   LEFT JOIN basUnit H 
                                          ON H.unitid = OCR.unitid 
                                       WHERE invoiceid = A.invoiceid 
                                         AND inscricaoid IS NOT NULL 
                                    ORDER BY value DESC 
                                       LIMIT 1)
                                    ) AS "Unidade@GROUP1", 
                            COALESCE((SELECT H.name 
                                        FROM finEntry F 
                                   LEFT JOIN acdContract G 
                                       USING (contractid) 
                                   LEFT JOIN acdCourse H 
                                       USING (courseid) 
                                       WHERE invoiceid = A.invoiceid 
                                         AND contractid IS NOT NULL 
                                    ORDER BY value DESC 
                                       LIMIT 1 ), 
                                     (SELECT H.nome 
                                        FROM finEntry F 
                                   LEFT JOIN prctituloinscricao G 
                                       USING (invoiceid) 
                                   LEFT JOIN acpinscricao GG 
                                       USING (inscricaoid) 
                                   LEFT JOIN acpofertacurso OC 
                                       USING (ofertacursoid) 
                                   LEFT JOIN acpocorrenciacurso OCR 
                                       USING (ocorrenciacursoid) 
                                   LEFT JOIN acpcurso H 
                                       USING (cursoid) 
                                       WHERE invoiceid = A.invoiceid 
                                         AND inscricaoid IS NOT NULL 
                                    ORDER BY value DESC 
                                       LIMIT 1)
                                    ) AS "Curso@GROUP2", 
                            A.personid AS "Matrícula", 
                            E.name AS "Nome", 
                            A.invoiceid AS "Título", 
                            D.description AS "Origem", 
                            (SELECT G.periodId 
                               FROM finEntry F 
                          LEFT JOIN acdLearningPeriod G 
                              USING (learningperiodid) 
                              WHERE invoiceid = A.invoiceid 
                                AND learningperiodid IS NOT NULL 
                           ORDER BY value DESC 
                              LIMIT 1) AS "Período", 
                            A.maturitydate AS "Vencimento@GROUP4",   
                            ROUND((SELECT COALESCE(SUM(value), 0) 
                                     FROM finentry 
                                    WHERE invoiceid = A.invoiceid 
                                      AND (operationid = B.addcurricularcomponentoperation OR 
                                           operationid = B.libraryfineoperation OR 
                                           operationid = B.protocoloperation OR 
                                           operationid = B.enrolloperation OR 
                                           operationid = B.selectiveprocesstaxoperation OR 
                                           operationid = B.renewaloperation OR 
                                           operationid = C.value )), 2) AS "Previsto@SUM", 
                            ROUND((SELECT COALESCE(SUM(value), 0) 
                                     FROM finentry 
                                    WHERE invoiceid = A.invoiceid 
                                      AND operationid <> B.paymentoperation 
                                      AND operationid IN (SELECT operationid 
                                                            FROM finoperation 
                                                           WHERE operationtypeid = 'C')), 2) AS "Descontos@SUM",
                            ROUND((SELECT COALESCE(SUM(value), 0) 
                                     FROM finentry 
                                    WHERE invoiceid = A.invoiceid 
                                      AND operationid = B.paymentoperation ), 2) AS "Recebido@SUM"
                       FROM finreceivableinvoice A 
                 INNER JOIN finincomesource D 
                      USING (incomesourceid) 
                 INNER JOIN ONLY basperson E 
                      USING (personid), 
                            findefaultoperations B, 
                            (SELECT value::INTEGER 
                               FROM basconfig 
                              WHERE parameter = 'DEFAULT_OPERATIONID_MONTHLY_FEE') C 
                      WHERE A.iscanceled IS FALSE 
                        AND A.maturitydate BETWEEN TO_DATE(?, 'dd/mm/yyyy') AND TO_DATE(?, 'dd/mm/yyyy')
                        AND ROUND((SELECT COALESCE(SUM(value), 0) 
                                     FROM finentry 
                                    WHERE invoiceid = A.invoiceid 
                        AND (operationid = B.addcurricularcomponentoperation OR 
                             operationid = B.libraryfineoperation OR 
                             operationid = B.protocoloperation OR 
                             operationid = B.enrolloperation OR 
                             operationid = B.selectiveprocesstaxoperation OR 
                             operationid = B.renewaloperation OR 
                             operationid = C.value)), 2) > (ROUND((SELECT COALESCE(SUM(value), 0) 
                                                                     FROM finentry 
                                                                    WHERE invoiceid = A.invoiceid 
                                                                      AND operationid <> B.paymentoperation 
                                                                      AND operationid IN (SELECT operationid 
                                                                                            FROM finoperation 
                                                                                           WHERE operationtypeid = 'C')), 2) + ROUND((SELECT COALESCE(SUM(value), 0) 
                                                                                                                                        FROM finentry 
                                                                                                                                       WHERE invoiceid = A.invoiceid 
                                                                                                                                         AND operationid = B.paymentoperation), 2)) 
                        ORDER BY 6, 4]]>
        </sql>
        <hasgrouping>t</hasgrouping>
        <basReportParameter>
            <locate>reportid</locate>
            <locate>parameternumber</locate>
            <item>
                <reportparameterid>10021</reportparameterid>
                <reportid>10010</reportid>
                <label>Data de vencimento inicial</label>
                <parameternumber>1</parameternumber>
                <fieldtype>CALENDAR</fieldtype>
            </item>
            <item>
                <reportparameterid>10022</reportparameterid>
                <reportid>10010</reportid>
                <label>Data de vencimento final</label>
                <parameternumber>2</parameternumber>
                <fieldtype>CALENDAR</fieldtype>
            </item>
        </basReportParameter>
    </item>
    <item>
        <reportid>10012</reportid>
        <name>Relatório de cheques</name>
        <modules>{FINANCE}</modules>
        <enabled>t</enabled>
        <sql>
            <![CDATA[SELECT cod_cheque as "Cód. Cheque",
                            numero_cheque as "Nº. do Cheque",
                            data_do_cheque as "Data do Cheque/Vencimento@GROUP1",
                            data_de_movimentacao "Data de Movimentação",
                            agencia as "Agencia", 
                            eminente as "Emitente", 
                            valor_do_cheque as "Valor",
                            tipo_do_cheque as "Tipo",
                            status_do_cheque as "Status",
                            banco_do_cheque as  "Banco"
                     FROM cr_fin_cheques A
                    WHERE status_do_cheque IN ('EM ABERTO', 'DEVOLVIDO')
                    AND a.data_do_cheque::date BETWEEN datetodb(?) AND datetodb(?)
                    
                    ]]>
        </sql>
        <basReportParameter>
            <locate>reportid</locate>
            <locate>parameternumber</locate>
            <item>
                <reportparameterid>10025</reportparameterid>
                <reportid>10012</reportid>
                <label>Período de vencimento inicial</label>
                <parameternumber>1</parameternumber>
                <fieldtype>CALENDAR</fieldtype>
            </item>
            <item>
                <reportparameterid>10026</reportparameterid>
                <reportid>10012</reportid>
                <label>Período de vencimento final</label>
                <parameternumber>2</parameternumber>
                <fieldtype>CALENDAR</fieldtype>
            </item>
        </basReportParameter>
    </item>
    <item>
        <reportid>-2</reportid>
        <modules>{CONTASPAGAR}</modules>
        <name><![CDATA[Lançamentos por data]]></name>
        <sql>
            <![CDATA[SELECT * 
                       FROM (SELECT t.tituloid AS "Nº.", 
                                    f.name AS "Fornecedor", 
                                    (CASE WHEN c.tituloid IS NOT NULL 
                                          THEN 
                                                  co.description 
                                          ELSE 
                                              CASE WHEN b.tituloid IS NOT NULL 
                                                   THEN 
                                                           ba.description 
                                                    ELSE 
                                                           'MOVIMENTAÇÃO PENDENTE' 
                                              END 
                                    END) AS "Movimentação", 
                                    validaValorParaRelatorio(s.dadoscompra) AS "Dados da compra", 
                                    l.valor AS "Valor", 
                                    (CASE WHEN l.tipolancamento = 'D' 
                                          THEN 
                                              'Débito' 
                                          ELSE 
                                              'Crédito' 
                                    END) AS "Tipo", 
                                    TO_CHAR(l.datalancamento, getParameter('BASIC', 'MASK_DATE')) AS "Data de Lançamento@GROUP1", 
                                    t.numeroparcela AS "Nº. Parcela", 
                                    TO_CHAR(t.vencimento, getParameter('BASIC', 'MASK_DATE')) AS "Vencimento",
                                    s.costcenterid AS "Centro de Custo",
                                    ccc.description AS "Desc. CdC."
                               FROM captitulo t 
                         INNER JOIN caplancamento l 
                                 ON (t.tituloid = l.tituloid) 
                         INNER JOIN capsolicitacaoparcela sp 
                                 ON (sp.solicitacaoparcelaid = t.solicitacaoparcelaid) 
                         INNER JOIN capsolicitacao s 
                                 ON (s.solicitacaoid = sp.solicitacaoid) 
                          LEFT JOIN acccostcenter ccc
                                 ON (s.costcenterid = ccc.costcenterid) 
                          LEFT JOIN ONLY basperson f 
                                 ON (s.fornecedorid = f.personid) 
                          LEFT JOIN fincountermovement c 
                                 ON (t.tituloid = c.tituloid) 
                                AND (c.operation = l.tipoLancamento)
                                AND (c.movementdate::TIMESTAMP = l.datalancamento::TIMESTAMP)
                          LEFT JOIN finopencounter oc 
                                 ON (oc.opencounterid = c.opencounterid) 
                          LEFT JOIN fincounter co 
                                 ON (oc.counterid = co.counterid) 
                          LEFT JOIN fin.bankmovement b 
                                 ON (t.tituloid = b.tituloid) 
                          LEFT JOIN finbank ba 
                                 ON (b.bankid = ba.bankid) 
                              WHERE CASE WHEN ? IS NOT NULL AND ? IS NOT NULL 
                                         THEN 
                                             l.datalancamento::date BETWEEN TO_DATE(?, getParameter('BASIC', 'MASK_DATE'))::date AND TO_DATE(?, getParameter('BASIC', 'MASK_DATE'))::date 
                                         ELSE 
                                             l.tituloid < 0 
                                    END 
                           ORDER BY l.datalancamento, t.tituloid) AS X 
                      WHERE CASE WHEN ? IS NOT NULL 
                                 THEN 
                                     POSITION(UPPER(?) IN UPPER("Movimentação")) > 0 
                                 ELSE 
                                     "Movimentação" ILIKE '%' 
                            END]]>
        </sql>
        <parameterorder>1;2;1;2;3;3</parameterorder>
        <enabled>t</enabled>
        <hasgrouping>t</hasgrouping>
        <basReportParameter>
            <locate>reportid</locate>
            <locate>parameternumber</locate>
            <item>
                <reportparameterid>-4</reportparameterid>
                <reportid>-2</reportid>
                <label>Data de lançamento inicial</label>
                <parameternumber>1</parameternumber>
                <fieldtype>CALENDAR</fieldtype>
            </item>
            <item>
                <reportparameterid>-5</reportparameterid>
                <reportid>-2</reportid>
                <label>Data de lançamento final</label>
                <parameternumber>2</parameternumber>
                <fieldtype>CALENDAR</fieldtype>
            </item>
            <item>
                <reportparameterid>-6</reportparameterid>
                <reportid>-2</reportid>
                <label>Banco/Caixa</label>
                <parameternumber>3</parameternumber>
                <fieldtype>TEXTFIELD</fieldtype>
                <size>30</size>
                <hint><![CDATA[Digite aqui o nome do banco/caixa que deseja filtrar.]]></hint>
            </item>
        </basReportParameter>
    </item>
    <item>
        <reportid>-3</reportid>
        <modules>{CONTASPAGAR}</modules>
        <name><![CDATA[Títulos pela data de vencimento]]></name>
        <sql><![CDATA[SELECT * FROM (SELECT t.tituloid AS "Nº.", f.name AS "Fornecedor", s.dadoscompra AS "Dados da compra", t.valor AS "Valor", TO_CHAR(t.datetime, 'dd/mm/YYYY') AS "Data emissão", TO_CHAR(t.vencimento, 'dd/mm/YYYY') AS "Vencimento@GROUP1", t.numeroparcela AS "Nº. Parcela", t.valoraberto AS "Valor aberto@SUM" FROM captitulo t LEFT JOIN capsolicitacaoparcela sp ON (sp.solicitacaoparcelaid = t.solicitacaoparcelaid) LEFT JOIN capsolicitacao s ON (s.solicitacaoid = sp.solicitacaoid) LEFT JOIN ONLY basperson f ON (s.fornecedorid = f.personid) WHERE CASE WHEN ? IS NOT NULL AND ? IS NOT NULL THEN t.tituloaberto AND t.vencimento BETWEEN TO_DATE(?, 'dd/mm/YYYY')::date AND TO_DATE(?, 'dd/mm/YYYY')::date ELSE t.tituloaberto END ORDER BY f.name) AS X WHERE CASE WHEN ? IS NOT NULL THEN POSITION(UPPER(?) IN UPPER("Fornecedor")) > 0 ELSE "Fornecedor" ILIKE '%' END]]></sql>
        <enabled>t</enabled>
        <hasgrouping>t</hasgrouping>
        <parameterorder>1;2;1;2;3;3</parameterorder>
        <basReportParameter>
            <locate>reportid</locate>
            <locate>parameternumber</locate>
            <item>
                <reportparameterid>-7</reportparameterid>
                <reportid>-3</reportid>
                <label>Data de vencimento inicial</label>
                <parameternumber>1</parameternumber>
                <fieldtype>CALENDAR</fieldtype>
            </item>
            <item>
                <reportparameterid>-8</reportparameterid>
                <reportid>-3</reportid>
                <label>Data de vencimento final</label>
                <parameternumber>2</parameternumber>
                <fieldtype>CALENDAR</fieldtype>
            </item>
            <item>
                <reportparameterid>-9</reportparameterid>
                <reportid>-3</reportid>
                <label>Fornecedor</label>
                <parameternumber>3</parameternumber>
                <fieldtype>TEXTFIELD</fieldtype>
                <size>30</size>
                <hint><![CDATA[Digite aqui o nome do fornecedor que deseja filtrar.]]></hint>
            </item>
        </basReportParameter>
    </item>
    <item>
        <reportid>-4</reportid>
        <modules>{FINANCE}</modules>
        <name><![CDATA[Relatório de inadimplência]]></name>
        <sql><![CDATA[SELECT DISTINCT A.personid AS "MATRICULA", getpersonname(A.personid) AS "NOME", C.courseName AS "CURSO@GROUP1", A.invoiceid AS "TITULO", A.parcelnumber AS "PARCELA", TO_CHAR(A.referencematuritydate, 'dd/mm/yyyy') AS "VENCIMENTO", ROUND(balance(A.invoiceid), (SELECT value FROM basconfig WHERE parameter LIKE 'REAL_ROUND_VALUE')::int) + COALESCE((SELECT ROUND(sum(X.value), (SELECT value FROM basconfig WHERE parameter LIKE 'REAL_ROUND_VALUE')::int) FROM finentry X INNER JOIN finoperation Y USING (operationid) WHERE X.invoiceid = A.invoiceid AND Y.operationtypeid = 'C' AND NOT EXISTS (SELECT * FROM findefaultoperations XX WHERE XX.paymentoperation = X.operationid)), 0) AS "VALOR_NOMINAL@SUM",balanceWithPoliciesDated(A.invoiceId, now()::date) AS "VALOR_ATUALIZADO@SUM", COALESCE((SELECT ROUND(sum(X.value), (SELECT value FROM basconfig WHERE parameter LIKE 'REAL_ROUND_VALUE')::int) FROM finentry X INNER JOIN finoperation Y USING (operationid) WHERE X.invoiceid = A.invoiceid AND Y.operationtypeid = 'C' AND NOT EXISTS (SELECT * FROM findefaultoperations XX WHERE XX.paymentoperation = X.operationid)), 0) AS "DESCONTOS@SUM" FROM ONLY finreceivableinvoice A INNER JOIN finentry B USING (invoiceId) INNER JOIN view_curso_do_aluno C ON (A.personId = C.personId AND B.contractId = C.contractId) WHERE (A.maturitydate >= TO_DATE(?, GETPARAMETER('BASIC', 'MASK_DATE')) AND A.maturitydate <= TO_DATE(?, GETPARAMETER('BASIC', 'MASK_DATE'))) AND EXISTS (SELECT AAA.operationId FROM finOperation AAA WHERE AAA.operationId = B.operationId AND AAA.operationGroupId = (SELECT value FROM basconfig WHERE parameter = 'MONTHLY_FEE_OPERATION_GROUP_ID') ) AND A.referenceMaturityDate < now()::date AND balance(A.invoiceId) > 0 AND A.iscanceled IS FALSE ORDER BY 3, 2, 5, 4; ]]></sql>
        <enabled>t</enabled>
        <hasgrouping>t</hasgrouping>
        <basReportParameter>
            <locate>reportid</locate>
            <locate>parameternumber</locate>
            <item>
                <reportparameterid>-10</reportparameterid>
                <reportid>-4</reportid>
                <label>Data de vencimento incial</label>
                <parameternumber>1</parameternumber>
                <fieldtype>CALENDAR</fieldtype>
            </item>
            <item>
                <reportparameterid>-11</reportparameterid>
                <reportid>-4</reportid>
                <label>Data de vencimento final</label>
                <parameternumber>2</parameternumber>
                <fieldtype>CALENDAR</fieldtype>
            </item>
        </basReportParameter>
    </item>
    <item>
        <reportid>-5</reportid>
        <modules>{SELECTIVEPROCESS}</modules>
        <name><![CDATA[Relatório do questionário sócio econômico]]></name>
        <sql><![CDATA[SELECT question AS "QUESTÃO@GROUP1",
              option AS "OPÇÕES",
              (CASE ?::TEXT
                           WHEN 'A' THEN
                               ( quantResponderamMatriculados )
                           WHEN 'B' THEN
                               ( (quantResponderam - quantResponderamMatriculados) )
                           ELSE
                               quantResponderam
               END) AS "RESPONDENTES@SUM"
         FROM cr_spr_questionarioSocioEconomicoDoProcessoSeletivo
        WHERE selectiveProcessId = ?
          AND questionId::TEXT = ?
     ORDER BY questionId]]></sql>
        <enabled>t</enabled>
        <hasgrouping>t</hasgrouping>
        <parameterorder>3;1;2</parameterorder>
        <basReportParameter>
            <locate>reportid</locate>
            <locate>parameternumber</locate>
            <item>
                <reportparameterid>-12</reportparameterid>
                <reportid>-5</reportid>
                <label>Processo seletivo</label>
                <parameternumber>1</parameternumber>
                <fieldtype>SELECTION</fieldtype>
                <fixedoptions>f</fixedoptions>
                <options>SELECT selectiveProcessId,
                   description
              FROM spr.selectiveProcess
              ORDER BY description</options>
            </item>
            <item>
                <reportparameterid>-13</reportparameterid>
                <reportid>-5</reportid>
                <label>Questao</label>
                <parameternumber>2</parameternumber>
                <fieldtype>SELECTION</fieldtype>
                <fixedoptions>f</fixedoptions>
                <options>SELECT questionId,
                       description
                  FROM rshQuestion
              ORDER BY description</options>
            </item>
            <item>
                <reportparameterid>-74</reportparameterid>
                <reportid>-5</reportid>
                <label>Grupo de escolha</label>
                <parameternumber>3</parameternumber>
                <fieldtype>SELECTION</fieldtype>
                <fixedoptions>t</fixedoptions>
                <options>A => A - Inscritos que se matricularam,B => B - Inscritos que não se matricularam,C => C - Todos inscritos</options>
            </item>
        </basReportParameter>
    </item>
    <item>
        <reportid>-6</reportid>
        <modules>{FINANCE}</modules>
        <name><![CDATA[Movimentação de valores total por centro de custo]]></name>
        <description><![CDATA[Lista o total de valores por centro de custo no período, pela data_efetivacao_lancamento]]></description>
        <sql><![CDATA[select rptregimecaixa.cod_centrodecusto AS "Código do centro de custo", 
acccostcenter.description AS "Descrição do centro de custo", 
SUM(rptregimecaixa.valor_lancamento) AS "Valor total"   
FROM rptregimecaixa, acccostcenter 
WHERE data_efetivacao_lancamento >= ? and
data_efetivacao_lancamento <= ?
and acccostcenter.costcenterid = rptregimecaixa.cod_centrodecusto

group by rptregimecaixa.cod_centrodecusto,acccostcenter.description


]]></sql>
        <enabled>t</enabled>
        <hasgrouping>f</hasgrouping>
        <basReportParameter>
            <locate>reportid</locate>
            <locate>parameternumber</locate>
            <item>
                <reportparameterid>-14</reportparameterid>
                <reportid>-6</reportid>
                <label>Data de efetivação incial</label>
                <parameternumber>1</parameternumber>
                <fieldtype>CALENDAR</fieldtype>
            </item>
            <item>
                <reportparameterid>-15</reportparameterid>
                <reportid>-6</reportid>
                <label>Data de efetivação final</label>
                <parameternumber>2</parameternumber>
                <fieldtype>CALENDAR</fieldtype>
            </item>
        </basReportParameter>
    </item>
    <item>
        <reportid>-7</reportid>
        <modules>{FINANCE}</modules>
        <name><![CDATA[Listagem de lançamentos pelo regime de caixa]]></name>
        <description><![CDATA[Listagem dos lançamentos financeiros pelo regime de caixa]]></description>
        <sql><![CDATA[select rptregimecaixa.data_efetivacao_lancamento,

rptregimecaixa.cod_centrodecusto AS CodCC, 
acccostcenter.description AS DescricaoCC,
cod_tipo_operacao_lancamento AS Op,
cod_plano_de_contas,
origemlancamento AS Origem,
cod_titulo_ref,
rptregimecaixa.valor_lancamento


FROM rptregimecaixa, acccostcenter

WHERE rptregimecaixa.cod_centrodecusto = acccostcenter.costcenterid

and rptregimecaixa.data_efetivacao_lancamento > ? and
rptregimecaixa.data_efetivacao_lancamento < ? and
rptregimecaixa.cod_centrodecusto = ?


ORDER BY

rptregimecaixa.data_efetivacao_lancamento
]]></sql>
        <enabled>t</enabled>
        <hasgrouping>f</hasgrouping>
        <basReportParameter>
            <locate>reportid</locate>
            <locate>parameternumber</locate>
            <item>
                <reportparameterid>-16</reportparameterid>
                <reportid>-7</reportid>
                <label>Data de efetivação inicial</label>
                <parameternumber>1</parameternumber>
                <fieldtype>CALENDAR</fieldtype>
            </item>
            <item>
                <reportparameterid>-17</reportparameterid>
                <reportid>-7</reportid>
                <label>Data de efetivação final</label>
                <parameternumber>2</parameternumber>
                <fieldtype>CALENDAR</fieldtype>
            </item>
            <item>
                <reportparameterid>-18</reportparameterid>
                <reportid>-7</reportid>
                <label>Código do centro de custo</label>
                <parameternumber>3</parameternumber>
                <fieldtype>TEXTFIELD</fieldtype>
                <size>38</size>
            </item>
        </basReportParameter>
    </item>
    <item>
        <reportid>-8</reportid>
        <modules>{FINANCE}</modules>
        <name><![CDATA[Balancete (receitas/despesas)]]></name>
        <description><![CDATA[Balancete (receitas/despesas)]]></description>
        <sql><![CDATA[select tabela.accountschemeid AS CodigoConta, aa.description AS Descricao,  sum(valor_dia) AS Valor 


 FROM 
       (
            select accaccountscheme.accountschemeid,
                   rptregimecaixa.data_efetivacao_lancamento,
                   ( select 
                     sum(CASE WHEN rr.cod_tipo_operacao_lancamento = ? then rr.valor_lancamento * -1 else rr.valor_lancamento end ) AS Valor
                       FROM rptregimecaixa rr
                      WHERE rr.cod_plano_de_contas like accaccountscheme.accountschemeid || ? and
                            rr.data_efetivacao_lancamento = rptregimecaixa.data_efetivacao_lancamento
                   ) AS Valor_dia

FROM rptregimecaixa,accaccountscheme

WHERE data_efetivacao_lancamento >= ? and
data_efetivacao_lancamento <= ?
 group by accaccountscheme.accountschemeid, rptregimecaixa.data_efetivacao_lancamento


ORDER BY accaccountscheme.accountschemeid)
 AS tabela, accaccountscheme aa

WHERE aa.accountschemeid  = tabela.accountschemeid 

group by tabela.accountschemeid , aa.description

having sum(valor_dia) != 0

ORDER BY tabela.accountschemeid 
]]></sql>
        <enabled>t</enabled>
        <hasgrouping>f</hasgrouping>
        <basReportParameter>
            <locate>reportid</locate>
            <locate>parameternumber</locate>
            <item>
                <reportparameterid>-19</reportparameterid>
                <reportid>-8</reportid>
                <label>Débito</label>
                <parameternumber>1</parameternumber>
                <fieldtype>HIDDEN</fieldtype>
                <defaultvalue>D</defaultvalue>
            </item>
            <item>
                <reportparameterid>-20</reportparameterid>
                <reportid>-8</reportid>
                <label>Percentual</label>
                <parameternumber>2</parameternumber>
                <fieldtype>HIDDEN</fieldtype>
                <defaultvalue>%</defaultvalue>
            </item>
            <item>
                <reportparameterid>-21</reportparameterid>
                <reportid>-8</reportid>
                <label>Data de efetivação inicial</label>
                <parameternumber>3</parameternumber>
                <fieldtype>CALENDAR</fieldtype>
            </item>
            <item>
                <reportparameterid>-22</reportparameterid>
                <reportid>-8</reportid>
                <label>Data de efetivação final</label>
                <parameternumber>4</parameternumber>
                <fieldtype>CALENDAR</fieldtype>
            </item>
        </basReportParameter>
    </item>
    <item>
        <reportid>-9</reportid>
        <modules>{RESIDENCY}</modules>
        <name><![CDATA[Relatório de residentes - RESUMIDO]]></name>
        <sql><![CDATA[SELECT DISTINCT codigo_pessoa,
		codigo_residente,
		nome_pessoa AS nome,
		nucleo_profissional || '/' || enfase AS profissao_e_enfase,
		NULL AS registro_profissional,
		status_ultima_ocorrencia_contrato AS situacao,
		matricula,
		email
	   FROM cr_res_residente
	  WHERE (CASE WHEN ? IS NULL THEN TRUE ELSE codigo_nucleo_profissional::TEXT = ? END)
	    AND (CASE WHEN ? IS NULL THEN TRUE ELSE codigo_enfase::TEXT = ? END)
	    AND (CASE WHEN ? IS NULL THEN TRUE ELSE periodo_do_residente::TEXT = ? END)
	    AND (CASE ?
		      WHEN 'I'
		      THEN
			   (NOT (NOW()::DATE BETWEEN data_inicio_residencia::DATE AND data_fim_previsto_residencia::DATE)
			     OR status_ultima_ocorrencia_contrato_bloqueia_residencia IS TRUE
			     OR status_ultima_ocorrencia_contrato_conclui_residencia IS TRUE)
		      WHEN 'A'
		      THEN
			   (NOW()::DATE BETWEEN data_inicio_residencia::DATE AND data_fim_previsto_residencia::DATE
			    AND status_ultima_ocorrencia_contrato_bloqueia_residencia IS FALSE
			    AND status_ultima_ocorrencia_contrato_conclui_residencia IS FALSE)
		      ELSE
		           TRUE
                 END)
       ORDER BY nome_pessoa]]>
        </sql>
        <parameterorder>1;1;2;2;3;3;4</parameterorder>
        <enabled>t</enabled>
        <hasgrouping>f</hasgrouping>
        <basReportParameter>
            <locate>reportid</locate>
            <locate>parameternumber</locate>
            <item>
                <reportparameterid>-23</reportparameterid>
                <reportid>-9</reportid>
                <label>Núcleo profissional</label>
                <parameternumber>1</parameternumber>
                <fieldtype>SELECTION</fieldtype>
                <fixedoptions>f</fixedoptions>
                <options>SELECT nucleoProfissionalId,
                               descricao
                          FROM res.nucleoProfissional
                      ORDER BY descricao</options>
            </item>
            <item>
                <reportparameterid>-24</reportparameterid>
                <reportid>-9</reportid>
                <label>Ênfase</label>
                <parameternumber>2</parameternumber>
                <fieldtype>SELECTION</fieldtype>
                <fixedoptions>f</fixedoptions>
                <options>SELECT enfaseid,
                               descricao,
                               componenteId
                          FROM res.enfase
                      ORDER BY descricao</options>
            </item>
            <item>
                <reportparameterid>-25</reportparameterid>
                <reportid>-9</reportid>
                <label>Período de residência</label>
                <parameternumber>3</parameternumber>
                <fieldtype>SELECTION</fieldtype>
                <fixedoptions>t</fixedoptions>
                <options>P1 => Primeiro ano,P2 => Segundo ano,P3 => Terceiro ano</options>
            </item>
            <item>
                <reportparameterid>-26</reportparameterid>
                <reportid>-9</reportid>
                <label>Residentes</label>
                <parameternumber>4</parameternumber>
                <fieldtype>RADIOGROUP</fieldtype>
                <fixedoptions>t</fixedoptions>
                <options>Ativos => A,Inativos => I,Todos => T</options>
                <defaultvalue>T</defaultvalue>
            </item>
        </basReportParameter>
    </item>
    <item>
        <reportid>-10</reportid>
        <modules>{ACCOUNTANCY}</modules>
        <name><![CDATA[Lançamentos Contábeis]]></name>
        <description><![CDATA[Listagem dos lançamentos contábeis]]></description>
        <sql><![CDATA[select * from cr_fin_lancamentos_contasreceber(?, ?, 'CO')]]></sql>
        <enabled>t</enabled>
        <hasgrouping>f</hasgrouping>
        <basReportParameter>
            <locate>reportid</locate>
            <locate>parameternumber</locate>
            <item>
                <reportparameterid>-30</reportparameterid>
                <reportid>-10</reportid>
                <label>Data inicial do lançamento</label>
                <parameternumber>1</parameternumber>
                <fieldtype>CALENDAR</fieldtype>
            </item>
            <item>
                <reportparameterid>-31</reportparameterid>
                <reportid>-10</reportid>
                <label>Data final do lançamento</label>
                <parameternumber>2</parameternumber>
                <fieldtype>CALENDAR</fieldtype>
            </item>
        </basReportParameter>
    </item>
    <item>
        <reportid>-11</reportid>
        <modules>{FINANCE}</modules>
        <name><![CDATA[Registros para Informe de Rendimentos (IR)]]></name>
        <description><![CDATA[Este relatório lista os recebimentos dos alunos, num determinado período, para entregar aos alunos, para fins de declaração de Imposto de Renda. Cada linha deste relatório pode virar um documento para cada aluno, a ser entregue pela instituição.]]></description>
        <sql><![CDATA[SELECT data_caixa, data_contabil_lancamento, codigo_aluno, nome_aluno, titulo, valor_lancamento FROM cr_fin_lancamentos_contasreceber_decaixa(?, ? ) ORDER BY data_caixa ASC]]></sql>
        <enabled>t</enabled>
        <hasgrouping>f</hasgrouping>
        <basReportParameter>
            <locate>reportid</locate>
            <locate>parameternumber</locate>
            <item>
                <reportparameterid>-32</reportparameterid>
                <reportid>-11</reportid>
                <label>Data inicial do lançamento</label>
                <parameternumber>1</parameternumber>
                <fieldtype>CALENDAR</fieldtype>
            </item>
            <item>
                <reportparameterid>-33</reportparameterid>
                <reportid>-11</reportid>
                <label>Data final do lançamento</label>
                <parameternumber>2</parameternumber>
                <fieldtype>CALENDAR</fieldtype>
            </item>
        </basReportParameter>
    </item>
    <item>
        <reportid>-12</reportid>
        <modules>{RESIDENCY}</modules>
        <name><![CDATA[Relatório de residentes - COMPLETO]]></name>
        <sql><![CDATA[SELECT DISTINCT codigo_pessoa,
		codigo_residente,
		nome_pessoa AS nome,
		profissao,
		NULL AS registro_profissional,
		status_ultima_ocorrencia_contrato AS situacao,
		matricula,
		email,
		telefone,
		rg,
		cpf,
		inss,
		NULL AS ag,
		NULL AS cc,
		nucleo_profissional || '/' || enfase AS profissao_e_enfase,
		data_inicio_residencia AS data_inicial,
		data_fim_previsto_residencia AS data_termino
	   FROM cr_res_residente
	  WHERE (CASE WHEN ? IS NULL THEN TRUE ELSE codigo_nucleo_profissional::TEXT = ? END)
	    AND (CASE WHEN ? IS NULL THEN TRUE ELSE codigo_enfase::TEXT = ? END)
	    AND (CASE WHEN ? IS NULL THEN TRUE ELSE periodo_do_residente::TEXT = ? END)
	    AND (CASE ?
		      WHEN 'I'
		      THEN
			   (NOT (NOW()::DATE BETWEEN data_inicio_residencia::DATE AND data_fim_previsto_residencia::DATE)
			     OR status_ultima_ocorrencia_contrato_bloqueia_residencia IS TRUE
			     OR status_ultima_ocorrencia_contrato_conclui_residencia IS TRUE)
		      WHEN 'A'
		      THEN
			   (NOW()::DATE BETWEEN data_inicio_residencia::DATE AND data_fim_previsto_residencia::DATE
			    AND status_ultima_ocorrencia_contrato_bloqueia_residencia IS FALSE
			    AND status_ultima_ocorrencia_contrato_conclui_residencia IS FALSE)
                      ELSE
                           TRUE
	         END)
       ORDER BY nome_pessoa]]>
        </sql>
        <parameterorder>1;1;2;2;3;3;4</parameterorder>
        <enabled>t</enabled>
        <hasgrouping>f</hasgrouping>
        <basReportParameter>
            <locate>reportid</locate>
            <locate>parameternumber</locate>
            <item>
                <reportparameterid>-34</reportparameterid>
                <reportid>-12</reportid>
                <label>Núcleo profissional</label>
                <parameternumber>1</parameternumber>
                <fieldtype>SELECTION</fieldtype>
                <fixedoptions>f</fixedoptions>
                <options>SELECT nucleoProfissionalId,
                               descricao
                          FROM res.nucleoProfissional
                      ORDER BY descricao</options>
            </item>
            <item>
                <reportparameterid>-35</reportparameterid>
                <reportid>-12</reportid>
                <label>Ênfase</label>
                <parameternumber>2</parameternumber>
                <fieldtype>SELECTION</fieldtype>
                <fixedoptions>f</fixedoptions>
                <options>SELECT enfaseid,
                               descricao,
                               componenteId
                          FROM res.enfase
                      ORDER BY descricao</options>
            </item>
            <item>
                <reportparameterid>-36</reportparameterid>
                <reportid>-12</reportid>
                <label>Período de residência</label>
                <parameternumber>3</parameternumber>
                <fieldtype>SELECTION</fieldtype>
                <fixedoptions>t</fixedoptions>
                <options>P1 => Primeiro ano,P2 => Segundo ano,P3 => Terceiro ano</options>
            </item>
            <item>
                <reportparameterid>-37</reportparameterid>
                <reportid>-12</reportid>
                <label>Residentes</label>
                <parameternumber>4</parameternumber>
                <fieldtype>RADIOGROUP</fieldtype>
                <fixedoptions>t</fixedoptions>
                <options>Ativos => A,Inativos => I,Todos => T</options>
                <defaultvalue>T</defaultvalue>
            </item>
        </basReportParameter>
    </item>
    <item>
        <reportid>-13</reportid>
        <modules>{RESIDENCY}</modules>
        <name><![CDATA[Relatório de residentes - VAGAS]]></name>
        <sql><![CDATA[SELECT Z.enfase,
	 COALESCE(SUM(Z.P1), 0)::INT AS P1,
	 COALESCE(SUM(Z.P2), 0)::INT AS P2,
	 COALESCE(SUM(Z.P3), 0)::INT AS P3,
	 (COALESCE(SUM(Z.P1), 0) + COALESCE(SUM(Z.P2), 0) + COALESCE(SUM(Z.P3), 0))::INT AS total_de_residentes
    FROM (SELECT X.enfase,
	         (CASE WHEN X.periodo_do_residente = 'P1' THEN X.quantidade_periodo ELSE 0 END) AS P1,
		 (CASE WHEN X.periodo_do_residente = 'P2' THEN X.quantidade_periodo ELSE 0 END) AS P2,
		 (CASE WHEN X.periodo_do_residente = 'P3' THEN X.quantidade_periodo ELSE 0 END) AS P3
	   FROM (SELECT E.descricao AS enfase,
		        R.periodo_do_residente,
		        COUNT(R.periodo_do_residente) AS quantidade_periodo
		   FROM res.enfase E
	      LEFT JOIN (SELECT codigo_residente,
			        enfase,
			        codigo_enfase,
			        periodo_do_residente
			   FROM cr_res_residente
			  WHERE (CASE WHEN ? IS NULL THEN TRUE ELSE codigo_nucleo_profissional::TEXT = ? END)
			    AND (CASE ?
				      WHEN 'I'
				      THEN
				           (NOT (NOW()::DATE BETWEEN data_inicio_residencia::DATE AND data_fim_previsto_residencia::DATE)
					     OR status_ultima_ocorrencia_contrato_bloqueia_residencia IS TRUE
					     OR status_ultima_ocorrencia_contrato_conclui_residencia IS TRUE)
				      WHEN 'A'
				      THEN
				           (NOW()::DATE BETWEEN data_inicio_residencia::DATE AND data_fim_previsto_residencia::DATE
				            AND status_ultima_ocorrencia_contrato_bloqueia_residencia IS FALSE
				            AND status_ultima_ocorrencia_contrato_conclui_residencia IS FALSE)
				  ELSE
				      TRUE
			      END)
		       GROUP BY codigo_residente,
			        enfase,
			        codigo_enfase,
			        periodo_do_residente
		       ORDER BY codigo_residente) R
		     ON R.codigo_enfase = E.enfaseId
		  WHERE (CASE WHEN ? IS NULL THEN TRUE ELSE E.enfaseId::TEXT = ? END)
		    AND (CASE WHEN ? IS NULL THEN TRUE ELSE R.periodo_do_residente::TEXT = ? END)  
	       GROUP BY E.descricao,
		        R.periodo_do_residente) X) Z
GROUP BY Z.enfase
ORDER BY Z.enfase]]>
        </sql>
        <parameterorder>1;1;4;2;2;3;3</parameterorder>
        <enabled>t</enabled>
        <hasgrouping>f</hasgrouping>
        <basReportParameter>
            <locate>reportid</locate>
            <locate>parameternumber</locate>
            <item>
                <reportparameterid>-38</reportparameterid>
                <reportid>-13</reportid>
                <label>Núcleo profissional</label>
                <parameternumber>1</parameternumber>
                <fieldtype>SELECTION</fieldtype>
                <fixedoptions>f</fixedoptions>
                <options>SELECT nucleoProfissionalId,
                               descricao
                          FROM res.nucleoProfissional
                      ORDER BY descricao</options>
            </item>
            <item>
                <reportparameterid>-39</reportparameterid>
                <reportid>-13</reportid>
                <label>Ênfase</label>
                <parameternumber>2</parameternumber>
                <fieldtype>SELECTION</fieldtype>
                <fixedoptions>f</fixedoptions>
                <options>SELECT enfaseid,
                               descricao,
                               componenteId
                          FROM res.enfase
                      ORDER BY descricao</options>
            </item>
            <item>
                <reportparameterid>-50</reportparameterid>
                <reportid>-13</reportid>
                <label>Período de residência</label>
                <parameternumber>3</parameternumber>
                <fieldtype>SELECTION</fieldtype>
                <fixedoptions>t</fixedoptions>
                <options>P1 => Primeiro ano,P2 => Segundo ano,P3 => Terceiro ano</options>
            </item>
            <item>
                <reportparameterid>-51</reportparameterid>
                <reportid>-13</reportid>
                <label>Residentes</label>
                <parameternumber>4</parameternumber>
                <fieldtype>RADIOGROUP</fieldtype>
                <fixedoptions>t</fixedoptions>
                <options>Ativos => A,Inativos => I,Todos => T</options>
                <defaultvalue>T</defaultvalue>
            </item>
        </basReportParameter>
    </item>
    <item>
        <reportid>-14</reportid>
        <modules>{FINANCE}</modules>
        <name><![CDATA[Negociações ou antecipações vencidas]]></name>
        <sql><![CDATA[
                SELECT codigopessoa,
 pessoanome,
 valor,
 recebido,
 areceber,
 titulo,
 vencimento,
 link('module=finance&action=main:diverseConsultation&personId=$#', true, 'Consultas diversas', codigopessoa::text)  as consultas_diversas

 FROM cr_fin_titulo
 WHERE titulo_de_negociacao = 't' 
   AND areceber > 0
   AND to_date(vencimento,'dd/mm/YYYY') < date(now())
ORDER BY vencimento ASC, pessoanome ASC, titulo ASC        
        ]]>
        </sql>
        <description><![CDATA[Lista títulos gerados por negociações ou antecipações, que já venceram e não foram pagos. Permite assim que essas negociaçõe seja canceladas, se achar adequado (via consultas diversas)]]></description>
        <parameterorder></parameterorder>
        <enabled>t</enabled>
        <hasgrouping>f</hasgrouping>
    </item>
    
    <item>
        <reportid>-15</reportid>
        <modules>{FINANCE}</modules>
        <name><![CDATA[Situação da inadimplência]]></name>
        <sql><![CDATA[
        select
        CASE WHEN date(now())-vencimento::date<=3 THEN 3
        WHEN date(now())-vencimento::date<=15 THEN 15
        WHEN date(now())-vencimento::date<=30 THEN 30
        WHEN date(now())-vencimento::date<=60 THEN 60
        WHEN date(now())-vencimento::date<=90 THEN 90
        WHEN date(now())-vencimento::date<=120 THEN 120
        ELSE 999 END
        as ordem,
        CASE WHEN date(now())-vencimento::date<=3 THEN '0-3 dias'
        WHEN date(now())-vencimento::date<=15 THEN '4-15 dias'
        WHEN date(now())-vencimento::date<=30 THEN '16-30 dias'
        WHEN date(now())-vencimento::date<=60 THEN '31-60 dias'
        WHEN date(now())-vencimento::date<=90 THEN '61-90 dias'
        WHEN date(now())-vencimento::date<=120 THEN '91-120 dias'
        ELSE '+ 120 dias' END
        as "Dias para Vencimento",
        CASE WHEN ?=1 THEN titulo_cheque ELSE '-' END AS "Título",
        count(titulo_cheque) as "Num Títulos",
        sum(valor) as "Total Valor Título",
        sum(areceber) as "Total Valor Título Atualizado"
        from cr_fin_titulos_cheques_a_receber
        where vencimento::date<=date(now())
        and areceber>0
        group by 1,2,3
        order by ordem        
        ]]>
        </sql>
        <description><![CDATA[Situação indadimplência]]></description>
        <parameterorder>1</parameterorder>
        <enabled>t</enabled>
        <hasgrouping>f</hasgrouping>
        <basReportParameter>
            <locate>reportid</locate>
            <locate>parameternumber</locate>
            <item>
                <reportparameterid>-52</reportparameterid>
                <reportid>-15</reportid>
                <label>Detalhar títulos: </label>
                <parameternumber>1</parameternumber>
                <fieldtype>RADIOGROUP</fieldtype>
                <fixedoptions>t</fixedoptions>
                <options>Sim => 1,Não => 0</options>
                <defaultvalue>0</defaultvalue>
            </item>
        </basReportParameter>
    </item>

    <item>
        <reportid>-16</reportid>
        <modules>{FINANCE}</modules>
        <name><![CDATA[Cheques Resgatados]]></name>
        <sql><![CDATA[
        SELECT cod_cheque as "Cód. Cheque",
        numero_cheque as "Nº. do Cheque",
        data_do_cheque as "Data do Cheque/Vencimento@GROUP1",
        data_de_movimentacao "Data de Movimentação",
        agencia as "Agencia",
        eminente as "Emitente",
        valor_do_cheque as "Valor",
        tipo_do_cheque as "Tipo",
        status_do_cheque as "Status",
        banco_do_cheque as "Banco"
        FROM cr_fin_cheques A
        WHERE status_do_cheque IN ('RESGATADO')
        AND a.data_do_cheque::date BETWEEN datetodb(?) AND datetodb(?)
        ]]>
        </sql>
        <description><![CDATA[ Cheques Resgatados: ]]></description>
        <parameterorder>1;2</parameterorder>
        <enabled>t</enabled>
        <hasgrouping>f</hasgrouping>
        <basReportParameter>
            <locate>reportid</locate>
            <locate>parameternumber</locate>
            <item>
                <reportparameterid>-53</reportparameterid>
                <reportid>-16</reportid>
                <label>Data inicial do cheque</label>
                <parameternumber>1</parameternumber>
                <fieldtype>CALENDAR</fieldtype>
            </item>
            <item>
                <reportparameterid>-54</reportparameterid>
                <reportid>-16</reportid>
                <label>Data final do cheque</label>
                <parameternumber>2</parameternumber>
                <fieldtype>CALENDAR</fieldtype>
            </item>
        </basReportParameter>
    </item>
    <item>
        <reportid>-17</reportid>
        <modules>{FINANCE}</modules>
        <name><![CDATA[Relatório de cheques por destino]]></name>
        <sql><![CDATA[

        SELECT A.banco_deposito as "Banco",
        A.status_do_cheque as "Situação Cheque",
        count(distinct numero_cheque) as "Número de Cheques",
        sum(A.valor_do_cheque) as "Soma Valor Cheque" 
        FROM cr_fin_cheques A
        WHERE A.data_de_movimentacao::date BETWEEN datetodb(?) AND datetodb(?)
        GROUP BY A.banco_deposito, A.status_do_cheque
        ORDER BY A.banco_deposito, A.status_do_cheque

        ]]>
        </sql>
        <description><![CDATA[Relatório de cheques por destino]]></description>
        <parameterorder>1;2</parameterorder>
        <enabled>t</enabled>
        <hasgrouping>f</hasgrouping>
        <basReportParameter>
            <locate>reportid</locate>
            <locate>parameternumber</locate>
            <item>
                <reportparameterid>-55</reportparameterid>
                <reportid>-17</reportid>
                <label>Data inicial da movimentação</label>
                <parameternumber>1</parameternumber>
                <fieldtype>CALENDAR</fieldtype>
            </item>
            <item>
                <reportparameterid>-56</reportparameterid>
                <reportid>-17</reportid>
                <label>Data final da movimentação</label>
                <parameternumber>2</parameternumber>
                <fieldtype>CALENDAR</fieldtype>
            </item>
        </basReportParameter>
    </item>
    <item>
        <reportid>-18</reportid>
        <modules>{FINANCE}</modules>
        <name><![CDATA[Relatório anual por centro de custo]]></name>
        <sql><![CDATA[

        select coalesce(ano1.cod_centro_de_custo, ano2.cod_centro_de_custo) as cod_centro_de_custo,
        coalesce(ano1.centro_de_custo, ano2.centro_de_custo) as centro_de_custo,
        ano1.valor as "Ano Base", ano2.valor as "Ano Anterior" ,
        (CASE WHEN (ano2.valor = 0)
              THEN
                  ROUND(0, 2)
              ELSE
                  ROUND((ano1.valor/ano2.valor-1)*100, 2)
         END) AS "Variação"
        from
        (select cod_centro_de_custo, centro_de_custo, saldo as valor
        from cr_fin_balancete_por_centro(1, (?::text||'/01/01')::date, (?::text||'/12/31')::date)
        order by 1) as ano1
        full join
        (select cod_centro_de_custo, centro_de_custo, saldo as valor
        from cr_fin_balancete_por_centro(1, ((?-1)::text||'/01/01')::date, ((?-1)::text||'/12/31')::date)
        order by 1) as ano2
        on ano1.cod_centro_de_custo=ano2.cod_centro_de_custo

        ]]>
        </sql>
        <description><![CDATA[Relatório anual por centro de custo]]></description>
        <parameterorder>1;1;1;1</parameterorder>
        <enabled>t</enabled>
        <hasgrouping>f</hasgrouping>
        <basReportParameter>
            <locate>reportid</locate>
            <locate>parameternumber</locate>
            <item>
                <reportparameterid>-57</reportparameterid>
                <reportid>-18</reportid>
                <label>Ano Base</label>
                <parameternumber>1</parameternumber>
                <fieldtype>TEXTFIELD</fieldtype>
                <size>38</size>
            </item>
        </basReportParameter>
    </item>
    <item>
        <reportid>-23</reportid>
        <modules>{ACADEMIC}</modules>
        <name><![CDATA[Frequências não registradas]]></name>
        <sql><![CDATA[
select a.groupid as "Código da disciplina oferecida",
       cx.name as "Disciplina oferecida",
       sr.personid as "Código do aluno",
       df.name as "Nome do aluno",
       TO_CHAR(xxx.date, getParameter('BASIC', 'MASK_DATE')) as "Data da frequência",
       link('module=academic&action=main:process:frequency&&groupId=#$&begindate=#$&enddate=#$', true, 'Registrar frequência', a.groupid||','|| TO_CHAR(xxx.date, getParameter('BASIC', 'MASK_DATE'))|| ',' ||TO_CHAR(xxx.date, getParameter('BASIC', 'MASK_DATE'))) as "Link"
from acdenroll a 
inner join acdgroup b
on a.groupid = b.groupid
inner join acdlearningperiod c
on c.learningperiodid = b.learningperiodid
inner join acdcontract sr
on sr.contractid = a.contractid
inner join only basperson df
on df.personid = sr.personid
inner join acdcurriculum ew
on ew.curriculumid = b.curriculumid
inner join acdcurricularcomponent cx
on cx.curricularcomponentid = ew.curricularcomponentid
   and cx.curricularcomponentversion = ew.curricularcomponentversion
inner join (select unnest(occurrencedates) as occurrencedate, unnest(timeids) as timeid, groupid, scheduleid from acdschedule fg) as rt
on rt.groupid = a.groupid 
inner join acdscheduleprofessor xx
on (rt.scheduleid = xx.scheduleid)
inner join acdscheduleprofessorcontent xxx
                     on (xxx.scheduleprofessorid = xx.scheduleprofessorid
                         and rt.timeid = xxx.timeid
                         and xxx.date = rt.occurrencedate
                         and classoccurred = true)
WHERE c.periodid = GETPARAMETER('BASIC', 'CURRENT_PERIOD_ID')
AND a.statusid = GETPARAMETER('ACADEMIC', 'ENROLL_STATUS_ENROLLED')::int
and xxx.description is not null
AND NOT EXISTS (select 'x'
                  from acdfrequenceenroll x
                 where x.enrollid = a.enrollid
                   and x.scheduleid = rt.scheduleid
                   and x.timeid = rt.timeid
                   and x.frequencydate = rt.occurrencedate)
and a.datecancellation is null
and getcontractstate(a.contractid) in (GETPARAMETER('BASIC','STATE_CONTRACT_ID_ENROLLED')::int, GETPARAMETER('ACADEMIC','STATE_CONTRACT_ID_ADJUSTMENT')::int)
order by a.groupid,df.name,xxx.date;
        ]]>
        </sql>
        <description><![CDATA[Lista de alunos que estão com frequências não registradas em aulas onde o conteúdo já foi registrado. ]]></description>
        <parameterorder></parameterorder>
        <enabled>f</enabled>
        <hasgrouping>f</hasgrouping>
    </item>
    <item>
        <reportid>-24</reportid>
        <modules>{ACADEMIC}</modules>
        <name><![CDATA[Conflito de Horário Professor]]></name>
        <sql><![CDATA[ SELECT professorid AS "Cód. Professor",
                              professor AS "Professor",
                              groupid AS "Cód. Disciplina Oferecida",
                              disciplina AS "Disciplina",
                              groupid_choque AS "Cód. Disciplina com choque",
                              disciplina_choque AS "Disciplina com choque",
                              unidade AS "Unidade",
                              datas AS "Datas",
                              horarios AS "Horarios",
                              diasSemana AS "Dias da semana"
                         FROM cr_acd_verifica_choque_horarios(?, ?, ?)
                     ORDER BY "Professor" ]]>
        </sql>
        <description><![CDATA[Mostra as disciplinas oferecidas do professor que possuem conflito de horário. ]]></description>
        <parameterorder></parameterorder>
        <enabled>t</enabled>
        <hasgrouping>f</hasgrouping>
        <basReportParameter>
            <locate>reportid</locate>
            <locate>parameternumber</locate>
            <item>
                <reportparameterid>-67</reportparameterid>
                <reportid>-24</reportid>
                <label>Período</label>
                <parameternumber>1</parameternumber>
                <fieldtype>SELECTION</fieldtype>
                <fixedoptions>f</fixedoptions>
                <options> select periodid, periodid from acdperiod order by periodid desc</options>
            </item>
            <item>
                <reportparameterid>-68</reportparameterid>
                <reportid>-24</reportid>
                <label>Curso</label>
                <parameternumber>2</parameternumber>
                <fieldtype>COMBOBOX</fieldtype>
                <fixedoptions>f</fixedoptions>
                <options> select courseid, name from acdcourse order by name</options>
            </item>
            <item>
                <reportparameterid>-69</reportparameterid>
                <reportid>-24</reportid>
                <label>Professor</label>
                <parameternumber>3</parameternumber>
                <fieldtype>COMBOBOX</fieldtype>
                <fixedoptions>f</fixedoptions>
                <options> select * from (
                        (select personid, name from basphysicalpersonprofessor)
                        union
                        (select 0, '--Todos--' as name)
                        ) as x
                         order by name
                </options>
                <defaultvalue>0</defaultvalue>
            </item>
        </basReportParameter>
    </item>
    <item>
        <reportid>-25</reportid>
        <modules>{PEDAGOGICO}</modules>
        <name><![CDATA[Gera Calendário de Aulas]]></name>
        <sql><![CDATA[ SELECT *
                         FROM cr_acp_gera_calendario_aulas(?, ?, ?) ]]>
        </sql>
        <description><![CDATA[Mostra calendário de aulas. ]]></description>
        <parameterorder></parameterorder>
        <enabled>t</enabled>
        <hasgrouping>f</hasgrouping>
        <basReportParameter>
            <locate>reportid</locate>
            <locate>parameternumber</locate>
            <item>
                <reportparameterid>-70</reportparameterid>
                <reportid>-25</reportid>
                <label>Data inicial</label>
                <parameternumber>1</parameternumber>
                <fieldtype>CALENDAR</fieldtype>
                <defaultvalue>01/01/1990</defaultvalue>
            </item>
            <item>
                <reportparameterid>-71</reportparameterid>
                <reportid>-25</reportid>
                <label>Data final</label>
                <parameternumber>2</parameternumber>
                <fieldtype>CALENDAR</fieldtype>
                <defaultvalue>01/01/2099</defaultvalue>
            </item>
            <item>
                <reportparameterid>-72</reportparameterid>
                <reportid>-25</reportid>
                <label>Oferta de Turma</label>
                <parameternumber>3</parameternumber>
                <fieldtype>SELECTION</fieldtype>
                <fixedoptions>f</fixedoptions>
                <options> select ofertaturmaid, descricao from acpofertaturma where situacao='A' order by descricao</options>
            </item>
        </basReportParameter>   
    </item>
    <item>
        <reportid>-26</reportid>
        <modules>{FINANCE}</modules>
        <name><![CDATA[Relatório de Receitas e Despesas anual por centro de custo]]></name>
        <sql><![CDATA[ SELECT *
                         FROM cr_fin_receitas_despesas_anual(?) ]]>
        </sql>
        <description><![CDATA[Mostra o relatório de receitas e despesas de um ano por centro de custo.]]></description>
        <parameterorder></parameterorder>
        <enabled>t</enabled>
        <hasgrouping>f</hasgrouping>
        <basReportParameter>
            <locate>reportid</locate>
            <locate>parameternumber</locate>
            <item>
                <reportparameterid>-73</reportparameterid>
                <reportid>-26</reportid>
                <label>Ano Base</label>
                <parameternumber>1</parameternumber>
                <fieldtype>TEXTFIELD</fieldtype>
                <size>38</size>
            </item>
        </basReportParameter>
    </item>
    <item>
        <reportid>-27</reportid>
        <modules>{FINANCE}</modules>
        <name><![CDATA[Movimentação de Valores Total por Plano de Contas x  Centro de Custo Regime de Caixa]]></name>
        <sql><![CDATA[ 
SELECT rptregimecaixa.cod_plano_de_contas,
       accaccountscheme.description AS DescricaoConta,
       rptregimecaixa.cod_centrodecusto,
       acccostcenter.description AS DescricaoCCusto,
       SUM(rptregimecaixa.valor_lancamento) AS Valor_Total
FROM rptregimecaixa,
     acccostcenter,
     accaccountscheme
WHERE data_efetivacao_lancamento >= ?
    AND data_efetivacao_lancamento <= ?
    AND acccostcenter.costcenterid = rptregimecaixa.cod_centrodecusto
    AND accaccountscheme.accountschemeid = rptregimecaixa.cod_plano_de_contas
GROUP BY rptregimecaixa.cod_plano_de_contas,
         rptregimecaixa.cod_centrodecusto,
         acccostcenter.description,
         accaccountscheme.description ]]>
        </sql>
        <description><![CDATA[Movimentação de valores total por Plano de Contas x Centro de Custo, pelo regime de caixa.]]></description>
        <enabled>t</enabled>
        <hasgrouping>f</hasgrouping>
        <basReportParameter>
            <locate>reportid</locate>
            <locate>parameternumber</locate>
            <item>
                <reportparameterid>-75</reportparameterid>
                <reportid>-27</reportid>
                <label>Data inicial</label>
                <parameternumber>1</parameternumber>
                <fieldtype>CALENDAR</fieldtype>
                <defaultvalue></defaultvalue>
            </item>
            <item>
                <reportparameterid>-76</reportparameterid>
                <reportid>-27</reportid>
                <label>Data final</label>
                <parameternumber>2</parameternumber>
                <fieldtype>CALENDAR</fieldtype>
                <defaultvalue></defaultvalue>
            </item>
        </basReportParameter>
    </item>
    <item>
        <reportid>-28</reportid>
        <modules>{FINANCE}</modules>
        <name><![CDATA[Relatório de Cheques antecipados]]></name>
        <sql><![CDATA[ 
    SELECT cod_cheque AS "Cód. Cheque",
           numero_cheque AS "Nº. do Cheque",
           data_do_cheque AS "Data do Cheque/Vencimento",
           data_de_movimentacao AS "Data de Movimentação",
           agencia AS "Agencia",
           eminente AS "Eminente",
           cpf AS "CPF",
           valor_do_cheque AS "Valor",
           tipo_do_cheque AS "Tipo",
           status_do_cheque AS "Status",
           banco_do_cheque AS "Banco"
      FROM cr_fin_cheques
     WHERE status_do_cheque ILIKE '%Depositado%'
       AND data_de_movimentacao < data_do_cheque
       AND data_de_movimentacao BETWEEN ? AND ?
]]>
        </sql>
        <description><![CDATA[Lista todos os cheques depositados, que o depósito foi antes do vencimento.]]></description>
        <parameterorder></parameterorder>
        <enabled>t</enabled>
        <hasgrouping>f</hasgrouping>
        <basReportParameter>
            <locate>reportid</locate>
            <locate>parameternumber</locate>
            <item>
                <reportparameterid>-77</reportparameterid>
                <reportid>-28</reportid>
                <label>Período de Movimentação Inicial</label>
                <parameternumber>1</parameternumber>
                <fieldtype>CALENDAR</fieldtype>
            </item>
            <item>
                <reportparameterid>-78</reportparameterid>
                <reportid>-28</reportid>
                <label>Período de Movimentação Final</label>
                <parameternumber>2</parameternumber>
                <fieldtype>CALENDAR</fieldtype>
            </item>
        </basReportParameter>
    </item>
    
    <item>
        <reportid>-29</reportid>
        <modules>{FINANCE}</modules>
        <name><![CDATA[Relatório de receitas e despesas anual]]></name>
        <sql><![CDATA[ 
    select * from crosstab('
    select cc, jan, valor from (
    SELECT cod_centro_de_custo||\'-\'||centro_de_custo as cc, \'1\' as Jan, saldo as valor
    FROM cr_fin_balancete_por_centro(1, (\?::text||'/01/01\')::date, ((\?::text||'/01/01\')::date + interval \'1 month\' - interval \'1 day\')::date)
    union all 
    SELECT cod_centro_de_custo||\'-\'||centro_de_custo, \'2\' as fev, saldo as valor
    FROM cr_fin_balancete_por_centro(1, (\?::text||'/02/01\')::date, ((\?::text||'/02/01\')::date + interval \'1 month\' - interval \'1 day\')::date)
    union all 
    SELECT cod_centro_de_custo||\'-\'||centro_de_custo, \'3\' as mar, saldo as valor
    FROM cr_fin_balancete_por_centro(1, (\?::text||'/03/01\')::date, ((\?::text||'/03/01\')::date + interval \'1 month\' - interval \'1 day\')::date)
    union all 
    SELECT cod_centro_de_custo||\'-\'||centro_de_custo, \'4\' as abr, saldo as valor
    FROM cr_fin_balancete_por_centro(1, (\?::text||'/04/01\')::date, ((\?::text||'/04/01\')::date + interval \'1 month\' - interval \'1 day\')::date)
    union all 
    SELECT cod_centro_de_custo||\'-\'||centro_de_custo, \'5\' as mai, saldo as valor
    FROM cr_fin_balancete_por_centro(1, (\?::text||'/05/01\')::date, ((\?::text||'/05/01\')::date + interval \'1 month\' - interval \'1 day\')::date)
    union all 
    SELECT cod_centro_de_custo||\'-\'||centro_de_custo, \'6\' as jun, saldo as valor
    FROM cr_fin_balancete_por_centro(1, (\?::text||'/06/01\')::date, ((\?::text||'/06/01\')::date + interval \'1 month\' - interval \'1 day\')::date)
    union all 
    SELECT cod_centro_de_custo||\'-\'||centro_de_custo, \'7\' as jul, saldo as valor
    FROM cr_fin_balancete_por_centro(1, (\?::text||'/07/01\')::date, ((\?::text||'/07/01\')::date + interval \'1 month\' - interval \'1 day\')::date)
    union all 
    SELECT cod_centro_de_custo||\'-\'||centro_de_custo, \'8\' as ago, saldo as valor
    FROM cr_fin_balancete_por_centro(1, (\?::text||'/08/01\')::date, ((\?::text||'/08/01\')::date + interval \'1 month\' - interval \'1 day\')::date)
    union all 
    SELECT cod_centro_de_custo||\'-\'||centro_de_custo, \'9\' as set, saldo as valor
    FROM cr_fin_balancete_por_centro(1, (\?::text||'/09/01\')::date, ((\?::text||'/09/01\')::date + interval \'1 month\' - interval \'1 day\')::date)
    union all 
    SELECT cod_centro_de_custo||\'-\'||centro_de_custo, \'10\' as out, saldo as valor
    FROM cr_fin_balancete_por_centro(1, (\?::text||'/10/01\')::date, ((\?::text||'/10/01\')::date + interval \'1 month\' - interval \'1 day\')::date)
    union all 
    SELECT cod_centro_de_custo||\'-\'||centro_de_custo, \'11\' as nov, saldo as valor
    FROM cr_fin_balancete_por_centro(1, (\?::text||'/11/01\')::date, ((\?::text||'/11/01\')::date + interval \'1 month\' - interval \'1 day\')::date)
    union all 
    SELECT cod_centro_de_custo||\'-\'||centro_de_custo, \'12\' as dez, saldo as valor
    FROM cr_fin_balancete_por_centro(1, (\?::text||'/12/01\')::date, ((\?::text||'/12/01\')::date + interval \'1 month\' - interval \'1 day\')::date)) as xx
    order by 
         coalesce(split_part(split_part(cc, \'-\', 1), \'.\', 1),\'0\')::int
         ,case when coalesce(split_part(split_part(cc, \'-\', 1), \'.\', 2),\'0\')>\'0\' then coalesce(split_part(split_part(cc, \'-\', 1), \'.\', 2),\'0\')::int else 0 end
         ,case when coalesce(split_part(split_part(cc, \'-\', 1), \'.\', 3),\'0\')>\'0\' then coalesce(split_part(split_part(cc, \'-\', 1), \'.\', 3),\'0\')::int else 0 end
         ,case when coalesce(split_part(split_part(cc, \'-\', 1), \'.\', 4),\'0\')>\'0\' then coalesce(split_part(split_part(cc, \'-\', 1), \'.\', 4),\'0\')::int else 0 end
    '
    , 'select m from generate_series(1,12) m'
    ) as (
    cc text,
    "Jan" numeric,
    "Fev" numeric,
    "Mar" numeric,
    "Abr" numeric,
    "Mai" numeric,
    "Jun" numeric,
    "Jul" numeric,
    "Ago" numeric,
    "Set" numeric,
    "Out" numeric,
    "Nov" numeric,
    "Dez" numeric
    ); 
]]>
        </sql>
        <description><![CDATA[Relatório das receitas de despesas do ano.]]></description>
        <parameterorder>1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1</parameterorder>
        <enabled>t</enabled>
        <hasgrouping>f</hasgrouping>
        <basReportParameter>
            <locate>reportid</locate>
            <locate>parameternumber</locate>
            <item>
                <reportparameterid>-79</reportparameterid>
                <reportid>-29</reportid>
                <label>Ano</label>
                <parameternumber>1</parameternumber>
                <fieldtype>TEXTFIELD</fieldtype>
                <size>38</size>
            </item>
        </basReportParameter>
    </item>
    
    <item>
        <reportid>-30</reportid>
        <modules>{PEDAGOGICO}</modules>
        <name><![CDATA[Relatório de horas do professor]]></name>
        <sql><![CDATA[ 
    select * from cr_acp_horas_professor(?::text,?::text,?::boolean)
        ORDER BY "Professor";
]]>
        </sql>
        <description><![CDATA[]]></description>
        <parameterorder></parameterorder>
        <enabled>t</enabled>
        <hasgrouping>f</hasgrouping>
        <basReportParameter>
            <locate>reportid</locate>
            <locate>parameternumber</locate>
            <item>
                <reportparameterid>-80</reportparameterid>
                <reportid>-30</reportid>
                <label>Data inicial</label>
                <parameternumber>1</parameternumber>
                <fieldtype>CALENDAR</fieldtype>
            </item>
            <item>
                <reportparameterid>-81</reportparameterid>
                <reportid>-30</reportid>
                <label>Data final</label>
                <parameternumber>2</parameternumber>
                <fieldtype>CALENDAR</fieldtype>
            </item>
            <item>
                <reportparameterid>-82</reportparameterid>
                <reportid>-30</reportid>
                <label>Tipo</label>
                <parameternumber>3</parameternumber>
                <fieldtype>SELECTION</fieldtype>
                <fixedoptions>t</fixedoptions>
                <options>t => Analítico,f => Sintético</options>
            </item>
        </basReportParameter>
    </item>
</basReport>
