<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Solucoes Livres Ltda.
 *
 * Este arquivo e parte do programa Sagu.
 *
 * O Sagu e um software livre; voce pode redistribui-lo e/ou modifica-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundacao
 * do Software Livre (FSF); na versão 2 da Licenca.
 *
 * Este programa e distribuido na esperanca que possa ser util, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implicita de ADEQUACAO a qualquer MERCADO
 * ou APLICACAO EM PARTICULAR. Veja a Licenca Publica Geral GNU/GPL em
 * portugues para maiores detalhes.
 *
 * Voce deve ter recebido uma copia da Licenca Publica Geral GNU, sob o titulo
 * "LICENCA.txt", junto com este programa, se nao, acesse o Portal do Software
 * Publico Brasileiro no endereco www.softwarepublico.gov.br ou escreva para a
 * Fundacao do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class responsible for storing the functions of login.
 *
 * @author Nataniel I. da Silva [nataniel@solis.coop.br]
 *
 * @version $Id$
 *
 * 
 * @since
 * Class created on 26/05/2014
 *
 * */

class webServicesBasic
{
    private $auth;
    private $MIOLO;

    public function __construct()
    {
        global $MIOLO;

        chdir( '../' );

        $_SERVER['REQUEST_URI'] = 'module=basic';

        require_once 'classes/miolo.class';
        require_once 'classes/support.inc';

        $this->MIOLO = MIOLO::getInstance();

        $this->MIOLO->conf = new MConfigLoader();
        $this->MIOLO->conf->LoadConf();

        $this->MIOLO->Init();
        $this->MIOLO->Uses( 'classes/sagu.class', 'basic' );
    }

    
        
    /**
     * Recebe um login de usuário para autenticação do SAGU.
     * Se autenticar retorna um hash MD5 para ser usado como forma de 
     * autenticação no SAGU.
     *
     * 
     * @param string $user Usuário
     * @param string $password Senha do usuário
     * 
     * @return - Autenticando retorna um hash MD5, senão retorna false
     */
    public function wsLogin($user, $password)
    {
        // Se falhar vai retornar false
        $return = false;
        
        // Autentica
        if ( $this->MIOLO->auth->Authenticate($user, $password) )
        {
            $webServiceLogin = new BasWebServiceLogin();
            
            // Calcula validade
            $tempo= date(SAGU::getParameter('BASIC', 'MASK_TIMESTAMP_PHP'));
            $minutosDeValidade = SAGU::getParameter('BASIC', 'TEMPO_DE_VALIDADE_WS_LOGIN');
            $validade = SAGU::addIntervalInTimestamp($tempo, 'mi', $minutosDeValidade, '+');
            
            // Pega o hash em MD5
            $return = $hash = md5(openssl_random_pseudo_bytes(128));
            
            // Salva na base
            if ( !$webServiceLogin->insert($user, $validade, $hash) )
            {
                throw new Exception(_M("Não foi possível gerar o login na base de dados do SAGU."));
            }
        }
        
        return $return;
    }

    /**
     * Desloga o usuário (invalida o hash) do SAGU.
     * 
     * @param string $login Login
     */
    public function wsLogout($login)
    {
        $webServiceLogin = new BasWebServiceLogin();
        
        return $webServiceLogin->invalidarHash($login);
    }   
}
?>
