<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class responsible for storing the functions of login.
 *
 * @author Samuel Koch [samuel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * Luís Felipe Wermann [luis_felipe@solis.com.br]
 * Joao Francisco Padilha Souza [joao@solis.com.br]
 *
 * @since
 * Class created on 29/07/2009
 */
class webServicesBasic
{
    private $MIOLO;

    public function __construct()
    {
        chdir('../');

        $_SERVER['REQUEST_URI'] = 'module=basic';

        require_once 'classes/miolo.class';
        require_once 'classes/support.inc';

        $this->MIOLO = MIOLO::getInstance();

        $this->MIOLO->conf = new MConfigLoader();
        $this->MIOLO->conf->LoadConf();

        $this->MIOLO->Init();
        $this->MIOLO->Uses('classes/sagu.class', 'basic');
    }

    /**
     * Function to webservices that returns the informations of person
     *
     * @param: $personId (integer): Is code of student
     *
     * @return (array) $persons: Return a array of objects with the informations of persons
     * $person->personid
     * $person->persondv
     * $person->personmask
     * $person->personname
     * $person->shortName
     * $person->cityId
     * $person->cityname
     * $person->zipcode
     * $person->location
     * $person->locationTypeId
     * $person->locationtype
     * $person->complement
     * $person->neighborhood
     * $person->email
     * $person->emailalternative
     * $person->url
     * $person->number
     * $person->stateid
     * $person->statename
     * $person->countryname
     * $person->mioloUserName
     * $person->password
     * $persons = array( $person );
     */
    public function wsGetPerson($personId)
    {
        $busPerson = new BusinessBasicBusPerson();
        $wsPerson = $busPerson->getPerson($personId);

        if ( (strlen($wsPerson->personId) > 0 ) )
        {
            $person = new stdClass();
            $person->personId = $wsPerson->personId;
            $person->personDv = $wsPerson->personDv;
            $person->personMask = $wsPerson->personMask;
            $person->personName = $wsPerson->name;
            $person->shortName = $wsPerson->shortName;
            $person->cityId = $wsPerson->cityId;
            $person->cityName = $wsPerson->cityName;
            $person->zipCode = $wsPerson->zipCode;
            $person->location = $wsPerson->location;
            $person->locationTypeId = $wsPerson->locationTypeId;
            $person->locationType = $wsPerson->locationType;
            $person->complement = $wsPerson->complement;
            $person->neighborhood = $wsPerson->neighborhood;
            $person->email = $wsPerson->email;
            $person->emailAlternative = $wsPerson->emailAlternative;
            $person->url = $wsPerson->url;
            $person->number = $wsPerson->number;
            $person->stateId = $wsPerson->stateId;
            $person->stateName = $wsPerson->stateName;
            $person->countryName = $wsPerson->countryName;
            $person->mioloUserName = $wsPerson->mioloUserName;
            $dataLogin = $busPerson->getLoginAndPassword($wsPerson->personId);
            $person->password = $dataLogin->password;
        }

        return $person;
    }

    /**
     * Function to webservices that returns the informations of persons
     *
     * @param: $filter(object): Is the data to filter the person(s)
     *
     * @return (array): Return a array of objects with the informations of persons
     * $person->personid;
     * $person->persondv;
     * $person->personmask;
     * $person->personname;
     * $person->shortName;
     * $person->cityId;
     * $person->cityname;
     * $person->zipcode;
     * $person->location;
     * $person->locationTypeId;
     * $person->locationtype;
     * $person->complement;
     * $person->neighborhood;
     * $person->email;
     * $person->emailalternative;
     * $person->url;
     * $person->number;
     * $person->stateid;
     * $person->statename;
     * $person->countryname;
     * $person->mioloUserName;
     * $person->password;
     * $persons = array( $person );
     */
    public function wsSearchPersons($filter)
    {
        $busPerson = new BusinessBasicBusPerson();
        $wsPerson = $busPerson->searchPerson($filter);

        if ( (strlen($wsPerson->personId) > 0 ) )
        {
            $person = new stdClass();
            $person->personId = $wsPerson->personId;
            $person->personDv = $wsPerson->personDv;
            $person->personMask = $wsPerson->personMask;
            $person->personName = $wsPerson->name;
            $person->shortName = $wsPerson->shortName;
            $person->cityId = $wsPerson->cityId;
            $person->cityName = $wsPerson->cityName;
            $person->zipCode = $wsPerson->zipCode;
            $person->location = $wsPerson->location;
            $person->locationTypeId = $wsPerson->locationTypeId;
            $person->locationType = $wsPerson->locationType;
            $person->complement = $wsPerson->complement;
            $person->neighborhood = $wsPerson->neighborhood;
            $person->email = $wsPerson->email;
            $person->emailAlternative = $wsPerson->emailAlternative;
            $person->url = $wsPerson->url;
            $person->number = $wsPerson->number;
            $person->stateId = $wsPerson->stateId;
            $person->stateName = $wsPerson->stateName;
            $person->countryName = $wsPerson->countryName;
            $person->mioloUserName = $wsPerson->mioloUserName;
            $dataLogin = $busPerson->getLoginAndPassword($wsPerson->personId);
            $person->password = $dataLogin->password;

            $persons[] = $person;
        }

        return $persons;
    }

    /**
     * Function to webservices that returns the informations of person
     *
     * @param: $content - RG or CPF number
     *
     * @return (object): Return a object with the informations of person or null if not found person
     * $person->personid;
     * $person->persondv;
     * $person->personmask;
     * $person->personname;
     * $person->shortName;
     * $person->cityId;
     * $person->cityname;
     * $person->zipcode;
     * $person->location;
     * $person->locationTypeId;
     * $person->locationtype;
     * $person->complement;
     * $person->neighborhood;
     * $person->email;
     * $person->emailalternative;
     * $person->url;
     * $person->number;
     * $person->stateId;
     * $person->stateName;
     * $person->countryId;
     * $person->countryName;
     * $person->mioloUserName;
     * $person->password;
     * $person->cpfNumber;
     * $person->rgNumber;
     * $person->organ;
     */
    public function wsSearchPhysicalPersonByDocument($content)
    {
        $filter = new stdClass();
        $filter->content = $content;
        $busPerson = new BusinessBasicBusPerson();
        $busPhysicalPerson = new BusinessBasicBusPhysicalPerson();
        $busDocument = new BusinessBasicBusDocument();
        $personId = $busPhysicalPerson->searchPhysicalPersonByDocument($filter);

        if ( strlen($personId) > 0 )
        {
            $wsPerson = $busPhysicalPerson->getPhysicalPerson($personId);
            $documentCPF = $busDocument->getDocument($personId, SAGU::getParameter('basic', 'DEFAULT_DOCUMENT_TYPE_ID_CPF'));
            $cpf->cpfNumber = $documentCPF->content;
            $documentRG = $busDocument->getDocument($personId, SAGU::getParameter('basic', 'DEFAULT_DOCUMENT_TYPE_ID_RG'));
            $rg->rgNumber = $documentRG->content;
            $rg->organ = $documentRG->organ;

            if ( (strlen($wsPerson->personId) > 0 ) )
            {
                $person = new stdClass();
                $person->personId = $wsPerson->personId;
                $person->personDv = $wsPerson->personDv;
                $person->personMask = $wsPerson->personMask;
                $person->personName = $wsPerson->name;
                $person->shortName = $wsPerson->shortName;
                $person->cityId = $wsPerson->cityId;
                $person->cityName = $wsPerson->cityName;
                $person->zipCode = $wsPerson->zipCode;
                $person->location = $wsPerson->location;
                $person->locationTypeId = $wsPerson->locationTypeId;
                $person->locationType = $wsPerson->locationType;
                $person->complement = $wsPerson->complement;
                $person->neighborhood = $wsPerson->neighborhood;
                $person->email = $wsPerson->email;
                $person->emailAlternative = $wsPerson->emailAlternative;
                $person->url = $wsPerson->url;
                $person->number = $wsPerson->number;
                $person->stateId = $wsPerson->stateId;
                $person->stateName = $wsPerson->stateName;
                $person->countryName = $wsPerson->countryName;
                $person->sex = $wsPerson->sex;
                $person->maritalStatusId = $wsPerson->maritalStatusId;
                $person->residentialPhone = $wsPerson->residentialPhone;
                $person->workPhone = $wsPerson->workPhone;
                $person->cellPhone = $wsPerson->cellPhone;
                $person->messagePhone = $wsPerson->messagePhone;
                $person->messageContact = $wsPerson->messageContact;
                $person->dateBirth = $wsPerson->dateBirth;
                $person->cityIdBirth = $wsPerson->cityIdBirth;
                $person->countryIdBirth = $wsPerson->countryIdBirth;
                $person->fatherId = $wsPerson->fatherId;
                $person->motherId = $wsPerson->motherId;
                $person->responsableLegalId = $wsPerson->responsableLegalId;
                $person->carPlate = $wsPerson->carPlate;
                $person->specialNecessityId = $wsPerson->specialNecessityId;
                $person->specialNecessityDescription = $wsPerson->specialNecessityDescription;
                $person->cityIdWork = $wsPerson->cityIdWork;
                $person->zipCodeWork = $wsPerson->zipCodeWork;
                $person->locationWork = $wsPerson->locationWork;
                $person->locationTypeIdWork = $wsPerson->locationTypeIdWork;
                $person->complementWork = $wsPerson->complementWork;
                $person->neighborhoodWork = $wsPerson->neighborhoodWork;
                $person->ethnicOriginId = $wsPerson->ethnicOriginId;
                $person->sentEmail = $wsPerson->sentEmail;
                $person->dateDeath = $wsPerson->dateDeath;
                $person->number = $wsPerson->number;
                $person->stateId = $wsPerson->stateId;
                $person->stateName = $wsPerson->stateName;
                $person->countryId = $wsPerson->countryId;
                $person->countryName = $wsPerson->countryName;
                $person->personTitleId = $wsPerson->personTitleId;
                $person->personTitleDescriptio = $wsPerson->personTitleDescriptio;
                $person->cpfNumber = $cpf->cpfNumber;
                $person->rgNumber = $rg->rgNumber;
                $person->organ = $rg->organ;
            }

            return $person;
        }

        return null;
    }

    /**
     * Function to webservices that returns the informations of person
     *
     * @param: $personId (integer): Is code of student
     * @param: $sex
     *
     * @return (object): Return a object with the informations of contract
     * $person->personid;
     * $person->personName;
     * $person->cpfNumber;
     * $person->rgNumber;
     * $person->organ;
     */
    public function wsSearchParents($personId, $sex)
    {
        $busPerson = new BusinessBasicBusPerson();
        $busPhysicalPerson = new BusinessBasicBusPhysicalPerson();
        $busDocument = new BusinessBasicBusDocument();

        if ( strlen($personId) > 0 )
        {
            $wsPerson = $busPhysicalPerson->getPhysicalPerson($personId);

            $documentCPF = $busDocument->getDocument($personId, SAGU::getParameter('basic', 'DEFAULT_DOCUMENT_TYPE_ID_CPF'));
            $cpf->cpfNumber = $documentCPF->content;

            $documentRG = $busDocument->getDocument($personId, SAGU::getParameter('basic', 'DEFAULT_DOCUMENT_TYPE_ID_RG'));
            $rg->rgNumber = $documentRG->content;
            $rg->organ = $documentRG->organ;

            if ( (strlen($wsPerson->personId) > 0 ) )
            {
                $person = new stdClass();
                $key = $sex . 'Id';
                $person->$key = $wsPerson->personId;
                $key = $sex . 'Name';
                $person->$key = $wsPerson->name;
                $key = $sex . 'CpfNumber';
                $person->$key = $cpf->cpfNumber;
                $key = $sex . 'RgNumber';
                $person->$key = $rg->rgNumber;
            }

            return $person;
        }

        return null;
    }

    /**
     * Function to webservices that returns the informations of the institutions
     *
     * @return (array): Return a array of objects with the informations of institutions
     * $institution->institutionId;
     * $institution->institutionName;
     * $institutions = array( $institution );
     */
    public function wsListInstitution()
    {
        $busLegalPerson = new BusinessBasicBusLegalPerson();
        $filters->legalPersonTypeId = SAGU::getParameter('basic', 'LEGAL_PERSON_TYPE_INSTITUTIONS');
        $wsLegalPerson = $busLegalPerson->searchLegalPerson($filters);

        if ( (count($wsLegalPerson) > 0 ) )
        {
            foreach ( $wsLegalPerson as $value )
            {
                $institution = new stdClass();
                $institution->institutionId = $value[0];
                $institution->institutionName = $value[3];

                $institutions[] = $institution;
            }
        }

        return $institutions;
    }

    /**
     * Function to webservices that returns the informations of the country
     *
     * @return (array): Return a array of objects with the informations of country
     * $country->countryId
     * $country->countryName
     * $countries = array( $country );
     */
    public function wsListCountry()
    {
        $busCountry = new BusinessBasicBusCountry();
        $wsCountry = $busCountry->listCountry();

        if ( (count($wsCountry) > 0 ) )
        {
            foreach ( $wsCountry as $value )
            {
                $country = new stdClass();
                $country->countryId = $value[0];
                $country->countryName = $value[1];

                $countries[] = $country;
            }
        }

        return $countries;
    }

    /**
     * Function to webservices that returns the informations of the state
     *
     * @param $countryId
     *
     * @return (array): Return a array of objects with the informations of state
     * $state->stateId;
     * $state->stateName;
     * $states = array( $state );
     */
    public function wsListState($countryId)
    {
        $busState = new BusinessBasicBusState();
        $wsState = $busState->listState($countryId);

        if ( (count($wsState) > 0 ) )
        {
            foreach ( $wsState as $value )
            {
                $state = new stdClass();
                $state->stateId = $value[0];
                $state->stateName = $value[1];

                $states[] = $state;
            }
        }

        return $states;
    }

    /**
     * Function to webservices that returns the informations of the city
     *
     * @param $countryId
     * @param $stateId
     *
     * @return (array): Return a array of objects with the informations of city
     * $city->cityId;
     * $city->cityName;
     * $city->zipCode;
     * $cities = array( $city );
     */
    public function wsListCity($countryId = null, $stateId = null)
    {
        $busCity = new BusinessBasicBusCity();
        $wsCity = $busCity->listCity($countryId, $stateId);

        if ( (count($wsCity) > 0 ) )
        {
            foreach ( $wsCity as $value )
            {
                $city = new stdClass();
                $city->cityId = $value[0];
                $city->cityName = $value[1];
                $city->zipCode = $value[2];

                $cities[] = $city;
            }
        }

        return $cities;
    }

    /**
     * Function to webservices that returns the informations of the location type
     *
     * @return (array): Return a array of objects with the informations of location type
     * $locationType->locationTypeId;
     * $locationType->locationTypeDescription;
     * $locationTypes = array( $locationType );
     */
    public function wsListLocationType()
    {
        $busLocationType = new BusinessBasicBusLocationType();
        $wsLocationType = $busLocationType->listLocationType();

        if ( (count($wsLocationType) > 0 ) )
        {
            foreach ( $wsLocationType as $value )
            {
                $locationType = new stdClass();
                $locationType->locationTypeId = $value[0];
                $locationType->locationTypeDescription = $value[1];

                $locationTypes[] = $locationType;
            }
        }

        return $locationTypes;
    }

    /**
     * Function to webservices that returns the informations of the marital status
     *
     * @return (array): Return a array of objects with the informations of marital  status
     * $maritalStatus->maritalStatusId;
     * $maritalStatus->maritalStatusDescription;
     * $status = array( $maritalStatus );
     */
    public function wsListMaritalStatus()
    {
        $busMaritalStatus = new BusinessBasicBusMaritalStatus();
        $wsMaritalStatus = $busMaritalStatus->listMaritalStatus();

        if ( (count($wsMaritalStatus) > 0 ) )
        {
            foreach ( $wsMaritalStatus as $value )
            {
                $maritalStatus = new stdClass();
                $maritalStatus->maritalStatusId = $value[0];
                $maritalStatus->maritalStatusDescription = $value[1];

                $status[] = $maritalStatus;
            }
        }

        return $status;
    }

    /**
     * Function to webservices that returns the informations of the special necessity
     *
     * @return (array): Return a array of objects with the informations of special necessity
     * $specialNecessity->specialNecessityId;
     * $specialNecessity->specialNecessityDescription;
     * $specialNecessities = array( $specialNecessity );
     */
    public function wsListSpecialNecessity()
    {
        $busSpecialNecessity = new BusinessBasicBusSpecialNecessity();
        $wsSpecialNecessity = $busSpecialNecessity->listSpecialNecessity();

        if ( (count($wsSpecialNecessity) > 0 ) )
        {
            foreach ( $wsSpecialNecessity as $value )
            {
                $specialNecessity = new stdClass();
                $specialNecessity->specialNecessityId = $value[0];
                $specialNecessity->specialNecessityDescription = $value[1];

                $specialNecessities[] = $specialNecessity;
            }
        }

        return $specialNecessities;
    }

    /**
     * Function to webservices that returns the informations of the ethnic origin
     *
     * @return (array): Return a array of objects with the informations of ethnic origin
     * $ethnicOrigin->ethnicOriginId;
     * $ethnicOrigin->ethnicOriginDescription;
     * $ethnicOrigins = array( $ethnicOrigin );
     */
    public function wsListEthnicOrigin()
    {
        $busEthnicOrigin = new BusinessBasicBusEthnicOrigin();
        $wsEthnicOrigin = $busEthnicOrigin->listEthnicOrigin();

        if ( (count($wsEthnicOrigin) > 0 ) )
        {
            foreach ( $wsEthnicOrigin as $value )
            {
                $ethnicOrigin = new stdClass();
                $ethnicOrigin->ethnicOriginId = $value[0];
                $ethnicOrigin->ethnicOriginDescription = $value[1];

                $ethnicOrigins[] = $ethnicOrigin;
            }
        }

        return $ethnicOrigins;
    }

    /**
     * Function to webservices that checks whether the staff is a teacher.
     *
     * @param $personId
     * @return (boolean): Return true or false
     */
    public function wsIsPersonProfessor($personId)
    {
        $busPerson = new BusinessBasicBusPerson();
        $wsIsPersonProfessor = $busPerson->isPersonProfessor($personId);

        return $wsIsPersonProfessor;
    }

    /**
     * Function to webservices that checks whether the staff is a student.
     *
     * @param $personId
     * @return (boolean): Return true or false
     */
    public function wsIsPersonStudent($personId)
    {
        $busPerson = new BusinessBasicBusPerson();
        $wsIsPersonStudent = $busPerson->isPersonStudent($personId);

        return $wsIsPersonStudent;
    }

    /**
     * Function to webservices that checks whether the staff is a legal.
     *
     * @param $login - miolo user
     * @return (int) $personId: Return the person ID
     */
    public function wsGetPersonByMioloUserName($login)
    {
        $busPerson = new BusinessBasicBusPerson();
        $wsDataPerson = $busPerson->getPersonByMioloUserName($login);

        if ( (count($wsDataPerson) > 0 ) )
        {
            return $wsDataPerson;
        }

        return false;
    }

    /**
     * Webservices function that returns the User and Password
     *
     * @param (int): $personId
     *
     * @return (object) $person: Return login and password
     * $person->login;
     * $person->password;
     */
    public function wsGetLoginAndPasswod($personId)
    {
        $busPerson = new BusinessBasicBusPerson();
        $wsDataPerson = $busPerson->getLoginAndPassword($personId);

        if ( (count($wsDataPerson) > 0 ) )
        {
            $person = new stdClass();
            $person->login = $wsDataPerson->logins;
            $person->password = $wsDataPerson->password;
        }

        return $person;
    }

    /**
     * Webservices function that returns the conpany informations
     *
     * @return (object) $company: Return informations of the DEFAULT_COMPANY_CONF
     */
    public function wsGetCompanyConf()
    {
        $busCompany = new BusinessBasicBusCompany();
        $wsDataCompany = $busCompany->getCompany(SAGU::getParameter('basic', 'DEFAULT_COMPANY_CONF'));

        if ( strlen($wsDataCompany->personId) > 0 )
        {
            $busLegalPerson = new BusinessBasicBusLegalPerson();
            $legalPerson = $busLegalPerson->getLegalPerson($wsDataCompany->personId);
        }

        if ( (count($wsDataCompany) > 0 ) )
        {
            $company = new stdClass();
            $company->companyId = $wsDataCompany->companyId;
            $company->personId = $wsDataCompany->personId;
            $company->name = $wsDataCompany->name;
            $company->acronym = $wsDataCompany->acronum;
            $company->companyTypeDescription = $wsDataCompany->companyTypeDescription;
            $company->legalResponsableId = $wsDataCompany->legalResponsableId;
            $company->name = $wsDataCompany->name;
            $company->cnpj = $wsDataCompany->cnpf;
            $company->phone = $legalPerson->phone;
        }

        return $company;
    }

    /**
     * Function to webservices that change password
     *
     * @param: (objet) $mioloUser: Object with username and new password:
     * $mioloUser->login;
     * $mioloUser->password;
     *
     * @return (boolean): Return true or false
     */
    public function wsChangePassword($mioloUserData)
    {
        if ( count($mioloUserData) > 0 )
        {
            $busPerson = new BusinessBasicBusPerson();

            $wsOk = $busPerson->changePassword($mioloUserData);
        }

        return $wsOk;
    }

    /**
     * Funcao que retorna informacoes das pessoas
     *
     * @param int $personId optional Filtro de codigo da pessoa
     * @param string $name optional Filtro de nome de pessoa
     * @param string $dateTime optional Campo que corresponde a data de atualizacao
     * @return array
     */
    public function wsSearchPerson($personId = null, $name = null, $dateTime = null)
    {
        $busPerson = new BusinessBasicBusPerson();
        $busDocument = new BusinessBasicBusDocument();
        $busState = new BusinessBasicBusState();
        $busCity = new BusinessBasicBusCity();

        $filter->personId = $personId;
        $filter->name = ( strlen($name) > 0 ) ? $name : '%';
        $filter->dateTime = $dateTime;

        $wsPerson = $busPerson->searchPerson($filter);

        if ( is_array($wsPerson) )
        {
            $persons = array();
            foreach ( $wsPerson as $value )
            {
                $person = new stdClass();
                $person->personId = $value[0];
                $person->cpfCnpj = $value[27] ? $value[27] : $value[28];
                $person->name = $value[3];
                $person->acronym = $value[29];
                $person->stateregistration = $value[30];
                $person->location = $value[8];
                $person->number = $value[23];
                $person->zipcode = $value[7];
                $person->neighborhood = $value[12];

                if ( strlen($value[5]) > 0 )
                {
                    $ibgeIdCity = $busCity->getCity($value[5]);
                }

                $person->ibgeIdCity = $ibgeIdCity->ibgeId;

                if ( strlen($value[24]) > 0 )
                {
                    $ibgeIdState = $busState->getState($value[24]);
                }

                $person->ibgeIdState = $ibgeIdState->ibgeId;
                $person->dateTime = $value[21];

                $persons[] = (array)$person;
            }
        }
        else
        {
            return null;
        }

        return $persons;
    }

    /**
     * Obtém o email da instituição
     *
     * @return type String
     */
    public function wsGetInstituitionEmail()
    {
        $busLegalPerson = new BusinessBasicBusLegalPerson();
        $busCompany = new BusinessBasicBusCompany();

        $companyInfo = $busCompany->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));
        $wsLegalPerson = $busLegalPerson->getLegalPerson($companyInfo->personId);

        if ( $wsLegalPerson )
        {
            $email = $wsLegalPerson->email;
        }

        return $email;
    }

    /**
     * Obtém o valor de um parâmetro
     *
     * @param type $module
     * @param type $parameter
     * @return type String
     */
    public function wsGetParameter($module, $parameter)
    {
        return SAGU::getParameter($module, $parameter);
    }

    /**
     * Obtém o objeto file da foto da pessoa
     *
     * @param type $personId
     * @return type stdClass
     */
    public function wsGetPhotoPath($personId)
    {
        //BusPerson
        $busPerson = new BusinessBasicBusPerson();
        //BusFile
        $busFile = new BusinessBasicBusFile();

        //Person
        $person = $busPerson->getPerson($personId);

        if( strlen($person->photoId) )
        {
            $file = $busFile->getFile($person->photoId);

        }
        return $file;
    }
    
    /**
     * Método para criptografar uma string ou descriptografar a mesma
     * @param type $str Mensagem
     * @return String Mensagem criptografada
     */    
    public function wsEncriptDecrypt($str)
    {
        return SAGU::encriptDecrypt($str);
    }
    
    /**
     * Obtem versao do SAGU 
     */
    public function getVersion()
    {
        return SAGU_VERSION;
    }
    
    /**
     * Obtem verificacao de dependencias
     * 
     * @return array 
     */
    public function getDependencyCheck()
    {
        $dependency = new SDependencyCheck();
        $list = $dependency->listDependency();

        $deps = array();
        foreach ( $list as $dep )
        {
            list($method, $label) = $dep;

            $dependency->clearMessages();
            $result = $dependency->$method();

            $deps[$label] = ($result ? 'OK' : $dependency->getMessage());
        }

        return $deps;
    }
    
    /**
     * Função que sincroniza os dados da pessoa informada.
     * 
     * @author Bruno Edgar Fuhr [bruno@solis.com.br]
     * @since 11/04/2014
     * 
     * @param String $data - String com os dados concatenados.
     * @param String $separator - Separador dos dados contidos em $data.
     * 
     * @return String
     * 'success' -> True se sincronização foi efetuada com sucesso.
     * 'msg' -> Mensagem informativa sobre a sincronização.
     */
    public function wsSyncPerson($data, $separator = '||')
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->uses('classes/sBusiness.class', 'basic');
        
        //BusPerson
        $busPerson = new BusinessBasicBusPerson();
        
        $arrayData = explode($separator, $data);
        $personData = array();
        switch ( SAGU::getParameter('BASIC', 'ESTRUTURA_DADOS_SINCRONIZACAO_PESSOA') )
        {
            case 1:
                
                $personData['cpf'] = trim($arrayData[0]);
                $personData['cnpj'] = trim($arrayData[1]);
                $personData['nome'] = trim($arrayData[2]);
                $personData['nomeFantasia'] = trim($arrayData[3]);
                $personData['abreviatura'] = trim($arrayData[4]);
                $personData['email'] = trim($arrayData[5]);
                $personData['emailAlternativo'] = trim($arrayData[6]);
                $personData['url'] = trim($arrayData[7]);
                $personData['cep'] = trim($arrayData[8]);
                $personData['cidade'] = trim($arrayData[9]);
                $personData['estado'] = trim($arrayData[10]);
                $personData['pais'] = trim($arrayData[11]);
                $personData['logradouro'] = trim($arrayData[12]);
                $personData['tipoLogradouro'] = trim($arrayData[13]);
                $personData['numero'] = trim($arrayData[14]);
                $personData['complemento'] = trim($arrayData[15]);
                $personData['bairro'] = trim($arrayData[16]);
                $personData['fone'] = trim($arrayData[17]);
                $personData['fax'] = trim($arrayData[18]);
                $personData['sexo'] = trim($arrayData[19]);
                $personData['dataNascimento'] = trim($arrayData[20]);
                $personData['celular'] = trim($arrayData[21]);
                $personData['nomeMae'] = trim($arrayData[22]);
                $personData['telefoneResidencial'] = trim($arrayData[23]);
                $personData['telefoneTrabalho'] = trim($arrayData[24]);
                $personData['rg'] = trim($arrayData[25]);
                $personData['orgaoExpeditorRg'] = trim($arrayData[26]);
                $personData['nomeCidadeRg'] = trim($arrayData[27]);
                $personData['cepCidadeRg'] = trim($arrayData[28]);
                $personData['nomePaisRg'] = trim($arrayData[29]);
                $personData['dataExpedicao'] = trim($arrayData[30]);
                
                break;

            default:
                break;
        }
        
        return json_encode($busPerson->syncPerson($personData));
    }
    
    /**
     * Recebe as informações de diferenças dos clientes e envia um email com estas
     * 
     * @param String $nomeCliente Nome do cliente
     * @param String $diferencaPadCli Arquivo serializado
     * @param String $diferencaCliPad Arquivo serializado
     */
    public function wsGerenciaDiferencasBaseCliente($nomeCliente, $diferenca, $diferencaExplicita)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->uses("classes/PHPMailer/class.phpmailer.php", "basic");
        $MIOLO->uses("classes/PHPMailer/class.smtp.php", "basic");
        
        $config = array(
            "servidor" => "zimbra.solis.com.br",
            "porta" => 465,
            "seguranca" => "ssl",
            "autenticar" => true,
            "usuario" => "basecliente@solis.com.br",
            "senha" => "BaseSolis@2014",
            "de" => "basecliente@solis.com.br",
            "para" => "basecliente@solis.com.br",
            "assunto" => utf8_encode("Diferenças da base do cliente %s"),
            "mensagem" => utf8_encode("Em anexo seguem os arquivos contendo as"
                                    . " diferenças (as soluções para estas) na"
                                    . " base de dados do cliente %s em relação"
                                    . " à base padrão e vice-versa"),
            "anexos" => array(
                "dif" => "/tmp/dif.sql",
                "difhuman" => "/tmp/dif_explicito.txt"
            )
        );
        
        $mailer = new PHPMailer();
        
        $cliente = utf8_encode($nomeCliente);
        
        $assunto = sprintf($config["assunto"], $cliente);
        $mensagem = sprintf($config["mensagem"], $cliente);
        // Desserializa os arquivos enviados
        file_put_contents($config["anexos"]["dif"], base64_decode($diferenca));
        file_put_contents($config["anexos"]["difhuman"], base64_decode($diferencaExplicita));
        
        // Para usar SMTP
        $mailer->IsSMTP();
        $mailer->SMTPAuth = $config["autenticar"];
        $mailer->SMTPSecure = $config["seguranca"];
        $mailer->Host = $config["servidor"];
        $mailer->Username = $config["usuario"];
        $mailer->Password = $config["senha"];
        $mailer->CharSet = "UTF-8";
        $mailer->Port = $config["porta"];
        $mailer->SetFrom($config["de"], $cliente);
        $mailer->AddAddress($config["para"], "Base clientes");
        $mailer->Subject = $assunto;
        $mailer->Body = $mensagem;
        // Adiciona os arquivos "restaurados"
        $mailer->AddAttachment($config["anexos"]["dif"]);
        $mailer->AddAttachment($config["anexos"]["difhuman"]);
        
        // Envia o email
        if( !$mailer->Send() )
        {
            return $mailer->ErrorInfo;

        }

        return true;
        
    }
    
    /**
     * Recebe um login de usuário para autenticação do SAGU.
     * Se autenticar retorna um hash MD5 para ser usado como forma de 
     * autenticação no SAGU.
     *
     * @param string $user - Usuário
     * @param string $password - Senha do usuário
     * 
     * @return - Autenticando retorna um hash MD5, senão retorna false
     */
    public function wsLogin($user, $password)
    {
        // Se falhar vai retornar false
        $return = false;
        
        // Autentica
        if ( $this->MIOLO->auth->Authenticate($user, $password) )
        {
            $webServiceLogin = new BasWebServiceLogin();
            
            // Calcula validade
            $tempo= date(SAGU::getParameter('BASIC', 'MASK_TIMESTAMP_PHP'));
            $minutosDeValidade = SAGU::getParameter('BASIC', 'TEMPO_DE_VALIDADE_WS_LOGIN');
            $validade = SAGU::addIntervalInTimestamp($tempo, 'mi', $minutosDeValidade, '+');
            
            // Pega o hash em MD5
            $return = $hash = md5(openssl_random_pseudo_bytes(128));
            
            // Salva na base
            if ( !$webServiceLogin->insert($user, $validade, $hash) )
            {
                throw new Exception(_M("Não foi possível gerar o login na base de dados do SAGU."));
            }
        }
        
        return $return;
    }

    /**
     * Desloga o usuário (invalida o hash) do SAGU.
     * 
     * @param string $login
     */
    public function wsLogout($login)
    {
        $webServiceLogin = new BasWebServiceLogin();
        
        return $webServiceLogin->invalidarHash($login);
    }
    
    /**
     * Recebe um groupId () e um objeto contendo informacoes sobre sobre nota ou conceito de uma disciplina oferecida
     * entao lanca essas informacoes na base e fecha a turma
     * 
     * @param string $groupId
     * @param strinf serialize $objMatricula
     * @return boolean
     * @throws Exception
     */
    
    public function wsfecharDisciplinaOferecida($groupId, $objMatricula, $login = null, $password = null, $unitId = null)
    {
        //Verificacao de multiunidade
        $busUser = new BusinessAdminBusUser();
        $user = $busUser->getUserByLogin($login);
        $userId = $user->idUser;        
        $multiUnidadeAtiva = sMultiUnidade::estaHabilitada();
        $autorizado = false;
        
        //Verifica se foi informado o groupId e um objeto (obrigatorios)
        try
        {
            if ( !strlen($groupId) > 0 || !strlen($objMatricula) > 0 )
            {
                throw new Exception("Erro nas informações principais");
            }
        }
        catch ( Exception $exc )
        {
            $msgInicial = "Dados principais inválidos, por favor, verifique se você informou um 'código de disciplina ferecida' (groupId) e um 'objeto' contendo informações para lançamento de notas e fechamento de disciplina.";
            return new SoapFault("Server", $msgInicial);
        } 
        
        //SE foi informado um usuario, tambem DEVE ser informado uma senha, ou vice versa e ainda 
        //deve ser informado ambos caso tiver multiunidade habilitada
        try
        {
            if ( $multiUnidadeAtiva )
            {
                if ( (strlen($login) > 0 && !strlen($password) > 0) || (!strlen($login) > 0 && strlen($password) > 0) || (!strlen($login) > 0 && !strlen($password) > 0) )
                {
                    throw new Exception("Erro, deve informar usuario e senha ou nenhum");
                }
            }
        }
        catch ( Exception $exc )
        {
            $msgInicial = "A Multiunidade esta habilitada, por favor informe um login e uma senha válidos antes de continuar.";
            return new SoapFault("Server", $msgInicial);
        }

        if( strlen($login) > 0 && strlen($password) > 0 )
        {
            //obtem um numero de hash para o logon, se nao conseguiu eh porque a senha ou o usuario estao errados
            $hash = $this->wsLogin($login, $password); 
            try
            {
                if ( !strlen($hash) > 0 )
                {
                    throw new Exception("Erro ao gerar hash");
                }
            }
            catch ( Exception $exc )
            {
                $msgHash = "Não foi possível efetuar logon no sistema, por favor verifique o usuário e a senha informados antes de continuar.";
                return new SoapFault("Server", $msgHash);
            }
            

            //Se foi informado uma UnidadeId vai definir-la como logada
            if ( strlen($unitId) > 0 ) 
            {
                $ativarUnidade = sMultiUnidade::definirUnidadeLogada($unitId);
                $autorizado = true;
            }
            else //Se nao foi informado uma unidadeId vai obter da base usando o "UserId"
            {
                $unit = sMultiUnidade::obterUnidadesDoUsuario($userId);

                foreach($unit as $cod => $descricao)
                {
                    if( is_null($unitid) )
                    {
                        $unitId = $cod;
                    }
                }
                //Definir a unidade obtida como logada
                $ativarUnidade = sMultiUnidade::definirUnidadeLogada($unitId);
                $autorizado = true;                        
            }
            $idGroup = '1'; //Codigo do usuario ADMIN da 'miolo_groupuser'
            $transaction = 'FrmGradesTyping';
            
            $permissaoDeAcesso = $this->checkAutorizacaoDeAcesso($login, $idGroup, $transaction);
            
            try
            {
                if ( !$permissaoDeAcesso )
                {
                    throw new Exception("Erro de permissao de acesso");
                }
            }
            catch ( Exception $exc )
            {
                $msgAcesso = "O usuario informado não possui autorização para acessar essa transação, por favor verifique os dados informados antes de continuar.";
                return new SoapFault("Server", $msgAcesso);
            }
            
        }
        //verificar problema de logon
        if ( $multiUnidadeAtiva == DB_FALSE ) 
        {
            $autorizado = true;
        }

        //Se tiver tudo certo quanto ao logon (user e password)
        if ( $autorizado )
        {
            $objMatricula = unserialize($objMatricula); //necessario para montar array do $objMatricula sem erros
            $isWebServices = true; //definir que esta usando webServices
            $busEnroll = new BusinessAcademicBusEnroll(); // usada para as frequencias
            
            //Verifica se o "groupId" que veio do objeto eh valido
            try 
            {
                $checkGroup = $busEnroll->checkGroupId($groupId, $isWebServices);
                if ( !$checkGroup )
                {
                    throw new Exception("Erro, groupId informado nao existe na base da dados");
                }
            }
            catch ( Exception $exc )
            {
                $msgGroupId = "O código da disciplina oferecida (groupId) '". $groupId . "' que foi informado não existe na base de dados, por favor verifique todos os dados informados antes de continuar.";
                return new SoapFault("Server", $msgGroupId);
            }

            //Dados
            $busDegree = new BusinessAcademicBusDegree();
            $busDegreeEnrol = new BusinessAcademicBusDegreeEnroll();            
            $busGroup = new BusinessAcademicBusGroup(); //usado para fechar a disciplina
            $busLearningPeriod = new BusinessAcademicBusLearningPeriod();
            $busEnrollStatus = new BusinessAcademicBusEnrollStatus(); //para o status (aprovado, reprovado, reprovado por faltas...)
            $notaMaxima = $busLearningPeriod->obterNotaMaximaDaDisciplina($groupId);
            $degreeData = $busDegree->searchDegreeDescription($groupId, $multiUnidadeAtiva);

            //////DAQUI  AS DEMAIS VERIFICACOES
            foreach ( $objMatricula as $key => $value )
            {
                $dadosObj = $objMatricula[$key]; //Objeto recebido do webservices
                $enrollId = $key; //obtem o enrollId que veio do objeto
                
                if ( $dadosObj['MÉDIA FINAL']['NOTA'] != NULL ||  $dadosObj['NOTA FINAL']['NOTA'] != NULL || $dadosObj['PROVA FINAL']['NOTA'] != NULL )
                {
                    $mediaFinal = $dadosObj['MÉDIA FINAL']['NOTA'];
                    $notaFinal = $dadosObj['NOTA FINAL']['NOTA'];
                    $provaFinal = $dadosObj['PROVA FINAL']['NOTA'];
                }
                elseif ( $dadosObj['MÉDIA FINAL']['CONCEITO'] != NULL ||  $dadosObj['NOTA FINAL']['CONCEITO'] != NULL || $dadosObj['PROVA FINAL']['CONCEITO'] != NULL )
                {
                    $mediaFinal = $dadosObj['MÉDIA FINAL']['CONCEITO'];
                    $notaFinal = $dadosObj['NOTA FINAL']['CONCEITO'];
                    $provaFinal = $dadosObj['PROVA FINAL']['CONCEITO'];
                }

                //Verifica se o "enrollId" que veio do objeto eh valido
                try 
                {
                    $checkEnroll = $busEnroll->checkEnroll($enrollId, $isWebServices);
                    if ( !$checkEnroll )
                    {
                        throw new Exception("Erro, enrollId informado nao existe na base da dados");
                    }
                }
                catch ( Exception $exc )
                {
                    $msgEnrollId = "A matrícula (enrollId) ". $enrollId . "' que foi informado não existe na base de dados, por favor verifique todos os dados informados antes de continuar.";
                    return new SoapFault("Server", $msgEnrollId);
                }

                //Se foi foi informado nota final
                try 
                {
                    if ( !strlen($provaFinal) > 0  || ! $notaFinal < 0 || !$mediaFinal < 0 )
                    {
                        throw new Exception("Erro na informação da nota/media/prova final");
                    }
                }
                catch ( Exception $exc )
                {
                    $msgFrequencia = "É necessário informar um tipo de NOTA FINAL, MÉDIA FINAL ou PROVA FINAL para a matrícula (enrollId) " . $enrollId . ", por favor verifique todos os dados informados antes de continuar.";
                    return new SoapFault("Server", $msgFrequencia);
                }

                //se esta configurado nota maxima verifica se a maxima corresponde
                if ( strlen($notaMaxima) > 0 )
                {
                    try //PROVA FINAL
                    {
                        if ( $provaFinal > $notaMaxima )
                        {
                            throw new Exception("Erro na informação da nota/media/prova final");
                        }
                    }
                    catch ( Exception $exc )
                    {
                        $msgMaxima = "A PROVA FINAL excede a nota máxima permitida de " . $notaMaxima . ", por favor verifique todos os dados informados antes de continuar.";
                        return new SoapFault("Server", $msgMaxima);
                    }
                    try // NOTA FINAL
                    {
                        if ( $notaFinal > $notaMaxima )
                        {
                            throw new Exception("Erro na informação da nota/media/prova final");
                        }
                    }
                    catch ( Exception $exc )
                    {
                        $msgMaxima = "A NOTA FINAL excede a nota máxima permitida de " . $notaMaxima . ", por favor verifique todos os dados informados antes de continuar.";
                        return new SoapFault("Server", $msgMaxima);
                    }
                    try // MEDIA FINAL
                    {
                        if ( $mediaFinal > $notaMaxima )
                        {
                            throw new Exception("Erro na informação da nota/media/prova final");
                        }
                    }
                    catch ( Exception $exc )
                    {
                        $msgMaxima = "A MÉDIA FINAL excede a nota máxima permitida de " . $notaMaxima . ", por favor verifique todos os dados informados antes de continuar.";
                        return new SoapFault("Server", $msgMaxima);
                    }
                }
            }

            //DEMAIS VERIFICACOES DE FREQUENCIA E NOTAS PASSADAS
            foreach ( $degreeData as $val => $id)
            {
                //foreach que processa os dados que vieram do objeto
                foreach ( $objMatricula as $key => $value )
                {
                    //dados
                    $degreeId = $degreeData[$val][0]; // codigo da nota, presenca, media... da base
                    $degreeDescription = $degreeData[$val][1]; //descricao da base
                    $dadosObj = $objMatricula[$key]; //Objeto recebido do webservices
                    $dadosDegree = $busDegree->getDegree($degreeId);
                    $learningPeriodId = $dadosDegree->learningPeriodId;
                    $dadosLearnigPeriod = $busLearningPeriod->getLearningPeriod($learningPeriodId, $isWebServices);                
                    $periodoFechado = $dadosLearnigPeriod->isClosed;
                    $enrollId = $key; //obtem o enrollId que veio do objeto
                    
                    //Verifica se o percentual de frequencia foi informado e se eh no maximo 100 (ja que frequencia eh percentual)
                    try
                    {
                        if ( !strlen($dadosObj['FREQUENCIA']) > 0 )
                        {
                            throw new Exception("Erro na informação da frequencia");

                        }
                    }
                    catch ( Exception $exc )
                    {
                        $msgFrequencia = "A FREQUENCIA para a matrícula (enrollId)  " . $enrollId . " não foi informada ou é inválida, por favor verifique todos os dados informados antes de continuar.";
                        return new SoapFault("Server", $msgFrequencia);
                    }
                    
                    //Verifica se foi informado situacao para a matricula (aprovado, reprovado, ...)
                    try
                    {
                        if ( !strlen($dadosObj['SITUACAO']) > 0)
                        {
                            throw new Exception("Erro na informação da situacao");

                        }
                    }
                    catch ( Exception $exc )
                    {
                        $msgFrequencia = "A SITUACAO para a matrícula (enrollId) " . $enrollId . " não foi informada, por favor verifique todos os dados informados antes de continuar.";
                        return new SoapFault("Server", $msgFrequencia);
                    }

                    //Verifica integridade das notas menores (nota 1, nota 2...)
                    try
                    {
                        if ( strlen($notaMaxima) > 0 )
                        {
                            if( ($dadosObj[$degreeDescription]['NOTA'] > $notaMaxima || $dadosObj[$degreeDescription]['NOTA'] < 0) )
                            {
                               throw new Exception("Erro na informação da nota");
                            }
                        }
                    }
                    catch ( Exception $exc )
                    {
                        $msgNota = "A '" . $degreeDescription . "' infomada para a matrícula (enrollId) " . $enrollId . " de '" . $dadosObj[$degreeDescription]['NOTA'] . "' é inválida, nota máxima permitida é '" . $notaMaxima ."', por favor verifique todos os dados informados antes de continuar.";
                        return new SoapFault("Server", $msgNota);
                    }

                } //fim do foreach $objMatricula
            }
            
            /////verificar disciplina fechada ou aberta
            $dadosBusGroup = $busGroup->getGroup($groupId);
            $disciplinaFechada = $dadosBusGroup->isClosed;

            //Se a disciplina estiver fechada (true) vai reabrir para processar os dados
            if ( $disciplinaFechada == DB_TRUE ) // vai tornar FALSE
            {
                $busGroup->reopenGroup($groupId, $isWebServices);
                $disciplinaFechada = $dadosBusGroup->isClosed;
                
                try
                {
                    if ( !$disciplinaFechada )
                    {
                        throw new Exception("Erro ao reabrir a disciplina");
                    }
                }
                catch ( Exception $exc )
                {
                    $msgFechamento = "Ocorreu um erro ao reabrir a disciplina ". $groupId .".";
                    return new SoapFault("Server", $msgFechamento);
                }

            }
            
            //CHEGOU AQUI SEM ERROS EH HORA DE SALVAR OS DADOS
            //Atualizar a frequencia e situacao (statusId)
            foreach ( $objMatricula as $key => $value )
            {
                $dadosObj = $objMatricula[$key]; //Objeto recebido do webservices
                $enrollId = $key; //obtem o enrollId que veio do objeto
                
                //obtem os dados da BusEnroll pela matricula do objeto
                $dadosBusEnroll = $busEnroll->getEnroll($enrollId, $isWebServices);
                
                //Se tiver frequencia vai atualizar
                if ( strlen($dadosObj['FREQUENCIA']) > 0 )
                {
                    $dadosBusEnroll->frequency = $dadosObj['FREQUENCIA'];
                    $dadosBusEnroll->description = 'NOTA INSERIDA PELO USUÁRIO';

                    //Fazer o update
                    $busEnroll->updateEnroll($dadosBusEnroll);
                }
                if ( strlen($dadosObj['SITUACAO']) > 0 )
                {
                    $dadosStatus = $busEnrollStatus->listEnrollStatus();
                    $sit = $dadosObj['SITUACAO'];

                    //obter o statusId para salvar a SITUACAO
                    foreach ( $dadosStatus as $cods => $descs )
                    {
                        //Comparar a situacao que veio com os status da base
                        if ( $sit == $dadosStatus[$cods][1])
                        {
                            $dadosBusEnroll->statusId = $dadosStatus[$cods][0];
                            $dadosBusEnroll->forceStatusId = $dadosStatus[$cods][0];
                        }
                    }
                    
                    $dadosBusEnroll->description = 'NOTA INSERIDA PELO USUÁRIO';
                    
                    //Fazer o update
                    $busEnroll->updateEnroll($dadosBusEnroll);
                }
                if ( strlen($dadosObj['NOTA FINAL']['NOTA']) > 0 )
                {
                    $dadosBusEnroll = $busEnroll->getEnroll($enrollId, $isWebServices);
                    $dadosBusEnroll->finalNote = $dadosObj['NOTA FINAL']['NOTA'];
                    $dadosBusEnroll->description = 'NOTA INSERIDA PELO USUÁRIO';
                    
                    //Fazer o update
                    $busEnroll->updateEnroll($dadosBusEnroll);
                }
            }
            
            //Processar as notas e salvar
            foreach ( $degreeData as $val => $id)
            {
                //foreach que processa os dados que vieram do objeto
                foreach ( $objMatricula as $key => $value )
                {
                    //dados
                    $degreeId = $degreeData[$val][0];
                    $degreeDescription = $degreeData[$val][1];
                    $dadosObj = $objMatricula[$key];                
                    $dadosDegree = $busDegree->getDegree($degreeId);
                    $learningPeriodId = $dadosDegree->learningPeriodId;
                    $dadosLearnigPeriod = $busLearningPeriod->getLearningPeriod($learningPeriodId, $isWebServices);                
                    $periodoFechado = $dadosLearnigPeriod->isClosed;
                    $enrollId = $key; //obtem o enrollId que veio do objeto
                    
                    $dados = new stdClass();
                    $dados->degreeId = $degreeId;
                    $dados->enrollId = $enrollId;
                    $dados->description = 'NOTA INSERIDA PELO USUÁRIO';

                    //Se for por nota entra aqui para pegar os dados das notas
                    if ( ($dadosObj[$degreeDescription]['NOTA']) != null )
                    {
                        
                        if ( $degreeDescription == 'MÉDIA PARCIAL' ) 
                        {
                            $dados->note = $dadosObj[$degreeDescription]['NOTA'];
                        }
                        elseif ( $degreeDescription == 'MÉDIA FINAL' ) 
                        {
                            $dados->note = $dadosObj[$degreeDescription]['NOTA'];
                        }
                        elseif ( $degreeDescription == 'PROVA FINAL' ) 
                        {
                            $dados->note = $dadosObj[$degreeDescription]['NOTA'];
                        }
                        elseif ( $degreeDescription == 'NOTA FINAL' ) 
                        {
                            $dados->note = $dadosObj[$degreeDescription]['NOTA'];
                            $dados->finalnote = $dadosObj[$degreeDescription]['NOTA'];
                        }
                        elseif ( $degreeDescription == 'PROVA FINAL' ) 
                        {
                            $dados->examnote = $dadosObj[$degreeDescription]['NOTA'];
                        }
                        $dados->note = $dadosObj[$degreeDescription]['NOTA'];
                        $dados->concept;
                        $useConcept = false;
                    }//se for conceito entra aqui para pegar os dados das notas
                    elseif ( ($dadosObj[$degreeDescription]['CONCEITO']) != null ) 
                    {
                        if ( $degreeDescription == 'MÉDIA PARCIAL' ) 
                        {
                            $dados->note = $dadosObj[$degreeDescription]['CONCEITO'];
                        }
                        elseif ( $degreeDescription == 'MÉDIA FINAL' ) 
                        {
                            $dados->note = $dadosObj[$degreeDescription]['CONCEITO'];
                        }
                        elseif ( $degreeDescription == 'PROVA FINAL' ) 
                        {
                            $dados->note = $dadosObj[$degreeDescription]['CONCEITO'];
                        }
                        elseif ( $degreeDescription == 'NOTA FINAL' ) 
                        {
                            $dados->note = $dadosObj[$degreeDescription]['CONCEITO'];
                            $dados->finalnote = $dadosObj[$degreeDescription]['CONCEITO'];
                        }
                        elseif ( $degreeDescription == 'PROVA FINAL' ) 
                        {
                            $dados->examnote = $dadosObj[$degreeDescription]['NOTA'];
                        }                        
                        $dados->note;
                        $dados->concept = $dadosObj[$degreeDescription]['CONCEITO'];
                        $dados->finalnote = $dadosObj['NOTA FINAL']['CONCEITO'];

                        $useConcept = true;
                    }
                    $dados->recordDate = SAGU::getDateNow('Y-m-d H:i:s');

                    //Inserir ou atualizar os dados passados
                    $busDegreeEnrol->insertOrUpdateDegreeEnroll($dados, $useConcept);
                }//fim do foreach2
            }//fim do foreach1
            
            //Fechar a disciplina
            $busGroup->closeGroup($groupId, $isWebServices);
            
            //Faz nova verificacao se discilplina esta fechada
            $dadosBusGroupFinal = $busGroup->getGroup($groupId);
            $disciplinaFechadaFinal = $dadosBusGroupFinal->isClosed;
            
            if ( $disciplinaFechadaFinal == DB_FALSE )
            {
                $busGroup->closeGroup($groupId, $isWebServices);
                $disciplinaFechadaFinal = $dadosBusGroup->isClosed;
            }

            try
            {
                throw new Exception("Sucesso!");
            }
            catch ( Exception $exc )
            {
                $msgSucess = "Disciplina encerrada e os dados salvos com sucesso!";
                return new SoapFault("Server", $msgSucess);
            }
        }
    }
    
    /**
     * Verifica se o usuario informado esta habilitado para acessar o sistema
     * conforme os dados informados
     * 
     * @param type $idUser
     * @param type $idGroup // Ex: '1' que eh o idGroup do grupo ADMIN
     * @param type $transaction //Ex: 'FrmGradesTyping' que eh o nome da transacao para acesso a ela
     * @return boolean
     */
    
    public function checkAutorizacaoDeAcesso($login, $idGroup, $transaction)
    {
        $sqlIduser = "SELECT idUser
                        FROM miolo_user
                       WHERE login = ?";
        $resultIduser = SDatabase::query($sqlIduser, $login, FALSE);

        if ( strlen($resultIduser[0][0]) > 0 )
        {
            $sqlIdgroup = "SELECT idGroup
                         FROM miolo_groupuser 
                        WHERE idUser = ?
                          AND idGroup IN (?)
                     GROUP BY idGroup";
            $paramsIdgroup = array($resultIduser[0][0], $idGroup);
            $resultIdgroup = SDatabase::query($sqlIdgroup, $paramsIdgroup);

            $sqlIdtransaction = "SELECT idTransaction
                                   FROM miolo_transaction
                                  WHERE m_transaction = ?";

            $resultTransaction = SDatabase::query($sqlIdtransaction, $transaction, FALSE);

            if ( strlen($resultIduser[0][0]) > 0 &&  strlen($resultIdgroup[0][0]) > 0 && strlen($resultTransaction[0][0]) > 0 )
            {
                return TRUE;            
            }
            else
            {
                return FALSE;
            }
        }
        else
        {
            return FALSE;
        }
        
        
    }
}

?>