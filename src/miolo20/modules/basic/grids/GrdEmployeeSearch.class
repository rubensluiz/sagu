<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for basEmployee table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 12/09/2005
 *
 **/

/**
 * Grid used by form to display search results
 **/
class GrdEmployeeSearch extends MGrid
{
    /**
     * Class constructor
     **/
    public function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();
        $home = 'main:person:person:employee';
        $module = MIOLO::getCurrentModule();

        /*
         * MGridColumn constructor parameters:
         *    $title = ''
         *    $align = 'left'
         *    $nowrap = false
         *    $width = 0
         *    $visible = true
         *    $options = null
         *    $order = false
         *    $filter = false
         */
        $columns = array(
                          new MGridColumn('', 'left', false, 0, false),
                          new MGridColumn( _M('Código da pessoa', $module),   'right', true, null, true, null, true ),
                          new MGridColumn( _M('Nome', $module),        'left',  true, null, true, null, true ),
                          new MGridColumn('', 'left', false, 0, false),
                          new MGridColumn('', 'left', false, 0, false),
                          new MGridColumn( _M('Descrição', $module), 'left',  true, null, true, null, true )
                        );

        $opts = array('function'   => 'update',
                      'employeeId' => '%0%');
        $href_edit = $MIOLO->getActionURL( $module, $home, null, $opts );
        $opts = array('function'   => 'delete',
                      'employeeId' => '%0%',
                      'event'=>'tbBtnDelete_click');
        $href_delete = $MIOLO->getActionURL( $module, $home, null, $opts );

        // this foreach is necessary until the getActionURL function is
        // able to handle an object parameter
        unset($opts);
        foreach ( $filters as $k => $v )
        {
            $opts[$k] = $v;
        }
        $url = $MIOLO->getActionURL($module,"$home:search",null,$opts);
        parent::__construct( null, $columns, $url, SAGU::getParameter('BASIC', 'LISTING_NREGS'), 0, 'gridEmployee' );

        $this->setIsScrollable();

        $this->addActionUpdate( $href_edit );

        if ( SAGU::getParameter('BASIC', 'INCREASE_SECURITY_LEVEL') == 'NO' )
        {
            $this->addActionDelete( $href_delete );
        }

        $this->eventHandler();
    }
}
?>
