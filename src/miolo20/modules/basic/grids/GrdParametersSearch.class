<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file creates a grid to show the basReportParameter's registers
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 01/07/2008
 *
 **/

/**
 * Grid used by form to display search results
 **/
class GrdParametersSearch extends MGrid
{
    /**
     * Class constructor
     **/
    public function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();
        $home = 'main:config:genericReports';
        $module = MIOLO::getCurrentModule();

        $columns = array(
                          new MGridColumn( _M('Código', $module),     'right', true, null, false, null, true ),
                          new MGridColumn( _M('Número do parâmetro', $module), 'right',  true, null, true, null, true ),
                          new MGridColumn( _M('Rótulo', $module), 'left',  true, null, true, null, true ),
                          new MGridColumn( _M('Tipo do campo', $module), 'left',  true, null, true, null, true ),
                          new MGridColumn( _M('Valor padrão', $module),    'left',  true, null, true, null, true ),
                          new MGridColumn( _M('Tamanho', $module),     'right', true, null, false, null, true ),
                          new MGridColumn( _M('Validador', $module), 'left',  true, null, true, BusinessBasicBusGenericReports::listarValidadores(), true ),
                          new MGridColumn( _M('Dica', $module), 'left',  true, null, false, null, true ),
                          new MGridColumn( _M('Colunas', $module), 'right',  true, null, false, null, true ),
                          new MGridColumn( _M('Linhas', $module),    'right',  true, null, false, null, true ),
                          new MGridColumn( _M('Opções fixas', $module), 'left',  true, null, false, null, true ),
                          new MGridColumn( _M('Opções', $module), 'left',  true, null, false, null, true ),
                          new MGridColumn( _M('Ajuda', $module), 'left',  false, null, true, null, true ),
                        );

        $opts = array(//função javascript,
                      'reportParameterId'=>'%0%');
        $href_edit = 'javascript:updateParameter(%0%)';
        $opts = array(//função javascript,
                      'reportParameterId'=>'%0%');
        $href_delete = $MIOLO->getActionURL( $module, $home, null, $opts );

        // this foreach is necessary until the getActionURL function is
        // able to handle an object parameter

        $url = $MIOLO->getActionURL($module, "$home:search", null, $opts);
        parent::__construct( null, $columns, $url, SAGU::getParameter('BASIC', 'LISTING_NREGS'), 0, 'gridParameters' );
        $this->setLinkType('hyperlink');
        $this->setRowMethod($this, 'myRowMethod');
        $this->setIsScrollable(false);

        $this->addActionUpdate( NULL );
        $this->addActionDelete( NULL );

        $this->eventHandler();

    }

    public function myRowMethod($i, $row, $actions, $columns)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $actions[0]->href = 'javascript:updateParameter(' . $i . ')';
        $actions[1]->href = 'javascript:deleteParameter(' . $i . ')';
    }
}
?>
