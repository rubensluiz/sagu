<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Tema SModern.
 *
 * @author Daniel Hartmann [daniel] [daniel@solis.coop.br]
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Daniel Hartmann [daniel@solis.coop.br]
 * 
 * @since
 * Class created on 02/01/2011
 *
 */
class Theme extends MTheme
{
    public function __construct()
    {
        parent::__construct('smodern');
    }

    public function init()
    {
        $this->manager->getPage()->addStyle('miolo.css');
        $this->manager->getPage()->addScript('dojoroot/config.js');
        $this->manager->getPage()->addScript('dojoroot/dojo/dojo.js');

        if ( strlen((string) $this->manager->getConf('theme.client')) )
        {
            $this->manager->getPage()->addStyle( $this->manager->getConf('theme.client') .'.css' );
        }

        MToolBarButton::setType(MToolBarButton::TYPE_ICON_TEXT);
        
        $ui = $this->manager->GetUI();

        // navigation
        $this->setElement('navigation', new MNavigationBar(), 'm-container-topmenu');
    }

    public function generate($element='')
    {
        $method = "generate" . $this->layout;
        $this->manager->trace("Theme generate: " . $method);
        return $this->$method($element);
    }

    public function generateDefault($element)
    {
        // main menu
        $menu = new SMainMenu('mioloMainMenu');
        $this->setElement('top', $menu, 'm-container-top');

        $action = $this->manager->getPage()->action;
        $formID = $this->manager->getPage()->name;
        $loadingMessage = _M('Carregando', 'sagu2');

        // bottom
        $statusBar = new SStatusBar();
        $this->SetElement('bottom', $statusBar, 'm-container-bottom');

        // menus
        if ( $this->manager->GetConf('options.mainmenu') == 2 )
        {
            $idModule = 'm-container-module';
            $idMenu = 'm-container-dhtmlmenu';
        }
        else if ( $this->manager->GetConf('options.mainmenu') == 3 )
        {
            $idModule = 'm-container-module2';
            $needTable = true;
        }
        else
        {
            $idMenu = 'm-container-menu';
        }

        $this->SetElementId('menus', $idMenu);

        // content
        $idContent = ( ($this->manager->GetConf('options.mainmenu') == 2) || ($this->manager->GetConf('options.mainmenu') == 3) ) ? 'm-container-content-full' : 'm-container-content';
        $this->SetElementId('content', $idContent);

        $html = <<<HTML
<script type="text/javascript">
MIOLO_loadDeps();
MIOLO_configureHistory("$action");
dojo.addOnLoad(MIOLO_initHistory);
</script>
        
<div id="divSaguMessages" style="display: none;">
    <div id="divSaguMessagesContent"></div>
</div>

<div id="m-loading-message-bg" onclick="javascript:hideLoadingDiv()"></div>
<div id="m-loading-message" onclick="javascript:hideLoadingDiv()">
<div id="m-loading-message-image">
<div id="m-loading-message-text">$loadingMessage...</div>
</div>
</div>

<div id="{$formID}__scripts" dojoType="dojox.layout.ContentPane" layoutAlign="client" executeScripts="true" cleanContent="true">
</div>
<div id="$formID" dojoType="dojox.layout.ContentPane" layoutAlign="client" executeScripts="true" cleanContent="true">
</div>
HTML;

        $html .= $this->GenerateElement('top');

        $this->SetElementId('toolbar', 'm-toolbar');
        $html .= $tb = $this->GenerateElement('toolbar');

        $html .= '<div id="extContent">';
        $html .= $this->GenerateElement('content') . SDatabase::getDebugTable();
        $html .= '</div>';

        $html .= '<div id="extBottom" style="visibility: visible; position: fixed; bottom:0; width: 100%">';
        $html .= $this->GenerateElement('bottom');
        $html .= '</div>';

        $html .= '
<script type="text/javascript">
configureToolbar = function () {
    var toolbar = dojo.byId("toolBar");

    if ( !toolbar )
    {
        toolbar = dojo.byId("toolbar");
    }

    if ( !toolbar )
    {
        dojo.destroy(dojo.byId("m-toolbar"));
    }
    else if ( dojo.byId("m_toolBar") )
    {
        tb = dojo.byId("m_toolBar");
        dojo.byId("m-toolbar").innerHTML = tb.innerHTML;
        tb.innerHTML = "";
    }

    var buttons = dojo.query(".m-toolbar-button");
};

dojo.addOnLoad(configureToolbar);


/**
* Caso esteja no site adiciona classe site no css do tema
*/
function inSite()
{
    //Try adicionado porque no Firefox window.parent.location.href retorna uma exessão
    var result = true;
    try
    {
        if ( window.parent.location && window.parent.location.href == undefined )
        {        
            document.body.className = "site";
        }
    }
    catch (e)
    {
        if( dojo.isMozilla )
        {
            document.body.className = "site";
        }
        result = false;
    }
}

function hideLoadingDiv()
{
    var bg = document.getElementById("m-loading-message-bg");
    var fg = document.getElementById("m-loading-message");

    if ( bg != null )
    {
        bg.style.display = "none";
    }

    if ( fg != null )
    {
        fg.style.display = "none";
    }
}

inSite();

</script>
';


        return $this->painter->div(new Div('m-container', $html));
    }

    public function generateDynamic($element)
    {
        $elements[$element . '_content'] = $this->generateContent();
        if ( $this->hasMenuOptions() )
        {
            $elements[$element . '_menu'] = $this->generateMenu();
        }

        return $elements;
    }

    public function generateWindow()
    {
        $webForm = $this->getWebForm('window.php');
        $formId = $this->manager->getPage()->getFormId();
        $elements[$formId] = $webForm->generate();
        return $elements;
    }

    public function generateLookup()
    {
        // only 'content' element
        $html = $this->generateElement('content');
        $div = new MDiv('m-container', $html);
        $div->addStyle('width', '100%');
        return $this->painter->generateToString($div);
    }

    public function generatePopup()
    {
        $page = $this->manager->getPage();
        $this->setElementId('content', 'm-theme-container-contentpopup');
        $html = $this->generateElement('content');
        $divContainer = new MDiv('', $html, 'm-container');
        $divContainer->addStyle('width', '100%');
        return $this->painter->generateToString($divContainer);
    }

    public function generatePrint()
    {
        $this->generateDefault();
    }

    public function generateDOMPdf()
    {
        // only 'content' element
        $html = $this->generateElement('content');
        $div = new MDiv('m-theme-container', $html);
        $div->addStyle('width', '100%');
        return $this->painter->generateToString($div);
    }
}

?>
