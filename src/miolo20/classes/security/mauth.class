<?
class MAuth extends MService
{
    var $login;  // objeto Login
    var $iduser; // iduser do usuario corrente
    var $module; // authentication module;

    function __construct()
    {
        parent::__construct();
        $this->module = $this->manager->GetConf('login.module');
    }

    function SetLogin($login)
    {
        $this->manager->session->SetValue('login', $login);
        $this->login = $GLOBALS['login'] = $this->manager->login = $login;
        $this->iduser = ($this->login instanceof MLogin ? $this->login->id : NULL);
    }

    function GetLogin()
    {
        return $this->login;
    }

    function CheckLogin()
    {
        $this->manager->LogMessage('[LOGIN] CheckLogin');

        // we have a session login?
        $login = $this->manager->session->GetValue('login');

        if ($login->id)
        {
            $this->manager->LogMessage('[LOGIN] Using session login');
            $this->SetLogin($login);
            return true;
        }

        // if not checking logins, we are done
        if ( (!MUtil::getBooleanValue($this->manager->GetConf('login.check'))) )
        {
            $this->manager->LogMessage('[LOGIN] Not checking login');
            return true;
        }

        // if we have already a login, assume it is valid and return
        if ($this->login instanceof MLogin)
        {
            $this->manager->LogMessage('[LOGIN] Using existing login:' . $this->login->id);
            return true;
        }

        // still no login -- should we do an automatic login?
        if ( ($auto = $this->manager->GetConf('login.auto')) && $this->manager->GetConf("login.$auto.id") )
        {
            $this->manager->LogMessage('[LOGIN] Using automatic login ' . $auto);

            $login = new MLogin($this->manager->GetConf("login.$auto.id"),
                                $this->manager->GetConf("login.$auto.password"),
                                $this->manager->GetConf("login.$auto.name"),
                                0);

            $this->SetLogin($login);

            return true;
        }

        $this->manager->LogMessage('[LOGIN] No Login but Login required');
        $this->manager->invokeHandler($this->manager->getConf('login.module'),'login');

        //var_dump($login);

        /*
        if (!$this->IsLogging())
        {
            throw new ELoginException('Para continuar usando o sistema é necessário que você se identifique novamente.');
        }
        */
        return false;
    }

    function Authenticate($user, $pass)
    {
        return false;
    }

    function IsLogged()
    {
        return ($this->login->id != NULL);
    }

    function IsLogging()
    {
        $context = $this->manager->GetContext();
        $isLogging = (($context->module == NULL) || (($context->module == $this->module) && (($context->action == 'main') || ($context->action == 'login') || ($context->action == 'auth'))));
        return $isLogging;
    }

    function Logout($forced = '')
    {
        if ($this->manager->GetConf("dbsession"))
        {
            $session = $this->manager->GetBusinessMAD('session');
            $session->RegisterOut($this->GetLogin());
        }

        $this->SetLogin(NULL);
        $this->manager->GetSession()->destroy();
    }
}
?>
