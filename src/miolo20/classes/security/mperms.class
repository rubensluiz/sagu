<?
class MPerms extends MService
{
    private $auth;
    public  $perms;

    function __construct()
    {
        parent::__construct();
        $this->auth = $this->manager->GetAuth();
        $this->perms = array
            (
            A_ACCESS  => "SELECT",
            A_INSERT  => "INSERT",
            A_DELETE  => "DELETE",
            A_UPDATE  => "UPDATE",
            A_EXECUTE => "EXECUTE",
            A_ADMIN   => "SYSTEM"
            );
    }

    function CheckAccess($transaction, $access, $deny = false)
    {
        if ($this->auth->IsLogged())
        {
            $login       = $this->auth->GetLogin();  // MLogin object
            $transaction = strtoupper($transaction); // Transaction name
            $isAdmin     = $login->IsAdmin(); // Is administrator?
            $rights      = (int)$login->rights[$transaction]; // user rights
            $rightsInAll = (int)$login->rights['ALL']; // user rights in all transactions
            $ok = (($rights & $access) == $access) || (($rightsInAll & $access) == $access) || ($isAdmin);
        }

        if (!$ok && $deny)
        {
            $msg = _M('Access Denied') . "<br><br>\n" . 
                   '<center><big><i><font color=red>' . _M('Transaction: ') . "$transaction</font></i></big></center><br><br>\n" .
                   _M('Please inform a valid login/password to access this content.') . "<br>";

            $users = $this->GetGroupsAllowed($transaction, $access);
            if ($users)
            {
                $msg .= "<br><br>\n" . _M('Groups with access rights') . ":<ul><li>" . implode('<li>', $users) . '</ul>';
            }
            $go = $this->manager->history->Back('action'); 
            $error = Prompt::Error($msg, $go, $caption, '');
            $error->AddButton(_M('   Login   '), $this->manager->getActionURL($this->manager->getConf('login.module'),'login',null,array('return_to'=>urlencode($this->manager->history->Top()))), '');
            $this->manager->Prompt($error,$deny);
            //$this->manager->Error($msg, $go);
        }
        return $ok;
    }

    function GetTransactionRights($transaction, $login)
    {
        $user = $this->manager->GetBusinessMAD('user');
        $user->GetByLogin($login);
        return $user->GetTransactionRights($transaction);
    }

    function GetRights($login)
    {
        $user = $this->manager->GetBusinessMAD('user');
        $user->GetByLogin($login);
        return $user->GetRights($transaction);
    }

    function GetGroups($login)
    {
        $user = $this->manager->GetBusinessMAD('user');
        $user->GetByLogin($login);
        return $user->GetArrayGroups();
    }

    function isMemberOf($login, $group)
    {
        $groups = $this->auth->GetLogin()->groups;
        $ok = $groups[strtoupper($group)] || $groups['ADMIN'];
        return $ok;
    }

    function isAdmin()
    {
        return $this->auth->GetLogin()->IsAdmin();
    }

    function GetUsersAllowed($trans, $action = A_ACCESS)
    {
        $transaction = $this->manager->GetBusinessMAD('transaction');
        $transaction->GetByName($trans);
        return $transaction->GetUsersAllowed($action);
    }

    function GetGroupsAllowed($trans, $action = A_ACCESS)
    {
        $transaction = $this->manager->GetBusinessMAD('transaction');
        $transaction->GetByName($trans);
        return $transaction->GetGroupsAllowed($action);
    }
}
?>
