<?php
class MISR
{
    var $conn; // connection identifier
    var $phonetic;
    var $stopWords;

    function __construct($conn)
    {
        $this->conn = $conn;
        $this->phonetic = new MPhonetic();
    }

    private function setStopWords()
    {
        $this->stopWords = array
            (
            'QUE',
            'PARA',
            'COM',
            'NÃO',
            'UMA',
            'POR',
            'MAIS',
            'DOS',
            'COMO',
            'MAS',
            'FOI',
            'ELE',
            'DAS',
            'TEM',
            'SEU',
            'SUA',
            'SER',
            'QUANDO',
            'MUITO',
            'NOS',
            'ESTÁ',
            'TAMBÉM',
            'PELO',
            'PELA',
            'ATÉ',
            'ISSO',
            'ELA',
            'ENTRE',
            'ERA',
            'DEPOIS',
            'SEM',
            'MESMO',
            'AOS',
            'SEUS',
            'QUEM',
            'NAS',
            'ESSE',
            'ESTÃO',
            'VOCÊ',
            'ESSA',
            'NUM',
            'NEM',
            'SUAS',
            'MEU',
            'MINHA',
            'NUMA',
            'PELOS',
            'ELAS',
            'HAVIA',
            'SEJA',
            'QUAL',
            'NÓS',
            'LHE',
            'DELES',
            'ESSAS',
            'ESSES',
            'PELAS',
            'ESTE',
            'DELE',
            'VOCÊS',
            'VOS',
            'LHES',
            'MEUS',
            'MINHAS',
            'TEU',
            'TUA',
            'TEUS',
            'TUAS',
            'NOSSO',
            'NOSSA',
            'NOSSOS',
            'NOSSAS',
            'DELA',
            'DELAS',
            'ESTA',
            'ESTES',
            'ESTAS',
            'AQUELE',
            'AQUELA',
            'AQUELES',
            'AQUELAS',
            'ISTO',
            'AQUILO',
            'ESTOU',
            'ESTÁ',
            'ESTAMOS',
            'ESTÃO',
            'ESTIVE',
            'ESTEVE',
            'ESTIVEMOS',
            'ESTIVERAM',
            'ESTAVA',
            'ESTÁVAMOS',
            'ESTAVAM',
            'ESTIVERA',
            'ESTIVÉRAMOS',
            'ESTEJA',
            'ESTEJAMOS',
            'ESTEJAM',
            'ESTIVESSE',
            'ESTIVÉSSEMOS',
            'ESTIVESSEM',
            'ESTIVER',
            'ESTIVERMOS',
            'ESTIVEREM',
            'HEI',
            'HAVEMOS',
            'HÃO',
            'HOUVE',
            'HOUVEMOS',
            'HOUVERAM',
            'HOUVERA',
            'HOUVÉRAMOS',
            'HAJA',
            'HAJAMOS',
            'HAJAM',
            'HOUVESSE',
            'HOUVÉSSEMOS',
            'HOUVESSEM',
            'HOUVER',
            'HOUVERMOS',
            'HOUVEREM',
            'HOUVEREI',
            'HOUVERÁ',
            'HOUVEREMOS',
            'HOUVERÃO',
            'HOUVERIA',
            'HOUVERÍAMOS',
            'HOUVERIAM',
            'SOU',
            'SOMOS',
            'SÃO',
            'ERA',
            'ÉRAMOS',
            'ERAM',
            'FUI',
            'FOI',
            'FOMOS',
            'FORAM',
            'FORA',
            'FÔRAMOS',
            'SEJA',
            'SEJAMOS',
            'SEJAM',
            'FOSSE',
            'FÔSSEMOS',
            'FOSSEM',
            'FOR',
            'FORMOS',
            'FOREM',
            'SEREI',
            'SERÁ',
            'SEREMOS',
            'SERÃO',
            'SERIA',
            'SERÍAMOS',
            'SERIAM',
            'TENHO',
            'TEM',
            'TEMOS',
            'TÉM',
            'TINHA',
            'TÍNHAMOS',
            'TINHAM',
            'TIVE',
            'TEVE',
            'TIVEMOS',
            'TIVERAM',
            'TIVERA',
            'TIVÉRAMOS',
            'TENHA',
            'TENHAMOS',
            'TENHAM',
            'TIVESSE',
            'TIVÉSSEMOS',
            'TIVESSEM',
            'TIVER',
            'TIVERMOS',
            'TIVEREM',
            'TEREI',
            'TERÁ',
            'TEREMOS',
            'TERÃO',
            'TERIA',
            'TERÍAMOS',
            'TERIAM'
            );
    }

    private function isValid($word)
    {
        $isValid = false;

        if (strlen($word) > 2)
        {
            $isValid = (array_search($word, $this->stopWords) === false);
        }

        return $isValid;
    }

    private function getTokens($string, &$array)
    {
        $tok = strtok($string, " ");

        while ($tok)
        {
            $tok = trim($tok);

            if (strlen($tok) > 2)
                $array[] = $tok;

            $tok = strtok(" ");
        }
    }

    function getIdField($tableName, $fieldName)
    {
        $sql = new sql('idField', 'ISR_FIELD', '(TableName = ?) and (FieldName = ?)');
        $sql->SetParameters(strtoupper($tableName), strtoupper($fieldName));
        $query = $this->conn->getQuery($sql);

        if (!$query->eof)
        {
            $idField = $query->fields('idfield');
        }
        else
        {
            $db = $this->conn->db;
            $idField = $db->GETNewId('seq_isr_field');
            $sql = new sql('idField,TableName,FieldName', 'ISR_FIELD');
            $sql->SetParameters($idField, strtoupper($tableName), strtoupper($fieldName));
            $this->conn->Execute($sql->Insert());
        }

        return $idField;
    }

    function getIdWord($word)
    {
        $sql = new sql('idWord', 'ISR_WORD', "(word = '$word')");
        $query = $this->conn->getQuery($sql);

        if (!$query->eof)
        {
            $idWord = $query->fields('idWord');
        }
        else
        {
            $db = $this->conn->db;
            $idWord = $db->GETNewId('seq_isr_word');
            $sql = new sql('idWord,Word', 'ISR_WORD');
            $sql->SetParameters($idWord, $word);
            $this->conn->Execute($sql->Insert());
        }

        return $idWord;
    }

    function getIdWordFono($word)
    {
        $fonoWord = $this->fonetize($word);
        $sql = new sql('idWord', 'ISR_WORDFONO', "(word = '$fonoWord')");
        $query = $this->conn->getQuery($sql);

        if (!$query->eof)
        {
            $idWord = $query->fields('idWord');
        }
        else
        {
            $db = $this->conn->db;
            $idWord = $db->GETNewId('seq_isr_word');
            $sql = new sql('idWord,Word', 'ISR_WORDFONO');
            $sql->SetParameters($idWord, $fonoWord);
            $this->conn->Execute($sql->Insert());
        }

        return $idWord;
    }

    function indexer($tableName, $fieldname, $pk, $phrase, $fono = true)
    {
        $this->setStopWords();
        $idField = $this->getIdField($tableName, $fieldname);
        $this->getTokens($phrase, $words);
        $n = count($words);

        for ($i = 0; $i < $n; $i++)
        {
            $word = strtoupper(trim($words[$i]));

            if ($this->isValid($word))
            {
                $idWord = $this->getIdWord($word);
                $sql = new sql('idField, idWord, PK', 'ISR_INDEX');
                $sql->SetParameters($idField, $idWord, $pk);
                $this->conn->Execute($sql->Insert());

                if ($fono)
                {
                    $idWord = $this->getIdWordFono($word);
                    $sql = new sql('idField, idWord, PK', 'ISR_INDEXFONO');
                    $sql->SetParameters($idField, $idWord, $pk);
                    $this->conn->Execute($sql->Insert());
                }
            }
        }
    }

    function delete($tableName, $fieldname, $pk)
    {
        $idField = $this->getIdField($tableName, $fieldname);
        $sql = new sql('', 'ISR_INDEX', '(idField = ?) and (pk = ?)');
        $sql->SetParameters($idField, $pk);
        $this->conn->Execute($sql->Delete());
    }

    function retrieve($tableName, $fieldName, $phrase, $key, $fields = '*', $fono = true)
    {
        $phrase = trim(strtoupper($phrase));
        $phrase = $this->phonetic->removeMultiple($phrase);
        $phrase = $this->phonetic->removeStrange($phrase);
        $phrase = $this->phonetic->removeAccentuation($phrase);

        $idField = $this->getIdField($tableName, $fieldName);
        $phrase .= ' ';
        $n = strlen($phrase);
        $w = '';
        $cmd = '';

        for ($i = 0; $i < $n; $i++)
        {
            $c = $phrase{$i};
            if ($c == chr(32))
            {
                if ($w != '')
                {
                    if (strlen($w) < 3)
                    {
                        if (($w == 'OU') || ($w == 'E'))
                            $last = $w;
                        else
                            $w = '';
                    }
                    else
                    {
                        $word = str_replace('(', '', str_replace(')', '', $w));
                        if ($fono)
                        {
                            $wordfono = $this->fonetize($word);
                            $idWord = $this->getIdWordFono($wordfono);
                            $w = str_replace($word, "select PK from ISR_INDEXFONO where (IdWord = $idWord) and (IdField = $idField )", $w);
                        }
                        else
                        {
                            $idWord = $this->getIdWord($word);
                            $w = str_replace($word, "select PK from ISR_INDEX where (IdWord = $idWord) and (IdField = $idField )", $w);
                        }

                        $last = $w = (($last != 'E') && ($last != 'OU') && strlen($cmd)) ? "E ($w)" : "($w)";
                    }
                    $cmd .= " $w ";
                    $w = '';
                }
            }
            else
                $w .= $c;
        }

        $cmd = str_replace(' OU ', ' UNION ', $cmd);
        $cmd = str_replace(' E ', ' INTERSECT ', $cmd);
        $query = $this->conn->getQueryCommand($cmd);
        $check = $query->chunkResult(0, 0);
        $n = 0;
        $s = '';
        $cmd = '';
        foreach ($check as $pk)
        {
            $s .= (($s != '') ? ',' : '') . "'$pk'";

            if ($n++ == 100)
            {
                $cmd .= (($cmd != '') ? ' UNION ' : '') . "select $fields from $tableName where $key in ($s)";
                $n = 0;
                $s = '';
            }
        }
        if ($n != 0)
        {
            $cmd .= (($cmd != '') ? ' UNION ' : '') . "select $fields from $tableName where $key in ($s)";
        }
        if ($cmd == '')
            $cmd = "select $fields from $tableName where $key in ('')";
        $q = $this->conn->getQueryCommand($cmd);
        return $q;
    }

    function fonetize($word)
    {
        return $this->phonetic->fonetize($word);
    }
}
?>