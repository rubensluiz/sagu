<?php

/**
 * MIOLO interface for Doctrine's DBAL.
 * DBAL is an abstraction layer for database management created by the Doctrine
 * project (http://www.doctrine-project.org/).
 *
 * DBAL's documentation can be found here:
 * http://www.doctrine-project.org/projects/dbal/2.0/docs/en
 *
 * @author Daniel Hartmann [daniel@solis.coop.br]
 *
 * @version $id$
 *
 * \b Maintainers: \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Daniel Hartmann [daniel@solis.coop.br]
 *
 * @since
 * Creation date 2011/02/02
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b CopyRight: \n
 * Copyright (c) 2011 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPLv2 (for further details read the COPYING file or http://www.gnu.org/licenses/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://www.miolo.org.br
 *
 */

use Doctrine\Common\ClassLoader;

class MDbal
{
    private $database;
    private $conn;
    private $conf;

    /**
     * MDbal constructor
     *
     * @param string $database
     */
    public function __construct($database)
    {
        $MIOLO = MIOLO::getInstance();
        $doctrineDir = $MIOLO->getConf('home.classes') . '/extensions/doctrine-dbal';
        require "$doctrineDir/Doctrine/Common/ClassLoader.php";

        $classLoader = new ClassLoader('Doctrine', $doctrineDir);
        $classLoader->register();
        $config = new \Doctrine\DBAL\Configuration();

        if ( $database )
        {
            $this->database = $database;
            $this->conf = self::getConf($database);
            $this->connect();
        }
    }

    /**
     * Create a DBAL configuration array to use on
     * \Doctrine\DBAL\DriverManager::getConnection
     *
     * @param string $database
     * @return array
     */
    private static function getConf($database)
    {
        if ( !$database )
        {
            return;
        }
        $MIOLO = MIOLO::getInstance();

        switch ( $MIOLO->getConf("db.$database.system") )
        {
            case 'mysql':
                $conf['driver'] = 'pdo_mysql';
                $conf['dbname'] = $MIOLO->getConf("db.$database.name");
                $conf['host'] = $MIOLO->getConf("db.$database.host");
                $conf['port'] = $MIOLO->getConf("db.$database.port");
                break;

            case 'sqlite':
                $conf['driver'] = 'pdo_sqlite';
                $conf['path'] = $MIOLO->getConf("db.$database.name");
                break;

            case 'postgres':
                $conf['driver'] = 'pdo_pgsql';
                $conf['dbname'] = $MIOLO->getConf("db.$database.name");
                $conf['host'] = $MIOLO->getConf("db.$database.host");
                $conf['port'] = $MIOLO->getConf("db.$database.port");
                break;

            case 'oracle':
                $conf['driver'] = 'pdo_oci';
                $conf['dbname'] = $MIOLO->getConf("db.$database.name");
                $conf['host'] = $MIOLO->getConf("db.$database.host");
                $conf['port'] = $MIOLO->getConf("db.$database.port");
                break;
        }

        $conf['user'] = $MIOLO->getConf("db.$database.user");
        $conf['password'] = $MIOLO->getConf("db.$database.password");

        return $conf;
    }

    /**
     * Create a \Doctrine\DBAL\Connection instance and put it on conn attribute
     */
    public function connect()
    {
        $this->conn = \Doctrine\DBAL\DriverManager::getConnection($this->conf);
    }

    /**
     * Close the \Doctrine\DBAL\Connection
     */
    public function disconnect()
    {
        $this->conn->close();
    }

    /**
     * Prepare a given sql statement
     *
     * @param string $sql
     * @return \Doctrine\DBAL\Driver\Statement
     */
    public function prepare($sql)
    {
        return $this->conn->prepare($sql);
    }

    /**
     * Return the connection handler
     *
     * @return \Doctrine\DBAL\Connection
     */
    public function getConn()
    {
        return $this->conn;
    }

    /**
     * SchemaManager object for database inspect
     *
     * @return \Doctrine\DBAL\Schema\SchemaManager
     */
    public function getSchemaManager()
    {
        return $this->conn->getSchemaManager();
    }

    /**
     * Schema object for managing tables
     *
     * @return \Doctrine\DBAL\Schema\Schema
     */
    public function createSchema()
    {
        return $this->conn->getSchemaManager()->createSchema();
    }

    /**
     * Create the connection handler
     *
     * @return \Doctrine\DBAL\Connection
     */
    public static function createConnection($database)
    {
        $MIOLO = MIOLO::getInstance();
        $doctrineDir = $MIOLO->getConf('home.classes') . '/extensions/doctrine-dbal';
        require "$doctrineDir/Doctrine/Common/ClassLoader.php";

        $classLoader = new ClassLoader('Doctrine', $doctrineDir);
        $classLoader->register();

        return \Doctrine\DBAL\DriverManager::getConnection(self::getConf($database));
    }
}
?>
