<?php

class MUI extends MService
{

    public function alert( $msg, $info, $href = '' )
    {
        $this->manager->error( $msg, $info, $href );
    }


    public function createForm( $title = '' )
    {
        return new MForm($title);
    }

    /**
     * Get form object.
     *
     * @param string $module Module name.
     * @param string $name Form name.
     * @param object $data Form data.
     * @param string $dir Form directory inside $module/forms/.
     * @return MForm Form instance.
     */
    public function getForm( $module, $name, $data = NULL, $dir = NULL )
    {
        $path = $this->manager->getModulePath( $module, 'types.class' );

        if ( file_exists( $path ) )
        {
            $this->manager->uses( 'types.class', $module );
        }

        $file = is_null($dir) ? "forms/$name.class" : "forms/$dir/$name.class";

        $path = $this->manager->getModulePath( $module, $file );

        if ( file_exists( $path ) )
        {
            $this->manager->uses( $file, $module );
            $className = $name;

            $form = new $className( $data );

            return $form;
        }
        else
        {
            throw new EFileNotFoundException( $file, 'UI::GetForm() :' );
        }
    }


    public function getFormIn($module, $class, $name, $data = NULL, $dir = NULL )
    {
        $path = $this->manager->getModulePath( $module, 'types.class' );

        if ( file_exists( $path ) )
        {
            $this->manager->uses( 'types.class', $module );
        }

        $file = is_null($dir) ? "forms/$class.class" : "forms/$dir/$classe.class";

        $path = $this->manager->getModulePath( $module, $file );

        if ( file_exists( $path ) )
        {
            $this->manager->uses( $file, $module );
            $className = $name;

            $form = new $className( $data );

            return $form;
        }
        else
        {
            throw new EFileNotFoundException($file, 'UI::GetForm() :');
        }
    }


    public function getMenu( $module = 'main', $name = 'UIMainMenu' )
    {
        $this->manager->uses( "menus/$name.class", $module );

        $menu = new $name();

        return $menu;
    }


    public function getListing( $module, $name, $data = null, $dir = null )
    {
        global $MIOLO, $session, $state;

        if ( $dir )
        {
            $file = "listings/$dir/$name.class";
        }
        else
        {
            $file = "listings/$name.class";
        }

        $MIOLO->assert( file_exists( $MIOLO->getModulePath( $module, $file ) ),
                        'UI::GetListing() ' . _M( 'Error: @1 - file not found.', 'miolo', $file )
                       );

        $MIOLO->uses($file, $module);

        // Workaround: adds module's prefix to class name
        $class = strtoupper( substr( $module, 0, 1) ) . substr($module, 1) . $name;

        if ( ! class_exists( $class ) )
        {
            $MIOLO->deprecate( "You should name your listing class '$class' instead of '$name'!" );

            $class = $name;
        }

        if ( $data )
        {
            $stmt = "\$listing = new $class(\$data);";
        }
        else
        {
            $stmt = "\$listing = new $class();";
        }

        eval( $stmt );

        return $listing;
    }

    /**
     * Get grid object.
     *
     * @param string $module Module name.
     * @param string $name Grid name.
     * @param object $data Grid data.
     * @param string $dir Grid directory inside $module/grids/.
     * @return MGrid Grid instance.
     */
    public function getGrid( $module, $name, $data = NULL, $dir = NULL )
    {
        $file = is_null($dir) ? "grids/$name.class" : "grids/$dir/$name.class";

        $path = $this->manager->getModulePath( $module, $file );

        if ( file_exists($path) )
        {
            $this->manager->uses( $file, $module );
            $className = $name;

            $grid = new $className( $data );

            return $grid;
        }
        else
        {
            throw new EFileNotFoundException( $file, 'UI::GetGrid() :' );
        }
    }


    public function getReport( $module, $name,  $data = NULL, $dir = NULL )
    {
        $file = is_null($dir) ? "reports/$name.class" : "reports/$dir/$name.class";

        $path = $this->manager->getModulePath( $module, $file );

        if ( file_exists($path) )
        {
            $this->manager->uses( $file, $module );
            $className = $name;

            $report = new $className( $data );

            return $report;
        }
        else
        {
            throw new EFileNotFoundException( $file, 'UI::GetReport() :' );
        } 
    }


    public function getImage( $module, $name )
    {
        $MIOLO = $this->manager;

        if ( ($m = $module) == NULL )
        {
            $m = 'miolo';
        }

        if ( MUtil::getBooleanValue( $MIOLO->getConf('options.performance.uri_images') ) == true )
        {
            if ( $m == 'miolo' )
            {
                $url = $MIOLO->getAbsoluteURL("/images/$name");
            }
            else
            {
                $url = $MIOLO->getAbsoluteURL("/images/modules/$m/$name");
            }
        }
        else
        {
            $url = $MIOLO->getActionURL( $m, "html:images:$name" );
        }

        return $url;
    }


    public function getImageTheme( $theme, $name )
    {
        $MIOLO = $this->manager;

        if ( MUtil::getBooleanValue( $MIOLO->getConf('options.performance.uri_images') ) == true )
        {
            $url = $MIOLO->getAbsoluteURL("/themes/$theme/images/$name");
        }
        else
        {
            $url = $MIOLO->getThemeURL( "images:$name", $theme );
        }

        return $url;
    }


    public function getImageSrc( $name, $module = '' )
    {
        global $MIOLO;

        $home = ($module == '') ? $MIOLO->getConf('home.images') : $MIOLO->getConf('home.modules') . $MIOLO->getConf('module.images');

        return $home . '/' . $name;
    }
}

?>