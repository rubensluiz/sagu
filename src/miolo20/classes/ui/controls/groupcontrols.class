<?php

class MBaseGroup extends MContainer
{
    public $borderType;
    public $scrollable;
    public $scrollHeight;

    /**
     * MBaseGroup constructor
     *
     * @param string $name
     * @param string $caption
     * @param array $controls Array of MIOLO components.
     * @param string $disposition Disposition. Can be horizontal or vertical.
     * @param string $border
     */
    public function __construct($name='', $caption='', $controls='', $disposition='none', $border='css')
    {
        parent::__construct($name, $controls, $disposition);

        $this->scrollable = false;
        $this->scrollHeight = '';
        $this->borderType = $border;
        $this->caption = $caption;
    }

    public function setScrollHeight($height)
    {
        $this->scrollable = true;
        $this->scrollHeight = $height;
    }

    public function setBorder($border)
    {
        $this->borderType = $border;
    }

    public function generateInner()
    {
        switch ( $this->borderType )
        {
            case 'none':
            case '':
                $this->border = '0';
                break;

            case 'css':
                break;

            default:
                $this->addStyle('border', $this->border);
                break;
        }

        $attrs = $this->getAttributes();

        parent::generateInner();

        $html = $this->getInnerToString();

        if ( $this->scrollable )
        {
            $f[] = new Div('', $this->caption, 'm-scrollable-label');

            $this->setClass('field');
            $f[] = $div = new Div('', $html, 'm-scrollable-field');
            $div->height = $this->scrollHeight;
            $this->inner = new Div('', $f, '');
        }
        else
        {
            $this->inner = $this->getRender('fieldset');
        }
    }
}

class MLinkButtonGroup extends MBaseGroup
{
    /**
     * MLinkButtonGroup constructor
     *
     * @param string $name Name
     * @param string $label Label
     * @param array $options An array of MLinkButton objects
     * @param string $disposition Disposition. Can be horizontal or vertical.
     * @param string $border Border
     */
    public function __construct($name='', $label='', $options='', $disposition='horizontal', $border='css')
    {
        parent::__construct($name, $label, $options, $disposition, $border);
    }
}

?>