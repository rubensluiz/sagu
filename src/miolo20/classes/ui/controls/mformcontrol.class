<?php

class MFormControl extends MControl
{
    public $label;
    public $value;
    public $hint;
    
    /**
     *
     * @var MForm
     */
    public $form;
    
    public $formName;
    public $showLabel; // se label deve ser exibido junto com o campo
    public $autoPostBack;
    
    /**
     * @var boolean
     */
    public $isRequired;
    
    /**
     *
     * @var boolean
     */
    private $addedValidator;
    
    public $autoSetRequired = true;

    public function __construct( $name, $value = '', $label = '', $color = '', $hint = '' )
    {
        parent::__construct( $name );

        $this->addStyleFile( 'm_controls.css' );
        $this->setValue($value);
        $this->label = $label;
        $this->hint  = $hint;

        if ( $color != '' )
        {
            $this->color = $color;
        }

        $this->showLabel    = true;
        $this->autoPostBack = false;
        $this->form         = NULL;
    }


    public function setValue( $value )
    {
        $this->value = $value;
    }


    public function getValue()
    {
        return $this->value;
    }


    public function setLabel( $label )
    {
        $this->label = $label;
    }


    public function setAutoPostBack( $value )
    {
        $this->autoPostBack = $value;
    }

    function setAutoSubmit( $isAuto = true )
    {
        $this->autoPostBack = $isAuto;
    }
    
    public function getIsRequired()
    {
        return $this->isRequired;
    }

    /**
     * Define campo como requerido no formulario
     *
     * @param boolean $isRequired 
     */
    public function setIsRequired($isRequired)
    {
        $this->isRequired = $isRequired;
        
        if ( $isRequired )
        {
            $this->addFieldValidator();
        }
        
        return $this;
    }
    
    /**
     * Retorna a string de validador no padrao legado MIOLO2 para ser utilizado na passagem de parametro do MValidator
     * FIXME: Fazer MValidator receber boolean ao invez de string (required/optional)
     *
     * @return string
     */
    public function getRequiredType()
    {
        return $this->getIsRequired() ? 'required' : 'optional';
    }
    
    private function addFieldValidator()
    {
        if ( $this->getFieldForm() instanceof MForm && !$this->addedValidator )
        {
            $this->getFieldForm()->AddValidator( new MRequiredValidator($this->name, $this->label, $this->getRequiredType()) );
            
            $this->addedValidator = true;
        }
    }
    
    /**
     *
     * @return MForm
     */
    public function getFieldForm()
    {
        return $this->form;
    }

    /**
     * Define objeto MForm para o control.
     *
     * @param MForm $form 
     */
    public function setFieldForm(MForm $form)
    {
        $this->form = $form;
        
        if ( $this->getIsRequired() )
        {
            $this->addFieldValidator();
        }
    }

    public function generateLabel()
    {
        $label = '';
        $this->showLabel = ( $this->formMode >= MControl::FORM_MODE_SHOW_ABOVE );

        if ( ( $this->showLabel ) && ( $this->label != '' ) )
        {
            $fieldLabel = new MFieldLabel($this->id, $this->label);
            $fieldLabel->setClass(MControl::CLASS_CAPTION);

            if( ! $this->validator && method_exists($this->form, 'getFieldValidator') )
            {
                $this->validator = $this->form->getFieldValidator($this->name);
            }

            $r = $this->attrs->items['required'] || ($this->validator && $this->validator->type == 'required');

            if( $r && trim(MUtil::removeSpaceChars($this->label)) )
            {
                $fieldLabel->setClass( MControl::CLASS_CAPTION_REQUIRED );
            }

            $label = $this->painter->label( $fieldLabel );

            if ( $this->formMode == MControl::FORM_MODE_SHOW_ABOVE )
            {
                $label .= $this->painter->BR;
            }
            elseif ( $this->formMode == MControl::FORM_MODE_SHOW_NBSP )
            {
                $label .= "&nbsp;&nbsp;";
            }
        }
        return $label;
    }

}
?>
