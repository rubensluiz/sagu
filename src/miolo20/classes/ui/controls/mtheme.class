<?php
class MTheme extends MControl
{
    var $module;
    var $layout;
    var $conf;
    var $halted;
    var $path;

    function __construct($id, $module = '')
    {
        parent::__construct($id);
        $this->instances = array();
        $this->halted = false;
    }
    
    public function googleAnalytics()
    {
        $MIOLO = MIOLO::getInstance();

        static $called = false;
        
        if ( !$called && $MIOLO->getConf('temp.is.from.sagu') == true )
        {
            $called = true;
            $code = SAGU::getAnalyticsCode();
            
            if (strlen($code) > 0 )
            {
                $MIOLO->page->addJsCode($code);
            }
        }
    }

    function getId()
    {
        $this->googleAnalytics();
        
        return ($this->id == '' ? 'miolo' : $this->id);
    }

    function setPage($page)
    {
        $this->page = $page;
    }

    function getLayout()
    {
        return $this->layout;
    }

    function setLayout($layout)
    {
        $this->layout = $layout;
    }

    function getPath()
    {
        return $this->path;
    }

    function setPath($path)
    {
        $this->path = $path;
    }

    function getModule()
    {
        return $this->module;
    }

    function setModule($module)
    {
        $this->module = $module;
    }

    function setHalted($value)
    {
        $this->halted = $value;
    }

    function getInstance($element)
    {
        $element = strtolower($element);

        if (($instance = $this->GetControlById($element)) == NULL)
        {
            $instance = new MThemeElement($element);
            $this->AddControl($instance);
        }

        return $instance;
    }

    function getElement($element, $key = 0)
    {
        return $this->GetInstance($element)->get($key);
    }

    function setElement($element, $content, $id = '', $key = NULL)
    {
        $this->GetInstance($element)->set($content, $id, $key);
    }

    function setElementId($element, $id)
    {
        $instance = $this->GetInstance($element);
        $instance->SetId($id);
        $this->SetControlById($instance, $id);
    }

    function setElementClass($element, $cssClass)
    {
        $this->GetInstance($element)->SetClass($cssClass);
    }

    function clearElement($element, $halted = false)
    {
        if ($this->halted)
            return;
        $this->GetInstance($element)->clear($halted);
    }

    function insertElement($element, $content, $key = NULL, $halted = false)
    {
        if ($this->halted)
            return;
        $this->GetInstance($element)->insert($content, $key, $halted);
    }

    function appendElement($element, $content, $key = NULL, $halted = false)
    {
        if ($this->halted)
            return;

        $this->GetInstance($element)->append($content, $key, $halted);
    }

    function countElement($element)
    {
        return $this->getInstance($element)->count();
    }

    function generateElement($element)
    {
        return $this->getInstance($element)->Generate();
    }

    function clearMenus()
    {
        $this->clearElement('menus');
    }

    function getMenu($name)
    {
        $menus = $this->getInstance('menus');

        if ( ( $menu = $menus->getElementById($name) ) == NULL )
        {
            if ( $this->manager->getConf('options.mainmenu') == 2 )
            {
                $menuClass = 'MDHTMLMenu';
            }
            else if ( $this->manager->getConf('options.mainmenu') == 3 )
            {
                $menuClass = 'MDHTMLMenu2';
            }
            else
            {
                $menuClass = 'Menu';
            }

            $menu = new $menuClass($name);
            $menu->setTitle($name);
            $menus->append($menu, $name);
        }

        return $menu;
    }

    function getMainMenu()
    {
        return $this->GetMenu('miolo_main_menu');
    }

    function hasMenuOptions()
    {
        $menus = $this->getInstance('menus')->GetControls();

        if ( count($menus) )
        {
            foreach ($menus as $menu)
            {
                if ( $menu->hasOptions() )
                {
                    return true;
                }
            }
        }

        return false;
    }

    function isEmptyContent()
    {
        return ($this->getElement('content') == '');
    }

    function clearContent($halted = false)
    {
        return $this->ClearElement('content', $halted);
    }

    function getContent()
    {
        return $this->getElement('content');
    }

    function setContent($content)
    {
        if ( $this->getContent() == null )
        {
            return $this->setElement('content', $content);
        }
        else
        {
            $this->clearContent();
            $this->appendContent($content);
        }
    }

    function insertContent(&$element, $halted = false)
    {
        return $this->InsertElement('content', $element, NULL, $halted);
    }

    function appendContent(&$element, $halted = false)
    {
        return $this->AppendElement('content', $element, NULL, $halted);
    }

    function breakContent($space = '20px')
    {
        return $this->getInstance('content')->Space($space);
    }

    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    # Internal function used to generate some useful informations for the
    # MIOLO developer
    #----------------------------------------------------------------------
    function generateTraceStatus()
    {
        global $MIOLO;

        $status = $MIOLO->GetTraceStatus();

        if ($this->traceStatus)
        {
            if (is_object($status) || ($status && !is_array($status)))
            {
                $status = array($status);
            }

            if (is_array($this->traceStatus))
            {
                if ($status)
                {
                    $status = array_merge($status, $this->traceStatus);
                }
                else
                {
                    $status = $this->traceStatus;
                }
            }
            else
            {
                $status[] = $this->traceStatus;
            }
        }
    }
}

?>