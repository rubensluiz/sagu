<?php

/**
 * Date and time field.
 *
 * @author Daniel Hartmann [daniel@solis.coop.br]
 *
 * \b Maintainers: \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Daniel Hartmann [daniel@solis.coop.br]
 *
 * @since
 * Creation date 2011/08/22
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluушes Livres \n
 *
 * \b Copyright: \n
 * Copyright (c) 2011 SOLIS - Cooperativa de Soluушes Livres \n
 *
 * \b License: \n
 * Licensed under GPLv2 (for further details read the COPYING file or http://www.gnu.org/licenses/gpl.html)
 */

$MIOLO = MIOLO::getInstance();
$MIOLO->page->addScript('m_datetimefield.js');
$MIOLO->page->addScript('m_util_validate.js');

class MDateTimeField extends MContainer
{
    /**
     * @var object MCalendarField responsible for the date part of the component.
     */
    private $dateField;

    /**
     * @var object MTextField responsible for the time part of the component.
     */
    private $timeField;

    /**
     * @var object Hidden MTextField responsible for the combined value of date and time fields.
     */
    private $mainField;

    /**
     * MDateTime constructor.
     *
     * @param string $name The unique name for the instance.
     * @param string $value The field initial value. Format: DD/MM/YYYY HH:MM
     * @param string $label The field label.
     * @param boolean $readonly Whether the fields must be read only.
     */
    public function __construct($name='', $value='', $label='', $readonly=false)
    {
        list($dateValue, $timeValue) = $value ? explode(' ', $value) : array('', '');
        $this->dateField = new MCalendarField("{$name}Date", $dateValue, $label);
        $this->timeField = new MTextField("{$name}Time", $timeValue);
        $this->timeField->validator = new MTimeValidator($this->timeField->name, $label);

        $this->dateField->addAttribute('onkeypress', "return MUtil_Validate_Mask('{$this->dateField->validator->mask}', event)");
        $this->dateField->addAttribute('onkeyup', "MUtil_Apply_Mask('{$name}Date', '{$this->dateField->validator->mask}', event)");
        $this->timeField->addAttribute('onkeypress', "return MUtil_Validate_Mask('{$this->timeField->validator->mask}', event)");
        $this->timeField->addAttribute('onkeyup', "MUtil_Apply_Mask('{$name}Time', '{$this->timeField->validator->mask}', event)");

        // Empty the validators to avoid multiple identical validation messages.
        $this->dateField->validator = NULL;
        $this->timeField->validator = NULL;

        $this->mainField = new MTextField($name, $value, $label);
        $this->mainField->addBoxStyle('display', 'none');
        $this->mainField->validator = new MDATETimeDMYValidator($name, $label);

        $event = "mdatetimefield.update('$name');";

        $this->dateField->addAttribute('onblur', $event);
        $this->timeField->addAttribute('onblur', $event);
        $this->dateField->addAttribute('onchange', $event);
        $this->timeField->addAttribute('onchange', $event);

        parent::__construct("{$name}Container", array($this->dateField, $this->timeField, $this->mainField), 'horizontal');
        $this->setReadOnly($readonly);
    }

    /**
     * @return object MCalendarField instance.
     */
    public function getDateField()
    {
        return $this->dateField;
    }

    /**
     * @param object $dateField MCalendarField instance.
     */
    public function setDateField($dateField)
    {
        $this->dateField = $dateField;
    }

    /**
     * @return object MTextField instance.
     */
    public function getTimeField()
    {
        return $this->timeField;
    }

    /**
     * @param object $timeField MTextField instance.
     */
    public function setTimeField($timeField)
    {
        $this->timeField = $timeField;
    }

    /**
     * @param string $value Set the component value. Format: DD/MM/YYYY HH:MM
     */
    public function setDateTimeValue($value)
    {
        list($date, $time) = $value ? explode(' ', $value) : array('', '');
        $this->dateField->setValue($date);
        $this->timeField->setValue($time);
        $this->mainField->setValue($value);
    }

    /**
     * @param boolean $readonly Set the fields as read only.
     */
    public function setReadOnly($readonly)
    {
        $this->dateField->setReadOnly($readonly);
        $this->timeField->setReadOnly($readonly);
    }

    /**
     * Set an attribute to date and time fields.
     *
     * @param string $attribute Attribute name.
     * @param string $action  Attribute value.
     */
    public function addAttribute($attribute, $action)
    {
        $this->dateField->addAttribute($attribute, $action);
        $this->timeField->addAttribute($attribute, $action);
    }

    /**
     * @return string The fields generated to display at the browser.
     */
    public function generate()
    {
        $fields = $this->dateField->generate() . $this->timeField->generate() . $this->mainField->generate();

        $label = new MFieldLabel($this->dateField->id, $this->dateField->label . ':');
        $label->setClass(MControl::CLASS_CAPTION);

        if ( $this->mainField->validator && ($this->mainField->validator->type == 'required') )
        {
            $label->setClass( MControl::CLASS_CAPTION_REQUIRED );
        }

        $label = new MSpan('', $label, 'label');
        $span = new MSpan('', $fields, 'field');
        
        return $label->generate() . $span->generate();
    }
}

?>