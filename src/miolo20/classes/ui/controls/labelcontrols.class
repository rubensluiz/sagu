<?php

class MBaseLabel extends MFormControl
{
    public function __construct( $name = NULL, $value = NULL, $label = NULL, $color = '', $hint = '' )
    {
        parent::__construct( $name, $value, $label, $color, $hint );
    }


    public function setBold( $value = true )
    {
        $this->fontWeight = $value ? 'bold' : 'normal';
    }
}


class MPageComment extends MBaseLabel
{
    public function __construct( $text = NULL )
    {
        parent::__construct( NULL, $text );
    }


    public function generateInner()
    {
        $this->inner = $this->getRender( 'comment' );
    }


    public function generate()
    {
        $this->generateInner();

        return $this->getInner();
    }
}


class MSeparator extends MBaseLabel
{
    private $margin;
    private $lineWidth;

    public function __construct( $text = NULL, $margin = '', $color = '', $lineHeight = '1px' )
    {
        parent::__construct( NULL, $text, '', $color );

        $this->margin = $margin;
        $this->lineHeight = $lineHeight;
    }


    public function generateInner()
    {
        $color = Util::NVL( $this->color, "#999" );
        $this->setBoxClass( 'm-separator' );

        if( $this->lineHeight )
        {
            $this->addBoxStyle( 'border-bottom', $this->lineHeight." solid {$color}" );
        }

        if ( trim($this->value) != '' )
        {
            $this->addBoxStyle( 'line-height', "15px" );
            $this->inner = $this->value;
        }
        else
        {
            $this->addBoxStyle( 'line-height', "0px" );
            $this->inner = '&nbsp;';
        }
    }
}


class MLabel extends MBaseLabel
{
    public function __construct( $text = NULL, $color = '' )
    {
        parent::__construct( NULL, $text, NULL, $color );
    }


    public function generateInner()
    {
        if ( $this->getClass() == '' )
        {
            $this->setClass( 'm-label' );
        }

//        $span = new MSpan( '', $this->value, $this->getClass() );

//        $this->inner = ( trim($this->value) != '' ) ? $span->getRender('text') : '';
        $this->inner = ( trim($this->value) != '' ) ? $this->getRender( 'text' ) : '';

    }
}

class MRawText extends MLabel
{
    public function generateInner()
    {
        $this->inner = trim($this->value);
    }
}

class MFieldLabel extends MBaseLabel
{
    public function __construct( $id, $text = NULL )
    {
        parent::__construct( NULL, $text );

        $this->setId( $id );
    }


    public function generateInner()
    {
        if ( $this->getClass() == '' )
        {
            $this->setClass( 'm-label' );
        }

        $this->inner = ( trim($this->value) != '' ) ? $this->getRender('label') : '';
    }
}


class MTextHeader extends MBaseLabel
{
    var $level;

    public function __construct( $name = '', $level = '1', $text = NULL, $color = '' )
    {
        parent::__construct( $name, $text, '', $color );

        $this->level = $level;
    }

    public function generateInner()
    {
        $this->inner = $this->getRender( 'header' );
    }
}


class MText extends MBaseLabel
{
    public function __construct( $name = '', $text = NULL, $color = '' )
    {
        parent::__construct( $name, $text, '', $color );

        $this->formMode = 1;
    }


    public function generateInner()
    {
        if ( $this->getClass() == '' )
        {
            $this->setClass( 'm-text' );
        }

        $this->inner = $this->getRender( 'text' );
    }
}


class MTextLabel extends MText
{
    public function __construct( $name = '', $text = null, $label = '', $color = '' )
    {
        parent::__construct( $name, $text, $color );

        $this->label = $label;
        $this->setClass( 'm-label-text' );
//        $this->formMode = 1;
    }

    public function generateInner()
    {
        if ( $this->getClass() == '' )
        {
            $this->setClass( 'm-text' );
        }

        $this->inner =  $this->generateLabel() . $this->getRender( 'text' );
    }
}

?>
