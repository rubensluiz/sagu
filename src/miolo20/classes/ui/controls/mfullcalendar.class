<?php
/**
 * <--- Copyright 2005-2013 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Calendário completo
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.com.br]
 *
 * @since
 * Class created on 29/08/2013
 */

class MFullCalendar extends MDiv
{
    private $events;
    private $editable = true;
    private $dayClick;
    private $maxTime;
    private $minTime;
    private $hiddenDays;
    private $eventDrop;
    private $allDaySlot;
    private $eventResize;
    private $dayrender;
    private $externalDrop;
    private $defaultView;
    
    /**
     * Data de onde o calendario deve comecar sendo exibido.
     * Formato: dd/mm/yyyy
     *
     * @var string
     */
    private $currentDate;

    /**
     * The MFullCalendar constructor
     */
    public function __construct($name)
    {
        parent::__construct($name);

        $this->page->addScript('jquery/jquery.min.js');
        $this->page->addScript('jquery/jquery-ui.custom.min.js');
        $this->page->addScript('fullcalendar/fullcalendar.min.js');
        $this->page->addScript('fullcalendar/fullcalendar.js');
        $this->page->addStyle('fullcalendar.css');
    }
    
    public function addEvent($description, $start, $end = null, $url = null, $editable = false, $allDay = false, $durationEditable = false, $color = 'blue', $id = null, $pk = null)
    {
        $std = new stdClass();
        
        $std->start = $start;
        $std->end = $end;
        $std->description = $description;
        $std->url = $url;
        $std->id = $id;
        $std->editable = $editable;
        $std->color = $color;
        $std->allDay = $allDay;
        $std->durationEditable = $durationEditable;
        $std->pk = $pk;
        $this->events[] = $std;
    }
    
    public function getCurrentDate()
    {
        return $this->currentDate;
    }

    public function setCurrentDate($currentDate)
    {
        $this->currentDate = $currentDate;
    }
    
    /**
     * @return string
     */
    protected function getCurrentDateJs()
    {
        $js = '';
        
        if ( strlen($this->currentDate) > 0 )
        {
            list($day, $month, $year) = explode('/', $this->currentDate);
            
            $month = ($month - 1); // Aparentemente precisa ser assim para o fullCalendar deixar o mes correto
         
            $js = "
             year: {$year},
             month: {$month},
             date: {$day},";
        }
        
        return $js;
    }
    
    protected function removeEvent($id)
    {
        $this->events[$id] = null;
    }
    
    public function getEvents()
    {
        return $this->events;
    }

    public function setEditable($editable)
    {
        $this->editable = $editable;
    }
    
    public function setAjaxDayClick($event, $responseElement, $validate = true, $args = null, $encodeValues = true)
    {
        $this->dayClick['event'] = $event;
        $this->dayClick['responseElement'] = $responseElement;
        $this->dayClick['validate'] = $validate;
        $this->dayClick['args'] = $args;
        $this->dayClick['encodeValues'] = $encodeValues;
    }
    
    public function setAjaxEventDrop($event, $responseElement, $validate = true, $args = null, $encodeValues = true)
    {
        $this->eventDrop['event'] = $event;
        $this->eventDrop['responseElement'] = $responseElement;
        $this->eventDrop['validate'] = $validate;
        $this->eventDrop['args'] = $args;
        $this->eventDrop['encodeValues'] = $encodeValues;
    }
    
    public function setAjaxExternalDrop($event, $responseElement, $validate = true, $args = null, $encodeValues = true)
    {
        $this->externalDrop['event'] = $event;
        $this->externalDrop['responseElement'] = $responseElement;
        $this->externalDrop['validate'] = $validate;
        $this->externalDrop['args'] = $args;
        $this->externalDrop['encodeValues'] = $encodeValues;
    }
    
    public function setAjaxEventResize($event, $responseElement, $validate = true, $args = null, $encodeValues = true)
    {
        $this->eventResize['event'] = $event;
        $this->eventResize['responseElement'] = $responseElement;
        $this->eventResize['validate'] = $validate;
        $this->eventResize['args'] = $args;
        $this->eventResize['encodeValues'] = $encodeValues;
    }
    
    public function setMaxTime($maxTime)
    {
        $this->maxTime = $maxTime;
    }
    
    public function setMinTime($minTime)
    {
        $this->minTime = $minTime;
    }
    
    public function setHiddenDays(array $days)
    {
        $this->hiddenDays = $days;
    }
    
    public function setAllDaySlot($allDaySlot)
    {
        if( $allDaySlot )
        {
            $this->allDaySlot = 'true';
        }
        else
        {
            $this->allDaySlot = 'false';
        }
    }
    
    public function setDayRender($date, $style, $value)
    {
        $this->dayrender[][$date] = array($style => $value);
    }
    
    public function setDefaultView($defaultView)
    {
        $this->defaultView = $defaultView;
    }
    
    //
    /**
     * @return string The generated component to display
     */
    public function generate()
    {
        $js  = "$(document).ready(function() {

                $('#m_external-events div.external-event').each(function() {

                    // create an Event Object (http://arshaw.com/fullcalendar/docs/event_data/Event_Object/)
                    // it doesn't need to have a start or end
                    var eventObject = {
                            title: $.trim($(this).text()) // use the element's text as the event title
                    };

                    // store the Event Object in the DOM element so we can get to it later
                    $(this).data('eventObject', eventObject);

                    // make the event draggable using jQuery UI
                    $(this).draggable({
                            zIndex: 999,
                            revert: true,      // will cause the event to go back to its
                            revertDuration: 0  //  original position after the drag
                    });

                });
                
		var date = new Date();
		var d = date.getDate();
		var m = date.getMonth();
		var y = date.getFullYear();
                
		$('#calendar').fullCalendar({                

                    header: {
                            left: 'prev,next today',
                            center: 'title',
                            right: 'month,agendaWeek,agendaDay'
                    },
                    " . $this->getCurrentDateJs() . "
                    editable: true,
                    droppable: true,
                    viewDisplay: function(view) { document.cookie='fullcalendar_defaultView='+$('#calendar').fullCalendar('getView').name; },
                    timeFormat: 'H:mm',";
        
        if( strlen($this->maxTime) > 0 )
        {
            $js .= "maxTime: '$this->maxTime',";

        }
        if( strlen($this->defaultView) > 0 )
        {
            $js .= "defaultView: '$this->defaultView',";
        }
        else
        {
            $cookieview = $_COOKIE['fullcalendar_defaultView'];
            if( strlen($cookieview) > 0 )
            {
                $js .= "defaultView: '$cookieview',";
            }
        }
        if( strlen($this->allDaySlot) > 0 )
        {
            $js .= "allDaySlot: $this->allDaySlot,";
        }
        if( strlen($this->minTime) > 0 )
        {
            $js .= "minTime: '$this->minTime',";
        }   
        if( count($this->hiddenDays) > 0 )
        {
            $hiddenDays = implode(',', $this->hiddenDays);
            
            $js .= "hiddenDays: [{$hiddenDays}],";
        }
        
        if( is_array($this->dayClick) )
        {
            $js .= $this->getDayClick();
        }
        
        if( is_array($this->externalDrop) )
        {
            $js .= $this->getExternalDrop();
        }
        
        if( is_array($this->eventDrop) )
        {
            $js .= $this->getEventDrop();
        }
        
        if(is_array($this->eventResize) )
        {
            $js .= $this->getEventResize();
        }
        
        if( count( $this->events ) > 0 )
        {
            $js .= ' events: [';
            foreach( $this->events as $cod=>$event )
            {           
                //editable: bloqueia a movimentação, edição somente no popup
                $js .= "{ editable: '".$event->editable."', title: '".addslashes($event->description)."', start: '".$event->start."', color: '".$event->color."', allDay: '".$event->allDay."', durationEditable: '".$event->durationEditable."',";
                if( strlen($event->url) > 0 )
                {
                    $js .= 'url: "'.$event->url.'",';
                }
                if( strlen($event->end) > 0 )
                {
                    $js .= 'end: "'.$event->end.'",';
                }
                if( strlen($event->id) > 0 )
                {
                    $js .= 'id: "'.$event->id.'",';
                }
                if( strlen($event->pk) > 0 )
                {
                    $js .= 'pk: "'.$event->pk.'",';
                }
                $js .= "},";
            }
            $js .= "],";
        }
        
        $js .= "}); });";
        
        $this->page->AddStyleCode('
            body {
		margin-top: 40px;
		text-align: center;
		font-size: 14px;
		font-family: "Lucida Grande",Helvetica,Arial,Verdana,sans-serif;
		}

	#calendar {
		width: 600px;                
		margin: 0 auto;
		}
            ');

        $this->page->addJsCode($js);
        
        return parent::generate();
    }
    
    /**
     * Get js from mfullcalendar dayClick event
     * @return string
     */
    protected function getDayClick()
    {
        $otherArgs = "";
        $js .= " dayClick: function(date, allDay, jsEvent, view) { ";
        $js .= "saguDoAjax('" . $this->dayClick['event'] . "','" . $this->dayClick['responseElement'] . "','" . ($this->dayClick['validate'] ? 'true' : 'false') . "',";
        
        if ( count($this->dayClick['args']) > 0 )
        {
            foreach ( $this->dayClick['args'] as $key => $val )
            {
                $value = '';
                $value .= $val;
                $otherArgs .= '&' . $key . '=' . ($this->dayClick['encodeValues'] ? urlencode($value) : $value);                
            }
        }
        $js .= $otherArgs."'&date='+$.fullCalendar.formatDate(date, 'dd/MM/yyyy')+'&time='+$.fullCalendar.formatDate(date, 'HH:mm')+'&allDay='+allDay+'&jsEvent='+jsEvent+'&view='+view.name);";
        $js .= "return false;";
        $js .= " },";
        
        return $js;
    }
    
    protected function getExternalDrop()
    {
        $otherArgs = "";
        $js .= " drop: function(date, allDay, jsEvent, ui) {";
        $js .= "saguDoAjax('" . $this->externalDrop['event'] . "','" . $this->externalDrop['responseElement'] . "','" . ($this->externalDrop['validate'] ? 'true' : 'false') . "',";
        
        if ( count($this->externalDrop['args']) > 0 )
        {
            foreach ( $this->externalDrop['args'] as $key => $val )
            {
                $value = '';
                $value .= $val;
                $otherArgs .= "'&" . $key . "'=" . ($this->externalDrop['encodeValues'] ? urlencode($value) : $value);                
            }
        }
        $js .= $otherArgs."'&date='+$.fullCalendar.formatDate(date, 'dd/MM/yyyy')+'&time='+$.fullCalendar.formatDate(date, 'HH:mm')+'&event.allDay='+allDay+'&ofertacomponentecurricularid='+this.id+'&view='+$('#calendar').fullCalendar('getView').name);";
        $js .= "return true;";
        $js .= " },";
        
        return $js;
    }
    
    protected function getEventDrop()
    {
        $otherArgs = "";
        $js .= " eventDrop: function(event, dayDelta, minuteDelta, allDay, revertFunc, jsEvent, ui, view) {";
        $js .= "saguDoAjax('" . $this->eventDrop['event'] . "','" . $this->eventDrop['responseElement'] . "','" . ($this->eventDrop['validate'] ? 'true' : 'false') . "',";
        
        if ( count($this->eventDrop['args']) > 0 )
        {
            foreach ( $this->eventDrop['args'] as $key => $val )
            {
                $value = '';
                $value .= $val;
                $otherArgs .= "'&" . $key . "'=" . ($this->eventDrop['encodeValues'] ? urlencode($value) : $value);                
            }
        }
        $js .= $otherArgs."'&date='+$.fullCalendar.formatDate(event.start, 'dd/MM/yyyy')+'&time='+$.fullCalendar.formatDate(event.start, 'HH:mm')+'&event.allDay='+allDay+'&id='+event.id+'&pk='+event.pk+'&view='+view.name);";
        $js .= "return true;";
        $js .= " },";
        
        return $js;
    }
    
    protected function getEventResize()
    {
        $otherArgs = "";
        $js .= " eventResize: function( event, dayDelta, minuteDelta, revertFunc, jsEvent, ui, view ) {";
        $js .= "saguDoAjax('" . $this->eventResize['event'] . "','" . $this->eventResize['responseElement'] . "','" . ($this->eventResize['validate'] ? 'true' : 'false') . "',";
        
        if ( count($this->eventResize['args']) > 0 )
        {
            foreach ( $this->eventResize['args'] as $key => $val )
            {
                $value = '';
                $value .= $val;
                $otherArgs .= "'&" . $key . "'=" . ($this->eventResize['encodeValues'] ? urlencode($value) : $value);                
            }
        }
        $js .= $otherArgs."'&dateStart='+$.fullCalendar.formatDate(event.start, 'dd/MM/yyyy')+'&dateEnd='+$.fullCalendar.formatDate(event.end, 'dd/MM/yyyy')+'&timeStart='+$.fullCalendar.formatDate(event.start, 'HH:mm')+'&timeEnd='+$.fullCalendar.formatDate(event.end, 'HH:mm')+'&id='+event.id+'&pk='+event.pk+'&view='+view.name);";
        $js .= "return true;";
        $js .= " },";
        
        return $js;
    }
}
?>
