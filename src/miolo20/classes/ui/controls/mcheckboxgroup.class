<?php

/**
 * MCheckBoxGroup class.
 *
 * @author Daniel Hartmann [daniel@solis.coop.br]
 *
 * \b Maintainers: \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Daniel Hartmann [daniel@solis.coop.br]
 *
 * @since
 * Creation date 2011/04/11
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluушes Livres \n
 *
 * \b Copyright: \n
 * Copyright (c) 2011 SOLIS - Cooperativa de Soluушes Livres \n
 *
 * \b License: \n
 * Licensed under GPLv2 (for further details read the COPYING file or http://www.gnu.org/licenses/gpl.html)
 */

class MCheckBoxGroup extends MContainer
{
    /**
     * MCheckBoxGroup constructor
     *
     * @param string $name
     * @param string $label
     * @param array $options Set of options. It can be:
     *                        - a simple array of values
     *                        - an array of key/value pairs
     *                        - an array of MOption objects
     *                        - an array of MCheckBox objects
     * @param string $hint
     * @param string $disposition Disposition. Can be horizontal or vertical.
     * @param string $border Totally deprecated, since this component now is a MContainer.
     */
    public function __construct($name='', $label='', $options='', $hint='', $disposition='horizontal', $border='none', $showRequiredLabel=false)
    {
        $controls = array();

        if ( !is_array($options) )
        {
            $options = array( $options );
        }

        $n = count($options);

        for ( $i = 0; $i < $n; $i++ )
        {
            // we will accept an array of CheckBox ...
            if ( $options[$i] instanceof MCheckBox )
            {
                $controls[] = clone $options[$i];
            }
            else
            {
                // we will accept an array of Options ...
                if ( $options[$i] instanceof MOption )
                {
                    $oName = $name . '_' . $options[$i]->name;
                    $oLabel = $options[$i]->label;
                    $oValue = $options[$i]->value;
                    $oChecked = $options[$i]->checked || ( $oValue == $_REQUEST[$oName] );
                }
                // or an array of label/value pairs ...
                elseif ( is_array($options[$i]) )
                {
                    $oName = $name . '_' . $i;
                    $oLabel = $options[$i][0];
                    $oValue = $options[$i][1];
                    $oChecked = $oValue == $_REQUEST[$oName];
                }
                // or a simple array of values
                else
                {
                    $oName = $name . '_' . $i;
                    $oLabel = $oValue = $options[$i];
                    $oChecked = $oValue == $_REQUEST[$oName];
                }

                $option = new MCheckBox($oName, $oValue, $oLabel, $oChecked, $oLabel);
                $option->setFormMode(self::FORM_MODE_WHOLE_ROW);
                if ( $options[$i] instanceof MOption )
                {
                    $option->attrs = $options[$i]->attrs;
                }
                $controls[] = $option;
            }
        }

        $fields[] = $container = new MContainer("{$name}_container", $controls, $disposition, self::FORM_MODE_SHOW_SIDE);
        $container->setShowLabel(false);

        parent::__construct($name, $fields, 'horizontal', self::FORM_MODE_SHOW_SIDE);
        $this->showRequiredLabel = $showRequiredLabel;
        $this->label = $label;
        $this->setShowLabeL(false);
    }

    /**
     * @return array Get the values from all checked boxes
     */
    public function getValue()
    {
        $value = array( );
        $controls = $this->GetControls();

        foreach ( $controls as $control )
        {
            $value[$control->GetName()] = $control->checked ? $control->GetValue() : NULL;
        }

        return $value;
    }
}

?>