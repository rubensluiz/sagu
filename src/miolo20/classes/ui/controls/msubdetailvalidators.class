<?php

/**
 * Replace of original MIOLO validator functions
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * \b Maintainers: \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Daniel Hartmann [daniel@solis.coop.br]
 *
 * @since
 * Class created on 21/01/2009
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Solucoes Livres \n
 * The Gnuteca3 Development Team
 *
 * \b Copyright: \n
 * Copyright (c) 2009-2011 SOLIS - Cooperativa de Solucoes Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or http://www.gnu.org/copyleft/gpl.html )
 *
 * \b History: \n
 * See history in SVN repository: http://gnuteca.solis.coop.br
 *
 * */
class MSubDetailValidators extends MGrid
{
    public $errors;
    public $validators = array();
    public $form;

    public function __construct()
    {
    }

    /**
     * Set the MSubDetail validators.
     *
     * @param array $validators Array of MValidator instances.
     */
    public function setValidators($validators)
    {
        $this->validators = (array) $validators;
    }

    /**
     * Get the MSubDetail validators.
     *
     * @return array Array of MValidator instances. 
     */
    public function getValidators()
    {
        return $this->validators;
    }

    /**
     * Method to transform MValidator instances into stdClass.
     *
     * @param array $valids Array of MValidator instances.
     * @return array Array of stdClass instances.
     */
    public function transformToStdClasses($valids=NULL)
    {
        $validators = array();

        if ( !$valids )
        {
            $valids = $this->validators;
        }

        foreach ( $valids as $line => $validator )
        {
            $validators[$line] = new stdClass();
            $validators[$line]->id = $validator->id;
            $validators[$line]->field = $validator->field;
            $validators[$line]->min = $validator->min;
            $validators[$line]->max = $validator->max;
            $validators[$line]->type = $validator->type;
            $validators[$line]->chars = $validator->chars;
            $validators[$line]->mask = $validator->mask;
            $validators[$line]->checker = $validator->checker;
            $validators[$line]->msgerr = $validator->msgerr;
            $validators[$line]->html = $validator->html;
            $validators[$line]->label = $validator->label;
            $validators[$line]->value = $validator->value;
            $validators[$line]->hint = $validator->hint;
            $validators[$line]->regexp = $validator->regexp;
            $validators[$line]->name = $validator->name;
            $validators[$line]->form = $validator->form;
        }

        return $validators;
    }

    /**
     * Static method to transform stdClass instances into MValidator.
     *
     * @param array $valids Array of stdClass instances.
     * @return array Array of MValidator instances.
     */
    public static function transformToMValidators($valids)
    {
        $validators = array();

        foreach ( $valids as $line => $validator )
        {
            switch ( $validator->checker )
            {
                case 'EMAIL':
                    $validators[$line] = new MEmailValidator($validator->field);
                    break;
                case 'PASSWORD':
                    $validators[$line] = new MPasswordValidator($validator->field);
                    break;
                case 'TIME':
                    $validators[$line] = new MTIMEValidator($validator->field);
                    break;
                case 'CPF':
                    $validators[$line] = new MCPFValidator($validator->field);
                    break;
                case 'CNPJ':
                    $validators[$line] = new MCNPJValidator($validator->field);
                    break;
                case 'DATEDMY':
                    $validators[$line] = new MDATEDMYValidator($validator->field);
                    break;
                case 'DATEYMD':
                    $validators[$line] = new MDATEYMDValidator($validator->field);
                    break;
                case 'COMPARE':
                    $validators[$line] = new MCompareValidator($validator->field);
                    break;
                case 'RANGE':
                    $validators[$line] = new MRangeValidator($validator->field);
                    break;
                case 'REGEXP':
                    $validators[$line] = new MRegExpValidator($validator->field);
                    break;
                case 'DATETimeDMY':
                    $validators[$line] = new MDATETimeDMYValidator($validator->field);
                    break;
                default:
                    $validators[$line] = new MValidator();
                    break;
            }
            $validators[$line]->id = $validator->id;
            $validators[$line]->field = $validator->field;
            $validators[$line]->min = $validator->min;
            $validators[$line]->max = $validator->max;
            $validators[$line]->type = $validator->type;
            $validators[$line]->chars = $validator->chars;
            $validators[$line]->mask = $validator->mask;
            $validators[$line]->checker = $validator->checker;
            $validators[$line]->msgerr = $validator->msgerr;
            $validators[$line]->html = $validator->html;
            $validators[$line]->label = $validator->label;
            $validators[$line]->value = $validator->value;
            $validators[$line]->hint = $validator->hint;
            $validators[$line]->regexp = $validator->regexp;
            $validators[$line]->name = $validator->name;
            $validators[$line]->form = $validator->form;
        }

        return $validators;
    }

    public function setForm(MForm $form)
    {
        $this->form = $form;
    }

    /**
     * Return the message to show for validator
     *
     * @param string $message to show
     * @param object $valid validator do detect the message
     * @return string the message
     */
    public function getValidatorMessage($message, $valid)
    {
        $msg = _M($message, NULL, $valid->field);

        if ( $valid->msgerr )
        {
            $msg = $valid->msgerr;
        }
        else if ( $valid->label )
        {
            $msg = _M($message, NULL, $valid->label);
        }
        else if ( $this->form )
        {
            //Get label name of form field
            $field = $this->form->getField($valid->field);
            if ( $field->label )
            {
                $msg = _M($message, NULL, $field->label);
            }
        }
        return $msg;
    }

    public function validate($data = NULL, $validators = NULL)
    {
        $errors = $this->errors;
        if ( !$data )
        {
            foreach ( $this->validators as $v )
            {
                $data[] = MIOLO::_REQUEST($v->field);
            }
        }

        if ( !$validators )
        {
            $validators = $this->getValidators();
        }

        if ( !$validators || !is_array($validators) )
        {
            return null;
        }

        foreach ( $validators as $line => $valid )
        {
            $field = $valid->field;
            if ( ($valid->type == 'required') && ($data->$field == '') )
            {
                $errors[] = $this->getValidatorMessage(_M('The field "@1" is required.'), $valid);
            }
            else if ( $data->$field )
            {
                $msg_invalid = $this->getValidatorMessage(_M('The field "@1" is invalid.'), $valid);
                if ( ($valid->checker == 'REGEXP') && ($valid->regexp) )
                {
                    $ok = ereg($valid->regexp, $data->$field);
                    if ( !$ok )
                    {
                        $errors[] = $msg_invalid;
                    }
                }
                else if ( $valid->checker == 'DATEDMY' )
                {
                    $date = explode('/', $data->$field);
                    if ( !preg_match('/[0-9]{2}\/[0-9]{2}\/[0-9]{4}/', $data->$field) || !checkdate($date[1], $date[0], $date[2]) )
                    {
                        $errors[] = $msg_invalid;
                    }
                }
                else if ( ($valid->checker == 'TIME') && (!ereg('^[0-9]{2}:[0-5][0-9]$', $data->$field)) )
                {
                    $errors[] = $msg_invalid;
                }
                else if ( ($valid->checker == 'EMAIL') && (!is_valid_email($data->$field)) )
                {
                    $errors[] = $msg_invalid;
                }
                else if ( ($valid->id == 'cep') && (!ereg("^[0-9]{5}-[0-9]{3}$", $data->$field)) )
                {
                    $errors[] = $msg_invalid;
                }
                // TODO: CPF, CNPJ, PHONE and RANGE validator
                // TODO: Put focus at the first unvalid field
            }

            if ( $valid->checker == 'unique' )
            {
                $tempData = MSubDetail::getData($data->MSubDetail);
                if ( is_array($tempData) && $tempData )
                {
                    foreach ( $tempData as $l => $i )
                    {
                        if ( !$i->removeData )
                        {
                            if ( $i->$field == $data->$field )
                            {
                                // If is the edited line, it is not duplicating.
                                if ( is_null($data->arrayItemTemp) || ($data->arrayItemTemp != $i->arrayItem) )
                                {
                                    $errors[] = $this->getValidatorMessage(_M('The field "@1" must be unique.'), $valid);
                                }
                            }
                        }
                    }
                }
            }
        }

        return $errors;
    }

}

class MSubDetailUniqueValidator extends MValidator
{

    /**
     * Construct a MSubDetailUniqueValidator
     *
     * @param string $field the id of the field to validate
     * @param string $label the label of validator
     * @param string $type the type of validator
     * @param string $msgerr the error message to show
     */
    function __construct($field, $label=null, $type='optional', $msgerr=null)
    {
        parent::__construct();
        $this->id = 'unique';
        $this->field = $field;
        $this->label = $label;
        $this->mask = '';
        $this->type = $type;
        $this->checker = 'unique';
        //$this->min      = 0;
        //$this->max      = $max;
        $this->chars = 'ALL';
        $this->msgerr = $msgerr;
    }

}

class MSubDetailDateValidator extends MValidator
{

    function __construct($field, $label = null, $msgerr=null, $mask = "dd/mm/yyyy")
    {
        parent::__construct();
        $this->id = 'date';
        $this->field = $field;
        $this->label = $label;
        $this->mask = $mask;
        $this->type = 'date';
        $this->chars = 'ALL';
        $this->msgerr = $msgerr;
    }

}

function is_valid_email($email)
{
    if ( !eregi("^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})$", $email) )
    {
        return false;
    }
    return true;
}

?>
