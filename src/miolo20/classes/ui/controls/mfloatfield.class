<?php

$MIOLO = MIOLO::getInstance();
$MIOLO->page->addScript('m_floatfield.js');

/**
 * Input field for float numbers.
 *
 * @author Daniel Hartmann [daniel@solis.coop.br]
 *
 * \b Maintainers: \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Daniel Hartmann [daniel@solis.coop.br]
 *
 * @since
 * Creation date 2011/10/17
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluушes Livres \n
 *
 * \b Copyright: \n
 * Copyright (c) 2011 SOLIS - Cooperativa de Soluушes Livres \n
 *
 * \b License: \n
 * Licensed under GPLv2 (for further details read the COPYING file or http://www.gnu.org/licenses/gpl.html)
 *
 */
class MFloatField extends MTextField
{
    /**
     * @var object MTextField instance which shows the value to the user on the format 0,00.
     */
    private $userField;

    /**
     * @var integer Number of digits after separator.
     */
    private $fixed = 2;

    /**
     * @var character Digits separator. 
     */
    private $separator = ',';

    /**
     * MFloatField constructor.
     *
     * @param string $name Field name.
     * @param mixed $value Float number.
     * @param string $label Field label.
     * @param integer $size Field size.
     * @param string $hint Field hint.
     * @param object $validator Field validator. Instance of MValidator.
     * @param boolean $isReadOnly Whether the field is read-only.
     */
    public function __construct($name='', $value='', $label='', $size=10, $hint='', $validator=NULL, $isReadOnly=false, $fixed=2, $separator=',')
    {
        $userFieldId = "{$name}user";
        $this->userField = new MTextField($userFieldId, $value, $label);

        parent::__construct($name, $value, $label, $size, $hint, $validator, $isReadOnly);

        $this->fixed = $fixed;
        $this->separator = $separator;
    }

    /**
     * @param mixed $value Float number. I.e. 123.456
     */
    public function setValue($value)
    {
        if ( isset($value) && $value != '' )
        {
            if ( $this->separator == ',' )
            {
                $userValue = str_replace('.', ',', $value);
            }
        }

        $this->userField->setValue($userValue);
        $this->value = $value;
    }

    /**
     * @param integer $fixed Set the number of digits after separator.
     */
    public function setFixed($fixed)
    {
        $this->fixed = $fixed;
    }

    /**
     * @return integer Get the number of digits after separator.
     */
    public function getFixed()
    {
        return $this->fixed;
    }

    /**
     * @param character $separator Set the digits separator.
     */
    public function setSeparator($separator)
    {
        $this->separator = $separator;
    }

    /**
     * @return character Get the digits separator.
     */
    public function getSeparator()
    {
        return $this->separator;
    }

    /**
     * Add a attribute the user field.
     *
     * @param string $name Attribute name.
     * @param string $value Attribute value.
     */
    public function addAttribute($name, $value='')
    {
        $this->userField->addAttribute($name, $value);
    }

    /**
     * Add a style to the whole box, not only the input field.
     *
     * @param string $name Style name.
     * @param string $value Style value.
     */
    public function addBoxStyle($name, $value)
    {
        parent::addBoxStyle($name, $value);
        $this->userField->addBoxStyle($name, $value);
    }

    /**
     * Set the field as read only.
     *
     * @param boolean $readOnly Wheter is read only.
     */
    public function setReadOnly($readOnly)
    {
        parent::setReadOnly($readOnly);
        $this->userField->setReadOnly($readOnly);
    }

    /**
     * @return string Get the generated form of the component.
     */
    public function generate()
    {
        $this->setValue($this->value);
        $this->userField->setValue($this->value);
        
        $jsValidate = "MIOLO_FloatField.validate(this, $this->fixed, '$this->separator');";
        $jsUpdate = "MIOLO_FloatField.update(this, '$this->name', $this->fixed, '$this->separator');";
        
        // Remove non float
        $this->userField->addAttribute('onkeyup', $jsValidate);

        // Update real field
        $this->userField->addAttribute('onkeypress', $jsUpdate);

        // Do everything when changing the value other way (like pasting)
        $this->userField->addAttribute('onchange', "$jsValidate $jsUpdate");
        
        parent::addBoxStyle('display', 'none');
        return $this->userField->generate() . parent::generate();
    }
}

?>