<?php

/**
 * MRadioButtonGroup class.
 *
 * @author Daniel Hartmann [daniel@solis.coop.br]
 *
 * \b Maintainers: \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Daniel Hartmann [daniel@solis.coop.br]
 *
 * @since
 * Creation date 2011/04/11
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b Copyright: \n
 * Copyright (c) 2011 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPLv2 (for further details read the COPYING file or http://www.gnu.org/licenses/gpl.html)
 */

class MRadioButtonGroup extends MContainer
{
    /**
     * @var string Default value.
     */
    public $default;

    /**
     * @var array MRadioButton array.
     */
    public $options;

    /**
     * @var object MContainer instance which contains the radio buttons.
     */
    private $container;

    /**
     * MRadioButtonGroup constructor
     *
     * @param string $name
     * @param string $label
     * @param array $options Set of options. It can be:
     *                        - a simple array of values
     *                        - an array of key/value pairs
     *                        - an array of MOption objects
     *                        - an array of MRadioButton objects
     * @param string $default
     * @param string $hint
     * @param string $disposition Disposition. Can be horizontal or vertical.
     * @param string $border Totally deprecated, since this component now is a MContainer.
     */
    public function __construct($name='', $label='', $options='', $default='', $hint='', $disposition='vertical', $border='none', $showRequiredLabel=false)
    {
        $controls = array();

        if ( !is_array($options) )
        {
            $options = array( $options );
        }
        $this->options = $options;

        $n = count($options);

        // manage options when they are a value => label array
        reset($options);
        $keys = array_keys($options);
        if ( is_string(current($keys)) )
        {
            foreach ( $options as $i => $option )
            {
                if ( $options[$i] instanceof MRadioButton )
                {
                    $options[$i]->SetName($name);
                    $options[$i]->SetId($name . '_' . $i);
                    $options[$i]->checked = ( $options[$i]->checked || ( $options[$i]->value == $default ) );
                    $controls[] = clone $options[$i];
                }
                else
                {
                    $oName = $name . '_' . $i;
                    $oValue = $i;
                    $oLabel = $options[$i];
                    $oChecked = ( $oValue == $default ) || ( $oValue == $_REQUEST[$oName] );

                    $control = new MRadioButton($oName, $oValue, $oLabel, $oChecked, $oLabel, $hint);
                    $control->SetName($name);
                    if ( $options[$i] instanceof MOption )
                    {
                        $control->attrs = $options[$i]->attrs;
                    }

                    $controls[] = $control;
                }
            }
        }
        else
        {
            for ( $i = 0; $i < $n; $i++ )
            {
                // we will accept an array of RadioButton ...
                if ( $options[$i] instanceof MRadioButton )
                {
                    $options[$i]->SetName($name);
                    $options[$i]->SetId($name . '_' . $i);
                    $options[$i]->checked = ( $options[$i]->checked || ( $options[$i]->value == $default ) );
                    $controls[] = clone $options[$i];
                }
                else
                {
                    $oName = $name;

                    // we will accept an array of Options ...
                    if ( $options[$i] instanceof MOption )
                    {
                        $oName = $name . '_' . $options[$i]->name;
                        $oLabel = $options[$i]->label;
                        $oValue = $options[$i]->value;
                        $oChecked = ( $oValue == $default ) || $options[$i]->checked || ( $oValue == $_REQUEST[$oName] );
                    }
                    // or an array of label/value pairs ...
                    elseif ( is_array($options[$i]) )
                    {
                        $oName = $name . '_' . $i;
                        $oLabel = $options[$i][0];
                        $oValue = $options[$i][1];
                        $oChecked = ( $oValue == $default ) || ( $oValue == $_REQUEST[$oName] );
                    }
                    // or a simple array of values
                    else
                    {
                        $oName = $name . '_' . $i;
                        $oLabel = $oValue = $options[$i];
                        $oChecked = ( $oValue == $default ) || ( $oValue == $_REQUEST[$oName] );
                    }

                    $control = new MRadioButton($oName, $oValue, $oLabel, $oChecked, $oLabel, $hint);
                    $control->SetName($name);
                    if ( $options[$i] instanceof MOption )
                    {
                        $control->attrs = $options[$i]->attrs;
                    }

                    $controls[] = $control;
                }
            }
        }

        $fields[] = $this->container = new MContainer("{$name}_container", $controls, $disposition);
        $this->container->setClass('m-radiobutton-group');

        parent::__construct($name, $fields, 'horizontal', self::FORM_MODE_SHOW_SIDE);
        $this->value = $default;
        $this->showRequiredLabel = $showRequiredLabel;
        $this->label = $label;
        $this->setShowLabeL(false);
    }

    /**
     * @param string $v Set the checked value
     */
    public function setValue($v)
    {
        if ( $v )
        {
            $this->_setValue($v);
        }
    }

    private function _setValue($v)
    {
        $n = 0;

        foreach ( $this->container->getControls() as $option )
        {
            if ( $option->value )
            {
                if ( $v == $option->value )
                {
                    $option->checked = true;
                    $this->value = $v;
                }
                else
                {
                    $option->checked = false;
                }
            }

            $n++;
        }
    }

    /**
     * @return string Get the checked value
     */
    public function getValue()
    {
        $value = NULL;

        foreach ( $this->getControls() as $control )
        {
            if ( $control->checked )
            {
                $this->value = $value = $control->GetValue();
            }
        }

        return $value;
    }
}

/**
 * Corrige a forma de passar os valores ($options) para o padrao, ou seja, array associativo, ex.:
 * 
 * new MRadioButtonGroupFixed('myid', 'a', 'My radio group', array(
 *     'a' => 'Letter A',
 *     'b' => 'Letter B'
 * ));
 */
class MRadioButtonGroupFixed extends MRadioButtonGroup
{
    public function __construct($name='', $value='', $label='', $options=array(), $hint='', $disposition='vertical', $border='none', $showRequiredLabel=false)
    {
        $newOptions = array();
        
        foreach ( $options as $key => $val )
        {
            $newOptions[] = array($val, $key);
        }
        
        parent::__construct($name, $label, $newOptions, $value, $hint, $disposition, $border, $showRequiredLabel);
    }
}

?>