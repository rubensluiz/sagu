<?php

/**
 * MMultiTextField class
 * Based on MMultiTextField2, created to unify this component
 *
 * @author Daniel Hartmann [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Daniel Hartmann [daniel@solis.coop.br]
 *
 * @since
 * Class created on 22/12/2010
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b CopyRight: \n
 * Copyright (c) 2010 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPLv2 (for further details read the COPYING file or http://www.gnu.org/licenses/gpl.html)
 */
class MMultiTextField extends MTextField
{
    protected $buttons;
    protected $fields;
    protected $showcode;
    protected $shownav;
    protected $layout;
    protected $codevalue;
    protected $colWidth;
    public $info;
    protected $numRows;
    public $fieldWidth;

    public function __construct($name = '', $value = null, $label = '', $fields = '', $width = 200, $buttons = false, $layout = 'vertical', $hint = '')
    {
        parent::__construct($name, $value, $label, null, $hint);

        $this->page->addScript('m_multitext.js');

        $this->fields = $fields;
        $this->colWidth = $width;
        $this->buttons = $buttons;
        $this->layout = $layout;
        $this->fieldWidth = $width - 20;
        $this->showcode = false;
        $this->shownav = false;
        $this->numRows = 5;
        $this->formMode = 0;
    }

    public function getCodeValue()
    {
        $r = array( );

        $value = $this->value;

        if ( is_array($value) )
        {
            for ( $i = 0; $i < count($value); $i++ )
            {
                $s = substr($value[$i], 1, strlen(trim($value[$i])) - 2);
                $a = explode('] [', $s);

                if ( is_array($a) )
                {
                    for ( $j = 0; $j < count($a); $j++ )
                    {
                        if ( is_array($this->fields[$j]) )
                        {
                            $options = $this->fields[$j][3];

                            if ( $options )
                            {
                                $r[$i][$j] = array_search($a[$j], $options);
                            }
                            else
                            {
                                $r[$i][$j] = $a[$j];
                            }
                        }
                        else
                        {
                            $r[$i][$j] = $a[$j];
                        }
                    }
                }
            }
        }

        $this->codevalue = $r;

        return $this->codevalue;
    }

    public function setCodeValue($value)
    {
        $this->codevalue = $value;
        $r = array( );

        if ( is_array($value) )
        {
            for ( $i = 0; $i < count($value); $i++ )
            {
                $a = $value[$i];

                if ( is_array($a) )  // varios valores => varios fields
                {
                    for ( $j = 0; $j < count($a); $j++ )
                    {
                        if ( is_array($this->fields[$j]) )
                        {
                            $options = $this->fields[$j][3];

                            if ( $options )
                            {
                                $r[$i] .= '[' . $options[$value[$i][$j]] . '] ';
                            }
                            else
                            {
                                $r[$i] .= '[' . $value[$i][$j] . '] ';
                            }
                        }
                        else
                        {
                            $r[$i] .= '[' . $value[$i][$j] . '] ';
                        }
                    }
                }
                else // valor unico => apenas um field (na posicao 0)
                {
                    if ( is_object($this->fields[0]) )
                    {
                        $options = $this->fields[0]->value;
                    }
                    else
                        $options = $this->fields[0][3];

                    if ( $options )
                    {
                        $r[$i] .= '[' . $options[$a] . '] ';
                    }
                    else
                    {
                        $r[$i] .= '[' . $a . '] ';
                    }
                }
            }
        }

        $this->value = $r;
    }

    public function generateInner()
    {
        $numFields = count($this->fields);
        $this->page->onSubmit("_MIOLO_MultiTextField_onSubmit('{$this->form->name}','{$this->name}')");

        // select
        $labelS = $this->info . "&nbsp;";
        $content = array( );

        if ( is_array($this->value) )
        {
            foreach ( $this->value as $v )
            {
                $multiValue = '';

                if ( is_array($v) )
                {
                    foreach ( $v as $i => $v2 )
                    {
                        if ( is_array($this->fields[$i]) && is_array($this->fields[$i][3]) )
                        {
                            $multiValue .= "[" . $this->fields[$i][3][$v2] . "] ";
                        }
                        else
                            $multiValue .= "[" . $v2 . "] ";
                    }
                }
                else
                {
                    $multiValue = $v;
                }

                $content[] = new MOption('', $multiValue, $multiValue);
            }
        }

        $field = new MMultiSelection("{$this->name}", array( ), $labelS, $content, '', '', $this->numRows);

        $field->_AddStyle('width', "{$this->colWidth}px");
        $field->addAttribute('onKeyDown', "return _MIOLO_MultiTextField_onKeyDown(this,this.form,'{$this->name}',event,$numFields);");
        $field->addAttribute('onChange', "_MIOLO_MultiTextField_onSelect(this.form,'{$this->name}', $numFields)");
        $field->setClass('select m-multitext', false);
        $field->formMode = 2;
        $select = $field;

        // fields
        $n = 1;
        unset($ref);

        foreach ( $this->fields as $f )
        {
            if ( $ref )
            {
                $ref .= ',';
            }

            if ( is_object($f) )
            {
                $field = $f;
                $ref .= $f->name;

                $field->name = "{$this->name}_text{$n}";
                $field->addAttribute('onKeyDown', "return  _MIOLO_MultiTextField_onKeyDown(this,this.form,'{$this->name}',event,$numFields)");
                $field->form = $this->form;
            }
            else
            {
                $ref .= $f[0];
                $labelF = htmlspecialchars($f[1]) . ( $f[2] ? ' - ' . htmlspecialchars($f[2]) : '' );

                // caso tenhamos opções para este campo ($f[3] é o array de opções)
                // utilizamos um selection caso contrário um simples text field
                $options = $f[3];
                if ( $options )
                {
                    $content = array( );

                    if ( $this->showcode )
                    {
                        foreach ( $options as $code => $desc )
                        {
                            $content[] = new MOption('', $code, "$code - $desc");
                        }
                    }
                    else
                    {
                        foreach ( $options as $code => $desc )
                        {
                            $content[] = new MOption('', $desc, $desc);
                        }
                    }

                    $field = new MSelection("{$this->name}_options{$n}", '', $labelF, $content);
                    $field->setClass('combo');
                }
                else
                {
                    $field = new MTextField("{$this->name}_text{$n}", '', $labelF);
                    $field->addAttribute('onKeyDown', "return  _MIOLO_MultiTextField_onKeyDown(this,this.form,'{$this->name}',event,$numFields)");
                    $field->setClass('textfield');
                }
            }
            $field->_AddStyle('width', "{$this->fieldWidth}px");
            $field->formMode = 2;
            $fields[] = $field;
            $n++;
        }

        // buttons
        $disposition = ( $this->layout == 'horizontal' ) ? 'vertical' : 'horizontal';
        $button[] = new MButton("{$this->name}_add", 'Adicionar', "_MIOLO_MultiTextField_add(this.form, '{$this->name}',$numFields)");
        $button[] = new MButton("{$this->name}_modify", 'Modificar', "_MIOLO_MultiTextField_modify(this.form,'{$this->name}',$numFields)");
        $button[] = new MButton("{$this->name}_remove", 'Remover', "_MIOLO_MultiTextField_remove(this.form,'{$this->name}',$numFields)");

        if ( $this->shownav )
        {
            $button[] = new MButton("{$this->name}_up", '/\\', "_MIOLO_MultiTextField_moveUp(this.form,'{$this->name}',$numFields)");
            $button[] = new MButton("{$this->name}_down", '\\/', "_MIOLO_MultiTextField_moveDown(this.form,'{$this->name}',$numFields)");
        }

        foreach ( $button as $b )
        {
            $b->setClass('button');
        }

        $buttons = new MContainer('', $button, $disposition);

        $commentIn = $this->painter->comment('START OF Field MultiTextField');
        $commentOut = $this->painter->comment('END OF Field MultiTextField');

        // layout

        $t = array( );
        $cFields = new MContainer('', $fields, 'vertical');
        if ( $this->layout == 'vertical' )
        {
            $t[] = $select;
            $t[] = $cFields;
            $t[] = $buttons;
            $group = new BaseGroup('', $this->label, $t, 'vertical', 'css');
        }
        elseif ( $this->layout == 'vertical2' )
        {
            $t[] = $cFields;
            $t[] = $buttons;
            $t[] = $select;
            $group = new BaseGroup('', $this->label, $t, 'vertical', 'css');
        }
        elseif ( $this->layout == 'horizontal' )
        {
            $t[] = $cFields;
            $t[] = new MDiv('', array( new Div('', '&nbsp;', 'label'), $buttons ), 'buttonPosH');
            $t[] = new MDiv('', $select, 'selectPosH');
            $group = new BaseGroup('', $this->label, $t, 'horizontal', 'css');
        }

        $div = new MDiv('', $group, 'm-multitext-field');
        $this->inner = array( $commentIn, $div, $commentOut );

        return $this->inner;
    }
}
?>
