<?
class MListControl extends MFormControl
{
    var $options;
    var $showValues;
    var $content;
    var $size;
    var $cols; 

    function __construct($name='',$label='',$options='',$showValues=false,$hint='')
    {
        parent::__construct($name,'',$label);
        $this->options = $options;
        $this->showValues = $showValues;
        $this->hint = $hint;
        $this->formMode = 1;
    }

    function GenerateOptions()
    {
        $content = '';
        foreach( array_keys($this->options) as $k )
        {            
           $o = $this->options[$k];
           if ( $o instanceof MOptionGroup )
           {
              foreach( $o->options as $oo )
              {            
                 $oo->SetControl($this);
              }
              $content .= $o->Generate();
           }
           else
           {
              if ( $o instanceof MOption )
              {
                 $oo = $o;
              }
              elseif ( is_array($o) ) 
              {
                 list ($value,$label) = $o;
                 $oo = new MOption('',$value,$label);
              }
              else
              {
                 $oo = new MOption('',$k,$o);
              } 
              $oo->checked = ($oo->value == $this->value);
              $oo->SetControl($this);
              $content .= $oo->Generate();
           }
        }
        return $content;
    }
}

class MSelection extends MListControl
{
    public $autoPostBack;

    /**
     * @var string Trigger an event on selection - autopostback true.
     */
    public $event;
    public $validator;

    /**
     * @var boolean Defines whether to allow null value.
     */
    private $allowNullValue = true;

    public function __construct($name='', $value='', $label='', $options=array( 'Não', 'Sim' ), $showValues=false, $hint='', $size='')
    {
        parent::__construct($name, $label, $options, $showValues, $hint, $size);

        $MIOLO = MIOLO::getInstance();

        if ( is_array($options[0]) )
        {
            $options = array_merge(array( '' => _M('--Select--') ), $options);
        }
        elseif ( is_array($options) )
        {
            $options = array( '' => _M('--Select--') ) + $options;
        }
        else
        {
            $options = array( '' => _M('--Select--') );
        }

        $this->options = $options;
        $this->setValue($value);
        $this->size = $size;
        $this->autoPostBack = false;
        $this->event = '';
    }

    public function GetOption($value)
    {
        foreach ( array_keys($this->options) as $k )
        {
            $o = $this->options[$k];
            if ( is_array($o) )
            {
                list($id, $name) = $o;
                if ( trim($value) == trim($id) )
                {
                    if ( $this->showValues )
                    {
                        $r = $id . ' - ' . $name;
                    }
                    else
                    {
                        $r = $name;
                    }
                }
            }
            else if ( trim($value) == trim($k) )
            {
                if ( $this->showValues )
                {
                    $r = $k . ' - ' . $o;
                }
                else
                {
                    $r = $o;
                }
            }
        }

        return $r;
    }

    public function SetOption($option, $value)
    {
        $this->options[$option] = $value;
    }

    public function SetCols($value)
    {
        $this->cols = $value;
    }

    public function SetAutoSubmit($state)
    {
        $this->autoPostBack = $state;
    }

    /**
     * @param boolean $allowNullValue Set if the component accepts null value.
     */
    public function setAllowNullValue($allowNullValue)
    {
        $this->allowNullValue = $allowNullValue;
    }

    /**
     * @return boolean Return if the component accepts null value.
     */
    public function getAllowNullValue()
    {
        return $this->allowNullValue;
    }

    public function GenerateInner()
    {
        $selected = false;

        if ( $this->event || $this->autoPostBack )
        {
            $this->AddAttribute('onChange', " _doPostBack('{$this->event}','');" . "document.{$this->page->name}.submit();");
        }

        if ( $this->GetClass() == '' )
        {
            $this->SetClass('m-combo');
        }

        if ( !$this->allowNullValue )
        {
            unset($this->options['']);
        }

        if ( $this->readonly )
        {
            $hidden = $this->GetRender('inputhidden');
            $this->SetClass('m-readonly');
            $this->AddAttribute('readonly');
            $this->SetValue($this->GetOption($this->GetValue()));
            $this->size = $this->cols ? $this->cols : strlen(trim($this->getValue())) + 10;

            $this->name .= '_';
            $this->inner = $this->GenerateLabel() . $this->GetRender('inputtext') . $hidden;
        }
        else
        {
            $this->content = $this->GenerateOptions();
            if ( $this->size != '' )
            {
                $this->AddAttribute('size', $this->size);
            }
            $this->inner = $this->GenerateLabel() . $this->GetRender('select');
        }
    }
    
    public function setIsRequired($isRequired)
    {
        $this->setAllowNullValue(false);
        
        return parent::setIsRequired($isRequired);
    }
}

class MMultiSelection extends MListControl
{       
    var $size;

    function __construct($name='', $values=Array('1','2','3'), 
               $label='&nbsp;', $options=Array('Option1','Option2','Option3'),
               $showValues=false, $hint='', $size='3')
    {
        parent::__construct($name,$label,$options,$showValues,$hint);
        $this->size       = $size;
        $this->value      = $values; // is this still necessary?
    }

    function getName()
    {
        return (strpos($this->name, '[]') !== false ? $this->name : $this->name.'[]');
    }

    function GenerateInner()
    {
        /*
         * FIXME: Why does it need to echo warning messages?
         * I can't simply change them to errors or warnings. Probably the best would be to show them on the javascript 
         * console or something.
         */
        if ( $this->value && !is_array($this->value) )
        {
            echo $this->painter->div(new Div('', _M('Values must be a single-dimensional array'), 'alert'));
        }

        if ( !is_array($this->options) )
        {
            echo $this->painter->div(new Div('', _M('Options must be a single or multi-dimensional array'), 'alert'));
        }

        $this->content = $this->GenerateOptions();
        $this->AddAttribute('multiple', '');
        $this->AddAttribute('size', $this->size);

        if ( $this->GetClass() == '' )
        {
            $this->SetClass('m-combo');
        }

        $this->inner = $this->GenerateLabel() . $this->GetRender('select');
    }
}

class MComboBox extends MSelection
{
    var $size;

    function __construct($name='',$value='',$label='',$options='',$showValues=false,$hint='',$size=6)
    {
        parent::__construct($name,$value,$label,$options,$hint);
        $this->size = $size;
        if (is_array($this->options)) {
           reset($this->options);
           $o = current($this->options);
        } 
    }

   function GenerateInner()
   {

	  if ( $this->readonly )
      {
          $this->SetClass('m-readonly');
          $this->AddAttribute('readonly');
          $this->SetValue($this->GetOption($this->GetValue()));
          $this->inner = $this->GenerateLabel() . $this->GetRender('inputtext');
          return;
      }

      $text = new MTextField($this->name,$this->value,'',$this->size);
      $text->SetAttributes($this->Attributes());
      $text->AddAttribute('onChange',"ComboBox_onTextChange('{$this->label}', this.form.elements['{$this->name}'],this.form.elements['{$this->name}_sel']);" . ( $this->autoPostBack ? " _doPostBack('{$this->event}',''); document.{$this->page->name}.submit();" : '' )); 
      //$text->AddAttribute('onClick',"ComboBox_onTextChange('{$this->label}', this.form.elements['{$this->name}'],this.form.elements['{$this->name}_sel'])"); 

      $select = new MSelection("{$this->name}_sel",$this->value,'',$this->options);
      $select->SetAttributes($this->Attributes());
      $select->AddAttribute('onChange',"ComboBox_onSelectionChange('{$this->label}', this.form.elements['{$this->name}_sel'], this.form.elements['{$this->name}']);" . ( $this->autoPostBack ? " _doPostBack('{$this->event}',''); document.{$this->page->name}.submit();" : '' ));
      $select->AddAttribute('onClick',"ComboBox_onSelectionChange('{$this->label}', this.form.elements['{$this->name}_sel'], this.form.elements['{$this->name}'])");

      //$span = new Span('',array($text->Generate(),' - ',$select->Generate()));
      //$this->inner = $this->GenerateLabel() . $span->generate();
      $this->inner = $this->GenerateLabel() . $text->generate().  $select->generate( );
   }
}
?>
