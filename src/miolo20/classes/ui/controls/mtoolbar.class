<?php
/**
 *  Mtoolbar componen
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *         Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *         Nasair Júnior da Silva [njunior@solis.coop.br]
 *         Vilson Cristiano Gartner [vilson@miolo.org.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Vilson Cristiano Gartner [vilson@miolo.org.br]
 *
 * @since
 * Creation date 2005/08/04
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The MIOLO2 AND SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or 
 * http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://www.miolo.org.br
 *
 */

class MToolBarButton extends MControl
{
    /**
     * Button types.
     */
    const TYPE_ICON_ONLY = 'icon-only';
    const TYPE_ICON_TEXT = 'icon-text';

    public  $name;
    public  $caption;
    public  $enabled;
    public $visible = true;

    protected $url;
    protected $hint;
    protected $enabledImage;
    protected $disabledImage;
    protected $button;
    protected $method='';
    protected $target = '_self';
    protected static $type = self::TYPE_ICON_ONLY;

    public function __construct($name, $caption, $url, $hint, $enabled, $enabledImage, $disabledImage, $method='')
    {
        $this->name = $name;
        $this->caption = $caption;
        $this->url = $url;
        $this->hint = $hint;
        $this->enabled = $enabled;
        $this->method = $method;
        $this->enabledImage = $enabledImage;
        $this->disabledImage = $disabledImage;
    }

    public function setMethod($method='post')
    {
        $this->method = $method;
    }

    /**
     * Set button type.
     * 
     * @param string $type Use constants TYPE_ICON_*.
     */
    public static function setType($type)
    {
        self::$type = $type;
    }

    public function getButton()
    {
        if ( $this->visible )
        {
            if ( $this->enabled )
            {
                if ( self::$type == self::TYPE_ICON_ONLY )
                {
                    if( $this->method == 'post')
                    {
                        $this->button = new MImageButton($this->name, $this->caption, $this->url, $this->enabledImage);
                    }
                    else
                    {
                        $this->button = new MImageLink($this->name, $this->caption, $this->url, $this->enabledImage);
                    }
                }
                else
                {
                    if( $this->method == 'post')
                    {
                        $this->button = new MImageButtonLabel($this->name, $this->caption, $this->url, $this->enabledImage);
                    }
                    else
                    {
                        $this->button = new MImageLinkLabel($this->name, $this->caption, $this->url, $this->enabledImage);
                    }
                }

                $this->button->setTarget($this->target);
                $this->button->setBoxClass('m-toolbar-button');
            }
            else
            {
                if ( self::$type == self::TYPE_ICON_ONLY )
                {
                    $this->button = new MImage($this->name, $this->caption, $this->disabledImage);
                }
                else
                {
                    $this->button = new MImageLabel($this->name, $this->caption, $this->disabledImage);
                }

                $this->button->setBoxClass('m-toolbar-button m-toolbar-button-disabled');
            }

            if ( $this->button )
            {
                $this->button->setJSHint($this->hint);
            }
        }
        return $this->button;
    }

    public function show()
    {
        $this->enable();
    }

    /**
     * Set the button as invisible. 
     */
    public function hide()
    {
        $this->visible = false;
    }

    public function enable()
    {
        $this->enabled = true;
    }

    public function disable()
    {
        $this->enabled = false;
    }
    
    /**
     * @return the $url
     */
    public function getUrl()
    {
        return $this->url;
    }
 
    /**
     * @param $url the $url to set
     */
    public function setUrl($url)
    {
        $this->url = $url;
    }

    /**
     * @return the $hint
     */
    public function getHint()
    {
        return $this->hint;
    }

    /**
     * @param $hint the $hint to set
     */
    public function setHint($hint)
    {
        $this->hint = $hint;
    }

    /**
     * @return the $enabledImage
     */
    public function getEnabledImage()
    {
        return $this->enabledImage;
    }

    /**
     * @param $enabledImage the $enabledImage to set
     */
    public function setEnabledImage($enabledImage)
    {
        $this->enabledImage = $enabledImage;
    }

    /**
     * @return the $disabledImage
     */
    public function getDisabledImage()
    {
        return $this->disabledImage;
    }

    /**
     * @param $disabledImage the $disabledImage to set
     */
    public function setDisabledImage($disabledImage)
    {
        $this->disabledImage = $disabledImage;
    }

    /**
     * @param string $target Set link target
     */
    public function setTarget($target)
    {
        $this->target = $target;
    }

    /**
     * @param string Get link target
     */
    public function getTarget()
    {
        return $this->target;
    }
}

class MToolBar extends MBaseGroup
{
    /**
     * Button ids.
     */
    const BUTTON_BACK   = 'tbBtnBack';
    const BUTTON_NEW    = 'tbBtnNew';
    const BUTTON_SAVE   = 'tbBtnSave';
    const BUTTON_DELETE = 'tbBtnDelete';
    const BUTTON_SEARCH = 'tbBtnSearch';
    const BUTTON_PRINT  = 'tbBtnPrint';
    const BUTTON_EXIT   = 'tbBtnExit';
    const BUTTON_RESET  = 'tbBtnReset';

    protected $toolBarButtons;

    public function __construct($name='toolBar',  $url='')
    {
        parent::__construct($name, '');

        $this->name = $name;

        $MIOLO  = MIOLO::getInstance();
        if( ! $url )
        {
            $url = $MIOLO->getCurrentURL();
        }

        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'new-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'new-disabled-20x20.png');
        $newUrl        = $url . '&function=insert&event=tbBtnNew:click';
        $this->toolBarButtons['tbBtnNew'] = new MToolBarButton( 'tbBtnNew', _M('New'), $newUrl, _M('New'), true, $enabledImage, $disabledImage, NULL);

        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'save-20x20.png' );
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id,  'save-disabled-20x20.png' );
        $newUrl        = $url . '&function=' . MIOLO::_REQUEST('function').'&event=tbBtnSave:click';
        $this->toolBarButtons['tbBtnSave'] = new MToolBarButton('tbBtnSave', _M('Save'), $newUrl, _M('Save'), true, $enabledImage, $disabledImage, 'post');

        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'delete-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'delete-disabled-20x20.png');
        $newUrl        = $url . '&function=delete&event=tbBtnDelete:click';
        $this->toolBarButtons['tbBtnDelete'] = new MToolBarButton('tbBtnDelete', _M('Delete'), $newUrl, _M('Delete'), true, $enabledImage, $disabledImage, 'post');

        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'search-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'search-disabled-20x20.png');
        $newUrl        = $url . '&function=search&event=tbBtnSearch:click';
        $this->toolBarButtons['tbBtnSearch'] = new MToolBarButton('tbBtnSearch', _M('Search'), $newUrl, _M('Search'), true, $enabledImage, $disabledImage, NULL);

        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'print-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'print-disabled-20x20.png');
        $newUrl        = $url . '&function=print&event=tbBtnPrint:click';
        $this->toolBarButtons['tbBtnPrint'] = new MToolBarButton('tbBtnPrint', _M('Print'), $newUrl, _M('Print'), true, $enabledImage, $disabledImage, 'post');

        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'reset-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'reset-disabled-20x20.png');
        $this->toolBarButtons['tbBtnReset'] = new MToolBarButton( 'tbBtnReset', _M('Reset'), 'javascript:document.forms[0].reset();', _M('Reset'), true, $enabledImage, $disabledImage, 'javaScript');
        
        //begin stack
        $refererFunction = MIOLO::_REQUEST('refererFunction');
        // getallheaders may not exist if we're running out of apache
        $headers         = function_exists('getallheaders') ? getallheaders() : array('Referer', '');
        $newUrl          = str_replace('&refererFunction=back','',$headers['Referer']);
        $session         = $MIOLO->session;
        $mioloPromptEvent= ( $session->GetValue('mioloPromptEvent') == 'true' ) ? true : false;
        $mioloStack      = $session->IsRegistered('mioloStack') ? 
                           unserialize($session->GetValue('mioloStack')) : 
                           null;
        
        if ( $refererFunction == 'back' )
        {
            if ( $mioloPromptEvent == true )
            {
                unset($mioloStack[(count($mioloStack)-1)]);
                $session->SetValue('mioloPromptEvent','false');
            }
            $newUrl = $mioloStack[(count($mioloStack)-2)];
            unset($mioloStack[(count($mioloStack)-1)]);
        }
        else
        {
            $pn_page       = MIOLO::_REQUEST('pn_page');
            $__filter      = MIOLO::_REQUEST('__filter');
            $pn_page       = strlen($pn_page)>0 ? $pn_page : 1;
            $__filter      = strlen($__filter)>0 ? $__filter : 0;
            $mioloStackPost= $session->GetValue('mioloStackPost');
            
            if ( count($_POST)>0 )
            {
                $string = $this->getArrayAsUrl($_POST);
                $session->SetValue('mioloStackPost','&pn_page=' . $pn_page . '&__filter=' . $__filter . str_replace('&pn_page=1&__filter=0','',$string));
            }
            else
            {
                $session->SetValue('mioloStackPost',null);
            }
            
            if ( strstr($mioloStackPost,'pn_page') )
            {
                $mioloStack[count($mioloStack)] = str_replace('&pn_page=1&__filter=0','',$newUrl) . $mioloStackPost;
            }
            else
            {
                $mioloStack[count($mioloStack)] = str_replace('&pn_page=1&__filter=0','',$newUrl) . "&pn_page=$pn_page&__filter=$__filter$mioloStackPost";
            }
            if ( $mioloPromptEvent == true )
            {
                unset($mioloStack[(count($mioloStack)-1)]);
                $session->SetValue('mioloPromptEvent','false');
            }
            $newUrl = $mioloStack[(count($mioloStack)-1)];
        }
        $session->SetValue('mioloStack',serialize($mioloStack));
        //finish stack
        
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'back-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'back-disabled-20x20.png');
        $this->toolBarButtons['tbBtnBack'] = new MToolBarButton('tbBtnBack', _M('Back'), $newUrl . '&refererFunction=back', _M('Back'), count($mioloStack)>0, $enabledImage, $disabledImage, NULL);
        
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'exit-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'exit-disabled-20x20.png');
        
        $newUrl = $MIOLO->getPreviousURL();
        $this->toolBarButtons['tbBtnExit'] = new MToolBarButton('tbBtnExit', _M('Exit'), $newUrl, _M('Exit'), true, $enabledImage, $disabledImage, NULL);

        $this->setShowChildLabel(false);
    }

    public function getArrayAsUrl( $var )
    {
        $string = '';
        foreach ( $var as $key => $value )
        {
            if ( is_array($value) )
            {
                $string .= '&' . $key . '=' . $this->getArrayAsUrl($value);
            }
            else
            {
                $string .= '&' . $key . '=' . urlencode($value);
            }
        }
        return $string;
    }

    public function getButtons()
    {
        foreach ( $this->toolBarButtons as $b )
        {
            if( method_exists($b,'getButton') )
            {
                $buttons[] = $b->getButton();
            }
            else
            {
                $buttons[] = $b;
            }
        }

        return $buttons;
    }

    public function addButton($name, $caption, $url, $hint, $enabled, $enabledImage, $disabledImage, $type=MToolBarButton::TYPE_ICON_ONLY)
    {
        $this->toolBarButtons[$name] = new MToolBarButton($name, $caption, $url, $hint, $enabled, $enabledImage, $disabledImage, NULL, $type);
    }

    public function showButton($name)
    {
        $this->toolBarButtons[$name]->show();
    }

    public function hideButton($name)
    {
        $this->toolBarButtons[$name]->hide();
    }

    public function enableButton($name)
    {
        $this->toolBarButtons[$name]->enable();
    }

    public function disableButton($name)
    {
        $this->toolBarButtons[$name]->disable();
    }

    public function setIsPost($name,$post=true)
    {
        $this->toolBarButtons[$name]->setMethod( $post ? 'post' : '' );
    }

    public function generateInner()
    {
        parent::__construct( $this->name, '', $this->getButtons() );
        parent::generateInner();
    }
    
    /**
     * @return the $url
     */
    public function getButtonUrl($name)
    {
        return $this->toolBarButtons[$name]->getUrl();
    }

    /**
     * @param $url the $url to set
     */
    public function setButtonUrl($name, $url, $target='_self')
    {
        $this->toolBarButtons[$name]->setUrl($url);
        $this->toolBarButtons[$name]->setTarget($target);
    }

    /**
     * @return the $hint
     */
    public function getButtonHint($name)
    {
        return $this->toolBarButtons[$name]->getHint();
    }

    /**
     * @param $hint the $hint to set
     */
    public function setButtonHint($name, $hint)
    {
        $this->toolBarButtons[$name]->setHint($hint);
    }

    /**
     * @return the $enabledImage
     */
    public function getButtonEnabledImage($name)
    {
        return $this->toolBarButtons[$name]->getEnabledImage();
    }

    /**
     * @param $enabledImage the $enabledImage to set
     */
    public function setButtonEnabledImage($name, $enabledImage)
    {
        $this->toolBarButtons[$name]->setEnabledImage($enabledImage);
    }

    /**
     * @return the $disabledImage
     */
    public function getButtonDisabledImage($name)
    {
        return $this->toolBarButtons[$name]->getDisabledImage();
    }

    /**
     * @param $disabledImage the $disabledImage to set
     */
    public function setButtonDisabledImage($name, $disabledImage)
    {
        $this->toolBarButtons[$name]->setDisabledImage($disabledImage);
    }

    /**
     * @return array Get the toolbar buttons.
     */
    public function getToolBarButtons()
    {
        return $this->toolBarButtons;
    }

    /**
     * @param array $toolBarButtons Set the toolbar buttons.
     */
    public function setToolBarButtons($toolBarButtons)
    {
        $this->toolBarButtons = $toolBarButtons;
    }
}

?>