<?php

class MLookupGrid extends MDataGrid
{
    protected $filterColumns = 0;

    /**
     * LookupGrid constructor
     *
     * @param MQuery $query Query object.
     * @param array $columns Array of columns objects.
     * @param string $href Base URL of this grid.
     * @param integer $pageLength Max number of rows to show (0 to show all).
     * @param integer $index Index.
     * @param integer $filterColumns Filter columns.
     */
    function __construct(&$query, $columns, $href, $pageLength = 15, $index = 0, $filterColumns = 0)
    {
        parent::__construct($query, $columns, $href, $pageLength, $index);
        $this->emptyMsg = _M('No records found!');
        $this->SetFiltered(true);
        $this->filterColumns = $filterColumns;

        $filtered = $this->GetFiltered();
        $this->pn = new GridNavigator($this->pageLength, $this->rowCount, 
          $this->GetURL($filtered, $this->ordered), $this);
    }

    function generateData()
    {
        if ( $this->query )
        {
            $this->data = $this->query->result;
            $this->rowCount = $this->query->GetRowCount();

            if ($this->pageLength)
            {
                $filtered = $this->GetFiltered();

                $this->pn->SetGridParameters($this->pageLength, $this->rowCount, $this->GetURL($filtered, $this->ordered), $this);

                $this->query->SetpageLength($this->pageLength);
                $this->data = $this->query->GetPage($this->pn->GetPageNumber());
            }
            else
            {
                $this->pn = null;
            }
        }
    }

    function GenerateTitle()
    {
        $t = new BoxTitle('boxTitle', $this->title, 'javascript:MIOLO_Close();');
        return $t;
    }

    function generateFilter()
    {
        if ( ! $this->filter )
        {
            return null;
        }

        if ( $this->filterColumns > 0 )
        {
            $table = new MSimpleTable('filterTable', "cellspacing=0 cellpadding=2 align=left border=0 width=100%", 3, $this->filterColumns);
            $lin = (int) 0;
            $col = (int) 0;

            foreach ( $this->filters as $k => $f )
            {
                // Hidden fields should not be included
                if ( get_class($f->control) == 'MHiddenField' )
                {
                    $array[] = $f->control;
                    continue;
                }

                if ( $col > $this->filterColumns-1 )
                {
                    $lin++;
                    $col = 0;
                }

                $table->setCell( $lin, $col, $f->generate() );
                $table->setCellAttribute($lin,$col,'style','border: 1px dashed #ddd;  text-align:left;');
                $col++;
            }

            $array[] = $table;
        }
        else
        {
            foreach ($this->filters as $k => $f)
            {
                $array[] = $f->generate();
            }
        }

        $array[] = new MButton( '', _M('Filter'), 'submit', "images/button_select.png" );
        $array[] = new MSeparator;
        return new MDiv('', $array, 'm-grid-filter');
    }

    function GenerateHeader()
    {
        $header   = $this->header;
        $header[] = $this->GenerateFilter();
        return $header;
    }

    function GenerateFooter()
    {
        $footer = $this->footer;
        if (!$this->data)
            $footer[] = $this->GenerateEmptyMsg();

        $footer[] = new Separator();
        $footer[] = $this->GenerateNavigationFooter();
        return $footer;
    }
}

?>
