<?php

/**
 * MLookupContainer
 *
 * @author Daniel Hartmann [daniel@solis.coop.br]
 *
 * @version $id$
 *
 * \b Maintainers: \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Daniel Hartmann [daniel@solis.coop.br]
 *
 * @since
 * Creation date 2011/04/06
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluушes Livres \n
 *
 * \b Copyright: \n
 * Copyright (c) 2011 SOLIS - Cooperativa de Soluушes Livres \n
 *
 * \b License: \n
 * Licensed under GPLv2 (for further details read the COPYING file or http://www.gnu.org/licenses/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://www.miolo.org.br
 *
 */
class MLookupContainer extends MContainer
{
    /**
     * @var object MLookupTextField instance
     */
    private $lookupField;

    /**
     * @var object MTextField instance
     */
    private $descriptionField;

    /**
     * MLookupContainer constructor
     *
     * @param string $lookupName Lookup field name
     * @param string $descriptionName Description field name
     * @param string $value Lookup field value
     * @param string $label Label
     * @param string $related Lookup related
     * @param string $module Lookup module
     * @param string $item Lookup item
     * @param array $filter Lookup filters
     * @param boolean $descriptionReadOnly Whether description field is read-only
     * @param int $lookupSize Lookup field size
     * @param int $descriptionSize Description field size
     * @param boolean $autocomplete Whether lookup has autocomplete
     */
    public function __construct($lookupName, $descriptionName='', $value='', $label='', $related='', $module='', $item='', $filter='', $descriptionReadOnly=true, $lookupSize=4, $descriptionSize=38, $autocomplete=true, $showRequiredLabel=false)
    {
        if ( !$descriptionName )
        {
            $descriptionName = $lookupName . '_lookupDescription';
        }

        if ( !$related )
        {
            $related = "$lookupName,$descriptionName";
        }

        if ( !$module )
        {
            $module = MIOLO::getCurrentModule();
        }

        $this->lookupField = new MLookupTextField($lookupName, $value, $label, $lookupSize, NULL, NULL, $related, $module, $item, 'filler', $filter, $autocomplete);
        $this->descriptionField = new MTextField($descriptionName, NULL, NULL, $descriptionSize, NULL, NULL, $descriptionReadOnly);

        $controls = array( $this->lookupField, $this->descriptionField );

        parent::__construct($lookupName . '_container', $controls, 'horizontal', MFormControl::FORM_MODE_SHOW_SIDE);

        $this->showRequiredLabel = $showRequiredLabel;
        $this->label = $label;
    }

    /**
     * @return object MLookupTextField instance
     */
    public function getLookupField()
    {
        return $this->lookupField;
    }

    /**
     * @param object $lookupField MLookupTextField instance
     */
    public function setLookupField($lookupField)
    {
        $this->lookupField = $lookupField;
    }

    /**
     * @return object MTextField instance
     */
    public function getDescriptionField()
    {
        return $this->descriptionField;
    }

    /**
     * @param object $descriptionField MTextField instance
     */
    public function setDescriptionField($descriptionField)
    {
        $this->descriptionField = $descriptionField;
    }

    /**
     * @param string $jsHint Javascript hint of the lookup field
     */
    public function setLookupJsHint($jsHint)
    {
        $this->lookupField->setJsHint($jsHint);
    }

    /**
     * @param string $jsHint Javascript hint of the description field
     */
    public function setDescriptionJsHint($jsHint)
    {
        $this->descriptionField->setJsHint($jsHint);
    }

    /**
     * @param string $hint Set hint text.
     */
    public function setHint($hint)
    {
        $this->descriptionField->hint = $hint;
    }
    
    /**
     * Set lookup attributes
     *
     * @param string $module Lookup module
     * @param string $item Lookup item
     * @param string $related Lookup related
     * @param array $filter Lookup filters
     * @param boolean $autocomplete Whether lookup has autocomplete
     * @param string $event Lookup event
     */
    public function setContext($module, $item, $related, $filter, $autoComplete=true, $event='filler')
    {
        if ( is_array($related) )
        {
            ksort($related);
        }
        else
        {
            $related = array( str_replace(' ', '', $related) );
        }

        $this->lookupField->baseModule = $module ? $module : 'admin';
        $this->lookupField->module = $module;
        $this->lookupField->item = $item;
        $this->lookupField->related = implode(',', $related);
        $this->lookupField->filter = $filter;
        $this->lookupField->autocomplete = $autoComplete;
        $this->lookupField->event = $event;
    }

    /**
     * @param boolean $readOnly Set both, lookup and description fields, read-only
     */
    public function setReadOnly($readOnly)
    {
        $this->lookupField->showButton = false;
        $this->lookupField->setReadOnly($readOnly);
        $this->descriptionField->setReadOnly($readOnly);
    }

    /**
     * Set an attribute to lookup field
     *
     * @param string $attribute Attribute for lookup field
     * @param string $value Value for the attribute
     */
    public function addAttribute($attribute, $value)
    {
        $this->lookupField->addAttribute($attribute, $value);
    }

    /**
     * @param string $value Set lookup field value
     */
    public function setLookupValue($value)
    {
        $this->lookupField->setValue($this->value);
    }

    /**
     * @return string Get lookup field value
     */
    public function getLookupValue()
    {
        return $this->lookupField->getValue();
    }
}

?>