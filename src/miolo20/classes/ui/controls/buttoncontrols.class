<?php

class MButton extends MFormControl
{
    public $action;
    public $event;
    public $onclick;
    public $target = '_self';
    public $type;
    public $image;
    
    private $showLoading = true;


    public function __construct( $name = '', $label = '', $action = NULL, $image = NULL )
    {
        parent::__construct( $name, '', $label );

        $this->action  = $action ? $action : 'submit';
        $this->event   = '';
        $this->onclick = '';
        $this->image   = $image;
        $this->SetClass('m-button');
    }


    public function __set( $name, $value )
    {
        switch ( $name )
            {
            case 'padding':
            case 'width':
            case 'height':
            case 'visibility':
                $this->_addStyle( $name, $value );
                break;

            default: 
                parent::__set( $name, $value );
                break;
            }
    }


    public function setImage( $location )
    {
        $this->image = $location;
    }


    public function setOnClick( $onclick )
    {
        $this->onclick = $onclick;
    }

    public function setAction( $action )
    {
        $this->action = $action;
    }

    public function setTarget( $target )
    {
        $this->target = $target;
    }

    public function getTarget( )
    {
        return $this->target;
    }

    public function generateButton()
    {
        $action = strtoupper($this->action);

        if ( $action == 'SUBMIT' )
        {
            $type = 'submit';

            if ( count($this->eventHandlers) )
            {
                $param   = $this->eventHandlers['click']['param'];
                $onclick = "return _doPostBack('{$this->name}:click','{$param}', '$this->target' )";
            }
            elseif ( $this->event != '' )
            {
                $eventTokens = explode( ';', $this->event );
                $onclick     = "return _doPostBack('{$eventTokens[0]}','{$eventTokens[1]}', '$this->target' )";
            }
            else
            {
                if ( $this->name != '' )
                {
                    $onclick = "return _doPostBack('{$this->name}:click','', '$this->target');";
                }
            }
        }
        else if ( $action == 'RESET' )
        {
            $type = 'reset';
        }
        else if ( $action == 'PRINT' )
        {
            $type = 'button';
            $onclick = "_doPrintForm();";
        }
        else if ($action == 'REPORT')
        {
            $type = 'button';

            if ( $this->name != '' )
            {
                $onclick = "return _doPostBack('{$this->name}:click',''); _doPrintFile();";
            }
        }
        else if ( $action == 'PDF' )
        {
            $type = 'button';

            if ( $this->name != '' )
            {
                $onclick = "return _doPostBack('{$this->name}:click',''); _doShowPDF();";
            }
        }
        else if ( $action == 'RETURN' )
        {
            global $history;

            $type = 'button';
            $href = $history->back('action');
            $onclick = "GotoURL('$href');";
        }
        else if ( $action == 'NONE' )
        {
            $type = 'button';
            $onclick = "";
        }
        else if ( substr($action, 0, 7) == 'HTTP://' )
        {
            if ( $this->onclick != '' )
            {
                $this->action = $this->action . "&onclick=$this->onclick";
            }

            $type = 'button';
            $onclick = "GotoURL('$this->action');";
        }
        else
        {
            $type = 'button';
            $onclick = $this->action;
        }

        if ( ( $this->value = $this->label ) == '' )
        {
            $this->value = 'Enviar';
        }

        if ( !$this->type )
        {
            $this->type = $type;
        }
        
        if ( !$this->showLoading )
        {
            $onclick = 'MIOLO_showLoading = false; ' . $onclick . '; MIOLO_showLoading = true;';
        }
        
        if ( !$this->onclick )
        {
            $this->onclick = $onclick;
        }
        $this->label = '&nbsp;';
    }


    public function generateInner()
    {
        if ( $this->visible )
        {
            $this->generateButton();
            $this->inner = $this->generateLabel() . $this->getRender('button');
        }
    }

    public function getShowLoading()
    {
        return $this->showLoading;
    }

    public function setShowLoading($showLoading)
    {
        $this->showLoading = $showLoading;
    }    
}


class MInputButton extends MButton
{
    public function generateInner()
    {
        parent::generateButton();
        $this->value = '';
        $this->inner = $this->generateLabel() . $this->getRender('button');
    }
}

?>
