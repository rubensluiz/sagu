<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * Class theme
 *
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 14/06/2006
 *
 **/
 
    class Theme extends MTheme
    {
        public function __construct()
        {
            parent::__construct('sescoop');
        }

        public function Init()
        {
            $ui = $this->manager->GetUI();
            $logo = '
            <table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody>
            <tr>
              <td bgcolor="#ffffff" background="' . $ui->GetImageTheme($this->id, 'banner_sagu2_inicio.png') . '" width="100%"><center><a href="index.php?module=sagu2&action=main"><img alt="Sagu 2" src="'.$ui->GetImageTheme($this->id, 'banner_sagu2_principal.png') . '" border="0"></a></center>
              </td>
            </tr>
            </table>
               ';

            $top = new MDiv('', $logo, 'logo');
            $top->width="100%";

            $this->SetElement('top', $top, 'm-container-top');
            // navigation
            $this->SetElement('navigation', new MNavigationBar(), 'm-container-topmenu');
        }

        public function Generate()
        {
            $method = "Generate" . $this->layout;
            return $this->$method();
        }

        public function GenerateDefault()
        {
            // bottom
            $statusBar = new MStatusBar();
            $statusBar->cols[3] = _M('Versão @1', 'sagu2', SAGU_VERSION);
            $statusBar->cols[4] = array(
                                        new MLabel(_M('Desenvolvido por', 'sagu2') . ':'),
                                        new MOpenWindow('lnkSagu', _M('Equipe SOLIS', 'sagu2'), 'http://www.solis.coop.br')
                                       );
            $this->SetElement('bottom', $statusBar, 'm-container-bottom');
            
            // menus
            if ( $this->manager->GetConf('options.mainmenu') == 2 )
            {
                $idModule = 'm-container-module';
                $idMenu = 'm-container-dhtmlmenu';
            }
            else if ( $this->manager->GetConf('options.mainmenu') == 3 )
            {
                $idModule = 'm-container-module2';
                $needTable = true;
            }
            else
            {
                $idMenu = 'm-container-menu';
            }

            // module
            $this->SetElementId('module', $idModule);

            $this->SetElementId('menus', $idMenu);

            // content
            $idContent = ( ($this->manager->GetConf('options.mainmenu') == 2) || ($this->manager->GetConf('options.mainmenu') == 3) )
                       ? 'm-container-content-full' : 'm-container-content';
            $this->SetElementId('content', $idContent);

            $html = '<div id="divSaguMessages" style="display: none;">';
            $html .= ' <div id="divSaguMessagesContent"></div>';
            $html .= '</div>';

            $html .= '<script language="javascript">
                      function hideLoadingDiv()
                      {
                          var bg = document.getElementById(\'m-loading-message-bg\');
                          var fg = document.getElementById(\'m-loading-message\');
                          
                          if ( bg != null )
                          {
                              bg.style.display = \'none\';
                          }
                          
                          if ( fg != null )
                          {
                              fg.style.display = \'none\';
                          }
                      }
                      </script>
                      <div id="m-loading-message-bg" onclick="javascript:hideLoadingDiv()"></div>
                      <div id="m-loading-message" onclick="javascript:hideLoadingDiv()">
                       <div id="m-loading-message-image">
                        <div id="m-loading-message-text">' . _M('Carregando', 'sagu2') . '...</div>
                       </div>
                      </div>';

            $top = 130;
            $html .= '<div id="extTop" style="position:fixed; width:100%; top:0; left:0; background-color:#F2F3FF; z-index:10; margin:0; padding:0;">';
            $html .= $this->GenerateElement('top');

            if ($this->HasMenuOptions())
            {
                $html .= ($needTable == true) ? '<div id="div-dhtml-menu2"><br/><table id="m-container-dhtmlmenu2" collspacing=0 cellpadding=0 cellspacing=1 border=0><tr>' : '';
                $html .= $this->GenerateElement('menus');
                $html .= ($needTable == true) ? '</tr></table></div>' : '';
            }

            $html .= $this->GenerateElement('module');

            if ($this->GetElement('navigation')->HasOptions())
            {
                $html .= $this->GenerateElement('navigation');
            }

            $this->SetElementId('toolbar', 'm-toolbar');
            $html .= $tb = $this->GenerateElement('toolbar');
            if ( !trim(strip_tags($tb)) )
            {
                $top -= 30;
            }
            $html .= '</div>';

            $html .= '<div id="extContent" style="position:absolute; top: ' . $top . 'px; width:100%;">';
            $html .= $this->GenerateElement('content');
            $html .= '</div>';

            $html .= '<div id="extBottom" style="visibility: visible; position: fixed; bottom:0; width: 100%">';
            $html .= $this->GenerateElement('bottom');
            $html .= '</div>';

            return $this->painter->div(new Div('m-container', $html));
        }

        public function GenerateLookup()
        {
            $html = $this->GenerateElement('content');
            $div = new Div('', $html, 'm-container');
            $div->AddStyle('width', '100%');
            return $this->painter->GenerateToString($div);
        }

        public function GenerateHtmlArea()
        {
            // module
            $this->SetElementId('module', 'm-container-module');
            // content
            $this->SetElementId('content', 'm-htmlarea');
            // bottom
            $this->SetElement('bottom', new StatusBar(), 'm-container-bottom');

            $html = $this->GenerateElement('top');

            if ($this->GetElement('module') != NULL)
            {
                $html .= $this->GenerateElement('module');
            }

            if ($this->GetElement('navigation')->HasOptions())
            {
                $html .= $this->GenerateElement('navigation');
            }

            $html .= $this->GenerateElement('content');
            $html .= $this->GenerateElement('bottom');
            return $this->painter->div(new Div('m-container', $html));
        }

        public function GeneratePopup()
        {
            $html = $this->GenerateElement('content');
            $div = new Div('', $html, 'm-container');
            $div->AddStyle('width', '100%');
            return $this->painter->GenerateToString($div);
        }

        public function GeneratePrint()
        {
            $this->GenerateDefault();
        }
    }
?>
