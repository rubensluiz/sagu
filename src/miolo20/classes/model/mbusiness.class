<?
class MBusiness extends PersistentObject
{
    var $_bmodule; // the module of this class
    var $_bclass; // the name of this class
    var $_errors;
    var $_database;
    var $_db;
    var $_transaction;
    var $_miolo;

    function __construct($database = NULL, $data = NULL)
    {
        parent::__construct();
        $this->_miolo = MIOLO::getInstance(); 
        $this->_errors = array();
        $this->GetDatabase($database);
        $this->_transaction = NULL;
    }

    function OnCreate($data = NULL)
    {
        if (is_null($data))
        {
            return;
        }
        elseif (is_object($data))
        {
            $this->SetData($data);
        }
        else
        {
            $this->GetById($data);
        }
    }

    function GetById($data=NULL)
    {
    }

    function CheckError()
    {
        $err = $this->_db->GetError();
        if ($err)
        {
            $this->_errors[] = $err;
        }
        return (count($this->_errors) > 0);
    }

    function GetErrors()
    {
        return $this->_errors;
    }

    function AddError($err)
    {
        if ($err)
        {
            if (is_array($err))
            {
                $this->_errors = array_merge($this->_errors, $err);
            }
            else
            {
                $this->_errors[] = $err;
            }
        }
    }

    function GetData()
    {
        return $this;
    }

    function SetData($data = NULL)
    {
        if (is_null($data))
        {
            return;
        }
        foreach ($this as $attr=>$value)
        {
            $a = strtolower($attr);
            if ($data->$a)
                $this->$attr = $data->$a;
            elseif ($data->$attr)
                $this->$attr = $data->$attr;
        }
    }

    function GetDatabase($database = NULL)
    {
        if (is_null($database))
        {
            return;
        }
        $this->_database = $database;
        $this->_db = $this->_miolo->GetDatabase($this->_database);
    }

    function GetDb()
    {
        if (is_null($this->_db))
        {
            throw new EBusinessException( _M('Error in Business: _db undefined! ') . "Class: {$this->_bclass} - Module: {$this->_bmodule}");
        }
        return $this->_db;
    }

    function Query($sql, $parameters = NULL, $maxrows = 0)
    {
        if ($db = $this->GetDb())
        {
            if ($parameters)
            {
                $sql->SetParameters($parameters);
            }

            $result = $db->GetQuery($sql, $maxrows);
            $this->CheckError();
            return $result;
        }
    }

    // backward compatibility
    function objQuery($sql, $parameters = NULL, $maxrows = 0)
    {
        if ($db = $this->GetDb())
        {
            if ($parameters)
            {
                $sql->SetParameters($parameters);
            }

            $result = $db->objQuery($sql, $maxrows);
            $this->CheckError();
            return $result;
        }
    }

    /**
     * Execute an SQL operation.
     *
     * @param MSQL $sql SQL operation.
     * @param array $parameters Parameters.
     * @return boolean Whether execute is successful.
     */
    function Execute($sql, $parameters = NULL)
    {
        if ($db = $this->GetDb())
        {
            if ($this->_transaction)
            {
                $this->_transaction->addCommand($sql);
            }
            else
            { 
                $result = $db->Execute($sql);
                $this->CheckError();
                return $result;
            }
        }
    }

    function GetAffectedRows()
    {
        return $this->_db->GetAffectedRows();
    }

    function ExecuteBatch($cmds)
    {
        if ($db = $this->GetDb())
        {
            if ($this->_transaction)
            {
                foreach($cmds as $cmd)
                {
                    $this->_transaction->addCommand($cmd);
                }
            }
            else
            { 
                $result = $db->ExecuteBatch($cmds);
                $this->CheckError();
                return $result;
            } 
        }
    }

    // backward compatibility
    function objQueryRange($sql, &$range)
    {
        if ($db = $this->GetDb())
        {
            $result = $db->QueryRange($sql, $range);
            $this->CheckError($this->_db);
            return $result;
        }
    }

    function ExecuteSP($sql, $parameters = null)
    {
        if ($db = $this->GetDb())
        {
            $result = $this->_db->ExecuteSP($sql, $parameters);
            $this->CheckError($this->_db);
            return $result;
        }
    }

    function GetBusiness($module, $name = 'main', $data = NULL)
    {
        return $this->_miolo->GetBusiness($module, $name, $data);
    }

    function Log($operacao, $descricao)
    {
        $login = $this->_miolo->GetLogin();
        $objLog = $this->_miolo->GetBusinessMAD('log');
        $ok = $objLog->Log($operacao, $descricao, $login->idkey, $this->_bmodule, $this->_bclass);
        if (!$ok)
        { 
            $this->AddError($objLog->GetErrors());
        }
        return $ok;
    }

    function setTransaction(MTransaction $transaction)
    {
        $this->_transaction = $transaction;
    }

    function getTransaction()
    {
        return $this->_transaction;
    }

    function beginTransaction()
    {
        if ($db = $this->GetDb())
        {
            $this->_transaction = $db->getTransaction();
        }
    }

    function endTransaction()
    {
        if ($this->_transaction)
        {
            $this->_transaction->process();
        }
    }
}
?>