<?php
// +-----------------------------------------------------------------+
// | MIOLO - Miolo Development Team - UNIVATES Centro Universitário  |
// +-----------------------------------------------------------------+
// | CopyLeft (L) 2001-2002 UNIVATES, Lajeado/RS - Brasil            |
// +-----------------------------------------------------------------+
// | Licensed under GPL: see COPYING.TXT or FSF at www.fsf.org for   |
// |                     further details                             |
// |                                                                 |
// | Site: http://miolo.codigolivre.org.br                           |
// | E-mail: vgartner@univates.br                                    |
// |         ts@interact2000.com.br                                  |
// +-----------------------------------------------------------------+
// | Abstract: This file creates de handler url                      |
// |                                                                 |
// | Created: 2001/08/14 Thomas Spriestersbach                       |
// |                     Vilson Cristiano Gärtner,                   |
// |                                                                 |
// | History: Initial Revision                                       |
// +-----------------------------------------------------------------+

/**
 *
 */
/**
 * Brief Class Description.
 * Complete Class Description.
 */
class MContextOld extends MService
{
    /**
     * Attribute Description.
     */
    var $module;

    /**
     * Attribute Description.
     */
    var $action;

    /**
     * Attribute Description.
     */
    var $item;

    /**
     * Attribute Description.
     */
    var $actionTokens;

    /**
     * Attribute Description.
     */
    var $currentToken;

    /**
     * Attribute Description.
     */
    var $queryString;

    /**
     * Brief Description.
     * Complete Description.
     *
     * @param $queryString' (tipo) desc
     *
     * @returns (tipo) desc
     *
     */
    function __construct($queryString = '')
    {
        parent::__construct();

        if ($queryString == '')
        {
            $this->queryString = $_SERVER['QUERY_STRING'];

            if ($this->manager->getConf('options.scramble'))
            {
                $context = $this->manager->UnScramble($this->manager->_REQUEST('MIOLO_URI'));
                $context = str_replace('&amp;', '&', $context);
                parse_str($context, $vars);
                $_REQUEST = array_merge($_REQUEST, $vars);
            }

            $vars = $_REQUEST;
        }
        else
        {
            $this->queryString = $queryString;
            $query = str_replace('&amp;', '&', $this->queryString);
            parse_str($query, $vars);
        }

        $this->manager->Trace("Context->queryString: " . $this->queryString);
        $this->Create($vars['module'], $vars['action'], $vars['item']);
    }

    /**
     * Brief Description.
     * Complete Description.
     *
     * @param $module (tipo) desc
     * @param $action (tipo) desc
     * @param $item (tipo) desc
     *
     * @returns (tipo) desc
     *
     */
    function Create($module, $action, $item)
    {
        $this->module = ($module == '') ? (($this->module == '') ? $this->manager->startup : $this->module) : $module;
        $this->action = ($action == '') ? (($this->action == '') ? 'main' : $this->action) : $action;
        $this->item = ($item == '') ? $this->item : $item;

        $this->manager->Trace("Context::Create(module={$this->module},action={$this->action},item={$this->item})");

        $this->actionTokens = explode(':', $this->action);
        $this->currentToken = 0;
    }

    /**
     * Brief Description.
     * Complete Description.
     *
     * @param $index0 (tipo) desc
     *
     * @returns (tipo) desc
     *
     */
    function GetAction($index = 0)
    {
        $action = ($index >= 0) && ($index < count($this->actionTokens)) ? $this->actionTokens[$index] : NULL;

        return $action;
    }

    /**
     * Brief Description.
     * Complete Description.
     *
     * @returns (tipo) desc
     *
     */
    function ShiftAction()
    {
        $action = $this->currentToken < count($this->actionTokens) ? $this->actionTokens[$this->currentToken++] : NULL;

        if (($action == 'main') && ($this->module == $this->manager->startup))
            $action = $this->ShiftAction();

        $this->manager->Trace("Context::ShiftAction() => $action");

        return $action;
    }

    /**
     * Brief Description.
     * Complete Description.
     *
     * @param $a (tipo) desc
     *
     * @returns (tipo) desc
     *
     */
    function PushAction($a)
    {
        if ($this->action)
            $this->action .= ':';

        $this->action .= $a;

        $this->actionTokens = explode(':', $this->action);
        $this->currentToken = 0;
    }

    /**
     * Brief Description.
     * Complete Description.
     *
     * @returns (tipo) desc
     *
     */
    function ComposeURL()
    {
        $amp = '&amp;';
        return "?module=$this->module" . $amp . "action=$this->action" . $amp . "item=$this->item";
    }
}
?>
