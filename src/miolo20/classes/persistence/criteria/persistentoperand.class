<?
class PersistentOperand
{
    public $criteria;
    public $operand;
    public $type;

    public function __construct($criteria, $operand)
    {
        $this->criteria = $criteria;
        $this->operand = $operand;
    }

    public function getSql()
    {
        return '';
    }

    public function getSqlWhere()
    {
        return $this->getSql();
    }
}

class OperandNull extends PersistentOperand
{
    public function __construct($criteria, $operand)
    {
        parent::__construct($criteria, $operand);
        $this->type = 'null';
    }
}

class OperandValue extends PersistentOperand
{
    public function __construct($criteria, $operand)
    {
        parent::__construct($criteria, $operand);
        $this->type = 'value';
    }

    public function getSql()
    {
        return "$this->operand";
    }
}

class OperandAttributeMap extends PersistentOperand
{
    public $attributeMap;
    public $alias = '';

    public function __construct($criteria, $operand, $name)
    {
        parent::__construct($criteria, $operand);
        $this->type = 'attributemap';
        if ($p = strpos($name,'.')) $this->alias = substr($name,0, $p);
        $this->attributeMap = $operand;
    }

    public function getSql()
    {
        return $this->attributeMap->getColumnMap()->getColumnName($this->alias, FALSE);
    }

    public function getSqlOrder()
    {
        return $this->attributeMap->getColumnMap()->getFullyQualifiedName($this->alias);
    }

    public function getSqlWhere()
    {
        return $this->attributeMap->getColumnMap()->getColumnWhereName($this->alias);
    }
}

class OperandArray extends PersistentOperand
{
    public function __construct($criteria, $operand)
    {
        parent::__construct($criteria, $operand);
        $this->type = 'array';
    }

    public function getSql()
    {
        $sql = "(";
        $i = 0; 
        foreach($this->operand as $o)
        {
            $sql .= ($i++ > 0) ? ", " : "";
            $sql .= "'$o'";
        }
        $sql .= ")";
        return $sql;
    }
}

class OperandCriteria extends PersistentOperand
{
    public function __construct($criteria, $operand)
    {
        parent::__construct($criteria, $operand);
        $this->type = 'criteria';
    }

    public function getSql()
    {
        $sql = $this->operand->getSqlStatement();
        $sql->SetDb($this->operand->getManager()->getConnection($this->operand->getClassMap()->getDatabase()));
        return "(" . $sql->Select() . ")";
    }
}

class OperandObject extends PersistentOperand
{
    public function __construct($criteria, $operand)
    {
        parent::__construct($criteria, $operand);
        $this->type = 'object';
    }

    public function getSql()
    {
        return $this->operand->getSql();
    }
}

class OperandFunction extends PersistentOperand
{
    public $argument;
    public $argOperand;

    public function __construct($criteria, $operand)
    {
        parent::__construct($criteria, $operand);
        $this->type = 'public function';
        if (preg_match("/(?i)\(([^,]*)(.*)\)/", $this->operand, $matches) || strlen($this->operand) > 0)
        {
           $this->argument = $matches[1];
           $this->argOperand = $criteria->getOperand($this->argument);
        }
        else
           echo "error OperandFunction"; 
    }

    public function getSql()
    {
        return str_replace($this->argument,$this->argOperand->getSQL(), $this->operand);
    }
}