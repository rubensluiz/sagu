+--------------------------------------------------------------------+
| dia2sql.php, v. 1.2.6                                              |
+--------------------------------------------------------------------+
| Copyleft (C) 2004 SOLIS, Lajeado/RS - Brasil                       |
+--------------------------------------------------------------------+
| License: This program is free software; you can redistribute       |
|          it and/or modify it under the terms of the GNU General    |
|          Public License as published by the Free Software          |
|          Foundation; either version 2, or (at your option) any     |
|          later version.                                            |
|          See COPYING or FSF at www.fsf.org for further details.    |
| URL:     http://codigolivre.org.br/projects/dia2sql                |
| Author:  Daniel Afonso Heisler                                     |
| E-mail:  daniel@solis.coop.br                                      |
| URL:     http://www.solis.coop.br/~daniel                          |
+--------------------------------------------------------------------+
| PostgreSQL Support: Daniel Afonso Heisler(daniel@solis.coop.br)    | 
| MySQL Support:      Daniel Afonso Heisler(daniel@solis.coop.br)    | 
+--------------------------------------------------------------------+
| [en] documentation:    Rafael Spengler (rafael@solis.coop.br)      | 
| [es] documentation:    Rafael Spengler (rafael@solis.coop.br)      | 
| [pt_BR] documentation: Daniel Afonso Heisler(daniel@solis.coop.br) | 
+--------------------------------------------------------------------+

1. Introdução:
   Já testei vários programas que geram instruções SQL a partir de diagramas ER, mas não encontrei nenhum que oferecesse todas as características que necessitei. Dessa forma, resolvi escrever uma classe em PHP(http://www.php.net) que lê diagramas criados pelo DIA(http://www.gnome.org/projects/dia) e gera as instruções SQL para diversos tipos de banco de dados. Atualmente PostgreSQL e MySQL.
   Como as facilidades de diagramação e leitura dos componentes UML, no DIA, são melhores que as de ER, resolvi utilizar a diagramação ER com os componentes UML.

2. Características:
   O DIA é um programa GPL(http://www.gnu.org/copyleft/gpl.html) baseado gtk+ que pode ser utilizado na construção de vários tipos diferentes de diagramas. Dessa forma e assim como em muitos outros programas de modelagem, ele somente tem a característica de criar os diagramas e não de gerar as instruções a partir dos mesmos.
   A classe dia2sql serve para fazer essa geração de ER(utilizando componentes UML do DIA) para instruções SQL. Como os arquivos do DIA são gravados no formato XML é possível ler esses arquivos facilmente através do PHP, para criar a estrutura do banco de dados. Quando o dia2sql é computado ele lê o diagrama e cria: 
   - Um arquivo para cada tabela(classe) definida no diagrama, que conterá toda a estrutura daquela tabela e todas as demais características nela descrita pelo diagrama. Existe ainda a opção de gerar todas as instruções em um arquivo.
   - Um arquivo chamado "install" que conterá a ordem com que as tabelas deverão ser importadas no banco de dados. Esse próprio arquivo pode ser utilizado para a importação das mesmas no banco de dados. Caso seja utilizado a opção para geração das instruções em somente um arquivo, esse arquivo não é gerado.
   Esta versão do dia2sql foi testada utilizando as últimas versões estáveis do DIA(0.94) e do PHP(4.3.9). Por enquanto, o suporte a banco de dados restringe-se ao PostgreSQL(http://www.postgresql.org) e ao MySQL(http://www.mysql.org).
   Para geração das instruções SQL é necessário que os arquivos do DIA estejam gravados no formato XML, podendo estarem comprensados ou não. Também é necessário que o PHP(binário) esteja instalado na máquina.

3. Funcionalidades e Definições:
   Para aproveitar os recursos da classe dia2sql, é necessário seguir algumas convenções que foram estipuladas para criação dos diagramas. Esta versão do dia2sql implementa: 
   - Tabelas;
   - Chaves primárias;
   - Chaves estrangeiras;
   - Herança;
   - Comentários em tabelas e campos;
   - Seqüências ou campos de autonumeração;
   - Índices;
   - Índices únicos;
   - Permissões e restrições;
   - Inserção de registros;
   - Valores padrão;
   - Campos obrigatórios e não obrigatórios.
   Para geração correta do código SQL, os diagramas ER deverão ser construídos utilizando os componentes UML, seguindo as especificações abaixo:

   3.1 Classes:
       - Uma tabela é criada a partir do componente "Classe";
       - Abaixo seguem as opções/especificações de cada "aba" da caixa de propriedades de uma classe.
       3.1.1 Aba Classe
             - O campo "Nome da Classe" sempre é o nome da tabela;
             - No campo "Comentários" pode-se informar observações sobre a tabela.
       3.1.2 Aba Atributos
             - Os campos da tabela são inseridos no campo "Nome";
             - No campo "Tipo" podemos informar o tipo de dado deste campo;
             - No campo "Valor" podemos informar um valor padrão. Se for um valor texto, é necessário colocá-lo entre 'aspas simples', caso seja numérico, não são necessárias as 'aspas simples';
             - Podemos utilizar o campo "Valor" para definir um campo como obrigatório(not null), partindo do princípio de que todos os campos não são obrigatórios;
             - Na "Visibilidade" definimos se os campos serão:
               '+' -> 'Publico': Campo normal;
               '#' -> 'Protegido': Chave primária;
             - Na opção "Escopo da Classe" definimos se o campo vai seguir uma seqüência, que será criada automaticamente;
             - Ainda existe o campo "Comentário" que serve para fazermos comentários sobre o campo.
       3.1.3 Aba Operações
             - Nesta "aba" iremos definir os índices, índices únicos, permissões e as restrições;
             - Para criar um índice, digite o nome dele no campo "Nome" e no campo "Tipo" digite "index". Nos "Parâmetros", iremos definir de quais campos são os índices;
             - A mesma regra serve para os índices únicos, bastando digitar a palavra "unique index" no campo "Tipo";
             - Para criar uma permissão, digite "grant" no campo "Tipo". No campo "Nome", digite a permissão, all, select ou insert, por exemplo, e no campo "Parâmetro" digite para quem é essa permissão;
             - As restrições funcionam da mesma forma que as permissões, bastando digitar "revoke" no campo "Tipo".

   3.2 Associações:
       - As referências são feitas com a opção "Associação" do UML. Elas devem ligar os dois campos das tabelas e nos mostrar de quem e para quem, é a ligação. É importante fazer as ligações entre os campos exatamente nos pontos referentes a cada um dos campos da classe. Também é importante alterar as propriedades do objeto "Associação" e marcar a opção "Mostrar Seta" no "Lado B". Assim será possível identificar de quem é a referência e onde será criada a chave estrangeira.

   3.3 Inserções:
       - As inserções são feitas com o objeto "Componente" do UML. Deve-se informar o nome da tabela e os valores para cada campo das tuplas.

   3.4 Herança:
       - A herança é feita com o objeto "Generalização" do UML. A seta indica o pai da tabela. Ainda é possível digitar o nome do pai, caso preferir, editando a herança e preenchendo o campo "Nome" com o nome do mesmo.

4. Uso:
   php dia2sql.php -f <format> -i <input file> [-o output dir or file] [-m]
   Para maiores informações:
   php dia2sql.php -h

5. Interface Gráfica
   Para facilitar o uso da classe criei uma interface em PHP-GTK(http://gtk.php.net). É necessário ter o o PHP-GTK instalado na máquina. Para executar o programa basta digitar:
   php GUI.php
