<?php

set_time_limit(0);

/*********************************************\
 | dia2sql.php v. 1.2.6                          |
 | ----------------------------------------------|
 | Daniel Afonso Heisler (daniel@solis.coop.br)  |
 | Solis (http://www.solis.coop.br/~daniel)      |
 \*********************************************/

/************************************\
 | xml_parser class                     |
 | ------------------------------------ |
 | This class read XML file and make an |
 | object(array) with the file struct.  |
 \************************************/

class xml_parser
{

    // DATA (INPUT OUTPUT)
    var $parser;
    var $data;

    // CLASS ATTRIBUTES
    var $class_id;
    var $class_field_count = 0;
    var $class_operator_name;

    // CLASS CONTROL KEYS
    var $CLASS_KEY_NAME;
    var $CLASS_KEY_COMMENT;
    var $CLASS_KEY_ATTRIBUTE;
    var $CLASS_KEY_ATTRIBUTE_TYPE;
    var $CLASS_KEY_ATTRIBUTE_VALUE;
    var $CLASS_KEY_ATTRIBUTE_COMMENT;
    var $CLASS_KEY_ATTRIBUTE_CLASS_SCOPE;
    var $CLASS_KEY_ATTRIBUTE_VISIBILITY;
    var $CLASS_KEY_OPERATIONS;
    var $CLASS_KEY_OPERATIONS1;
    var $CLASS_KEY_OPERATIONS2;
    var $CLASS_KEY_OPERATIONS3;
    var $CLASS_KEY_OPERATIONS4;

    // ASSOCIATION ATTRIBUTES
    var $association_id;
    var $association_field_count = 0;
    var $association_handle;

    // ASSOCIATION CONTROL KEYS
    var $ASSOCIATION_KEY_NAME;
    var $ASSOCIATION_KEY_NAME2;
    var $ASSOCIATION_KEY_NAME3;
    var $ASSOCIATION_KEY_HANDLE;

    // GENERALIZATION ATTRIBUTES
    var $generaliration_id;
    var $generaliration_field_count = 0;
    var $generaliration_handle;

    // GENERALIZATION CONTROL KEYS
    var $GENERALIZATION_KEY_NAME;
    var $GENERALIZATION_KEY_HANDLE;

    // COMPONENT ATTRIBUTES
    var $component_id;

    // COMPONENT CONTROL KEYS
    var $COMPONENT_KEY_NAME;
    var $COMPONENT_KEY_STRING;

    // CONSTRUCTOR
    Function xml_parser()
    {
        $this->parser = xml_parser_create();
        xml_set_object($this->parser, &$this);
        xml_set_element_handler($this->parser, "tag_open", "tag_close");
        xml_set_character_data_handler($this->parser, "cdata");
    }

    // XML PARSE
    function parse($data)
    {
        xml_parse($this->parser, $data);
    }

    // XML TAG(OPEN)
    function tag_open($parser, $tag, $attributes)
    {
        // SELECT class_id CLASS
        if ( $attributes["TYPE"] == "UML - Class")
        {
            $this->class_id = $attributes["ID"];
            $this->data[$this->class_id]["TYPE"] = "UML - Class";
            $this->CLASS_KEY_NAME = true;
            $this->CLASS_KEY_OP = false;
        }

        // CLASS KEY COMMENT
        elseif ( $attributes["NAME"] == "comment" && !($this->data[$this->class_id]["COMMENT"]) )
        $this->CLASS_KEY_COMMENT = true;

        // CLASS KEY ATTRIBUTE
        elseif ( $attributes["NAME"] == "name" && $this->class_id && !$this->CLASS_KEY_NAME )
        $this->CLASS_KEY_ATTRIBUTE = true;

        // CLASS KEY ATTRIBUTE_TYPE
        elseif ( $attributes["NAME"] == "type" && $this->class_id && !$this->CLASS_KEY_OP )
        $this->CLASS_KEY_ATTRIBUTE_TYPE = true;

        // CLASS KEY ATTRIBUTE_VALUE
        elseif ( $attributes["NAME"] == "value" && $this->class_id )
        $this->CLASS_KEY_ATTRIBUTE_VALUE = true;

        // CLASS KEY ATTRIBUTE_COMMENT
        elseif ( $attributes["NAME"] == "comment" && $this->class_id )
        $this->CLASS_KEY_ATTRIBUTE_COMMENT = true;

        // CLASS KEY && SELECT ATTRIBUTE CLASS_SCOPE(SEQUENCE: BOOLEAN)
        elseif ( ( $attributes["NAME"] == "class_scope" || $this->CLASS_KEY_ATTRIBUTE_CLASS_SCOPE ) && $this->class_id )
        {
            $this->CLASS_KEY_ATTRIBUTE_CLASS_SCOPE = true;
            if ( $attributes["VAL"] )
            {
                $this->CLASS_KEY_ATTRIBUTE_CLASS_SCOPE = false;
                $this->data[$this->class_id]["ATTRIBUTE"][$this->class_field_count]["CLASS_SCOPE"] = $attributes["VAL"];
            }
        }

        // CLASS KEY && SELECT ATTRIBUTE VISIBILITY(0:PUBLIC, 1:PRIVATE[unique index], 2:PROTECTED[primary key], 3:IMPLEMENTATION[index])
        elseif ( ( $attributes["NAME"] == "visibility" || $this->CLASS_KEY_ATTRIBUTE_VISIBILITY ) && $this->class_id )
        {
            $this->CLASS_KEY_ATTRIBUTE_VISIBILITY = true;
            if ( $attributes["VAL"] )
            {
                $this->CLASS_KEY_ATTRIBUTE_VISIBILITY = false;
                $this->data[$this->class_id]["ATTRIBUTE"][$this->class_field_count]["VISIBILITY"] = $attributes["VAL"];
            }
        }

        // CLASS KEY && SELECT OPERATORS
        elseif ( $attributes["NAME"] == "operations" )
        {
            $this->CLASS_KEY_OPERATIONS = true;
            $this->CLASS_KEY_OP = true;
        }
        elseif ( $attributes["TYPE"] == "umloperation" && $this->CLASS_KEY_OPERATIONS )
        $this->CLASS_KEY_OPERATIONS1 = true;

        // SELECT association_id ASSOCIATION
        if (( $attributes["TYPE"] == "UML - Association") or ($attributes["TYPE"] == "Standard - ZigZagLine"))
        {
            $this->association_id = $attributes["ID"];
            $this->data[$this->association_id]["TYPE"] = $attributes["TYPE"];
            if ( $attributes["TYPE"] == "Standard - ZigZagLine" )
            {
                $this->ASSOCIATION_KEY_NAME = true;
                $this->ASSOCIATION_KEY_NAME3 = false;
                $this->data[$this->association_id]["NAME"] = '';
                $this->data[$this->association_id]["ARROW"] = array( 'true', 'false' );
            }
            else
            {
                $this->ASSOCIATION_KEY_NAME = true;
                $this->ASSOCIATION_KEY_NAME3 = true;
            }
        }

        // SELECT ASSOCIATION HANDLE, TO, CONNECTION
        elseif ( $this->ASSOCIATION_KEY_NAME && ( $attributes["HANDLE"] || $attributes["TO"] || $attributes["CONNECTION"] ) )
        {
            $this->association_handle = $attributes["HANDLE"];
            $this->data[$this->association_id][$this->association_handle]["TO"] = $attributes["TO"];
            $this->data[$this->association_id][$this->association_handle]["CONNECTION"] = $attributes["CONNECTION"];
        }

        // ASSOCIATION KEY ARROW
        if ( $attributes["NAME"] == "arrow" )
        {
            $this->ASSOCIATION_KEY_HANDLE = true;
        }

        // SELECT ASSOCIATION ARROW
        elseif ( $this->ASSOCIATION_KEY_HANDLE )
        {
            $this->ASSOCIATION_KEY_HANDLE = false;
            $this->data[$this->association_id]["ARROW"][] = $attributes["VAL"];
        }

        // ASSOCIATION KEY NAME
        if ( $attributes["NAME"] == "name" && $this->ASSOCIATION_KEY_NAME3 )
        {
            $this->ASSOCIATION_KEY_NAME2 = true;
        }

        // SELECT generalization_id GENERALIZATION
        if ( $attributes["TYPE"] == "UML - Generalization")
        {
            $this->ASSOCIATION_KEY_NAME = false;
            $this->generalization_id = $attributes["ID"];
            $this->data[$this->generalization_id]["TYPE"] = "UML - Generalization";
            $this->GENERALIZATION_KEY_NAME = true;
        }

        // SELECT GENERALIZATION HANDLE, TO, CONNECTION
        elseif ( $this->GENERALIZATION_KEY_TO && ( $attributes["HANDLE"] || $attributes["TO"] || $attributes["CONNECTION"] ) )
        {
            $this->generalization_handle = $attributes["HANDLE"];
            $this->data[$this->generalization_id][$this->generalization_handle]["TO"] = $attributes["TO"];
            $this->GENERALIZATION_KEY_NAME = false;
            $this->GENERALIZATION_KEY_TO = false;
        }
        elseif ( $this->GENERALIZATION_KEY_NAME && ( $attributes["HANDLE"] || $attributes["TO"] || $attributes["CONNECTION"] ) )
        {
            $this->GENERALIZATION_KEY_NAME = false;
            $this->GENERALIZATION_KEY_TO = true;
            $this->generalization_handle = $attributes["HANDLE"];
            $this->data[$this->generalization_id][$this->generalization_handle]["FROM"] = $attributes["TO"];
        }

        // SELECT component_id COMPONENT
        if ( $attributes["TYPE"] == "UML - Component")
        {
            $this->component_id = $attributes["ID"];
            $this->data[$this->component_id]["TYPE"] = "UML - Component";
            $this->COMPONENT_KEY_NAME = true;
        }

        // SELECT text COMPONENT
        elseif ( $attributes["NAME"] == "string" )
        {
            $this->COMPONENT_KEY_STRING = true;
        }

    }

    // XML DATA
    function cdata($parser, $cdata)
    {
        //SELECT NAME ASSOCIATION
        if ( trim($cdata) && $this->ASSOCIATION_KEY_NAME2 )
        {
            $this->data[$this->association_id]["NAME"] = str_replace('#','',$cdata);
        }

        // SELECT NAME CLASS
        elseif ( trim($cdata) && $this->CLASS_KEY_NAME )
        {
            $this->data[$this->class_id]["NAME"] = str_replace('#','',$cdata);
            $this->CLASS_KEY_NAME = false;
        }

        // SELECT DESCRIPTION CLASS
        elseif ( trim($cdata) && $this->CLASS_KEY_COMMENT )
        {
            $this->data[$this->class_id]["COMMENT"] = str_replace('#','',$cdata) ? str_replace('#','',$cdata) : $this->data[$this->class_id]["COMMENT"];
            $this->CLASS_KEY_COMMENT = false;
        }

        // SELECT ATTRIBUTE CLASS
        elseif ( trim($cdata) && $this->CLASS_KEY_ATTRIBUTE && !$this->CLASS_KEY_OP )
        {
            if ( str_replace('#','',$cdata) )
            $this->data[$this->class_id]["ATTRIBUTE"][(++$this->class_field_count)]["NAME"] = str_replace('#','',$cdata);
            $this->CLASS_KEY_ATTRIBUTE = false;
        }

        // SELECT ATTRIBUTE TYPE CLASS
        elseif ( trim($cdata) && $this->CLASS_KEY_ATTRIBUTE_TYPE )
        {
            if ( str_replace('#','',$cdata) )
            $this->data[$this->class_id]["ATTRIBUTE"][$this->class_field_count]["TYPE"] = str_replace('#','',$cdata);
            $this->CLASS_KEY_ATTRIBUTE_TYPE = false;
        }

        // SELECT ATTRIBUTE VALUE CLASS
        elseif ( trim($cdata) && $this->CLASS_KEY_ATTRIBUTE_VALUE )
        {
            if ( str_replace('#','',$cdata) )
            $this->data[$this->class_id]["ATTRIBUTE"][$this->class_field_count]["VALUE"] = str_replace('#','',$cdata);
            $this->CLASS_KEY_ATTRIBUTE_VALUE = false;
        }

        // SELECT ATTRIBUTE COMMENT CLASS
        elseif ( trim($cdata) && $this->CLASS_KEY_ATTRIBUTE_COMMENT )
        {
            if ( str_replace('#','',$cdata) )
            $this->data[$this->class_id]["ATTRIBUTE"][$this->class_field_count]["COMMENT"] = str_replace('#','',$cdata);
            $this->CLASS_KEY_ATTRIBUTE_COMMENT = false;
        }

        // SELECT OPERATIONS NAME
        if ( trim($cdata) && $this->CLASS_KEY_OPERATIONS1 )
        {
            if ( str_replace('#','',$cdata) )
            {
                $this->data[$this->class_id]["OPERATOR"][++$this->op_count]["NAME"] = str_replace('#','',$cdata);
                $this->CLASS_KEY_OPERATIONS2 = true;
                $this->CLASS_KEY_OPERATIONS1 = false;
                $this->CLASS_KEY_OPERATIONS4 = 0;
            }
        }

        // SELECT OPERATIONS TYPE
        elseif ( $this->CLASS_KEY_OPERATIONS2 && $this->CLASS_KEY_OPERATIONS4 == 14 )
        {
            if ( str_replace('#','',$cdata) )
            {
                $this->CLASS_KEY_OPERATIONS3 = true;
                $this->CLASS_KEY_OPERATIONS2 = false;
                $this->data[$this->class_id]["OPERATOR"][$this->op_count]["TYPE"] = str_replace('#','',$cdata);
            }
        }

        // SELECT OPERATIONS PARAMETERS
        elseif ( $this->CLASS_KEY_OPERATIONS3 )
        {
            if ( str_replace("\n","",str_replace('#','',$cdata)) && strstr($cdata,"#") )
            {
                $this->data[$this->class_id]["OPERATOR"][$this->op_count]["PARAMETER"][] = str_replace('#','',$cdata);
            }
        }
        $this->CLASS_KEY_OPERATIONS4++;

        // SELECT NAME COMPONENT
        if ( trim($cdata) && $this->COMPONENT_KEY_NAME )
        {
            $this->data[$this->component_id]["NAME"] = str_replace('#','',$cdata);
            $this->COMPONENT_KEY_NAME = false;
        }

        // SELECT NAME COMPONENT
        elseif ( trim($cdata) && $this->COMPONENT_KEY_STRING )
        {
            $this->data[$this->component_id]["STRING"][] = str_replace('#','',$cdata);
        }

    }

    // XML TAG(CLOSE)
    function tag_close($parser, $tag)
    {

        //LAST OPERATOR PARAMETER
        if ( strstr(strtoupper($tag),"OBJECT") )
        {
            $this->CLASS_KEY_OPERATIONS3 = false;
            $this->CLASS_KEY_OP = false;
        }

        // LAST COMPONENT TEXT
        if ( strstr(strtolower($tag),"string") )
        {
            $this->COMPONENT_KEY_STRING = false;
        }

        // ASSOCIATION NAME
        if ( $this->ASSOCIATION_KEY_NAME2 )
        {
            $this->ASSOCIATION_KEY_NAME2 = false;
            $this->ASSOCIATION_KEY_NAME3 = false;
        }

    }

}

/************************************\
 | dia2sql class                        |
 | ------------------------------------ |
 | This class read xml_parser return da |
 | ta and generate sql files.           |
 \************************************/

class dia2sql
{

    // ATTRIBUTES
    var $data;
    var $path;
    var $format;
    var $content;

    // CONSTRUCTOR
    function dia2sql($format,$data,$path,$many=false,$lower=true)
    {
        $this->data = $data; //XML2ARRAY data
        $this->path = $path; //SQL FILES PATH
        $this->format = $format; // DB FORMAT

        $this->GenerateContent($lower);

        if ( $many )
        {
            $this->GenerateFiles();
        }
        else
        {
            $this->GenerateFile();
        }
    }

    // GENERATE DATA FROM SQL FILES
    function GenerateContent($lower)
    {
        // INCLUDE RESPECTIVE DBLIB
        require_once("dblibs/" . $this->format . ".class");

        if ( $lower == true )
        {
            foreach ( $this->data as $_key => $_value )
            {
                if ( $_value["TYPE"] == "UML - Class" )
                {
                    $this->data[$_key]["NAME"] = strtolower($_value["NAME"]);
                    //$this->data[$_key]["COMMENT"] = strtolower($_value["COMMENT"]);
                    $this->data[$_key]["COMMENT"] = $_value["COMMENT"];
                    if ( count($_value["ATTRIBUTE"])>0 )
                    {
                        foreach ( $_value["ATTRIBUTE"] as $__key => $__value )
                        {
                            $this->data[$_key]["ATTRIBUTE"][$__key]["NAME"] = strtolower($__value["NAME"]);
                            $this->data[$_key]["ATTRIBUTE"][$__key]["TYPE"] = strtolower($__value["TYPE"]);
                        }
                    }
                    if ( count($_value["OPERATOR"])>0 )
                    {
                        foreach ( $_value["OPERATOR"] as $__key => $__value )
                        {
                            $this->data[$_key]["OPERATOR"][$__key]["NAME"] = strtolower($__value["NAME"]);
                            $this->data[$_key]["OPERATOR"][$__key]["TYPE"] = strtolower($__value["TYPE"]);
                            if ( count($__value["PARAMETER"])>0 )
                            {
                                foreach ( $__value["PARAMETER"] as $___key => $___value )
                                {
                                    $this->data[$_key]["OPERATOR"][$__key]["PARAMETER"][$___key] = strtolower($___value);
                                }
                            }
                        }
                    }
                }
                if (( $_value["TYPE"] == "UML - Association" ) or ($_value["TYPE"] == "Standard - ZigZagLine"))
                {
                    $this->data[$_key]["NAME"] = strtolower($_value["NAME"]);
                }
            }
        }

        // DATA LOOPING
        foreach ( $this->data as $id => $value )
        {
            // CLASS
            if ( $value["TYPE"] == "UML - Class" )
            {
                $this->content[$id]["FILE"]     = $value["NAME"] . ".sql";
                $this->content[$id]["CONTENT"] .= DB::GetHeader($value["NAME"],$value["COMMENT"]);
                $this->content[$id]["CONTENT"] .= DB::GetClass($value["NAME"],$value["ATTRIBUTE"]);
                $this->content[$id]["CONTENT"] .= DB::GetComments($value["NAME"],$value["ATTRIBUTE"],$value["COMMENT"]);
                $this->content[$id]["CONTENT"] .= DB::GetDefaultsSequences($value["NAME"],$value["ATTRIBUTE"]);
                $this->content[$id]["CONTENT"] .= DB::GetPkeys($value["NAME"],$value["ATTRIBUTE"]);
                $this->content[$id]["CONTENT"] .= DB::GetOperators($value["NAME"],$value["OPERATOR"]);
            }
        }

        // DATA LOOPING
        foreach ( $this->data as $id => $value )
        {
            // CLASS
            if ( $value["TYPE"] == "UML - Class" )
            {
                if ( count($value["ATTRIBUTE"])>0 )
                {
                    foreach ( $value["ATTRIBUTE"] as $row )
                    {
                        if ( $row["VISIBILITY"] == 2 )
                        {
                            $this->keys[$id][] = $row["NAME"];
                        }
                    }
                }
            }
        }

        // DATA LOOPING
        foreach ( $this->data as $id => $value )
        {
            // GENERALIZATION
            if ( $value["TYPE"] == "UML - Generalization" )
            {
                $string = DB::GetInherits( $value["0"]["FROM"], $this->data);
                $this->content[$value["1"]["TO"]]["CONTENT"] = str_replace("\n);","\n) " . $string . ";",$this->content[$value["1"]["TO"]]["CONTENT"]);
                $this->content[$value["1"]["TO"]]["CONTENT"] .= DB::GetPkeys($this->data[$value["1"]["TO"]]["NAME"], $this->data[$value["0"]["FROM"]]["ATTRIBUTE"]);
                foreach ( $this->data[$value["0"]["FROM"]]["ATTRIBUTE"] as $row )
                {
                    if ( $row["VISIBILITY"] == "2" )
                    {
                        $key = @max(@array_keys($this->data[$value["1"]["TO"]]["ATTRIBUTE"]))+1;
                        $this->data[$value["1"]["TO"]]["ATTRIBUTE"][$key]["NAME"] = $row["NAME"];
                        $this->data[$value["1"]["TO"]]["ATTRIBUTE"][$key]["VISIBILITY"] = $row["VISIBILITY"];
                    }
                }
            }
        }

        // DATA LOOPING
        // GROUP FKEYS
        foreach ( $this->data as $id => $value )
        {
            // ASSOCIATION
            if (( $value["TYPE"] == "UML - Association" ) or ($value["TYPE"] == "Standard - ZigZagLine"))
            {
                $a[] = DB::GetFkeysPkeys($value["0"]["TO"],$value["0"]["CONNECTION"],$value["1"]["TO"],$value["1"]["CONNECTION"], $this->data, $this->keys);
            }
        }
        $x=0;
        if ( $a )
        {
            foreach ( $a as $row )
            {
                $a1 = @array_keys($row);    // classes de origem e destino
                $a2 = @array_values($row);  // attributos de origem e destino das classes

                if ( !(@in_array($a2[0],$array_fkeys[$a1[0]]) && @in_array($a2[1],$array_fkeys[$a1[1]])) && ($a2[0] && $a2[1]) )
                {
                    $array_fkeys["origem"][$a1[0]][$x] = $a2[0];
                    $array_fkeys["destino"][$a1[1]][$x++] = $a2[1];
                }
            }
        }

        foreach ( $this->data as $id => $value )
        {
            // ASSOCIATION
            if (( ($value["TYPE"] == "UML - Association") or ($value["TYPE"] == "Standard - ZigZagLine")) && !$key_fkey_group[$value["0"]["TO"]][$value["1"]["TO"]] )
            {
                $this->content[$value["0"]["TO"]]["CONTENT"] .= DB::GetFkeysGroup($value["0"]["TO"],$value["1"]["TO"], $this->data, $this->keys, $array_fkeys );
                $key_fkey_group[$value["0"]["TO"]][$value["1"]["TO"]] = true;
            }
        }
        // DATA LOOPING
        foreach ( $this->data as $id => $value )
        {
            // ASSOCIATION
            if (( $value["TYPE"] == "UML - Association" ) or ($value["TYPE"] == "Standard - ZigZagLine"))
            {
                $this->content[$value["0"]["TO"]]["CONTENT"] .= DB::GetFkeys($value["0"]["TO"],$value["0"]["CONNECTION"],$value["1"]["TO"],$value["1"]["CONNECTION"], $this->data, $this->keys, $array_fkeys, $value["NAME"]);
            }
        }

        // DATA LOOPING
        foreach ( $this->data as $id => $value )
        {
            // COMPONENTS
            if ( $value["TYPE"] == "UML - Component" )
            {
                foreach ( $this->data as $id_ => $row )
                {
                    if ( strtolower($row["NAME"]) == strtolower($value["NAME"]) && $row["TYPE"] == "UML - Class" )
                    {
                        $this->content[$id_]["CONTENT"] .= DB::GetInserts($value["NAME"],$value["STRING"]);
                    }
                }
            }
        }
    }

    // CREATE SQL FILES (each table in it's own file)
    function GenerateFiles()
    {
        // CREATE PATH DIR
        if ( substr($this->path,-1) == '/' )
        $this->path = substr($this->path,0,strlen($this->path)-1);
        if ( !( file_exists($this->path) && is_dir($this->path) ) )
        {
            $dirs = explode('/',$this->path);
            foreach ( $dirs as $r )
            {
                if ( $r == "" )
                $dir .= '/';
                else
                $dir .= $r . '/';

                if ( !@mkdir ( $dir , 0777 ) && !file_exists($dir) )
                {
                    die("Permission denied.\n");
                    exit;
                }
            }
        }
        // PUT SQL FILES
        foreach ( $this->content as $row )
        {
            if ( $fp = @fopen( $this->path . '/' . $row["FILE"], 'w' ) )
            {
                while ( strpos($row["CONTENT"],"\n\n\n")>0 )
                {
                    $row["CONTENT"] = str_replace("\n\n\n","\n\n",$row["CONTENT"]);
                }
                @fputs ( $fp, $row["CONTENT"] );
                @fclose( $fp );
            }
        }
    }

    // CREATE ONLY ONE FILE, IF FILENAME IS A DIR, PUT 'output.sql' IN THE DIR
    function GenerateFile()
    {
        $tables = $this->getInstall();

        // path is either a dir to put the output sql into or a filename to use instead of output.sql
        if (is_dir($this->path))
        {
            $this->path .= (( substr($this->path,-1) == '/' ) ? 'output.sql' : '/output.sql');
        }
        if ($fp = @fopen($this->path, 'w'))
        {
            foreach ( $tables as $key => $row )
            {
                while ( strpos($this->content[$key]["CONTENT"],"\n\n\n")>0 )
                {
                    $this->content[$key]["CONTENT"] = str_replace("\n\n\n","\n\n",$this->content[$key]["CONTENT"]);
                }
                @fputs($fp, $this->content[$key]["CONTENT"]);
            }
            @fclose($fp);
        }
    }

    // SQL FILES LIST
    function getInstall()
    {
        foreach ( $this->data as $id => $value )
        {
            // ASSOCIATION
            if ( $value["TYPE"] == "UML - Class" )
            {
                $aux_tables[$id] = $value["NAME"];
                $classes[$id] = $value;
            }
        }

        $x=0;
        foreach ( $this->data as $id => $value )
        {
            if (( $value["TYPE"] == "UML - Association" ) or ($value["TYPE"] == "Standard - ZigZagLine"))
            {
                $aux_assoc[]["FROM"] = $value[0]["TO"];
                if ( strlen($value["NAME"])>0 )
                {
                    $key = false;
                    foreach ( $classes as $id2 => $value2 )
                    {
                        if ( $value2["NAME"] == $value["NAME"] )
                        {
                            $aux_assoc[]["TO"] = $id2;
                            $key = true;
                        }
                    }
                    if ( $key != true )
                    {
                        $aux_assoc[]["TO"] = $value[1]["TO"];
                    }
                }
                else
                {
                    $aux_assoc[]["TO"] = $value[1]["TO"];
                }
            }
        }
        foreach ( $this->data as $id1 => $value1 )
        {
            if ( $value1["TYPE"] == "UML - Generalization" )
            {
                $aux_assoc[]["FROM"] = $value1[1]["TO"];
                $aux_assoc[]["TO"] = $value1[0]["FROM"];
            }
        }

        //se a tabela nao tiver referencias nem for referenciada
        foreach ( $aux_tables as $id => $value )
        {
            $chave = true;
            for($q=0;$q<count($aux_assoc);$q++)
            {
                if ( $id == $aux_assoc[$q]["FROM"] || $id == $aux_assoc[++$q]["TO"] )
                {
                    $chave = false;
                }
            }
            if ( $chave )
            {
                $tables[$id] = $value;
            }
        }

        //se a tabela nao tiver referencias
        foreach ( $aux_tables as $id => $value )
        {
            $chave = true;
            for($q=0;$q<count($aux_assoc);$q++)
            {
                if ( $id == $aux_assoc[$q++]["FROM"] )
                {
                    $chave = false;
                }
            }
            if ( $chave )
            {
                $tables[$id] = $value;
            }
        }

        //demais
        $x=0;


        while ( (count($aux_tables) != count($tables)) || $count_error++ >= 10 ) //($count_error++ == 1000) probaly user error
        {
            //percorre as tabelas
            foreach ( $aux_tables as $id => $value )
            {
                $chave = true;
                //percorre todas as referrências
                for($q=0;$q<count($aux_assoc);$q++)
                {
                    //se a tabela (id) tiver uma referencia para outra tabela
                    if ( $id == $aux_assoc[$q]["FROM"] )
                    {
                        //se a tabela para onde ela aponta ja estiver na tabelas finais,
                        //a tabela corrente (id) tb pode ser incluida
                        if ( in_array($aux_assoc[1+$q]["TO"],array_keys($tables)) )
                        {
                            $chave = true;
                        }
                        //caso ela nao esteja, a mesma nao poderá ser incluida
                        else
                        {
                            //var_dump($aux_assoc[$q]["FROM"],$aux_assoc[1+$q]["TO"]);
                            $chave = false;
                            break;
                        }
                    }
                    $q++;
                } //fima das referências
                if ( $chave == true)
                {
                    //se ela já nao estiver nas tabelas finais, inclui a mesma
                    if ( !in_array($value,$tables) )
                    $tables[$id] = $value;
                }
            }
        }
        return $tables;
    }
}

?>
