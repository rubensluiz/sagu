<?php

/*********************************************\
 | dia2sql.php v. 1.2.6                          |
 | ----------------------------------------------|
 | Daniel Afonso Heisler (daniel@solis.coop.br)  |
 \*********************************************/

class DB
{

    function DB()
    {

    }

    // RETURN HEADER WITH PURPOSE FROM CLASS
    function GetHeader($class,$purpose=null)
    {

        // HEADER RETURN STRING
        $size = 59; //number of caracters in one purpose row
        $string = "----------------------------------------------------------------------\n" .
                  "-- --\n" .
                  "--\n" .
                  "-- Table: $class\n" .
                  "-- Purpose: ";

        // IF 1 ROW PURPOSE
        if ( strlen($purpose) < $size )
        {
            $string .= $purpose . "\n";
        }

        // ELSEIF MORE THAN 1 ROW PURPOSE
        else
        {

            // break all words and divide them into lines
            unset($line);
            $line_num = 0;
            $words = explode(" ",$purpose);
            for ( $i=0; $i<count($words); $i++ )
            {
                $line[$line_num] .= $words[$i] . " ";
                if ( strlen($line[$line_num] . $words[$i+1]) >= $size )
                {
                    $line_num++;
                }
            }
            // print out formed lines
            $string .= $line[0] . "\n";
            for ( $i=1; $i<$line_num+1; $i++ )
            {
                $string .= "--          " . $line[$i] . "\n";
            }
        }

        $string .= "--\n" .
                   "-- --\n" .
                   "----------------------------------------------------------------------\n\n";

        return $string;
    }

    // RETURN BODY TABLE
    function GetClass($name,$attributes)
    {

        // SIZES(>), NAME AND TYPE
        if ( count($attributes)>0 )
        {
            foreach ( $attributes as $row )
            {
                $size_name = ( strlen($row["NAME"]) > $size_name ) ? strlen($row["NAME"]) : $size_name;
            }
        }
        $count_fields = count($attributes);

        // TABLE HEADER
        $string = "CREATE TABLE \"$name\" \n(\n";

        // TABLE BODY
        if ( count($attributes)>0 )
        {
            foreach ( $attributes as $row )
            {
                // ATTRIBUTE NAME
                $string .= "    \"" . $row["NAME"] . '"';
                // SPACES
                for ( $x=strlen($row["NAME"]); $x < $size_name; $x++ )
                $string .= ' ';
                // ATTRIBUTE TYPE
                $string .= "    " . $row["TYPE"];
                // LAST ROW(,)
                if ( ++$y < $count_fields )
                $string .= ',';
                // COMMENT
                if ( $row["COMMENT"] )
                $string .= " --" . $row["COMMENT"];
                $string .= "\n";
            }
        }

        // TABLE FOOTER
        $string .= ");\n\n";

        return $string;
    }

    // COMMENTS
    function GetComments($name,$attributes,$purpose=null)
    {
        // CLASS COMMENT
        if ( $purpose )
        $string .= "COMMENT ON TABLE \"" . $name . "\" IS '" . $purpose . "';\n";

        // ATTRIBUTES COMMENT
        if ( count($attributes)>0 )
        {
            foreach ( $attributes as $row )
            {
                // COMMENT
                if ( $row["COMMENT"] )
                $string .= "COMMENT ON COLUMN \"" . $name . '"."' . $row["NAME"] . "\" IS '" . $row["COMMENT"] . "';\n";
            }
        }
        $string .= "\n";

        return $string;
    }

    // GENERATE SEQUENCES AND DEFAULT VALUES
    function GetDefaultsSequences($name,$attributes)
    {
        if ( count($attributes)>0 )
        {
            foreach ( $attributes as $row )
            {
                if ( $row["CLASS_SCOPE"] == "true" )
                {
                    $string .= "CREATE SEQUENCE \"seq_" . $row["NAME"] . "\";\n" .
                               "ALTER TABLE \"$name\" ALTER COLUMN \"" . $row["NAME"] . "\" SET DEFAULT NEXTVAL('\"seq_" . $row["NAME"] . "\"');\n";
                }
                elseif ( $row["VALUE"] )
                {
                    if ( trim(strtolower($row["VALUE"])) == trim("not null") || trim(strtolower($row["VALUE"])) == trim("null") )
                    $string .= "ALTER TABLE \"$name\" ALTER COLUMN \"" . $row["NAME"] . "\" SET " . $row["VALUE"] . ";\n";
                    elseif ( strlen(trim(strtolower($row["VALUE"]))) > strlen(trim("not null")) || strlen(trim(strtolower($row["VALUE"]))) > strlen(trim("null")) )
                    {
                        if ( strstr($row["VALUE"], 'NOT NULL') )
                        {
                            $val = explode('NOT NULL', $row["VALUE"]);
                            $string .= "ALTER TABLE \"$name\" ALTER COLUMN \"" . $row["NAME"] . "\" SET NOT NULL;\n";
                        }
                        else
                        $val = explode('NULL', $row["VALUE"]);
                        if ( strlen($val[0]) > 0 )
                        $val = $val[0];
                        else
                        $val = $val[1];
                        $string .= "ALTER TABLE \"$name\" ALTER COLUMN \"" . $row["NAME"] . "\" SET DEFAULT " . $val . ";\n";
                    }
                    else
                    $string .= "ALTER TABLE \"$name\" ALTER COLUMN \"" . $row["NAME"] . "\" SET DEFAULT " . $row["VALUE"] . ";\n";
                }
            }
        }
        $string .= "\n";
        return $string;
    }

    // PRIMARY KEYS
    function GetPkeys($name,$attributes)
    {
        if ( count($attributes)>0 )
        {
            foreach ( $attributes as $row )
            {
                if ( $row["VISIBILITY"] == 2 )
                {
                    $string .= "ALTER TABLE \"$name\" ALTER COLUMN \"" . $row["NAME"] . "\" SET NOT NULL;\n";
                    $aux .= '"' . $row["NAME"] . "\",";
                }
            }
            $aux = substr($aux,0,strlen($aux)-1);
        }
        if ( $aux )
        $string .= "ALTER TABLE \"$name\" ADD PRIMARY KEY ($aux);\n\n";

        return $string;
    }

    // OPERATORS
    function GetOperators($name,$operators)
    {

        if ( $operators )
        {
            foreach ( $operators as $key => $row )
            {
                // GRANTS
                if ( trim(strtolower($row["TYPE"])) == trim("grant") )
                {
                    $string .= "GRANT " . $row["NAME"] . " ON \"" . $name . "\" TO ";
                    foreach ( $row["PARAMETER"] as $r )
                    $string .= $r . ",";
                    $string = substr($string,0,strlen($string)-1) . ";\n";
                }
                // REVOKES
                elseif ( trim(strtolower($row["TYPE"])) == trim("revoke") )
                {
                    $string .= "REVOKE " . $row["NAME"] . " ON \"" . $name . "\" FROM ";
                    foreach ( $row["PARAMETER"] as $r )
                    $string .= $r . ",";
                    $string = substr($string,0,strlen($string)-1) . ";\n";
                }
                // INDEXES
                elseif ( trim(strtolower($row["TYPE"])) == trim("index") )
                {
                    $string .= "CREATE INDEX \"" . $row["NAME"] . "\" ON \"" . $name . "\" (";
                    foreach ( $row["PARAMETER"] as $r )
                    $string .= '"' . $r . "\",";
                    $string = substr($string,0,strlen($string)-1) . ");\n";
                }
                // UNIQUE INDEXES
                elseif ( trim(strtolower($row["TYPE"])) == trim(" unique index") )
                {
                    $string .= "CREATE UNIQUE INDEX \"" . $row["NAME"] . "\" ON \"" . $name . "\" (";
                    foreach ( $row["PARAMETER"] as $r )
                    $string .= '"' . $r . "\",";
                    $string = substr($string,0,strlen($string)-1) . ");\n";
                }
            }
        }
        $string .= "\n";
        return $string;
    }

    // FOREIGN KEYS
    function GetFkeys($class1, $field1, $class2, $field2, $attributes, $keys=array(), $array_fkeys=array(), $n_class3=null)
    {

        // TABLES NAMES
        $n_class1 = $attributes[$class1]["NAME"];
        $n_class2 = strlen($n_class3)>0 ? $n_class3 : $attributes[$class2]["NAME"];
        $fields1 = $array_fkeys["origem"][$class1];
        $fields2 = $array_fkeys["destino"][$class2];
        $k_1 = @array_keys($fields1);
        $k_2 = @array_keys($fields2);

        $count = 8;
        // FIELDS NAMES
        foreach ( $attributes[$class1]["ATTRIBUTE"] as $row )
        {
            if ( $count == $field1 || ($count+1) == $field1 )
            {
                $n_field1 = $row["NAME"];
            }
            $count+=2;
        }
        $count = 8;
        foreach ( $attributes[$class2]["ATTRIBUTE"] as $row )
        {
            if ( $count == $field2 || ($count+1) == $field2 )
            {
                $n_field2 = $row["NAME"];
            }
            $count+=2;
        }

        unset($qqq);
        if ( count($fields2)>0 )
        {
            foreach ( $fields2 as $qq )
            {
                if ( !@in_array($qq,$qqq) )
                {
                    $qqq[] = $qq;
                }
                if ( $qq % 2 == 0 )
                $qq++;
                else
                $qq--;
                if ( !@in_array($qq,$qqq) )
                {
                    $qqq[] = "$qq";
                }
            }
            if ( ( count($qqq) == 2 && in_array($field2,$fields2)) || (count($qqq)>2 && !in_array($field2,$fields2)) )
            {
                $string .= "ALTER TABLE \"" . $n_class1 . "\" ADD FOREIGN KEY (\"" . $n_field1 . "\") REFERENCES \"" . $n_class2 . "\"(\"" . $n_field2 . "\");\n";
                $string .= "\n";
            }
        }
        return $string;
    }

    // FOREIGN KEYS GROUP
    function GetFkeysGroup($class1, $class2, $attributes, $pkeys=array(), $array_fkeys=array())
    {

        // TABLES NAMES
        $n_class1 = $attributes[$class1]["NAME"];
        $n_class2 = $attributes[$class2]["NAME"];
        $fields1 = $array_fkeys["origem"][$class1];
        $fields2 = $array_fkeys["destino"][$class2];
        $k_1 = @array_keys($fields1);
        $k_2 = @array_keys($fields2);
        $k_val = @array_intersect($k_1,$k_2);

        if ( $k_val )
        {
            foreach ( $k_val as $r )
            {
                // FIELDS NAMES
                $count = 8;
                foreach ( $attributes[$class1]["ATTRIBUTE"] as $row )
                {
                    if ( $count == $fields1[$r] || ($count+1) == $fields1[$r] )
                    {
                        $n_field1[] = $row["NAME"];
                    }
                    $count+=2;
                }
                $count = 8;
                foreach ( $attributes[$class2]["ATTRIBUTE"] as $row )
                {
                    if ( $count == $fields2[$r] || ($count+1) == $fields2[$r] )
                    {
                        $n_field2[] = $row["NAME"];
                    }
                    $count+=2;
                }
            }
        }

        $b = array();
        if (count($n_field2))
        {
            foreach ( $n_field2 as $row )
            {
                if ( !@in_array($row,$b) )
                {
                    $b[] = $row;
                }
            }
        }
        $key = false;
        if ( count($b) == count($n_field2) )
        {
            $key = true;
        }

        if ( count($n_field2)>1 && count($n_field1)>1 && $key == true )
        {
            $string .= "ALTER TABLE \"" . $n_class1 . "\" ADD FOREIGN KEY (\"" . implode('","',$n_field1) . "\") REFERENCES \"" . $n_class2 . "\"(\"" . implode('","',$n_field2) . "\");\n";
            $string .= "\n";
        }

        return $string;
    }

    // FOREIGN KEYS IN PKEYS
    function GetFkeysPkeys($class1, $field1, $class2, $field2, $attributes, $keys=array())
    {
        // TABLES NAMES
        $n_class1 = $attributes[$class1]["NAME"];
        $n_class2 = $attributes[$class2]["NAME"];
        $count = 8;

        // FIELDS NAMES
        foreach ( $attributes[$class1]["ATTRIBUTE"] as $row )
        {
            if ( $count == $field1 || ($count+1) == $field1 )
            {
                $n_field1 = $row["NAME"];
            }
            $count+=2;
        }
        $count = 8;
        foreach ( $attributes[$class2]["ATTRIBUTE"] as $row )
        {
            if ( $count == $field2 || ($count+1) == $field2 )
            {
                $n_field2 = $row["NAME"];
            }
            $count+=2;
        }

        // STRING CONSTRAINT
        foreach ( $keys as $k => $row )
        {
            if ( $k == $class1 )
            {
                if ( (in_array($n_field1,$row) && count($keys[$class1])>0) )
                {
                    $array[$class1] = $field1;
                    $array[$class2] = $field2;
                }
            }
            if ( $k == $class2 )
            {
                if ( (in_array($n_field2,$row) && count($keys[$class2])>0) )
                {
                    $array[$class1] = $field1;
                    $array[$class2] = $field2;
                }
            }
        }

        return $array;
    }

    // INHERITS
    function GetInherits($class2, $attributes)
    {
        $n_class2 = $attributes[$class2]["NAME"];
        $string = "INHERITS " . "(\"$n_class2\")";
        return $string;
    }

    // INSERTS
    function GetInserts($class, $values)
    {
        foreach ( $values as $row )
        {
            $string .= "INSERT INTO \"$class\" VALUES ($row);\n";
        }
        $string .= "\n";
        return $string;
    }

}

?>

