/**
 * Listar formulários
 */
FormulariosListControl.exibe()
{
	login = Session::getValue('login');
	avaliacoes = Avaliacao.getAvaliacoesAbertas();
	foreach (avaliacoes as avaliacao)
	{
		formularios = avaliacao->getFormularios();
		foreach (formularios as formulario)
		{
			perfil = formulario->getPerfil();
			if  (perfil->validaServico(login))
			{
				if (formulario->verificaRegra(login))
				{
					// apresenta formulario
				}
			}
		}
	}
}

/**
 * Montagem do formulário
 */
FormularioFormControl.exibe(id)
{
	formulario = Formulario.getObject(id)
	blocos = formulario->getBlocos();
	foreach (blocos as bloco)
	{
		// adicionar uma seção no formulário
		questoes = bloco->getQuestoes();
		granularidade = bloco->getGranularidade();
		colunas = granularidade->executaMetodo(login);
		foreach (questoes as questao)
		{
			// adiciona linha
			foreach (colunas as coluna)
			{
				// adiciona coluna
				// exibe questao dentro da coluna
			}
		}
	}
}

/**
 * Relatório do professor
 */
RelatorioProfessorFormControl.onGenerate(avaliado)
{
	avaliado = Session::getValue('login');
	formularios = Avaliacao->getFormularios(); // retorna todos formulários daquela avaliação
	foreach (formularios as formulario)
	{
		perfil = formulario->getPerfil();
		if (perfil.descricao == "Discente") // formulário voltado para o aluno
		{
			blocos = formulario->getBlocos()
			foreach (blocos as bloco)
			{
				if (bloco->getGranularidade().descricao == "professor")
				{
					questoes = bloco->getQuestoes();
					foreach (questoes as questao)
					{
						disciplinas = questao->getAtributos(bloco, avaliado, 'codigo_disciplina');

						foreach (disciplinas as disciplina)
						{
							filtro->disciplina = disciplina;
							qtde_resp = bloco->getQuantRespostas(filtro, avaliado);
							if (qtde_resp >= 5)
							{
								media[questao.descricao][disciplina] =
                                                        	    questao->calculaMedia(bloco, avaliado, filtro);
								tem_respondentes = TRUE;
							}
						}

						if (tem_respondentes)
						{
							media_gp[questao.descricao] =
								questao->calculaMedia(bloco, avaliado);

							stdev_gp[questao.descricao] =
								questao->calculaStDev(bloco, avaliado);

							media_gc[questao.descricao] =
								questao->calculaMedia(bloco, null, filtro->centro=xxx);
							// stdev gc...

							media_gu[questao.descricao] =
								questao->calculaMedia(bloco, null, null);
							// stdev gu...
						}
					}
					// primeira linha, médias e desvios-padrão gerais das questões do bloco
					foreach (disciplinas as disciplina)
					{
						media_discp[disciplina] = bloco->calculaMedia(avaliado, filtro->disciplina=disciplina);
						// stdev discpl
					}
					media_bloco_gc = bloco->calculaMedia(avaliado, filtro->centro=xxx);
					// stdev bloco_gc

					media_bloco_gu = bloco->calculaMedia(avaliado, null);
					// stdev bloco_gu
				}
			}
		}
	}
}


/**
 * Relatório do coordenador
 */
RelatorioCoordenadorFormControl.onGenerate(avaliado)
{
	formularios = Avaliacao->getFormularios(); // retorna todos formulários daquela avaliação
	foreach (formularios as formulario)
	{
		perfil = formulario->getPerfil();
		if (perfil.descricao == "Discente")
		{
			blocos = formulario->getBlocos()
			foreach (blocos as bloco)
			{
				if (bloco->getGranularidade().descricao == "professor")
				{
					professores = bloco->getAtributos('codigo_professor');
					questoes = bloco->getQuestoes();
					foreach (professores as professor)
					{
						filtro->codigo_professor = professor;
						// retorna só as disciplinas daquele professor.
						disciplinas = bloco->getAtributos('codigo_disciplina', filtro);
						
						foreach (disciplinas as disciplina)
						{
							filtro->professor  = professor;
							filtro->disciplina = disciplina;
							qtde_resp = bloco->getQuantRespostas(filtro);
							if (qtde_resp >= 5)
							{
								// exibo nome professor - nome disciplina
								foreach (questoes as questao)
								{
									// Obter todas as disciplinas que teve ao menos 5 respondentes
							
									filtro->codigo_questao   = questao;
									avaliado = professor; // e na auto-avaliacao ?
									media_gp[professor.nome][questao.descricao] =
										questao->calculaMedia(bloco, avaliado, filtro);

									stdev_gp[professor.nome][questao.descricao] =
										questao->calculaStDev(bloco, avaliado, filtro);
								}
							}
						}
					}
				}
			}
		}
	}
}
